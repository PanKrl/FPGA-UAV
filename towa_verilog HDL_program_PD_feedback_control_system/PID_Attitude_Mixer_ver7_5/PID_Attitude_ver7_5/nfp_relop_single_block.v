// -------------------------------------------------------------
// 
// File Name: D:\fukuda\B4\HDLCoder\2023_12_15\PID_Attitude\PID_Attitude_Mixer_ver7_5\PID_Attitude_ver7_5\nfp_relop_single_block.v
// Created: 2024-02-07 16:17:48
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_relop_single_block
// Source Path: PID_Attitude_ver7_5/Motor_Controller/Thrust_Duty/nfp_relop_single
// Hierarchy Level: 3
// 
// {Latency Strategy = "Zero"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_relop_single_block
          (nfp_in1,
           nfp_in2,
           nfp_out1);


  input   [31:0] nfp_in1;  // ufix32
  input   [31:0] nfp_in2;  // ufix32
  output  nfp_out1;  // ufix1


  wire AS;  // ufix1
  wire [7:0] AE;  // ufix8
  wire [22:0] AM;  // ufix23
  wire [7:0] Constant2_out1;  // uint8
  wire Relational_Operator5_relop1;
  wire [22:0] Constant1_out1;  // ufix23
  wire Relational_Operator4_relop1;
  wire BS;  // ufix1
  wire [7:0] BE;  // ufix8
  wire [22:0] BM;  // ufix23
  wire Relational_Operator6_relop1;
  wire Relational_Operator2_relop1;
  wire [7:0] Constant_out1;  // uint8
  wire Relational_Operator3_relop1;
  wire Relational_Operator1_relop1;
  wire Logical_Operator_out1;
  wire Relational_Operator2_relop1_1;
  wire Relational_Operator4_relop1_1;
  wire Relational_Operator6_relop1_1;
  wire Relational_Operator5_relop1_1;
  wire Compare_To_Constant_out1;
  wire Logical_Operator3_out1;
  wire switch_compare_1;
  wire Relational_Operator1_relop1_1;
  wire Relational_Operator3_relop1_1;
  wire Logical_Operator1_out1;
  wire Logical_Operator2_out1;
  wire Logical_Operator7_out1;
  wire Logical_Operator5_out1;
  wire Constant8_out1;  // ufix1
  wire Logical_Operator1_out1_1;
  wire Logical_Operator4_out1;
  wire Logical_Operator1_out1_2;
  wire Logical_Operator5_out1_1;
  wire Logical_Operator2_out1_1;
  wire Logical_Operator3_out1_1;
  wire Logical_Operator_out1_1;
  wire Logical_Operator6_out1;
  wire Logical_Operator4_out1_1;
  wire Logical_Operator6_out1_1;
  wire Switch_out1;
  wire Logical_Operator4_out1_2;
  wire Logical_Operator5_out1_2;
  wire Constant1_out1_1;
  wire Switch1_out1;


  // Split 32 bit word into FP sign, exponent, mantissa
  assign AS = nfp_in1[31];
  assign AE = nfp_in1[30:23];
  assign AM = nfp_in1[22:0];



  assign Constant2_out1 = 8'b11111111;



  assign Relational_Operator5_relop1 = AE == Constant2_out1;



  assign Constant1_out1 = 23'b00000000000000000000000;



  assign Relational_Operator4_relop1 = Constant1_out1 == AM;



  // Split 32 bit word into FP sign, exponent, mantissa
  assign BS = nfp_in2[31];
  assign BE = nfp_in2[30:23];
  assign BM = nfp_in2[22:0];



  assign Relational_Operator6_relop1 = BE == Constant2_out1;



  assign Relational_Operator2_relop1 = Constant1_out1 == BM;



  assign Constant_out1 = 8'b00000000;



  assign Relational_Operator3_relop1 = Constant_out1 == BE;



  assign Relational_Operator1_relop1 = Constant_out1 == AE;



  assign Logical_Operator_out1 = Relational_Operator4_relop1 & (Relational_Operator1_relop1 & (Relational_Operator2_relop1 & Relational_Operator3_relop1));



  assign Relational_Operator2_relop1_1 = AS == BS;



  assign Relational_Operator4_relop1_1 = AE == BE;



  assign Relational_Operator6_relop1_1 = AM == BM;



  assign Relational_Operator5_relop1_1 = AS < BS;



  assign Compare_To_Constant_out1 = BS == 1'b1;



  assign Logical_Operator3_out1 = Compare_To_Constant_out1 & Relational_Operator2_relop1_1;



  assign switch_compare_1 = Logical_Operator3_out1 > 1'b0;



  assign Relational_Operator1_relop1_1 = AE > BE;



  assign Relational_Operator3_relop1_1 = AM > BM;



  assign Logical_Operator1_out1 = Relational_Operator4_relop1_1 & Relational_Operator3_relop1_1;



  assign Logical_Operator2_out1 = Relational_Operator1_relop1_1 | Logical_Operator1_out1;



  assign Logical_Operator7_out1 = Relational_Operator2_relop1_1 & Logical_Operator2_out1;



  assign Logical_Operator5_out1 =  ~ Logical_Operator7_out1;



  assign Constant8_out1 = 1'b1;



  assign Logical_Operator1_out1_1 =  ~ Constant8_out1;



  assign Logical_Operator4_out1 =  ~ Relational_Operator4_relop1;



  assign Logical_Operator1_out1_2 = Relational_Operator5_relop1 & Logical_Operator4_out1;



  assign Logical_Operator5_out1_1 =  ~ Relational_Operator2_relop1;



  assign Logical_Operator2_out1_1 = Relational_Operator6_relop1 & Logical_Operator5_out1_1;



  assign Logical_Operator3_out1_1 = Logical_Operator1_out1_2 | Logical_Operator2_out1_1;



  assign Logical_Operator_out1_1 = Logical_Operator1_out1_1 | Logical_Operator3_out1_1;



  assign Logical_Operator6_out1 = Relational_Operator6_relop1_1 & (Relational_Operator2_relop1_1 & Relational_Operator4_relop1_1);



  assign Logical_Operator4_out1_1 = Logical_Operator_out1 | Logical_Operator6_out1;



  assign Logical_Operator6_out1_1 =  ~ Logical_Operator4_out1_1;



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Logical_Operator7_out1 :
              Logical_Operator5_out1);



  assign Logical_Operator4_out1_2 = Relational_Operator5_relop1_1 | Switch_out1;



  assign Logical_Operator5_out1_2 = Logical_Operator6_out1_1 & Logical_Operator4_out1_2;



  assign Constant1_out1_1 = 1'b0;



  assign Switch1_out1 = (Logical_Operator_out1_1 == 1'b0 ? Logical_Operator5_out1_2 :
              Constant1_out1_1);



  assign nfp_out1 = Switch1_out1;

endmodule  // nfp_relop_single_block

