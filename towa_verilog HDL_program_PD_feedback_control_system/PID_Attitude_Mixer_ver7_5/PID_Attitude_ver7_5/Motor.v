// -------------------------------------------------------------
// 
// File Name: D:\fukuda\B4\HDLCoder\2023_12_15\PID_Attitude\PID_Attitude_Mixer_ver7_5\PID_Attitude_ver7_5\Motor.v
// Created: 2024-02-07 16:17:48
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Motor
// Source Path: PID_Attitude_ver7_5/Motor_Controller/Motor
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Motor
          (clk,
           reset_n,
           in,
           calib,
           rst,
           PWM);


  input   clk;
  input   reset_n;
  input   [31:0] in;  // uint32
  input   [10:0] calib;  // ufix11
  input   [10:0] rst;  // ufix11
  output  PWM;  // ufix1


  wire [16:0] count_step;  // ufix17
  wire [16:0] count_from;  // ufix17
  reg [16:0] Counter_out1;  // ufix17
  wire [16:0] count;  // ufix17
  wire need_to_wrap;
  wire [16:0] count_value;  // ufix17
  wire [31:0] swin;  // uint32
  wire [31:0] Relational_Operator_1_1;  // ufix32
  wire Relational_Operator_relop1;
  wire CONST_1_out1;  // ufix1
  wire CONST_0_out1;  // ufix1
  wire sw_out1;  // ufix1


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 125000
  assign count_step = 17'b00000000000000001;



  assign count_from = 17'b00000000000000000;



  assign count = Counter_out1 + count_step;



  assign need_to_wrap = Counter_out1 == 17'b11110100001001000;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or posedge reset_n)
    begin : Counter_process
      if (reset_n == 1'b1) begin
        Counter_out1 <= 17'b00000000000000000;
      end
      else begin
        Counter_out1 <= count_value;
      end
    end



  Duty u_Duty (.in(in),  // uint32
               .calib(calib),  // ufix11
               .rst(rst),  // ufix11
               .swin(swin)  // uint32
               );

  assign Relational_Operator_1_1 = {15'b0, Counter_out1};
  assign Relational_Operator_relop1 = Relational_Operator_1_1 <= swin;



  assign CONST_1_out1 = 1'b1;



  assign CONST_0_out1 = 1'b0;



  assign sw_out1 = (Relational_Operator_relop1 == 1'b0 ? CONST_1_out1 :
              CONST_0_out1);



  assign PWM = sw_out1;

endmodule  // Motor

