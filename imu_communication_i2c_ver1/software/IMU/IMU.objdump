
IMU.elf:     file format elf32-littlenios2
IMU.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00012b30 memsz 0x00012b30 flags r-x
    LOAD off    0x00013b50 vaddr 0x00032b50 paddr 0x00034740 align 2**12
         filesz 0x00001bf0 memsz 0x00001bf0 flags rw-
    LOAD off    0x00016330 vaddr 0x00036330 paddr 0x00036330 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012570  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  000327a0  000327a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf0  00032b50  00034740  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00036330  00036330  00016330  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00036490  00036490  00015740  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015740  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fe0  00000000  00000000  00015768  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026924  00000000  00000000  00016748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d7e  00000000  00000000  0003d06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c54e  00000000  00000000  00046dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a88  00000000  00000000  00053338  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000462b  00000000  00000000  00055dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a90  00000000  00000000  0005a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00071e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001918  00000000  00000000  00071ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00077412  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00077415  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007741b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007741c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007741d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00077421  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00077425  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00077429  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0007742d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00077431  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00077435  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  00077442  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c22  00000000  00000000  00077467  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006681e  00000000  00000000  0007c089  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
000327a0 l    d  .rodata	00000000 .rodata
00032b50 l    d  .rwdata	00000000 .rwdata
00036330 l    d  .bss	00000000 .bss
00036490 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../IMU_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 imu_i2c.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0003286e l     O .rodata	00000010 zeroes.4404
00022c24 l     F .text	000000bc __sbprintf
0003287e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022e34 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002498c l     F .text	00000008 __fp_unlock
000249a0 l     F .text	0000019c __sinit.part.1
00024b3c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00032b50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00032f94 l     O .rwdata	00000020 lc_ctype_charset
00032f74 l     O .rwdata	00000020 lc_message_charset
00032fb4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000328b0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00028010 l     F .text	000000fc __sprint_r.part.0
000329d4 l     O .rodata	00000010 zeroes.4349
0002964c l     F .text	000000bc __sbprintf
000329e4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d7a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d7d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d8c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d9b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002da9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002dc78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00034728 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002df1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e058 l     F .text	00000034 alt_dev_reg
0003359c l     O .rwdata	00000038 I2C
000335d4 l     O .rwdata	00001060 JTAG
00034634 l     O .rwdata	000000c4 UART1
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0002e13c l     F .text	00000110 optional_irq_callback
0002e29c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002ff78 l     F .text	0000020c altera_avalon_jtag_uart_irq
00030184 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00030978 l     F .text	0000009c altera_avalon_uart_irq
00030a14 l     F .text	000000e4 altera_avalon_uart_rxirq
00030af8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00030c94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00030eac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00031338 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00031828 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00031988 l     F .text	0000003c alt_get_errno
000319c4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00036364 g     O .bss	00000004 alt_instruction_exception_handler
00027654 g     F .text	00000074 _mprec_log10
00027740 g     F .text	0000008c __any_on
00029c00 g     F .text	00000054 _isatty_r
000328bc g     O .rodata	00000028 __mprec_tinytens
0002dbb4 g     F .text	0000007c alt_main
000207c0 g     F .text	000000c0 _puts_r
00036390 g     O .bss	00000100 alt_irq
00029c54 g     F .text	00000060 _lseek_r
00034740 g       *ABS*	00000000 __flash_rwdata_start
0002c06c g     F .text	00000088 .hidden __eqdf2
00036490 g       *ABS*	00000000 __alt_heap_start
00020784 g     F .text	0000003c printf
00029e6c g     F .text	0000009c _wcrtomb_r
00027ed0 g     F .text	0000005c __sseek
00024cec g     F .text	00000010 __sinit
00029d14 g     F .text	00000140 __swbuf_r
000257c0 g     F .text	0000007c _setlocale_r
00024b44 g     F .text	00000078 __sfmoreglue
0002e994 g     F .text	000000a8 alt_avalon_i2c_rx_read
0002dc54 g     F .text	00000024 __malloc_unlock
0002fbac g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0002e718 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00026490 g     F .text	0000015c memmove
00024cd4 g     F .text	00000018 _cleanup
0002f3fc g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00026714 g     F .text	000000a8 _Balloc
0002c0f4 g     F .text	000000dc .hidden __gtdf2
00032018 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029ba4 g     F .text	0000005c _fstat_r
00036348 g     O .bss	00000004 errno
00027e4c g     F .text	00000008 __seofread
00036350 g     O .bss	00000004 alt_argv
0003c6f8 g       *ABS*	00000000 _gp
0002deec g     F .text	00000030 usleep
0002fbf0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0002e8a8 g     F .text	00000044 alt_avalon_i2c_is_busy
0003341c g     O .rwdata	00000180 alt_fd_list
0002e64c g     F .text	000000cc alt_avalon_i2c_master_config_set
000314d8 g     F .text	00000090 alt_find_dev
00026348 g     F .text	00000148 memcpy
00024994 g     F .text	0000000c _cleanup_r
0002d4ac g     F .text	000000dc .hidden __floatsidf
0003190c g     F .text	0000007c alt_io_redirect
0002c1d0 g     F .text	000000f4 .hidden __ltdf2
000327a0 g       *ABS*	00000000 __DTOR_END__
0002f23c g     F .text	000001c0 alt_avalon_i2c_master_transmit
00020880 g     F .text	00000014 puts
00032208 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027d30 g     F .text	00000074 __fpclassifyd
000275b0 g     F .text	000000a4 __ratio
00029630 g     F .text	0000001c __vfiprintf_internal
0003037c g     F .text	0000021c altera_avalon_jtag_uart_read
00020754 g     F .text	00000030 _printf_r
0002ad0c g     F .text	00000064 .hidden __udivsi3
0002d904 g     F .text	000000ac isatty
0003290c g     O .rodata	000000c8 __mprec_tens
0002583c g     F .text	0000000c __locale_charset
0002e4b8 g     F .text	00000098 alt_avalon_i2c_enable
00036344 g     O .bss	00000004 __malloc_top_pad
0002fae0 g     F .text	00000068 alt_avalon_i2c_int_disable
00034700 g     O .rwdata	00000004 __mb_cur_max
0002586c g     F .text	0000000c _localeconv_r
00026b48 g     F .text	0000003c __i2b
00025170 g     F .text	000004c8 __sfvwrite_r
00027da4 g     F .text	00000054 _sbrk_r
00029cb4 g     F .text	00000060 _read_r
00034720 g     O .rwdata	00000004 alt_max_fd
00029898 g     F .text	000000f0 _fclose_r
0002495c g     F .text	00000030 fflush
00036340 g     O .bss	00000004 __malloc_max_sbrked_mem
0002f608 g     F .text	00000210 alt_avalon_i2c_master_receive
0002adf0 g     F .text	000008ac .hidden __adddf3
00027358 g     F .text	0000010c __b2d
0002a650 g     F .text	000005c4 .hidden __umoddi3
0002dad8 g     F .text	000000dc lseek
0002fb48 g     F .text	00000064 alt_avalon_i2c_int_enable
000346f8 g     O .rwdata	00000004 _global_impure_ptr
000277cc g     F .text	00000564 _realloc_r
00036490 g       *ABS*	00000000 __bss_end
00031738 g     F .text	000000f0 alt_iic_isr_register
00031f10 g     F .text	00000108 alt_tick
0002a054 g     F .text	000005fc .hidden __udivdi3
0002fa08 g     F .text	00000058 alt_avalon_i2c_int_status_get
00029b00 g     F .text	00000024 _fputwc_r
000328e4 g     O .rodata	00000028 __mprec_bigtens
0002692c g     F .text	00000104 __s2b
0002d588 g     F .text	000000a8 .hidden __floatunsidf
00027098 g     F .text	00000060 __mcmp
000308cc g     F .text	000000ac altera_avalon_uart_init
00024d0c g     F .text	00000018 __fp_lock_all
000316ec g     F .text	0000004c alt_ic_irq_enabled
00031e74 g     F .text	0000009c alt_alarm_stop
000205d8 g     F .text	00000040 IMU_soft_reset
0002e338 g     F .text	00000054 alt_avalon_i2c_register_callback
00036358 g     O .bss	00000004 alt_irq_active
0002e38c g     F .text	000000ec alt_avalon_i2c_init
000200fc g     F .exceptions	000000d4 alt_irq_handler
000333f4 g     O .rwdata	00000028 alt_dev_null
00031318 g     F .text	00000020 alt_dcache_flush_all
00026a30 g     F .text	00000068 __hi0bits
0002d42c g     F .text	00000080 .hidden __fixdfsi
00034740 g       *ABS*	00000000 __ram_rwdata_end
00034718 g     O .rwdata	00000008 alt_dev_list
0002df58 g     F .text	00000100 write
0003236c g     F .text	000000a0 _putc_r
0002ecc8 g     F .text	0000004c alt_avalon_i2c_check_arblost
0002faa4 g     F .text	0000003c alt_avalon_i2c_int_clear
00032b50 g       *ABS*	00000000 __ram_rodata_end
0002d810 g     F .text	000000b8 fstat
0002c1d0 g     F .text	000000f4 .hidden __ledf2
0003472c g     O .rwdata	00000008 alt_avalon_i2c_list
00026e10 g     F .text	00000140 __pow5mult
00028124 g     F .text	0000150c ___vfiprintf_internal_r
00036338 g     O .bss	00000004 __nlocale_changed
0002ad70 g     F .text	00000058 .hidden __umodsi3
00036490 g       *ABS*	00000000 end
00030ee8 g     F .text	000001ac altera_avalon_uart_write
0002feb8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0002e478 g     F .text	00000040 alt_avalon_i2c_open
0002043c g     F .text	0000010c IMU_init
000327a0 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002ee50 g     F .text	000000e8 alt_avalon_i2c_master_tx
0003081c g     F .text	00000060 altera_avalon_uart_write_fd
0002d630 g     F .text	00000064 .hidden __clzsi2
0003087c g     F .text	00000050 altera_avalon_uart_close_fd
00030598 g     F .text	00000224 altera_avalon_jtag_uart_write
00024cfc g     F .text	00000004 __sfp_lock_acquire
00026264 g     F .text	000000e4 memchr
0002092c g     F .text	000022dc ___vfprintf_internal_r
00024e60 g     F .text	00000310 _free_r
00031c0c g     F .text	0000022c alt_printf
00025848 g     F .text	00000010 __locale_mb_cur_max
000325ec g     F .text	00000180 __call_exitprocs
00036334 g     O .bss	00000004 __mlocale_changed
0002e24c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00034704 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0003635c g     O .bss	00000004 _alt_tick_rate
0002f818 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0002fc3c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
000203bc g     F .text	00000080 IMU_write
00026f50 g     F .text	00000148 __lshift
00036360 g     O .bss	00000004 _alt_nticks
0002dcb4 g     F .text	00000104 read
0002e0c4 g     F .text	00000078 alt_sys_init
000324d4 g     F .text	00000118 __register_exitproc
0002f074 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00026b84 g     F .text	0000028c __multiply
00030224 g     F .text	00000068 altera_avalon_jtag_uart_close
0002adc8 g     F .text	00000028 .hidden __mulsi3
00032b50 g       *ABS*	00000000 __ram_rwdata_start
000327a0 g       *ABS*	00000000 __ram_rodata_start
00036368 g     O .bss	00000028 __malloc_current_mallinfo
00027464 g     F .text	0000014c __d2b
0002fd54 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00032144 g     F .text	000000c4 alt_get_fd
000311c0 g     F .text	00000158 alt_busy_sleep
00029768 g     F .text	00000054 _close_r
000322f0 g     F .text	0000007c memcmp
0002e8ec g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0002fe14 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00036490 g       *ABS*	00000000 __alt_stack_base
0002fe64 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022ce0 g     F .text	00000154 __swsetup_r
0002b69c g     F .text	000009d0 .hidden __divdf3
00024bbc g     F .text	00000118 __sfp
000276c8 g     F .text	00000078 __copybits
00032fec g     O .rwdata	00000408 __malloc_av_
00024d08 g     F .text	00000004 __sinit_lock_release
0002c2c4 g     F .text	0000086c .hidden __muldf3
00027df8 g     F .text	00000054 __sread
0003203c g     F .text	00000108 alt_find_file
00031374 g     F .text	000000a4 alt_dev_llist_insert
0002dc30 g     F .text	00000024 __malloc_lock
0002de3c g     F .text	000000b0 sbrk
0002ed14 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0002ec7c g     F .text	0000004c alt_avalon_i2c_check_nack
00024900 g     F .text	0000005c _fflush_r
000297bc g     F .text	000000dc _calloc_r
00036330 g       *ABS*	00000000 __bss_start
000265ec g     F .text	00000128 memset
00020728 g     F .text	0000002c main
00020000 g       *ABS*	00000000 __alt_mem_RAM
0002ec48 g     F .text	00000034 alt_avalon_i2c_master_target_set
00036354 g     O .bss	00000004 alt_envp
0003633c g     O .bss	00000004 __malloc_max_total_mem
0002fdb4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00029e54 g     F .text	00000018 __swbuf
0002fa60 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00027f2c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00029988 g     F .text	00000014 fclose
0002305c g     F .text	00001688 _dtoa_r
00025a58 g     F .text	0000080c _malloc_r
00029fc8 g     F .text	00000030 __ascii_wctomb
00034724 g     O .rwdata	00000004 alt_errno
00025638 g     F .text	000000c4 _fwalk
000202dc g     F .text	000000e0 IMU_read
0003240c g     F .text	000000c8 putc
0002ac14 g     F .text	00000084 .hidden __divsi3
00024d3c g     F .text	00000124 _malloc_trim_r
000327a0 g       *ABS*	00000000 __CTOR_END__
00027f34 g     F .text	000000dc strcmp
000327a0 g       *ABS*	00000000 __flash_rodata_start
000327a0 g       *ABS*	00000000 __DTOR_LIST__
0002c06c g     F .text	00000088 .hidden __nedf2
0002e08c g     F .text	00000038 alt_irq_init
0002ddb8 g     F .text	00000084 alt_release_fd
000329f4 g     O .rodata	00000100 .hidden __clz_tab
00036330 g     O .bss	00000004 _PathLocale
000322a4 g     F .text	00000014 atexit
00029708 g     F .text	00000060 _write_r
00025878 g     F .text	00000018 setlocale
000346fc g     O .rwdata	00000004 _impure_ptr
0003634c g     O .bss	00000004 alt_argc
000246e4 g     F .text	0000021c __sflush_r
0002026c g     F .text	00000070 TFR_CMD
00031478 g     F .text	00000060 _do_dtors
00025864 g     F .text	00000008 __locale_cjk_lang
0002ec10 g     F .text	00000038 alt_avalon_i2c_master_target_get
0002eb20 g     F .text	000000f0 alt_avalon_i2c_send_address
00020020 g       .exceptions	00000000 alt_irq_entry
000272f4 g     F .text	00000064 __ulp
00024d24 g     F .text	00000018 __fp_unlock_all
00034710 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025890 g     F .text	0000000c localeconv
0002fcec g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00031588 g     F .text	00000050 alt_ic_isr_register
0002e550 g     F .text	0000004c alt_avalon_i2c_disable
00034740 g       *ABS*	00000000 _edata
000307bc g     F .text	00000060 altera_avalon_uart_read_fd
00036490 g       *ABS*	00000000 _end
0002999c g     F .text	00000164 __fputwc
00020230 g       *ABS*	00000000 __ram_exceptions_end
0003028c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00020618 g     F .text	00000110 readIMUContinuously
0002e59c g     F .text	000000b0 alt_avalon_i2c_master_config_get
00031660 g     F .text	0000008c alt_ic_irq_disable
00027e54 g     F .text	0000007c __swrite
00034708 g     O .rwdata	00000004 __malloc_trim_threshold
00025858 g     F .text	0000000c __locale_msgcharset
000322b8 g     F .text	00000038 exit
000256fc g     F .text	000000c4 _fwalk_reent
000270f8 g     F .text	000001fc __mdiff
0002ac98 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024d00 g     F .text	00000004 __sfp_lock_release
0002e7ac g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0002ea3c g     F .text	000000e4 alt_avalon_i2c_cmd_write
00030c40 g     F .text	00000054 altera_avalon_uart_close
0003276c g     F .text	00000034 _exit
00031094 g     F .text	0000012c alt_alarm_start
0002589c g     F .text	000001bc __smakebuf_r
00020894 g     F .text	00000098 strlen
00031ab0 g     F .text	0000015c open
0002c0f4 g     F .text	000000dc .hidden __gedf2
00031e38 g     F .text	0000003c alt_putchar
0003470c g     O .rwdata	00000004 __wctomb
0002810c g     F .text	00000018 __sprint_r
00031568 g     F .text	00000020 alt_icache_flush_all
00034734 g     O .rwdata	00000004 alt_priority_mask
000315d8 g     F .text	00000088 alt_ic_irq_enable
00022c08 g     F .text	0000001c __vfprintf_internal
00030cd0 g     F .text	000001dc altera_avalon_uart_read
00029ff8 g     F .text	0000005c _wctomb_r
0002cb30 g     F .text	000008fc .hidden __subdf3
00026a98 g     F .text	000000b0 __lo0bits
00034738 g     O .rwdata	00000008 alt_alarm_list
00031418 g     F .text	00000060 _do_ctors
00029f08 g     F .text	000000c0 wcrtomb
0002d6d0 g     F .text	000000d8 close
0002fca0 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002da18 g     F .text	00000084 alt_load
0002ef38 g     F .text	0000013c alt_avalon_i2c_master_rx
00020548 g     F .text	00000090 setExtCrystalUse
00029b24 g     F .text	00000080 fputwc
00024d04 g     F .text	00000004 __sinit_lock_acquire
000267e4 g     F .text	00000148 __multadd
000267bc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	1098e404 	addi	r2,r2,25488
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	1098e404 	addi	r2,r2,25488
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a71b17 	ldw	r2,-25492(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a71b17 	ldw	r2,-25492(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6b1be14 	ori	gp,gp,50936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20244:	1098cc14 	ori	r2,r2,25392

    movhi r3, %hi(__bss_end)
   20248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2024c:	18d92414 	ori	r3,r3,25744

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002da180 	call	2da18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002dbb40 	call	2dbb4 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe0268>

0002026c <TFR_CMD>:
#else
#define DEBUG_PRINT(fmt, ...)
#endif

// Function to generate transfer command for I2C communication.
u8 TFR_CMD(u8 STA, u8 STO, u8 AD, u8 RW_D) {
   2026c:	defffb04 	addi	sp,sp,-20
   20270:	df000415 	stw	fp,16(sp)
   20274:	df000404 	addi	fp,sp,16
   20278:	2011883a 	mov	r8,r4
   2027c:	2809883a 	mov	r4,r5
   20280:	3007883a 	mov	r3,r6
   20284:	3805883a 	mov	r2,r7
   20288:	e23ffc05 	stb	r8,-16(fp)
   2028c:	e13ffd05 	stb	r4,-12(fp)
   20290:	e0fffe05 	stb	r3,-8(fp)
   20294:	e0bfff05 	stb	r2,-4(fp)
    return (STA << 9) | (STO << 8) | (AD << 1) | RW_D;
   20298:	e0bffc03 	ldbu	r2,-16(fp)
   2029c:	1004927a 	slli	r2,r2,9
   202a0:	1007883a 	mov	r3,r2
   202a4:	e0bffd03 	ldbu	r2,-12(fp)
   202a8:	1004923a 	slli	r2,r2,8
   202ac:	1884b03a 	or	r2,r3,r2
   202b0:	1007883a 	mov	r3,r2
   202b4:	e0bffe03 	ldbu	r2,-8(fp)
   202b8:	1085883a 	add	r2,r2,r2
   202bc:	1884b03a 	or	r2,r3,r2
   202c0:	1007883a 	mov	r3,r2
   202c4:	e0bfff03 	ldbu	r2,-4(fp)
   202c8:	1884b03a 	or	r2,r3,r2
}
   202cc:	e037883a 	mov	sp,fp
   202d0:	df000017 	ldw	fp,0(sp)
   202d4:	dec00104 	addi	sp,sp,4
   202d8:	f800283a 	ret

000202dc <IMU_read>:

// Function to read data from a specific address of the IMU.
u8 IMU_read(u8 addr) {
   202dc:	defffb04 	addi	sp,sp,-20
   202e0:	dfc00415 	stw	ra,16(sp)
   202e4:	df000315 	stw	fp,12(sp)
   202e8:	df000304 	addi	fp,sp,12
   202ec:	2005883a 	mov	r2,r4
   202f0:	e0bfff05 	stb	r2,-4(fp)
    u8 rd_data = 0;
   202f4:	e03ffd05 	stb	zero,-12(fp)
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 0, BNO055_ADDR, 1));
   202f8:	01c00044 	movi	r7,1
   202fc:	01800a04 	movi	r6,40
   20300:	000b883a 	mov	r5,zero
   20304:	01000044 	movi	r4,1
   20308:	002026c0 	call	2026c <TFR_CMD>
   2030c:	10c03fcc 	andi	r3,r2,255
   20310:	00800134 	movhi	r2,4
   20314:	10841004 	addi	r2,r2,4160
   20318:	10c00035 	stwio	r3,0(r2)
    usleep(100);
   2031c:	01001904 	movi	r4,100
   20320:	002deec0 	call	2deec <usleep>
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, (STOP_BIT | addr));
   20324:	e0bfff03 	ldbu	r2,-4(fp)
   20328:	10c04014 	ori	r3,r2,256
   2032c:	00800134 	movhi	r2,4
   20330:	10841004 	addi	r2,r2,4160
   20334:	10c00035 	stwio	r3,0(r2)
    usleep(100);
   20338:	01001904 	movi	r4,100
   2033c:	002deec0 	call	2deec <usleep>
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 1, BNO055_ADDR, 1));
   20340:	01c00044 	movi	r7,1
   20344:	01800a04 	movi	r6,40
   20348:	01400044 	movi	r5,1
   2034c:	01000044 	movi	r4,1
   20350:	002026c0 	call	2026c <TFR_CMD>
   20354:	10c03fcc 	andi	r3,r2,255
   20358:	00800134 	movhi	r2,4
   2035c:	10841004 	addi	r2,r2,4160
   20360:	10c00035 	stwio	r3,0(r2)
    for (int i = 0; i < 10000; i++) {
   20364:	e03ffe15 	stw	zero,-8(fp)
   20368:	00000706 	br	20388 <IMU_read+0xac>
        rd_data = IORD_ALT_AVALON_I2C_RX_DATA(I2C_BASE);
   2036c:	00800134 	movhi	r2,4
   20370:	10841104 	addi	r2,r2,4164
   20374:	10800037 	ldwio	r2,0(r2)
   20378:	e0bffd05 	stb	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 0, BNO055_ADDR, 1));
    usleep(100);
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, (STOP_BIT | addr));
    usleep(100);
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 1, BNO055_ADDR, 1));
    for (int i = 0; i < 10000; i++) {
   2037c:	e0bffe17 	ldw	r2,-8(fp)
   20380:	10800044 	addi	r2,r2,1
   20384:	e0bffe15 	stw	r2,-8(fp)
   20388:	e0bffe17 	ldw	r2,-8(fp)
   2038c:	1089c410 	cmplti	r2,r2,10000
   20390:	103ff61e 	bne	r2,zero,2036c <__alt_data_end+0xfffe036c>
        rd_data = IORD_ALT_AVALON_I2C_RX_DATA(I2C_BASE);
    }
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, STOP_BIT);
   20394:	00c04004 	movi	r3,256
   20398:	00800134 	movhi	r2,4
   2039c:	10841004 	addi	r2,r2,4160
   203a0:	10c00035 	stwio	r3,0(r2)
    return rd_data;
   203a4:	e0bffd03 	ldbu	r2,-12(fp)
}
   203a8:	e037883a 	mov	sp,fp
   203ac:	dfc00117 	ldw	ra,4(sp)
   203b0:	df000017 	ldw	fp,0(sp)
   203b4:	dec00204 	addi	sp,sp,8
   203b8:	f800283a 	ret

000203bc <IMU_write>:

// Function to write data to a specific address of the IMU.
u8 IMU_write(u8 addr, u8 data) {
   203bc:	defffc04 	addi	sp,sp,-16
   203c0:	dfc00315 	stw	ra,12(sp)
   203c4:	df000215 	stw	fp,8(sp)
   203c8:	df000204 	addi	fp,sp,8
   203cc:	2007883a 	mov	r3,r4
   203d0:	2805883a 	mov	r2,r5
   203d4:	e0fffe05 	stb	r3,-8(fp)
   203d8:	e0bfff05 	stb	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 0, BNO055_ADDR, 0));
   203dc:	000f883a 	mov	r7,zero
   203e0:	01800a04 	movi	r6,40
   203e4:	000b883a 	mov	r5,zero
   203e8:	01000044 	movi	r4,1
   203ec:	002026c0 	call	2026c <TFR_CMD>
   203f0:	10c03fcc 	andi	r3,r2,255
   203f4:	00800134 	movhi	r2,4
   203f8:	10841004 	addi	r2,r2,4160
   203fc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, addr);
   20400:	e0fffe03 	ldbu	r3,-8(fp)
   20404:	00800134 	movhi	r2,4
   20408:	10841004 	addi	r2,r2,4160
   2040c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, (STOP_BIT | data));
   20410:	e0bfff03 	ldbu	r2,-4(fp)
   20414:	10c04014 	ori	r3,r2,256
   20418:	00800134 	movhi	r2,4
   2041c:	10841004 	addi	r2,r2,4160
   20420:	10c00035 	stwio	r3,0(r2)
    return 1;
   20424:	00800044 	movi	r2,1
}
   20428:	e037883a 	mov	sp,fp
   2042c:	dfc00117 	ldw	ra,4(sp)
   20430:	df000017 	ldw	fp,0(sp)
   20434:	dec00204 	addi	sp,sp,8
   20438:	f800283a 	ret

0002043c <IMU_init>:

// Function to initialize the IMU device.
int IMU_init(void) {
   2043c:	defffd04 	addi	sp,sp,-12
   20440:	dfc00215 	stw	ra,8(sp)
   20444:	df000115 	stw	fp,4(sp)
   20448:	df000104 	addi	fp,sp,4
    IOWR_ALT_AVALON_I2C_CTRL(I2C_BASE, ENABLE);
   2044c:	00c000c4 	movi	r3,3
   20450:	00800134 	movhi	r2,4
   20454:	10841204 	addi	r2,r2,4168
   20458:	10c00035 	stwio	r3,0(r2)
    DEBUG_PRINT("I2C Start!");
   2045c:	010000f4 	movhi	r4,3
   20460:	2109e804 	addi	r4,r4,10144
   20464:	00208800 	call	20880 <puts>
    u8 chip_id = IMU_read(CHIP_ID_ADDR);
   20468:	01000a04 	movi	r4,40
   2046c:	00202dc0 	call	202dc <IMU_read>
   20470:	e0bfff05 	stb	r2,-4(fp)
    DEBUG_PRINT("chip_id=%04x", chip_id);
   20474:	e0bfff03 	ldbu	r2,-4(fp)
   20478:	100b883a 	mov	r5,r2
   2047c:	010000f4 	movhi	r4,3
   20480:	2109eb04 	addi	r4,r4,10156
   20484:	00207840 	call	20784 <printf>
    if (chip_id != 0xA0) {
   20488:	e0bfff03 	ldbu	r2,-4(fp)
   2048c:	10802820 	cmpeqi	r2,r2,160
   20490:	10000e1e 	bne	r2,zero,204cc <IMU_init+0x90>
        usleep(2000000);
   20494:	010007f4 	movhi	r4,31
   20498:	21212004 	addi	r4,r4,-31616
   2049c:	002deec0 	call	2deec <usleep>
        chip_id = IMU_read(CHIP_ID_ADDR);
   204a0:	01000a04 	movi	r4,40
   204a4:	00202dc0 	call	202dc <IMU_read>
   204a8:	e0bfff05 	stb	r2,-4(fp)
        if (chip_id != 0xA0) {
   204ac:	e0bfff03 	ldbu	r2,-4(fp)
   204b0:	10802820 	cmpeqi	r2,r2,160
   204b4:	1000051e 	bne	r2,zero,204cc <IMU_init+0x90>
            DEBUG_PRINT("Error: Invalid Chip ID for BNO055 sensor.");
   204b8:	010000f4 	movhi	r4,3
   204bc:	2109ef04 	addi	r4,r4,10172
   204c0:	00208800 	call	20880 <puts>
            return FALSE;
   204c4:	0005883a 	mov	r2,zero
   204c8:	00001a06 	br	20534 <IMU_init+0xf8>
        }
    }
    IMU_write(OPR_MODE_ADDR, CONFIG_MODE);
   204cc:	000b883a 	mov	r5,zero
   204d0:	01000f44 	movi	r4,61
   204d4:	00203bc0 	call	203bc <IMU_write>
    IMU_write(SYS_TRIGGER_ADDR, RST_SYS_BIT);
   204d8:	01400804 	movi	r5,32
   204dc:	01000fc4 	movi	r4,63
   204e0:	00203bc0 	call	203bc <IMU_write>
    usleep(650000);
   204e4:	010002b4 	movhi	r4,10
   204e8:	213ac404 	addi	r4,r4,-5360
   204ec:	002deec0 	call	2deec <usleep>
    IMU_write(PWR_MODE_ADDR, NORMAL_MODE);
   204f0:	000b883a 	mov	r5,zero
   204f4:	01000f84 	movi	r4,62
   204f8:	00203bc0 	call	203bc <IMU_write>
    IMU_write(PAGE_ID_ADDR, 0);
   204fc:	000b883a 	mov	r5,zero
   20500:	010001c4 	movi	r4,7
   20504:	00203bc0 	call	203bc <IMU_write>
    IMU_write(SYS_TRIGGER_ADDR, 0x0);
   20508:	000b883a 	mov	r5,zero
   2050c:	01000fc4 	movi	r4,63
   20510:	00203bc0 	call	203bc <IMU_write>
    usleep(50000);
   20514:	0130d414 	movui	r4,50000
   20518:	002deec0 	call	2deec <usleep>
    IMU_write(OPR_MODE_ADDR, IMU_MODE);
   2051c:	01400304 	movi	r5,12
   20520:	01000f44 	movi	r4,61
   20524:	00203bc0 	call	203bc <IMU_write>
    usleep(20000);
   20528:	01138804 	movi	r4,20000
   2052c:	002deec0 	call	2deec <usleep>
    return TRUE;
   20530:	00800044 	movi	r2,1
}
   20534:	e037883a 	mov	sp,fp
   20538:	dfc00117 	ldw	ra,4(sp)
   2053c:	df000017 	ldw	fp,0(sp)
   20540:	dec00204 	addi	sp,sp,8
   20544:	f800283a 	ret

00020548 <setExtCrystalUse>:

void setExtCrystalUse(u8 usextal) {
   20548:	defffd04 	addi	sp,sp,-12
   2054c:	dfc00215 	stw	ra,8(sp)
   20550:	df000115 	stw	fp,4(sp)
   20554:	df000104 	addi	fp,sp,4
   20558:	2005883a 	mov	r2,r4
   2055c:	e0bfff05 	stb	r2,-4(fp)
    IMU_write(OPR_MODE_ADDR, CONFIG_MODE);
   20560:	000b883a 	mov	r5,zero
   20564:	01000f44 	movi	r4,61
   20568:	00203bc0 	call	203bc <IMU_write>
    usleep(25000);
   2056c:	01186a04 	movi	r4,25000
   20570:	002deec0 	call	2deec <usleep>
    IMU_write(PAGE_ID_ADDR, 0);
   20574:	000b883a 	mov	r5,zero
   20578:	010001c4 	movi	r4,7
   2057c:	00203bc0 	call	203bc <IMU_write>
    if (usextal) {
   20580:	e0bfff03 	ldbu	r2,-4(fp)
   20584:	10000426 	beq	r2,zero,20598 <setExtCrystalUse+0x50>
        IMU_write(SYS_TRIGGER_ADDR, 0x80);
   20588:	01402004 	movi	r5,128
   2058c:	01000fc4 	movi	r4,63
   20590:	00203bc0 	call	203bc <IMU_write>
   20594:	00000306 	br	205a4 <setExtCrystalUse+0x5c>
    } else {
        IMU_write(SYS_TRIGGER_ADDR, 0x0);
   20598:	000b883a 	mov	r5,zero
   2059c:	01000fc4 	movi	r4,63
   205a0:	00203bc0 	call	203bc <IMU_write>
    }
    usleep(10000);
   205a4:	0109c404 	movi	r4,10000
   205a8:	002deec0 	call	2deec <usleep>
    IMU_write(OPR_MODE_ADDR, IMU_MODE);
   205ac:	01400304 	movi	r5,12
   205b0:	01000f44 	movi	r4,61
   205b4:	00203bc0 	call	203bc <IMU_write>
    usleep(20000);
   205b8:	01138804 	movi	r4,20000
   205bc:	002deec0 	call	2deec <usleep>
}
   205c0:	0001883a 	nop
   205c4:	e037883a 	mov	sp,fp
   205c8:	dfc00117 	ldw	ra,4(sp)
   205cc:	df000017 	ldw	fp,0(sp)
   205d0:	dec00204 	addi	sp,sp,8
   205d4:	f800283a 	ret

000205d8 <IMU_soft_reset>:

void IMU_soft_reset(void) {
   205d8:	defffe04 	addi	sp,sp,-8
   205dc:	dfc00115 	stw	ra,4(sp)
   205e0:	df000015 	stw	fp,0(sp)
   205e4:	d839883a 	mov	fp,sp
    IMU_write(SYS_TRIGGER_ADDR, RST_SYS_BIT);
   205e8:	01400804 	movi	r5,32
   205ec:	01000fc4 	movi	r4,63
   205f0:	00203bc0 	call	203bc <IMU_write>
    usleep(650000);
   205f4:	010002b4 	movhi	r4,10
   205f8:	213ac404 	addi	r4,r4,-5360
   205fc:	002deec0 	call	2deec <usleep>
}
   20600:	0001883a 	nop
   20604:	e037883a 	mov	sp,fp
   20608:	dfc00117 	ldw	ra,4(sp)
   2060c:	df000017 	ldw	fp,0(sp)
   20610:	dec00204 	addi	sp,sp,8
   20614:	f800283a 	ret

00020618 <readIMUContinuously>:

void readIMUContinuously(void) {
   20618:	defffb04 	addi	sp,sp,-20
   2061c:	dfc00415 	stw	ra,16(sp)
   20620:	df000315 	stw	fp,12(sp)
   20624:	dc000215 	stw	r16,8(sp)
   20628:	df000304 	addi	fp,sp,12
    uint16_t quat_w, quat_x, quat_y, quat_z;
    IMU_init();
   2062c:	002043c0 	call	2043c <IMU_init>
    setExtCrystalUse(TRUE);
   20630:	01000044 	movi	r4,1
   20634:	00205480 	call	20548 <setExtCrystalUse>

    while (1) {
        quat_w = (uint16_t)IMU_read(QUA_DATA_W_LSB) | ((uint16_t)IMU_read(QUA_DATA_W_MSB) << 8);
   20638:	01000804 	movi	r4,32
   2063c:	00202dc0 	call	202dc <IMU_read>
   20640:	14003fcc 	andi	r16,r2,255
   20644:	01000844 	movi	r4,33
   20648:	00202dc0 	call	202dc <IMU_read>
   2064c:	10803fcc 	andi	r2,r2,255
   20650:	1004923a 	slli	r2,r2,8
   20654:	8084b03a 	or	r2,r16,r2
   20658:	e0bffd0d 	sth	r2,-12(fp)
        quat_x = (uint16_t)IMU_read(QUA_DATA_X_LSB) | ((uint16_t)IMU_read(QUA_DATA_X_MSB) << 8);
   2065c:	01000884 	movi	r4,34
   20660:	00202dc0 	call	202dc <IMU_read>
   20664:	14003fcc 	andi	r16,r2,255
   20668:	010008c4 	movi	r4,35
   2066c:	00202dc0 	call	202dc <IMU_read>
   20670:	10803fcc 	andi	r2,r2,255
   20674:	1004923a 	slli	r2,r2,8
   20678:	8084b03a 	or	r2,r16,r2
   2067c:	e0bffd8d 	sth	r2,-10(fp)
        quat_y = (uint16_t)IMU_read(QUA_DATA_Y_LSB) | ((uint16_t)IMU_read(QUA_DATA_Y_MSB) << 8);
   20680:	01000904 	movi	r4,36
   20684:	00202dc0 	call	202dc <IMU_read>
   20688:	14003fcc 	andi	r16,r2,255
   2068c:	01000944 	movi	r4,37
   20690:	00202dc0 	call	202dc <IMU_read>
   20694:	10803fcc 	andi	r2,r2,255
   20698:	1004923a 	slli	r2,r2,8
   2069c:	8084b03a 	or	r2,r16,r2
   206a0:	e0bffe0d 	sth	r2,-8(fp)
        quat_z = (uint16_t)IMU_read(QUA_DATA_Z_LSB) | ((uint16_t)IMU_read(QUA_DATA_Z_MSB) << 8);
   206a4:	01000984 	movi	r4,38
   206a8:	00202dc0 	call	202dc <IMU_read>
   206ac:	14003fcc 	andi	r16,r2,255
   206b0:	010009c4 	movi	r4,39
   206b4:	00202dc0 	call	202dc <IMU_read>
   206b8:	10803fcc 	andi	r2,r2,255
   206bc:	1004923a 	slli	r2,r2,8
   206c0:	8084b03a 	or	r2,r16,r2
   206c4:	e0bffe8d 	sth	r2,-6(fp)

        printf("quat_w=%04x ", quat_w);
   206c8:	e0bffd0b 	ldhu	r2,-12(fp)
   206cc:	100b883a 	mov	r5,r2
   206d0:	010000f4 	movhi	r4,3
   206d4:	2109fa04 	addi	r4,r4,10216
   206d8:	00207840 	call	20784 <printf>
        printf("quat_x=%04x ", quat_x);
   206dc:	e0bffd8b 	ldhu	r2,-10(fp)
   206e0:	100b883a 	mov	r5,r2
   206e4:	010000f4 	movhi	r4,3
   206e8:	2109fe04 	addi	r4,r4,10232
   206ec:	00207840 	call	20784 <printf>
        printf("quat_y=%04x ", quat_y);
   206f0:	e0bffe0b 	ldhu	r2,-8(fp)
   206f4:	100b883a 	mov	r5,r2
   206f8:	010000f4 	movhi	r4,3
   206fc:	210a0204 	addi	r4,r4,10248
   20700:	00207840 	call	20784 <printf>
        printf("quat_z=%04x\n", quat_z);
   20704:	e0bffe8b 	ldhu	r2,-6(fp)
   20708:	100b883a 	mov	r5,r2
   2070c:	010000f4 	movhi	r4,3
   20710:	210a0604 	addi	r4,r4,10264
   20714:	00207840 	call	20784 <printf>

        usleep(100000); // Delay for 100 milliseconds
   20718:	010000b4 	movhi	r4,2
   2071c:	2121a804 	addi	r4,r4,-31072
   20720:	002deec0 	call	2deec <usleep>
    }
   20724:	003fc406 	br	20638 <__alt_data_end+0xfffe0638>

00020728 <main>:
}

int main() {
   20728:	defffe04 	addi	sp,sp,-8
   2072c:	dfc00115 	stw	ra,4(sp)
   20730:	df000015 	stw	fp,0(sp)
   20734:	d839883a 	mov	fp,sp
    readIMUContinuously();
   20738:	00206180 	call	20618 <readIMUContinuously>
    return 0;
   2073c:	0005883a 	mov	r2,zero
}
   20740:	e037883a 	mov	sp,fp
   20744:	dfc00117 	ldw	ra,4(sp)
   20748:	df000017 	ldw	fp,0(sp)
   2074c:	dec00204 	addi	sp,sp,8
   20750:	f800283a 	ret

00020754 <_printf_r>:
   20754:	defffd04 	addi	sp,sp,-12
   20758:	2805883a 	mov	r2,r5
   2075c:	dfc00015 	stw	ra,0(sp)
   20760:	d9800115 	stw	r6,4(sp)
   20764:	d9c00215 	stw	r7,8(sp)
   20768:	21400217 	ldw	r5,8(r4)
   2076c:	d9c00104 	addi	r7,sp,4
   20770:	100d883a 	mov	r6,r2
   20774:	002092c0 	call	2092c <___vfprintf_internal_r>
   20778:	dfc00017 	ldw	ra,0(sp)
   2077c:	dec00304 	addi	sp,sp,12
   20780:	f800283a 	ret

00020784 <printf>:
   20784:	defffc04 	addi	sp,sp,-16
   20788:	dfc00015 	stw	ra,0(sp)
   2078c:	d9400115 	stw	r5,4(sp)
   20790:	d9800215 	stw	r6,8(sp)
   20794:	d9c00315 	stw	r7,12(sp)
   20798:	008000f4 	movhi	r2,3
   2079c:	1091bf04 	addi	r2,r2,18172
   207a0:	10800017 	ldw	r2,0(r2)
   207a4:	200b883a 	mov	r5,r4
   207a8:	d9800104 	addi	r6,sp,4
   207ac:	11000217 	ldw	r4,8(r2)
   207b0:	0022c080 	call	22c08 <__vfprintf_internal>
   207b4:	dfc00017 	ldw	ra,0(sp)
   207b8:	dec00404 	addi	sp,sp,16
   207bc:	f800283a 	ret

000207c0 <_puts_r>:
   207c0:	defff604 	addi	sp,sp,-40
   207c4:	dc000715 	stw	r16,28(sp)
   207c8:	2021883a 	mov	r16,r4
   207cc:	2809883a 	mov	r4,r5
   207d0:	dc400815 	stw	r17,32(sp)
   207d4:	dfc00915 	stw	ra,36(sp)
   207d8:	2823883a 	mov	r17,r5
   207dc:	00208940 	call	20894 <strlen>
   207e0:	10c00044 	addi	r3,r2,1
   207e4:	d8800115 	stw	r2,4(sp)
   207e8:	008000f4 	movhi	r2,3
   207ec:	108a0a04 	addi	r2,r2,10280
   207f0:	d8800215 	stw	r2,8(sp)
   207f4:	00800044 	movi	r2,1
   207f8:	d8800315 	stw	r2,12(sp)
   207fc:	00800084 	movi	r2,2
   20800:	dc400015 	stw	r17,0(sp)
   20804:	d8c00615 	stw	r3,24(sp)
   20808:	dec00415 	stw	sp,16(sp)
   2080c:	d8800515 	stw	r2,20(sp)
   20810:	80000226 	beq	r16,zero,2081c <_puts_r+0x5c>
   20814:	80800e17 	ldw	r2,56(r16)
   20818:	10001426 	beq	r2,zero,2086c <_puts_r+0xac>
   2081c:	81400217 	ldw	r5,8(r16)
   20820:	2880030b 	ldhu	r2,12(r5)
   20824:	10c8000c 	andi	r3,r2,8192
   20828:	1800061e 	bne	r3,zero,20844 <_puts_r+0x84>
   2082c:	29001917 	ldw	r4,100(r5)
   20830:	00f7ffc4 	movi	r3,-8193
   20834:	10880014 	ori	r2,r2,8192
   20838:	20c6703a 	and	r3,r4,r3
   2083c:	2880030d 	sth	r2,12(r5)
   20840:	28c01915 	stw	r3,100(r5)
   20844:	d9800404 	addi	r6,sp,16
   20848:	8009883a 	mov	r4,r16
   2084c:	00251700 	call	25170 <__sfvwrite_r>
   20850:	1000091e 	bne	r2,zero,20878 <_puts_r+0xb8>
   20854:	00800284 	movi	r2,10
   20858:	dfc00917 	ldw	ra,36(sp)
   2085c:	dc400817 	ldw	r17,32(sp)
   20860:	dc000717 	ldw	r16,28(sp)
   20864:	dec00a04 	addi	sp,sp,40
   20868:	f800283a 	ret
   2086c:	8009883a 	mov	r4,r16
   20870:	0024cec0 	call	24cec <__sinit>
   20874:	003fe906 	br	2081c <__alt_data_end+0xfffe081c>
   20878:	00bfffc4 	movi	r2,-1
   2087c:	003ff606 	br	20858 <__alt_data_end+0xfffe0858>

00020880 <puts>:
   20880:	008000f4 	movhi	r2,3
   20884:	1091bf04 	addi	r2,r2,18172
   20888:	200b883a 	mov	r5,r4
   2088c:	11000017 	ldw	r4,0(r2)
   20890:	00207c01 	jmpi	207c0 <_puts_r>

00020894 <strlen>:
   20894:	208000cc 	andi	r2,r4,3
   20898:	10002026 	beq	r2,zero,2091c <strlen+0x88>
   2089c:	20800007 	ldb	r2,0(r4)
   208a0:	10002026 	beq	r2,zero,20924 <strlen+0x90>
   208a4:	2005883a 	mov	r2,r4
   208a8:	00000206 	br	208b4 <strlen+0x20>
   208ac:	10c00007 	ldb	r3,0(r2)
   208b0:	18001826 	beq	r3,zero,20914 <strlen+0x80>
   208b4:	10800044 	addi	r2,r2,1
   208b8:	10c000cc 	andi	r3,r2,3
   208bc:	183ffb1e 	bne	r3,zero,208ac <__alt_data_end+0xfffe08ac>
   208c0:	10c00017 	ldw	r3,0(r2)
   208c4:	01ffbff4 	movhi	r7,65279
   208c8:	39ffbfc4 	addi	r7,r7,-257
   208cc:	00ca303a 	nor	r5,zero,r3
   208d0:	01a02074 	movhi	r6,32897
   208d4:	19c7883a 	add	r3,r3,r7
   208d8:	31a02004 	addi	r6,r6,-32640
   208dc:	1946703a 	and	r3,r3,r5
   208e0:	1986703a 	and	r3,r3,r6
   208e4:	1800091e 	bne	r3,zero,2090c <strlen+0x78>
   208e8:	10800104 	addi	r2,r2,4
   208ec:	10c00017 	ldw	r3,0(r2)
   208f0:	19cb883a 	add	r5,r3,r7
   208f4:	00c6303a 	nor	r3,zero,r3
   208f8:	28c6703a 	and	r3,r5,r3
   208fc:	1986703a 	and	r3,r3,r6
   20900:	183ff926 	beq	r3,zero,208e8 <__alt_data_end+0xfffe08e8>
   20904:	00000106 	br	2090c <strlen+0x78>
   20908:	10800044 	addi	r2,r2,1
   2090c:	10c00007 	ldb	r3,0(r2)
   20910:	183ffd1e 	bne	r3,zero,20908 <__alt_data_end+0xfffe0908>
   20914:	1105c83a 	sub	r2,r2,r4
   20918:	f800283a 	ret
   2091c:	2005883a 	mov	r2,r4
   20920:	003fe706 	br	208c0 <__alt_data_end+0xfffe08c0>
   20924:	0005883a 	mov	r2,zero
   20928:	f800283a 	ret

0002092c <___vfprintf_internal_r>:
   2092c:	deffb804 	addi	sp,sp,-288
   20930:	dfc04715 	stw	ra,284(sp)
   20934:	ddc04515 	stw	r23,276(sp)
   20938:	dd404315 	stw	r21,268(sp)
   2093c:	d9002d15 	stw	r4,180(sp)
   20940:	282f883a 	mov	r23,r5
   20944:	302b883a 	mov	r21,r6
   20948:	d9c02e15 	stw	r7,184(sp)
   2094c:	df004615 	stw	fp,280(sp)
   20950:	dd804415 	stw	r22,272(sp)
   20954:	dd004215 	stw	r20,264(sp)
   20958:	dcc04115 	stw	r19,260(sp)
   2095c:	dc804015 	stw	r18,256(sp)
   20960:	dc403f15 	stw	r17,252(sp)
   20964:	dc003e15 	stw	r16,248(sp)
   20968:	002586c0 	call	2586c <_localeconv_r>
   2096c:	10800017 	ldw	r2,0(r2)
   20970:	1009883a 	mov	r4,r2
   20974:	d8803415 	stw	r2,208(sp)
   20978:	00208940 	call	20894 <strlen>
   2097c:	d8803715 	stw	r2,220(sp)
   20980:	d8802d17 	ldw	r2,180(sp)
   20984:	10000226 	beq	r2,zero,20990 <___vfprintf_internal_r+0x64>
   20988:	10800e17 	ldw	r2,56(r2)
   2098c:	1000fb26 	beq	r2,zero,20d7c <___vfprintf_internal_r+0x450>
   20990:	b880030b 	ldhu	r2,12(r23)
   20994:	10c8000c 	andi	r3,r2,8192
   20998:	1800061e 	bne	r3,zero,209b4 <___vfprintf_internal_r+0x88>
   2099c:	b9001917 	ldw	r4,100(r23)
   209a0:	00f7ffc4 	movi	r3,-8193
   209a4:	10880014 	ori	r2,r2,8192
   209a8:	20c6703a 	and	r3,r4,r3
   209ac:	b880030d 	sth	r2,12(r23)
   209b0:	b8c01915 	stw	r3,100(r23)
   209b4:	10c0020c 	andi	r3,r2,8
   209b8:	1800c326 	beq	r3,zero,20cc8 <___vfprintf_internal_r+0x39c>
   209bc:	b8c00417 	ldw	r3,16(r23)
   209c0:	1800c126 	beq	r3,zero,20cc8 <___vfprintf_internal_r+0x39c>
   209c4:	1080068c 	andi	r2,r2,26
   209c8:	00c00284 	movi	r3,10
   209cc:	10c0c626 	beq	r2,r3,20ce8 <___vfprintf_internal_r+0x3bc>
   209d0:	d8c00404 	addi	r3,sp,16
   209d4:	050000f4 	movhi	r20,3
   209d8:	d9001e04 	addi	r4,sp,120
   209dc:	a50a1b84 	addi	r20,r20,10350
   209e0:	d8c01e15 	stw	r3,120(sp)
   209e4:	d8002015 	stw	zero,128(sp)
   209e8:	d8001f15 	stw	zero,124(sp)
   209ec:	d8003315 	stw	zero,204(sp)
   209f0:	d8003615 	stw	zero,216(sp)
   209f4:	d8003815 	stw	zero,224(sp)
   209f8:	1811883a 	mov	r8,r3
   209fc:	d8003915 	stw	zero,228(sp)
   20a00:	d8003a15 	stw	zero,232(sp)
   20a04:	d8002f15 	stw	zero,188(sp)
   20a08:	d9002815 	stw	r4,160(sp)
   20a0c:	a8800007 	ldb	r2,0(r21)
   20a10:	10028b26 	beq	r2,zero,21440 <___vfprintf_internal_r+0xb14>
   20a14:	00c00944 	movi	r3,37
   20a18:	a823883a 	mov	r17,r21
   20a1c:	10c0021e 	bne	r2,r3,20a28 <___vfprintf_internal_r+0xfc>
   20a20:	00001406 	br	20a74 <___vfprintf_internal_r+0x148>
   20a24:	10c00326 	beq	r2,r3,20a34 <___vfprintf_internal_r+0x108>
   20a28:	8c400044 	addi	r17,r17,1
   20a2c:	88800007 	ldb	r2,0(r17)
   20a30:	103ffc1e 	bne	r2,zero,20a24 <__alt_data_end+0xfffe0a24>
   20a34:	8d61c83a 	sub	r16,r17,r21
   20a38:	80000e26 	beq	r16,zero,20a74 <___vfprintf_internal_r+0x148>
   20a3c:	d8c02017 	ldw	r3,128(sp)
   20a40:	d8801f17 	ldw	r2,124(sp)
   20a44:	45400015 	stw	r21,0(r8)
   20a48:	1c07883a 	add	r3,r3,r16
   20a4c:	10800044 	addi	r2,r2,1
   20a50:	d8c02015 	stw	r3,128(sp)
   20a54:	44000115 	stw	r16,4(r8)
   20a58:	d8801f15 	stw	r2,124(sp)
   20a5c:	00c001c4 	movi	r3,7
   20a60:	1880a916 	blt	r3,r2,20d08 <___vfprintf_internal_r+0x3dc>
   20a64:	42000204 	addi	r8,r8,8
   20a68:	d9402f17 	ldw	r5,188(sp)
   20a6c:	2c0b883a 	add	r5,r5,r16
   20a70:	d9402f15 	stw	r5,188(sp)
   20a74:	88800007 	ldb	r2,0(r17)
   20a78:	1000aa26 	beq	r2,zero,20d24 <___vfprintf_internal_r+0x3f8>
   20a7c:	8d400044 	addi	r21,r17,1
   20a80:	8c400047 	ldb	r17,1(r17)
   20a84:	0021883a 	mov	r16,zero
   20a88:	00bfffc4 	movi	r2,-1
   20a8c:	0025883a 	mov	r18,zero
   20a90:	dc002905 	stb	r16,164(sp)
   20a94:	d8002785 	stb	zero,158(sp)
   20a98:	d8002b05 	stb	zero,172(sp)
   20a9c:	d8802a15 	stw	r2,168(sp)
   20aa0:	d8003115 	stw	zero,196(sp)
   20aa4:	04c01604 	movi	r19,88
   20aa8:	05800244 	movi	r22,9
   20aac:	9021883a 	mov	r16,r18
   20ab0:	4039883a 	mov	fp,r8
   20ab4:	ad400044 	addi	r21,r21,1
   20ab8:	88bff804 	addi	r2,r17,-32
   20abc:	98833236 	bltu	r19,r2,21788 <___vfprintf_internal_r+0xe5c>
   20ac0:	100490ba 	slli	r2,r2,2
   20ac4:	00c000b4 	movhi	r3,2
   20ac8:	18c2b604 	addi	r3,r3,2776
   20acc:	10c5883a 	add	r2,r2,r3
   20ad0:	10800017 	ldw	r2,0(r2)
   20ad4:	1000683a 	jmp	r2
   20ad8:	00021680 	call	2168 <__alt_mem_RAM-0x1de98>
   20adc:	00021788 	cmpgei	zero,zero,2142
   20ae0:	00021788 	cmpgei	zero,zero,2142
   20ae4:	000216a0 	cmpeqi	zero,zero,2138
   20ae8:	00021788 	cmpgei	zero,zero,2142
   20aec:	00021788 	cmpgei	zero,zero,2142
   20af0:	00021788 	cmpgei	zero,zero,2142
   20af4:	00021788 	cmpgei	zero,zero,2142
   20af8:	00021788 	cmpgei	zero,zero,2142
   20afc:	00021788 	cmpgei	zero,zero,2142
   20b00:	00020d88 	cmpgei	zero,zero,2102
   20b04:	00021590 	cmplti	zero,zero,2134
   20b08:	00021788 	cmpgei	zero,zero,2142
   20b0c:	00020c4c 	andi	zero,zero,2097
   20b10:	00020dac 	andhi	zero,zero,2102
   20b14:	00021788 	cmpgei	zero,zero,2142
   20b18:	00020dfc 	xorhi	zero,zero,2103
   20b1c:	00020e08 	cmpgei	zero,zero,2104
   20b20:	00020e08 	cmpgei	zero,zero,2104
   20b24:	00020e08 	cmpgei	zero,zero,2104
   20b28:	00020e08 	cmpgei	zero,zero,2104
   20b2c:	00020e08 	cmpgei	zero,zero,2104
   20b30:	00020e08 	cmpgei	zero,zero,2104
   20b34:	00020e08 	cmpgei	zero,zero,2104
   20b38:	00020e08 	cmpgei	zero,zero,2104
   20b3c:	00020e08 	cmpgei	zero,zero,2104
   20b40:	00021788 	cmpgei	zero,zero,2142
   20b44:	00021788 	cmpgei	zero,zero,2142
   20b48:	00021788 	cmpgei	zero,zero,2142
   20b4c:	00021788 	cmpgei	zero,zero,2142
   20b50:	00021788 	cmpgei	zero,zero,2142
   20b54:	00021788 	cmpgei	zero,zero,2142
   20b58:	00021788 	cmpgei	zero,zero,2142
   20b5c:	00021788 	cmpgei	zero,zero,2142
   20b60:	00021788 	cmpgei	zero,zero,2142
   20b64:	00021788 	cmpgei	zero,zero,2142
   20b68:	00020e44 	movi	zero,2105
   20b6c:	00020f0c 	andi	zero,zero,2108
   20b70:	00021788 	cmpgei	zero,zero,2142
   20b74:	00020f0c 	andi	zero,zero,2108
   20b78:	00021788 	cmpgei	zero,zero,2142
   20b7c:	00021788 	cmpgei	zero,zero,2142
   20b80:	00021788 	cmpgei	zero,zero,2142
   20b84:	00021788 	cmpgei	zero,zero,2142
   20b88:	00020fb8 	rdprs	zero,zero,2110
   20b8c:	00021788 	cmpgei	zero,zero,2142
   20b90:	00021788 	cmpgei	zero,zero,2142
   20b94:	00020fc4 	movi	zero,2111
   20b98:	00021788 	cmpgei	zero,zero,2142
   20b9c:	00021788 	cmpgei	zero,zero,2142
   20ba0:	00021788 	cmpgei	zero,zero,2142
   20ba4:	00021788 	cmpgei	zero,zero,2142
   20ba8:	00021788 	cmpgei	zero,zero,2142
   20bac:	00021448 	cmpgei	zero,zero,2129
   20bb0:	00021788 	cmpgei	zero,zero,2142
   20bb4:	00021788 	cmpgei	zero,zero,2142
   20bb8:	000214b4 	movhi	zero,2130
   20bbc:	00021788 	cmpgei	zero,zero,2142
   20bc0:	00021788 	cmpgei	zero,zero,2142
   20bc4:	00021788 	cmpgei	zero,zero,2142
   20bc8:	00021788 	cmpgei	zero,zero,2142
   20bcc:	00021788 	cmpgei	zero,zero,2142
   20bd0:	00021788 	cmpgei	zero,zero,2142
   20bd4:	00021788 	cmpgei	zero,zero,2142
   20bd8:	00021788 	cmpgei	zero,zero,2142
   20bdc:	00021788 	cmpgei	zero,zero,2142
   20be0:	00021788 	cmpgei	zero,zero,2142
   20be4:	0002172c 	andhi	zero,zero,2140
   20be8:	000216ac 	andhi	zero,zero,2138
   20bec:	00020f0c 	andi	zero,zero,2108
   20bf0:	00020f0c 	andi	zero,zero,2108
   20bf4:	00020f0c 	andi	zero,zero,2108
   20bf8:	000216cc 	andi	zero,zero,2139
   20bfc:	000216ac 	andhi	zero,zero,2138
   20c00:	00021788 	cmpgei	zero,zero,2142
   20c04:	00021788 	cmpgei	zero,zero,2142
   20c08:	000216d8 	cmpnei	zero,zero,2139
   20c0c:	00021788 	cmpgei	zero,zero,2142
   20c10:	000216ec 	andhi	zero,zero,2139
   20c14:	00021570 	cmpltui	zero,zero,2133
   20c18:	00020c58 	cmpnei	zero,zero,2097
   20c1c:	000215a8 	cmpgeui	zero,zero,2134
   20c20:	00021788 	cmpgei	zero,zero,2142
   20c24:	000215b4 	movhi	zero,2134
   20c28:	00021788 	cmpgei	zero,zero,2142
   20c2c:	00021618 	cmpnei	zero,zero,2136
   20c30:	00021788 	cmpgei	zero,zero,2142
   20c34:	00021788 	cmpgei	zero,zero,2142
   20c38:	00021638 	rdprs	zero,zero,2136
   20c3c:	d8c03117 	ldw	r3,196(sp)
   20c40:	d8802e15 	stw	r2,184(sp)
   20c44:	00c7c83a 	sub	r3,zero,r3
   20c48:	d8c03115 	stw	r3,196(sp)
   20c4c:	84000114 	ori	r16,r16,4
   20c50:	ac400007 	ldb	r17,0(r21)
   20c54:	003f9706 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   20c58:	00800c04 	movi	r2,48
   20c5c:	d8802705 	stb	r2,156(sp)
   20c60:	00801e04 	movi	r2,120
   20c64:	d8802745 	stb	r2,157(sp)
   20c68:	d9002a17 	ldw	r4,168(sp)
   20c6c:	d8802e17 	ldw	r2,184(sp)
   20c70:	d8002785 	stb	zero,158(sp)
   20c74:	e011883a 	mov	r8,fp
   20c78:	10c00104 	addi	r3,r2,4
   20c7c:	14c00017 	ldw	r19,0(r2)
   20c80:	002d883a 	mov	r22,zero
   20c84:	80800094 	ori	r2,r16,2
   20c88:	2002ca16 	blt	r4,zero,217b4 <___vfprintf_internal_r+0xe88>
   20c8c:	00bfdfc4 	movi	r2,-129
   20c90:	80a4703a 	and	r18,r16,r2
   20c94:	d8c02e15 	stw	r3,184(sp)
   20c98:	94800094 	ori	r18,r18,2
   20c9c:	9802b41e 	bne	r19,zero,21770 <___vfprintf_internal_r+0xe44>
   20ca0:	014000f4 	movhi	r5,3
   20ca4:	294a1404 	addi	r5,r5,10320
   20ca8:	d9403915 	stw	r5,228(sp)
   20cac:	04401e04 	movi	r17,120
   20cb0:	d8802a17 	ldw	r2,168(sp)
   20cb4:	0039883a 	mov	fp,zero
   20cb8:	1001fa26 	beq	r2,zero,214a4 <___vfprintf_internal_r+0xb78>
   20cbc:	0027883a 	mov	r19,zero
   20cc0:	002d883a 	mov	r22,zero
   20cc4:	00021906 	br	2152c <___vfprintf_internal_r+0xc00>
   20cc8:	d9002d17 	ldw	r4,180(sp)
   20ccc:	b80b883a 	mov	r5,r23
   20cd0:	0022ce00 	call	22ce0 <__swsetup_r>
   20cd4:	1005dc1e 	bne	r2,zero,22448 <___vfprintf_internal_r+0x1b1c>
   20cd8:	b880030b 	ldhu	r2,12(r23)
   20cdc:	00c00284 	movi	r3,10
   20ce0:	1080068c 	andi	r2,r2,26
   20ce4:	10ff3a1e 	bne	r2,r3,209d0 <__alt_data_end+0xfffe09d0>
   20ce8:	b880038f 	ldh	r2,14(r23)
   20cec:	103f3816 	blt	r2,zero,209d0 <__alt_data_end+0xfffe09d0>
   20cf0:	d9c02e17 	ldw	r7,184(sp)
   20cf4:	d9002d17 	ldw	r4,180(sp)
   20cf8:	a80d883a 	mov	r6,r21
   20cfc:	b80b883a 	mov	r5,r23
   20d00:	0022c240 	call	22c24 <__sbprintf>
   20d04:	00001106 	br	20d4c <___vfprintf_internal_r+0x420>
   20d08:	d9002d17 	ldw	r4,180(sp)
   20d0c:	d9801e04 	addi	r6,sp,120
   20d10:	b80b883a 	mov	r5,r23
   20d14:	002810c0 	call	2810c <__sprint_r>
   20d18:	1000081e 	bne	r2,zero,20d3c <___vfprintf_internal_r+0x410>
   20d1c:	da000404 	addi	r8,sp,16
   20d20:	003f5106 	br	20a68 <__alt_data_end+0xfffe0a68>
   20d24:	d8802017 	ldw	r2,128(sp)
   20d28:	10000426 	beq	r2,zero,20d3c <___vfprintf_internal_r+0x410>
   20d2c:	d9002d17 	ldw	r4,180(sp)
   20d30:	d9801e04 	addi	r6,sp,120
   20d34:	b80b883a 	mov	r5,r23
   20d38:	002810c0 	call	2810c <__sprint_r>
   20d3c:	b880030b 	ldhu	r2,12(r23)
   20d40:	1080100c 	andi	r2,r2,64
   20d44:	1005c01e 	bne	r2,zero,22448 <___vfprintf_internal_r+0x1b1c>
   20d48:	d8802f17 	ldw	r2,188(sp)
   20d4c:	dfc04717 	ldw	ra,284(sp)
   20d50:	df004617 	ldw	fp,280(sp)
   20d54:	ddc04517 	ldw	r23,276(sp)
   20d58:	dd804417 	ldw	r22,272(sp)
   20d5c:	dd404317 	ldw	r21,268(sp)
   20d60:	dd004217 	ldw	r20,264(sp)
   20d64:	dcc04117 	ldw	r19,260(sp)
   20d68:	dc804017 	ldw	r18,256(sp)
   20d6c:	dc403f17 	ldw	r17,252(sp)
   20d70:	dc003e17 	ldw	r16,248(sp)
   20d74:	dec04804 	addi	sp,sp,288
   20d78:	f800283a 	ret
   20d7c:	d9002d17 	ldw	r4,180(sp)
   20d80:	0024cec0 	call	24cec <__sinit>
   20d84:	003f0206 	br	20990 <__alt_data_end+0xfffe0990>
   20d88:	d9002e17 	ldw	r4,184(sp)
   20d8c:	d9402e17 	ldw	r5,184(sp)
   20d90:	21000017 	ldw	r4,0(r4)
   20d94:	28800104 	addi	r2,r5,4
   20d98:	d9003115 	stw	r4,196(sp)
   20d9c:	203fa716 	blt	r4,zero,20c3c <__alt_data_end+0xfffe0c3c>
   20da0:	d8802e15 	stw	r2,184(sp)
   20da4:	ac400007 	ldb	r17,0(r21)
   20da8:	003f4206 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   20dac:	ac400007 	ldb	r17,0(r21)
   20db0:	01000a84 	movi	r4,42
   20db4:	a8c00044 	addi	r3,r21,1
   20db8:	89075826 	beq	r17,r4,22b1c <___vfprintf_internal_r+0x21f0>
   20dbc:	8cbff404 	addi	r18,r17,-48
   20dc0:	b486ae36 	bltu	r22,r18,2287c <___vfprintf_internal_r+0x1f50>
   20dc4:	0009883a 	mov	r4,zero
   20dc8:	1823883a 	mov	r17,r3
   20dcc:	01400284 	movi	r5,10
   20dd0:	002adc80 	call	2adc8 <__mulsi3>
   20dd4:	88c00007 	ldb	r3,0(r17)
   20dd8:	1489883a 	add	r4,r2,r18
   20ddc:	8d400044 	addi	r21,r17,1
   20de0:	1cbff404 	addi	r18,r3,-48
   20de4:	a823883a 	mov	r17,r21
   20de8:	b4bff82e 	bgeu	r22,r18,20dcc <__alt_data_end+0xfffe0dcc>
   20dec:	1823883a 	mov	r17,r3
   20df0:	2005f616 	blt	r4,zero,225cc <___vfprintf_internal_r+0x1ca0>
   20df4:	d9002a15 	stw	r4,168(sp)
   20df8:	003f2f06 	br	20ab8 <__alt_data_end+0xfffe0ab8>
   20dfc:	84002014 	ori	r16,r16,128
   20e00:	ac400007 	ldb	r17,0(r21)
   20e04:	003f2b06 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   20e08:	8cbff404 	addi	r18,r17,-48
   20e0c:	d8003115 	stw	zero,196(sp)
   20e10:	0009883a 	mov	r4,zero
   20e14:	a823883a 	mov	r17,r21
   20e18:	01400284 	movi	r5,10
   20e1c:	002adc80 	call	2adc8 <__mulsi3>
   20e20:	88c00007 	ldb	r3,0(r17)
   20e24:	9089883a 	add	r4,r18,r2
   20e28:	ad400044 	addi	r21,r21,1
   20e2c:	1cbff404 	addi	r18,r3,-48
   20e30:	a823883a 	mov	r17,r21
   20e34:	b4bff82e 	bgeu	r22,r18,20e18 <__alt_data_end+0xfffe0e18>
   20e38:	1823883a 	mov	r17,r3
   20e3c:	d9003115 	stw	r4,196(sp)
   20e40:	003f1d06 	br	20ab8 <__alt_data_end+0xfffe0ab8>
   20e44:	8025883a 	mov	r18,r16
   20e48:	dc002903 	ldbu	r16,164(sp)
   20e4c:	e011883a 	mov	r8,fp
   20e50:	84003fcc 	andi	r16,r16,255
   20e54:	8007531e 	bne	r16,zero,22ba4 <___vfprintf_internal_r+0x2278>
   20e58:	94800414 	ori	r18,r18,16
   20e5c:	9080080c 	andi	r2,r18,32
   20e60:	1003a326 	beq	r2,zero,21cf0 <___vfprintf_internal_r+0x13c4>
   20e64:	d9002e17 	ldw	r4,184(sp)
   20e68:	20800117 	ldw	r2,4(r4)
   20e6c:	24c00017 	ldw	r19,0(r4)
   20e70:	21000204 	addi	r4,r4,8
   20e74:	d9002e15 	stw	r4,184(sp)
   20e78:	102d883a 	mov	r22,r2
   20e7c:	10047316 	blt	r2,zero,2204c <___vfprintf_internal_r+0x1720>
   20e80:	d9002a17 	ldw	r4,168(sp)
   20e84:	df002783 	ldbu	fp,158(sp)
   20e88:	2003e416 	blt	r4,zero,21e1c <___vfprintf_internal_r+0x14f0>
   20e8c:	00ffdfc4 	movi	r3,-129
   20e90:	9d84b03a 	or	r2,r19,r22
   20e94:	90e4703a 	and	r18,r18,r3
   20e98:	10018026 	beq	r2,zero,2149c <___vfprintf_internal_r+0xb70>
   20e9c:	b003ab26 	beq	r22,zero,21d4c <___vfprintf_internal_r+0x1420>
   20ea0:	dc402915 	stw	r17,164(sp)
   20ea4:	dc001e04 	addi	r16,sp,120
   20ea8:	b023883a 	mov	r17,r22
   20eac:	402d883a 	mov	r22,r8
   20eb0:	9809883a 	mov	r4,r19
   20eb4:	880b883a 	mov	r5,r17
   20eb8:	01800284 	movi	r6,10
   20ebc:	000f883a 	mov	r7,zero
   20ec0:	002a6500 	call	2a650 <__umoddi3>
   20ec4:	10800c04 	addi	r2,r2,48
   20ec8:	843fffc4 	addi	r16,r16,-1
   20ecc:	9809883a 	mov	r4,r19
   20ed0:	880b883a 	mov	r5,r17
   20ed4:	80800005 	stb	r2,0(r16)
   20ed8:	01800284 	movi	r6,10
   20edc:	000f883a 	mov	r7,zero
   20ee0:	002a0540 	call	2a054 <__udivdi3>
   20ee4:	1027883a 	mov	r19,r2
   20ee8:	10c4b03a 	or	r2,r2,r3
   20eec:	1823883a 	mov	r17,r3
   20ef0:	103fef1e 	bne	r2,zero,20eb0 <__alt_data_end+0xfffe0eb0>
   20ef4:	d8c02817 	ldw	r3,160(sp)
   20ef8:	dc402917 	ldw	r17,164(sp)
   20efc:	b011883a 	mov	r8,r22
   20f00:	1c07c83a 	sub	r3,r3,r16
   20f04:	d8c02b15 	stw	r3,172(sp)
   20f08:	00005f06 	br	21088 <___vfprintf_internal_r+0x75c>
   20f0c:	8025883a 	mov	r18,r16
   20f10:	dc002903 	ldbu	r16,164(sp)
   20f14:	e011883a 	mov	r8,fp
   20f18:	84003fcc 	andi	r16,r16,255
   20f1c:	80071e1e 	bne	r16,zero,22b98 <___vfprintf_internal_r+0x226c>
   20f20:	9080020c 	andi	r2,r18,8
   20f24:	1004af26 	beq	r2,zero,221e4 <___vfprintf_internal_r+0x18b8>
   20f28:	d9002e17 	ldw	r4,184(sp)
   20f2c:	d9402e17 	ldw	r5,184(sp)
   20f30:	d8802e17 	ldw	r2,184(sp)
   20f34:	21000017 	ldw	r4,0(r4)
   20f38:	29400117 	ldw	r5,4(r5)
   20f3c:	10800204 	addi	r2,r2,8
   20f40:	d9003615 	stw	r4,216(sp)
   20f44:	d9403815 	stw	r5,224(sp)
   20f48:	d8802e15 	stw	r2,184(sp)
   20f4c:	d9003617 	ldw	r4,216(sp)
   20f50:	d9403817 	ldw	r5,224(sp)
   20f54:	da003d15 	stw	r8,244(sp)
   20f58:	04000044 	movi	r16,1
   20f5c:	0027d300 	call	27d30 <__fpclassifyd>
   20f60:	da003d17 	ldw	r8,244(sp)
   20f64:	1404441e 	bne	r2,r16,22078 <___vfprintf_internal_r+0x174c>
   20f68:	d9003617 	ldw	r4,216(sp)
   20f6c:	d9403817 	ldw	r5,224(sp)
   20f70:	000d883a 	mov	r6,zero
   20f74:	000f883a 	mov	r7,zero
   20f78:	002c1d00 	call	2c1d0 <__ledf2>
   20f7c:	da003d17 	ldw	r8,244(sp)
   20f80:	1005e316 	blt	r2,zero,22710 <___vfprintf_internal_r+0x1de4>
   20f84:	df002783 	ldbu	fp,158(sp)
   20f88:	008011c4 	movi	r2,71
   20f8c:	1445580e 	bge	r2,r17,224f0 <___vfprintf_internal_r+0x1bc4>
   20f90:	040000f4 	movhi	r16,3
   20f94:	840a0c04 	addi	r16,r16,10288
   20f98:	00c000c4 	movi	r3,3
   20f9c:	00bfdfc4 	movi	r2,-129
   20fa0:	d8c02915 	stw	r3,164(sp)
   20fa4:	90a4703a 	and	r18,r18,r2
   20fa8:	d8c02b15 	stw	r3,172(sp)
   20fac:	d8002a15 	stw	zero,168(sp)
   20fb0:	d8003215 	stw	zero,200(sp)
   20fb4:	00003a06 	br	210a0 <___vfprintf_internal_r+0x774>
   20fb8:	84000214 	ori	r16,r16,8
   20fbc:	ac400007 	ldb	r17,0(r21)
   20fc0:	003ebc06 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   20fc4:	8025883a 	mov	r18,r16
   20fc8:	dc002903 	ldbu	r16,164(sp)
   20fcc:	e011883a 	mov	r8,fp
   20fd0:	84003fcc 	andi	r16,r16,255
   20fd4:	8007001e 	bne	r16,zero,22bd8 <___vfprintf_internal_r+0x22ac>
   20fd8:	94800414 	ori	r18,r18,16
   20fdc:	9080080c 	andi	r2,r18,32
   20fe0:	1002fa26 	beq	r2,zero,21bcc <___vfprintf_internal_r+0x12a0>
   20fe4:	d9002e17 	ldw	r4,184(sp)
   20fe8:	d9402a17 	ldw	r5,168(sp)
   20fec:	d8002785 	stb	zero,158(sp)
   20ff0:	20800204 	addi	r2,r4,8
   20ff4:	24c00017 	ldw	r19,0(r4)
   20ff8:	25800117 	ldw	r22,4(r4)
   20ffc:	2804b116 	blt	r5,zero,222c4 <___vfprintf_internal_r+0x1998>
   21000:	013fdfc4 	movi	r4,-129
   21004:	9d86b03a 	or	r3,r19,r22
   21008:	d8802e15 	stw	r2,184(sp)
   2100c:	9124703a 	and	r18,r18,r4
   21010:	1802fb1e 	bne	r3,zero,21c00 <___vfprintf_internal_r+0x12d4>
   21014:	d8c02a17 	ldw	r3,168(sp)
   21018:	0039883a 	mov	fp,zero
   2101c:	1805e526 	beq	r3,zero,227b4 <___vfprintf_internal_r+0x1e88>
   21020:	0027883a 	mov	r19,zero
   21024:	002d883a 	mov	r22,zero
   21028:	dc001e04 	addi	r16,sp,120
   2102c:	9806d0fa 	srli	r3,r19,3
   21030:	b008977a 	slli	r4,r22,29
   21034:	b02cd0fa 	srli	r22,r22,3
   21038:	9cc001cc 	andi	r19,r19,7
   2103c:	98800c04 	addi	r2,r19,48
   21040:	843fffc4 	addi	r16,r16,-1
   21044:	20e6b03a 	or	r19,r4,r3
   21048:	80800005 	stb	r2,0(r16)
   2104c:	9d86b03a 	or	r3,r19,r22
   21050:	183ff61e 	bne	r3,zero,2102c <__alt_data_end+0xfffe102c>
   21054:	90c0004c 	andi	r3,r18,1
   21058:	18014126 	beq	r3,zero,21560 <___vfprintf_internal_r+0xc34>
   2105c:	10803fcc 	andi	r2,r2,255
   21060:	1080201c 	xori	r2,r2,128
   21064:	10bfe004 	addi	r2,r2,-128
   21068:	00c00c04 	movi	r3,48
   2106c:	10c13c26 	beq	r2,r3,21560 <___vfprintf_internal_r+0xc34>
   21070:	80ffffc5 	stb	r3,-1(r16)
   21074:	d8c02817 	ldw	r3,160(sp)
   21078:	80bfffc4 	addi	r2,r16,-1
   2107c:	1021883a 	mov	r16,r2
   21080:	1887c83a 	sub	r3,r3,r2
   21084:	d8c02b15 	stw	r3,172(sp)
   21088:	d8802b17 	ldw	r2,172(sp)
   2108c:	d9002a17 	ldw	r4,168(sp)
   21090:	1100010e 	bge	r2,r4,21098 <___vfprintf_internal_r+0x76c>
   21094:	2005883a 	mov	r2,r4
   21098:	d8802915 	stw	r2,164(sp)
   2109c:	d8003215 	stw	zero,200(sp)
   210a0:	e7003fcc 	andi	fp,fp,255
   210a4:	e700201c 	xori	fp,fp,128
   210a8:	e73fe004 	addi	fp,fp,-128
   210ac:	e0000326 	beq	fp,zero,210bc <___vfprintf_internal_r+0x790>
   210b0:	d8c02917 	ldw	r3,164(sp)
   210b4:	18c00044 	addi	r3,r3,1
   210b8:	d8c02915 	stw	r3,164(sp)
   210bc:	90c0008c 	andi	r3,r18,2
   210c0:	d8c02c15 	stw	r3,176(sp)
   210c4:	18000326 	beq	r3,zero,210d4 <___vfprintf_internal_r+0x7a8>
   210c8:	d8c02917 	ldw	r3,164(sp)
   210cc:	18c00084 	addi	r3,r3,2
   210d0:	d8c02915 	stw	r3,164(sp)
   210d4:	90c0210c 	andi	r3,r18,132
   210d8:	d8c03015 	stw	r3,192(sp)
   210dc:	1801c51e 	bne	r3,zero,217f4 <___vfprintf_internal_r+0xec8>
   210e0:	d9003117 	ldw	r4,196(sp)
   210e4:	d8c02917 	ldw	r3,164(sp)
   210e8:	20e7c83a 	sub	r19,r4,r3
   210ec:	04c1c10e 	bge	zero,r19,217f4 <___vfprintf_internal_r+0xec8>
   210f0:	02400404 	movi	r9,16
   210f4:	d8c02017 	ldw	r3,128(sp)
   210f8:	d8801f17 	ldw	r2,124(sp)
   210fc:	4cc52f0e 	bge	r9,r19,225bc <___vfprintf_internal_r+0x1c90>
   21100:	014000f4 	movhi	r5,3
   21104:	294a1f84 	addi	r5,r5,10366
   21108:	dc403b15 	stw	r17,236(sp)
   2110c:	d9403515 	stw	r5,212(sp)
   21110:	9823883a 	mov	r17,r19
   21114:	482d883a 	mov	r22,r9
   21118:	9027883a 	mov	r19,r18
   2111c:	070001c4 	movi	fp,7
   21120:	8025883a 	mov	r18,r16
   21124:	dc002d17 	ldw	r16,180(sp)
   21128:	00000306 	br	21138 <___vfprintf_internal_r+0x80c>
   2112c:	8c7ffc04 	addi	r17,r17,-16
   21130:	42000204 	addi	r8,r8,8
   21134:	b440130e 	bge	r22,r17,21184 <___vfprintf_internal_r+0x858>
   21138:	010000f4 	movhi	r4,3
   2113c:	18c00404 	addi	r3,r3,16
   21140:	10800044 	addi	r2,r2,1
   21144:	210a1f84 	addi	r4,r4,10366
   21148:	41000015 	stw	r4,0(r8)
   2114c:	45800115 	stw	r22,4(r8)
   21150:	d8c02015 	stw	r3,128(sp)
   21154:	d8801f15 	stw	r2,124(sp)
   21158:	e0bff40e 	bge	fp,r2,2112c <__alt_data_end+0xfffe112c>
   2115c:	d9801e04 	addi	r6,sp,120
   21160:	b80b883a 	mov	r5,r23
   21164:	8009883a 	mov	r4,r16
   21168:	002810c0 	call	2810c <__sprint_r>
   2116c:	103ef31e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21170:	8c7ffc04 	addi	r17,r17,-16
   21174:	d8c02017 	ldw	r3,128(sp)
   21178:	d8801f17 	ldw	r2,124(sp)
   2117c:	da000404 	addi	r8,sp,16
   21180:	b47fed16 	blt	r22,r17,21138 <__alt_data_end+0xfffe1138>
   21184:	9021883a 	mov	r16,r18
   21188:	9825883a 	mov	r18,r19
   2118c:	8827883a 	mov	r19,r17
   21190:	dc403b17 	ldw	r17,236(sp)
   21194:	d9403517 	ldw	r5,212(sp)
   21198:	98c7883a 	add	r3,r19,r3
   2119c:	10800044 	addi	r2,r2,1
   211a0:	41400015 	stw	r5,0(r8)
   211a4:	44c00115 	stw	r19,4(r8)
   211a8:	d8c02015 	stw	r3,128(sp)
   211ac:	d8801f15 	stw	r2,124(sp)
   211b0:	010001c4 	movi	r4,7
   211b4:	2082c516 	blt	r4,r2,21ccc <___vfprintf_internal_r+0x13a0>
   211b8:	df002787 	ldb	fp,158(sp)
   211bc:	42000204 	addi	r8,r8,8
   211c0:	e0000c26 	beq	fp,zero,211f4 <___vfprintf_internal_r+0x8c8>
   211c4:	d8801f17 	ldw	r2,124(sp)
   211c8:	d9002784 	addi	r4,sp,158
   211cc:	18c00044 	addi	r3,r3,1
   211d0:	10800044 	addi	r2,r2,1
   211d4:	41000015 	stw	r4,0(r8)
   211d8:	01000044 	movi	r4,1
   211dc:	41000115 	stw	r4,4(r8)
   211e0:	d8c02015 	stw	r3,128(sp)
   211e4:	d8801f15 	stw	r2,124(sp)
   211e8:	010001c4 	movi	r4,7
   211ec:	20825e16 	blt	r4,r2,21b68 <___vfprintf_internal_r+0x123c>
   211f0:	42000204 	addi	r8,r8,8
   211f4:	d8802c17 	ldw	r2,176(sp)
   211f8:	10000c26 	beq	r2,zero,2122c <___vfprintf_internal_r+0x900>
   211fc:	d8801f17 	ldw	r2,124(sp)
   21200:	d9002704 	addi	r4,sp,156
   21204:	18c00084 	addi	r3,r3,2
   21208:	10800044 	addi	r2,r2,1
   2120c:	41000015 	stw	r4,0(r8)
   21210:	01000084 	movi	r4,2
   21214:	41000115 	stw	r4,4(r8)
   21218:	d8c02015 	stw	r3,128(sp)
   2121c:	d8801f15 	stw	r2,124(sp)
   21220:	010001c4 	movi	r4,7
   21224:	20825816 	blt	r4,r2,21b88 <___vfprintf_internal_r+0x125c>
   21228:	42000204 	addi	r8,r8,8
   2122c:	d9003017 	ldw	r4,192(sp)
   21230:	00802004 	movi	r2,128
   21234:	2081bb26 	beq	r4,r2,21924 <___vfprintf_internal_r+0xff8>
   21238:	d9402a17 	ldw	r5,168(sp)
   2123c:	d8802b17 	ldw	r2,172(sp)
   21240:	28adc83a 	sub	r22,r5,r2
   21244:	0580310e 	bge	zero,r22,2130c <___vfprintf_internal_r+0x9e0>
   21248:	07000404 	movi	fp,16
   2124c:	d8801f17 	ldw	r2,124(sp)
   21250:	e584360e 	bge	fp,r22,2232c <___vfprintf_internal_r+0x1a00>
   21254:	014000f4 	movhi	r5,3
   21258:	294a1b84 	addi	r5,r5,10350
   2125c:	dc402a15 	stw	r17,168(sp)
   21260:	d9402c15 	stw	r5,176(sp)
   21264:	b023883a 	mov	r17,r22
   21268:	04c001c4 	movi	r19,7
   2126c:	a82d883a 	mov	r22,r21
   21270:	902b883a 	mov	r21,r18
   21274:	8025883a 	mov	r18,r16
   21278:	dc002d17 	ldw	r16,180(sp)
   2127c:	00000306 	br	2128c <___vfprintf_internal_r+0x960>
   21280:	8c7ffc04 	addi	r17,r17,-16
   21284:	42000204 	addi	r8,r8,8
   21288:	e440110e 	bge	fp,r17,212d0 <___vfprintf_internal_r+0x9a4>
   2128c:	18c00404 	addi	r3,r3,16
   21290:	10800044 	addi	r2,r2,1
   21294:	45000015 	stw	r20,0(r8)
   21298:	47000115 	stw	fp,4(r8)
   2129c:	d8c02015 	stw	r3,128(sp)
   212a0:	d8801f15 	stw	r2,124(sp)
   212a4:	98bff60e 	bge	r19,r2,21280 <__alt_data_end+0xfffe1280>
   212a8:	d9801e04 	addi	r6,sp,120
   212ac:	b80b883a 	mov	r5,r23
   212b0:	8009883a 	mov	r4,r16
   212b4:	002810c0 	call	2810c <__sprint_r>
   212b8:	103ea01e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   212bc:	8c7ffc04 	addi	r17,r17,-16
   212c0:	d8c02017 	ldw	r3,128(sp)
   212c4:	d8801f17 	ldw	r2,124(sp)
   212c8:	da000404 	addi	r8,sp,16
   212cc:	e47fef16 	blt	fp,r17,2128c <__alt_data_end+0xfffe128c>
   212d0:	9021883a 	mov	r16,r18
   212d4:	a825883a 	mov	r18,r21
   212d8:	b02b883a 	mov	r21,r22
   212dc:	882d883a 	mov	r22,r17
   212e0:	dc402a17 	ldw	r17,168(sp)
   212e4:	d9002c17 	ldw	r4,176(sp)
   212e8:	1d87883a 	add	r3,r3,r22
   212ec:	10800044 	addi	r2,r2,1
   212f0:	41000015 	stw	r4,0(r8)
   212f4:	45800115 	stw	r22,4(r8)
   212f8:	d8c02015 	stw	r3,128(sp)
   212fc:	d8801f15 	stw	r2,124(sp)
   21300:	010001c4 	movi	r4,7
   21304:	20821016 	blt	r4,r2,21b48 <___vfprintf_internal_r+0x121c>
   21308:	42000204 	addi	r8,r8,8
   2130c:	9080400c 	andi	r2,r18,256
   21310:	10013a1e 	bne	r2,zero,217fc <___vfprintf_internal_r+0xed0>
   21314:	d9402b17 	ldw	r5,172(sp)
   21318:	d8801f17 	ldw	r2,124(sp)
   2131c:	44000015 	stw	r16,0(r8)
   21320:	1947883a 	add	r3,r3,r5
   21324:	10800044 	addi	r2,r2,1
   21328:	41400115 	stw	r5,4(r8)
   2132c:	d8c02015 	stw	r3,128(sp)
   21330:	d8801f15 	stw	r2,124(sp)
   21334:	010001c4 	movi	r4,7
   21338:	2081f516 	blt	r4,r2,21b10 <___vfprintf_internal_r+0x11e4>
   2133c:	42000204 	addi	r8,r8,8
   21340:	9480010c 	andi	r18,r18,4
   21344:	90003226 	beq	r18,zero,21410 <___vfprintf_internal_r+0xae4>
   21348:	d9403117 	ldw	r5,196(sp)
   2134c:	d8802917 	ldw	r2,164(sp)
   21350:	28a1c83a 	sub	r16,r5,r2
   21354:	04002e0e 	bge	zero,r16,21410 <___vfprintf_internal_r+0xae4>
   21358:	04400404 	movi	r17,16
   2135c:	d8801f17 	ldw	r2,124(sp)
   21360:	8c04c40e 	bge	r17,r16,22674 <___vfprintf_internal_r+0x1d48>
   21364:	014000f4 	movhi	r5,3
   21368:	294a1f84 	addi	r5,r5,10366
   2136c:	d9403515 	stw	r5,212(sp)
   21370:	048001c4 	movi	r18,7
   21374:	dcc02d17 	ldw	r19,180(sp)
   21378:	00000306 	br	21388 <___vfprintf_internal_r+0xa5c>
   2137c:	843ffc04 	addi	r16,r16,-16
   21380:	42000204 	addi	r8,r8,8
   21384:	8c00130e 	bge	r17,r16,213d4 <___vfprintf_internal_r+0xaa8>
   21388:	010000f4 	movhi	r4,3
   2138c:	18c00404 	addi	r3,r3,16
   21390:	10800044 	addi	r2,r2,1
   21394:	210a1f84 	addi	r4,r4,10366
   21398:	41000015 	stw	r4,0(r8)
   2139c:	44400115 	stw	r17,4(r8)
   213a0:	d8c02015 	stw	r3,128(sp)
   213a4:	d8801f15 	stw	r2,124(sp)
   213a8:	90bff40e 	bge	r18,r2,2137c <__alt_data_end+0xfffe137c>
   213ac:	d9801e04 	addi	r6,sp,120
   213b0:	b80b883a 	mov	r5,r23
   213b4:	9809883a 	mov	r4,r19
   213b8:	002810c0 	call	2810c <__sprint_r>
   213bc:	103e5f1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   213c0:	843ffc04 	addi	r16,r16,-16
   213c4:	d8c02017 	ldw	r3,128(sp)
   213c8:	d8801f17 	ldw	r2,124(sp)
   213cc:	da000404 	addi	r8,sp,16
   213d0:	8c3fed16 	blt	r17,r16,21388 <__alt_data_end+0xfffe1388>
   213d4:	d9403517 	ldw	r5,212(sp)
   213d8:	1c07883a 	add	r3,r3,r16
   213dc:	10800044 	addi	r2,r2,1
   213e0:	41400015 	stw	r5,0(r8)
   213e4:	44000115 	stw	r16,4(r8)
   213e8:	d8c02015 	stw	r3,128(sp)
   213ec:	d8801f15 	stw	r2,124(sp)
   213f0:	010001c4 	movi	r4,7
   213f4:	2080060e 	bge	r4,r2,21410 <___vfprintf_internal_r+0xae4>
   213f8:	d9002d17 	ldw	r4,180(sp)
   213fc:	d9801e04 	addi	r6,sp,120
   21400:	b80b883a 	mov	r5,r23
   21404:	002810c0 	call	2810c <__sprint_r>
   21408:	103e4c1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   2140c:	d8c02017 	ldw	r3,128(sp)
   21410:	d8803117 	ldw	r2,196(sp)
   21414:	d9002917 	ldw	r4,164(sp)
   21418:	1100010e 	bge	r2,r4,21420 <___vfprintf_internal_r+0xaf4>
   2141c:	2005883a 	mov	r2,r4
   21420:	d9402f17 	ldw	r5,188(sp)
   21424:	288b883a 	add	r5,r5,r2
   21428:	d9402f15 	stw	r5,188(sp)
   2142c:	1801c01e 	bne	r3,zero,21b30 <___vfprintf_internal_r+0x1204>
   21430:	a8800007 	ldb	r2,0(r21)
   21434:	d8001f15 	stw	zero,124(sp)
   21438:	da000404 	addi	r8,sp,16
   2143c:	103d751e 	bne	r2,zero,20a14 <__alt_data_end+0xfffe0a14>
   21440:	a823883a 	mov	r17,r21
   21444:	003d8b06 	br	20a74 <__alt_data_end+0xfffe0a74>
   21448:	8025883a 	mov	r18,r16
   2144c:	dc002903 	ldbu	r16,164(sp)
   21450:	e011883a 	mov	r8,fp
   21454:	84003fcc 	andi	r16,r16,255
   21458:	8005e51e 	bne	r16,zero,22bf0 <___vfprintf_internal_r+0x22c4>
   2145c:	94800414 	ori	r18,r18,16
   21460:	9080080c 	andi	r2,r18,32
   21464:	10022b26 	beq	r2,zero,21d14 <___vfprintf_internal_r+0x13e8>
   21468:	d9002e17 	ldw	r4,184(sp)
   2146c:	d9402a17 	ldw	r5,168(sp)
   21470:	d8002785 	stb	zero,158(sp)
   21474:	20c00204 	addi	r3,r4,8
   21478:	24c00017 	ldw	r19,0(r4)
   2147c:	25800117 	ldw	r22,4(r4)
   21480:	28042e16 	blt	r5,zero,2253c <___vfprintf_internal_r+0x1c10>
   21484:	013fdfc4 	movi	r4,-129
   21488:	9d84b03a 	or	r2,r19,r22
   2148c:	d8c02e15 	stw	r3,184(sp)
   21490:	9124703a 	and	r18,r18,r4
   21494:	0039883a 	mov	fp,zero
   21498:	103e801e 	bne	r2,zero,20e9c <__alt_data_end+0xfffe0e9c>
   2149c:	d9002a17 	ldw	r4,168(sp)
   214a0:	2002e01e 	bne	r4,zero,22024 <___vfprintf_internal_r+0x16f8>
   214a4:	d8002a15 	stw	zero,168(sp)
   214a8:	d8002b15 	stw	zero,172(sp)
   214ac:	dc001e04 	addi	r16,sp,120
   214b0:	003ef506 	br	21088 <__alt_data_end+0xfffe1088>
   214b4:	8025883a 	mov	r18,r16
   214b8:	dc002903 	ldbu	r16,164(sp)
   214bc:	e011883a 	mov	r8,fp
   214c0:	84003fcc 	andi	r16,r16,255
   214c4:	8005ba1e 	bne	r16,zero,22bb0 <___vfprintf_internal_r+0x2284>
   214c8:	010000f4 	movhi	r4,3
   214cc:	210a0f04 	addi	r4,r4,10300
   214d0:	d9003915 	stw	r4,228(sp)
   214d4:	9080080c 	andi	r2,r18,32
   214d8:	10006126 	beq	r2,zero,21660 <___vfprintf_internal_r+0xd34>
   214dc:	d9402e17 	ldw	r5,184(sp)
   214e0:	2cc00017 	ldw	r19,0(r5)
   214e4:	2d800117 	ldw	r22,4(r5)
   214e8:	29400204 	addi	r5,r5,8
   214ec:	d9402e15 	stw	r5,184(sp)
   214f0:	9080004c 	andi	r2,r18,1
   214f4:	1001ac26 	beq	r2,zero,21ba8 <___vfprintf_internal_r+0x127c>
   214f8:	9d84b03a 	or	r2,r19,r22
   214fc:	10038526 	beq	r2,zero,22314 <___vfprintf_internal_r+0x19e8>
   21500:	d8c02a17 	ldw	r3,168(sp)
   21504:	00800c04 	movi	r2,48
   21508:	d8802705 	stb	r2,156(sp)
   2150c:	dc402745 	stb	r17,157(sp)
   21510:	d8002785 	stb	zero,158(sp)
   21514:	90800094 	ori	r2,r18,2
   21518:	18047916 	blt	r3,zero,22700 <___vfprintf_internal_r+0x1dd4>
   2151c:	00bfdfc4 	movi	r2,-129
   21520:	90a4703a 	and	r18,r18,r2
   21524:	94800094 	ori	r18,r18,2
   21528:	0039883a 	mov	fp,zero
   2152c:	d9003917 	ldw	r4,228(sp)
   21530:	dc001e04 	addi	r16,sp,120
   21534:	988003cc 	andi	r2,r19,15
   21538:	b006973a 	slli	r3,r22,28
   2153c:	2085883a 	add	r2,r4,r2
   21540:	9826d13a 	srli	r19,r19,4
   21544:	10800003 	ldbu	r2,0(r2)
   21548:	b02cd13a 	srli	r22,r22,4
   2154c:	843fffc4 	addi	r16,r16,-1
   21550:	1ce6b03a 	or	r19,r3,r19
   21554:	80800005 	stb	r2,0(r16)
   21558:	9d84b03a 	or	r2,r19,r22
   2155c:	103ff51e 	bne	r2,zero,21534 <__alt_data_end+0xfffe1534>
   21560:	d8c02817 	ldw	r3,160(sp)
   21564:	1c07c83a 	sub	r3,r3,r16
   21568:	d8c02b15 	stw	r3,172(sp)
   2156c:	003ec606 	br	21088 <__alt_data_end+0xfffe1088>
   21570:	8025883a 	mov	r18,r16
   21574:	dc002903 	ldbu	r16,164(sp)
   21578:	e011883a 	mov	r8,fp
   2157c:	84003fcc 	andi	r16,r16,255
   21580:	803e9626 	beq	r16,zero,20fdc <__alt_data_end+0xfffe0fdc>
   21584:	d8c02b03 	ldbu	r3,172(sp)
   21588:	d8c02785 	stb	r3,158(sp)
   2158c:	003e9306 	br	20fdc <__alt_data_end+0xfffe0fdc>
   21590:	00c00044 	movi	r3,1
   21594:	d8c02905 	stb	r3,164(sp)
   21598:	00c00ac4 	movi	r3,43
   2159c:	d8c02b05 	stb	r3,172(sp)
   215a0:	ac400007 	ldb	r17,0(r21)
   215a4:	003d4306 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   215a8:	84000814 	ori	r16,r16,32
   215ac:	ac400007 	ldb	r17,0(r21)
   215b0:	003d4006 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   215b4:	d8802e17 	ldw	r2,184(sp)
   215b8:	8025883a 	mov	r18,r16
   215bc:	d8002785 	stb	zero,158(sp)
   215c0:	14000017 	ldw	r16,0(r2)
   215c4:	e011883a 	mov	r8,fp
   215c8:	14c00104 	addi	r19,r2,4
   215cc:	80042d26 	beq	r16,zero,22684 <___vfprintf_internal_r+0x1d58>
   215d0:	d8c02a17 	ldw	r3,168(sp)
   215d4:	1803e416 	blt	r3,zero,22568 <___vfprintf_internal_r+0x1c3c>
   215d8:	180d883a 	mov	r6,r3
   215dc:	000b883a 	mov	r5,zero
   215e0:	8009883a 	mov	r4,r16
   215e4:	df003d15 	stw	fp,244(sp)
   215e8:	00262640 	call	26264 <memchr>
   215ec:	da003d17 	ldw	r8,244(sp)
   215f0:	10046826 	beq	r2,zero,22794 <___vfprintf_internal_r+0x1e68>
   215f4:	1405c83a 	sub	r2,r2,r16
   215f8:	d8802b15 	stw	r2,172(sp)
   215fc:	1003e016 	blt	r2,zero,22580 <___vfprintf_internal_r+0x1c54>
   21600:	df002783 	ldbu	fp,158(sp)
   21604:	d8802915 	stw	r2,164(sp)
   21608:	dcc02e15 	stw	r19,184(sp)
   2160c:	d8002a15 	stw	zero,168(sp)
   21610:	d8003215 	stw	zero,200(sp)
   21614:	003ea206 	br	210a0 <__alt_data_end+0xfffe10a0>
   21618:	8025883a 	mov	r18,r16
   2161c:	dc002903 	ldbu	r16,164(sp)
   21620:	e011883a 	mov	r8,fp
   21624:	84003fcc 	andi	r16,r16,255
   21628:	803f8d26 	beq	r16,zero,21460 <__alt_data_end+0xfffe1460>
   2162c:	d8c02b03 	ldbu	r3,172(sp)
   21630:	d8c02785 	stb	r3,158(sp)
   21634:	003f8a06 	br	21460 <__alt_data_end+0xfffe1460>
   21638:	8025883a 	mov	r18,r16
   2163c:	dc002903 	ldbu	r16,164(sp)
   21640:	e011883a 	mov	r8,fp
   21644:	84003fcc 	andi	r16,r16,255
   21648:	8005661e 	bne	r16,zero,22be4 <___vfprintf_internal_r+0x22b8>
   2164c:	010000f4 	movhi	r4,3
   21650:	210a1404 	addi	r4,r4,10320
   21654:	d9003915 	stw	r4,228(sp)
   21658:	9080080c 	andi	r2,r18,32
   2165c:	103f9f1e 	bne	r2,zero,214dc <__alt_data_end+0xfffe14dc>
   21660:	9080040c 	andi	r2,r18,16
   21664:	1002eb26 	beq	r2,zero,22214 <___vfprintf_internal_r+0x18e8>
   21668:	d8802e17 	ldw	r2,184(sp)
   2166c:	002d883a 	mov	r22,zero
   21670:	14c00017 	ldw	r19,0(r2)
   21674:	10800104 	addi	r2,r2,4
   21678:	d8802e15 	stw	r2,184(sp)
   2167c:	003f9c06 	br	214f0 <__alt_data_end+0xfffe14f0>
   21680:	d8802b07 	ldb	r2,172(sp)
   21684:	1002e11e 	bne	r2,zero,2220c <___vfprintf_internal_r+0x18e0>
   21688:	00c00044 	movi	r3,1
   2168c:	d8c02905 	stb	r3,164(sp)
   21690:	00c00804 	movi	r3,32
   21694:	d8c02b05 	stb	r3,172(sp)
   21698:	ac400007 	ldb	r17,0(r21)
   2169c:	003d0506 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   216a0:	84000054 	ori	r16,r16,1
   216a4:	ac400007 	ldb	r17,0(r21)
   216a8:	003d0206 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   216ac:	8025883a 	mov	r18,r16
   216b0:	dc002903 	ldbu	r16,164(sp)
   216b4:	e011883a 	mov	r8,fp
   216b8:	84003fcc 	andi	r16,r16,255
   216bc:	803de726 	beq	r16,zero,20e5c <__alt_data_end+0xfffe0e5c>
   216c0:	d8c02b03 	ldbu	r3,172(sp)
   216c4:	d8c02785 	stb	r3,158(sp)
   216c8:	003de406 	br	20e5c <__alt_data_end+0xfffe0e5c>
   216cc:	84001014 	ori	r16,r16,64
   216d0:	ac400007 	ldb	r17,0(r21)
   216d4:	003cf706 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   216d8:	ac400007 	ldb	r17,0(r21)
   216dc:	00801b04 	movi	r2,108
   216e0:	88838f26 	beq	r17,r2,22520 <___vfprintf_internal_r+0x1bf4>
   216e4:	84000414 	ori	r16,r16,16
   216e8:	003cf206 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   216ec:	8025883a 	mov	r18,r16
   216f0:	dc002903 	ldbu	r16,164(sp)
   216f4:	e011883a 	mov	r8,fp
   216f8:	84003fcc 	andi	r16,r16,255
   216fc:	80053f1e 	bne	r16,zero,22bfc <___vfprintf_internal_r+0x22d0>
   21700:	9080080c 	andi	r2,r18,32
   21704:	1002d226 	beq	r2,zero,22250 <___vfprintf_internal_r+0x1924>
   21708:	d9002e17 	ldw	r4,184(sp)
   2170c:	d9402f17 	ldw	r5,188(sp)
   21710:	20800017 	ldw	r2,0(r4)
   21714:	2807d7fa 	srai	r3,r5,31
   21718:	21000104 	addi	r4,r4,4
   2171c:	d9002e15 	stw	r4,184(sp)
   21720:	11400015 	stw	r5,0(r2)
   21724:	10c00115 	stw	r3,4(r2)
   21728:	003cb806 	br	20a0c <__alt_data_end+0xfffe0a0c>
   2172c:	d8c02e17 	ldw	r3,184(sp)
   21730:	d9002e17 	ldw	r4,184(sp)
   21734:	8025883a 	mov	r18,r16
   21738:	18800017 	ldw	r2,0(r3)
   2173c:	21000104 	addi	r4,r4,4
   21740:	00c00044 	movi	r3,1
   21744:	e011883a 	mov	r8,fp
   21748:	d8c02915 	stw	r3,164(sp)
   2174c:	d8002785 	stb	zero,158(sp)
   21750:	d8801405 	stb	r2,80(sp)
   21754:	d9002e15 	stw	r4,184(sp)
   21758:	d8c02b15 	stw	r3,172(sp)
   2175c:	d8002a15 	stw	zero,168(sp)
   21760:	d8003215 	stw	zero,200(sp)
   21764:	dc001404 	addi	r16,sp,80
   21768:	0039883a 	mov	fp,zero
   2176c:	003e5306 	br	210bc <__alt_data_end+0xfffe10bc>
   21770:	010000f4 	movhi	r4,3
   21774:	210a1404 	addi	r4,r4,10320
   21778:	0039883a 	mov	fp,zero
   2177c:	d9003915 	stw	r4,228(sp)
   21780:	04401e04 	movi	r17,120
   21784:	003f6906 	br	2152c <__alt_data_end+0xfffe152c>
   21788:	8025883a 	mov	r18,r16
   2178c:	dc002903 	ldbu	r16,164(sp)
   21790:	e011883a 	mov	r8,fp
   21794:	84003fcc 	andi	r16,r16,255
   21798:	8005081e 	bne	r16,zero,22bbc <___vfprintf_internal_r+0x2290>
   2179c:	883d6126 	beq	r17,zero,20d24 <__alt_data_end+0xfffe0d24>
   217a0:	00c00044 	movi	r3,1
   217a4:	d8c02915 	stw	r3,164(sp)
   217a8:	dc401405 	stb	r17,80(sp)
   217ac:	d8002785 	stb	zero,158(sp)
   217b0:	003fe906 	br	21758 <__alt_data_end+0xfffe1758>
   217b4:	014000f4 	movhi	r5,3
   217b8:	294a1404 	addi	r5,r5,10320
   217bc:	d9403915 	stw	r5,228(sp)
   217c0:	d8c02e15 	stw	r3,184(sp)
   217c4:	1025883a 	mov	r18,r2
   217c8:	04401e04 	movi	r17,120
   217cc:	9d84b03a 	or	r2,r19,r22
   217d0:	1000fc1e 	bne	r2,zero,21bc4 <___vfprintf_internal_r+0x1298>
   217d4:	0039883a 	mov	fp,zero
   217d8:	00800084 	movi	r2,2
   217dc:	10803fcc 	andi	r2,r2,255
   217e0:	00c00044 	movi	r3,1
   217e4:	10c20f26 	beq	r2,r3,22024 <___vfprintf_internal_r+0x16f8>
   217e8:	00c00084 	movi	r3,2
   217ec:	10fd3326 	beq	r2,r3,20cbc <__alt_data_end+0xfffe0cbc>
   217f0:	003e0b06 	br	21020 <__alt_data_end+0xfffe1020>
   217f4:	d8c02017 	ldw	r3,128(sp)
   217f8:	003e7106 	br	211c0 <__alt_data_end+0xfffe11c0>
   217fc:	00801944 	movi	r2,101
   21800:	14407e0e 	bge	r2,r17,219fc <___vfprintf_internal_r+0x10d0>
   21804:	d9003617 	ldw	r4,216(sp)
   21808:	d9403817 	ldw	r5,224(sp)
   2180c:	000d883a 	mov	r6,zero
   21810:	000f883a 	mov	r7,zero
   21814:	d8c03c15 	stw	r3,240(sp)
   21818:	da003d15 	stw	r8,244(sp)
   2181c:	002c06c0 	call	2c06c <__eqdf2>
   21820:	d8c03c17 	ldw	r3,240(sp)
   21824:	da003d17 	ldw	r8,244(sp)
   21828:	1000f71e 	bne	r2,zero,21c08 <___vfprintf_internal_r+0x12dc>
   2182c:	d8801f17 	ldw	r2,124(sp)
   21830:	010000f4 	movhi	r4,3
   21834:	210a1b04 	addi	r4,r4,10348
   21838:	18c00044 	addi	r3,r3,1
   2183c:	10800044 	addi	r2,r2,1
   21840:	41000015 	stw	r4,0(r8)
   21844:	01000044 	movi	r4,1
   21848:	41000115 	stw	r4,4(r8)
   2184c:	d8c02015 	stw	r3,128(sp)
   21850:	d8801f15 	stw	r2,124(sp)
   21854:	010001c4 	movi	r4,7
   21858:	2082b816 	blt	r4,r2,2233c <___vfprintf_internal_r+0x1a10>
   2185c:	42000204 	addi	r8,r8,8
   21860:	d8802617 	ldw	r2,152(sp)
   21864:	d9403317 	ldw	r5,204(sp)
   21868:	11400216 	blt	r2,r5,21874 <___vfprintf_internal_r+0xf48>
   2186c:	9080004c 	andi	r2,r18,1
   21870:	103eb326 	beq	r2,zero,21340 <__alt_data_end+0xfffe1340>
   21874:	d8803717 	ldw	r2,220(sp)
   21878:	d9003417 	ldw	r4,208(sp)
   2187c:	d9403717 	ldw	r5,220(sp)
   21880:	1887883a 	add	r3,r3,r2
   21884:	d8801f17 	ldw	r2,124(sp)
   21888:	41000015 	stw	r4,0(r8)
   2188c:	41400115 	stw	r5,4(r8)
   21890:	10800044 	addi	r2,r2,1
   21894:	d8c02015 	stw	r3,128(sp)
   21898:	d8801f15 	stw	r2,124(sp)
   2189c:	010001c4 	movi	r4,7
   218a0:	20832916 	blt	r4,r2,22548 <___vfprintf_internal_r+0x1c1c>
   218a4:	42000204 	addi	r8,r8,8
   218a8:	d8803317 	ldw	r2,204(sp)
   218ac:	143fffc4 	addi	r16,r2,-1
   218b0:	043ea30e 	bge	zero,r16,21340 <__alt_data_end+0xfffe1340>
   218b4:	04400404 	movi	r17,16
   218b8:	d8801f17 	ldw	r2,124(sp)
   218bc:	8c00880e 	bge	r17,r16,21ae0 <___vfprintf_internal_r+0x11b4>
   218c0:	014000f4 	movhi	r5,3
   218c4:	294a1b84 	addi	r5,r5,10350
   218c8:	d9402c15 	stw	r5,176(sp)
   218cc:	058001c4 	movi	r22,7
   218d0:	dcc02d17 	ldw	r19,180(sp)
   218d4:	00000306 	br	218e4 <___vfprintf_internal_r+0xfb8>
   218d8:	42000204 	addi	r8,r8,8
   218dc:	843ffc04 	addi	r16,r16,-16
   218e0:	8c00820e 	bge	r17,r16,21aec <___vfprintf_internal_r+0x11c0>
   218e4:	18c00404 	addi	r3,r3,16
   218e8:	10800044 	addi	r2,r2,1
   218ec:	45000015 	stw	r20,0(r8)
   218f0:	44400115 	stw	r17,4(r8)
   218f4:	d8c02015 	stw	r3,128(sp)
   218f8:	d8801f15 	stw	r2,124(sp)
   218fc:	b0bff60e 	bge	r22,r2,218d8 <__alt_data_end+0xfffe18d8>
   21900:	d9801e04 	addi	r6,sp,120
   21904:	b80b883a 	mov	r5,r23
   21908:	9809883a 	mov	r4,r19
   2190c:	002810c0 	call	2810c <__sprint_r>
   21910:	103d0a1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21914:	d8c02017 	ldw	r3,128(sp)
   21918:	d8801f17 	ldw	r2,124(sp)
   2191c:	da000404 	addi	r8,sp,16
   21920:	003fee06 	br	218dc <__alt_data_end+0xfffe18dc>
   21924:	d9403117 	ldw	r5,196(sp)
   21928:	d8802917 	ldw	r2,164(sp)
   2192c:	28adc83a 	sub	r22,r5,r2
   21930:	05be410e 	bge	zero,r22,21238 <__alt_data_end+0xfffe1238>
   21934:	07000404 	movi	fp,16
   21938:	d8801f17 	ldw	r2,124(sp)
   2193c:	e5838f0e 	bge	fp,r22,2277c <___vfprintf_internal_r+0x1e50>
   21940:	014000f4 	movhi	r5,3
   21944:	294a1b84 	addi	r5,r5,10350
   21948:	dc403015 	stw	r17,192(sp)
   2194c:	d9402c15 	stw	r5,176(sp)
   21950:	b023883a 	mov	r17,r22
   21954:	04c001c4 	movi	r19,7
   21958:	a82d883a 	mov	r22,r21
   2195c:	902b883a 	mov	r21,r18
   21960:	8025883a 	mov	r18,r16
   21964:	dc002d17 	ldw	r16,180(sp)
   21968:	00000306 	br	21978 <___vfprintf_internal_r+0x104c>
   2196c:	8c7ffc04 	addi	r17,r17,-16
   21970:	42000204 	addi	r8,r8,8
   21974:	e440110e 	bge	fp,r17,219bc <___vfprintf_internal_r+0x1090>
   21978:	18c00404 	addi	r3,r3,16
   2197c:	10800044 	addi	r2,r2,1
   21980:	45000015 	stw	r20,0(r8)
   21984:	47000115 	stw	fp,4(r8)
   21988:	d8c02015 	stw	r3,128(sp)
   2198c:	d8801f15 	stw	r2,124(sp)
   21990:	98bff60e 	bge	r19,r2,2196c <__alt_data_end+0xfffe196c>
   21994:	d9801e04 	addi	r6,sp,120
   21998:	b80b883a 	mov	r5,r23
   2199c:	8009883a 	mov	r4,r16
   219a0:	002810c0 	call	2810c <__sprint_r>
   219a4:	103ce51e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   219a8:	8c7ffc04 	addi	r17,r17,-16
   219ac:	d8c02017 	ldw	r3,128(sp)
   219b0:	d8801f17 	ldw	r2,124(sp)
   219b4:	da000404 	addi	r8,sp,16
   219b8:	e47fef16 	blt	fp,r17,21978 <__alt_data_end+0xfffe1978>
   219bc:	9021883a 	mov	r16,r18
   219c0:	a825883a 	mov	r18,r21
   219c4:	b02b883a 	mov	r21,r22
   219c8:	882d883a 	mov	r22,r17
   219cc:	dc403017 	ldw	r17,192(sp)
   219d0:	d9002c17 	ldw	r4,176(sp)
   219d4:	1d87883a 	add	r3,r3,r22
   219d8:	10800044 	addi	r2,r2,1
   219dc:	41000015 	stw	r4,0(r8)
   219e0:	45800115 	stw	r22,4(r8)
   219e4:	d8c02015 	stw	r3,128(sp)
   219e8:	d8801f15 	stw	r2,124(sp)
   219ec:	010001c4 	movi	r4,7
   219f0:	20818e16 	blt	r4,r2,2202c <___vfprintf_internal_r+0x1700>
   219f4:	42000204 	addi	r8,r8,8
   219f8:	003e0f06 	br	21238 <__alt_data_end+0xfffe1238>
   219fc:	d9403317 	ldw	r5,204(sp)
   21a00:	00800044 	movi	r2,1
   21a04:	18c00044 	addi	r3,r3,1
   21a08:	1141530e 	bge	r2,r5,21f58 <___vfprintf_internal_r+0x162c>
   21a0c:	dc401f17 	ldw	r17,124(sp)
   21a10:	00800044 	movi	r2,1
   21a14:	40800115 	stw	r2,4(r8)
   21a18:	8c400044 	addi	r17,r17,1
   21a1c:	44000015 	stw	r16,0(r8)
   21a20:	d8c02015 	stw	r3,128(sp)
   21a24:	dc401f15 	stw	r17,124(sp)
   21a28:	008001c4 	movi	r2,7
   21a2c:	14416b16 	blt	r2,r17,21fdc <___vfprintf_internal_r+0x16b0>
   21a30:	42000204 	addi	r8,r8,8
   21a34:	d8803717 	ldw	r2,220(sp)
   21a38:	d9003417 	ldw	r4,208(sp)
   21a3c:	8c400044 	addi	r17,r17,1
   21a40:	10c7883a 	add	r3,r2,r3
   21a44:	40800115 	stw	r2,4(r8)
   21a48:	41000015 	stw	r4,0(r8)
   21a4c:	d8c02015 	stw	r3,128(sp)
   21a50:	dc401f15 	stw	r17,124(sp)
   21a54:	008001c4 	movi	r2,7
   21a58:	14416916 	blt	r2,r17,22000 <___vfprintf_internal_r+0x16d4>
   21a5c:	45800204 	addi	r22,r8,8
   21a60:	d9003617 	ldw	r4,216(sp)
   21a64:	d9403817 	ldw	r5,224(sp)
   21a68:	000d883a 	mov	r6,zero
   21a6c:	000f883a 	mov	r7,zero
   21a70:	d8c03c15 	stw	r3,240(sp)
   21a74:	002c06c0 	call	2c06c <__eqdf2>
   21a78:	d8c03c17 	ldw	r3,240(sp)
   21a7c:	1000bc26 	beq	r2,zero,21d70 <___vfprintf_internal_r+0x1444>
   21a80:	d9403317 	ldw	r5,204(sp)
   21a84:	84000044 	addi	r16,r16,1
   21a88:	8c400044 	addi	r17,r17,1
   21a8c:	28bfffc4 	addi	r2,r5,-1
   21a90:	1887883a 	add	r3,r3,r2
   21a94:	b0800115 	stw	r2,4(r22)
   21a98:	b4000015 	stw	r16,0(r22)
   21a9c:	d8c02015 	stw	r3,128(sp)
   21aa0:	dc401f15 	stw	r17,124(sp)
   21aa4:	008001c4 	movi	r2,7
   21aa8:	14414316 	blt	r2,r17,21fb8 <___vfprintf_internal_r+0x168c>
   21aac:	b5800204 	addi	r22,r22,8
   21ab0:	d9003a17 	ldw	r4,232(sp)
   21ab4:	df0022c4 	addi	fp,sp,139
   21ab8:	8c400044 	addi	r17,r17,1
   21abc:	20c7883a 	add	r3,r4,r3
   21ac0:	b7000015 	stw	fp,0(r22)
   21ac4:	b1000115 	stw	r4,4(r22)
   21ac8:	d8c02015 	stw	r3,128(sp)
   21acc:	dc401f15 	stw	r17,124(sp)
   21ad0:	008001c4 	movi	r2,7
   21ad4:	14400e16 	blt	r2,r17,21b10 <___vfprintf_internal_r+0x11e4>
   21ad8:	b2000204 	addi	r8,r22,8
   21adc:	003e1806 	br	21340 <__alt_data_end+0xfffe1340>
   21ae0:	010000f4 	movhi	r4,3
   21ae4:	210a1b84 	addi	r4,r4,10350
   21ae8:	d9002c15 	stw	r4,176(sp)
   21aec:	d9002c17 	ldw	r4,176(sp)
   21af0:	1c07883a 	add	r3,r3,r16
   21af4:	44000115 	stw	r16,4(r8)
   21af8:	41000015 	stw	r4,0(r8)
   21afc:	10800044 	addi	r2,r2,1
   21b00:	d8c02015 	stw	r3,128(sp)
   21b04:	d8801f15 	stw	r2,124(sp)
   21b08:	010001c4 	movi	r4,7
   21b0c:	20be0b0e 	bge	r4,r2,2133c <__alt_data_end+0xfffe133c>
   21b10:	d9002d17 	ldw	r4,180(sp)
   21b14:	d9801e04 	addi	r6,sp,120
   21b18:	b80b883a 	mov	r5,r23
   21b1c:	002810c0 	call	2810c <__sprint_r>
   21b20:	103c861e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21b24:	d8c02017 	ldw	r3,128(sp)
   21b28:	da000404 	addi	r8,sp,16
   21b2c:	003e0406 	br	21340 <__alt_data_end+0xfffe1340>
   21b30:	d9002d17 	ldw	r4,180(sp)
   21b34:	d9801e04 	addi	r6,sp,120
   21b38:	b80b883a 	mov	r5,r23
   21b3c:	002810c0 	call	2810c <__sprint_r>
   21b40:	103e3b26 	beq	r2,zero,21430 <__alt_data_end+0xfffe1430>
   21b44:	003c7d06 	br	20d3c <__alt_data_end+0xfffe0d3c>
   21b48:	d9002d17 	ldw	r4,180(sp)
   21b4c:	d9801e04 	addi	r6,sp,120
   21b50:	b80b883a 	mov	r5,r23
   21b54:	002810c0 	call	2810c <__sprint_r>
   21b58:	103c781e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21b5c:	d8c02017 	ldw	r3,128(sp)
   21b60:	da000404 	addi	r8,sp,16
   21b64:	003de906 	br	2130c <__alt_data_end+0xfffe130c>
   21b68:	d9002d17 	ldw	r4,180(sp)
   21b6c:	d9801e04 	addi	r6,sp,120
   21b70:	b80b883a 	mov	r5,r23
   21b74:	002810c0 	call	2810c <__sprint_r>
   21b78:	103c701e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21b7c:	d8c02017 	ldw	r3,128(sp)
   21b80:	da000404 	addi	r8,sp,16
   21b84:	003d9b06 	br	211f4 <__alt_data_end+0xfffe11f4>
   21b88:	d9002d17 	ldw	r4,180(sp)
   21b8c:	d9801e04 	addi	r6,sp,120
   21b90:	b80b883a 	mov	r5,r23
   21b94:	002810c0 	call	2810c <__sprint_r>
   21b98:	103c681e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21b9c:	d8c02017 	ldw	r3,128(sp)
   21ba0:	da000404 	addi	r8,sp,16
   21ba4:	003da106 	br	2122c <__alt_data_end+0xfffe122c>
   21ba8:	d9402a17 	ldw	r5,168(sp)
   21bac:	d8002785 	stb	zero,158(sp)
   21bb0:	283f0616 	blt	r5,zero,217cc <__alt_data_end+0xfffe17cc>
   21bb4:	00ffdfc4 	movi	r3,-129
   21bb8:	9d84b03a 	or	r2,r19,r22
   21bbc:	90e4703a 	and	r18,r18,r3
   21bc0:	103c3b26 	beq	r2,zero,20cb0 <__alt_data_end+0xfffe0cb0>
   21bc4:	0039883a 	mov	fp,zero
   21bc8:	003e5806 	br	2152c <__alt_data_end+0xfffe152c>
   21bcc:	9080040c 	andi	r2,r18,16
   21bd0:	1001b326 	beq	r2,zero,222a0 <___vfprintf_internal_r+0x1974>
   21bd4:	d8c02e17 	ldw	r3,184(sp)
   21bd8:	d9002a17 	ldw	r4,168(sp)
   21bdc:	d8002785 	stb	zero,158(sp)
   21be0:	18800104 	addi	r2,r3,4
   21be4:	1cc00017 	ldw	r19,0(r3)
   21be8:	002d883a 	mov	r22,zero
   21bec:	2001b516 	blt	r4,zero,222c4 <___vfprintf_internal_r+0x1998>
   21bf0:	00ffdfc4 	movi	r3,-129
   21bf4:	d8802e15 	stw	r2,184(sp)
   21bf8:	90e4703a 	and	r18,r18,r3
   21bfc:	983d0526 	beq	r19,zero,21014 <__alt_data_end+0xfffe1014>
   21c00:	0039883a 	mov	fp,zero
   21c04:	003d0806 	br	21028 <__alt_data_end+0xfffe1028>
   21c08:	dc402617 	ldw	r17,152(sp)
   21c0c:	0441d30e 	bge	zero,r17,2235c <___vfprintf_internal_r+0x1a30>
   21c10:	dc403217 	ldw	r17,200(sp)
   21c14:	d8803317 	ldw	r2,204(sp)
   21c18:	1440010e 	bge	r2,r17,21c20 <___vfprintf_internal_r+0x12f4>
   21c1c:	1023883a 	mov	r17,r2
   21c20:	04400a0e 	bge	zero,r17,21c4c <___vfprintf_internal_r+0x1320>
   21c24:	d8801f17 	ldw	r2,124(sp)
   21c28:	1c47883a 	add	r3,r3,r17
   21c2c:	44000015 	stw	r16,0(r8)
   21c30:	10800044 	addi	r2,r2,1
   21c34:	44400115 	stw	r17,4(r8)
   21c38:	d8c02015 	stw	r3,128(sp)
   21c3c:	d8801f15 	stw	r2,124(sp)
   21c40:	010001c4 	movi	r4,7
   21c44:	20826516 	blt	r4,r2,225dc <___vfprintf_internal_r+0x1cb0>
   21c48:	42000204 	addi	r8,r8,8
   21c4c:	88026116 	blt	r17,zero,225d4 <___vfprintf_internal_r+0x1ca8>
   21c50:	d9003217 	ldw	r4,200(sp)
   21c54:	2463c83a 	sub	r17,r4,r17
   21c58:	04407b0e 	bge	zero,r17,21e48 <___vfprintf_internal_r+0x151c>
   21c5c:	05800404 	movi	r22,16
   21c60:	d8801f17 	ldw	r2,124(sp)
   21c64:	b4419d0e 	bge	r22,r17,222dc <___vfprintf_internal_r+0x19b0>
   21c68:	010000f4 	movhi	r4,3
   21c6c:	210a1b84 	addi	r4,r4,10350
   21c70:	d9002c15 	stw	r4,176(sp)
   21c74:	070001c4 	movi	fp,7
   21c78:	dcc02d17 	ldw	r19,180(sp)
   21c7c:	00000306 	br	21c8c <___vfprintf_internal_r+0x1360>
   21c80:	42000204 	addi	r8,r8,8
   21c84:	8c7ffc04 	addi	r17,r17,-16
   21c88:	b441970e 	bge	r22,r17,222e8 <___vfprintf_internal_r+0x19bc>
   21c8c:	18c00404 	addi	r3,r3,16
   21c90:	10800044 	addi	r2,r2,1
   21c94:	45000015 	stw	r20,0(r8)
   21c98:	45800115 	stw	r22,4(r8)
   21c9c:	d8c02015 	stw	r3,128(sp)
   21ca0:	d8801f15 	stw	r2,124(sp)
   21ca4:	e0bff60e 	bge	fp,r2,21c80 <__alt_data_end+0xfffe1c80>
   21ca8:	d9801e04 	addi	r6,sp,120
   21cac:	b80b883a 	mov	r5,r23
   21cb0:	9809883a 	mov	r4,r19
   21cb4:	002810c0 	call	2810c <__sprint_r>
   21cb8:	103c201e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21cbc:	d8c02017 	ldw	r3,128(sp)
   21cc0:	d8801f17 	ldw	r2,124(sp)
   21cc4:	da000404 	addi	r8,sp,16
   21cc8:	003fee06 	br	21c84 <__alt_data_end+0xfffe1c84>
   21ccc:	d9002d17 	ldw	r4,180(sp)
   21cd0:	d9801e04 	addi	r6,sp,120
   21cd4:	b80b883a 	mov	r5,r23
   21cd8:	002810c0 	call	2810c <__sprint_r>
   21cdc:	103c171e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21ce0:	d8c02017 	ldw	r3,128(sp)
   21ce4:	df002787 	ldb	fp,158(sp)
   21ce8:	da000404 	addi	r8,sp,16
   21cec:	003d3406 	br	211c0 <__alt_data_end+0xfffe11c0>
   21cf0:	9080040c 	andi	r2,r18,16
   21cf4:	10016126 	beq	r2,zero,2227c <___vfprintf_internal_r+0x1950>
   21cf8:	d9402e17 	ldw	r5,184(sp)
   21cfc:	2cc00017 	ldw	r19,0(r5)
   21d00:	29400104 	addi	r5,r5,4
   21d04:	d9402e15 	stw	r5,184(sp)
   21d08:	982dd7fa 	srai	r22,r19,31
   21d0c:	b005883a 	mov	r2,r22
   21d10:	003c5a06 	br	20e7c <__alt_data_end+0xfffe0e7c>
   21d14:	9080040c 	andi	r2,r18,16
   21d18:	10003526 	beq	r2,zero,21df0 <___vfprintf_internal_r+0x14c4>
   21d1c:	d8c02e17 	ldw	r3,184(sp)
   21d20:	d9002a17 	ldw	r4,168(sp)
   21d24:	d8002785 	stb	zero,158(sp)
   21d28:	18800104 	addi	r2,r3,4
   21d2c:	1cc00017 	ldw	r19,0(r3)
   21d30:	002d883a 	mov	r22,zero
   21d34:	20003716 	blt	r4,zero,21e14 <___vfprintf_internal_r+0x14e8>
   21d38:	00ffdfc4 	movi	r3,-129
   21d3c:	d8802e15 	stw	r2,184(sp)
   21d40:	90e4703a 	and	r18,r18,r3
   21d44:	0039883a 	mov	fp,zero
   21d48:	983dd426 	beq	r19,zero,2149c <__alt_data_end+0xfffe149c>
   21d4c:	00800244 	movi	r2,9
   21d50:	14fc5336 	bltu	r2,r19,20ea0 <__alt_data_end+0xfffe0ea0>
   21d54:	d8c02817 	ldw	r3,160(sp)
   21d58:	dc001dc4 	addi	r16,sp,119
   21d5c:	9cc00c04 	addi	r19,r19,48
   21d60:	1c07c83a 	sub	r3,r3,r16
   21d64:	dcc01dc5 	stb	r19,119(sp)
   21d68:	d8c02b15 	stw	r3,172(sp)
   21d6c:	003cc606 	br	21088 <__alt_data_end+0xfffe1088>
   21d70:	d8803317 	ldw	r2,204(sp)
   21d74:	143fffc4 	addi	r16,r2,-1
   21d78:	043f4d0e 	bge	zero,r16,21ab0 <__alt_data_end+0xfffe1ab0>
   21d7c:	07000404 	movi	fp,16
   21d80:	e400810e 	bge	fp,r16,21f88 <___vfprintf_internal_r+0x165c>
   21d84:	014000f4 	movhi	r5,3
   21d88:	294a1b84 	addi	r5,r5,10350
   21d8c:	d9402c15 	stw	r5,176(sp)
   21d90:	01c001c4 	movi	r7,7
   21d94:	dcc02d17 	ldw	r19,180(sp)
   21d98:	00000306 	br	21da8 <___vfprintf_internal_r+0x147c>
   21d9c:	b5800204 	addi	r22,r22,8
   21da0:	843ffc04 	addi	r16,r16,-16
   21da4:	e4007b0e 	bge	fp,r16,21f94 <___vfprintf_internal_r+0x1668>
   21da8:	18c00404 	addi	r3,r3,16
   21dac:	8c400044 	addi	r17,r17,1
   21db0:	b5000015 	stw	r20,0(r22)
   21db4:	b7000115 	stw	fp,4(r22)
   21db8:	d8c02015 	stw	r3,128(sp)
   21dbc:	dc401f15 	stw	r17,124(sp)
   21dc0:	3c7ff60e 	bge	r7,r17,21d9c <__alt_data_end+0xfffe1d9c>
   21dc4:	d9801e04 	addi	r6,sp,120
   21dc8:	b80b883a 	mov	r5,r23
   21dcc:	9809883a 	mov	r4,r19
   21dd0:	d9c03c15 	stw	r7,240(sp)
   21dd4:	002810c0 	call	2810c <__sprint_r>
   21dd8:	d9c03c17 	ldw	r7,240(sp)
   21ddc:	103bd71e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21de0:	d8c02017 	ldw	r3,128(sp)
   21de4:	dc401f17 	ldw	r17,124(sp)
   21de8:	dd800404 	addi	r22,sp,16
   21dec:	003fec06 	br	21da0 <__alt_data_end+0xfffe1da0>
   21df0:	9080100c 	andi	r2,r18,64
   21df4:	d8002785 	stb	zero,158(sp)
   21df8:	10010e26 	beq	r2,zero,22234 <___vfprintf_internal_r+0x1908>
   21dfc:	d9402e17 	ldw	r5,184(sp)
   21e00:	d8c02a17 	ldw	r3,168(sp)
   21e04:	002d883a 	mov	r22,zero
   21e08:	28800104 	addi	r2,r5,4
   21e0c:	2cc0000b 	ldhu	r19,0(r5)
   21e10:	183fc90e 	bge	r3,zero,21d38 <__alt_data_end+0xfffe1d38>
   21e14:	d8802e15 	stw	r2,184(sp)
   21e18:	0039883a 	mov	fp,zero
   21e1c:	9d84b03a 	or	r2,r19,r22
   21e20:	103c1e1e 	bne	r2,zero,20e9c <__alt_data_end+0xfffe0e9c>
   21e24:	00800044 	movi	r2,1
   21e28:	003e6c06 	br	217dc <__alt_data_end+0xfffe17dc>
   21e2c:	d9002d17 	ldw	r4,180(sp)
   21e30:	d9801e04 	addi	r6,sp,120
   21e34:	b80b883a 	mov	r5,r23
   21e38:	002810c0 	call	2810c <__sprint_r>
   21e3c:	103bbf1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21e40:	d8c02017 	ldw	r3,128(sp)
   21e44:	da000404 	addi	r8,sp,16
   21e48:	d9003217 	ldw	r4,200(sp)
   21e4c:	d8802617 	ldw	r2,152(sp)
   21e50:	d9403317 	ldw	r5,204(sp)
   21e54:	8123883a 	add	r17,r16,r4
   21e58:	11400216 	blt	r2,r5,21e64 <___vfprintf_internal_r+0x1538>
   21e5c:	9100004c 	andi	r4,r18,1
   21e60:	20000d26 	beq	r4,zero,21e98 <___vfprintf_internal_r+0x156c>
   21e64:	d9003717 	ldw	r4,220(sp)
   21e68:	d9403417 	ldw	r5,208(sp)
   21e6c:	1907883a 	add	r3,r3,r4
   21e70:	d9001f17 	ldw	r4,124(sp)
   21e74:	41400015 	stw	r5,0(r8)
   21e78:	d9403717 	ldw	r5,220(sp)
   21e7c:	21000044 	addi	r4,r4,1
   21e80:	d8c02015 	stw	r3,128(sp)
   21e84:	41400115 	stw	r5,4(r8)
   21e88:	d9001f15 	stw	r4,124(sp)
   21e8c:	014001c4 	movi	r5,7
   21e90:	2901e816 	blt	r5,r4,22634 <___vfprintf_internal_r+0x1d08>
   21e94:	42000204 	addi	r8,r8,8
   21e98:	d9003317 	ldw	r4,204(sp)
   21e9c:	8121883a 	add	r16,r16,r4
   21ea0:	2085c83a 	sub	r2,r4,r2
   21ea4:	8461c83a 	sub	r16,r16,r17
   21ea8:	1400010e 	bge	r2,r16,21eb0 <___vfprintf_internal_r+0x1584>
   21eac:	1021883a 	mov	r16,r2
   21eb0:	04000a0e 	bge	zero,r16,21edc <___vfprintf_internal_r+0x15b0>
   21eb4:	d9001f17 	ldw	r4,124(sp)
   21eb8:	1c07883a 	add	r3,r3,r16
   21ebc:	44400015 	stw	r17,0(r8)
   21ec0:	21000044 	addi	r4,r4,1
   21ec4:	44000115 	stw	r16,4(r8)
   21ec8:	d8c02015 	stw	r3,128(sp)
   21ecc:	d9001f15 	stw	r4,124(sp)
   21ed0:	014001c4 	movi	r5,7
   21ed4:	2901fb16 	blt	r5,r4,226c4 <___vfprintf_internal_r+0x1d98>
   21ed8:	42000204 	addi	r8,r8,8
   21edc:	8001f716 	blt	r16,zero,226bc <___vfprintf_internal_r+0x1d90>
   21ee0:	1421c83a 	sub	r16,r2,r16
   21ee4:	043d160e 	bge	zero,r16,21340 <__alt_data_end+0xfffe1340>
   21ee8:	04400404 	movi	r17,16
   21eec:	d8801f17 	ldw	r2,124(sp)
   21ef0:	8c3efb0e 	bge	r17,r16,21ae0 <__alt_data_end+0xfffe1ae0>
   21ef4:	014000f4 	movhi	r5,3
   21ef8:	294a1b84 	addi	r5,r5,10350
   21efc:	d9402c15 	stw	r5,176(sp)
   21f00:	058001c4 	movi	r22,7
   21f04:	dcc02d17 	ldw	r19,180(sp)
   21f08:	00000306 	br	21f18 <___vfprintf_internal_r+0x15ec>
   21f0c:	42000204 	addi	r8,r8,8
   21f10:	843ffc04 	addi	r16,r16,-16
   21f14:	8c3ef50e 	bge	r17,r16,21aec <__alt_data_end+0xfffe1aec>
   21f18:	18c00404 	addi	r3,r3,16
   21f1c:	10800044 	addi	r2,r2,1
   21f20:	45000015 	stw	r20,0(r8)
   21f24:	44400115 	stw	r17,4(r8)
   21f28:	d8c02015 	stw	r3,128(sp)
   21f2c:	d8801f15 	stw	r2,124(sp)
   21f30:	b0bff60e 	bge	r22,r2,21f0c <__alt_data_end+0xfffe1f0c>
   21f34:	d9801e04 	addi	r6,sp,120
   21f38:	b80b883a 	mov	r5,r23
   21f3c:	9809883a 	mov	r4,r19
   21f40:	002810c0 	call	2810c <__sprint_r>
   21f44:	103b7d1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21f48:	d8c02017 	ldw	r3,128(sp)
   21f4c:	d8801f17 	ldw	r2,124(sp)
   21f50:	da000404 	addi	r8,sp,16
   21f54:	003fee06 	br	21f10 <__alt_data_end+0xfffe1f10>
   21f58:	9088703a 	and	r4,r18,r2
   21f5c:	203eab1e 	bne	r4,zero,21a0c <__alt_data_end+0xfffe1a0c>
   21f60:	dc401f17 	ldw	r17,124(sp)
   21f64:	40800115 	stw	r2,4(r8)
   21f68:	44000015 	stw	r16,0(r8)
   21f6c:	8c400044 	addi	r17,r17,1
   21f70:	d8c02015 	stw	r3,128(sp)
   21f74:	dc401f15 	stw	r17,124(sp)
   21f78:	008001c4 	movi	r2,7
   21f7c:	14400e16 	blt	r2,r17,21fb8 <___vfprintf_internal_r+0x168c>
   21f80:	45800204 	addi	r22,r8,8
   21f84:	003eca06 	br	21ab0 <__alt_data_end+0xfffe1ab0>
   21f88:	010000f4 	movhi	r4,3
   21f8c:	210a1b84 	addi	r4,r4,10350
   21f90:	d9002c15 	stw	r4,176(sp)
   21f94:	d8802c17 	ldw	r2,176(sp)
   21f98:	1c07883a 	add	r3,r3,r16
   21f9c:	8c400044 	addi	r17,r17,1
   21fa0:	b0800015 	stw	r2,0(r22)
   21fa4:	b4000115 	stw	r16,4(r22)
   21fa8:	d8c02015 	stw	r3,128(sp)
   21fac:	dc401f15 	stw	r17,124(sp)
   21fb0:	008001c4 	movi	r2,7
   21fb4:	147ebd0e 	bge	r2,r17,21aac <__alt_data_end+0xfffe1aac>
   21fb8:	d9002d17 	ldw	r4,180(sp)
   21fbc:	d9801e04 	addi	r6,sp,120
   21fc0:	b80b883a 	mov	r5,r23
   21fc4:	002810c0 	call	2810c <__sprint_r>
   21fc8:	103b5c1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21fcc:	d8c02017 	ldw	r3,128(sp)
   21fd0:	dc401f17 	ldw	r17,124(sp)
   21fd4:	dd800404 	addi	r22,sp,16
   21fd8:	003eb506 	br	21ab0 <__alt_data_end+0xfffe1ab0>
   21fdc:	d9002d17 	ldw	r4,180(sp)
   21fe0:	d9801e04 	addi	r6,sp,120
   21fe4:	b80b883a 	mov	r5,r23
   21fe8:	002810c0 	call	2810c <__sprint_r>
   21fec:	103b531e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   21ff0:	d8c02017 	ldw	r3,128(sp)
   21ff4:	dc401f17 	ldw	r17,124(sp)
   21ff8:	da000404 	addi	r8,sp,16
   21ffc:	003e8d06 	br	21a34 <__alt_data_end+0xfffe1a34>
   22000:	d9002d17 	ldw	r4,180(sp)
   22004:	d9801e04 	addi	r6,sp,120
   22008:	b80b883a 	mov	r5,r23
   2200c:	002810c0 	call	2810c <__sprint_r>
   22010:	103b4a1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   22014:	d8c02017 	ldw	r3,128(sp)
   22018:	dc401f17 	ldw	r17,124(sp)
   2201c:	dd800404 	addi	r22,sp,16
   22020:	003e8f06 	br	21a60 <__alt_data_end+0xfffe1a60>
   22024:	0027883a 	mov	r19,zero
   22028:	003f4a06 	br	21d54 <__alt_data_end+0xfffe1d54>
   2202c:	d9002d17 	ldw	r4,180(sp)
   22030:	d9801e04 	addi	r6,sp,120
   22034:	b80b883a 	mov	r5,r23
   22038:	002810c0 	call	2810c <__sprint_r>
   2203c:	103b3f1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   22040:	d8c02017 	ldw	r3,128(sp)
   22044:	da000404 	addi	r8,sp,16
   22048:	003c7b06 	br	21238 <__alt_data_end+0xfffe1238>
   2204c:	d9402a17 	ldw	r5,168(sp)
   22050:	04e7c83a 	sub	r19,zero,r19
   22054:	07000b44 	movi	fp,45
   22058:	9804c03a 	cmpne	r2,r19,zero
   2205c:	05adc83a 	sub	r22,zero,r22
   22060:	df002785 	stb	fp,158(sp)
   22064:	b0adc83a 	sub	r22,r22,r2
   22068:	28017b16 	blt	r5,zero,22658 <___vfprintf_internal_r+0x1d2c>
   2206c:	00bfdfc4 	movi	r2,-129
   22070:	90a4703a 	and	r18,r18,r2
   22074:	003b8906 	br	20e9c <__alt_data_end+0xfffe0e9c>
   22078:	d9003617 	ldw	r4,216(sp)
   2207c:	d9403817 	ldw	r5,224(sp)
   22080:	da003d15 	stw	r8,244(sp)
   22084:	0027d300 	call	27d30 <__fpclassifyd>
   22088:	da003d17 	ldw	r8,244(sp)
   2208c:	1000f026 	beq	r2,zero,22450 <___vfprintf_internal_r+0x1b24>
   22090:	d9002a17 	ldw	r4,168(sp)
   22094:	05bff7c4 	movi	r22,-33
   22098:	00bfffc4 	movi	r2,-1
   2209c:	8dac703a 	and	r22,r17,r22
   220a0:	20820026 	beq	r4,r2,228a4 <___vfprintf_internal_r+0x1f78>
   220a4:	008011c4 	movi	r2,71
   220a8:	b081f726 	beq	r22,r2,22888 <___vfprintf_internal_r+0x1f5c>
   220ac:	d9003817 	ldw	r4,224(sp)
   220b0:	90c04014 	ori	r3,r18,256
   220b4:	d8c02c15 	stw	r3,176(sp)
   220b8:	20021516 	blt	r4,zero,22910 <___vfprintf_internal_r+0x1fe4>
   220bc:	dcc03817 	ldw	r19,224(sp)
   220c0:	d8002905 	stb	zero,164(sp)
   220c4:	00801984 	movi	r2,102
   220c8:	8881f926 	beq	r17,r2,228b0 <___vfprintf_internal_r+0x1f84>
   220cc:	00801184 	movi	r2,70
   220d0:	88821c26 	beq	r17,r2,22944 <___vfprintf_internal_r+0x2018>
   220d4:	00801144 	movi	r2,69
   220d8:	b081ef26 	beq	r22,r2,22898 <___vfprintf_internal_r+0x1f6c>
   220dc:	d8c02a17 	ldw	r3,168(sp)
   220e0:	d8802104 	addi	r2,sp,132
   220e4:	d8800315 	stw	r2,12(sp)
   220e8:	d9403617 	ldw	r5,216(sp)
   220ec:	d8802504 	addi	r2,sp,148
   220f0:	d9002d17 	ldw	r4,180(sp)
   220f4:	d8800215 	stw	r2,8(sp)
   220f8:	d8802604 	addi	r2,sp,152
   220fc:	d8c00015 	stw	r3,0(sp)
   22100:	d8800115 	stw	r2,4(sp)
   22104:	01c00084 	movi	r7,2
   22108:	980d883a 	mov	r6,r19
   2210c:	d8c03c15 	stw	r3,240(sp)
   22110:	da003d15 	stw	r8,244(sp)
   22114:	002305c0 	call	2305c <_dtoa_r>
   22118:	1021883a 	mov	r16,r2
   2211c:	008019c4 	movi	r2,103
   22120:	d8c03c17 	ldw	r3,240(sp)
   22124:	da003d17 	ldw	r8,244(sp)
   22128:	88817126 	beq	r17,r2,226f0 <___vfprintf_internal_r+0x1dc4>
   2212c:	008011c4 	movi	r2,71
   22130:	88829126 	beq	r17,r2,22b78 <___vfprintf_internal_r+0x224c>
   22134:	80f9883a 	add	fp,r16,r3
   22138:	d9003617 	ldw	r4,216(sp)
   2213c:	000d883a 	mov	r6,zero
   22140:	000f883a 	mov	r7,zero
   22144:	980b883a 	mov	r5,r19
   22148:	da003d15 	stw	r8,244(sp)
   2214c:	002c06c0 	call	2c06c <__eqdf2>
   22150:	da003d17 	ldw	r8,244(sp)
   22154:	10018d26 	beq	r2,zero,2278c <___vfprintf_internal_r+0x1e60>
   22158:	d8802117 	ldw	r2,132(sp)
   2215c:	1700062e 	bgeu	r2,fp,22178 <___vfprintf_internal_r+0x184c>
   22160:	01000c04 	movi	r4,48
   22164:	10c00044 	addi	r3,r2,1
   22168:	d8c02115 	stw	r3,132(sp)
   2216c:	11000005 	stb	r4,0(r2)
   22170:	d8802117 	ldw	r2,132(sp)
   22174:	173ffb36 	bltu	r2,fp,22164 <__alt_data_end+0xfffe2164>
   22178:	1405c83a 	sub	r2,r2,r16
   2217c:	d8803315 	stw	r2,204(sp)
   22180:	008011c4 	movi	r2,71
   22184:	b0817626 	beq	r22,r2,22760 <___vfprintf_internal_r+0x1e34>
   22188:	00801944 	movi	r2,101
   2218c:	1442800e 	bge	r2,r17,22b90 <___vfprintf_internal_r+0x2264>
   22190:	d8c02617 	ldw	r3,152(sp)
   22194:	00801984 	movi	r2,102
   22198:	d8c03215 	stw	r3,200(sp)
   2219c:	8881fe26 	beq	r17,r2,22998 <___vfprintf_internal_r+0x206c>
   221a0:	d8c03217 	ldw	r3,200(sp)
   221a4:	d9003317 	ldw	r4,204(sp)
   221a8:	1901dd16 	blt	r3,r4,22920 <___vfprintf_internal_r+0x1ff4>
   221ac:	9480004c 	andi	r18,r18,1
   221b0:	90022b1e 	bne	r18,zero,22a60 <___vfprintf_internal_r+0x2134>
   221b4:	1805883a 	mov	r2,r3
   221b8:	18028316 	blt	r3,zero,22bc8 <___vfprintf_internal_r+0x229c>
   221bc:	d8c03217 	ldw	r3,200(sp)
   221c0:	044019c4 	movi	r17,103
   221c4:	d8c02b15 	stw	r3,172(sp)
   221c8:	df002907 	ldb	fp,164(sp)
   221cc:	e001531e 	bne	fp,zero,2271c <___vfprintf_internal_r+0x1df0>
   221d0:	df002783 	ldbu	fp,158(sp)
   221d4:	d8802915 	stw	r2,164(sp)
   221d8:	dc802c17 	ldw	r18,176(sp)
   221dc:	d8002a15 	stw	zero,168(sp)
   221e0:	003baf06 	br	210a0 <__alt_data_end+0xfffe10a0>
   221e4:	d8c02e17 	ldw	r3,184(sp)
   221e8:	d9002e17 	ldw	r4,184(sp)
   221ec:	d9402e17 	ldw	r5,184(sp)
   221f0:	18c00017 	ldw	r3,0(r3)
   221f4:	21000117 	ldw	r4,4(r4)
   221f8:	29400204 	addi	r5,r5,8
   221fc:	d8c03615 	stw	r3,216(sp)
   22200:	d9003815 	stw	r4,224(sp)
   22204:	d9402e15 	stw	r5,184(sp)
   22208:	003b5006 	br	20f4c <__alt_data_end+0xfffe0f4c>
   2220c:	ac400007 	ldb	r17,0(r21)
   22210:	003a2806 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   22214:	9080100c 	andi	r2,r18,64
   22218:	1000a826 	beq	r2,zero,224bc <___vfprintf_internal_r+0x1b90>
   2221c:	d8c02e17 	ldw	r3,184(sp)
   22220:	002d883a 	mov	r22,zero
   22224:	1cc0000b 	ldhu	r19,0(r3)
   22228:	18c00104 	addi	r3,r3,4
   2222c:	d8c02e15 	stw	r3,184(sp)
   22230:	003caf06 	br	214f0 <__alt_data_end+0xfffe14f0>
   22234:	d9002e17 	ldw	r4,184(sp)
   22238:	d9402a17 	ldw	r5,168(sp)
   2223c:	002d883a 	mov	r22,zero
   22240:	20800104 	addi	r2,r4,4
   22244:	24c00017 	ldw	r19,0(r4)
   22248:	283ebb0e 	bge	r5,zero,21d38 <__alt_data_end+0xfffe1d38>
   2224c:	003ef106 	br	21e14 <__alt_data_end+0xfffe1e14>
   22250:	9080040c 	andi	r2,r18,16
   22254:	1000921e 	bne	r2,zero,224a0 <___vfprintf_internal_r+0x1b74>
   22258:	9480100c 	andi	r18,r18,64
   2225c:	90013926 	beq	r18,zero,22744 <___vfprintf_internal_r+0x1e18>
   22260:	d9402e17 	ldw	r5,184(sp)
   22264:	d8c02f17 	ldw	r3,188(sp)
   22268:	28800017 	ldw	r2,0(r5)
   2226c:	29400104 	addi	r5,r5,4
   22270:	d9402e15 	stw	r5,184(sp)
   22274:	10c0000d 	sth	r3,0(r2)
   22278:	0039e406 	br	20a0c <__alt_data_end+0xfffe0a0c>
   2227c:	9080100c 	andi	r2,r18,64
   22280:	10008026 	beq	r2,zero,22484 <___vfprintf_internal_r+0x1b58>
   22284:	d8802e17 	ldw	r2,184(sp)
   22288:	14c0000f 	ldh	r19,0(r2)
   2228c:	10800104 	addi	r2,r2,4
   22290:	d8802e15 	stw	r2,184(sp)
   22294:	982dd7fa 	srai	r22,r19,31
   22298:	b005883a 	mov	r2,r22
   2229c:	003af706 	br	20e7c <__alt_data_end+0xfffe0e7c>
   222a0:	9080100c 	andi	r2,r18,64
   222a4:	d8002785 	stb	zero,158(sp)
   222a8:	10008a1e 	bne	r2,zero,224d4 <___vfprintf_internal_r+0x1ba8>
   222ac:	d9002e17 	ldw	r4,184(sp)
   222b0:	d9402a17 	ldw	r5,168(sp)
   222b4:	002d883a 	mov	r22,zero
   222b8:	20800104 	addi	r2,r4,4
   222bc:	24c00017 	ldw	r19,0(r4)
   222c0:	283e4b0e 	bge	r5,zero,21bf0 <__alt_data_end+0xfffe1bf0>
   222c4:	9d86b03a 	or	r3,r19,r22
   222c8:	d8802e15 	stw	r2,184(sp)
   222cc:	183e4c1e 	bne	r3,zero,21c00 <__alt_data_end+0xfffe1c00>
   222d0:	0039883a 	mov	fp,zero
   222d4:	0005883a 	mov	r2,zero
   222d8:	003d4006 	br	217dc <__alt_data_end+0xfffe17dc>
   222dc:	014000f4 	movhi	r5,3
   222e0:	294a1b84 	addi	r5,r5,10350
   222e4:	d9402c15 	stw	r5,176(sp)
   222e8:	d9402c17 	ldw	r5,176(sp)
   222ec:	1c47883a 	add	r3,r3,r17
   222f0:	10800044 	addi	r2,r2,1
   222f4:	41400015 	stw	r5,0(r8)
   222f8:	44400115 	stw	r17,4(r8)
   222fc:	d8c02015 	stw	r3,128(sp)
   22300:	d8801f15 	stw	r2,124(sp)
   22304:	010001c4 	movi	r4,7
   22308:	20bec816 	blt	r4,r2,21e2c <__alt_data_end+0xfffe1e2c>
   2230c:	42000204 	addi	r8,r8,8
   22310:	003ecd06 	br	21e48 <__alt_data_end+0xfffe1e48>
   22314:	d9002a17 	ldw	r4,168(sp)
   22318:	d8002785 	stb	zero,158(sp)
   2231c:	203d2d16 	blt	r4,zero,217d4 <__alt_data_end+0xfffe17d4>
   22320:	00bfdfc4 	movi	r2,-129
   22324:	90a4703a 	and	r18,r18,r2
   22328:	003a6106 	br	20cb0 <__alt_data_end+0xfffe0cb0>
   2232c:	010000f4 	movhi	r4,3
   22330:	210a1b84 	addi	r4,r4,10350
   22334:	d9002c15 	stw	r4,176(sp)
   22338:	003bea06 	br	212e4 <__alt_data_end+0xfffe12e4>
   2233c:	d9002d17 	ldw	r4,180(sp)
   22340:	d9801e04 	addi	r6,sp,120
   22344:	b80b883a 	mov	r5,r23
   22348:	002810c0 	call	2810c <__sprint_r>
   2234c:	103a7b1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   22350:	d8c02017 	ldw	r3,128(sp)
   22354:	da000404 	addi	r8,sp,16
   22358:	003d4106 	br	21860 <__alt_data_end+0xfffe1860>
   2235c:	d8801f17 	ldw	r2,124(sp)
   22360:	014000f4 	movhi	r5,3
   22364:	01000044 	movi	r4,1
   22368:	18c00044 	addi	r3,r3,1
   2236c:	10800044 	addi	r2,r2,1
   22370:	294a1b04 	addi	r5,r5,10348
   22374:	41000115 	stw	r4,4(r8)
   22378:	41400015 	stw	r5,0(r8)
   2237c:	d8c02015 	stw	r3,128(sp)
   22380:	d8801f15 	stw	r2,124(sp)
   22384:	010001c4 	movi	r4,7
   22388:	20805c16 	blt	r4,r2,224fc <___vfprintf_internal_r+0x1bd0>
   2238c:	42000204 	addi	r8,r8,8
   22390:	8800041e 	bne	r17,zero,223a4 <___vfprintf_internal_r+0x1a78>
   22394:	d8803317 	ldw	r2,204(sp)
   22398:	1000021e 	bne	r2,zero,223a4 <___vfprintf_internal_r+0x1a78>
   2239c:	9080004c 	andi	r2,r18,1
   223a0:	103be726 	beq	r2,zero,21340 <__alt_data_end+0xfffe1340>
   223a4:	d9003717 	ldw	r4,220(sp)
   223a8:	d8801f17 	ldw	r2,124(sp)
   223ac:	d9403417 	ldw	r5,208(sp)
   223b0:	20c7883a 	add	r3,r4,r3
   223b4:	10800044 	addi	r2,r2,1
   223b8:	41000115 	stw	r4,4(r8)
   223bc:	41400015 	stw	r5,0(r8)
   223c0:	d8c02015 	stw	r3,128(sp)
   223c4:	d8801f15 	stw	r2,124(sp)
   223c8:	010001c4 	movi	r4,7
   223cc:	20812116 	blt	r4,r2,22854 <___vfprintf_internal_r+0x1f28>
   223d0:	42000204 	addi	r8,r8,8
   223d4:	0463c83a 	sub	r17,zero,r17
   223d8:	0440730e 	bge	zero,r17,225a8 <___vfprintf_internal_r+0x1c7c>
   223dc:	05800404 	movi	r22,16
   223e0:	b440860e 	bge	r22,r17,225fc <___vfprintf_internal_r+0x1cd0>
   223e4:	014000f4 	movhi	r5,3
   223e8:	294a1b84 	addi	r5,r5,10350
   223ec:	d9402c15 	stw	r5,176(sp)
   223f0:	070001c4 	movi	fp,7
   223f4:	dcc02d17 	ldw	r19,180(sp)
   223f8:	00000306 	br	22408 <___vfprintf_internal_r+0x1adc>
   223fc:	42000204 	addi	r8,r8,8
   22400:	8c7ffc04 	addi	r17,r17,-16
   22404:	b440800e 	bge	r22,r17,22608 <___vfprintf_internal_r+0x1cdc>
   22408:	18c00404 	addi	r3,r3,16
   2240c:	10800044 	addi	r2,r2,1
   22410:	45000015 	stw	r20,0(r8)
   22414:	45800115 	stw	r22,4(r8)
   22418:	d8c02015 	stw	r3,128(sp)
   2241c:	d8801f15 	stw	r2,124(sp)
   22420:	e0bff60e 	bge	fp,r2,223fc <__alt_data_end+0xfffe23fc>
   22424:	d9801e04 	addi	r6,sp,120
   22428:	b80b883a 	mov	r5,r23
   2242c:	9809883a 	mov	r4,r19
   22430:	002810c0 	call	2810c <__sprint_r>
   22434:	103a411e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   22438:	d8c02017 	ldw	r3,128(sp)
   2243c:	d8801f17 	ldw	r2,124(sp)
   22440:	da000404 	addi	r8,sp,16
   22444:	003fee06 	br	22400 <__alt_data_end+0xfffe2400>
   22448:	00bfffc4 	movi	r2,-1
   2244c:	003a3f06 	br	20d4c <__alt_data_end+0xfffe0d4c>
   22450:	008011c4 	movi	r2,71
   22454:	1440b816 	blt	r2,r17,22738 <___vfprintf_internal_r+0x1e0c>
   22458:	040000f4 	movhi	r16,3
   2245c:	840a0d04 	addi	r16,r16,10292
   22460:	00c000c4 	movi	r3,3
   22464:	00bfdfc4 	movi	r2,-129
   22468:	d8c02915 	stw	r3,164(sp)
   2246c:	90a4703a 	and	r18,r18,r2
   22470:	df002783 	ldbu	fp,158(sp)
   22474:	d8c02b15 	stw	r3,172(sp)
   22478:	d8002a15 	stw	zero,168(sp)
   2247c:	d8003215 	stw	zero,200(sp)
   22480:	003b0706 	br	210a0 <__alt_data_end+0xfffe10a0>
   22484:	d8c02e17 	ldw	r3,184(sp)
   22488:	1cc00017 	ldw	r19,0(r3)
   2248c:	18c00104 	addi	r3,r3,4
   22490:	d8c02e15 	stw	r3,184(sp)
   22494:	982dd7fa 	srai	r22,r19,31
   22498:	b005883a 	mov	r2,r22
   2249c:	003a7706 	br	20e7c <__alt_data_end+0xfffe0e7c>
   224a0:	d8c02e17 	ldw	r3,184(sp)
   224a4:	d9002f17 	ldw	r4,188(sp)
   224a8:	18800017 	ldw	r2,0(r3)
   224ac:	18c00104 	addi	r3,r3,4
   224b0:	d8c02e15 	stw	r3,184(sp)
   224b4:	11000015 	stw	r4,0(r2)
   224b8:	00395406 	br	20a0c <__alt_data_end+0xfffe0a0c>
   224bc:	d9002e17 	ldw	r4,184(sp)
   224c0:	002d883a 	mov	r22,zero
   224c4:	24c00017 	ldw	r19,0(r4)
   224c8:	21000104 	addi	r4,r4,4
   224cc:	d9002e15 	stw	r4,184(sp)
   224d0:	003c0706 	br	214f0 <__alt_data_end+0xfffe14f0>
   224d4:	d9402e17 	ldw	r5,184(sp)
   224d8:	d8c02a17 	ldw	r3,168(sp)
   224dc:	002d883a 	mov	r22,zero
   224e0:	28800104 	addi	r2,r5,4
   224e4:	2cc0000b 	ldhu	r19,0(r5)
   224e8:	183dc10e 	bge	r3,zero,21bf0 <__alt_data_end+0xfffe1bf0>
   224ec:	003f7506 	br	222c4 <__alt_data_end+0xfffe22c4>
   224f0:	040000f4 	movhi	r16,3
   224f4:	840a0b04 	addi	r16,r16,10284
   224f8:	003aa706 	br	20f98 <__alt_data_end+0xfffe0f98>
   224fc:	d9002d17 	ldw	r4,180(sp)
   22500:	d9801e04 	addi	r6,sp,120
   22504:	b80b883a 	mov	r5,r23
   22508:	002810c0 	call	2810c <__sprint_r>
   2250c:	103a0b1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   22510:	dc402617 	ldw	r17,152(sp)
   22514:	d8c02017 	ldw	r3,128(sp)
   22518:	da000404 	addi	r8,sp,16
   2251c:	003f9c06 	br	22390 <__alt_data_end+0xfffe2390>
   22520:	ac400043 	ldbu	r17,1(r21)
   22524:	84000814 	ori	r16,r16,32
   22528:	ad400044 	addi	r21,r21,1
   2252c:	8c403fcc 	andi	r17,r17,255
   22530:	8c40201c 	xori	r17,r17,128
   22534:	8c7fe004 	addi	r17,r17,-128
   22538:	00395e06 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   2253c:	d8c02e15 	stw	r3,184(sp)
   22540:	0039883a 	mov	fp,zero
   22544:	003e3506 	br	21e1c <__alt_data_end+0xfffe1e1c>
   22548:	d9002d17 	ldw	r4,180(sp)
   2254c:	d9801e04 	addi	r6,sp,120
   22550:	b80b883a 	mov	r5,r23
   22554:	002810c0 	call	2810c <__sprint_r>
   22558:	1039f81e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   2255c:	d8c02017 	ldw	r3,128(sp)
   22560:	da000404 	addi	r8,sp,16
   22564:	003cd006 	br	218a8 <__alt_data_end+0xfffe18a8>
   22568:	8009883a 	mov	r4,r16
   2256c:	df003d15 	stw	fp,244(sp)
   22570:	00208940 	call	20894 <strlen>
   22574:	d8802b15 	stw	r2,172(sp)
   22578:	da003d17 	ldw	r8,244(sp)
   2257c:	103c200e 	bge	r2,zero,21600 <__alt_data_end+0xfffe1600>
   22580:	0005883a 	mov	r2,zero
   22584:	003c1e06 	br	21600 <__alt_data_end+0xfffe1600>
   22588:	d9002d17 	ldw	r4,180(sp)
   2258c:	d9801e04 	addi	r6,sp,120
   22590:	b80b883a 	mov	r5,r23
   22594:	002810c0 	call	2810c <__sprint_r>
   22598:	1039e81e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   2259c:	d8c02017 	ldw	r3,128(sp)
   225a0:	d8801f17 	ldw	r2,124(sp)
   225a4:	da000404 	addi	r8,sp,16
   225a8:	d9403317 	ldw	r5,204(sp)
   225ac:	10800044 	addi	r2,r2,1
   225b0:	44000015 	stw	r16,0(r8)
   225b4:	28c7883a 	add	r3,r5,r3
   225b8:	003b5b06 	br	21328 <__alt_data_end+0xfffe1328>
   225bc:	010000f4 	movhi	r4,3
   225c0:	210a1f84 	addi	r4,r4,10366
   225c4:	d9003515 	stw	r4,212(sp)
   225c8:	003af206 	br	21194 <__alt_data_end+0xfffe1194>
   225cc:	013fffc4 	movi	r4,-1
   225d0:	003a0806 	br	20df4 <__alt_data_end+0xfffe0df4>
   225d4:	0023883a 	mov	r17,zero
   225d8:	003d9d06 	br	21c50 <__alt_data_end+0xfffe1c50>
   225dc:	d9002d17 	ldw	r4,180(sp)
   225e0:	d9801e04 	addi	r6,sp,120
   225e4:	b80b883a 	mov	r5,r23
   225e8:	002810c0 	call	2810c <__sprint_r>
   225ec:	1039d31e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   225f0:	d8c02017 	ldw	r3,128(sp)
   225f4:	da000404 	addi	r8,sp,16
   225f8:	003d9406 	br	21c4c <__alt_data_end+0xfffe1c4c>
   225fc:	010000f4 	movhi	r4,3
   22600:	210a1b84 	addi	r4,r4,10350
   22604:	d9002c15 	stw	r4,176(sp)
   22608:	d9002c17 	ldw	r4,176(sp)
   2260c:	1c47883a 	add	r3,r3,r17
   22610:	10800044 	addi	r2,r2,1
   22614:	41000015 	stw	r4,0(r8)
   22618:	44400115 	stw	r17,4(r8)
   2261c:	d8c02015 	stw	r3,128(sp)
   22620:	d8801f15 	stw	r2,124(sp)
   22624:	010001c4 	movi	r4,7
   22628:	20bfd716 	blt	r4,r2,22588 <__alt_data_end+0xfffe2588>
   2262c:	42000204 	addi	r8,r8,8
   22630:	003fdd06 	br	225a8 <__alt_data_end+0xfffe25a8>
   22634:	d9002d17 	ldw	r4,180(sp)
   22638:	d9801e04 	addi	r6,sp,120
   2263c:	b80b883a 	mov	r5,r23
   22640:	002810c0 	call	2810c <__sprint_r>
   22644:	1039bd1e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   22648:	d8802617 	ldw	r2,152(sp)
   2264c:	d8c02017 	ldw	r3,128(sp)
   22650:	da000404 	addi	r8,sp,16
   22654:	003e1006 	br	21e98 <__alt_data_end+0xfffe1e98>
   22658:	00800044 	movi	r2,1
   2265c:	10803fcc 	andi	r2,r2,255
   22660:	00c00044 	movi	r3,1
   22664:	10fa0d26 	beq	r2,r3,20e9c <__alt_data_end+0xfffe0e9c>
   22668:	00c00084 	movi	r3,2
   2266c:	10fbaf26 	beq	r2,r3,2152c <__alt_data_end+0xfffe152c>
   22670:	003a6d06 	br	21028 <__alt_data_end+0xfffe1028>
   22674:	010000f4 	movhi	r4,3
   22678:	210a1f84 	addi	r4,r4,10366
   2267c:	d9003515 	stw	r4,212(sp)
   22680:	003b5406 	br	213d4 <__alt_data_end+0xfffe13d4>
   22684:	d8802a17 	ldw	r2,168(sp)
   22688:	00c00184 	movi	r3,6
   2268c:	1880012e 	bgeu	r3,r2,22694 <___vfprintf_internal_r+0x1d68>
   22690:	1805883a 	mov	r2,r3
   22694:	d8802b15 	stw	r2,172(sp)
   22698:	1000ef16 	blt	r2,zero,22a58 <___vfprintf_internal_r+0x212c>
   2269c:	040000f4 	movhi	r16,3
   226a0:	d8802915 	stw	r2,164(sp)
   226a4:	dcc02e15 	stw	r19,184(sp)
   226a8:	d8002a15 	stw	zero,168(sp)
   226ac:	d8003215 	stw	zero,200(sp)
   226b0:	840a1904 	addi	r16,r16,10340
   226b4:	0039883a 	mov	fp,zero
   226b8:	003a8006 	br	210bc <__alt_data_end+0xfffe10bc>
   226bc:	0021883a 	mov	r16,zero
   226c0:	003e0706 	br	21ee0 <__alt_data_end+0xfffe1ee0>
   226c4:	d9002d17 	ldw	r4,180(sp)
   226c8:	d9801e04 	addi	r6,sp,120
   226cc:	b80b883a 	mov	r5,r23
   226d0:	002810c0 	call	2810c <__sprint_r>
   226d4:	1039991e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   226d8:	d8802617 	ldw	r2,152(sp)
   226dc:	d9403317 	ldw	r5,204(sp)
   226e0:	d8c02017 	ldw	r3,128(sp)
   226e4:	da000404 	addi	r8,sp,16
   226e8:	2885c83a 	sub	r2,r5,r2
   226ec:	003dfb06 	br	21edc <__alt_data_end+0xfffe1edc>
   226f0:	9080004c 	andi	r2,r18,1
   226f4:	103e8f1e 	bne	r2,zero,22134 <__alt_data_end+0xfffe2134>
   226f8:	d8802117 	ldw	r2,132(sp)
   226fc:	003e9e06 	br	22178 <__alt_data_end+0xfffe2178>
   22700:	1025883a 	mov	r18,r2
   22704:	0039883a 	mov	fp,zero
   22708:	00800084 	movi	r2,2
   2270c:	003fd306 	br	2265c <__alt_data_end+0xfffe265c>
   22710:	07000b44 	movi	fp,45
   22714:	df002785 	stb	fp,158(sp)
   22718:	003a1b06 	br	20f88 <__alt_data_end+0xfffe0f88>
   2271c:	00c00b44 	movi	r3,45
   22720:	d8c02785 	stb	r3,158(sp)
   22724:	d8802915 	stw	r2,164(sp)
   22728:	dc802c17 	ldw	r18,176(sp)
   2272c:	d8002a15 	stw	zero,168(sp)
   22730:	07000b44 	movi	fp,45
   22734:	003a5e06 	br	210b0 <__alt_data_end+0xfffe10b0>
   22738:	040000f4 	movhi	r16,3
   2273c:	840a0e04 	addi	r16,r16,10296
   22740:	003f4706 	br	22460 <__alt_data_end+0xfffe2460>
   22744:	d9002e17 	ldw	r4,184(sp)
   22748:	d9402f17 	ldw	r5,188(sp)
   2274c:	20800017 	ldw	r2,0(r4)
   22750:	21000104 	addi	r4,r4,4
   22754:	d9002e15 	stw	r4,184(sp)
   22758:	11400015 	stw	r5,0(r2)
   2275c:	0038ab06 	br	20a0c <__alt_data_end+0xfffe0a0c>
   22760:	dd802617 	ldw	r22,152(sp)
   22764:	00bfff44 	movi	r2,-3
   22768:	b0801c16 	blt	r22,r2,227dc <___vfprintf_internal_r+0x1eb0>
   2276c:	d9402a17 	ldw	r5,168(sp)
   22770:	2d801a16 	blt	r5,r22,227dc <___vfprintf_internal_r+0x1eb0>
   22774:	dd803215 	stw	r22,200(sp)
   22778:	003e8906 	br	221a0 <__alt_data_end+0xfffe21a0>
   2277c:	010000f4 	movhi	r4,3
   22780:	210a1b84 	addi	r4,r4,10350
   22784:	d9002c15 	stw	r4,176(sp)
   22788:	003c9106 	br	219d0 <__alt_data_end+0xfffe19d0>
   2278c:	e005883a 	mov	r2,fp
   22790:	003e7906 	br	22178 <__alt_data_end+0xfffe2178>
   22794:	d9002a17 	ldw	r4,168(sp)
   22798:	df002783 	ldbu	fp,158(sp)
   2279c:	dcc02e15 	stw	r19,184(sp)
   227a0:	d9002915 	stw	r4,164(sp)
   227a4:	d9002b15 	stw	r4,172(sp)
   227a8:	d8002a15 	stw	zero,168(sp)
   227ac:	d8003215 	stw	zero,200(sp)
   227b0:	003a3b06 	br	210a0 <__alt_data_end+0xfffe10a0>
   227b4:	9080004c 	andi	r2,r18,1
   227b8:	0039883a 	mov	fp,zero
   227bc:	10000426 	beq	r2,zero,227d0 <___vfprintf_internal_r+0x1ea4>
   227c0:	00800c04 	movi	r2,48
   227c4:	dc001dc4 	addi	r16,sp,119
   227c8:	d8801dc5 	stb	r2,119(sp)
   227cc:	003b6406 	br	21560 <__alt_data_end+0xfffe1560>
   227d0:	d8002b15 	stw	zero,172(sp)
   227d4:	dc001e04 	addi	r16,sp,120
   227d8:	003a2b06 	br	21088 <__alt_data_end+0xfffe1088>
   227dc:	8c7fff84 	addi	r17,r17,-2
   227e0:	b5bfffc4 	addi	r22,r22,-1
   227e4:	dd802615 	stw	r22,152(sp)
   227e8:	dc4022c5 	stb	r17,139(sp)
   227ec:	b000bf16 	blt	r22,zero,22aec <___vfprintf_internal_r+0x21c0>
   227f0:	00800ac4 	movi	r2,43
   227f4:	d8802305 	stb	r2,140(sp)
   227f8:	00800244 	movi	r2,9
   227fc:	15807016 	blt	r2,r22,229c0 <___vfprintf_internal_r+0x2094>
   22800:	00800c04 	movi	r2,48
   22804:	b5800c04 	addi	r22,r22,48
   22808:	d8802345 	stb	r2,141(sp)
   2280c:	dd802385 	stb	r22,142(sp)
   22810:	d88023c4 	addi	r2,sp,143
   22814:	df0022c4 	addi	fp,sp,139
   22818:	d8c03317 	ldw	r3,204(sp)
   2281c:	1739c83a 	sub	fp,r2,fp
   22820:	d9003317 	ldw	r4,204(sp)
   22824:	e0c7883a 	add	r3,fp,r3
   22828:	df003a15 	stw	fp,232(sp)
   2282c:	d8c02b15 	stw	r3,172(sp)
   22830:	00800044 	movi	r2,1
   22834:	1100b30e 	bge	r2,r4,22b04 <___vfprintf_internal_r+0x21d8>
   22838:	d8c02b17 	ldw	r3,172(sp)
   2283c:	18c00044 	addi	r3,r3,1
   22840:	d8c02b15 	stw	r3,172(sp)
   22844:	1805883a 	mov	r2,r3
   22848:	1800ac16 	blt	r3,zero,22afc <___vfprintf_internal_r+0x21d0>
   2284c:	d8003215 	stw	zero,200(sp)
   22850:	003e5d06 	br	221c8 <__alt_data_end+0xfffe21c8>
   22854:	d9002d17 	ldw	r4,180(sp)
   22858:	d9801e04 	addi	r6,sp,120
   2285c:	b80b883a 	mov	r5,r23
   22860:	002810c0 	call	2810c <__sprint_r>
   22864:	1039351e 	bne	r2,zero,20d3c <__alt_data_end+0xfffe0d3c>
   22868:	dc402617 	ldw	r17,152(sp)
   2286c:	d8c02017 	ldw	r3,128(sp)
   22870:	d8801f17 	ldw	r2,124(sp)
   22874:	da000404 	addi	r8,sp,16
   22878:	003ed606 	br	223d4 <__alt_data_end+0xfffe23d4>
   2287c:	182b883a 	mov	r21,r3
   22880:	d8002a15 	stw	zero,168(sp)
   22884:	00388c06 	br	20ab8 <__alt_data_end+0xfffe0ab8>
   22888:	d8802a17 	ldw	r2,168(sp)
   2288c:	103e071e 	bne	r2,zero,220ac <__alt_data_end+0xfffe20ac>
   22890:	dc002a15 	stw	r16,168(sp)
   22894:	003e0506 	br	220ac <__alt_data_end+0xfffe20ac>
   22898:	d9002a17 	ldw	r4,168(sp)
   2289c:	20c00044 	addi	r3,r4,1
   228a0:	003e0f06 	br	220e0 <__alt_data_end+0xfffe20e0>
   228a4:	01400184 	movi	r5,6
   228a8:	d9402a15 	stw	r5,168(sp)
   228ac:	003dff06 	br	220ac <__alt_data_end+0xfffe20ac>
   228b0:	d8802104 	addi	r2,sp,132
   228b4:	d8800315 	stw	r2,12(sp)
   228b8:	d8802504 	addi	r2,sp,148
   228bc:	d8800215 	stw	r2,8(sp)
   228c0:	d8802604 	addi	r2,sp,152
   228c4:	d8800115 	stw	r2,4(sp)
   228c8:	d8802a17 	ldw	r2,168(sp)
   228cc:	d9403617 	ldw	r5,216(sp)
   228d0:	d9002d17 	ldw	r4,180(sp)
   228d4:	d8800015 	stw	r2,0(sp)
   228d8:	01c000c4 	movi	r7,3
   228dc:	980d883a 	mov	r6,r19
   228e0:	da003d15 	stw	r8,244(sp)
   228e4:	002305c0 	call	2305c <_dtoa_r>
   228e8:	d8c02a17 	ldw	r3,168(sp)
   228ec:	da003d17 	ldw	r8,244(sp)
   228f0:	1021883a 	mov	r16,r2
   228f4:	10f9883a 	add	fp,r2,r3
   228f8:	81000007 	ldb	r4,0(r16)
   228fc:	00800c04 	movi	r2,48
   22900:	20805e26 	beq	r4,r2,22a7c <___vfprintf_internal_r+0x2150>
   22904:	d8c02617 	ldw	r3,152(sp)
   22908:	e0f9883a 	add	fp,fp,r3
   2290c:	003e0a06 	br	22138 <__alt_data_end+0xfffe2138>
   22910:	00c00b44 	movi	r3,45
   22914:	24e0003c 	xorhi	r19,r4,32768
   22918:	d8c02905 	stb	r3,164(sp)
   2291c:	003de906 	br	220c4 <__alt_data_end+0xfffe20c4>
   22920:	d8c03217 	ldw	r3,200(sp)
   22924:	00c07a0e 	bge	zero,r3,22b10 <___vfprintf_internal_r+0x21e4>
   22928:	00800044 	movi	r2,1
   2292c:	d9003317 	ldw	r4,204(sp)
   22930:	1105883a 	add	r2,r2,r4
   22934:	d8802b15 	stw	r2,172(sp)
   22938:	10004e16 	blt	r2,zero,22a74 <___vfprintf_internal_r+0x2148>
   2293c:	044019c4 	movi	r17,103
   22940:	003e2106 	br	221c8 <__alt_data_end+0xfffe21c8>
   22944:	d9002a17 	ldw	r4,168(sp)
   22948:	d8802104 	addi	r2,sp,132
   2294c:	d8800315 	stw	r2,12(sp)
   22950:	d9000015 	stw	r4,0(sp)
   22954:	d8802504 	addi	r2,sp,148
   22958:	d9403617 	ldw	r5,216(sp)
   2295c:	d9002d17 	ldw	r4,180(sp)
   22960:	d8800215 	stw	r2,8(sp)
   22964:	d8802604 	addi	r2,sp,152
   22968:	d8800115 	stw	r2,4(sp)
   2296c:	01c000c4 	movi	r7,3
   22970:	980d883a 	mov	r6,r19
   22974:	da003d15 	stw	r8,244(sp)
   22978:	002305c0 	call	2305c <_dtoa_r>
   2297c:	d8c02a17 	ldw	r3,168(sp)
   22980:	da003d17 	ldw	r8,244(sp)
   22984:	1021883a 	mov	r16,r2
   22988:	00801184 	movi	r2,70
   2298c:	80f9883a 	add	fp,r16,r3
   22990:	88bfd926 	beq	r17,r2,228f8 <__alt_data_end+0xfffe28f8>
   22994:	003de806 	br	22138 <__alt_data_end+0xfffe2138>
   22998:	d9002a17 	ldw	r4,168(sp)
   2299c:	00c04d0e 	bge	zero,r3,22ad4 <___vfprintf_internal_r+0x21a8>
   229a0:	2000441e 	bne	r4,zero,22ab4 <___vfprintf_internal_r+0x2188>
   229a4:	9480004c 	andi	r18,r18,1
   229a8:	9000421e 	bne	r18,zero,22ab4 <___vfprintf_internal_r+0x2188>
   229ac:	1805883a 	mov	r2,r3
   229b0:	18006f16 	blt	r3,zero,22b70 <___vfprintf_internal_r+0x2244>
   229b4:	d8c03217 	ldw	r3,200(sp)
   229b8:	d8c02b15 	stw	r3,172(sp)
   229bc:	003e0206 	br	221c8 <__alt_data_end+0xfffe21c8>
   229c0:	df0022c4 	addi	fp,sp,139
   229c4:	dc002a15 	stw	r16,168(sp)
   229c8:	4027883a 	mov	r19,r8
   229cc:	e021883a 	mov	r16,fp
   229d0:	b009883a 	mov	r4,r22
   229d4:	01400284 	movi	r5,10
   229d8:	002ac980 	call	2ac98 <__modsi3>
   229dc:	10800c04 	addi	r2,r2,48
   229e0:	843fffc4 	addi	r16,r16,-1
   229e4:	b009883a 	mov	r4,r22
   229e8:	01400284 	movi	r5,10
   229ec:	80800005 	stb	r2,0(r16)
   229f0:	002ac140 	call	2ac14 <__divsi3>
   229f4:	102d883a 	mov	r22,r2
   229f8:	00800244 	movi	r2,9
   229fc:	15bff416 	blt	r2,r22,229d0 <__alt_data_end+0xfffe29d0>
   22a00:	9811883a 	mov	r8,r19
   22a04:	b0800c04 	addi	r2,r22,48
   22a08:	8027883a 	mov	r19,r16
   22a0c:	997fffc4 	addi	r5,r19,-1
   22a10:	98bfffc5 	stb	r2,-1(r19)
   22a14:	dc002a17 	ldw	r16,168(sp)
   22a18:	2f006d2e 	bgeu	r5,fp,22bd0 <___vfprintf_internal_r+0x22a4>
   22a1c:	d9c02384 	addi	r7,sp,142
   22a20:	3ccfc83a 	sub	r7,r7,r19
   22a24:	d9002344 	addi	r4,sp,141
   22a28:	e1cf883a 	add	r7,fp,r7
   22a2c:	00000106 	br	22a34 <___vfprintf_internal_r+0x2108>
   22a30:	28800003 	ldbu	r2,0(r5)
   22a34:	20800005 	stb	r2,0(r4)
   22a38:	21000044 	addi	r4,r4,1
   22a3c:	29400044 	addi	r5,r5,1
   22a40:	393ffb1e 	bne	r7,r4,22a30 <__alt_data_end+0xfffe2a30>
   22a44:	d8802304 	addi	r2,sp,140
   22a48:	14c5c83a 	sub	r2,r2,r19
   22a4c:	d8c02344 	addi	r3,sp,141
   22a50:	1885883a 	add	r2,r3,r2
   22a54:	003f7006 	br	22818 <__alt_data_end+0xfffe2818>
   22a58:	0005883a 	mov	r2,zero
   22a5c:	003f0f06 	br	2269c <__alt_data_end+0xfffe269c>
   22a60:	d8c03217 	ldw	r3,200(sp)
   22a64:	18c00044 	addi	r3,r3,1
   22a68:	d8c02b15 	stw	r3,172(sp)
   22a6c:	1805883a 	mov	r2,r3
   22a70:	183fb20e 	bge	r3,zero,2293c <__alt_data_end+0xfffe293c>
   22a74:	0005883a 	mov	r2,zero
   22a78:	003fb006 	br	2293c <__alt_data_end+0xfffe293c>
   22a7c:	d9003617 	ldw	r4,216(sp)
   22a80:	000d883a 	mov	r6,zero
   22a84:	000f883a 	mov	r7,zero
   22a88:	980b883a 	mov	r5,r19
   22a8c:	d8c03c15 	stw	r3,240(sp)
   22a90:	da003d15 	stw	r8,244(sp)
   22a94:	002c06c0 	call	2c06c <__eqdf2>
   22a98:	d8c03c17 	ldw	r3,240(sp)
   22a9c:	da003d17 	ldw	r8,244(sp)
   22aa0:	103f9826 	beq	r2,zero,22904 <__alt_data_end+0xfffe2904>
   22aa4:	00800044 	movi	r2,1
   22aa8:	10c7c83a 	sub	r3,r2,r3
   22aac:	d8c02615 	stw	r3,152(sp)
   22ab0:	003f9506 	br	22908 <__alt_data_end+0xfffe2908>
   22ab4:	d9002a17 	ldw	r4,168(sp)
   22ab8:	d8c03217 	ldw	r3,200(sp)
   22abc:	20800044 	addi	r2,r4,1
   22ac0:	1885883a 	add	r2,r3,r2
   22ac4:	d8802b15 	stw	r2,172(sp)
   22ac8:	103dbf0e 	bge	r2,zero,221c8 <__alt_data_end+0xfffe21c8>
   22acc:	0005883a 	mov	r2,zero
   22ad0:	003dbd06 	br	221c8 <__alt_data_end+0xfffe21c8>
   22ad4:	2000201e 	bne	r4,zero,22b58 <___vfprintf_internal_r+0x222c>
   22ad8:	9480004c 	andi	r18,r18,1
   22adc:	90001e1e 	bne	r18,zero,22b58 <___vfprintf_internal_r+0x222c>
   22ae0:	00800044 	movi	r2,1
   22ae4:	d8802b15 	stw	r2,172(sp)
   22ae8:	003db706 	br	221c8 <__alt_data_end+0xfffe21c8>
   22aec:	00800b44 	movi	r2,45
   22af0:	05adc83a 	sub	r22,zero,r22
   22af4:	d8802305 	stb	r2,140(sp)
   22af8:	003f3f06 	br	227f8 <__alt_data_end+0xfffe27f8>
   22afc:	0005883a 	mov	r2,zero
   22b00:	003f5206 	br	2284c <__alt_data_end+0xfffe284c>
   22b04:	90a4703a 	and	r18,r18,r2
   22b08:	903f4e26 	beq	r18,zero,22844 <__alt_data_end+0xfffe2844>
   22b0c:	003f4a06 	br	22838 <__alt_data_end+0xfffe2838>
   22b10:	00800084 	movi	r2,2
   22b14:	10c5c83a 	sub	r2,r2,r3
   22b18:	003f8406 	br	2292c <__alt_data_end+0xfffe292c>
   22b1c:	d9402e17 	ldw	r5,184(sp)
   22b20:	d9002e17 	ldw	r4,184(sp)
   22b24:	ac400043 	ldbu	r17,1(r21)
   22b28:	29400017 	ldw	r5,0(r5)
   22b2c:	20800104 	addi	r2,r4,4
   22b30:	d8802e15 	stw	r2,184(sp)
   22b34:	d9402a15 	stw	r5,168(sp)
   22b38:	182b883a 	mov	r21,r3
   22b3c:	283e7b0e 	bge	r5,zero,2252c <__alt_data_end+0xfffe252c>
   22b40:	8c403fcc 	andi	r17,r17,255
   22b44:	017fffc4 	movi	r5,-1
   22b48:	8c40201c 	xori	r17,r17,128
   22b4c:	d9402a15 	stw	r5,168(sp)
   22b50:	8c7fe004 	addi	r17,r17,-128
   22b54:	0037d706 	br	20ab4 <__alt_data_end+0xfffe0ab4>
   22b58:	d8c02a17 	ldw	r3,168(sp)
   22b5c:	18c00084 	addi	r3,r3,2
   22b60:	d8c02b15 	stw	r3,172(sp)
   22b64:	1805883a 	mov	r2,r3
   22b68:	183d970e 	bge	r3,zero,221c8 <__alt_data_end+0xfffe21c8>
   22b6c:	003fd706 	br	22acc <__alt_data_end+0xfffe2acc>
   22b70:	0005883a 	mov	r2,zero
   22b74:	003f8f06 	br	229b4 <__alt_data_end+0xfffe29b4>
   22b78:	9080004c 	andi	r2,r18,1
   22b7c:	103f821e 	bne	r2,zero,22988 <__alt_data_end+0xfffe2988>
   22b80:	d8802117 	ldw	r2,132(sp)
   22b84:	1405c83a 	sub	r2,r2,r16
   22b88:	d8803315 	stw	r2,204(sp)
   22b8c:	b47ef426 	beq	r22,r17,22760 <__alt_data_end+0xfffe2760>
   22b90:	dd802617 	ldw	r22,152(sp)
   22b94:	003f1206 	br	227e0 <__alt_data_end+0xfffe27e0>
   22b98:	d8c02b03 	ldbu	r3,172(sp)
   22b9c:	d8c02785 	stb	r3,158(sp)
   22ba0:	0038df06 	br	20f20 <__alt_data_end+0xfffe0f20>
   22ba4:	d8c02b03 	ldbu	r3,172(sp)
   22ba8:	d8c02785 	stb	r3,158(sp)
   22bac:	0038aa06 	br	20e58 <__alt_data_end+0xfffe0e58>
   22bb0:	d8c02b03 	ldbu	r3,172(sp)
   22bb4:	d8c02785 	stb	r3,158(sp)
   22bb8:	003a4306 	br	214c8 <__alt_data_end+0xfffe14c8>
   22bbc:	d8c02b03 	ldbu	r3,172(sp)
   22bc0:	d8c02785 	stb	r3,158(sp)
   22bc4:	003af506 	br	2179c <__alt_data_end+0xfffe179c>
   22bc8:	0005883a 	mov	r2,zero
   22bcc:	003d7b06 	br	221bc <__alt_data_end+0xfffe21bc>
   22bd0:	d8802344 	addi	r2,sp,141
   22bd4:	003f1006 	br	22818 <__alt_data_end+0xfffe2818>
   22bd8:	d8c02b03 	ldbu	r3,172(sp)
   22bdc:	d8c02785 	stb	r3,158(sp)
   22be0:	0038fd06 	br	20fd8 <__alt_data_end+0xfffe0fd8>
   22be4:	d8c02b03 	ldbu	r3,172(sp)
   22be8:	d8c02785 	stb	r3,158(sp)
   22bec:	003a9706 	br	2164c <__alt_data_end+0xfffe164c>
   22bf0:	d8c02b03 	ldbu	r3,172(sp)
   22bf4:	d8c02785 	stb	r3,158(sp)
   22bf8:	003a1806 	br	2145c <__alt_data_end+0xfffe145c>
   22bfc:	d8c02b03 	ldbu	r3,172(sp)
   22c00:	d8c02785 	stb	r3,158(sp)
   22c04:	003abe06 	br	21700 <__alt_data_end+0xfffe1700>

00022c08 <__vfprintf_internal>:
   22c08:	008000f4 	movhi	r2,3
   22c0c:	1091bf04 	addi	r2,r2,18172
   22c10:	300f883a 	mov	r7,r6
   22c14:	280d883a 	mov	r6,r5
   22c18:	200b883a 	mov	r5,r4
   22c1c:	11000017 	ldw	r4,0(r2)
   22c20:	002092c1 	jmpi	2092c <___vfprintf_internal_r>

00022c24 <__sbprintf>:
   22c24:	2880030b 	ldhu	r2,12(r5)
   22c28:	2ac01917 	ldw	r11,100(r5)
   22c2c:	2a80038b 	ldhu	r10,14(r5)
   22c30:	2a400717 	ldw	r9,28(r5)
   22c34:	2a000917 	ldw	r8,36(r5)
   22c38:	defee204 	addi	sp,sp,-1144
   22c3c:	00c10004 	movi	r3,1024
   22c40:	dc011a15 	stw	r16,1128(sp)
   22c44:	10bfff4c 	andi	r2,r2,65533
   22c48:	2821883a 	mov	r16,r5
   22c4c:	d8cb883a 	add	r5,sp,r3
   22c50:	dc811c15 	stw	r18,1136(sp)
   22c54:	dc411b15 	stw	r17,1132(sp)
   22c58:	dfc11d15 	stw	ra,1140(sp)
   22c5c:	2025883a 	mov	r18,r4
   22c60:	d881030d 	sth	r2,1036(sp)
   22c64:	dac11915 	stw	r11,1124(sp)
   22c68:	da81038d 	sth	r10,1038(sp)
   22c6c:	da410715 	stw	r9,1052(sp)
   22c70:	da010915 	stw	r8,1060(sp)
   22c74:	dec10015 	stw	sp,1024(sp)
   22c78:	dec10415 	stw	sp,1040(sp)
   22c7c:	d8c10215 	stw	r3,1032(sp)
   22c80:	d8c10515 	stw	r3,1044(sp)
   22c84:	d8010615 	stw	zero,1048(sp)
   22c88:	002092c0 	call	2092c <___vfprintf_internal_r>
   22c8c:	1023883a 	mov	r17,r2
   22c90:	10000416 	blt	r2,zero,22ca4 <__sbprintf+0x80>
   22c94:	d9410004 	addi	r5,sp,1024
   22c98:	9009883a 	mov	r4,r18
   22c9c:	00249000 	call	24900 <_fflush_r>
   22ca0:	10000d1e 	bne	r2,zero,22cd8 <__sbprintf+0xb4>
   22ca4:	d881030b 	ldhu	r2,1036(sp)
   22ca8:	1080100c 	andi	r2,r2,64
   22cac:	10000326 	beq	r2,zero,22cbc <__sbprintf+0x98>
   22cb0:	8080030b 	ldhu	r2,12(r16)
   22cb4:	10801014 	ori	r2,r2,64
   22cb8:	8080030d 	sth	r2,12(r16)
   22cbc:	8805883a 	mov	r2,r17
   22cc0:	dfc11d17 	ldw	ra,1140(sp)
   22cc4:	dc811c17 	ldw	r18,1136(sp)
   22cc8:	dc411b17 	ldw	r17,1132(sp)
   22ccc:	dc011a17 	ldw	r16,1128(sp)
   22cd0:	dec11e04 	addi	sp,sp,1144
   22cd4:	f800283a 	ret
   22cd8:	047fffc4 	movi	r17,-1
   22cdc:	003ff106 	br	22ca4 <__alt_data_end+0xfffe2ca4>

00022ce0 <__swsetup_r>:
   22ce0:	008000f4 	movhi	r2,3
   22ce4:	defffd04 	addi	sp,sp,-12
   22ce8:	1091bf04 	addi	r2,r2,18172
   22cec:	dc400115 	stw	r17,4(sp)
   22cf0:	2023883a 	mov	r17,r4
   22cf4:	11000017 	ldw	r4,0(r2)
   22cf8:	dc000015 	stw	r16,0(sp)
   22cfc:	dfc00215 	stw	ra,8(sp)
   22d00:	2821883a 	mov	r16,r5
   22d04:	20000226 	beq	r4,zero,22d10 <__swsetup_r+0x30>
   22d08:	20800e17 	ldw	r2,56(r4)
   22d0c:	10003126 	beq	r2,zero,22dd4 <__swsetup_r+0xf4>
   22d10:	8080030b 	ldhu	r2,12(r16)
   22d14:	10c0020c 	andi	r3,r2,8
   22d18:	1009883a 	mov	r4,r2
   22d1c:	18000f26 	beq	r3,zero,22d5c <__swsetup_r+0x7c>
   22d20:	80c00417 	ldw	r3,16(r16)
   22d24:	18001526 	beq	r3,zero,22d7c <__swsetup_r+0x9c>
   22d28:	1100004c 	andi	r4,r2,1
   22d2c:	20001c1e 	bne	r4,zero,22da0 <__swsetup_r+0xc0>
   22d30:	1080008c 	andi	r2,r2,2
   22d34:	1000291e 	bne	r2,zero,22ddc <__swsetup_r+0xfc>
   22d38:	80800517 	ldw	r2,20(r16)
   22d3c:	80800215 	stw	r2,8(r16)
   22d40:	18001c26 	beq	r3,zero,22db4 <__swsetup_r+0xd4>
   22d44:	0005883a 	mov	r2,zero
   22d48:	dfc00217 	ldw	ra,8(sp)
   22d4c:	dc400117 	ldw	r17,4(sp)
   22d50:	dc000017 	ldw	r16,0(sp)
   22d54:	dec00304 	addi	sp,sp,12
   22d58:	f800283a 	ret
   22d5c:	2080040c 	andi	r2,r4,16
   22d60:	10002e26 	beq	r2,zero,22e1c <__swsetup_r+0x13c>
   22d64:	2080010c 	andi	r2,r4,4
   22d68:	10001e1e 	bne	r2,zero,22de4 <__swsetup_r+0x104>
   22d6c:	80c00417 	ldw	r3,16(r16)
   22d70:	20800214 	ori	r2,r4,8
   22d74:	8080030d 	sth	r2,12(r16)
   22d78:	183feb1e 	bne	r3,zero,22d28 <__alt_data_end+0xfffe2d28>
   22d7c:	1100a00c 	andi	r4,r2,640
   22d80:	01408004 	movi	r5,512
   22d84:	217fe826 	beq	r4,r5,22d28 <__alt_data_end+0xfffe2d28>
   22d88:	800b883a 	mov	r5,r16
   22d8c:	8809883a 	mov	r4,r17
   22d90:	002589c0 	call	2589c <__smakebuf_r>
   22d94:	8080030b 	ldhu	r2,12(r16)
   22d98:	80c00417 	ldw	r3,16(r16)
   22d9c:	003fe206 	br	22d28 <__alt_data_end+0xfffe2d28>
   22da0:	80800517 	ldw	r2,20(r16)
   22da4:	80000215 	stw	zero,8(r16)
   22da8:	0085c83a 	sub	r2,zero,r2
   22dac:	80800615 	stw	r2,24(r16)
   22db0:	183fe41e 	bne	r3,zero,22d44 <__alt_data_end+0xfffe2d44>
   22db4:	80c0030b 	ldhu	r3,12(r16)
   22db8:	0005883a 	mov	r2,zero
   22dbc:	1900200c 	andi	r4,r3,128
   22dc0:	203fe126 	beq	r4,zero,22d48 <__alt_data_end+0xfffe2d48>
   22dc4:	18c01014 	ori	r3,r3,64
   22dc8:	80c0030d 	sth	r3,12(r16)
   22dcc:	00bfffc4 	movi	r2,-1
   22dd0:	003fdd06 	br	22d48 <__alt_data_end+0xfffe2d48>
   22dd4:	0024cec0 	call	24cec <__sinit>
   22dd8:	003fcd06 	br	22d10 <__alt_data_end+0xfffe2d10>
   22ddc:	0005883a 	mov	r2,zero
   22de0:	003fd606 	br	22d3c <__alt_data_end+0xfffe2d3c>
   22de4:	81400c17 	ldw	r5,48(r16)
   22de8:	28000626 	beq	r5,zero,22e04 <__swsetup_r+0x124>
   22dec:	80801004 	addi	r2,r16,64
   22df0:	28800326 	beq	r5,r2,22e00 <__swsetup_r+0x120>
   22df4:	8809883a 	mov	r4,r17
   22df8:	0024e600 	call	24e60 <_free_r>
   22dfc:	8100030b 	ldhu	r4,12(r16)
   22e00:	80000c15 	stw	zero,48(r16)
   22e04:	80c00417 	ldw	r3,16(r16)
   22e08:	00bff6c4 	movi	r2,-37
   22e0c:	1108703a 	and	r4,r2,r4
   22e10:	80000115 	stw	zero,4(r16)
   22e14:	80c00015 	stw	r3,0(r16)
   22e18:	003fd506 	br	22d70 <__alt_data_end+0xfffe2d70>
   22e1c:	00800244 	movi	r2,9
   22e20:	88800015 	stw	r2,0(r17)
   22e24:	20801014 	ori	r2,r4,64
   22e28:	8080030d 	sth	r2,12(r16)
   22e2c:	00bfffc4 	movi	r2,-1
   22e30:	003fc506 	br	22d48 <__alt_data_end+0xfffe2d48>

00022e34 <quorem>:
   22e34:	defff204 	addi	sp,sp,-56
   22e38:	ddc00b15 	stw	r23,44(sp)
   22e3c:	20800417 	ldw	r2,16(r4)
   22e40:	2dc00417 	ldw	r23,16(r5)
   22e44:	dfc00d15 	stw	ra,52(sp)
   22e48:	df000c15 	stw	fp,48(sp)
   22e4c:	dd800a15 	stw	r22,40(sp)
   22e50:	dd400915 	stw	r21,36(sp)
   22e54:	dd000815 	stw	r20,32(sp)
   22e58:	dcc00715 	stw	r19,28(sp)
   22e5c:	dc800615 	stw	r18,24(sp)
   22e60:	dc400515 	stw	r17,20(sp)
   22e64:	dc000415 	stw	r16,16(sp)
   22e68:	15c07a16 	blt	r2,r23,23054 <quorem+0x220>
   22e6c:	bdffffc4 	addi	r23,r23,-1
   22e70:	bde9883a 	add	r20,r23,r23
   22e74:	28c00504 	addi	r3,r5,20
   22e78:	a529883a 	add	r20,r20,r20
   22e7c:	1d39883a 	add	fp,r3,r20
   22e80:	24c00504 	addi	r19,r4,20
   22e84:	d9400215 	stw	r5,8(sp)
   22e88:	9d29883a 	add	r20,r19,r20
   22e8c:	e1400017 	ldw	r5,0(fp)
   22e90:	d9000015 	stw	r4,0(sp)
   22e94:	a1000017 	ldw	r4,0(r20)
   22e98:	29400044 	addi	r5,r5,1
   22e9c:	d8c00115 	stw	r3,4(sp)
   22ea0:	dd000315 	stw	r20,12(sp)
   22ea4:	002ad0c0 	call	2ad0c <__udivsi3>
   22ea8:	1025883a 	mov	r18,r2
   22eac:	10003026 	beq	r2,zero,22f70 <quorem+0x13c>
   22eb0:	dc400117 	ldw	r17,4(sp)
   22eb4:	9829883a 	mov	r20,r19
   22eb8:	002d883a 	mov	r22,zero
   22ebc:	0021883a 	mov	r16,zero
   22ec0:	8d400017 	ldw	r21,0(r17)
   22ec4:	900b883a 	mov	r5,r18
   22ec8:	8c400104 	addi	r17,r17,4
   22ecc:	a93fffcc 	andi	r4,r21,65535
   22ed0:	002adc80 	call	2adc8 <__mulsi3>
   22ed4:	a808d43a 	srli	r4,r21,16
   22ed8:	900b883a 	mov	r5,r18
   22edc:	15ad883a 	add	r22,r2,r22
   22ee0:	002adc80 	call	2adc8 <__mulsi3>
   22ee4:	a1000017 	ldw	r4,0(r20)
   22ee8:	b00cd43a 	srli	r6,r22,16
   22eec:	b0ffffcc 	andi	r3,r22,65535
   22ef0:	217fffcc 	andi	r5,r4,65535
   22ef4:	2c21883a 	add	r16,r5,r16
   22ef8:	80c7c83a 	sub	r3,r16,r3
   22efc:	2008d43a 	srli	r4,r4,16
   22f00:	1185883a 	add	r2,r2,r6
   22f04:	1821d43a 	srai	r16,r3,16
   22f08:	117fffcc 	andi	r5,r2,65535
   22f0c:	2149c83a 	sub	r4,r4,r5
   22f10:	2421883a 	add	r16,r4,r16
   22f14:	8008943a 	slli	r4,r16,16
   22f18:	18ffffcc 	andi	r3,r3,65535
   22f1c:	102cd43a 	srli	r22,r2,16
   22f20:	20c8b03a 	or	r4,r4,r3
   22f24:	a1000015 	stw	r4,0(r20)
   22f28:	8021d43a 	srai	r16,r16,16
   22f2c:	a5000104 	addi	r20,r20,4
   22f30:	e47fe32e 	bgeu	fp,r17,22ec0 <__alt_data_end+0xfffe2ec0>
   22f34:	d8c00317 	ldw	r3,12(sp)
   22f38:	18800017 	ldw	r2,0(r3)
   22f3c:	10000c1e 	bne	r2,zero,22f70 <quorem+0x13c>
   22f40:	18bfff04 	addi	r2,r3,-4
   22f44:	9880082e 	bgeu	r19,r2,22f68 <quorem+0x134>
   22f48:	18ffff17 	ldw	r3,-4(r3)
   22f4c:	18000326 	beq	r3,zero,22f5c <quorem+0x128>
   22f50:	00000506 	br	22f68 <quorem+0x134>
   22f54:	10c00017 	ldw	r3,0(r2)
   22f58:	1800031e 	bne	r3,zero,22f68 <quorem+0x134>
   22f5c:	10bfff04 	addi	r2,r2,-4
   22f60:	bdffffc4 	addi	r23,r23,-1
   22f64:	98bffb36 	bltu	r19,r2,22f54 <__alt_data_end+0xfffe2f54>
   22f68:	d8c00017 	ldw	r3,0(sp)
   22f6c:	1dc00415 	stw	r23,16(r3)
   22f70:	d9400217 	ldw	r5,8(sp)
   22f74:	d9000017 	ldw	r4,0(sp)
   22f78:	00270980 	call	27098 <__mcmp>
   22f7c:	10002816 	blt	r2,zero,23020 <quorem+0x1ec>
   22f80:	dc400117 	ldw	r17,4(sp)
   22f84:	94800044 	addi	r18,r18,1
   22f88:	980d883a 	mov	r6,r19
   22f8c:	0007883a 	mov	r3,zero
   22f90:	31000017 	ldw	r4,0(r6)
   22f94:	89400017 	ldw	r5,0(r17)
   22f98:	31800104 	addi	r6,r6,4
   22f9c:	20bfffcc 	andi	r2,r4,65535
   22fa0:	10c7883a 	add	r3,r2,r3
   22fa4:	28bfffcc 	andi	r2,r5,65535
   22fa8:	1885c83a 	sub	r2,r3,r2
   22fac:	280ad43a 	srli	r5,r5,16
   22fb0:	2008d43a 	srli	r4,r4,16
   22fb4:	1007d43a 	srai	r3,r2,16
   22fb8:	10bfffcc 	andi	r2,r2,65535
   22fbc:	2149c83a 	sub	r4,r4,r5
   22fc0:	20c9883a 	add	r4,r4,r3
   22fc4:	200a943a 	slli	r5,r4,16
   22fc8:	8c400104 	addi	r17,r17,4
   22fcc:	2007d43a 	srai	r3,r4,16
   22fd0:	2884b03a 	or	r2,r5,r2
   22fd4:	30bfff15 	stw	r2,-4(r6)
   22fd8:	e47fed2e 	bgeu	fp,r17,22f90 <__alt_data_end+0xfffe2f90>
   22fdc:	bdc5883a 	add	r2,r23,r23
   22fe0:	1085883a 	add	r2,r2,r2
   22fe4:	9887883a 	add	r3,r19,r2
   22fe8:	18800017 	ldw	r2,0(r3)
   22fec:	10000c1e 	bne	r2,zero,23020 <quorem+0x1ec>
   22ff0:	18bfff04 	addi	r2,r3,-4
   22ff4:	9880082e 	bgeu	r19,r2,23018 <quorem+0x1e4>
   22ff8:	18ffff17 	ldw	r3,-4(r3)
   22ffc:	18000326 	beq	r3,zero,2300c <quorem+0x1d8>
   23000:	00000506 	br	23018 <quorem+0x1e4>
   23004:	10c00017 	ldw	r3,0(r2)
   23008:	1800031e 	bne	r3,zero,23018 <quorem+0x1e4>
   2300c:	10bfff04 	addi	r2,r2,-4
   23010:	bdffffc4 	addi	r23,r23,-1
   23014:	98bffb36 	bltu	r19,r2,23004 <__alt_data_end+0xfffe3004>
   23018:	d8c00017 	ldw	r3,0(sp)
   2301c:	1dc00415 	stw	r23,16(r3)
   23020:	9005883a 	mov	r2,r18
   23024:	dfc00d17 	ldw	ra,52(sp)
   23028:	df000c17 	ldw	fp,48(sp)
   2302c:	ddc00b17 	ldw	r23,44(sp)
   23030:	dd800a17 	ldw	r22,40(sp)
   23034:	dd400917 	ldw	r21,36(sp)
   23038:	dd000817 	ldw	r20,32(sp)
   2303c:	dcc00717 	ldw	r19,28(sp)
   23040:	dc800617 	ldw	r18,24(sp)
   23044:	dc400517 	ldw	r17,20(sp)
   23048:	dc000417 	ldw	r16,16(sp)
   2304c:	dec00e04 	addi	sp,sp,56
   23050:	f800283a 	ret
   23054:	0005883a 	mov	r2,zero
   23058:	003ff206 	br	23024 <__alt_data_end+0xfffe3024>

0002305c <_dtoa_r>:
   2305c:	20801017 	ldw	r2,64(r4)
   23060:	deffde04 	addi	sp,sp,-136
   23064:	df002015 	stw	fp,128(sp)
   23068:	dcc01b15 	stw	r19,108(sp)
   2306c:	dc801a15 	stw	r18,104(sp)
   23070:	dc401915 	stw	r17,100(sp)
   23074:	dc001815 	stw	r16,96(sp)
   23078:	dfc02115 	stw	ra,132(sp)
   2307c:	ddc01f15 	stw	r23,124(sp)
   23080:	dd801e15 	stw	r22,120(sp)
   23084:	dd401d15 	stw	r21,116(sp)
   23088:	dd001c15 	stw	r20,112(sp)
   2308c:	d9c00315 	stw	r7,12(sp)
   23090:	2039883a 	mov	fp,r4
   23094:	3023883a 	mov	r17,r6
   23098:	2825883a 	mov	r18,r5
   2309c:	dc002417 	ldw	r16,144(sp)
   230a0:	3027883a 	mov	r19,r6
   230a4:	10000826 	beq	r2,zero,230c8 <_dtoa_r+0x6c>
   230a8:	21801117 	ldw	r6,68(r4)
   230ac:	00c00044 	movi	r3,1
   230b0:	100b883a 	mov	r5,r2
   230b4:	1986983a 	sll	r3,r3,r6
   230b8:	11800115 	stw	r6,4(r2)
   230bc:	10c00215 	stw	r3,8(r2)
   230c0:	00267bc0 	call	267bc <_Bfree>
   230c4:	e0001015 	stw	zero,64(fp)
   230c8:	88002e16 	blt	r17,zero,23184 <_dtoa_r+0x128>
   230cc:	80000015 	stw	zero,0(r16)
   230d0:	889ffc2c 	andhi	r2,r17,32752
   230d4:	00dffc34 	movhi	r3,32752
   230d8:	10c01c26 	beq	r2,r3,2314c <_dtoa_r+0xf0>
   230dc:	000d883a 	mov	r6,zero
   230e0:	000f883a 	mov	r7,zero
   230e4:	9009883a 	mov	r4,r18
   230e8:	980b883a 	mov	r5,r19
   230ec:	002c06c0 	call	2c06c <__eqdf2>
   230f0:	10002b1e 	bne	r2,zero,231a0 <_dtoa_r+0x144>
   230f4:	d9c02317 	ldw	r7,140(sp)
   230f8:	00800044 	movi	r2,1
   230fc:	38800015 	stw	r2,0(r7)
   23100:	d8802517 	ldw	r2,148(sp)
   23104:	10019e26 	beq	r2,zero,23780 <_dtoa_r+0x724>
   23108:	d8c02517 	ldw	r3,148(sp)
   2310c:	008000f4 	movhi	r2,3
   23110:	108a1b44 	addi	r2,r2,10349
   23114:	18800015 	stw	r2,0(r3)
   23118:	10bfffc4 	addi	r2,r2,-1
   2311c:	dfc02117 	ldw	ra,132(sp)
   23120:	df002017 	ldw	fp,128(sp)
   23124:	ddc01f17 	ldw	r23,124(sp)
   23128:	dd801e17 	ldw	r22,120(sp)
   2312c:	dd401d17 	ldw	r21,116(sp)
   23130:	dd001c17 	ldw	r20,112(sp)
   23134:	dcc01b17 	ldw	r19,108(sp)
   23138:	dc801a17 	ldw	r18,104(sp)
   2313c:	dc401917 	ldw	r17,100(sp)
   23140:	dc001817 	ldw	r16,96(sp)
   23144:	dec02204 	addi	sp,sp,136
   23148:	f800283a 	ret
   2314c:	d8c02317 	ldw	r3,140(sp)
   23150:	0089c3c4 	movi	r2,9999
   23154:	18800015 	stw	r2,0(r3)
   23158:	90017726 	beq	r18,zero,23738 <_dtoa_r+0x6dc>
   2315c:	008000f4 	movhi	r2,3
   23160:	108a2704 	addi	r2,r2,10396
   23164:	d9002517 	ldw	r4,148(sp)
   23168:	203fec26 	beq	r4,zero,2311c <__alt_data_end+0xfffe311c>
   2316c:	10c000c7 	ldb	r3,3(r2)
   23170:	1801781e 	bne	r3,zero,23754 <_dtoa_r+0x6f8>
   23174:	10c000c4 	addi	r3,r2,3
   23178:	d9802517 	ldw	r6,148(sp)
   2317c:	30c00015 	stw	r3,0(r6)
   23180:	003fe606 	br	2311c <__alt_data_end+0xfffe311c>
   23184:	04e00034 	movhi	r19,32768
   23188:	9cffffc4 	addi	r19,r19,-1
   2318c:	00800044 	movi	r2,1
   23190:	8ce6703a 	and	r19,r17,r19
   23194:	80800015 	stw	r2,0(r16)
   23198:	9823883a 	mov	r17,r19
   2319c:	003fcc06 	br	230d0 <__alt_data_end+0xfffe30d0>
   231a0:	d8800204 	addi	r2,sp,8
   231a4:	d8800015 	stw	r2,0(sp)
   231a8:	d9c00104 	addi	r7,sp,4
   231ac:	900b883a 	mov	r5,r18
   231b0:	980d883a 	mov	r6,r19
   231b4:	e009883a 	mov	r4,fp
   231b8:	8820d53a 	srli	r16,r17,20
   231bc:	00274640 	call	27464 <__d2b>
   231c0:	d8800915 	stw	r2,36(sp)
   231c4:	8001651e 	bne	r16,zero,2375c <_dtoa_r+0x700>
   231c8:	dd800217 	ldw	r22,8(sp)
   231cc:	dc000117 	ldw	r16,4(sp)
   231d0:	00800804 	movi	r2,32
   231d4:	b421883a 	add	r16,r22,r16
   231d8:	80c10c84 	addi	r3,r16,1074
   231dc:	10c2d10e 	bge	r2,r3,23d24 <_dtoa_r+0xcc8>
   231e0:	00801004 	movi	r2,64
   231e4:	81010484 	addi	r4,r16,1042
   231e8:	10c7c83a 	sub	r3,r2,r3
   231ec:	9108d83a 	srl	r4,r18,r4
   231f0:	88e2983a 	sll	r17,r17,r3
   231f4:	2448b03a 	or	r4,r4,r17
   231f8:	002d5880 	call	2d588 <__floatunsidf>
   231fc:	017f8434 	movhi	r5,65040
   23200:	01800044 	movi	r6,1
   23204:	1009883a 	mov	r4,r2
   23208:	194b883a 	add	r5,r3,r5
   2320c:	843fffc4 	addi	r16,r16,-1
   23210:	d9801115 	stw	r6,68(sp)
   23214:	000d883a 	mov	r6,zero
   23218:	01cffe34 	movhi	r7,16376
   2321c:	002cb300 	call	2cb30 <__subdf3>
   23220:	0198dbf4 	movhi	r6,25455
   23224:	01cff4f4 	movhi	r7,16339
   23228:	3190d844 	addi	r6,r6,17249
   2322c:	39e1e9c4 	addi	r7,r7,-30809
   23230:	1009883a 	mov	r4,r2
   23234:	180b883a 	mov	r5,r3
   23238:	002c2c40 	call	2c2c4 <__muldf3>
   2323c:	01a2d874 	movhi	r6,35681
   23240:	01cff1f4 	movhi	r7,16327
   23244:	31b22cc4 	addi	r6,r6,-14157
   23248:	39e28a04 	addi	r7,r7,-30168
   2324c:	180b883a 	mov	r5,r3
   23250:	1009883a 	mov	r4,r2
   23254:	002adf00 	call	2adf0 <__adddf3>
   23258:	8009883a 	mov	r4,r16
   2325c:	1029883a 	mov	r20,r2
   23260:	1823883a 	mov	r17,r3
   23264:	002d4ac0 	call	2d4ac <__floatsidf>
   23268:	019427f4 	movhi	r6,20639
   2326c:	01cff4f4 	movhi	r7,16339
   23270:	319e7ec4 	addi	r6,r6,31227
   23274:	39d104c4 	addi	r7,r7,17427
   23278:	1009883a 	mov	r4,r2
   2327c:	180b883a 	mov	r5,r3
   23280:	002c2c40 	call	2c2c4 <__muldf3>
   23284:	100d883a 	mov	r6,r2
   23288:	180f883a 	mov	r7,r3
   2328c:	a009883a 	mov	r4,r20
   23290:	880b883a 	mov	r5,r17
   23294:	002adf00 	call	2adf0 <__adddf3>
   23298:	1009883a 	mov	r4,r2
   2329c:	180b883a 	mov	r5,r3
   232a0:	1029883a 	mov	r20,r2
   232a4:	1823883a 	mov	r17,r3
   232a8:	002d42c0 	call	2d42c <__fixdfsi>
   232ac:	000d883a 	mov	r6,zero
   232b0:	000f883a 	mov	r7,zero
   232b4:	a009883a 	mov	r4,r20
   232b8:	880b883a 	mov	r5,r17
   232bc:	d8800515 	stw	r2,20(sp)
   232c0:	002c1d00 	call	2c1d0 <__ledf2>
   232c4:	10028716 	blt	r2,zero,23ce4 <_dtoa_r+0xc88>
   232c8:	d8c00517 	ldw	r3,20(sp)
   232cc:	00800584 	movi	r2,22
   232d0:	10c27536 	bltu	r2,r3,23ca8 <_dtoa_r+0xc4c>
   232d4:	180490fa 	slli	r2,r3,3
   232d8:	00c000f4 	movhi	r3,3
   232dc:	18ca4304 	addi	r3,r3,10508
   232e0:	1885883a 	add	r2,r3,r2
   232e4:	11000017 	ldw	r4,0(r2)
   232e8:	11400117 	ldw	r5,4(r2)
   232ec:	900d883a 	mov	r6,r18
   232f0:	980f883a 	mov	r7,r19
   232f4:	002c0f40 	call	2c0f4 <__gedf2>
   232f8:	00828d0e 	bge	zero,r2,23d30 <_dtoa_r+0xcd4>
   232fc:	d9000517 	ldw	r4,20(sp)
   23300:	d8000e15 	stw	zero,56(sp)
   23304:	213fffc4 	addi	r4,r4,-1
   23308:	d9000515 	stw	r4,20(sp)
   2330c:	b42dc83a 	sub	r22,r22,r16
   23310:	b5bfffc4 	addi	r22,r22,-1
   23314:	b0026f16 	blt	r22,zero,23cd4 <_dtoa_r+0xc78>
   23318:	d8000815 	stw	zero,32(sp)
   2331c:	d9c00517 	ldw	r7,20(sp)
   23320:	38026416 	blt	r7,zero,23cb4 <_dtoa_r+0xc58>
   23324:	b1ed883a 	add	r22,r22,r7
   23328:	d9c00d15 	stw	r7,52(sp)
   2332c:	d8000a15 	stw	zero,40(sp)
   23330:	d9800317 	ldw	r6,12(sp)
   23334:	00800244 	movi	r2,9
   23338:	11811436 	bltu	r2,r6,2378c <_dtoa_r+0x730>
   2333c:	00800144 	movi	r2,5
   23340:	1184e10e 	bge	r2,r6,246c8 <_dtoa_r+0x166c>
   23344:	31bfff04 	addi	r6,r6,-4
   23348:	d9800315 	stw	r6,12(sp)
   2334c:	0023883a 	mov	r17,zero
   23350:	d9800317 	ldw	r6,12(sp)
   23354:	008000c4 	movi	r2,3
   23358:	30836726 	beq	r6,r2,240f8 <_dtoa_r+0x109c>
   2335c:	1183410e 	bge	r2,r6,24064 <_dtoa_r+0x1008>
   23360:	d9c00317 	ldw	r7,12(sp)
   23364:	00800104 	movi	r2,4
   23368:	38827c26 	beq	r7,r2,23d5c <_dtoa_r+0xd00>
   2336c:	00800144 	movi	r2,5
   23370:	3884c41e 	bne	r7,r2,24684 <_dtoa_r+0x1628>
   23374:	00800044 	movi	r2,1
   23378:	d8800b15 	stw	r2,44(sp)
   2337c:	d8c00517 	ldw	r3,20(sp)
   23380:	d9002217 	ldw	r4,136(sp)
   23384:	1907883a 	add	r3,r3,r4
   23388:	19800044 	addi	r6,r3,1
   2338c:	d8c00c15 	stw	r3,48(sp)
   23390:	d9800615 	stw	r6,24(sp)
   23394:	0183a40e 	bge	zero,r6,24228 <_dtoa_r+0x11cc>
   23398:	d9800617 	ldw	r6,24(sp)
   2339c:	3021883a 	mov	r16,r6
   233a0:	e0001115 	stw	zero,68(fp)
   233a4:	008005c4 	movi	r2,23
   233a8:	1184c92e 	bgeu	r2,r6,246d0 <_dtoa_r+0x1674>
   233ac:	00c00044 	movi	r3,1
   233b0:	00800104 	movi	r2,4
   233b4:	1085883a 	add	r2,r2,r2
   233b8:	11000504 	addi	r4,r2,20
   233bc:	180b883a 	mov	r5,r3
   233c0:	18c00044 	addi	r3,r3,1
   233c4:	313ffb2e 	bgeu	r6,r4,233b4 <__alt_data_end+0xfffe33b4>
   233c8:	e1401115 	stw	r5,68(fp)
   233cc:	e009883a 	mov	r4,fp
   233d0:	00267140 	call	26714 <_Balloc>
   233d4:	d8800715 	stw	r2,28(sp)
   233d8:	e0801015 	stw	r2,64(fp)
   233dc:	00800384 	movi	r2,14
   233e0:	1400f736 	bltu	r2,r16,237c0 <_dtoa_r+0x764>
   233e4:	8800f626 	beq	r17,zero,237c0 <_dtoa_r+0x764>
   233e8:	d9c00517 	ldw	r7,20(sp)
   233ec:	01c39a0e 	bge	zero,r7,24258 <_dtoa_r+0x11fc>
   233f0:	388003cc 	andi	r2,r7,15
   233f4:	100490fa 	slli	r2,r2,3
   233f8:	382bd13a 	srai	r21,r7,4
   233fc:	00c000f4 	movhi	r3,3
   23400:	18ca4304 	addi	r3,r3,10508
   23404:	1885883a 	add	r2,r3,r2
   23408:	a8c0040c 	andi	r3,r21,16
   2340c:	12400017 	ldw	r9,0(r2)
   23410:	12000117 	ldw	r8,4(r2)
   23414:	18037926 	beq	r3,zero,241fc <_dtoa_r+0x11a0>
   23418:	008000f4 	movhi	r2,3
   2341c:	108a3904 	addi	r2,r2,10468
   23420:	11800817 	ldw	r6,32(r2)
   23424:	11c00917 	ldw	r7,36(r2)
   23428:	9009883a 	mov	r4,r18
   2342c:	980b883a 	mov	r5,r19
   23430:	da001715 	stw	r8,92(sp)
   23434:	da401615 	stw	r9,88(sp)
   23438:	002b69c0 	call	2b69c <__divdf3>
   2343c:	da001717 	ldw	r8,92(sp)
   23440:	da401617 	ldw	r9,88(sp)
   23444:	ad4003cc 	andi	r21,r21,15
   23448:	040000c4 	movi	r16,3
   2344c:	1023883a 	mov	r17,r2
   23450:	1829883a 	mov	r20,r3
   23454:	a8001126 	beq	r21,zero,2349c <_dtoa_r+0x440>
   23458:	05c000f4 	movhi	r23,3
   2345c:	bdca3904 	addi	r23,r23,10468
   23460:	4805883a 	mov	r2,r9
   23464:	4007883a 	mov	r3,r8
   23468:	a980004c 	andi	r6,r21,1
   2346c:	1009883a 	mov	r4,r2
   23470:	a82bd07a 	srai	r21,r21,1
   23474:	180b883a 	mov	r5,r3
   23478:	30000426 	beq	r6,zero,2348c <_dtoa_r+0x430>
   2347c:	b9800017 	ldw	r6,0(r23)
   23480:	b9c00117 	ldw	r7,4(r23)
   23484:	84000044 	addi	r16,r16,1
   23488:	002c2c40 	call	2c2c4 <__muldf3>
   2348c:	bdc00204 	addi	r23,r23,8
   23490:	a83ff51e 	bne	r21,zero,23468 <__alt_data_end+0xfffe3468>
   23494:	1013883a 	mov	r9,r2
   23498:	1811883a 	mov	r8,r3
   2349c:	480d883a 	mov	r6,r9
   234a0:	400f883a 	mov	r7,r8
   234a4:	8809883a 	mov	r4,r17
   234a8:	a00b883a 	mov	r5,r20
   234ac:	002b69c0 	call	2b69c <__divdf3>
   234b0:	d8800f15 	stw	r2,60(sp)
   234b4:	d8c01015 	stw	r3,64(sp)
   234b8:	d8c00e17 	ldw	r3,56(sp)
   234bc:	18000626 	beq	r3,zero,234d8 <_dtoa_r+0x47c>
   234c0:	d9000f17 	ldw	r4,60(sp)
   234c4:	d9401017 	ldw	r5,64(sp)
   234c8:	000d883a 	mov	r6,zero
   234cc:	01cffc34 	movhi	r7,16368
   234d0:	002c1d00 	call	2c1d0 <__ledf2>
   234d4:	10040b16 	blt	r2,zero,24504 <_dtoa_r+0x14a8>
   234d8:	8009883a 	mov	r4,r16
   234dc:	002d4ac0 	call	2d4ac <__floatsidf>
   234e0:	d9800f17 	ldw	r6,60(sp)
   234e4:	d9c01017 	ldw	r7,64(sp)
   234e8:	1009883a 	mov	r4,r2
   234ec:	180b883a 	mov	r5,r3
   234f0:	002c2c40 	call	2c2c4 <__muldf3>
   234f4:	000d883a 	mov	r6,zero
   234f8:	01d00734 	movhi	r7,16412
   234fc:	1009883a 	mov	r4,r2
   23500:	180b883a 	mov	r5,r3
   23504:	002adf00 	call	2adf0 <__adddf3>
   23508:	1021883a 	mov	r16,r2
   2350c:	d8800617 	ldw	r2,24(sp)
   23510:	047f3034 	movhi	r17,64704
   23514:	1c63883a 	add	r17,r3,r17
   23518:	10031826 	beq	r2,zero,2417c <_dtoa_r+0x1120>
   2351c:	d8c00517 	ldw	r3,20(sp)
   23520:	db000617 	ldw	r12,24(sp)
   23524:	d8c01315 	stw	r3,76(sp)
   23528:	d9000b17 	ldw	r4,44(sp)
   2352c:	20038f26 	beq	r4,zero,2436c <_dtoa_r+0x1310>
   23530:	60bfffc4 	addi	r2,r12,-1
   23534:	100490fa 	slli	r2,r2,3
   23538:	00c000f4 	movhi	r3,3
   2353c:	18ca4304 	addi	r3,r3,10508
   23540:	1885883a 	add	r2,r3,r2
   23544:	11800017 	ldw	r6,0(r2)
   23548:	11c00117 	ldw	r7,4(r2)
   2354c:	d8800717 	ldw	r2,28(sp)
   23550:	0009883a 	mov	r4,zero
   23554:	014ff834 	movhi	r5,16352
   23558:	db001615 	stw	r12,88(sp)
   2355c:	15c00044 	addi	r23,r2,1
   23560:	002b69c0 	call	2b69c <__divdf3>
   23564:	800d883a 	mov	r6,r16
   23568:	880f883a 	mov	r7,r17
   2356c:	1009883a 	mov	r4,r2
   23570:	180b883a 	mov	r5,r3
   23574:	002cb300 	call	2cb30 <__subdf3>
   23578:	d9401017 	ldw	r5,64(sp)
   2357c:	d9000f17 	ldw	r4,60(sp)
   23580:	102b883a 	mov	r21,r2
   23584:	d8c01215 	stw	r3,72(sp)
   23588:	002d42c0 	call	2d42c <__fixdfsi>
   2358c:	1009883a 	mov	r4,r2
   23590:	1029883a 	mov	r20,r2
   23594:	002d4ac0 	call	2d4ac <__floatsidf>
   23598:	d9000f17 	ldw	r4,60(sp)
   2359c:	d9401017 	ldw	r5,64(sp)
   235a0:	100d883a 	mov	r6,r2
   235a4:	180f883a 	mov	r7,r3
   235a8:	002cb300 	call	2cb30 <__subdf3>
   235ac:	1823883a 	mov	r17,r3
   235b0:	d8c00717 	ldw	r3,28(sp)
   235b4:	d9401217 	ldw	r5,72(sp)
   235b8:	a2000c04 	addi	r8,r20,48
   235bc:	1021883a 	mov	r16,r2
   235c0:	1a000005 	stb	r8,0(r3)
   235c4:	800d883a 	mov	r6,r16
   235c8:	880f883a 	mov	r7,r17
   235cc:	a809883a 	mov	r4,r21
   235d0:	4029883a 	mov	r20,r8
   235d4:	002c0f40 	call	2c0f4 <__gedf2>
   235d8:	00841d16 	blt	zero,r2,24650 <_dtoa_r+0x15f4>
   235dc:	800d883a 	mov	r6,r16
   235e0:	880f883a 	mov	r7,r17
   235e4:	0009883a 	mov	r4,zero
   235e8:	014ffc34 	movhi	r5,16368
   235ec:	002cb300 	call	2cb30 <__subdf3>
   235f0:	d9401217 	ldw	r5,72(sp)
   235f4:	100d883a 	mov	r6,r2
   235f8:	180f883a 	mov	r7,r3
   235fc:	a809883a 	mov	r4,r21
   23600:	002c0f40 	call	2c0f4 <__gedf2>
   23604:	db001617 	ldw	r12,88(sp)
   23608:	00840e16 	blt	zero,r2,24644 <_dtoa_r+0x15e8>
   2360c:	00800044 	movi	r2,1
   23610:	13006b0e 	bge	r2,r12,237c0 <_dtoa_r+0x764>
   23614:	d9000717 	ldw	r4,28(sp)
   23618:	dd800f15 	stw	r22,60(sp)
   2361c:	dcc01015 	stw	r19,64(sp)
   23620:	2319883a 	add	r12,r4,r12
   23624:	dcc01217 	ldw	r19,72(sp)
   23628:	602d883a 	mov	r22,r12
   2362c:	dc801215 	stw	r18,72(sp)
   23630:	b825883a 	mov	r18,r23
   23634:	00000906 	br	2365c <_dtoa_r+0x600>
   23638:	002cb300 	call	2cb30 <__subdf3>
   2363c:	a80d883a 	mov	r6,r21
   23640:	980f883a 	mov	r7,r19
   23644:	1009883a 	mov	r4,r2
   23648:	180b883a 	mov	r5,r3
   2364c:	002c1d00 	call	2c1d0 <__ledf2>
   23650:	1003e816 	blt	r2,zero,245f4 <_dtoa_r+0x1598>
   23654:	b825883a 	mov	r18,r23
   23658:	bd83e926 	beq	r23,r22,24600 <_dtoa_r+0x15a4>
   2365c:	a809883a 	mov	r4,r21
   23660:	980b883a 	mov	r5,r19
   23664:	000d883a 	mov	r6,zero
   23668:	01d00934 	movhi	r7,16420
   2366c:	002c2c40 	call	2c2c4 <__muldf3>
   23670:	000d883a 	mov	r6,zero
   23674:	01d00934 	movhi	r7,16420
   23678:	8009883a 	mov	r4,r16
   2367c:	880b883a 	mov	r5,r17
   23680:	102b883a 	mov	r21,r2
   23684:	1827883a 	mov	r19,r3
   23688:	002c2c40 	call	2c2c4 <__muldf3>
   2368c:	180b883a 	mov	r5,r3
   23690:	1009883a 	mov	r4,r2
   23694:	1821883a 	mov	r16,r3
   23698:	1023883a 	mov	r17,r2
   2369c:	002d42c0 	call	2d42c <__fixdfsi>
   236a0:	1009883a 	mov	r4,r2
   236a4:	1029883a 	mov	r20,r2
   236a8:	002d4ac0 	call	2d4ac <__floatsidf>
   236ac:	8809883a 	mov	r4,r17
   236b0:	800b883a 	mov	r5,r16
   236b4:	100d883a 	mov	r6,r2
   236b8:	180f883a 	mov	r7,r3
   236bc:	002cb300 	call	2cb30 <__subdf3>
   236c0:	a5000c04 	addi	r20,r20,48
   236c4:	a80d883a 	mov	r6,r21
   236c8:	980f883a 	mov	r7,r19
   236cc:	1009883a 	mov	r4,r2
   236d0:	180b883a 	mov	r5,r3
   236d4:	95000005 	stb	r20,0(r18)
   236d8:	1021883a 	mov	r16,r2
   236dc:	1823883a 	mov	r17,r3
   236e0:	002c1d00 	call	2c1d0 <__ledf2>
   236e4:	bdc00044 	addi	r23,r23,1
   236e8:	800d883a 	mov	r6,r16
   236ec:	880f883a 	mov	r7,r17
   236f0:	0009883a 	mov	r4,zero
   236f4:	014ffc34 	movhi	r5,16368
   236f8:	103fcf0e 	bge	r2,zero,23638 <__alt_data_end+0xfffe3638>
   236fc:	d8c01317 	ldw	r3,76(sp)
   23700:	d8c00515 	stw	r3,20(sp)
   23704:	d9400917 	ldw	r5,36(sp)
   23708:	e009883a 	mov	r4,fp
   2370c:	00267bc0 	call	267bc <_Bfree>
   23710:	d9000517 	ldw	r4,20(sp)
   23714:	d9802317 	ldw	r6,140(sp)
   23718:	d9c02517 	ldw	r7,148(sp)
   2371c:	b8000005 	stb	zero,0(r23)
   23720:	20800044 	addi	r2,r4,1
   23724:	30800015 	stw	r2,0(r6)
   23728:	3802aa26 	beq	r7,zero,241d4 <_dtoa_r+0x1178>
   2372c:	3dc00015 	stw	r23,0(r7)
   23730:	d8800717 	ldw	r2,28(sp)
   23734:	003e7906 	br	2311c <__alt_data_end+0xfffe311c>
   23738:	00800434 	movhi	r2,16
   2373c:	10bfffc4 	addi	r2,r2,-1
   23740:	88a2703a 	and	r17,r17,r2
   23744:	883e851e 	bne	r17,zero,2315c <__alt_data_end+0xfffe315c>
   23748:	008000f4 	movhi	r2,3
   2374c:	108a2404 	addi	r2,r2,10384
   23750:	003e8406 	br	23164 <__alt_data_end+0xfffe3164>
   23754:	10c00204 	addi	r3,r2,8
   23758:	003e8706 	br	23178 <__alt_data_end+0xfffe3178>
   2375c:	01400434 	movhi	r5,16
   23760:	297fffc4 	addi	r5,r5,-1
   23764:	994a703a 	and	r5,r19,r5
   23768:	9009883a 	mov	r4,r18
   2376c:	843f0044 	addi	r16,r16,-1023
   23770:	294ffc34 	orhi	r5,r5,16368
   23774:	dd800217 	ldw	r22,8(sp)
   23778:	d8001115 	stw	zero,68(sp)
   2377c:	003ea506 	br	23214 <__alt_data_end+0xfffe3214>
   23780:	008000f4 	movhi	r2,3
   23784:	108a1b04 	addi	r2,r2,10348
   23788:	003e6406 	br	2311c <__alt_data_end+0xfffe311c>
   2378c:	e0001115 	stw	zero,68(fp)
   23790:	000b883a 	mov	r5,zero
   23794:	e009883a 	mov	r4,fp
   23798:	00267140 	call	26714 <_Balloc>
   2379c:	01bfffc4 	movi	r6,-1
   237a0:	01c00044 	movi	r7,1
   237a4:	d8800715 	stw	r2,28(sp)
   237a8:	d9800c15 	stw	r6,48(sp)
   237ac:	e0801015 	stw	r2,64(fp)
   237b0:	d8000315 	stw	zero,12(sp)
   237b4:	d9c00b15 	stw	r7,44(sp)
   237b8:	d9800615 	stw	r6,24(sp)
   237bc:	d8002215 	stw	zero,136(sp)
   237c0:	d8800117 	ldw	r2,4(sp)
   237c4:	10008916 	blt	r2,zero,239ec <_dtoa_r+0x990>
   237c8:	d9000517 	ldw	r4,20(sp)
   237cc:	00c00384 	movi	r3,14
   237d0:	19008616 	blt	r3,r4,239ec <_dtoa_r+0x990>
   237d4:	200490fa 	slli	r2,r4,3
   237d8:	00c000f4 	movhi	r3,3
   237dc:	d9802217 	ldw	r6,136(sp)
   237e0:	18ca4304 	addi	r3,r3,10508
   237e4:	1885883a 	add	r2,r3,r2
   237e8:	14000017 	ldw	r16,0(r2)
   237ec:	14400117 	ldw	r17,4(r2)
   237f0:	30016316 	blt	r6,zero,23d80 <_dtoa_r+0xd24>
   237f4:	800d883a 	mov	r6,r16
   237f8:	880f883a 	mov	r7,r17
   237fc:	9009883a 	mov	r4,r18
   23800:	980b883a 	mov	r5,r19
   23804:	002b69c0 	call	2b69c <__divdf3>
   23808:	180b883a 	mov	r5,r3
   2380c:	1009883a 	mov	r4,r2
   23810:	002d42c0 	call	2d42c <__fixdfsi>
   23814:	1009883a 	mov	r4,r2
   23818:	102b883a 	mov	r21,r2
   2381c:	002d4ac0 	call	2d4ac <__floatsidf>
   23820:	800d883a 	mov	r6,r16
   23824:	880f883a 	mov	r7,r17
   23828:	1009883a 	mov	r4,r2
   2382c:	180b883a 	mov	r5,r3
   23830:	002c2c40 	call	2c2c4 <__muldf3>
   23834:	100d883a 	mov	r6,r2
   23838:	180f883a 	mov	r7,r3
   2383c:	9009883a 	mov	r4,r18
   23840:	980b883a 	mov	r5,r19
   23844:	002cb300 	call	2cb30 <__subdf3>
   23848:	d9c00717 	ldw	r7,28(sp)
   2384c:	1009883a 	mov	r4,r2
   23850:	a8800c04 	addi	r2,r21,48
   23854:	38800005 	stb	r2,0(r7)
   23858:	3dc00044 	addi	r23,r7,1
   2385c:	d9c00617 	ldw	r7,24(sp)
   23860:	01800044 	movi	r6,1
   23864:	180b883a 	mov	r5,r3
   23868:	2005883a 	mov	r2,r4
   2386c:	39803826 	beq	r7,r6,23950 <_dtoa_r+0x8f4>
   23870:	000d883a 	mov	r6,zero
   23874:	01d00934 	movhi	r7,16420
   23878:	002c2c40 	call	2c2c4 <__muldf3>
   2387c:	000d883a 	mov	r6,zero
   23880:	000f883a 	mov	r7,zero
   23884:	1009883a 	mov	r4,r2
   23888:	180b883a 	mov	r5,r3
   2388c:	1025883a 	mov	r18,r2
   23890:	1827883a 	mov	r19,r3
   23894:	002c06c0 	call	2c06c <__eqdf2>
   23898:	103f9a26 	beq	r2,zero,23704 <__alt_data_end+0xfffe3704>
   2389c:	d9c00617 	ldw	r7,24(sp)
   238a0:	d8c00717 	ldw	r3,28(sp)
   238a4:	b829883a 	mov	r20,r23
   238a8:	38bfffc4 	addi	r2,r7,-1
   238ac:	18ad883a 	add	r22,r3,r2
   238b0:	00000a06 	br	238dc <_dtoa_r+0x880>
   238b4:	002c2c40 	call	2c2c4 <__muldf3>
   238b8:	000d883a 	mov	r6,zero
   238bc:	000f883a 	mov	r7,zero
   238c0:	1009883a 	mov	r4,r2
   238c4:	180b883a 	mov	r5,r3
   238c8:	1025883a 	mov	r18,r2
   238cc:	1827883a 	mov	r19,r3
   238d0:	b829883a 	mov	r20,r23
   238d4:	002c06c0 	call	2c06c <__eqdf2>
   238d8:	103f8a26 	beq	r2,zero,23704 <__alt_data_end+0xfffe3704>
   238dc:	800d883a 	mov	r6,r16
   238e0:	880f883a 	mov	r7,r17
   238e4:	9009883a 	mov	r4,r18
   238e8:	980b883a 	mov	r5,r19
   238ec:	002b69c0 	call	2b69c <__divdf3>
   238f0:	180b883a 	mov	r5,r3
   238f4:	1009883a 	mov	r4,r2
   238f8:	002d42c0 	call	2d42c <__fixdfsi>
   238fc:	1009883a 	mov	r4,r2
   23900:	102b883a 	mov	r21,r2
   23904:	002d4ac0 	call	2d4ac <__floatsidf>
   23908:	800d883a 	mov	r6,r16
   2390c:	880f883a 	mov	r7,r17
   23910:	1009883a 	mov	r4,r2
   23914:	180b883a 	mov	r5,r3
   23918:	002c2c40 	call	2c2c4 <__muldf3>
   2391c:	100d883a 	mov	r6,r2
   23920:	180f883a 	mov	r7,r3
   23924:	9009883a 	mov	r4,r18
   23928:	980b883a 	mov	r5,r19
   2392c:	002cb300 	call	2cb30 <__subdf3>
   23930:	aa000c04 	addi	r8,r21,48
   23934:	a2000005 	stb	r8,0(r20)
   23938:	000d883a 	mov	r6,zero
   2393c:	01d00934 	movhi	r7,16420
   23940:	1009883a 	mov	r4,r2
   23944:	180b883a 	mov	r5,r3
   23948:	a5c00044 	addi	r23,r20,1
   2394c:	b53fd91e 	bne	r22,r20,238b4 <__alt_data_end+0xfffe38b4>
   23950:	100d883a 	mov	r6,r2
   23954:	180f883a 	mov	r7,r3
   23958:	1009883a 	mov	r4,r2
   2395c:	180b883a 	mov	r5,r3
   23960:	002adf00 	call	2adf0 <__adddf3>
   23964:	100d883a 	mov	r6,r2
   23968:	180f883a 	mov	r7,r3
   2396c:	8009883a 	mov	r4,r16
   23970:	880b883a 	mov	r5,r17
   23974:	1027883a 	mov	r19,r2
   23978:	1825883a 	mov	r18,r3
   2397c:	002c1d00 	call	2c1d0 <__ledf2>
   23980:	10000816 	blt	r2,zero,239a4 <_dtoa_r+0x948>
   23984:	980d883a 	mov	r6,r19
   23988:	900f883a 	mov	r7,r18
   2398c:	8009883a 	mov	r4,r16
   23990:	880b883a 	mov	r5,r17
   23994:	002c06c0 	call	2c06c <__eqdf2>
   23998:	103f5a1e 	bne	r2,zero,23704 <__alt_data_end+0xfffe3704>
   2399c:	ad40004c 	andi	r21,r21,1
   239a0:	a83f5826 	beq	r21,zero,23704 <__alt_data_end+0xfffe3704>
   239a4:	bd3fffc3 	ldbu	r20,-1(r23)
   239a8:	b8bfffc4 	addi	r2,r23,-1
   239ac:	1007883a 	mov	r3,r2
   239b0:	01400e44 	movi	r5,57
   239b4:	d9800717 	ldw	r6,28(sp)
   239b8:	00000506 	br	239d0 <_dtoa_r+0x974>
   239bc:	18ffffc4 	addi	r3,r3,-1
   239c0:	11824726 	beq	r2,r6,242e0 <_dtoa_r+0x1284>
   239c4:	1d000003 	ldbu	r20,0(r3)
   239c8:	102f883a 	mov	r23,r2
   239cc:	10bfffc4 	addi	r2,r2,-1
   239d0:	a1003fcc 	andi	r4,r20,255
   239d4:	2100201c 	xori	r4,r4,128
   239d8:	213fe004 	addi	r4,r4,-128
   239dc:	217ff726 	beq	r4,r5,239bc <__alt_data_end+0xfffe39bc>
   239e0:	a2000044 	addi	r8,r20,1
   239e4:	12000005 	stb	r8,0(r2)
   239e8:	003f4606 	br	23704 <__alt_data_end+0xfffe3704>
   239ec:	d9000b17 	ldw	r4,44(sp)
   239f0:	2000c826 	beq	r4,zero,23d14 <_dtoa_r+0xcb8>
   239f4:	d9800317 	ldw	r6,12(sp)
   239f8:	00c00044 	movi	r3,1
   239fc:	1980f90e 	bge	r3,r6,23de4 <_dtoa_r+0xd88>
   23a00:	d8800617 	ldw	r2,24(sp)
   23a04:	d8c00a17 	ldw	r3,40(sp)
   23a08:	157fffc4 	addi	r21,r2,-1
   23a0c:	1d41f316 	blt	r3,r21,241dc <_dtoa_r+0x1180>
   23a10:	1d6bc83a 	sub	r21,r3,r21
   23a14:	d9c00617 	ldw	r7,24(sp)
   23a18:	3802aa16 	blt	r7,zero,244c4 <_dtoa_r+0x1468>
   23a1c:	dd000817 	ldw	r20,32(sp)
   23a20:	d8800617 	ldw	r2,24(sp)
   23a24:	d8c00817 	ldw	r3,32(sp)
   23a28:	01400044 	movi	r5,1
   23a2c:	e009883a 	mov	r4,fp
   23a30:	1887883a 	add	r3,r3,r2
   23a34:	d8c00815 	stw	r3,32(sp)
   23a38:	b0ad883a 	add	r22,r22,r2
   23a3c:	0026b480 	call	26b48 <__i2b>
   23a40:	1023883a 	mov	r17,r2
   23a44:	a0000826 	beq	r20,zero,23a68 <_dtoa_r+0xa0c>
   23a48:	0580070e 	bge	zero,r22,23a68 <_dtoa_r+0xa0c>
   23a4c:	a005883a 	mov	r2,r20
   23a50:	b500b916 	blt	r22,r20,23d38 <_dtoa_r+0xcdc>
   23a54:	d9000817 	ldw	r4,32(sp)
   23a58:	a0a9c83a 	sub	r20,r20,r2
   23a5c:	b0adc83a 	sub	r22,r22,r2
   23a60:	2089c83a 	sub	r4,r4,r2
   23a64:	d9000815 	stw	r4,32(sp)
   23a68:	d9800a17 	ldw	r6,40(sp)
   23a6c:	0181810e 	bge	zero,r6,24074 <_dtoa_r+0x1018>
   23a70:	d9c00b17 	ldw	r7,44(sp)
   23a74:	3800b326 	beq	r7,zero,23d44 <_dtoa_r+0xce8>
   23a78:	a800b226 	beq	r21,zero,23d44 <_dtoa_r+0xce8>
   23a7c:	880b883a 	mov	r5,r17
   23a80:	a80d883a 	mov	r6,r21
   23a84:	e009883a 	mov	r4,fp
   23a88:	0026e100 	call	26e10 <__pow5mult>
   23a8c:	d9800917 	ldw	r6,36(sp)
   23a90:	100b883a 	mov	r5,r2
   23a94:	e009883a 	mov	r4,fp
   23a98:	1023883a 	mov	r17,r2
   23a9c:	0026b840 	call	26b84 <__multiply>
   23aa0:	1021883a 	mov	r16,r2
   23aa4:	d8800a17 	ldw	r2,40(sp)
   23aa8:	d9400917 	ldw	r5,36(sp)
   23aac:	e009883a 	mov	r4,fp
   23ab0:	1545c83a 	sub	r2,r2,r21
   23ab4:	d8800a15 	stw	r2,40(sp)
   23ab8:	00267bc0 	call	267bc <_Bfree>
   23abc:	d8c00a17 	ldw	r3,40(sp)
   23ac0:	18009f1e 	bne	r3,zero,23d40 <_dtoa_r+0xce4>
   23ac4:	05c00044 	movi	r23,1
   23ac8:	e009883a 	mov	r4,fp
   23acc:	b80b883a 	mov	r5,r23
   23ad0:	0026b480 	call	26b48 <__i2b>
   23ad4:	d9000d17 	ldw	r4,52(sp)
   23ad8:	102b883a 	mov	r21,r2
   23adc:	2000ce26 	beq	r4,zero,23e18 <_dtoa_r+0xdbc>
   23ae0:	200d883a 	mov	r6,r4
   23ae4:	100b883a 	mov	r5,r2
   23ae8:	e009883a 	mov	r4,fp
   23aec:	0026e100 	call	26e10 <__pow5mult>
   23af0:	d9800317 	ldw	r6,12(sp)
   23af4:	102b883a 	mov	r21,r2
   23af8:	b981810e 	bge	r23,r6,24100 <_dtoa_r+0x10a4>
   23afc:	0027883a 	mov	r19,zero
   23b00:	a8800417 	ldw	r2,16(r21)
   23b04:	05c00804 	movi	r23,32
   23b08:	10800104 	addi	r2,r2,4
   23b0c:	1085883a 	add	r2,r2,r2
   23b10:	1085883a 	add	r2,r2,r2
   23b14:	a885883a 	add	r2,r21,r2
   23b18:	11000017 	ldw	r4,0(r2)
   23b1c:	0026a300 	call	26a30 <__hi0bits>
   23b20:	b885c83a 	sub	r2,r23,r2
   23b24:	1585883a 	add	r2,r2,r22
   23b28:	108007cc 	andi	r2,r2,31
   23b2c:	1000b326 	beq	r2,zero,23dfc <_dtoa_r+0xda0>
   23b30:	00c00804 	movi	r3,32
   23b34:	1887c83a 	sub	r3,r3,r2
   23b38:	01000104 	movi	r4,4
   23b3c:	20c2cd0e 	bge	r4,r3,24674 <_dtoa_r+0x1618>
   23b40:	00c00704 	movi	r3,28
   23b44:	1885c83a 	sub	r2,r3,r2
   23b48:	d8c00817 	ldw	r3,32(sp)
   23b4c:	a0a9883a 	add	r20,r20,r2
   23b50:	b0ad883a 	add	r22,r22,r2
   23b54:	1887883a 	add	r3,r3,r2
   23b58:	d8c00815 	stw	r3,32(sp)
   23b5c:	d9800817 	ldw	r6,32(sp)
   23b60:	0180040e 	bge	zero,r6,23b74 <_dtoa_r+0xb18>
   23b64:	800b883a 	mov	r5,r16
   23b68:	e009883a 	mov	r4,fp
   23b6c:	0026f500 	call	26f50 <__lshift>
   23b70:	1021883a 	mov	r16,r2
   23b74:	0580050e 	bge	zero,r22,23b8c <_dtoa_r+0xb30>
   23b78:	a80b883a 	mov	r5,r21
   23b7c:	b00d883a 	mov	r6,r22
   23b80:	e009883a 	mov	r4,fp
   23b84:	0026f500 	call	26f50 <__lshift>
   23b88:	102b883a 	mov	r21,r2
   23b8c:	d9c00e17 	ldw	r7,56(sp)
   23b90:	3801211e 	bne	r7,zero,24018 <_dtoa_r+0xfbc>
   23b94:	d9800617 	ldw	r6,24(sp)
   23b98:	0181380e 	bge	zero,r6,2407c <_dtoa_r+0x1020>
   23b9c:	d8c00b17 	ldw	r3,44(sp)
   23ba0:	1800ab1e 	bne	r3,zero,23e50 <_dtoa_r+0xdf4>
   23ba4:	dc800717 	ldw	r18,28(sp)
   23ba8:	dcc00617 	ldw	r19,24(sp)
   23bac:	9029883a 	mov	r20,r18
   23bb0:	00000206 	br	23bbc <_dtoa_r+0xb60>
   23bb4:	00267e40 	call	267e4 <__multadd>
   23bb8:	1021883a 	mov	r16,r2
   23bbc:	a80b883a 	mov	r5,r21
   23bc0:	8009883a 	mov	r4,r16
   23bc4:	0022e340 	call	22e34 <quorem>
   23bc8:	10800c04 	addi	r2,r2,48
   23bcc:	90800005 	stb	r2,0(r18)
   23bd0:	94800044 	addi	r18,r18,1
   23bd4:	9507c83a 	sub	r3,r18,r20
   23bd8:	000f883a 	mov	r7,zero
   23bdc:	01800284 	movi	r6,10
   23be0:	800b883a 	mov	r5,r16
   23be4:	e009883a 	mov	r4,fp
   23be8:	1cfff216 	blt	r3,r19,23bb4 <__alt_data_end+0xfffe3bb4>
   23bec:	1011883a 	mov	r8,r2
   23bf0:	d8800617 	ldw	r2,24(sp)
   23bf4:	0082370e 	bge	zero,r2,244d4 <_dtoa_r+0x1478>
   23bf8:	d9000717 	ldw	r4,28(sp)
   23bfc:	0025883a 	mov	r18,zero
   23c00:	20af883a 	add	r23,r4,r2
   23c04:	01800044 	movi	r6,1
   23c08:	800b883a 	mov	r5,r16
   23c0c:	e009883a 	mov	r4,fp
   23c10:	da001715 	stw	r8,92(sp)
   23c14:	0026f500 	call	26f50 <__lshift>
   23c18:	a80b883a 	mov	r5,r21
   23c1c:	1009883a 	mov	r4,r2
   23c20:	d8800915 	stw	r2,36(sp)
   23c24:	00270980 	call	27098 <__mcmp>
   23c28:	da001717 	ldw	r8,92(sp)
   23c2c:	0081800e 	bge	zero,r2,24230 <_dtoa_r+0x11d4>
   23c30:	b93fffc3 	ldbu	r4,-1(r23)
   23c34:	b8bfffc4 	addi	r2,r23,-1
   23c38:	1007883a 	mov	r3,r2
   23c3c:	01800e44 	movi	r6,57
   23c40:	d9c00717 	ldw	r7,28(sp)
   23c44:	00000506 	br	23c5c <_dtoa_r+0xc00>
   23c48:	18ffffc4 	addi	r3,r3,-1
   23c4c:	11c12326 	beq	r2,r7,240dc <_dtoa_r+0x1080>
   23c50:	19000003 	ldbu	r4,0(r3)
   23c54:	102f883a 	mov	r23,r2
   23c58:	10bfffc4 	addi	r2,r2,-1
   23c5c:	21403fcc 	andi	r5,r4,255
   23c60:	2940201c 	xori	r5,r5,128
   23c64:	297fe004 	addi	r5,r5,-128
   23c68:	29bff726 	beq	r5,r6,23c48 <__alt_data_end+0xfffe3c48>
   23c6c:	21000044 	addi	r4,r4,1
   23c70:	11000005 	stb	r4,0(r2)
   23c74:	a80b883a 	mov	r5,r21
   23c78:	e009883a 	mov	r4,fp
   23c7c:	00267bc0 	call	267bc <_Bfree>
   23c80:	883ea026 	beq	r17,zero,23704 <__alt_data_end+0xfffe3704>
   23c84:	90000426 	beq	r18,zero,23c98 <_dtoa_r+0xc3c>
   23c88:	94400326 	beq	r18,r17,23c98 <_dtoa_r+0xc3c>
   23c8c:	900b883a 	mov	r5,r18
   23c90:	e009883a 	mov	r4,fp
   23c94:	00267bc0 	call	267bc <_Bfree>
   23c98:	880b883a 	mov	r5,r17
   23c9c:	e009883a 	mov	r4,fp
   23ca0:	00267bc0 	call	267bc <_Bfree>
   23ca4:	003e9706 	br	23704 <__alt_data_end+0xfffe3704>
   23ca8:	01800044 	movi	r6,1
   23cac:	d9800e15 	stw	r6,56(sp)
   23cb0:	003d9606 	br	2330c <__alt_data_end+0xfffe330c>
   23cb4:	d8800817 	ldw	r2,32(sp)
   23cb8:	d8c00517 	ldw	r3,20(sp)
   23cbc:	d8000d15 	stw	zero,52(sp)
   23cc0:	10c5c83a 	sub	r2,r2,r3
   23cc4:	00c9c83a 	sub	r4,zero,r3
   23cc8:	d8800815 	stw	r2,32(sp)
   23ccc:	d9000a15 	stw	r4,40(sp)
   23cd0:	003d9706 	br	23330 <__alt_data_end+0xfffe3330>
   23cd4:	05adc83a 	sub	r22,zero,r22
   23cd8:	dd800815 	stw	r22,32(sp)
   23cdc:	002d883a 	mov	r22,zero
   23ce0:	003d8e06 	br	2331c <__alt_data_end+0xfffe331c>
   23ce4:	d9000517 	ldw	r4,20(sp)
   23ce8:	002d4ac0 	call	2d4ac <__floatsidf>
   23cec:	100d883a 	mov	r6,r2
   23cf0:	180f883a 	mov	r7,r3
   23cf4:	a009883a 	mov	r4,r20
   23cf8:	880b883a 	mov	r5,r17
   23cfc:	002c06c0 	call	2c06c <__eqdf2>
   23d00:	103d7126 	beq	r2,zero,232c8 <__alt_data_end+0xfffe32c8>
   23d04:	d9c00517 	ldw	r7,20(sp)
   23d08:	39ffffc4 	addi	r7,r7,-1
   23d0c:	d9c00515 	stw	r7,20(sp)
   23d10:	003d6d06 	br	232c8 <__alt_data_end+0xfffe32c8>
   23d14:	dd400a17 	ldw	r21,40(sp)
   23d18:	dd000817 	ldw	r20,32(sp)
   23d1c:	0023883a 	mov	r17,zero
   23d20:	003f4806 	br	23a44 <__alt_data_end+0xfffe3a44>
   23d24:	10e3c83a 	sub	r17,r2,r3
   23d28:	9448983a 	sll	r4,r18,r17
   23d2c:	003d3206 	br	231f8 <__alt_data_end+0xfffe31f8>
   23d30:	d8000e15 	stw	zero,56(sp)
   23d34:	003d7506 	br	2330c <__alt_data_end+0xfffe330c>
   23d38:	b005883a 	mov	r2,r22
   23d3c:	003f4506 	br	23a54 <__alt_data_end+0xfffe3a54>
   23d40:	dc000915 	stw	r16,36(sp)
   23d44:	d9800a17 	ldw	r6,40(sp)
   23d48:	d9400917 	ldw	r5,36(sp)
   23d4c:	e009883a 	mov	r4,fp
   23d50:	0026e100 	call	26e10 <__pow5mult>
   23d54:	1021883a 	mov	r16,r2
   23d58:	003f5a06 	br	23ac4 <__alt_data_end+0xfffe3ac4>
   23d5c:	01c00044 	movi	r7,1
   23d60:	d9c00b15 	stw	r7,44(sp)
   23d64:	d8802217 	ldw	r2,136(sp)
   23d68:	0081280e 	bge	zero,r2,2420c <_dtoa_r+0x11b0>
   23d6c:	100d883a 	mov	r6,r2
   23d70:	1021883a 	mov	r16,r2
   23d74:	d8800c15 	stw	r2,48(sp)
   23d78:	d8800615 	stw	r2,24(sp)
   23d7c:	003d8806 	br	233a0 <__alt_data_end+0xfffe33a0>
   23d80:	d8800617 	ldw	r2,24(sp)
   23d84:	00be9b16 	blt	zero,r2,237f4 <__alt_data_end+0xfffe37f4>
   23d88:	10010f1e 	bne	r2,zero,241c8 <_dtoa_r+0x116c>
   23d8c:	880b883a 	mov	r5,r17
   23d90:	000d883a 	mov	r6,zero
   23d94:	01d00534 	movhi	r7,16404
   23d98:	8009883a 	mov	r4,r16
   23d9c:	002c2c40 	call	2c2c4 <__muldf3>
   23da0:	900d883a 	mov	r6,r18
   23da4:	980f883a 	mov	r7,r19
   23da8:	1009883a 	mov	r4,r2
   23dac:	180b883a 	mov	r5,r3
   23db0:	002c0f40 	call	2c0f4 <__gedf2>
   23db4:	002b883a 	mov	r21,zero
   23db8:	0023883a 	mov	r17,zero
   23dbc:	1000bf16 	blt	r2,zero,240bc <_dtoa_r+0x1060>
   23dc0:	d9802217 	ldw	r6,136(sp)
   23dc4:	ddc00717 	ldw	r23,28(sp)
   23dc8:	018c303a 	nor	r6,zero,r6
   23dcc:	d9800515 	stw	r6,20(sp)
   23dd0:	a80b883a 	mov	r5,r21
   23dd4:	e009883a 	mov	r4,fp
   23dd8:	00267bc0 	call	267bc <_Bfree>
   23ddc:	883e4926 	beq	r17,zero,23704 <__alt_data_end+0xfffe3704>
   23de0:	003fad06 	br	23c98 <__alt_data_end+0xfffe3c98>
   23de4:	d9c01117 	ldw	r7,68(sp)
   23de8:	3801bc26 	beq	r7,zero,244dc <_dtoa_r+0x1480>
   23dec:	10810cc4 	addi	r2,r2,1075
   23df0:	dd400a17 	ldw	r21,40(sp)
   23df4:	dd000817 	ldw	r20,32(sp)
   23df8:	003f0a06 	br	23a24 <__alt_data_end+0xfffe3a24>
   23dfc:	00800704 	movi	r2,28
   23e00:	d9000817 	ldw	r4,32(sp)
   23e04:	a0a9883a 	add	r20,r20,r2
   23e08:	b0ad883a 	add	r22,r22,r2
   23e0c:	2089883a 	add	r4,r4,r2
   23e10:	d9000815 	stw	r4,32(sp)
   23e14:	003f5106 	br	23b5c <__alt_data_end+0xfffe3b5c>
   23e18:	d8c00317 	ldw	r3,12(sp)
   23e1c:	b8c1fc0e 	bge	r23,r3,24610 <_dtoa_r+0x15b4>
   23e20:	0027883a 	mov	r19,zero
   23e24:	b805883a 	mov	r2,r23
   23e28:	003f3e06 	br	23b24 <__alt_data_end+0xfffe3b24>
   23e2c:	880b883a 	mov	r5,r17
   23e30:	e009883a 	mov	r4,fp
   23e34:	000f883a 	mov	r7,zero
   23e38:	01800284 	movi	r6,10
   23e3c:	00267e40 	call	267e4 <__multadd>
   23e40:	d9000c17 	ldw	r4,48(sp)
   23e44:	1023883a 	mov	r17,r2
   23e48:	0102040e 	bge	zero,r4,2465c <_dtoa_r+0x1600>
   23e4c:	d9000615 	stw	r4,24(sp)
   23e50:	0500050e 	bge	zero,r20,23e68 <_dtoa_r+0xe0c>
   23e54:	880b883a 	mov	r5,r17
   23e58:	a00d883a 	mov	r6,r20
   23e5c:	e009883a 	mov	r4,fp
   23e60:	0026f500 	call	26f50 <__lshift>
   23e64:	1023883a 	mov	r17,r2
   23e68:	9801241e 	bne	r19,zero,242fc <_dtoa_r+0x12a0>
   23e6c:	8829883a 	mov	r20,r17
   23e70:	d9000617 	ldw	r4,24(sp)
   23e74:	dcc00717 	ldw	r19,28(sp)
   23e78:	9480004c 	andi	r18,r18,1
   23e7c:	20bfffc4 	addi	r2,r4,-1
   23e80:	9885883a 	add	r2,r19,r2
   23e84:	d8800415 	stw	r2,16(sp)
   23e88:	dc800615 	stw	r18,24(sp)
   23e8c:	a80b883a 	mov	r5,r21
   23e90:	8009883a 	mov	r4,r16
   23e94:	0022e340 	call	22e34 <quorem>
   23e98:	880b883a 	mov	r5,r17
   23e9c:	8009883a 	mov	r4,r16
   23ea0:	102f883a 	mov	r23,r2
   23ea4:	00270980 	call	27098 <__mcmp>
   23ea8:	a80b883a 	mov	r5,r21
   23eac:	a00d883a 	mov	r6,r20
   23eb0:	e009883a 	mov	r4,fp
   23eb4:	102d883a 	mov	r22,r2
   23eb8:	00270f80 	call	270f8 <__mdiff>
   23ebc:	1007883a 	mov	r3,r2
   23ec0:	10800317 	ldw	r2,12(r2)
   23ec4:	bc800c04 	addi	r18,r23,48
   23ec8:	180b883a 	mov	r5,r3
   23ecc:	10004e1e 	bne	r2,zero,24008 <_dtoa_r+0xfac>
   23ed0:	8009883a 	mov	r4,r16
   23ed4:	d8c01615 	stw	r3,88(sp)
   23ed8:	00270980 	call	27098 <__mcmp>
   23edc:	d8c01617 	ldw	r3,88(sp)
   23ee0:	e009883a 	mov	r4,fp
   23ee4:	d8801615 	stw	r2,88(sp)
   23ee8:	180b883a 	mov	r5,r3
   23eec:	00267bc0 	call	267bc <_Bfree>
   23ef0:	d8801617 	ldw	r2,88(sp)
   23ef4:	1000041e 	bne	r2,zero,23f08 <_dtoa_r+0xeac>
   23ef8:	d9800317 	ldw	r6,12(sp)
   23efc:	3000021e 	bne	r6,zero,23f08 <_dtoa_r+0xeac>
   23f00:	d8c00617 	ldw	r3,24(sp)
   23f04:	18003726 	beq	r3,zero,23fe4 <_dtoa_r+0xf88>
   23f08:	b0002016 	blt	r22,zero,23f8c <_dtoa_r+0xf30>
   23f0c:	b000041e 	bne	r22,zero,23f20 <_dtoa_r+0xec4>
   23f10:	d9000317 	ldw	r4,12(sp)
   23f14:	2000021e 	bne	r4,zero,23f20 <_dtoa_r+0xec4>
   23f18:	d8c00617 	ldw	r3,24(sp)
   23f1c:	18001b26 	beq	r3,zero,23f8c <_dtoa_r+0xf30>
   23f20:	00810716 	blt	zero,r2,24340 <_dtoa_r+0x12e4>
   23f24:	d8c00417 	ldw	r3,16(sp)
   23f28:	9d800044 	addi	r22,r19,1
   23f2c:	9c800005 	stb	r18,0(r19)
   23f30:	b02f883a 	mov	r23,r22
   23f34:	98c10626 	beq	r19,r3,24350 <_dtoa_r+0x12f4>
   23f38:	800b883a 	mov	r5,r16
   23f3c:	000f883a 	mov	r7,zero
   23f40:	01800284 	movi	r6,10
   23f44:	e009883a 	mov	r4,fp
   23f48:	00267e40 	call	267e4 <__multadd>
   23f4c:	1021883a 	mov	r16,r2
   23f50:	000f883a 	mov	r7,zero
   23f54:	01800284 	movi	r6,10
   23f58:	880b883a 	mov	r5,r17
   23f5c:	e009883a 	mov	r4,fp
   23f60:	8d002526 	beq	r17,r20,23ff8 <_dtoa_r+0xf9c>
   23f64:	00267e40 	call	267e4 <__multadd>
   23f68:	a00b883a 	mov	r5,r20
   23f6c:	000f883a 	mov	r7,zero
   23f70:	01800284 	movi	r6,10
   23f74:	e009883a 	mov	r4,fp
   23f78:	1023883a 	mov	r17,r2
   23f7c:	00267e40 	call	267e4 <__multadd>
   23f80:	1029883a 	mov	r20,r2
   23f84:	b027883a 	mov	r19,r22
   23f88:	003fc006 	br	23e8c <__alt_data_end+0xfffe3e8c>
   23f8c:	9011883a 	mov	r8,r18
   23f90:	00800e0e 	bge	zero,r2,23fcc <_dtoa_r+0xf70>
   23f94:	800b883a 	mov	r5,r16
   23f98:	01800044 	movi	r6,1
   23f9c:	e009883a 	mov	r4,fp
   23fa0:	da001715 	stw	r8,92(sp)
   23fa4:	0026f500 	call	26f50 <__lshift>
   23fa8:	a80b883a 	mov	r5,r21
   23fac:	1009883a 	mov	r4,r2
   23fb0:	1021883a 	mov	r16,r2
   23fb4:	00270980 	call	27098 <__mcmp>
   23fb8:	da001717 	ldw	r8,92(sp)
   23fbc:	0081960e 	bge	zero,r2,24618 <_dtoa_r+0x15bc>
   23fc0:	00800e44 	movi	r2,57
   23fc4:	40817026 	beq	r8,r2,24588 <_dtoa_r+0x152c>
   23fc8:	ba000c44 	addi	r8,r23,49
   23fcc:	8825883a 	mov	r18,r17
   23fd0:	9dc00044 	addi	r23,r19,1
   23fd4:	9a000005 	stb	r8,0(r19)
   23fd8:	a023883a 	mov	r17,r20
   23fdc:	dc000915 	stw	r16,36(sp)
   23fe0:	003f2406 	br	23c74 <__alt_data_end+0xfffe3c74>
   23fe4:	00800e44 	movi	r2,57
   23fe8:	9011883a 	mov	r8,r18
   23fec:	90816626 	beq	r18,r2,24588 <_dtoa_r+0x152c>
   23ff0:	05bff516 	blt	zero,r22,23fc8 <__alt_data_end+0xfffe3fc8>
   23ff4:	003ff506 	br	23fcc <__alt_data_end+0xfffe3fcc>
   23ff8:	00267e40 	call	267e4 <__multadd>
   23ffc:	1023883a 	mov	r17,r2
   24000:	1029883a 	mov	r20,r2
   24004:	003fdf06 	br	23f84 <__alt_data_end+0xfffe3f84>
   24008:	e009883a 	mov	r4,fp
   2400c:	00267bc0 	call	267bc <_Bfree>
   24010:	00800044 	movi	r2,1
   24014:	003fbc06 	br	23f08 <__alt_data_end+0xfffe3f08>
   24018:	a80b883a 	mov	r5,r21
   2401c:	8009883a 	mov	r4,r16
   24020:	00270980 	call	27098 <__mcmp>
   24024:	103edb0e 	bge	r2,zero,23b94 <__alt_data_end+0xfffe3b94>
   24028:	800b883a 	mov	r5,r16
   2402c:	000f883a 	mov	r7,zero
   24030:	01800284 	movi	r6,10
   24034:	e009883a 	mov	r4,fp
   24038:	00267e40 	call	267e4 <__multadd>
   2403c:	1021883a 	mov	r16,r2
   24040:	d8800517 	ldw	r2,20(sp)
   24044:	d8c00b17 	ldw	r3,44(sp)
   24048:	10bfffc4 	addi	r2,r2,-1
   2404c:	d8800515 	stw	r2,20(sp)
   24050:	183f761e 	bne	r3,zero,23e2c <__alt_data_end+0xfffe3e2c>
   24054:	d9000c17 	ldw	r4,48(sp)
   24058:	0101730e 	bge	zero,r4,24628 <_dtoa_r+0x15cc>
   2405c:	d9000615 	stw	r4,24(sp)
   24060:	003ed006 	br	23ba4 <__alt_data_end+0xfffe3ba4>
   24064:	00800084 	movi	r2,2
   24068:	3081861e 	bne	r6,r2,24684 <_dtoa_r+0x1628>
   2406c:	d8000b15 	stw	zero,44(sp)
   24070:	003f3c06 	br	23d64 <__alt_data_end+0xfffe3d64>
   24074:	dc000917 	ldw	r16,36(sp)
   24078:	003e9206 	br	23ac4 <__alt_data_end+0xfffe3ac4>
   2407c:	d9c00317 	ldw	r7,12(sp)
   24080:	00800084 	movi	r2,2
   24084:	11fec50e 	bge	r2,r7,23b9c <__alt_data_end+0xfffe3b9c>
   24088:	d9000617 	ldw	r4,24(sp)
   2408c:	20013c1e 	bne	r4,zero,24580 <_dtoa_r+0x1524>
   24090:	a80b883a 	mov	r5,r21
   24094:	000f883a 	mov	r7,zero
   24098:	01800144 	movi	r6,5
   2409c:	e009883a 	mov	r4,fp
   240a0:	00267e40 	call	267e4 <__multadd>
   240a4:	100b883a 	mov	r5,r2
   240a8:	8009883a 	mov	r4,r16
   240ac:	102b883a 	mov	r21,r2
   240b0:	00270980 	call	27098 <__mcmp>
   240b4:	dc000915 	stw	r16,36(sp)
   240b8:	00bf410e 	bge	zero,r2,23dc0 <__alt_data_end+0xfffe3dc0>
   240bc:	d9c00717 	ldw	r7,28(sp)
   240c0:	00800c44 	movi	r2,49
   240c4:	38800005 	stb	r2,0(r7)
   240c8:	d8800517 	ldw	r2,20(sp)
   240cc:	3dc00044 	addi	r23,r7,1
   240d0:	10800044 	addi	r2,r2,1
   240d4:	d8800515 	stw	r2,20(sp)
   240d8:	003f3d06 	br	23dd0 <__alt_data_end+0xfffe3dd0>
   240dc:	d9800517 	ldw	r6,20(sp)
   240e0:	d9c00717 	ldw	r7,28(sp)
   240e4:	00800c44 	movi	r2,49
   240e8:	31800044 	addi	r6,r6,1
   240ec:	d9800515 	stw	r6,20(sp)
   240f0:	38800005 	stb	r2,0(r7)
   240f4:	003edf06 	br	23c74 <__alt_data_end+0xfffe3c74>
   240f8:	d8000b15 	stw	zero,44(sp)
   240fc:	003c9f06 	br	2337c <__alt_data_end+0xfffe337c>
   24100:	903e7e1e 	bne	r18,zero,23afc <__alt_data_end+0xfffe3afc>
   24104:	00800434 	movhi	r2,16
   24108:	10bfffc4 	addi	r2,r2,-1
   2410c:	9884703a 	and	r2,r19,r2
   24110:	1000ea1e 	bne	r2,zero,244bc <_dtoa_r+0x1460>
   24114:	9cdffc2c 	andhi	r19,r19,32752
   24118:	9800e826 	beq	r19,zero,244bc <_dtoa_r+0x1460>
   2411c:	d9c00817 	ldw	r7,32(sp)
   24120:	b5800044 	addi	r22,r22,1
   24124:	04c00044 	movi	r19,1
   24128:	39c00044 	addi	r7,r7,1
   2412c:	d9c00815 	stw	r7,32(sp)
   24130:	d8800d17 	ldw	r2,52(sp)
   24134:	103e721e 	bne	r2,zero,23b00 <__alt_data_end+0xfffe3b00>
   24138:	00800044 	movi	r2,1
   2413c:	003e7906 	br	23b24 <__alt_data_end+0xfffe3b24>
   24140:	8009883a 	mov	r4,r16
   24144:	002d4ac0 	call	2d4ac <__floatsidf>
   24148:	d9800f17 	ldw	r6,60(sp)
   2414c:	d9c01017 	ldw	r7,64(sp)
   24150:	1009883a 	mov	r4,r2
   24154:	180b883a 	mov	r5,r3
   24158:	002c2c40 	call	2c2c4 <__muldf3>
   2415c:	000d883a 	mov	r6,zero
   24160:	01d00734 	movhi	r7,16412
   24164:	1009883a 	mov	r4,r2
   24168:	180b883a 	mov	r5,r3
   2416c:	002adf00 	call	2adf0 <__adddf3>
   24170:	047f3034 	movhi	r17,64704
   24174:	1021883a 	mov	r16,r2
   24178:	1c63883a 	add	r17,r3,r17
   2417c:	d9000f17 	ldw	r4,60(sp)
   24180:	d9401017 	ldw	r5,64(sp)
   24184:	000d883a 	mov	r6,zero
   24188:	01d00534 	movhi	r7,16404
   2418c:	002cb300 	call	2cb30 <__subdf3>
   24190:	800d883a 	mov	r6,r16
   24194:	880f883a 	mov	r7,r17
   24198:	1009883a 	mov	r4,r2
   2419c:	180b883a 	mov	r5,r3
   241a0:	102b883a 	mov	r21,r2
   241a4:	1829883a 	mov	r20,r3
   241a8:	002c0f40 	call	2c0f4 <__gedf2>
   241ac:	00806c16 	blt	zero,r2,24360 <_dtoa_r+0x1304>
   241b0:	89e0003c 	xorhi	r7,r17,32768
   241b4:	800d883a 	mov	r6,r16
   241b8:	a809883a 	mov	r4,r21
   241bc:	a00b883a 	mov	r5,r20
   241c0:	002c1d00 	call	2c1d0 <__ledf2>
   241c4:	103d7e0e 	bge	r2,zero,237c0 <__alt_data_end+0xfffe37c0>
   241c8:	002b883a 	mov	r21,zero
   241cc:	0023883a 	mov	r17,zero
   241d0:	003efb06 	br	23dc0 <__alt_data_end+0xfffe3dc0>
   241d4:	d8800717 	ldw	r2,28(sp)
   241d8:	003bd006 	br	2311c <__alt_data_end+0xfffe311c>
   241dc:	d9000a17 	ldw	r4,40(sp)
   241e0:	d9800d17 	ldw	r6,52(sp)
   241e4:	dd400a15 	stw	r21,40(sp)
   241e8:	a905c83a 	sub	r2,r21,r4
   241ec:	308d883a 	add	r6,r6,r2
   241f0:	d9800d15 	stw	r6,52(sp)
   241f4:	002b883a 	mov	r21,zero
   241f8:	003e0606 	br	23a14 <__alt_data_end+0xfffe3a14>
   241fc:	9023883a 	mov	r17,r18
   24200:	9829883a 	mov	r20,r19
   24204:	04000084 	movi	r16,2
   24208:	003c9206 	br	23454 <__alt_data_end+0xfffe3454>
   2420c:	04000044 	movi	r16,1
   24210:	dc000c15 	stw	r16,48(sp)
   24214:	dc000615 	stw	r16,24(sp)
   24218:	dc002215 	stw	r16,136(sp)
   2421c:	e0001115 	stw	zero,68(fp)
   24220:	000b883a 	mov	r5,zero
   24224:	003c6906 	br	233cc <__alt_data_end+0xfffe33cc>
   24228:	3021883a 	mov	r16,r6
   2422c:	003ffb06 	br	2421c <__alt_data_end+0xfffe421c>
   24230:	1000021e 	bne	r2,zero,2423c <_dtoa_r+0x11e0>
   24234:	4200004c 	andi	r8,r8,1
   24238:	403e7d1e 	bne	r8,zero,23c30 <__alt_data_end+0xfffe3c30>
   2423c:	01000c04 	movi	r4,48
   24240:	00000106 	br	24248 <_dtoa_r+0x11ec>
   24244:	102f883a 	mov	r23,r2
   24248:	b8bfffc4 	addi	r2,r23,-1
   2424c:	10c00007 	ldb	r3,0(r2)
   24250:	193ffc26 	beq	r3,r4,24244 <__alt_data_end+0xfffe4244>
   24254:	003e8706 	br	23c74 <__alt_data_end+0xfffe3c74>
   24258:	d8800517 	ldw	r2,20(sp)
   2425c:	00a3c83a 	sub	r17,zero,r2
   24260:	8800a426 	beq	r17,zero,244f4 <_dtoa_r+0x1498>
   24264:	888003cc 	andi	r2,r17,15
   24268:	100490fa 	slli	r2,r2,3
   2426c:	00c000f4 	movhi	r3,3
   24270:	18ca4304 	addi	r3,r3,10508
   24274:	1885883a 	add	r2,r3,r2
   24278:	11800017 	ldw	r6,0(r2)
   2427c:	11c00117 	ldw	r7,4(r2)
   24280:	9009883a 	mov	r4,r18
   24284:	980b883a 	mov	r5,r19
   24288:	8823d13a 	srai	r17,r17,4
   2428c:	002c2c40 	call	2c2c4 <__muldf3>
   24290:	d8800f15 	stw	r2,60(sp)
   24294:	d8c01015 	stw	r3,64(sp)
   24298:	8800e826 	beq	r17,zero,2463c <_dtoa_r+0x15e0>
   2429c:	050000f4 	movhi	r20,3
   242a0:	a50a3904 	addi	r20,r20,10468
   242a4:	04000084 	movi	r16,2
   242a8:	8980004c 	andi	r6,r17,1
   242ac:	1009883a 	mov	r4,r2
   242b0:	8823d07a 	srai	r17,r17,1
   242b4:	180b883a 	mov	r5,r3
   242b8:	30000426 	beq	r6,zero,242cc <_dtoa_r+0x1270>
   242bc:	a1800017 	ldw	r6,0(r20)
   242c0:	a1c00117 	ldw	r7,4(r20)
   242c4:	84000044 	addi	r16,r16,1
   242c8:	002c2c40 	call	2c2c4 <__muldf3>
   242cc:	a5000204 	addi	r20,r20,8
   242d0:	883ff51e 	bne	r17,zero,242a8 <__alt_data_end+0xfffe42a8>
   242d4:	d8800f15 	stw	r2,60(sp)
   242d8:	d8c01015 	stw	r3,64(sp)
   242dc:	003c7606 	br	234b8 <__alt_data_end+0xfffe34b8>
   242e0:	00c00c04 	movi	r3,48
   242e4:	10c00005 	stb	r3,0(r2)
   242e8:	d8c00517 	ldw	r3,20(sp)
   242ec:	bd3fffc3 	ldbu	r20,-1(r23)
   242f0:	18c00044 	addi	r3,r3,1
   242f4:	d8c00515 	stw	r3,20(sp)
   242f8:	003db906 	br	239e0 <__alt_data_end+0xfffe39e0>
   242fc:	89400117 	ldw	r5,4(r17)
   24300:	e009883a 	mov	r4,fp
   24304:	00267140 	call	26714 <_Balloc>
   24308:	89800417 	ldw	r6,16(r17)
   2430c:	89400304 	addi	r5,r17,12
   24310:	11000304 	addi	r4,r2,12
   24314:	31800084 	addi	r6,r6,2
   24318:	318d883a 	add	r6,r6,r6
   2431c:	318d883a 	add	r6,r6,r6
   24320:	1027883a 	mov	r19,r2
   24324:	00263480 	call	26348 <memcpy>
   24328:	01800044 	movi	r6,1
   2432c:	980b883a 	mov	r5,r19
   24330:	e009883a 	mov	r4,fp
   24334:	0026f500 	call	26f50 <__lshift>
   24338:	1029883a 	mov	r20,r2
   2433c:	003ecc06 	br	23e70 <__alt_data_end+0xfffe3e70>
   24340:	00800e44 	movi	r2,57
   24344:	90809026 	beq	r18,r2,24588 <_dtoa_r+0x152c>
   24348:	92000044 	addi	r8,r18,1
   2434c:	003f1f06 	br	23fcc <__alt_data_end+0xfffe3fcc>
   24350:	9011883a 	mov	r8,r18
   24354:	8825883a 	mov	r18,r17
   24358:	a023883a 	mov	r17,r20
   2435c:	003e2906 	br	23c04 <__alt_data_end+0xfffe3c04>
   24360:	002b883a 	mov	r21,zero
   24364:	0023883a 	mov	r17,zero
   24368:	003f5406 	br	240bc <__alt_data_end+0xfffe40bc>
   2436c:	61bfffc4 	addi	r6,r12,-1
   24370:	300490fa 	slli	r2,r6,3
   24374:	00c000f4 	movhi	r3,3
   24378:	18ca4304 	addi	r3,r3,10508
   2437c:	1885883a 	add	r2,r3,r2
   24380:	11000017 	ldw	r4,0(r2)
   24384:	11400117 	ldw	r5,4(r2)
   24388:	d8800717 	ldw	r2,28(sp)
   2438c:	880f883a 	mov	r7,r17
   24390:	d9801215 	stw	r6,72(sp)
   24394:	800d883a 	mov	r6,r16
   24398:	db001615 	stw	r12,88(sp)
   2439c:	15c00044 	addi	r23,r2,1
   243a0:	002c2c40 	call	2c2c4 <__muldf3>
   243a4:	d9401017 	ldw	r5,64(sp)
   243a8:	d9000f17 	ldw	r4,60(sp)
   243ac:	d8c01515 	stw	r3,84(sp)
   243b0:	d8801415 	stw	r2,80(sp)
   243b4:	002d42c0 	call	2d42c <__fixdfsi>
   243b8:	1009883a 	mov	r4,r2
   243bc:	1021883a 	mov	r16,r2
   243c0:	002d4ac0 	call	2d4ac <__floatsidf>
   243c4:	d9000f17 	ldw	r4,60(sp)
   243c8:	d9401017 	ldw	r5,64(sp)
   243cc:	100d883a 	mov	r6,r2
   243d0:	180f883a 	mov	r7,r3
   243d4:	002cb300 	call	2cb30 <__subdf3>
   243d8:	1829883a 	mov	r20,r3
   243dc:	d8c00717 	ldw	r3,28(sp)
   243e0:	84000c04 	addi	r16,r16,48
   243e4:	1023883a 	mov	r17,r2
   243e8:	1c000005 	stb	r16,0(r3)
   243ec:	db001617 	ldw	r12,88(sp)
   243f0:	00800044 	movi	r2,1
   243f4:	60802226 	beq	r12,r2,24480 <_dtoa_r+0x1424>
   243f8:	d9c00717 	ldw	r7,28(sp)
   243fc:	8805883a 	mov	r2,r17
   24400:	b82b883a 	mov	r21,r23
   24404:	3b19883a 	add	r12,r7,r12
   24408:	6023883a 	mov	r17,r12
   2440c:	a007883a 	mov	r3,r20
   24410:	dc800f15 	stw	r18,60(sp)
   24414:	000d883a 	mov	r6,zero
   24418:	01d00934 	movhi	r7,16420
   2441c:	1009883a 	mov	r4,r2
   24420:	180b883a 	mov	r5,r3
   24424:	002c2c40 	call	2c2c4 <__muldf3>
   24428:	180b883a 	mov	r5,r3
   2442c:	1009883a 	mov	r4,r2
   24430:	1829883a 	mov	r20,r3
   24434:	1025883a 	mov	r18,r2
   24438:	002d42c0 	call	2d42c <__fixdfsi>
   2443c:	1009883a 	mov	r4,r2
   24440:	1021883a 	mov	r16,r2
   24444:	002d4ac0 	call	2d4ac <__floatsidf>
   24448:	100d883a 	mov	r6,r2
   2444c:	180f883a 	mov	r7,r3
   24450:	9009883a 	mov	r4,r18
   24454:	a00b883a 	mov	r5,r20
   24458:	84000c04 	addi	r16,r16,48
   2445c:	002cb300 	call	2cb30 <__subdf3>
   24460:	ad400044 	addi	r21,r21,1
   24464:	ac3fffc5 	stb	r16,-1(r21)
   24468:	ac7fea1e 	bne	r21,r17,24414 <__alt_data_end+0xfffe4414>
   2446c:	1023883a 	mov	r17,r2
   24470:	d8801217 	ldw	r2,72(sp)
   24474:	dc800f17 	ldw	r18,60(sp)
   24478:	1829883a 	mov	r20,r3
   2447c:	b8af883a 	add	r23,r23,r2
   24480:	d9001417 	ldw	r4,80(sp)
   24484:	d9401517 	ldw	r5,84(sp)
   24488:	000d883a 	mov	r6,zero
   2448c:	01cff834 	movhi	r7,16352
   24490:	002adf00 	call	2adf0 <__adddf3>
   24494:	880d883a 	mov	r6,r17
   24498:	a00f883a 	mov	r7,r20
   2449c:	1009883a 	mov	r4,r2
   244a0:	180b883a 	mov	r5,r3
   244a4:	002c1d00 	call	2c1d0 <__ledf2>
   244a8:	10003e0e 	bge	r2,zero,245a4 <_dtoa_r+0x1548>
   244ac:	d9001317 	ldw	r4,76(sp)
   244b0:	bd3fffc3 	ldbu	r20,-1(r23)
   244b4:	d9000515 	stw	r4,20(sp)
   244b8:	003d3b06 	br	239a8 <__alt_data_end+0xfffe39a8>
   244bc:	0027883a 	mov	r19,zero
   244c0:	003f1b06 	br	24130 <__alt_data_end+0xfffe4130>
   244c4:	d8800817 	ldw	r2,32(sp)
   244c8:	11e9c83a 	sub	r20,r2,r7
   244cc:	0005883a 	mov	r2,zero
   244d0:	003d5406 	br	23a24 <__alt_data_end+0xfffe3a24>
   244d4:	00800044 	movi	r2,1
   244d8:	003dc706 	br	23bf8 <__alt_data_end+0xfffe3bf8>
   244dc:	d8c00217 	ldw	r3,8(sp)
   244e0:	00800d84 	movi	r2,54
   244e4:	dd400a17 	ldw	r21,40(sp)
   244e8:	10c5c83a 	sub	r2,r2,r3
   244ec:	dd000817 	ldw	r20,32(sp)
   244f0:	003d4c06 	br	23a24 <__alt_data_end+0xfffe3a24>
   244f4:	dc800f15 	stw	r18,60(sp)
   244f8:	dcc01015 	stw	r19,64(sp)
   244fc:	04000084 	movi	r16,2
   24500:	003bed06 	br	234b8 <__alt_data_end+0xfffe34b8>
   24504:	d9000617 	ldw	r4,24(sp)
   24508:	203f0d26 	beq	r4,zero,24140 <__alt_data_end+0xfffe4140>
   2450c:	d9800c17 	ldw	r6,48(sp)
   24510:	01bcab0e 	bge	zero,r6,237c0 <__alt_data_end+0xfffe37c0>
   24514:	d9401017 	ldw	r5,64(sp)
   24518:	d9000f17 	ldw	r4,60(sp)
   2451c:	000d883a 	mov	r6,zero
   24520:	01d00934 	movhi	r7,16420
   24524:	002c2c40 	call	2c2c4 <__muldf3>
   24528:	81000044 	addi	r4,r16,1
   2452c:	d8800f15 	stw	r2,60(sp)
   24530:	d8c01015 	stw	r3,64(sp)
   24534:	002d4ac0 	call	2d4ac <__floatsidf>
   24538:	d9800f17 	ldw	r6,60(sp)
   2453c:	d9c01017 	ldw	r7,64(sp)
   24540:	1009883a 	mov	r4,r2
   24544:	180b883a 	mov	r5,r3
   24548:	002c2c40 	call	2c2c4 <__muldf3>
   2454c:	01d00734 	movhi	r7,16412
   24550:	000d883a 	mov	r6,zero
   24554:	1009883a 	mov	r4,r2
   24558:	180b883a 	mov	r5,r3
   2455c:	002adf00 	call	2adf0 <__adddf3>
   24560:	d9c00517 	ldw	r7,20(sp)
   24564:	047f3034 	movhi	r17,64704
   24568:	1021883a 	mov	r16,r2
   2456c:	39ffffc4 	addi	r7,r7,-1
   24570:	d9c01315 	stw	r7,76(sp)
   24574:	1c63883a 	add	r17,r3,r17
   24578:	db000c17 	ldw	r12,48(sp)
   2457c:	003bea06 	br	23528 <__alt_data_end+0xfffe3528>
   24580:	dc000915 	stw	r16,36(sp)
   24584:	003e0e06 	br	23dc0 <__alt_data_end+0xfffe3dc0>
   24588:	01000e44 	movi	r4,57
   2458c:	8825883a 	mov	r18,r17
   24590:	9dc00044 	addi	r23,r19,1
   24594:	99000005 	stb	r4,0(r19)
   24598:	a023883a 	mov	r17,r20
   2459c:	dc000915 	stw	r16,36(sp)
   245a0:	003da406 	br	23c34 <__alt_data_end+0xfffe3c34>
   245a4:	d9801417 	ldw	r6,80(sp)
   245a8:	d9c01517 	ldw	r7,84(sp)
   245ac:	0009883a 	mov	r4,zero
   245b0:	014ff834 	movhi	r5,16352
   245b4:	002cb300 	call	2cb30 <__subdf3>
   245b8:	880d883a 	mov	r6,r17
   245bc:	a00f883a 	mov	r7,r20
   245c0:	1009883a 	mov	r4,r2
   245c4:	180b883a 	mov	r5,r3
   245c8:	002c0f40 	call	2c0f4 <__gedf2>
   245cc:	00bc7c0e 	bge	zero,r2,237c0 <__alt_data_end+0xfffe37c0>
   245d0:	01000c04 	movi	r4,48
   245d4:	00000106 	br	245dc <_dtoa_r+0x1580>
   245d8:	102f883a 	mov	r23,r2
   245dc:	b8bfffc4 	addi	r2,r23,-1
   245e0:	10c00007 	ldb	r3,0(r2)
   245e4:	193ffc26 	beq	r3,r4,245d8 <__alt_data_end+0xfffe45d8>
   245e8:	d9801317 	ldw	r6,76(sp)
   245ec:	d9800515 	stw	r6,20(sp)
   245f0:	003c4406 	br	23704 <__alt_data_end+0xfffe3704>
   245f4:	d9801317 	ldw	r6,76(sp)
   245f8:	d9800515 	stw	r6,20(sp)
   245fc:	003cea06 	br	239a8 <__alt_data_end+0xfffe39a8>
   24600:	dd800f17 	ldw	r22,60(sp)
   24604:	dcc01017 	ldw	r19,64(sp)
   24608:	dc801217 	ldw	r18,72(sp)
   2460c:	003c6c06 	br	237c0 <__alt_data_end+0xfffe37c0>
   24610:	903e031e 	bne	r18,zero,23e20 <__alt_data_end+0xfffe3e20>
   24614:	003ebb06 	br	24104 <__alt_data_end+0xfffe4104>
   24618:	103e6c1e 	bne	r2,zero,23fcc <__alt_data_end+0xfffe3fcc>
   2461c:	4080004c 	andi	r2,r8,1
   24620:	103e6a26 	beq	r2,zero,23fcc <__alt_data_end+0xfffe3fcc>
   24624:	003e6606 	br	23fc0 <__alt_data_end+0xfffe3fc0>
   24628:	d8c00317 	ldw	r3,12(sp)
   2462c:	00800084 	movi	r2,2
   24630:	10c02916 	blt	r2,r3,246d8 <_dtoa_r+0x167c>
   24634:	d9000c17 	ldw	r4,48(sp)
   24638:	003e8806 	br	2405c <__alt_data_end+0xfffe405c>
   2463c:	04000084 	movi	r16,2
   24640:	003b9d06 	br	234b8 <__alt_data_end+0xfffe34b8>
   24644:	d9001317 	ldw	r4,76(sp)
   24648:	d9000515 	stw	r4,20(sp)
   2464c:	003cd606 	br	239a8 <__alt_data_end+0xfffe39a8>
   24650:	d8801317 	ldw	r2,76(sp)
   24654:	d8800515 	stw	r2,20(sp)
   24658:	003c2a06 	br	23704 <__alt_data_end+0xfffe3704>
   2465c:	d9800317 	ldw	r6,12(sp)
   24660:	00800084 	movi	r2,2
   24664:	11801516 	blt	r2,r6,246bc <_dtoa_r+0x1660>
   24668:	d9c00c17 	ldw	r7,48(sp)
   2466c:	d9c00615 	stw	r7,24(sp)
   24670:	003df706 	br	23e50 <__alt_data_end+0xfffe3e50>
   24674:	193d3926 	beq	r3,r4,23b5c <__alt_data_end+0xfffe3b5c>
   24678:	00c00f04 	movi	r3,60
   2467c:	1885c83a 	sub	r2,r3,r2
   24680:	003ddf06 	br	23e00 <__alt_data_end+0xfffe3e00>
   24684:	e009883a 	mov	r4,fp
   24688:	e0001115 	stw	zero,68(fp)
   2468c:	000b883a 	mov	r5,zero
   24690:	00267140 	call	26714 <_Balloc>
   24694:	d8800715 	stw	r2,28(sp)
   24698:	d8c00717 	ldw	r3,28(sp)
   2469c:	00bfffc4 	movi	r2,-1
   246a0:	01000044 	movi	r4,1
   246a4:	d8800c15 	stw	r2,48(sp)
   246a8:	e0c01015 	stw	r3,64(fp)
   246ac:	d9000b15 	stw	r4,44(sp)
   246b0:	d8800615 	stw	r2,24(sp)
   246b4:	d8002215 	stw	zero,136(sp)
   246b8:	003c4106 	br	237c0 <__alt_data_end+0xfffe37c0>
   246bc:	d8c00c17 	ldw	r3,48(sp)
   246c0:	d8c00615 	stw	r3,24(sp)
   246c4:	003e7006 	br	24088 <__alt_data_end+0xfffe4088>
   246c8:	04400044 	movi	r17,1
   246cc:	003b2006 	br	23350 <__alt_data_end+0xfffe3350>
   246d0:	000b883a 	mov	r5,zero
   246d4:	003b3d06 	br	233cc <__alt_data_end+0xfffe33cc>
   246d8:	d8800c17 	ldw	r2,48(sp)
   246dc:	d8800615 	stw	r2,24(sp)
   246e0:	003e6906 	br	24088 <__alt_data_end+0xfffe4088>

000246e4 <__sflush_r>:
   246e4:	2880030b 	ldhu	r2,12(r5)
   246e8:	defffb04 	addi	sp,sp,-20
   246ec:	dcc00315 	stw	r19,12(sp)
   246f0:	dc400115 	stw	r17,4(sp)
   246f4:	dfc00415 	stw	ra,16(sp)
   246f8:	dc800215 	stw	r18,8(sp)
   246fc:	dc000015 	stw	r16,0(sp)
   24700:	10c0020c 	andi	r3,r2,8
   24704:	2823883a 	mov	r17,r5
   24708:	2027883a 	mov	r19,r4
   2470c:	1800311e 	bne	r3,zero,247d4 <__sflush_r+0xf0>
   24710:	28c00117 	ldw	r3,4(r5)
   24714:	10820014 	ori	r2,r2,2048
   24718:	2880030d 	sth	r2,12(r5)
   2471c:	00c04b0e 	bge	zero,r3,2484c <__sflush_r+0x168>
   24720:	8a000a17 	ldw	r8,40(r17)
   24724:	40002326 	beq	r8,zero,247b4 <__sflush_r+0xd0>
   24728:	9c000017 	ldw	r16,0(r19)
   2472c:	10c4000c 	andi	r3,r2,4096
   24730:	98000015 	stw	zero,0(r19)
   24734:	18004826 	beq	r3,zero,24858 <__sflush_r+0x174>
   24738:	89801417 	ldw	r6,80(r17)
   2473c:	10c0010c 	andi	r3,r2,4
   24740:	18000626 	beq	r3,zero,2475c <__sflush_r+0x78>
   24744:	88c00117 	ldw	r3,4(r17)
   24748:	88800c17 	ldw	r2,48(r17)
   2474c:	30cdc83a 	sub	r6,r6,r3
   24750:	10000226 	beq	r2,zero,2475c <__sflush_r+0x78>
   24754:	88800f17 	ldw	r2,60(r17)
   24758:	308dc83a 	sub	r6,r6,r2
   2475c:	89400717 	ldw	r5,28(r17)
   24760:	000f883a 	mov	r7,zero
   24764:	9809883a 	mov	r4,r19
   24768:	403ee83a 	callr	r8
   2476c:	00ffffc4 	movi	r3,-1
   24770:	10c04426 	beq	r2,r3,24884 <__sflush_r+0x1a0>
   24774:	88c0030b 	ldhu	r3,12(r17)
   24778:	89000417 	ldw	r4,16(r17)
   2477c:	88000115 	stw	zero,4(r17)
   24780:	197dffcc 	andi	r5,r3,63487
   24784:	8940030d 	sth	r5,12(r17)
   24788:	89000015 	stw	r4,0(r17)
   2478c:	18c4000c 	andi	r3,r3,4096
   24790:	18002c1e 	bne	r3,zero,24844 <__sflush_r+0x160>
   24794:	89400c17 	ldw	r5,48(r17)
   24798:	9c000015 	stw	r16,0(r19)
   2479c:	28000526 	beq	r5,zero,247b4 <__sflush_r+0xd0>
   247a0:	88801004 	addi	r2,r17,64
   247a4:	28800226 	beq	r5,r2,247b0 <__sflush_r+0xcc>
   247a8:	9809883a 	mov	r4,r19
   247ac:	0024e600 	call	24e60 <_free_r>
   247b0:	88000c15 	stw	zero,48(r17)
   247b4:	0005883a 	mov	r2,zero
   247b8:	dfc00417 	ldw	ra,16(sp)
   247bc:	dcc00317 	ldw	r19,12(sp)
   247c0:	dc800217 	ldw	r18,8(sp)
   247c4:	dc400117 	ldw	r17,4(sp)
   247c8:	dc000017 	ldw	r16,0(sp)
   247cc:	dec00504 	addi	sp,sp,20
   247d0:	f800283a 	ret
   247d4:	2c800417 	ldw	r18,16(r5)
   247d8:	903ff626 	beq	r18,zero,247b4 <__alt_data_end+0xfffe47b4>
   247dc:	2c000017 	ldw	r16,0(r5)
   247e0:	108000cc 	andi	r2,r2,3
   247e4:	2c800015 	stw	r18,0(r5)
   247e8:	84a1c83a 	sub	r16,r16,r18
   247ec:	1000131e 	bne	r2,zero,2483c <__sflush_r+0x158>
   247f0:	28800517 	ldw	r2,20(r5)
   247f4:	88800215 	stw	r2,8(r17)
   247f8:	04000316 	blt	zero,r16,24808 <__sflush_r+0x124>
   247fc:	003fed06 	br	247b4 <__alt_data_end+0xfffe47b4>
   24800:	90a5883a 	add	r18,r18,r2
   24804:	043feb0e 	bge	zero,r16,247b4 <__alt_data_end+0xfffe47b4>
   24808:	88800917 	ldw	r2,36(r17)
   2480c:	89400717 	ldw	r5,28(r17)
   24810:	800f883a 	mov	r7,r16
   24814:	900d883a 	mov	r6,r18
   24818:	9809883a 	mov	r4,r19
   2481c:	103ee83a 	callr	r2
   24820:	80a1c83a 	sub	r16,r16,r2
   24824:	00bff616 	blt	zero,r2,24800 <__alt_data_end+0xfffe4800>
   24828:	88c0030b 	ldhu	r3,12(r17)
   2482c:	00bfffc4 	movi	r2,-1
   24830:	18c01014 	ori	r3,r3,64
   24834:	88c0030d 	sth	r3,12(r17)
   24838:	003fdf06 	br	247b8 <__alt_data_end+0xfffe47b8>
   2483c:	0005883a 	mov	r2,zero
   24840:	003fec06 	br	247f4 <__alt_data_end+0xfffe47f4>
   24844:	88801415 	stw	r2,80(r17)
   24848:	003fd206 	br	24794 <__alt_data_end+0xfffe4794>
   2484c:	28c00f17 	ldw	r3,60(r5)
   24850:	00ffb316 	blt	zero,r3,24720 <__alt_data_end+0xfffe4720>
   24854:	003fd706 	br	247b4 <__alt_data_end+0xfffe47b4>
   24858:	89400717 	ldw	r5,28(r17)
   2485c:	000d883a 	mov	r6,zero
   24860:	01c00044 	movi	r7,1
   24864:	9809883a 	mov	r4,r19
   24868:	403ee83a 	callr	r8
   2486c:	100d883a 	mov	r6,r2
   24870:	00bfffc4 	movi	r2,-1
   24874:	30801426 	beq	r6,r2,248c8 <__sflush_r+0x1e4>
   24878:	8880030b 	ldhu	r2,12(r17)
   2487c:	8a000a17 	ldw	r8,40(r17)
   24880:	003fae06 	br	2473c <__alt_data_end+0xfffe473c>
   24884:	98c00017 	ldw	r3,0(r19)
   24888:	183fba26 	beq	r3,zero,24774 <__alt_data_end+0xfffe4774>
   2488c:	01000744 	movi	r4,29
   24890:	19000626 	beq	r3,r4,248ac <__sflush_r+0x1c8>
   24894:	01000584 	movi	r4,22
   24898:	19000426 	beq	r3,r4,248ac <__sflush_r+0x1c8>
   2489c:	88c0030b 	ldhu	r3,12(r17)
   248a0:	18c01014 	ori	r3,r3,64
   248a4:	88c0030d 	sth	r3,12(r17)
   248a8:	003fc306 	br	247b8 <__alt_data_end+0xfffe47b8>
   248ac:	8880030b 	ldhu	r2,12(r17)
   248b0:	88c00417 	ldw	r3,16(r17)
   248b4:	88000115 	stw	zero,4(r17)
   248b8:	10bdffcc 	andi	r2,r2,63487
   248bc:	8880030d 	sth	r2,12(r17)
   248c0:	88c00015 	stw	r3,0(r17)
   248c4:	003fb306 	br	24794 <__alt_data_end+0xfffe4794>
   248c8:	98800017 	ldw	r2,0(r19)
   248cc:	103fea26 	beq	r2,zero,24878 <__alt_data_end+0xfffe4878>
   248d0:	00c00744 	movi	r3,29
   248d4:	10c00226 	beq	r2,r3,248e0 <__sflush_r+0x1fc>
   248d8:	00c00584 	movi	r3,22
   248dc:	10c0031e 	bne	r2,r3,248ec <__sflush_r+0x208>
   248e0:	9c000015 	stw	r16,0(r19)
   248e4:	0005883a 	mov	r2,zero
   248e8:	003fb306 	br	247b8 <__alt_data_end+0xfffe47b8>
   248ec:	88c0030b 	ldhu	r3,12(r17)
   248f0:	3005883a 	mov	r2,r6
   248f4:	18c01014 	ori	r3,r3,64
   248f8:	88c0030d 	sth	r3,12(r17)
   248fc:	003fae06 	br	247b8 <__alt_data_end+0xfffe47b8>

00024900 <_fflush_r>:
   24900:	defffd04 	addi	sp,sp,-12
   24904:	dc000115 	stw	r16,4(sp)
   24908:	dfc00215 	stw	ra,8(sp)
   2490c:	2021883a 	mov	r16,r4
   24910:	20000226 	beq	r4,zero,2491c <_fflush_r+0x1c>
   24914:	20800e17 	ldw	r2,56(r4)
   24918:	10000c26 	beq	r2,zero,2494c <_fflush_r+0x4c>
   2491c:	2880030f 	ldh	r2,12(r5)
   24920:	1000051e 	bne	r2,zero,24938 <_fflush_r+0x38>
   24924:	0005883a 	mov	r2,zero
   24928:	dfc00217 	ldw	ra,8(sp)
   2492c:	dc000117 	ldw	r16,4(sp)
   24930:	dec00304 	addi	sp,sp,12
   24934:	f800283a 	ret
   24938:	8009883a 	mov	r4,r16
   2493c:	dfc00217 	ldw	ra,8(sp)
   24940:	dc000117 	ldw	r16,4(sp)
   24944:	dec00304 	addi	sp,sp,12
   24948:	00246e41 	jmpi	246e4 <__sflush_r>
   2494c:	d9400015 	stw	r5,0(sp)
   24950:	0024cec0 	call	24cec <__sinit>
   24954:	d9400017 	ldw	r5,0(sp)
   24958:	003ff006 	br	2491c <__alt_data_end+0xfffe491c>

0002495c <fflush>:
   2495c:	20000526 	beq	r4,zero,24974 <fflush+0x18>
   24960:	008000f4 	movhi	r2,3
   24964:	1091bf04 	addi	r2,r2,18172
   24968:	200b883a 	mov	r5,r4
   2496c:	11000017 	ldw	r4,0(r2)
   24970:	00249001 	jmpi	24900 <_fflush_r>
   24974:	008000f4 	movhi	r2,3
   24978:	1091be04 	addi	r2,r2,18168
   2497c:	11000017 	ldw	r4,0(r2)
   24980:	014000b4 	movhi	r5,2
   24984:	29524004 	addi	r5,r5,18688
   24988:	00256fc1 	jmpi	256fc <_fwalk_reent>

0002498c <__fp_unlock>:
   2498c:	0005883a 	mov	r2,zero
   24990:	f800283a 	ret

00024994 <_cleanup_r>:
   24994:	014000f4 	movhi	r5,3
   24998:	29662604 	addi	r5,r5,-26472
   2499c:	00256fc1 	jmpi	256fc <_fwalk_reent>

000249a0 <__sinit.part.1>:
   249a0:	defff704 	addi	sp,sp,-36
   249a4:	00c000b4 	movhi	r3,2
   249a8:	dfc00815 	stw	ra,32(sp)
   249ac:	ddc00715 	stw	r23,28(sp)
   249b0:	dd800615 	stw	r22,24(sp)
   249b4:	dd400515 	stw	r21,20(sp)
   249b8:	dd000415 	stw	r20,16(sp)
   249bc:	dcc00315 	stw	r19,12(sp)
   249c0:	dc800215 	stw	r18,8(sp)
   249c4:	dc400115 	stw	r17,4(sp)
   249c8:	dc000015 	stw	r16,0(sp)
   249cc:	18d26504 	addi	r3,r3,18836
   249d0:	24000117 	ldw	r16,4(r4)
   249d4:	20c00f15 	stw	r3,60(r4)
   249d8:	2080bb04 	addi	r2,r4,748
   249dc:	00c000c4 	movi	r3,3
   249e0:	20c0b915 	stw	r3,740(r4)
   249e4:	2080ba15 	stw	r2,744(r4)
   249e8:	2000b815 	stw	zero,736(r4)
   249ec:	05c00204 	movi	r23,8
   249f0:	00800104 	movi	r2,4
   249f4:	2025883a 	mov	r18,r4
   249f8:	b80d883a 	mov	r6,r23
   249fc:	81001704 	addi	r4,r16,92
   24a00:	000b883a 	mov	r5,zero
   24a04:	80000015 	stw	zero,0(r16)
   24a08:	80000115 	stw	zero,4(r16)
   24a0c:	80000215 	stw	zero,8(r16)
   24a10:	8080030d 	sth	r2,12(r16)
   24a14:	80001915 	stw	zero,100(r16)
   24a18:	8000038d 	sth	zero,14(r16)
   24a1c:	80000415 	stw	zero,16(r16)
   24a20:	80000515 	stw	zero,20(r16)
   24a24:	80000615 	stw	zero,24(r16)
   24a28:	00265ec0 	call	265ec <memset>
   24a2c:	058000b4 	movhi	r22,2
   24a30:	94400217 	ldw	r17,8(r18)
   24a34:	054000b4 	movhi	r21,2
   24a38:	050000b4 	movhi	r20,2
   24a3c:	04c000b4 	movhi	r19,2
   24a40:	b59f7e04 	addi	r22,r22,32248
   24a44:	ad5f9504 	addi	r21,r21,32340
   24a48:	a51fb404 	addi	r20,r20,32464
   24a4c:	9cdfcb04 	addi	r19,r19,32556
   24a50:	85800815 	stw	r22,32(r16)
   24a54:	85400915 	stw	r21,36(r16)
   24a58:	85000a15 	stw	r20,40(r16)
   24a5c:	84c00b15 	stw	r19,44(r16)
   24a60:	84000715 	stw	r16,28(r16)
   24a64:	00800284 	movi	r2,10
   24a68:	8880030d 	sth	r2,12(r17)
   24a6c:	00800044 	movi	r2,1
   24a70:	b80d883a 	mov	r6,r23
   24a74:	89001704 	addi	r4,r17,92
   24a78:	000b883a 	mov	r5,zero
   24a7c:	88000015 	stw	zero,0(r17)
   24a80:	88000115 	stw	zero,4(r17)
   24a84:	88000215 	stw	zero,8(r17)
   24a88:	88001915 	stw	zero,100(r17)
   24a8c:	8880038d 	sth	r2,14(r17)
   24a90:	88000415 	stw	zero,16(r17)
   24a94:	88000515 	stw	zero,20(r17)
   24a98:	88000615 	stw	zero,24(r17)
   24a9c:	00265ec0 	call	265ec <memset>
   24aa0:	94000317 	ldw	r16,12(r18)
   24aa4:	00800484 	movi	r2,18
   24aa8:	8c400715 	stw	r17,28(r17)
   24aac:	8d800815 	stw	r22,32(r17)
   24ab0:	8d400915 	stw	r21,36(r17)
   24ab4:	8d000a15 	stw	r20,40(r17)
   24ab8:	8cc00b15 	stw	r19,44(r17)
   24abc:	8080030d 	sth	r2,12(r16)
   24ac0:	00800084 	movi	r2,2
   24ac4:	80000015 	stw	zero,0(r16)
   24ac8:	80000115 	stw	zero,4(r16)
   24acc:	80000215 	stw	zero,8(r16)
   24ad0:	80001915 	stw	zero,100(r16)
   24ad4:	8080038d 	sth	r2,14(r16)
   24ad8:	80000415 	stw	zero,16(r16)
   24adc:	80000515 	stw	zero,20(r16)
   24ae0:	80000615 	stw	zero,24(r16)
   24ae4:	b80d883a 	mov	r6,r23
   24ae8:	000b883a 	mov	r5,zero
   24aec:	81001704 	addi	r4,r16,92
   24af0:	00265ec0 	call	265ec <memset>
   24af4:	00800044 	movi	r2,1
   24af8:	84000715 	stw	r16,28(r16)
   24afc:	85800815 	stw	r22,32(r16)
   24b00:	85400915 	stw	r21,36(r16)
   24b04:	85000a15 	stw	r20,40(r16)
   24b08:	84c00b15 	stw	r19,44(r16)
   24b0c:	90800e15 	stw	r2,56(r18)
   24b10:	dfc00817 	ldw	ra,32(sp)
   24b14:	ddc00717 	ldw	r23,28(sp)
   24b18:	dd800617 	ldw	r22,24(sp)
   24b1c:	dd400517 	ldw	r21,20(sp)
   24b20:	dd000417 	ldw	r20,16(sp)
   24b24:	dcc00317 	ldw	r19,12(sp)
   24b28:	dc800217 	ldw	r18,8(sp)
   24b2c:	dc400117 	ldw	r17,4(sp)
   24b30:	dc000017 	ldw	r16,0(sp)
   24b34:	dec00904 	addi	sp,sp,36
   24b38:	f800283a 	ret

00024b3c <__fp_lock>:
   24b3c:	0005883a 	mov	r2,zero
   24b40:	f800283a 	ret

00024b44 <__sfmoreglue>:
   24b44:	defffc04 	addi	sp,sp,-16
   24b48:	dc800215 	stw	r18,8(sp)
   24b4c:	2825883a 	mov	r18,r5
   24b50:	dc000015 	stw	r16,0(sp)
   24b54:	01401a04 	movi	r5,104
   24b58:	2021883a 	mov	r16,r4
   24b5c:	913fffc4 	addi	r4,r18,-1
   24b60:	dfc00315 	stw	ra,12(sp)
   24b64:	dc400115 	stw	r17,4(sp)
   24b68:	002adc80 	call	2adc8 <__mulsi3>
   24b6c:	8009883a 	mov	r4,r16
   24b70:	11401d04 	addi	r5,r2,116
   24b74:	1023883a 	mov	r17,r2
   24b78:	0025a580 	call	25a58 <_malloc_r>
   24b7c:	1021883a 	mov	r16,r2
   24b80:	10000726 	beq	r2,zero,24ba0 <__sfmoreglue+0x5c>
   24b84:	11000304 	addi	r4,r2,12
   24b88:	10000015 	stw	zero,0(r2)
   24b8c:	14800115 	stw	r18,4(r2)
   24b90:	11000215 	stw	r4,8(r2)
   24b94:	89801a04 	addi	r6,r17,104
   24b98:	000b883a 	mov	r5,zero
   24b9c:	00265ec0 	call	265ec <memset>
   24ba0:	8005883a 	mov	r2,r16
   24ba4:	dfc00317 	ldw	ra,12(sp)
   24ba8:	dc800217 	ldw	r18,8(sp)
   24bac:	dc400117 	ldw	r17,4(sp)
   24bb0:	dc000017 	ldw	r16,0(sp)
   24bb4:	dec00404 	addi	sp,sp,16
   24bb8:	f800283a 	ret

00024bbc <__sfp>:
   24bbc:	defffb04 	addi	sp,sp,-20
   24bc0:	dc000015 	stw	r16,0(sp)
   24bc4:	040000f4 	movhi	r16,3
   24bc8:	8411be04 	addi	r16,r16,18168
   24bcc:	dcc00315 	stw	r19,12(sp)
   24bd0:	2027883a 	mov	r19,r4
   24bd4:	81000017 	ldw	r4,0(r16)
   24bd8:	dfc00415 	stw	ra,16(sp)
   24bdc:	dc800215 	stw	r18,8(sp)
   24be0:	20800e17 	ldw	r2,56(r4)
   24be4:	dc400115 	stw	r17,4(sp)
   24be8:	1000021e 	bne	r2,zero,24bf4 <__sfp+0x38>
   24bec:	00249a00 	call	249a0 <__sinit.part.1>
   24bf0:	81000017 	ldw	r4,0(r16)
   24bf4:	2480b804 	addi	r18,r4,736
   24bf8:	047fffc4 	movi	r17,-1
   24bfc:	91000117 	ldw	r4,4(r18)
   24c00:	94000217 	ldw	r16,8(r18)
   24c04:	213fffc4 	addi	r4,r4,-1
   24c08:	20000a16 	blt	r4,zero,24c34 <__sfp+0x78>
   24c0c:	8080030f 	ldh	r2,12(r16)
   24c10:	10000c26 	beq	r2,zero,24c44 <__sfp+0x88>
   24c14:	80c01d04 	addi	r3,r16,116
   24c18:	00000206 	br	24c24 <__sfp+0x68>
   24c1c:	18bfe60f 	ldh	r2,-104(r3)
   24c20:	10000826 	beq	r2,zero,24c44 <__sfp+0x88>
   24c24:	213fffc4 	addi	r4,r4,-1
   24c28:	1c3ffd04 	addi	r16,r3,-12
   24c2c:	18c01a04 	addi	r3,r3,104
   24c30:	247ffa1e 	bne	r4,r17,24c1c <__alt_data_end+0xfffe4c1c>
   24c34:	90800017 	ldw	r2,0(r18)
   24c38:	10001d26 	beq	r2,zero,24cb0 <__sfp+0xf4>
   24c3c:	1025883a 	mov	r18,r2
   24c40:	003fee06 	br	24bfc <__alt_data_end+0xfffe4bfc>
   24c44:	00bfffc4 	movi	r2,-1
   24c48:	8080038d 	sth	r2,14(r16)
   24c4c:	00800044 	movi	r2,1
   24c50:	8080030d 	sth	r2,12(r16)
   24c54:	80001915 	stw	zero,100(r16)
   24c58:	80000015 	stw	zero,0(r16)
   24c5c:	80000215 	stw	zero,8(r16)
   24c60:	80000115 	stw	zero,4(r16)
   24c64:	80000415 	stw	zero,16(r16)
   24c68:	80000515 	stw	zero,20(r16)
   24c6c:	80000615 	stw	zero,24(r16)
   24c70:	01800204 	movi	r6,8
   24c74:	000b883a 	mov	r5,zero
   24c78:	81001704 	addi	r4,r16,92
   24c7c:	00265ec0 	call	265ec <memset>
   24c80:	8005883a 	mov	r2,r16
   24c84:	80000c15 	stw	zero,48(r16)
   24c88:	80000d15 	stw	zero,52(r16)
   24c8c:	80001115 	stw	zero,68(r16)
   24c90:	80001215 	stw	zero,72(r16)
   24c94:	dfc00417 	ldw	ra,16(sp)
   24c98:	dcc00317 	ldw	r19,12(sp)
   24c9c:	dc800217 	ldw	r18,8(sp)
   24ca0:	dc400117 	ldw	r17,4(sp)
   24ca4:	dc000017 	ldw	r16,0(sp)
   24ca8:	dec00504 	addi	sp,sp,20
   24cac:	f800283a 	ret
   24cb0:	01400104 	movi	r5,4
   24cb4:	9809883a 	mov	r4,r19
   24cb8:	0024b440 	call	24b44 <__sfmoreglue>
   24cbc:	90800015 	stw	r2,0(r18)
   24cc0:	103fde1e 	bne	r2,zero,24c3c <__alt_data_end+0xfffe4c3c>
   24cc4:	00800304 	movi	r2,12
   24cc8:	98800015 	stw	r2,0(r19)
   24ccc:	0005883a 	mov	r2,zero
   24cd0:	003ff006 	br	24c94 <__alt_data_end+0xfffe4c94>

00024cd4 <_cleanup>:
   24cd4:	008000f4 	movhi	r2,3
   24cd8:	1091be04 	addi	r2,r2,18168
   24cdc:	11000017 	ldw	r4,0(r2)
   24ce0:	014000f4 	movhi	r5,3
   24ce4:	29662604 	addi	r5,r5,-26472
   24ce8:	00256fc1 	jmpi	256fc <_fwalk_reent>

00024cec <__sinit>:
   24cec:	20800e17 	ldw	r2,56(r4)
   24cf0:	10000126 	beq	r2,zero,24cf8 <__sinit+0xc>
   24cf4:	f800283a 	ret
   24cf8:	00249a01 	jmpi	249a0 <__sinit.part.1>

00024cfc <__sfp_lock_acquire>:
   24cfc:	f800283a 	ret

00024d00 <__sfp_lock_release>:
   24d00:	f800283a 	ret

00024d04 <__sinit_lock_acquire>:
   24d04:	f800283a 	ret

00024d08 <__sinit_lock_release>:
   24d08:	f800283a 	ret

00024d0c <__fp_lock_all>:
   24d0c:	008000f4 	movhi	r2,3
   24d10:	1091bf04 	addi	r2,r2,18172
   24d14:	11000017 	ldw	r4,0(r2)
   24d18:	014000b4 	movhi	r5,2
   24d1c:	2952cf04 	addi	r5,r5,19260
   24d20:	00256381 	jmpi	25638 <_fwalk>

00024d24 <__fp_unlock_all>:
   24d24:	008000f4 	movhi	r2,3
   24d28:	1091bf04 	addi	r2,r2,18172
   24d2c:	11000017 	ldw	r4,0(r2)
   24d30:	014000b4 	movhi	r5,2
   24d34:	29526304 	addi	r5,r5,18828
   24d38:	00256381 	jmpi	25638 <_fwalk>

00024d3c <_malloc_trim_r>:
   24d3c:	defffb04 	addi	sp,sp,-20
   24d40:	dcc00315 	stw	r19,12(sp)
   24d44:	04c000f4 	movhi	r19,3
   24d48:	dc800215 	stw	r18,8(sp)
   24d4c:	dc400115 	stw	r17,4(sp)
   24d50:	dc000015 	stw	r16,0(sp)
   24d54:	dfc00415 	stw	ra,16(sp)
   24d58:	2821883a 	mov	r16,r5
   24d5c:	9ccbfb04 	addi	r19,r19,12268
   24d60:	2025883a 	mov	r18,r4
   24d64:	002dc300 	call	2dc30 <__malloc_lock>
   24d68:	98800217 	ldw	r2,8(r19)
   24d6c:	14400117 	ldw	r17,4(r2)
   24d70:	00bfff04 	movi	r2,-4
   24d74:	88a2703a 	and	r17,r17,r2
   24d78:	8c21c83a 	sub	r16,r17,r16
   24d7c:	8403fbc4 	addi	r16,r16,4079
   24d80:	8020d33a 	srli	r16,r16,12
   24d84:	0083ffc4 	movi	r2,4095
   24d88:	843fffc4 	addi	r16,r16,-1
   24d8c:	8020933a 	slli	r16,r16,12
   24d90:	1400060e 	bge	r2,r16,24dac <_malloc_trim_r+0x70>
   24d94:	000b883a 	mov	r5,zero
   24d98:	9009883a 	mov	r4,r18
   24d9c:	0027da40 	call	27da4 <_sbrk_r>
   24da0:	98c00217 	ldw	r3,8(r19)
   24da4:	1c47883a 	add	r3,r3,r17
   24da8:	10c00a26 	beq	r2,r3,24dd4 <_malloc_trim_r+0x98>
   24dac:	9009883a 	mov	r4,r18
   24db0:	002dc540 	call	2dc54 <__malloc_unlock>
   24db4:	0005883a 	mov	r2,zero
   24db8:	dfc00417 	ldw	ra,16(sp)
   24dbc:	dcc00317 	ldw	r19,12(sp)
   24dc0:	dc800217 	ldw	r18,8(sp)
   24dc4:	dc400117 	ldw	r17,4(sp)
   24dc8:	dc000017 	ldw	r16,0(sp)
   24dcc:	dec00504 	addi	sp,sp,20
   24dd0:	f800283a 	ret
   24dd4:	040bc83a 	sub	r5,zero,r16
   24dd8:	9009883a 	mov	r4,r18
   24ddc:	0027da40 	call	27da4 <_sbrk_r>
   24de0:	00ffffc4 	movi	r3,-1
   24de4:	10c00d26 	beq	r2,r3,24e1c <_malloc_trim_r+0xe0>
   24de8:	00c000f4 	movhi	r3,3
   24dec:	18d8da04 	addi	r3,r3,25448
   24df0:	18800017 	ldw	r2,0(r3)
   24df4:	99000217 	ldw	r4,8(r19)
   24df8:	8c23c83a 	sub	r17,r17,r16
   24dfc:	8c400054 	ori	r17,r17,1
   24e00:	1421c83a 	sub	r16,r2,r16
   24e04:	24400115 	stw	r17,4(r4)
   24e08:	9009883a 	mov	r4,r18
   24e0c:	1c000015 	stw	r16,0(r3)
   24e10:	002dc540 	call	2dc54 <__malloc_unlock>
   24e14:	00800044 	movi	r2,1
   24e18:	003fe706 	br	24db8 <__alt_data_end+0xfffe4db8>
   24e1c:	000b883a 	mov	r5,zero
   24e20:	9009883a 	mov	r4,r18
   24e24:	0027da40 	call	27da4 <_sbrk_r>
   24e28:	99000217 	ldw	r4,8(r19)
   24e2c:	014003c4 	movi	r5,15
   24e30:	1107c83a 	sub	r3,r2,r4
   24e34:	28ffdd0e 	bge	r5,r3,24dac <__alt_data_end+0xfffe4dac>
   24e38:	014000f4 	movhi	r5,3
   24e3c:	2951c104 	addi	r5,r5,18180
   24e40:	29400017 	ldw	r5,0(r5)
   24e44:	18c00054 	ori	r3,r3,1
   24e48:	20c00115 	stw	r3,4(r4)
   24e4c:	00c000f4 	movhi	r3,3
   24e50:	1145c83a 	sub	r2,r2,r5
   24e54:	18d8da04 	addi	r3,r3,25448
   24e58:	18800015 	stw	r2,0(r3)
   24e5c:	003fd306 	br	24dac <__alt_data_end+0xfffe4dac>

00024e60 <_free_r>:
   24e60:	28004126 	beq	r5,zero,24f68 <_free_r+0x108>
   24e64:	defffd04 	addi	sp,sp,-12
   24e68:	dc400115 	stw	r17,4(sp)
   24e6c:	dc000015 	stw	r16,0(sp)
   24e70:	2023883a 	mov	r17,r4
   24e74:	2821883a 	mov	r16,r5
   24e78:	dfc00215 	stw	ra,8(sp)
   24e7c:	002dc300 	call	2dc30 <__malloc_lock>
   24e80:	81ffff17 	ldw	r7,-4(r16)
   24e84:	00bfff84 	movi	r2,-2
   24e88:	010000f4 	movhi	r4,3
   24e8c:	81bffe04 	addi	r6,r16,-8
   24e90:	3884703a 	and	r2,r7,r2
   24e94:	210bfb04 	addi	r4,r4,12268
   24e98:	308b883a 	add	r5,r6,r2
   24e9c:	2a400117 	ldw	r9,4(r5)
   24ea0:	22000217 	ldw	r8,8(r4)
   24ea4:	00ffff04 	movi	r3,-4
   24ea8:	48c6703a 	and	r3,r9,r3
   24eac:	2a005726 	beq	r5,r8,2500c <_free_r+0x1ac>
   24eb0:	28c00115 	stw	r3,4(r5)
   24eb4:	39c0004c 	andi	r7,r7,1
   24eb8:	3800091e 	bne	r7,zero,24ee0 <_free_r+0x80>
   24ebc:	823ffe17 	ldw	r8,-8(r16)
   24ec0:	22400204 	addi	r9,r4,8
   24ec4:	320dc83a 	sub	r6,r6,r8
   24ec8:	31c00217 	ldw	r7,8(r6)
   24ecc:	1205883a 	add	r2,r2,r8
   24ed0:	3a406526 	beq	r7,r9,25068 <_free_r+0x208>
   24ed4:	32000317 	ldw	r8,12(r6)
   24ed8:	3a000315 	stw	r8,12(r7)
   24edc:	41c00215 	stw	r7,8(r8)
   24ee0:	28cf883a 	add	r7,r5,r3
   24ee4:	39c00117 	ldw	r7,4(r7)
   24ee8:	39c0004c 	andi	r7,r7,1
   24eec:	38003a26 	beq	r7,zero,24fd8 <_free_r+0x178>
   24ef0:	10c00054 	ori	r3,r2,1
   24ef4:	30c00115 	stw	r3,4(r6)
   24ef8:	3087883a 	add	r3,r6,r2
   24efc:	18800015 	stw	r2,0(r3)
   24f00:	00c07fc4 	movi	r3,511
   24f04:	18801936 	bltu	r3,r2,24f6c <_free_r+0x10c>
   24f08:	1004d0fa 	srli	r2,r2,3
   24f0c:	01c00044 	movi	r7,1
   24f10:	21400117 	ldw	r5,4(r4)
   24f14:	10c00044 	addi	r3,r2,1
   24f18:	18c7883a 	add	r3,r3,r3
   24f1c:	1005d0ba 	srai	r2,r2,2
   24f20:	18c7883a 	add	r3,r3,r3
   24f24:	18c7883a 	add	r3,r3,r3
   24f28:	1907883a 	add	r3,r3,r4
   24f2c:	3884983a 	sll	r2,r7,r2
   24f30:	19c00017 	ldw	r7,0(r3)
   24f34:	1a3ffe04 	addi	r8,r3,-8
   24f38:	1144b03a 	or	r2,r2,r5
   24f3c:	32000315 	stw	r8,12(r6)
   24f40:	31c00215 	stw	r7,8(r6)
   24f44:	20800115 	stw	r2,4(r4)
   24f48:	19800015 	stw	r6,0(r3)
   24f4c:	39800315 	stw	r6,12(r7)
   24f50:	8809883a 	mov	r4,r17
   24f54:	dfc00217 	ldw	ra,8(sp)
   24f58:	dc400117 	ldw	r17,4(sp)
   24f5c:	dc000017 	ldw	r16,0(sp)
   24f60:	dec00304 	addi	sp,sp,12
   24f64:	002dc541 	jmpi	2dc54 <__malloc_unlock>
   24f68:	f800283a 	ret
   24f6c:	100ad27a 	srli	r5,r2,9
   24f70:	00c00104 	movi	r3,4
   24f74:	19404a36 	bltu	r3,r5,250a0 <_free_r+0x240>
   24f78:	100ad1ba 	srli	r5,r2,6
   24f7c:	28c00e44 	addi	r3,r5,57
   24f80:	18c7883a 	add	r3,r3,r3
   24f84:	29400e04 	addi	r5,r5,56
   24f88:	18c7883a 	add	r3,r3,r3
   24f8c:	18c7883a 	add	r3,r3,r3
   24f90:	1909883a 	add	r4,r3,r4
   24f94:	20c00017 	ldw	r3,0(r4)
   24f98:	01c000f4 	movhi	r7,3
   24f9c:	213ffe04 	addi	r4,r4,-8
   24fa0:	39cbfb04 	addi	r7,r7,12268
   24fa4:	20c04426 	beq	r4,r3,250b8 <_free_r+0x258>
   24fa8:	01ffff04 	movi	r7,-4
   24fac:	19400117 	ldw	r5,4(r3)
   24fb0:	29ca703a 	and	r5,r5,r7
   24fb4:	1140022e 	bgeu	r2,r5,24fc0 <_free_r+0x160>
   24fb8:	18c00217 	ldw	r3,8(r3)
   24fbc:	20fffb1e 	bne	r4,r3,24fac <__alt_data_end+0xfffe4fac>
   24fc0:	19000317 	ldw	r4,12(r3)
   24fc4:	31000315 	stw	r4,12(r6)
   24fc8:	30c00215 	stw	r3,8(r6)
   24fcc:	21800215 	stw	r6,8(r4)
   24fd0:	19800315 	stw	r6,12(r3)
   24fd4:	003fde06 	br	24f50 <__alt_data_end+0xfffe4f50>
   24fd8:	29c00217 	ldw	r7,8(r5)
   24fdc:	10c5883a 	add	r2,r2,r3
   24fe0:	00c000f4 	movhi	r3,3
   24fe4:	18cbfd04 	addi	r3,r3,12276
   24fe8:	38c03b26 	beq	r7,r3,250d8 <_free_r+0x278>
   24fec:	2a000317 	ldw	r8,12(r5)
   24ff0:	11400054 	ori	r5,r2,1
   24ff4:	3087883a 	add	r3,r6,r2
   24ff8:	3a000315 	stw	r8,12(r7)
   24ffc:	41c00215 	stw	r7,8(r8)
   25000:	31400115 	stw	r5,4(r6)
   25004:	18800015 	stw	r2,0(r3)
   25008:	003fbd06 	br	24f00 <__alt_data_end+0xfffe4f00>
   2500c:	39c0004c 	andi	r7,r7,1
   25010:	10c5883a 	add	r2,r2,r3
   25014:	3800071e 	bne	r7,zero,25034 <_free_r+0x1d4>
   25018:	81fffe17 	ldw	r7,-8(r16)
   2501c:	31cdc83a 	sub	r6,r6,r7
   25020:	30c00317 	ldw	r3,12(r6)
   25024:	31400217 	ldw	r5,8(r6)
   25028:	11c5883a 	add	r2,r2,r7
   2502c:	28c00315 	stw	r3,12(r5)
   25030:	19400215 	stw	r5,8(r3)
   25034:	10c00054 	ori	r3,r2,1
   25038:	30c00115 	stw	r3,4(r6)
   2503c:	00c000f4 	movhi	r3,3
   25040:	18d1c204 	addi	r3,r3,18184
   25044:	18c00017 	ldw	r3,0(r3)
   25048:	21800215 	stw	r6,8(r4)
   2504c:	10ffc036 	bltu	r2,r3,24f50 <__alt_data_end+0xfffe4f50>
   25050:	008000f4 	movhi	r2,3
   25054:	1098d104 	addi	r2,r2,25412
   25058:	11400017 	ldw	r5,0(r2)
   2505c:	8809883a 	mov	r4,r17
   25060:	0024d3c0 	call	24d3c <_malloc_trim_r>
   25064:	003fba06 	br	24f50 <__alt_data_end+0xfffe4f50>
   25068:	28c9883a 	add	r4,r5,r3
   2506c:	21000117 	ldw	r4,4(r4)
   25070:	2100004c 	andi	r4,r4,1
   25074:	2000391e 	bne	r4,zero,2515c <_free_r+0x2fc>
   25078:	29c00217 	ldw	r7,8(r5)
   2507c:	29000317 	ldw	r4,12(r5)
   25080:	1885883a 	add	r2,r3,r2
   25084:	10c00054 	ori	r3,r2,1
   25088:	39000315 	stw	r4,12(r7)
   2508c:	21c00215 	stw	r7,8(r4)
   25090:	30c00115 	stw	r3,4(r6)
   25094:	308d883a 	add	r6,r6,r2
   25098:	30800015 	stw	r2,0(r6)
   2509c:	003fac06 	br	24f50 <__alt_data_end+0xfffe4f50>
   250a0:	00c00504 	movi	r3,20
   250a4:	19401536 	bltu	r3,r5,250fc <_free_r+0x29c>
   250a8:	28c01704 	addi	r3,r5,92
   250ac:	18c7883a 	add	r3,r3,r3
   250b0:	294016c4 	addi	r5,r5,91
   250b4:	003fb406 	br	24f88 <__alt_data_end+0xfffe4f88>
   250b8:	280bd0ba 	srai	r5,r5,2
   250bc:	00c00044 	movi	r3,1
   250c0:	38800117 	ldw	r2,4(r7)
   250c4:	194a983a 	sll	r5,r3,r5
   250c8:	2007883a 	mov	r3,r4
   250cc:	2884b03a 	or	r2,r5,r2
   250d0:	38800115 	stw	r2,4(r7)
   250d4:	003fbb06 	br	24fc4 <__alt_data_end+0xfffe4fc4>
   250d8:	21800515 	stw	r6,20(r4)
   250dc:	21800415 	stw	r6,16(r4)
   250e0:	10c00054 	ori	r3,r2,1
   250e4:	31c00315 	stw	r7,12(r6)
   250e8:	31c00215 	stw	r7,8(r6)
   250ec:	30c00115 	stw	r3,4(r6)
   250f0:	308d883a 	add	r6,r6,r2
   250f4:	30800015 	stw	r2,0(r6)
   250f8:	003f9506 	br	24f50 <__alt_data_end+0xfffe4f50>
   250fc:	00c01504 	movi	r3,84
   25100:	19400536 	bltu	r3,r5,25118 <_free_r+0x2b8>
   25104:	100ad33a 	srli	r5,r2,12
   25108:	28c01bc4 	addi	r3,r5,111
   2510c:	18c7883a 	add	r3,r3,r3
   25110:	29401b84 	addi	r5,r5,110
   25114:	003f9c06 	br	24f88 <__alt_data_end+0xfffe4f88>
   25118:	00c05504 	movi	r3,340
   2511c:	19400536 	bltu	r3,r5,25134 <_free_r+0x2d4>
   25120:	100ad3fa 	srli	r5,r2,15
   25124:	28c01e04 	addi	r3,r5,120
   25128:	18c7883a 	add	r3,r3,r3
   2512c:	29401dc4 	addi	r5,r5,119
   25130:	003f9506 	br	24f88 <__alt_data_end+0xfffe4f88>
   25134:	00c15504 	movi	r3,1364
   25138:	19400536 	bltu	r3,r5,25150 <_free_r+0x2f0>
   2513c:	100ad4ba 	srli	r5,r2,18
   25140:	28c01f44 	addi	r3,r5,125
   25144:	18c7883a 	add	r3,r3,r3
   25148:	29401f04 	addi	r5,r5,124
   2514c:	003f8e06 	br	24f88 <__alt_data_end+0xfffe4f88>
   25150:	00c03f84 	movi	r3,254
   25154:	01401f84 	movi	r5,126
   25158:	003f8b06 	br	24f88 <__alt_data_end+0xfffe4f88>
   2515c:	10c00054 	ori	r3,r2,1
   25160:	30c00115 	stw	r3,4(r6)
   25164:	308d883a 	add	r6,r6,r2
   25168:	30800015 	stw	r2,0(r6)
   2516c:	003f7806 	br	24f50 <__alt_data_end+0xfffe4f50>

00025170 <__sfvwrite_r>:
   25170:	30800217 	ldw	r2,8(r6)
   25174:	10006726 	beq	r2,zero,25314 <__sfvwrite_r+0x1a4>
   25178:	28c0030b 	ldhu	r3,12(r5)
   2517c:	defff404 	addi	sp,sp,-48
   25180:	dd400715 	stw	r21,28(sp)
   25184:	dd000615 	stw	r20,24(sp)
   25188:	dc000215 	stw	r16,8(sp)
   2518c:	dfc00b15 	stw	ra,44(sp)
   25190:	df000a15 	stw	fp,40(sp)
   25194:	ddc00915 	stw	r23,36(sp)
   25198:	dd800815 	stw	r22,32(sp)
   2519c:	dcc00515 	stw	r19,20(sp)
   251a0:	dc800415 	stw	r18,16(sp)
   251a4:	dc400315 	stw	r17,12(sp)
   251a8:	1880020c 	andi	r2,r3,8
   251ac:	2821883a 	mov	r16,r5
   251b0:	202b883a 	mov	r21,r4
   251b4:	3029883a 	mov	r20,r6
   251b8:	10002726 	beq	r2,zero,25258 <__sfvwrite_r+0xe8>
   251bc:	28800417 	ldw	r2,16(r5)
   251c0:	10002526 	beq	r2,zero,25258 <__sfvwrite_r+0xe8>
   251c4:	1880008c 	andi	r2,r3,2
   251c8:	a4400017 	ldw	r17,0(r20)
   251cc:	10002a26 	beq	r2,zero,25278 <__sfvwrite_r+0x108>
   251d0:	05a00034 	movhi	r22,32768
   251d4:	0027883a 	mov	r19,zero
   251d8:	0025883a 	mov	r18,zero
   251dc:	b5bf0004 	addi	r22,r22,-1024
   251e0:	980d883a 	mov	r6,r19
   251e4:	a809883a 	mov	r4,r21
   251e8:	90004626 	beq	r18,zero,25304 <__sfvwrite_r+0x194>
   251ec:	900f883a 	mov	r7,r18
   251f0:	b480022e 	bgeu	r22,r18,251fc <__sfvwrite_r+0x8c>
   251f4:	01e00034 	movhi	r7,32768
   251f8:	39ff0004 	addi	r7,r7,-1024
   251fc:	80800917 	ldw	r2,36(r16)
   25200:	81400717 	ldw	r5,28(r16)
   25204:	103ee83a 	callr	r2
   25208:	00805a0e 	bge	zero,r2,25374 <__sfvwrite_r+0x204>
   2520c:	a0c00217 	ldw	r3,8(r20)
   25210:	98a7883a 	add	r19,r19,r2
   25214:	90a5c83a 	sub	r18,r18,r2
   25218:	1885c83a 	sub	r2,r3,r2
   2521c:	a0800215 	stw	r2,8(r20)
   25220:	103fef1e 	bne	r2,zero,251e0 <__alt_data_end+0xfffe51e0>
   25224:	0005883a 	mov	r2,zero
   25228:	dfc00b17 	ldw	ra,44(sp)
   2522c:	df000a17 	ldw	fp,40(sp)
   25230:	ddc00917 	ldw	r23,36(sp)
   25234:	dd800817 	ldw	r22,32(sp)
   25238:	dd400717 	ldw	r21,28(sp)
   2523c:	dd000617 	ldw	r20,24(sp)
   25240:	dcc00517 	ldw	r19,20(sp)
   25244:	dc800417 	ldw	r18,16(sp)
   25248:	dc400317 	ldw	r17,12(sp)
   2524c:	dc000217 	ldw	r16,8(sp)
   25250:	dec00c04 	addi	sp,sp,48
   25254:	f800283a 	ret
   25258:	800b883a 	mov	r5,r16
   2525c:	a809883a 	mov	r4,r21
   25260:	0022ce00 	call	22ce0 <__swsetup_r>
   25264:	1000ee1e 	bne	r2,zero,25620 <__sfvwrite_r+0x4b0>
   25268:	80c0030b 	ldhu	r3,12(r16)
   2526c:	a4400017 	ldw	r17,0(r20)
   25270:	1880008c 	andi	r2,r3,2
   25274:	103fd61e 	bne	r2,zero,251d0 <__alt_data_end+0xfffe51d0>
   25278:	1880004c 	andi	r2,r3,1
   2527c:	1000421e 	bne	r2,zero,25388 <__sfvwrite_r+0x218>
   25280:	0039883a 	mov	fp,zero
   25284:	0025883a 	mov	r18,zero
   25288:	90001a26 	beq	r18,zero,252f4 <__sfvwrite_r+0x184>
   2528c:	1880800c 	andi	r2,r3,512
   25290:	84c00217 	ldw	r19,8(r16)
   25294:	10002126 	beq	r2,zero,2531c <__sfvwrite_r+0x1ac>
   25298:	982f883a 	mov	r23,r19
   2529c:	94c09636 	bltu	r18,r19,254f8 <__sfvwrite_r+0x388>
   252a0:	1881200c 	andi	r2,r3,1152
   252a4:	1000a11e 	bne	r2,zero,2552c <__sfvwrite_r+0x3bc>
   252a8:	81000017 	ldw	r4,0(r16)
   252ac:	b80d883a 	mov	r6,r23
   252b0:	e00b883a 	mov	r5,fp
   252b4:	00264900 	call	26490 <memmove>
   252b8:	80c00217 	ldw	r3,8(r16)
   252bc:	81000017 	ldw	r4,0(r16)
   252c0:	9005883a 	mov	r2,r18
   252c4:	1ce7c83a 	sub	r19,r3,r19
   252c8:	25cf883a 	add	r7,r4,r23
   252cc:	84c00215 	stw	r19,8(r16)
   252d0:	81c00015 	stw	r7,0(r16)
   252d4:	a0c00217 	ldw	r3,8(r20)
   252d8:	e0b9883a 	add	fp,fp,r2
   252dc:	90a5c83a 	sub	r18,r18,r2
   252e0:	18a7c83a 	sub	r19,r3,r2
   252e4:	a4c00215 	stw	r19,8(r20)
   252e8:	983fce26 	beq	r19,zero,25224 <__alt_data_end+0xfffe5224>
   252ec:	80c0030b 	ldhu	r3,12(r16)
   252f0:	903fe61e 	bne	r18,zero,2528c <__alt_data_end+0xfffe528c>
   252f4:	8f000017 	ldw	fp,0(r17)
   252f8:	8c800117 	ldw	r18,4(r17)
   252fc:	8c400204 	addi	r17,r17,8
   25300:	003fe106 	br	25288 <__alt_data_end+0xfffe5288>
   25304:	8cc00017 	ldw	r19,0(r17)
   25308:	8c800117 	ldw	r18,4(r17)
   2530c:	8c400204 	addi	r17,r17,8
   25310:	003fb306 	br	251e0 <__alt_data_end+0xfffe51e0>
   25314:	0005883a 	mov	r2,zero
   25318:	f800283a 	ret
   2531c:	81000017 	ldw	r4,0(r16)
   25320:	80800417 	ldw	r2,16(r16)
   25324:	11005a36 	bltu	r2,r4,25490 <__sfvwrite_r+0x320>
   25328:	85c00517 	ldw	r23,20(r16)
   2532c:	95c05836 	bltu	r18,r23,25490 <__sfvwrite_r+0x320>
   25330:	00a00034 	movhi	r2,32768
   25334:	10bfffc4 	addi	r2,r2,-1
   25338:	9009883a 	mov	r4,r18
   2533c:	1480012e 	bgeu	r2,r18,25344 <__sfvwrite_r+0x1d4>
   25340:	1009883a 	mov	r4,r2
   25344:	b80b883a 	mov	r5,r23
   25348:	002ac140 	call	2ac14 <__divsi3>
   2534c:	b80b883a 	mov	r5,r23
   25350:	1009883a 	mov	r4,r2
   25354:	002adc80 	call	2adc8 <__mulsi3>
   25358:	81400717 	ldw	r5,28(r16)
   2535c:	80c00917 	ldw	r3,36(r16)
   25360:	100f883a 	mov	r7,r2
   25364:	e00d883a 	mov	r6,fp
   25368:	a809883a 	mov	r4,r21
   2536c:	183ee83a 	callr	r3
   25370:	00bfd816 	blt	zero,r2,252d4 <__alt_data_end+0xfffe52d4>
   25374:	8080030b 	ldhu	r2,12(r16)
   25378:	10801014 	ori	r2,r2,64
   2537c:	8080030d 	sth	r2,12(r16)
   25380:	00bfffc4 	movi	r2,-1
   25384:	003fa806 	br	25228 <__alt_data_end+0xfffe5228>
   25388:	0027883a 	mov	r19,zero
   2538c:	0011883a 	mov	r8,zero
   25390:	0039883a 	mov	fp,zero
   25394:	0025883a 	mov	r18,zero
   25398:	90001f26 	beq	r18,zero,25418 <__sfvwrite_r+0x2a8>
   2539c:	40005a26 	beq	r8,zero,25508 <__sfvwrite_r+0x398>
   253a0:	982d883a 	mov	r22,r19
   253a4:	94c0012e 	bgeu	r18,r19,253ac <__sfvwrite_r+0x23c>
   253a8:	902d883a 	mov	r22,r18
   253ac:	81000017 	ldw	r4,0(r16)
   253b0:	80800417 	ldw	r2,16(r16)
   253b4:	b02f883a 	mov	r23,r22
   253b8:	81c00517 	ldw	r7,20(r16)
   253bc:	1100032e 	bgeu	r2,r4,253cc <__sfvwrite_r+0x25c>
   253c0:	80c00217 	ldw	r3,8(r16)
   253c4:	38c7883a 	add	r3,r7,r3
   253c8:	1d801816 	blt	r3,r22,2542c <__sfvwrite_r+0x2bc>
   253cc:	b1c03e16 	blt	r22,r7,254c8 <__sfvwrite_r+0x358>
   253d0:	80800917 	ldw	r2,36(r16)
   253d4:	81400717 	ldw	r5,28(r16)
   253d8:	e00d883a 	mov	r6,fp
   253dc:	da000115 	stw	r8,4(sp)
   253e0:	a809883a 	mov	r4,r21
   253e4:	103ee83a 	callr	r2
   253e8:	102f883a 	mov	r23,r2
   253ec:	da000117 	ldw	r8,4(sp)
   253f0:	00bfe00e 	bge	zero,r2,25374 <__alt_data_end+0xfffe5374>
   253f4:	9de7c83a 	sub	r19,r19,r23
   253f8:	98001f26 	beq	r19,zero,25478 <__sfvwrite_r+0x308>
   253fc:	a0800217 	ldw	r2,8(r20)
   25400:	e5f9883a 	add	fp,fp,r23
   25404:	95e5c83a 	sub	r18,r18,r23
   25408:	15efc83a 	sub	r23,r2,r23
   2540c:	a5c00215 	stw	r23,8(r20)
   25410:	b83f8426 	beq	r23,zero,25224 <__alt_data_end+0xfffe5224>
   25414:	903fe11e 	bne	r18,zero,2539c <__alt_data_end+0xfffe539c>
   25418:	8f000017 	ldw	fp,0(r17)
   2541c:	8c800117 	ldw	r18,4(r17)
   25420:	0011883a 	mov	r8,zero
   25424:	8c400204 	addi	r17,r17,8
   25428:	003fdb06 	br	25398 <__alt_data_end+0xfffe5398>
   2542c:	180d883a 	mov	r6,r3
   25430:	e00b883a 	mov	r5,fp
   25434:	da000115 	stw	r8,4(sp)
   25438:	d8c00015 	stw	r3,0(sp)
   2543c:	00264900 	call	26490 <memmove>
   25440:	d8c00017 	ldw	r3,0(sp)
   25444:	80800017 	ldw	r2,0(r16)
   25448:	800b883a 	mov	r5,r16
   2544c:	a809883a 	mov	r4,r21
   25450:	10c5883a 	add	r2,r2,r3
   25454:	80800015 	stw	r2,0(r16)
   25458:	d8c00015 	stw	r3,0(sp)
   2545c:	00249000 	call	24900 <_fflush_r>
   25460:	d8c00017 	ldw	r3,0(sp)
   25464:	da000117 	ldw	r8,4(sp)
   25468:	103fc21e 	bne	r2,zero,25374 <__alt_data_end+0xfffe5374>
   2546c:	182f883a 	mov	r23,r3
   25470:	9de7c83a 	sub	r19,r19,r23
   25474:	983fe11e 	bne	r19,zero,253fc <__alt_data_end+0xfffe53fc>
   25478:	800b883a 	mov	r5,r16
   2547c:	a809883a 	mov	r4,r21
   25480:	00249000 	call	24900 <_fflush_r>
   25484:	103fbb1e 	bne	r2,zero,25374 <__alt_data_end+0xfffe5374>
   25488:	0011883a 	mov	r8,zero
   2548c:	003fdb06 	br	253fc <__alt_data_end+0xfffe53fc>
   25490:	94c0012e 	bgeu	r18,r19,25498 <__sfvwrite_r+0x328>
   25494:	9027883a 	mov	r19,r18
   25498:	980d883a 	mov	r6,r19
   2549c:	e00b883a 	mov	r5,fp
   254a0:	00264900 	call	26490 <memmove>
   254a4:	80800217 	ldw	r2,8(r16)
   254a8:	80c00017 	ldw	r3,0(r16)
   254ac:	14c5c83a 	sub	r2,r2,r19
   254b0:	1cc7883a 	add	r3,r3,r19
   254b4:	80800215 	stw	r2,8(r16)
   254b8:	80c00015 	stw	r3,0(r16)
   254bc:	10004326 	beq	r2,zero,255cc <__sfvwrite_r+0x45c>
   254c0:	9805883a 	mov	r2,r19
   254c4:	003f8306 	br	252d4 <__alt_data_end+0xfffe52d4>
   254c8:	b00d883a 	mov	r6,r22
   254cc:	e00b883a 	mov	r5,fp
   254d0:	da000115 	stw	r8,4(sp)
   254d4:	00264900 	call	26490 <memmove>
   254d8:	80800217 	ldw	r2,8(r16)
   254dc:	80c00017 	ldw	r3,0(r16)
   254e0:	da000117 	ldw	r8,4(sp)
   254e4:	1585c83a 	sub	r2,r2,r22
   254e8:	1dad883a 	add	r22,r3,r22
   254ec:	80800215 	stw	r2,8(r16)
   254f0:	85800015 	stw	r22,0(r16)
   254f4:	003fbf06 	br	253f4 <__alt_data_end+0xfffe53f4>
   254f8:	81000017 	ldw	r4,0(r16)
   254fc:	9027883a 	mov	r19,r18
   25500:	902f883a 	mov	r23,r18
   25504:	003f6906 	br	252ac <__alt_data_end+0xfffe52ac>
   25508:	900d883a 	mov	r6,r18
   2550c:	01400284 	movi	r5,10
   25510:	e009883a 	mov	r4,fp
   25514:	00262640 	call	26264 <memchr>
   25518:	10003e26 	beq	r2,zero,25614 <__sfvwrite_r+0x4a4>
   2551c:	10800044 	addi	r2,r2,1
   25520:	1727c83a 	sub	r19,r2,fp
   25524:	02000044 	movi	r8,1
   25528:	003f9d06 	br	253a0 <__alt_data_end+0xfffe53a0>
   2552c:	80800517 	ldw	r2,20(r16)
   25530:	81400417 	ldw	r5,16(r16)
   25534:	81c00017 	ldw	r7,0(r16)
   25538:	10a7883a 	add	r19,r2,r2
   2553c:	9885883a 	add	r2,r19,r2
   25540:	1026d7fa 	srli	r19,r2,31
   25544:	396dc83a 	sub	r22,r7,r5
   25548:	b1000044 	addi	r4,r22,1
   2554c:	9885883a 	add	r2,r19,r2
   25550:	1027d07a 	srai	r19,r2,1
   25554:	2485883a 	add	r2,r4,r18
   25558:	980d883a 	mov	r6,r19
   2555c:	9880022e 	bgeu	r19,r2,25568 <__sfvwrite_r+0x3f8>
   25560:	1027883a 	mov	r19,r2
   25564:	100d883a 	mov	r6,r2
   25568:	18c1000c 	andi	r3,r3,1024
   2556c:	18001c26 	beq	r3,zero,255e0 <__sfvwrite_r+0x470>
   25570:	300b883a 	mov	r5,r6
   25574:	a809883a 	mov	r4,r21
   25578:	0025a580 	call	25a58 <_malloc_r>
   2557c:	102f883a 	mov	r23,r2
   25580:	10002926 	beq	r2,zero,25628 <__sfvwrite_r+0x4b8>
   25584:	81400417 	ldw	r5,16(r16)
   25588:	b00d883a 	mov	r6,r22
   2558c:	1009883a 	mov	r4,r2
   25590:	00263480 	call	26348 <memcpy>
   25594:	8080030b 	ldhu	r2,12(r16)
   25598:	00fedfc4 	movi	r3,-1153
   2559c:	10c4703a 	and	r2,r2,r3
   255a0:	10802014 	ori	r2,r2,128
   255a4:	8080030d 	sth	r2,12(r16)
   255a8:	bd89883a 	add	r4,r23,r22
   255ac:	9d8fc83a 	sub	r7,r19,r22
   255b0:	85c00415 	stw	r23,16(r16)
   255b4:	84c00515 	stw	r19,20(r16)
   255b8:	81000015 	stw	r4,0(r16)
   255bc:	9027883a 	mov	r19,r18
   255c0:	81c00215 	stw	r7,8(r16)
   255c4:	902f883a 	mov	r23,r18
   255c8:	003f3806 	br	252ac <__alt_data_end+0xfffe52ac>
   255cc:	800b883a 	mov	r5,r16
   255d0:	a809883a 	mov	r4,r21
   255d4:	00249000 	call	24900 <_fflush_r>
   255d8:	103fb926 	beq	r2,zero,254c0 <__alt_data_end+0xfffe54c0>
   255dc:	003f6506 	br	25374 <__alt_data_end+0xfffe5374>
   255e0:	a809883a 	mov	r4,r21
   255e4:	00277cc0 	call	277cc <_realloc_r>
   255e8:	102f883a 	mov	r23,r2
   255ec:	103fee1e 	bne	r2,zero,255a8 <__alt_data_end+0xfffe55a8>
   255f0:	81400417 	ldw	r5,16(r16)
   255f4:	a809883a 	mov	r4,r21
   255f8:	0024e600 	call	24e60 <_free_r>
   255fc:	8080030b 	ldhu	r2,12(r16)
   25600:	00ffdfc4 	movi	r3,-129
   25604:	1884703a 	and	r2,r3,r2
   25608:	00c00304 	movi	r3,12
   2560c:	a8c00015 	stw	r3,0(r21)
   25610:	003f5906 	br	25378 <__alt_data_end+0xfffe5378>
   25614:	94c00044 	addi	r19,r18,1
   25618:	02000044 	movi	r8,1
   2561c:	003f6006 	br	253a0 <__alt_data_end+0xfffe53a0>
   25620:	00bfffc4 	movi	r2,-1
   25624:	003f0006 	br	25228 <__alt_data_end+0xfffe5228>
   25628:	00800304 	movi	r2,12
   2562c:	a8800015 	stw	r2,0(r21)
   25630:	8080030b 	ldhu	r2,12(r16)
   25634:	003f5006 	br	25378 <__alt_data_end+0xfffe5378>

00025638 <_fwalk>:
   25638:	defff704 	addi	sp,sp,-36
   2563c:	dd000415 	stw	r20,16(sp)
   25640:	dfc00815 	stw	ra,32(sp)
   25644:	ddc00715 	stw	r23,28(sp)
   25648:	dd800615 	stw	r22,24(sp)
   2564c:	dd400515 	stw	r21,20(sp)
   25650:	dcc00315 	stw	r19,12(sp)
   25654:	dc800215 	stw	r18,8(sp)
   25658:	dc400115 	stw	r17,4(sp)
   2565c:	dc000015 	stw	r16,0(sp)
   25660:	2500b804 	addi	r20,r4,736
   25664:	a0002326 	beq	r20,zero,256f4 <_fwalk+0xbc>
   25668:	282b883a 	mov	r21,r5
   2566c:	002f883a 	mov	r23,zero
   25670:	05800044 	movi	r22,1
   25674:	04ffffc4 	movi	r19,-1
   25678:	a4400117 	ldw	r17,4(r20)
   2567c:	a4800217 	ldw	r18,8(r20)
   25680:	8c7fffc4 	addi	r17,r17,-1
   25684:	88000d16 	blt	r17,zero,256bc <_fwalk+0x84>
   25688:	94000304 	addi	r16,r18,12
   2568c:	94800384 	addi	r18,r18,14
   25690:	8080000b 	ldhu	r2,0(r16)
   25694:	8c7fffc4 	addi	r17,r17,-1
   25698:	813ffd04 	addi	r4,r16,-12
   2569c:	b080042e 	bgeu	r22,r2,256b0 <_fwalk+0x78>
   256a0:	9080000f 	ldh	r2,0(r18)
   256a4:	14c00226 	beq	r2,r19,256b0 <_fwalk+0x78>
   256a8:	a83ee83a 	callr	r21
   256ac:	b8aeb03a 	or	r23,r23,r2
   256b0:	84001a04 	addi	r16,r16,104
   256b4:	94801a04 	addi	r18,r18,104
   256b8:	8cfff51e 	bne	r17,r19,25690 <__alt_data_end+0xfffe5690>
   256bc:	a5000017 	ldw	r20,0(r20)
   256c0:	a03fed1e 	bne	r20,zero,25678 <__alt_data_end+0xfffe5678>
   256c4:	b805883a 	mov	r2,r23
   256c8:	dfc00817 	ldw	ra,32(sp)
   256cc:	ddc00717 	ldw	r23,28(sp)
   256d0:	dd800617 	ldw	r22,24(sp)
   256d4:	dd400517 	ldw	r21,20(sp)
   256d8:	dd000417 	ldw	r20,16(sp)
   256dc:	dcc00317 	ldw	r19,12(sp)
   256e0:	dc800217 	ldw	r18,8(sp)
   256e4:	dc400117 	ldw	r17,4(sp)
   256e8:	dc000017 	ldw	r16,0(sp)
   256ec:	dec00904 	addi	sp,sp,36
   256f0:	f800283a 	ret
   256f4:	002f883a 	mov	r23,zero
   256f8:	003ff206 	br	256c4 <__alt_data_end+0xfffe56c4>

000256fc <_fwalk_reent>:
   256fc:	defff704 	addi	sp,sp,-36
   25700:	dd000415 	stw	r20,16(sp)
   25704:	dfc00815 	stw	ra,32(sp)
   25708:	ddc00715 	stw	r23,28(sp)
   2570c:	dd800615 	stw	r22,24(sp)
   25710:	dd400515 	stw	r21,20(sp)
   25714:	dcc00315 	stw	r19,12(sp)
   25718:	dc800215 	stw	r18,8(sp)
   2571c:	dc400115 	stw	r17,4(sp)
   25720:	dc000015 	stw	r16,0(sp)
   25724:	2500b804 	addi	r20,r4,736
   25728:	a0002326 	beq	r20,zero,257b8 <_fwalk_reent+0xbc>
   2572c:	282b883a 	mov	r21,r5
   25730:	2027883a 	mov	r19,r4
   25734:	002f883a 	mov	r23,zero
   25738:	05800044 	movi	r22,1
   2573c:	04bfffc4 	movi	r18,-1
   25740:	a4400117 	ldw	r17,4(r20)
   25744:	a4000217 	ldw	r16,8(r20)
   25748:	8c7fffc4 	addi	r17,r17,-1
   2574c:	88000c16 	blt	r17,zero,25780 <_fwalk_reent+0x84>
   25750:	84000304 	addi	r16,r16,12
   25754:	8080000b 	ldhu	r2,0(r16)
   25758:	8c7fffc4 	addi	r17,r17,-1
   2575c:	817ffd04 	addi	r5,r16,-12
   25760:	b080052e 	bgeu	r22,r2,25778 <_fwalk_reent+0x7c>
   25764:	8080008f 	ldh	r2,2(r16)
   25768:	9809883a 	mov	r4,r19
   2576c:	14800226 	beq	r2,r18,25778 <_fwalk_reent+0x7c>
   25770:	a83ee83a 	callr	r21
   25774:	b8aeb03a 	or	r23,r23,r2
   25778:	84001a04 	addi	r16,r16,104
   2577c:	8cbff51e 	bne	r17,r18,25754 <__alt_data_end+0xfffe5754>
   25780:	a5000017 	ldw	r20,0(r20)
   25784:	a03fee1e 	bne	r20,zero,25740 <__alt_data_end+0xfffe5740>
   25788:	b805883a 	mov	r2,r23
   2578c:	dfc00817 	ldw	ra,32(sp)
   25790:	ddc00717 	ldw	r23,28(sp)
   25794:	dd800617 	ldw	r22,24(sp)
   25798:	dd400517 	ldw	r21,20(sp)
   2579c:	dd000417 	ldw	r20,16(sp)
   257a0:	dcc00317 	ldw	r19,12(sp)
   257a4:	dc800217 	ldw	r18,8(sp)
   257a8:	dc400117 	ldw	r17,4(sp)
   257ac:	dc000017 	ldw	r16,0(sp)
   257b0:	dec00904 	addi	sp,sp,36
   257b4:	f800283a 	ret
   257b8:	002f883a 	mov	r23,zero
   257bc:	003ff206 	br	25788 <__alt_data_end+0xfffe5788>

000257c0 <_setlocale_r>:
   257c0:	30001b26 	beq	r6,zero,25830 <_setlocale_r+0x70>
   257c4:	014000f4 	movhi	r5,3
   257c8:	defffe04 	addi	sp,sp,-8
   257cc:	294a2904 	addi	r5,r5,10404
   257d0:	3009883a 	mov	r4,r6
   257d4:	dc000015 	stw	r16,0(sp)
   257d8:	dfc00115 	stw	ra,4(sp)
   257dc:	3021883a 	mov	r16,r6
   257e0:	0027f340 	call	27f34 <strcmp>
   257e4:	1000061e 	bne	r2,zero,25800 <_setlocale_r+0x40>
   257e8:	008000f4 	movhi	r2,3
   257ec:	108a2804 	addi	r2,r2,10400
   257f0:	dfc00117 	ldw	ra,4(sp)
   257f4:	dc000017 	ldw	r16,0(sp)
   257f8:	dec00204 	addi	sp,sp,8
   257fc:	f800283a 	ret
   25800:	014000f4 	movhi	r5,3
   25804:	294a2804 	addi	r5,r5,10400
   25808:	8009883a 	mov	r4,r16
   2580c:	0027f340 	call	27f34 <strcmp>
   25810:	103ff526 	beq	r2,zero,257e8 <__alt_data_end+0xfffe57e8>
   25814:	014000f4 	movhi	r5,3
   25818:	294a1304 	addi	r5,r5,10316
   2581c:	8009883a 	mov	r4,r16
   25820:	0027f340 	call	27f34 <strcmp>
   25824:	103ff026 	beq	r2,zero,257e8 <__alt_data_end+0xfffe57e8>
   25828:	0005883a 	mov	r2,zero
   2582c:	003ff006 	br	257f0 <__alt_data_end+0xfffe57f0>
   25830:	008000f4 	movhi	r2,3
   25834:	108a2804 	addi	r2,r2,10400
   25838:	f800283a 	ret

0002583c <__locale_charset>:
   2583c:	008000f4 	movhi	r2,3
   25840:	108be504 	addi	r2,r2,12180
   25844:	f800283a 	ret

00025848 <__locale_mb_cur_max>:
   25848:	008000f4 	movhi	r2,3
   2584c:	1091c004 	addi	r2,r2,18176
   25850:	10800017 	ldw	r2,0(r2)
   25854:	f800283a 	ret

00025858 <__locale_msgcharset>:
   25858:	008000f4 	movhi	r2,3
   2585c:	108bdd04 	addi	r2,r2,12148
   25860:	f800283a 	ret

00025864 <__locale_cjk_lang>:
   25864:	0005883a 	mov	r2,zero
   25868:	f800283a 	ret

0002586c <_localeconv_r>:
   2586c:	008000f4 	movhi	r2,3
   25870:	108bed04 	addi	r2,r2,12212
   25874:	f800283a 	ret

00025878 <setlocale>:
   25878:	008000f4 	movhi	r2,3
   2587c:	1091bf04 	addi	r2,r2,18172
   25880:	280d883a 	mov	r6,r5
   25884:	200b883a 	mov	r5,r4
   25888:	11000017 	ldw	r4,0(r2)
   2588c:	00257c01 	jmpi	257c0 <_setlocale_r>

00025890 <localeconv>:
   25890:	008000f4 	movhi	r2,3
   25894:	108bed04 	addi	r2,r2,12212
   25898:	f800283a 	ret

0002589c <__smakebuf_r>:
   2589c:	2880030b 	ldhu	r2,12(r5)
   258a0:	10c0008c 	andi	r3,r2,2
   258a4:	1800411e 	bne	r3,zero,259ac <__smakebuf_r+0x110>
   258a8:	deffec04 	addi	sp,sp,-80
   258ac:	dc000f15 	stw	r16,60(sp)
   258b0:	2821883a 	mov	r16,r5
   258b4:	2940038f 	ldh	r5,14(r5)
   258b8:	dc401015 	stw	r17,64(sp)
   258bc:	dfc01315 	stw	ra,76(sp)
   258c0:	dcc01215 	stw	r19,72(sp)
   258c4:	dc801115 	stw	r18,68(sp)
   258c8:	2023883a 	mov	r17,r4
   258cc:	28001c16 	blt	r5,zero,25940 <__smakebuf_r+0xa4>
   258d0:	d80d883a 	mov	r6,sp
   258d4:	0029ba40 	call	29ba4 <_fstat_r>
   258d8:	10001816 	blt	r2,zero,2593c <__smakebuf_r+0xa0>
   258dc:	d8800117 	ldw	r2,4(sp)
   258e0:	00e00014 	movui	r3,32768
   258e4:	10bc000c 	andi	r2,r2,61440
   258e8:	14c80020 	cmpeqi	r19,r2,8192
   258ec:	10c03726 	beq	r2,r3,259cc <__smakebuf_r+0x130>
   258f0:	80c0030b 	ldhu	r3,12(r16)
   258f4:	18c20014 	ori	r3,r3,2048
   258f8:	80c0030d 	sth	r3,12(r16)
   258fc:	00c80004 	movi	r3,8192
   25900:	10c0521e 	bne	r2,r3,25a4c <__smakebuf_r+0x1b0>
   25904:	8140038f 	ldh	r5,14(r16)
   25908:	8809883a 	mov	r4,r17
   2590c:	0029c000 	call	29c00 <_isatty_r>
   25910:	10004c26 	beq	r2,zero,25a44 <__smakebuf_r+0x1a8>
   25914:	8080030b 	ldhu	r2,12(r16)
   25918:	80c010c4 	addi	r3,r16,67
   2591c:	80c00015 	stw	r3,0(r16)
   25920:	10800054 	ori	r2,r2,1
   25924:	8080030d 	sth	r2,12(r16)
   25928:	00800044 	movi	r2,1
   2592c:	80c00415 	stw	r3,16(r16)
   25930:	80800515 	stw	r2,20(r16)
   25934:	04810004 	movi	r18,1024
   25938:	00000706 	br	25958 <__smakebuf_r+0xbc>
   2593c:	8080030b 	ldhu	r2,12(r16)
   25940:	10c0200c 	andi	r3,r2,128
   25944:	18001f1e 	bne	r3,zero,259c4 <__smakebuf_r+0x128>
   25948:	04810004 	movi	r18,1024
   2594c:	10820014 	ori	r2,r2,2048
   25950:	8080030d 	sth	r2,12(r16)
   25954:	0027883a 	mov	r19,zero
   25958:	900b883a 	mov	r5,r18
   2595c:	8809883a 	mov	r4,r17
   25960:	0025a580 	call	25a58 <_malloc_r>
   25964:	10002c26 	beq	r2,zero,25a18 <__smakebuf_r+0x17c>
   25968:	80c0030b 	ldhu	r3,12(r16)
   2596c:	010000b4 	movhi	r4,2
   25970:	21126504 	addi	r4,r4,18836
   25974:	89000f15 	stw	r4,60(r17)
   25978:	18c02014 	ori	r3,r3,128
   2597c:	80c0030d 	sth	r3,12(r16)
   25980:	80800015 	stw	r2,0(r16)
   25984:	80800415 	stw	r2,16(r16)
   25988:	84800515 	stw	r18,20(r16)
   2598c:	98001a1e 	bne	r19,zero,259f8 <__smakebuf_r+0x15c>
   25990:	dfc01317 	ldw	ra,76(sp)
   25994:	dcc01217 	ldw	r19,72(sp)
   25998:	dc801117 	ldw	r18,68(sp)
   2599c:	dc401017 	ldw	r17,64(sp)
   259a0:	dc000f17 	ldw	r16,60(sp)
   259a4:	dec01404 	addi	sp,sp,80
   259a8:	f800283a 	ret
   259ac:	288010c4 	addi	r2,r5,67
   259b0:	28800015 	stw	r2,0(r5)
   259b4:	28800415 	stw	r2,16(r5)
   259b8:	00800044 	movi	r2,1
   259bc:	28800515 	stw	r2,20(r5)
   259c0:	f800283a 	ret
   259c4:	04801004 	movi	r18,64
   259c8:	003fe006 	br	2594c <__alt_data_end+0xfffe594c>
   259cc:	81000a17 	ldw	r4,40(r16)
   259d0:	00c000b4 	movhi	r3,2
   259d4:	18dfb404 	addi	r3,r3,32464
   259d8:	20ffc51e 	bne	r4,r3,258f0 <__alt_data_end+0xfffe58f0>
   259dc:	8080030b 	ldhu	r2,12(r16)
   259e0:	04810004 	movi	r18,1024
   259e4:	84801315 	stw	r18,76(r16)
   259e8:	1484b03a 	or	r2,r2,r18
   259ec:	8080030d 	sth	r2,12(r16)
   259f0:	0027883a 	mov	r19,zero
   259f4:	003fd806 	br	25958 <__alt_data_end+0xfffe5958>
   259f8:	8140038f 	ldh	r5,14(r16)
   259fc:	8809883a 	mov	r4,r17
   25a00:	0029c000 	call	29c00 <_isatty_r>
   25a04:	103fe226 	beq	r2,zero,25990 <__alt_data_end+0xfffe5990>
   25a08:	8080030b 	ldhu	r2,12(r16)
   25a0c:	10800054 	ori	r2,r2,1
   25a10:	8080030d 	sth	r2,12(r16)
   25a14:	003fde06 	br	25990 <__alt_data_end+0xfffe5990>
   25a18:	8080030b 	ldhu	r2,12(r16)
   25a1c:	10c0800c 	andi	r3,r2,512
   25a20:	183fdb1e 	bne	r3,zero,25990 <__alt_data_end+0xfffe5990>
   25a24:	10800094 	ori	r2,r2,2
   25a28:	80c010c4 	addi	r3,r16,67
   25a2c:	8080030d 	sth	r2,12(r16)
   25a30:	00800044 	movi	r2,1
   25a34:	80c00015 	stw	r3,0(r16)
   25a38:	80c00415 	stw	r3,16(r16)
   25a3c:	80800515 	stw	r2,20(r16)
   25a40:	003fd306 	br	25990 <__alt_data_end+0xfffe5990>
   25a44:	04810004 	movi	r18,1024
   25a48:	003fc306 	br	25958 <__alt_data_end+0xfffe5958>
   25a4c:	0027883a 	mov	r19,zero
   25a50:	04810004 	movi	r18,1024
   25a54:	003fc006 	br	25958 <__alt_data_end+0xfffe5958>

00025a58 <_malloc_r>:
   25a58:	defff504 	addi	sp,sp,-44
   25a5c:	dc800315 	stw	r18,12(sp)
   25a60:	dfc00a15 	stw	ra,40(sp)
   25a64:	df000915 	stw	fp,36(sp)
   25a68:	ddc00815 	stw	r23,32(sp)
   25a6c:	dd800715 	stw	r22,28(sp)
   25a70:	dd400615 	stw	r21,24(sp)
   25a74:	dd000515 	stw	r20,20(sp)
   25a78:	dcc00415 	stw	r19,16(sp)
   25a7c:	dc400215 	stw	r17,8(sp)
   25a80:	dc000115 	stw	r16,4(sp)
   25a84:	288002c4 	addi	r2,r5,11
   25a88:	00c00584 	movi	r3,22
   25a8c:	2025883a 	mov	r18,r4
   25a90:	18807f2e 	bgeu	r3,r2,25c90 <_malloc_r+0x238>
   25a94:	047ffe04 	movi	r17,-8
   25a98:	1462703a 	and	r17,r2,r17
   25a9c:	8800a316 	blt	r17,zero,25d2c <_malloc_r+0x2d4>
   25aa0:	8940a236 	bltu	r17,r5,25d2c <_malloc_r+0x2d4>
   25aa4:	002dc300 	call	2dc30 <__malloc_lock>
   25aa8:	00807dc4 	movi	r2,503
   25aac:	1441e92e 	bgeu	r2,r17,26254 <_malloc_r+0x7fc>
   25ab0:	8804d27a 	srli	r2,r17,9
   25ab4:	1000a126 	beq	r2,zero,25d3c <_malloc_r+0x2e4>
   25ab8:	00c00104 	movi	r3,4
   25abc:	18811e36 	bltu	r3,r2,25f38 <_malloc_r+0x4e0>
   25ac0:	8804d1ba 	srli	r2,r17,6
   25ac4:	12000e44 	addi	r8,r2,57
   25ac8:	11c00e04 	addi	r7,r2,56
   25acc:	4209883a 	add	r4,r8,r8
   25ad0:	04c000f4 	movhi	r19,3
   25ad4:	2109883a 	add	r4,r4,r4
   25ad8:	9ccbfb04 	addi	r19,r19,12268
   25adc:	2109883a 	add	r4,r4,r4
   25ae0:	9909883a 	add	r4,r19,r4
   25ae4:	24000117 	ldw	r16,4(r4)
   25ae8:	213ffe04 	addi	r4,r4,-8
   25aec:	24009726 	beq	r4,r16,25d4c <_malloc_r+0x2f4>
   25af0:	80800117 	ldw	r2,4(r16)
   25af4:	01bfff04 	movi	r6,-4
   25af8:	014003c4 	movi	r5,15
   25afc:	1184703a 	and	r2,r2,r6
   25b00:	1447c83a 	sub	r3,r2,r17
   25b04:	28c00716 	blt	r5,r3,25b24 <_malloc_r+0xcc>
   25b08:	1800920e 	bge	r3,zero,25d54 <_malloc_r+0x2fc>
   25b0c:	84000317 	ldw	r16,12(r16)
   25b10:	24008e26 	beq	r4,r16,25d4c <_malloc_r+0x2f4>
   25b14:	80800117 	ldw	r2,4(r16)
   25b18:	1184703a 	and	r2,r2,r6
   25b1c:	1447c83a 	sub	r3,r2,r17
   25b20:	28fff90e 	bge	r5,r3,25b08 <__alt_data_end+0xfffe5b08>
   25b24:	3809883a 	mov	r4,r7
   25b28:	018000f4 	movhi	r6,3
   25b2c:	9c000417 	ldw	r16,16(r19)
   25b30:	318bfb04 	addi	r6,r6,12268
   25b34:	32000204 	addi	r8,r6,8
   25b38:	82013426 	beq	r16,r8,2600c <_malloc_r+0x5b4>
   25b3c:	80c00117 	ldw	r3,4(r16)
   25b40:	00bfff04 	movi	r2,-4
   25b44:	188e703a 	and	r7,r3,r2
   25b48:	3c45c83a 	sub	r2,r7,r17
   25b4c:	00c003c4 	movi	r3,15
   25b50:	18811f16 	blt	r3,r2,25fd0 <_malloc_r+0x578>
   25b54:	32000515 	stw	r8,20(r6)
   25b58:	32000415 	stw	r8,16(r6)
   25b5c:	10007f0e 	bge	r2,zero,25d5c <_malloc_r+0x304>
   25b60:	00807fc4 	movi	r2,511
   25b64:	11c0fd36 	bltu	r2,r7,25f5c <_malloc_r+0x504>
   25b68:	3806d0fa 	srli	r3,r7,3
   25b6c:	01c00044 	movi	r7,1
   25b70:	30800117 	ldw	r2,4(r6)
   25b74:	19400044 	addi	r5,r3,1
   25b78:	294b883a 	add	r5,r5,r5
   25b7c:	1807d0ba 	srai	r3,r3,2
   25b80:	294b883a 	add	r5,r5,r5
   25b84:	294b883a 	add	r5,r5,r5
   25b88:	298b883a 	add	r5,r5,r6
   25b8c:	38c6983a 	sll	r3,r7,r3
   25b90:	29c00017 	ldw	r7,0(r5)
   25b94:	2a7ffe04 	addi	r9,r5,-8
   25b98:	1886b03a 	or	r3,r3,r2
   25b9c:	82400315 	stw	r9,12(r16)
   25ba0:	81c00215 	stw	r7,8(r16)
   25ba4:	30c00115 	stw	r3,4(r6)
   25ba8:	2c000015 	stw	r16,0(r5)
   25bac:	3c000315 	stw	r16,12(r7)
   25bb0:	2005d0ba 	srai	r2,r4,2
   25bb4:	01400044 	movi	r5,1
   25bb8:	288a983a 	sll	r5,r5,r2
   25bbc:	19406f36 	bltu	r3,r5,25d7c <_malloc_r+0x324>
   25bc0:	28c4703a 	and	r2,r5,r3
   25bc4:	10000a1e 	bne	r2,zero,25bf0 <_malloc_r+0x198>
   25bc8:	00bfff04 	movi	r2,-4
   25bcc:	294b883a 	add	r5,r5,r5
   25bd0:	2088703a 	and	r4,r4,r2
   25bd4:	28c4703a 	and	r2,r5,r3
   25bd8:	21000104 	addi	r4,r4,4
   25bdc:	1000041e 	bne	r2,zero,25bf0 <_malloc_r+0x198>
   25be0:	294b883a 	add	r5,r5,r5
   25be4:	28c4703a 	and	r2,r5,r3
   25be8:	21000104 	addi	r4,r4,4
   25bec:	103ffc26 	beq	r2,zero,25be0 <__alt_data_end+0xfffe5be0>
   25bf0:	02bfff04 	movi	r10,-4
   25bf4:	024003c4 	movi	r9,15
   25bf8:	21800044 	addi	r6,r4,1
   25bfc:	318d883a 	add	r6,r6,r6
   25c00:	318d883a 	add	r6,r6,r6
   25c04:	318d883a 	add	r6,r6,r6
   25c08:	998d883a 	add	r6,r19,r6
   25c0c:	333ffe04 	addi	r12,r6,-8
   25c10:	2017883a 	mov	r11,r4
   25c14:	31800104 	addi	r6,r6,4
   25c18:	34000017 	ldw	r16,0(r6)
   25c1c:	31fffd04 	addi	r7,r6,-12
   25c20:	81c0041e 	bne	r16,r7,25c34 <_malloc_r+0x1dc>
   25c24:	0000fb06 	br	26014 <_malloc_r+0x5bc>
   25c28:	1801030e 	bge	r3,zero,26038 <_malloc_r+0x5e0>
   25c2c:	84000317 	ldw	r16,12(r16)
   25c30:	81c0f826 	beq	r16,r7,26014 <_malloc_r+0x5bc>
   25c34:	80800117 	ldw	r2,4(r16)
   25c38:	1284703a 	and	r2,r2,r10
   25c3c:	1447c83a 	sub	r3,r2,r17
   25c40:	48fff90e 	bge	r9,r3,25c28 <__alt_data_end+0xfffe5c28>
   25c44:	80800317 	ldw	r2,12(r16)
   25c48:	81000217 	ldw	r4,8(r16)
   25c4c:	89400054 	ori	r5,r17,1
   25c50:	81400115 	stw	r5,4(r16)
   25c54:	20800315 	stw	r2,12(r4)
   25c58:	11000215 	stw	r4,8(r2)
   25c5c:	8463883a 	add	r17,r16,r17
   25c60:	9c400515 	stw	r17,20(r19)
   25c64:	9c400415 	stw	r17,16(r19)
   25c68:	18800054 	ori	r2,r3,1
   25c6c:	88800115 	stw	r2,4(r17)
   25c70:	8a000315 	stw	r8,12(r17)
   25c74:	8a000215 	stw	r8,8(r17)
   25c78:	88e3883a 	add	r17,r17,r3
   25c7c:	88c00015 	stw	r3,0(r17)
   25c80:	9009883a 	mov	r4,r18
   25c84:	002dc540 	call	2dc54 <__malloc_unlock>
   25c88:	80800204 	addi	r2,r16,8
   25c8c:	00001b06 	br	25cfc <_malloc_r+0x2a4>
   25c90:	04400404 	movi	r17,16
   25c94:	89402536 	bltu	r17,r5,25d2c <_malloc_r+0x2d4>
   25c98:	002dc300 	call	2dc30 <__malloc_lock>
   25c9c:	00800184 	movi	r2,6
   25ca0:	01000084 	movi	r4,2
   25ca4:	04c000f4 	movhi	r19,3
   25ca8:	1085883a 	add	r2,r2,r2
   25cac:	9ccbfb04 	addi	r19,r19,12268
   25cb0:	1085883a 	add	r2,r2,r2
   25cb4:	9885883a 	add	r2,r19,r2
   25cb8:	14000117 	ldw	r16,4(r2)
   25cbc:	10fffe04 	addi	r3,r2,-8
   25cc0:	80c0d926 	beq	r16,r3,26028 <_malloc_r+0x5d0>
   25cc4:	80c00117 	ldw	r3,4(r16)
   25cc8:	81000317 	ldw	r4,12(r16)
   25ccc:	00bfff04 	movi	r2,-4
   25cd0:	1884703a 	and	r2,r3,r2
   25cd4:	81400217 	ldw	r5,8(r16)
   25cd8:	8085883a 	add	r2,r16,r2
   25cdc:	10c00117 	ldw	r3,4(r2)
   25ce0:	29000315 	stw	r4,12(r5)
   25ce4:	21400215 	stw	r5,8(r4)
   25ce8:	18c00054 	ori	r3,r3,1
   25cec:	10c00115 	stw	r3,4(r2)
   25cf0:	9009883a 	mov	r4,r18
   25cf4:	002dc540 	call	2dc54 <__malloc_unlock>
   25cf8:	80800204 	addi	r2,r16,8
   25cfc:	dfc00a17 	ldw	ra,40(sp)
   25d00:	df000917 	ldw	fp,36(sp)
   25d04:	ddc00817 	ldw	r23,32(sp)
   25d08:	dd800717 	ldw	r22,28(sp)
   25d0c:	dd400617 	ldw	r21,24(sp)
   25d10:	dd000517 	ldw	r20,20(sp)
   25d14:	dcc00417 	ldw	r19,16(sp)
   25d18:	dc800317 	ldw	r18,12(sp)
   25d1c:	dc400217 	ldw	r17,8(sp)
   25d20:	dc000117 	ldw	r16,4(sp)
   25d24:	dec00b04 	addi	sp,sp,44
   25d28:	f800283a 	ret
   25d2c:	00800304 	movi	r2,12
   25d30:	90800015 	stw	r2,0(r18)
   25d34:	0005883a 	mov	r2,zero
   25d38:	003ff006 	br	25cfc <__alt_data_end+0xfffe5cfc>
   25d3c:	01002004 	movi	r4,128
   25d40:	02001004 	movi	r8,64
   25d44:	01c00fc4 	movi	r7,63
   25d48:	003f6106 	br	25ad0 <__alt_data_end+0xfffe5ad0>
   25d4c:	4009883a 	mov	r4,r8
   25d50:	003f7506 	br	25b28 <__alt_data_end+0xfffe5b28>
   25d54:	81000317 	ldw	r4,12(r16)
   25d58:	003fde06 	br	25cd4 <__alt_data_end+0xfffe5cd4>
   25d5c:	81c5883a 	add	r2,r16,r7
   25d60:	11400117 	ldw	r5,4(r2)
   25d64:	9009883a 	mov	r4,r18
   25d68:	29400054 	ori	r5,r5,1
   25d6c:	11400115 	stw	r5,4(r2)
   25d70:	002dc540 	call	2dc54 <__malloc_unlock>
   25d74:	80800204 	addi	r2,r16,8
   25d78:	003fe006 	br	25cfc <__alt_data_end+0xfffe5cfc>
   25d7c:	9c000217 	ldw	r16,8(r19)
   25d80:	00bfff04 	movi	r2,-4
   25d84:	85800117 	ldw	r22,4(r16)
   25d88:	b0ac703a 	and	r22,r22,r2
   25d8c:	b4400336 	bltu	r22,r17,25d9c <_malloc_r+0x344>
   25d90:	b445c83a 	sub	r2,r22,r17
   25d94:	00c003c4 	movi	r3,15
   25d98:	18805d16 	blt	r3,r2,25f10 <_malloc_r+0x4b8>
   25d9c:	05c000f4 	movhi	r23,3
   25da0:	008000f4 	movhi	r2,3
   25da4:	1098d104 	addi	r2,r2,25412
   25da8:	bdd1c104 	addi	r23,r23,18180
   25dac:	15400017 	ldw	r21,0(r2)
   25db0:	b8c00017 	ldw	r3,0(r23)
   25db4:	00bfffc4 	movi	r2,-1
   25db8:	858d883a 	add	r6,r16,r22
   25dbc:	8d6b883a 	add	r21,r17,r21
   25dc0:	1880ea26 	beq	r3,r2,2616c <_malloc_r+0x714>
   25dc4:	ad4403c4 	addi	r21,r21,4111
   25dc8:	00bc0004 	movi	r2,-4096
   25dcc:	a8aa703a 	and	r21,r21,r2
   25dd0:	a80b883a 	mov	r5,r21
   25dd4:	9009883a 	mov	r4,r18
   25dd8:	d9800015 	stw	r6,0(sp)
   25ddc:	0027da40 	call	27da4 <_sbrk_r>
   25de0:	1029883a 	mov	r20,r2
   25de4:	00bfffc4 	movi	r2,-1
   25de8:	d9800017 	ldw	r6,0(sp)
   25dec:	a080e826 	beq	r20,r2,26190 <_malloc_r+0x738>
   25df0:	a180a636 	bltu	r20,r6,2608c <_malloc_r+0x634>
   25df4:	070000f4 	movhi	fp,3
   25df8:	e718da04 	addi	fp,fp,25448
   25dfc:	e0800017 	ldw	r2,0(fp)
   25e00:	a887883a 	add	r3,r21,r2
   25e04:	e0c00015 	stw	r3,0(fp)
   25e08:	3500e626 	beq	r6,r20,261a4 <_malloc_r+0x74c>
   25e0c:	b9000017 	ldw	r4,0(r23)
   25e10:	00bfffc4 	movi	r2,-1
   25e14:	2080ee26 	beq	r4,r2,261d0 <_malloc_r+0x778>
   25e18:	a185c83a 	sub	r2,r20,r6
   25e1c:	10c5883a 	add	r2,r2,r3
   25e20:	e0800015 	stw	r2,0(fp)
   25e24:	a0c001cc 	andi	r3,r20,7
   25e28:	1800bc26 	beq	r3,zero,2611c <_malloc_r+0x6c4>
   25e2c:	a0e9c83a 	sub	r20,r20,r3
   25e30:	00840204 	movi	r2,4104
   25e34:	a5000204 	addi	r20,r20,8
   25e38:	10c7c83a 	sub	r3,r2,r3
   25e3c:	a545883a 	add	r2,r20,r21
   25e40:	1083ffcc 	andi	r2,r2,4095
   25e44:	18abc83a 	sub	r21,r3,r2
   25e48:	a80b883a 	mov	r5,r21
   25e4c:	9009883a 	mov	r4,r18
   25e50:	0027da40 	call	27da4 <_sbrk_r>
   25e54:	00ffffc4 	movi	r3,-1
   25e58:	10c0e126 	beq	r2,r3,261e0 <_malloc_r+0x788>
   25e5c:	1505c83a 	sub	r2,r2,r20
   25e60:	1545883a 	add	r2,r2,r21
   25e64:	10800054 	ori	r2,r2,1
   25e68:	e0c00017 	ldw	r3,0(fp)
   25e6c:	9d000215 	stw	r20,8(r19)
   25e70:	a0800115 	stw	r2,4(r20)
   25e74:	a8c7883a 	add	r3,r21,r3
   25e78:	e0c00015 	stw	r3,0(fp)
   25e7c:	84c00e26 	beq	r16,r19,25eb8 <_malloc_r+0x460>
   25e80:	018003c4 	movi	r6,15
   25e84:	3580a72e 	bgeu	r6,r22,26124 <_malloc_r+0x6cc>
   25e88:	81400117 	ldw	r5,4(r16)
   25e8c:	013ffe04 	movi	r4,-8
   25e90:	b0bffd04 	addi	r2,r22,-12
   25e94:	1104703a 	and	r2,r2,r4
   25e98:	2900004c 	andi	r4,r5,1
   25e9c:	2088b03a 	or	r4,r4,r2
   25ea0:	81000115 	stw	r4,4(r16)
   25ea4:	01400144 	movi	r5,5
   25ea8:	8089883a 	add	r4,r16,r2
   25eac:	21400115 	stw	r5,4(r4)
   25eb0:	21400215 	stw	r5,8(r4)
   25eb4:	3080cd36 	bltu	r6,r2,261ec <_malloc_r+0x794>
   25eb8:	008000f4 	movhi	r2,3
   25ebc:	1098d004 	addi	r2,r2,25408
   25ec0:	11000017 	ldw	r4,0(r2)
   25ec4:	20c0012e 	bgeu	r4,r3,25ecc <_malloc_r+0x474>
   25ec8:	10c00015 	stw	r3,0(r2)
   25ecc:	008000f4 	movhi	r2,3
   25ed0:	1098cf04 	addi	r2,r2,25404
   25ed4:	11000017 	ldw	r4,0(r2)
   25ed8:	9c000217 	ldw	r16,8(r19)
   25edc:	20c0012e 	bgeu	r4,r3,25ee4 <_malloc_r+0x48c>
   25ee0:	10c00015 	stw	r3,0(r2)
   25ee4:	80c00117 	ldw	r3,4(r16)
   25ee8:	00bfff04 	movi	r2,-4
   25eec:	1886703a 	and	r3,r3,r2
   25ef0:	1c45c83a 	sub	r2,r3,r17
   25ef4:	1c400236 	bltu	r3,r17,25f00 <_malloc_r+0x4a8>
   25ef8:	00c003c4 	movi	r3,15
   25efc:	18800416 	blt	r3,r2,25f10 <_malloc_r+0x4b8>
   25f00:	9009883a 	mov	r4,r18
   25f04:	002dc540 	call	2dc54 <__malloc_unlock>
   25f08:	0005883a 	mov	r2,zero
   25f0c:	003f7b06 	br	25cfc <__alt_data_end+0xfffe5cfc>
   25f10:	88c00054 	ori	r3,r17,1
   25f14:	80c00115 	stw	r3,4(r16)
   25f18:	8463883a 	add	r17,r16,r17
   25f1c:	10800054 	ori	r2,r2,1
   25f20:	9c400215 	stw	r17,8(r19)
   25f24:	88800115 	stw	r2,4(r17)
   25f28:	9009883a 	mov	r4,r18
   25f2c:	002dc540 	call	2dc54 <__malloc_unlock>
   25f30:	80800204 	addi	r2,r16,8
   25f34:	003f7106 	br	25cfc <__alt_data_end+0xfffe5cfc>
   25f38:	00c00504 	movi	r3,20
   25f3c:	18804a2e 	bgeu	r3,r2,26068 <_malloc_r+0x610>
   25f40:	00c01504 	movi	r3,84
   25f44:	18806e36 	bltu	r3,r2,26100 <_malloc_r+0x6a8>
   25f48:	8804d33a 	srli	r2,r17,12
   25f4c:	12001bc4 	addi	r8,r2,111
   25f50:	11c01b84 	addi	r7,r2,110
   25f54:	4209883a 	add	r4,r8,r8
   25f58:	003edd06 	br	25ad0 <__alt_data_end+0xfffe5ad0>
   25f5c:	3804d27a 	srli	r2,r7,9
   25f60:	00c00104 	movi	r3,4
   25f64:	1880442e 	bgeu	r3,r2,26078 <_malloc_r+0x620>
   25f68:	00c00504 	movi	r3,20
   25f6c:	18808136 	bltu	r3,r2,26174 <_malloc_r+0x71c>
   25f70:	11401704 	addi	r5,r2,92
   25f74:	10c016c4 	addi	r3,r2,91
   25f78:	294b883a 	add	r5,r5,r5
   25f7c:	294b883a 	add	r5,r5,r5
   25f80:	294b883a 	add	r5,r5,r5
   25f84:	994b883a 	add	r5,r19,r5
   25f88:	28800017 	ldw	r2,0(r5)
   25f8c:	018000f4 	movhi	r6,3
   25f90:	297ffe04 	addi	r5,r5,-8
   25f94:	318bfb04 	addi	r6,r6,12268
   25f98:	28806526 	beq	r5,r2,26130 <_malloc_r+0x6d8>
   25f9c:	01bfff04 	movi	r6,-4
   25fa0:	10c00117 	ldw	r3,4(r2)
   25fa4:	1986703a 	and	r3,r3,r6
   25fa8:	38c0022e 	bgeu	r7,r3,25fb4 <_malloc_r+0x55c>
   25fac:	10800217 	ldw	r2,8(r2)
   25fb0:	28bffb1e 	bne	r5,r2,25fa0 <__alt_data_end+0xfffe5fa0>
   25fb4:	11400317 	ldw	r5,12(r2)
   25fb8:	98c00117 	ldw	r3,4(r19)
   25fbc:	81400315 	stw	r5,12(r16)
   25fc0:	80800215 	stw	r2,8(r16)
   25fc4:	2c000215 	stw	r16,8(r5)
   25fc8:	14000315 	stw	r16,12(r2)
   25fcc:	003ef806 	br	25bb0 <__alt_data_end+0xfffe5bb0>
   25fd0:	88c00054 	ori	r3,r17,1
   25fd4:	80c00115 	stw	r3,4(r16)
   25fd8:	8463883a 	add	r17,r16,r17
   25fdc:	34400515 	stw	r17,20(r6)
   25fe0:	34400415 	stw	r17,16(r6)
   25fe4:	10c00054 	ori	r3,r2,1
   25fe8:	8a000315 	stw	r8,12(r17)
   25fec:	8a000215 	stw	r8,8(r17)
   25ff0:	88c00115 	stw	r3,4(r17)
   25ff4:	88a3883a 	add	r17,r17,r2
   25ff8:	88800015 	stw	r2,0(r17)
   25ffc:	9009883a 	mov	r4,r18
   26000:	002dc540 	call	2dc54 <__malloc_unlock>
   26004:	80800204 	addi	r2,r16,8
   26008:	003f3c06 	br	25cfc <__alt_data_end+0xfffe5cfc>
   2600c:	30c00117 	ldw	r3,4(r6)
   26010:	003ee706 	br	25bb0 <__alt_data_end+0xfffe5bb0>
   26014:	5ac00044 	addi	r11,r11,1
   26018:	588000cc 	andi	r2,r11,3
   2601c:	31800204 	addi	r6,r6,8
   26020:	103efd1e 	bne	r2,zero,25c18 <__alt_data_end+0xfffe5c18>
   26024:	00002406 	br	260b8 <_malloc_r+0x660>
   26028:	14000317 	ldw	r16,12(r2)
   2602c:	143f251e 	bne	r2,r16,25cc4 <__alt_data_end+0xfffe5cc4>
   26030:	21000084 	addi	r4,r4,2
   26034:	003ebc06 	br	25b28 <__alt_data_end+0xfffe5b28>
   26038:	8085883a 	add	r2,r16,r2
   2603c:	10c00117 	ldw	r3,4(r2)
   26040:	81000317 	ldw	r4,12(r16)
   26044:	81400217 	ldw	r5,8(r16)
   26048:	18c00054 	ori	r3,r3,1
   2604c:	10c00115 	stw	r3,4(r2)
   26050:	29000315 	stw	r4,12(r5)
   26054:	21400215 	stw	r5,8(r4)
   26058:	9009883a 	mov	r4,r18
   2605c:	002dc540 	call	2dc54 <__malloc_unlock>
   26060:	80800204 	addi	r2,r16,8
   26064:	003f2506 	br	25cfc <__alt_data_end+0xfffe5cfc>
   26068:	12001704 	addi	r8,r2,92
   2606c:	11c016c4 	addi	r7,r2,91
   26070:	4209883a 	add	r4,r8,r8
   26074:	003e9606 	br	25ad0 <__alt_data_end+0xfffe5ad0>
   26078:	3804d1ba 	srli	r2,r7,6
   2607c:	11400e44 	addi	r5,r2,57
   26080:	10c00e04 	addi	r3,r2,56
   26084:	294b883a 	add	r5,r5,r5
   26088:	003fbc06 	br	25f7c <__alt_data_end+0xfffe5f7c>
   2608c:	84ff5926 	beq	r16,r19,25df4 <__alt_data_end+0xfffe5df4>
   26090:	008000f4 	movhi	r2,3
   26094:	108bfb04 	addi	r2,r2,12268
   26098:	14000217 	ldw	r16,8(r2)
   2609c:	00bfff04 	movi	r2,-4
   260a0:	80c00117 	ldw	r3,4(r16)
   260a4:	1886703a 	and	r3,r3,r2
   260a8:	003f9106 	br	25ef0 <__alt_data_end+0xfffe5ef0>
   260ac:	60800217 	ldw	r2,8(r12)
   260b0:	213fffc4 	addi	r4,r4,-1
   260b4:	1300651e 	bne	r2,r12,2624c <_malloc_r+0x7f4>
   260b8:	208000cc 	andi	r2,r4,3
   260bc:	633ffe04 	addi	r12,r12,-8
   260c0:	103ffa1e 	bne	r2,zero,260ac <__alt_data_end+0xfffe60ac>
   260c4:	98800117 	ldw	r2,4(r19)
   260c8:	0146303a 	nor	r3,zero,r5
   260cc:	1884703a 	and	r2,r3,r2
   260d0:	98800115 	stw	r2,4(r19)
   260d4:	294b883a 	add	r5,r5,r5
   260d8:	117f2836 	bltu	r2,r5,25d7c <__alt_data_end+0xfffe5d7c>
   260dc:	283f2726 	beq	r5,zero,25d7c <__alt_data_end+0xfffe5d7c>
   260e0:	2886703a 	and	r3,r5,r2
   260e4:	5809883a 	mov	r4,r11
   260e8:	183ec31e 	bne	r3,zero,25bf8 <__alt_data_end+0xfffe5bf8>
   260ec:	294b883a 	add	r5,r5,r5
   260f0:	2886703a 	and	r3,r5,r2
   260f4:	21000104 	addi	r4,r4,4
   260f8:	183ffc26 	beq	r3,zero,260ec <__alt_data_end+0xfffe60ec>
   260fc:	003ebe06 	br	25bf8 <__alt_data_end+0xfffe5bf8>
   26100:	00c05504 	movi	r3,340
   26104:	18801236 	bltu	r3,r2,26150 <_malloc_r+0x6f8>
   26108:	8804d3fa 	srli	r2,r17,15
   2610c:	12001e04 	addi	r8,r2,120
   26110:	11c01dc4 	addi	r7,r2,119
   26114:	4209883a 	add	r4,r8,r8
   26118:	003e6d06 	br	25ad0 <__alt_data_end+0xfffe5ad0>
   2611c:	00c40004 	movi	r3,4096
   26120:	003f4606 	br	25e3c <__alt_data_end+0xfffe5e3c>
   26124:	00800044 	movi	r2,1
   26128:	a0800115 	stw	r2,4(r20)
   2612c:	003f7406 	br	25f00 <__alt_data_end+0xfffe5f00>
   26130:	1805d0ba 	srai	r2,r3,2
   26134:	01c00044 	movi	r7,1
   26138:	30c00117 	ldw	r3,4(r6)
   2613c:	388e983a 	sll	r7,r7,r2
   26140:	2805883a 	mov	r2,r5
   26144:	38c6b03a 	or	r3,r7,r3
   26148:	30c00115 	stw	r3,4(r6)
   2614c:	003f9b06 	br	25fbc <__alt_data_end+0xfffe5fbc>
   26150:	00c15504 	movi	r3,1364
   26154:	18801a36 	bltu	r3,r2,261c0 <_malloc_r+0x768>
   26158:	8804d4ba 	srli	r2,r17,18
   2615c:	12001f44 	addi	r8,r2,125
   26160:	11c01f04 	addi	r7,r2,124
   26164:	4209883a 	add	r4,r8,r8
   26168:	003e5906 	br	25ad0 <__alt_data_end+0xfffe5ad0>
   2616c:	ad400404 	addi	r21,r21,16
   26170:	003f1706 	br	25dd0 <__alt_data_end+0xfffe5dd0>
   26174:	00c01504 	movi	r3,84
   26178:	18802336 	bltu	r3,r2,26208 <_malloc_r+0x7b0>
   2617c:	3804d33a 	srli	r2,r7,12
   26180:	11401bc4 	addi	r5,r2,111
   26184:	10c01b84 	addi	r3,r2,110
   26188:	294b883a 	add	r5,r5,r5
   2618c:	003f7b06 	br	25f7c <__alt_data_end+0xfffe5f7c>
   26190:	9c000217 	ldw	r16,8(r19)
   26194:	00bfff04 	movi	r2,-4
   26198:	80c00117 	ldw	r3,4(r16)
   2619c:	1886703a 	and	r3,r3,r2
   261a0:	003f5306 	br	25ef0 <__alt_data_end+0xfffe5ef0>
   261a4:	3083ffcc 	andi	r2,r6,4095
   261a8:	103f181e 	bne	r2,zero,25e0c <__alt_data_end+0xfffe5e0c>
   261ac:	99000217 	ldw	r4,8(r19)
   261b0:	b545883a 	add	r2,r22,r21
   261b4:	10800054 	ori	r2,r2,1
   261b8:	20800115 	stw	r2,4(r4)
   261bc:	003f3e06 	br	25eb8 <__alt_data_end+0xfffe5eb8>
   261c0:	01003f84 	movi	r4,254
   261c4:	02001fc4 	movi	r8,127
   261c8:	01c01f84 	movi	r7,126
   261cc:	003e4006 	br	25ad0 <__alt_data_end+0xfffe5ad0>
   261d0:	008000f4 	movhi	r2,3
   261d4:	1091c104 	addi	r2,r2,18180
   261d8:	15000015 	stw	r20,0(r2)
   261dc:	003f1106 	br	25e24 <__alt_data_end+0xfffe5e24>
   261e0:	00800044 	movi	r2,1
   261e4:	002b883a 	mov	r21,zero
   261e8:	003f1f06 	br	25e68 <__alt_data_end+0xfffe5e68>
   261ec:	81400204 	addi	r5,r16,8
   261f0:	9009883a 	mov	r4,r18
   261f4:	0024e600 	call	24e60 <_free_r>
   261f8:	008000f4 	movhi	r2,3
   261fc:	1098da04 	addi	r2,r2,25448
   26200:	10c00017 	ldw	r3,0(r2)
   26204:	003f2c06 	br	25eb8 <__alt_data_end+0xfffe5eb8>
   26208:	00c05504 	movi	r3,340
   2620c:	18800536 	bltu	r3,r2,26224 <_malloc_r+0x7cc>
   26210:	3804d3fa 	srli	r2,r7,15
   26214:	11401e04 	addi	r5,r2,120
   26218:	10c01dc4 	addi	r3,r2,119
   2621c:	294b883a 	add	r5,r5,r5
   26220:	003f5606 	br	25f7c <__alt_data_end+0xfffe5f7c>
   26224:	00c15504 	movi	r3,1364
   26228:	18800536 	bltu	r3,r2,26240 <_malloc_r+0x7e8>
   2622c:	3804d4ba 	srli	r2,r7,18
   26230:	11401f44 	addi	r5,r2,125
   26234:	10c01f04 	addi	r3,r2,124
   26238:	294b883a 	add	r5,r5,r5
   2623c:	003f4f06 	br	25f7c <__alt_data_end+0xfffe5f7c>
   26240:	01403f84 	movi	r5,254
   26244:	00c01f84 	movi	r3,126
   26248:	003f4c06 	br	25f7c <__alt_data_end+0xfffe5f7c>
   2624c:	98800117 	ldw	r2,4(r19)
   26250:	003fa006 	br	260d4 <__alt_data_end+0xfffe60d4>
   26254:	8808d0fa 	srli	r4,r17,3
   26258:	20800044 	addi	r2,r4,1
   2625c:	1085883a 	add	r2,r2,r2
   26260:	003e9006 	br	25ca4 <__alt_data_end+0xfffe5ca4>

00026264 <memchr>:
   26264:	208000cc 	andi	r2,r4,3
   26268:	280f883a 	mov	r7,r5
   2626c:	10003426 	beq	r2,zero,26340 <memchr+0xdc>
   26270:	30bfffc4 	addi	r2,r6,-1
   26274:	30001a26 	beq	r6,zero,262e0 <memchr+0x7c>
   26278:	20c00003 	ldbu	r3,0(r4)
   2627c:	29803fcc 	andi	r6,r5,255
   26280:	30c0051e 	bne	r6,r3,26298 <memchr+0x34>
   26284:	00001806 	br	262e8 <memchr+0x84>
   26288:	10001526 	beq	r2,zero,262e0 <memchr+0x7c>
   2628c:	20c00003 	ldbu	r3,0(r4)
   26290:	10bfffc4 	addi	r2,r2,-1
   26294:	30c01426 	beq	r6,r3,262e8 <memchr+0x84>
   26298:	21000044 	addi	r4,r4,1
   2629c:	20c000cc 	andi	r3,r4,3
   262a0:	183ff91e 	bne	r3,zero,26288 <__alt_data_end+0xfffe6288>
   262a4:	020000c4 	movi	r8,3
   262a8:	40801136 	bltu	r8,r2,262f0 <memchr+0x8c>
   262ac:	10000c26 	beq	r2,zero,262e0 <memchr+0x7c>
   262b0:	20c00003 	ldbu	r3,0(r4)
   262b4:	29403fcc 	andi	r5,r5,255
   262b8:	28c00b26 	beq	r5,r3,262e8 <memchr+0x84>
   262bc:	20c00044 	addi	r3,r4,1
   262c0:	39803fcc 	andi	r6,r7,255
   262c4:	2089883a 	add	r4,r4,r2
   262c8:	00000306 	br	262d8 <memchr+0x74>
   262cc:	18c00044 	addi	r3,r3,1
   262d0:	197fffc3 	ldbu	r5,-1(r3)
   262d4:	31400526 	beq	r6,r5,262ec <memchr+0x88>
   262d8:	1805883a 	mov	r2,r3
   262dc:	20fffb1e 	bne	r4,r3,262cc <__alt_data_end+0xfffe62cc>
   262e0:	0005883a 	mov	r2,zero
   262e4:	f800283a 	ret
   262e8:	2005883a 	mov	r2,r4
   262ec:	f800283a 	ret
   262f0:	28c03fcc 	andi	r3,r5,255
   262f4:	1812923a 	slli	r9,r3,8
   262f8:	02ffbff4 	movhi	r11,65279
   262fc:	02a02074 	movhi	r10,32897
   26300:	48d2b03a 	or	r9,r9,r3
   26304:	4806943a 	slli	r3,r9,16
   26308:	5affbfc4 	addi	r11,r11,-257
   2630c:	52a02004 	addi	r10,r10,-32640
   26310:	48d2b03a 	or	r9,r9,r3
   26314:	20c00017 	ldw	r3,0(r4)
   26318:	48c6f03a 	xor	r3,r9,r3
   2631c:	1acd883a 	add	r6,r3,r11
   26320:	00c6303a 	nor	r3,zero,r3
   26324:	30c6703a 	and	r3,r6,r3
   26328:	1a86703a 	and	r3,r3,r10
   2632c:	183fe01e 	bne	r3,zero,262b0 <__alt_data_end+0xfffe62b0>
   26330:	10bfff04 	addi	r2,r2,-4
   26334:	21000104 	addi	r4,r4,4
   26338:	40bff636 	bltu	r8,r2,26314 <__alt_data_end+0xfffe6314>
   2633c:	003fdb06 	br	262ac <__alt_data_end+0xfffe62ac>
   26340:	3005883a 	mov	r2,r6
   26344:	003fd706 	br	262a4 <__alt_data_end+0xfffe62a4>

00026348 <memcpy>:
   26348:	defffd04 	addi	sp,sp,-12
   2634c:	dfc00215 	stw	ra,8(sp)
   26350:	dc400115 	stw	r17,4(sp)
   26354:	dc000015 	stw	r16,0(sp)
   26358:	00c003c4 	movi	r3,15
   2635c:	2005883a 	mov	r2,r4
   26360:	1980452e 	bgeu	r3,r6,26478 <memcpy+0x130>
   26364:	2906b03a 	or	r3,r5,r4
   26368:	18c000cc 	andi	r3,r3,3
   2636c:	1800441e 	bne	r3,zero,26480 <memcpy+0x138>
   26370:	347ffc04 	addi	r17,r6,-16
   26374:	8822d13a 	srli	r17,r17,4
   26378:	28c00104 	addi	r3,r5,4
   2637c:	23400104 	addi	r13,r4,4
   26380:	8820913a 	slli	r16,r17,4
   26384:	2b000204 	addi	r12,r5,8
   26388:	22c00204 	addi	r11,r4,8
   2638c:	84000504 	addi	r16,r16,20
   26390:	2a800304 	addi	r10,r5,12
   26394:	22400304 	addi	r9,r4,12
   26398:	2c21883a 	add	r16,r5,r16
   2639c:	2811883a 	mov	r8,r5
   263a0:	200f883a 	mov	r7,r4
   263a4:	41000017 	ldw	r4,0(r8)
   263a8:	1fc00017 	ldw	ra,0(r3)
   263ac:	63c00017 	ldw	r15,0(r12)
   263b0:	39000015 	stw	r4,0(r7)
   263b4:	53800017 	ldw	r14,0(r10)
   263b8:	6fc00015 	stw	ra,0(r13)
   263bc:	5bc00015 	stw	r15,0(r11)
   263c0:	4b800015 	stw	r14,0(r9)
   263c4:	18c00404 	addi	r3,r3,16
   263c8:	39c00404 	addi	r7,r7,16
   263cc:	42000404 	addi	r8,r8,16
   263d0:	6b400404 	addi	r13,r13,16
   263d4:	63000404 	addi	r12,r12,16
   263d8:	5ac00404 	addi	r11,r11,16
   263dc:	52800404 	addi	r10,r10,16
   263e0:	4a400404 	addi	r9,r9,16
   263e4:	1c3fef1e 	bne	r3,r16,263a4 <__alt_data_end+0xfffe63a4>
   263e8:	89c00044 	addi	r7,r17,1
   263ec:	380e913a 	slli	r7,r7,4
   263f0:	310003cc 	andi	r4,r6,15
   263f4:	02c000c4 	movi	r11,3
   263f8:	11c7883a 	add	r3,r2,r7
   263fc:	29cb883a 	add	r5,r5,r7
   26400:	5900212e 	bgeu	r11,r4,26488 <memcpy+0x140>
   26404:	1813883a 	mov	r9,r3
   26408:	2811883a 	mov	r8,r5
   2640c:	200f883a 	mov	r7,r4
   26410:	42800017 	ldw	r10,0(r8)
   26414:	4a400104 	addi	r9,r9,4
   26418:	39ffff04 	addi	r7,r7,-4
   2641c:	4abfff15 	stw	r10,-4(r9)
   26420:	42000104 	addi	r8,r8,4
   26424:	59fffa36 	bltu	r11,r7,26410 <__alt_data_end+0xfffe6410>
   26428:	213fff04 	addi	r4,r4,-4
   2642c:	2008d0ba 	srli	r4,r4,2
   26430:	318000cc 	andi	r6,r6,3
   26434:	21000044 	addi	r4,r4,1
   26438:	2109883a 	add	r4,r4,r4
   2643c:	2109883a 	add	r4,r4,r4
   26440:	1907883a 	add	r3,r3,r4
   26444:	290b883a 	add	r5,r5,r4
   26448:	30000626 	beq	r6,zero,26464 <memcpy+0x11c>
   2644c:	198d883a 	add	r6,r3,r6
   26450:	29c00003 	ldbu	r7,0(r5)
   26454:	18c00044 	addi	r3,r3,1
   26458:	29400044 	addi	r5,r5,1
   2645c:	19ffffc5 	stb	r7,-1(r3)
   26460:	19bffb1e 	bne	r3,r6,26450 <__alt_data_end+0xfffe6450>
   26464:	dfc00217 	ldw	ra,8(sp)
   26468:	dc400117 	ldw	r17,4(sp)
   2646c:	dc000017 	ldw	r16,0(sp)
   26470:	dec00304 	addi	sp,sp,12
   26474:	f800283a 	ret
   26478:	2007883a 	mov	r3,r4
   2647c:	003ff206 	br	26448 <__alt_data_end+0xfffe6448>
   26480:	2007883a 	mov	r3,r4
   26484:	003ff106 	br	2644c <__alt_data_end+0xfffe644c>
   26488:	200d883a 	mov	r6,r4
   2648c:	003fee06 	br	26448 <__alt_data_end+0xfffe6448>

00026490 <memmove>:
   26490:	2005883a 	mov	r2,r4
   26494:	29000b2e 	bgeu	r5,r4,264c4 <memmove+0x34>
   26498:	298f883a 	add	r7,r5,r6
   2649c:	21c0092e 	bgeu	r4,r7,264c4 <memmove+0x34>
   264a0:	2187883a 	add	r3,r4,r6
   264a4:	198bc83a 	sub	r5,r3,r6
   264a8:	30004826 	beq	r6,zero,265cc <memmove+0x13c>
   264ac:	39ffffc4 	addi	r7,r7,-1
   264b0:	39000003 	ldbu	r4,0(r7)
   264b4:	18ffffc4 	addi	r3,r3,-1
   264b8:	19000005 	stb	r4,0(r3)
   264bc:	28fffb1e 	bne	r5,r3,264ac <__alt_data_end+0xfffe64ac>
   264c0:	f800283a 	ret
   264c4:	00c003c4 	movi	r3,15
   264c8:	1980412e 	bgeu	r3,r6,265d0 <memmove+0x140>
   264cc:	2886b03a 	or	r3,r5,r2
   264d0:	18c000cc 	andi	r3,r3,3
   264d4:	1800401e 	bne	r3,zero,265d8 <memmove+0x148>
   264d8:	33fffc04 	addi	r15,r6,-16
   264dc:	781ed13a 	srli	r15,r15,4
   264e0:	28c00104 	addi	r3,r5,4
   264e4:	13400104 	addi	r13,r2,4
   264e8:	781c913a 	slli	r14,r15,4
   264ec:	2b000204 	addi	r12,r5,8
   264f0:	12c00204 	addi	r11,r2,8
   264f4:	73800504 	addi	r14,r14,20
   264f8:	2a800304 	addi	r10,r5,12
   264fc:	12400304 	addi	r9,r2,12
   26500:	2b9d883a 	add	r14,r5,r14
   26504:	2811883a 	mov	r8,r5
   26508:	100f883a 	mov	r7,r2
   2650c:	41000017 	ldw	r4,0(r8)
   26510:	39c00404 	addi	r7,r7,16
   26514:	18c00404 	addi	r3,r3,16
   26518:	393ffc15 	stw	r4,-16(r7)
   2651c:	193ffc17 	ldw	r4,-16(r3)
   26520:	6b400404 	addi	r13,r13,16
   26524:	5ac00404 	addi	r11,r11,16
   26528:	693ffc15 	stw	r4,-16(r13)
   2652c:	61000017 	ldw	r4,0(r12)
   26530:	4a400404 	addi	r9,r9,16
   26534:	42000404 	addi	r8,r8,16
   26538:	593ffc15 	stw	r4,-16(r11)
   2653c:	51000017 	ldw	r4,0(r10)
   26540:	63000404 	addi	r12,r12,16
   26544:	52800404 	addi	r10,r10,16
   26548:	493ffc15 	stw	r4,-16(r9)
   2654c:	1bbfef1e 	bne	r3,r14,2650c <__alt_data_end+0xfffe650c>
   26550:	79000044 	addi	r4,r15,1
   26554:	2008913a 	slli	r4,r4,4
   26558:	328003cc 	andi	r10,r6,15
   2655c:	02c000c4 	movi	r11,3
   26560:	1107883a 	add	r3,r2,r4
   26564:	290b883a 	add	r5,r5,r4
   26568:	5a801e2e 	bgeu	r11,r10,265e4 <memmove+0x154>
   2656c:	1813883a 	mov	r9,r3
   26570:	2811883a 	mov	r8,r5
   26574:	500f883a 	mov	r7,r10
   26578:	41000017 	ldw	r4,0(r8)
   2657c:	4a400104 	addi	r9,r9,4
   26580:	39ffff04 	addi	r7,r7,-4
   26584:	493fff15 	stw	r4,-4(r9)
   26588:	42000104 	addi	r8,r8,4
   2658c:	59fffa36 	bltu	r11,r7,26578 <__alt_data_end+0xfffe6578>
   26590:	513fff04 	addi	r4,r10,-4
   26594:	2008d0ba 	srli	r4,r4,2
   26598:	318000cc 	andi	r6,r6,3
   2659c:	21000044 	addi	r4,r4,1
   265a0:	2109883a 	add	r4,r4,r4
   265a4:	2109883a 	add	r4,r4,r4
   265a8:	1907883a 	add	r3,r3,r4
   265ac:	290b883a 	add	r5,r5,r4
   265b0:	30000b26 	beq	r6,zero,265e0 <memmove+0x150>
   265b4:	198d883a 	add	r6,r3,r6
   265b8:	29c00003 	ldbu	r7,0(r5)
   265bc:	18c00044 	addi	r3,r3,1
   265c0:	29400044 	addi	r5,r5,1
   265c4:	19ffffc5 	stb	r7,-1(r3)
   265c8:	19bffb1e 	bne	r3,r6,265b8 <__alt_data_end+0xfffe65b8>
   265cc:	f800283a 	ret
   265d0:	1007883a 	mov	r3,r2
   265d4:	003ff606 	br	265b0 <__alt_data_end+0xfffe65b0>
   265d8:	1007883a 	mov	r3,r2
   265dc:	003ff506 	br	265b4 <__alt_data_end+0xfffe65b4>
   265e0:	f800283a 	ret
   265e4:	500d883a 	mov	r6,r10
   265e8:	003ff106 	br	265b0 <__alt_data_end+0xfffe65b0>

000265ec <memset>:
   265ec:	20c000cc 	andi	r3,r4,3
   265f0:	2005883a 	mov	r2,r4
   265f4:	18004426 	beq	r3,zero,26708 <memset+0x11c>
   265f8:	31ffffc4 	addi	r7,r6,-1
   265fc:	30004026 	beq	r6,zero,26700 <memset+0x114>
   26600:	2813883a 	mov	r9,r5
   26604:	200d883a 	mov	r6,r4
   26608:	2007883a 	mov	r3,r4
   2660c:	00000406 	br	26620 <memset+0x34>
   26610:	3a3fffc4 	addi	r8,r7,-1
   26614:	31800044 	addi	r6,r6,1
   26618:	38003926 	beq	r7,zero,26700 <memset+0x114>
   2661c:	400f883a 	mov	r7,r8
   26620:	18c00044 	addi	r3,r3,1
   26624:	32400005 	stb	r9,0(r6)
   26628:	1a0000cc 	andi	r8,r3,3
   2662c:	403ff81e 	bne	r8,zero,26610 <__alt_data_end+0xfffe6610>
   26630:	010000c4 	movi	r4,3
   26634:	21c02d2e 	bgeu	r4,r7,266ec <memset+0x100>
   26638:	29003fcc 	andi	r4,r5,255
   2663c:	200c923a 	slli	r6,r4,8
   26640:	3108b03a 	or	r4,r6,r4
   26644:	200c943a 	slli	r6,r4,16
   26648:	218cb03a 	or	r6,r4,r6
   2664c:	010003c4 	movi	r4,15
   26650:	21c0182e 	bgeu	r4,r7,266b4 <memset+0xc8>
   26654:	3b3ffc04 	addi	r12,r7,-16
   26658:	6018d13a 	srli	r12,r12,4
   2665c:	1a000104 	addi	r8,r3,4
   26660:	1ac00204 	addi	r11,r3,8
   26664:	6008913a 	slli	r4,r12,4
   26668:	1a800304 	addi	r10,r3,12
   2666c:	1813883a 	mov	r9,r3
   26670:	21000504 	addi	r4,r4,20
   26674:	1909883a 	add	r4,r3,r4
   26678:	49800015 	stw	r6,0(r9)
   2667c:	41800015 	stw	r6,0(r8)
   26680:	59800015 	stw	r6,0(r11)
   26684:	51800015 	stw	r6,0(r10)
   26688:	42000404 	addi	r8,r8,16
   2668c:	4a400404 	addi	r9,r9,16
   26690:	5ac00404 	addi	r11,r11,16
   26694:	52800404 	addi	r10,r10,16
   26698:	413ff71e 	bne	r8,r4,26678 <__alt_data_end+0xfffe6678>
   2669c:	63000044 	addi	r12,r12,1
   266a0:	6018913a 	slli	r12,r12,4
   266a4:	39c003cc 	andi	r7,r7,15
   266a8:	010000c4 	movi	r4,3
   266ac:	1b07883a 	add	r3,r3,r12
   266b0:	21c00e2e 	bgeu	r4,r7,266ec <memset+0x100>
   266b4:	1813883a 	mov	r9,r3
   266b8:	3811883a 	mov	r8,r7
   266bc:	010000c4 	movi	r4,3
   266c0:	49800015 	stw	r6,0(r9)
   266c4:	423fff04 	addi	r8,r8,-4
   266c8:	4a400104 	addi	r9,r9,4
   266cc:	223ffc36 	bltu	r4,r8,266c0 <__alt_data_end+0xfffe66c0>
   266d0:	393fff04 	addi	r4,r7,-4
   266d4:	2008d0ba 	srli	r4,r4,2
   266d8:	39c000cc 	andi	r7,r7,3
   266dc:	21000044 	addi	r4,r4,1
   266e0:	2109883a 	add	r4,r4,r4
   266e4:	2109883a 	add	r4,r4,r4
   266e8:	1907883a 	add	r3,r3,r4
   266ec:	38000526 	beq	r7,zero,26704 <memset+0x118>
   266f0:	19cf883a 	add	r7,r3,r7
   266f4:	19400005 	stb	r5,0(r3)
   266f8:	18c00044 	addi	r3,r3,1
   266fc:	38fffd1e 	bne	r7,r3,266f4 <__alt_data_end+0xfffe66f4>
   26700:	f800283a 	ret
   26704:	f800283a 	ret
   26708:	2007883a 	mov	r3,r4
   2670c:	300f883a 	mov	r7,r6
   26710:	003fc706 	br	26630 <__alt_data_end+0xfffe6630>

00026714 <_Balloc>:
   26714:	20801317 	ldw	r2,76(r4)
   26718:	defffc04 	addi	sp,sp,-16
   2671c:	dc400115 	stw	r17,4(sp)
   26720:	dc000015 	stw	r16,0(sp)
   26724:	dfc00315 	stw	ra,12(sp)
   26728:	dc800215 	stw	r18,8(sp)
   2672c:	2023883a 	mov	r17,r4
   26730:	2821883a 	mov	r16,r5
   26734:	10000f26 	beq	r2,zero,26774 <_Balloc+0x60>
   26738:	8407883a 	add	r3,r16,r16
   2673c:	18c7883a 	add	r3,r3,r3
   26740:	10c7883a 	add	r3,r2,r3
   26744:	18800017 	ldw	r2,0(r3)
   26748:	10001126 	beq	r2,zero,26790 <_Balloc+0x7c>
   2674c:	11000017 	ldw	r4,0(r2)
   26750:	19000015 	stw	r4,0(r3)
   26754:	10000415 	stw	zero,16(r2)
   26758:	10000315 	stw	zero,12(r2)
   2675c:	dfc00317 	ldw	ra,12(sp)
   26760:	dc800217 	ldw	r18,8(sp)
   26764:	dc400117 	ldw	r17,4(sp)
   26768:	dc000017 	ldw	r16,0(sp)
   2676c:	dec00404 	addi	sp,sp,16
   26770:	f800283a 	ret
   26774:	01800844 	movi	r6,33
   26778:	01400104 	movi	r5,4
   2677c:	00297bc0 	call	297bc <_calloc_r>
   26780:	88801315 	stw	r2,76(r17)
   26784:	103fec1e 	bne	r2,zero,26738 <__alt_data_end+0xfffe6738>
   26788:	0005883a 	mov	r2,zero
   2678c:	003ff306 	br	2675c <__alt_data_end+0xfffe675c>
   26790:	01400044 	movi	r5,1
   26794:	2c24983a 	sll	r18,r5,r16
   26798:	8809883a 	mov	r4,r17
   2679c:	91800144 	addi	r6,r18,5
   267a0:	318d883a 	add	r6,r6,r6
   267a4:	318d883a 	add	r6,r6,r6
   267a8:	00297bc0 	call	297bc <_calloc_r>
   267ac:	103ff626 	beq	r2,zero,26788 <__alt_data_end+0xfffe6788>
   267b0:	14000115 	stw	r16,4(r2)
   267b4:	14800215 	stw	r18,8(r2)
   267b8:	003fe606 	br	26754 <__alt_data_end+0xfffe6754>

000267bc <_Bfree>:
   267bc:	28000826 	beq	r5,zero,267e0 <_Bfree+0x24>
   267c0:	28c00117 	ldw	r3,4(r5)
   267c4:	20801317 	ldw	r2,76(r4)
   267c8:	18c7883a 	add	r3,r3,r3
   267cc:	18c7883a 	add	r3,r3,r3
   267d0:	10c5883a 	add	r2,r2,r3
   267d4:	10c00017 	ldw	r3,0(r2)
   267d8:	28c00015 	stw	r3,0(r5)
   267dc:	11400015 	stw	r5,0(r2)
   267e0:	f800283a 	ret

000267e4 <__multadd>:
   267e4:	defff704 	addi	sp,sp,-36
   267e8:	dc800215 	stw	r18,8(sp)
   267ec:	2c800417 	ldw	r18,16(r5)
   267f0:	dd800615 	stw	r22,24(sp)
   267f4:	dd400515 	stw	r21,20(sp)
   267f8:	dd000415 	stw	r20,16(sp)
   267fc:	dcc00315 	stw	r19,12(sp)
   26800:	dc400115 	stw	r17,4(sp)
   26804:	dc000015 	stw	r16,0(sp)
   26808:	dfc00815 	stw	ra,32(sp)
   2680c:	ddc00715 	stw	r23,28(sp)
   26810:	2827883a 	mov	r19,r5
   26814:	2029883a 	mov	r20,r4
   26818:	3023883a 	mov	r17,r6
   2681c:	3821883a 	mov	r16,r7
   26820:	2d400504 	addi	r21,r5,20
   26824:	002d883a 	mov	r22,zero
   26828:	adc00017 	ldw	r23,0(r21)
   2682c:	880b883a 	mov	r5,r17
   26830:	ad400104 	addi	r21,r21,4
   26834:	b93fffcc 	andi	r4,r23,65535
   26838:	002adc80 	call	2adc8 <__mulsi3>
   2683c:	b808d43a 	srli	r4,r23,16
   26840:	880b883a 	mov	r5,r17
   26844:	1421883a 	add	r16,r2,r16
   26848:	002adc80 	call	2adc8 <__mulsi3>
   2684c:	800ed43a 	srli	r7,r16,16
   26850:	80ffffcc 	andi	r3,r16,65535
   26854:	b5800044 	addi	r22,r22,1
   26858:	11c5883a 	add	r2,r2,r7
   2685c:	100e943a 	slli	r7,r2,16
   26860:	1020d43a 	srli	r16,r2,16
   26864:	38c7883a 	add	r3,r7,r3
   26868:	a8ffff15 	stw	r3,-4(r21)
   2686c:	b4bfee16 	blt	r22,r18,26828 <__alt_data_end+0xfffe6828>
   26870:	80000926 	beq	r16,zero,26898 <__multadd+0xb4>
   26874:	98800217 	ldw	r2,8(r19)
   26878:	9080130e 	bge	r18,r2,268c8 <__multadd+0xe4>
   2687c:	90800144 	addi	r2,r18,5
   26880:	1085883a 	add	r2,r2,r2
   26884:	1085883a 	add	r2,r2,r2
   26888:	9885883a 	add	r2,r19,r2
   2688c:	14000015 	stw	r16,0(r2)
   26890:	94800044 	addi	r18,r18,1
   26894:	9c800415 	stw	r18,16(r19)
   26898:	9805883a 	mov	r2,r19
   2689c:	dfc00817 	ldw	ra,32(sp)
   268a0:	ddc00717 	ldw	r23,28(sp)
   268a4:	dd800617 	ldw	r22,24(sp)
   268a8:	dd400517 	ldw	r21,20(sp)
   268ac:	dd000417 	ldw	r20,16(sp)
   268b0:	dcc00317 	ldw	r19,12(sp)
   268b4:	dc800217 	ldw	r18,8(sp)
   268b8:	dc400117 	ldw	r17,4(sp)
   268bc:	dc000017 	ldw	r16,0(sp)
   268c0:	dec00904 	addi	sp,sp,36
   268c4:	f800283a 	ret
   268c8:	99400117 	ldw	r5,4(r19)
   268cc:	a009883a 	mov	r4,r20
   268d0:	29400044 	addi	r5,r5,1
   268d4:	00267140 	call	26714 <_Balloc>
   268d8:	99800417 	ldw	r6,16(r19)
   268dc:	99400304 	addi	r5,r19,12
   268e0:	11000304 	addi	r4,r2,12
   268e4:	31800084 	addi	r6,r6,2
   268e8:	318d883a 	add	r6,r6,r6
   268ec:	318d883a 	add	r6,r6,r6
   268f0:	1023883a 	mov	r17,r2
   268f4:	00263480 	call	26348 <memcpy>
   268f8:	98000a26 	beq	r19,zero,26924 <__multadd+0x140>
   268fc:	98c00117 	ldw	r3,4(r19)
   26900:	a0801317 	ldw	r2,76(r20)
   26904:	18c7883a 	add	r3,r3,r3
   26908:	18c7883a 	add	r3,r3,r3
   2690c:	10c5883a 	add	r2,r2,r3
   26910:	10c00017 	ldw	r3,0(r2)
   26914:	98c00015 	stw	r3,0(r19)
   26918:	14c00015 	stw	r19,0(r2)
   2691c:	8827883a 	mov	r19,r17
   26920:	003fd606 	br	2687c <__alt_data_end+0xfffe687c>
   26924:	8827883a 	mov	r19,r17
   26928:	003fd406 	br	2687c <__alt_data_end+0xfffe687c>

0002692c <__s2b>:
   2692c:	defff904 	addi	sp,sp,-28
   26930:	dc400115 	stw	r17,4(sp)
   26934:	dc000015 	stw	r16,0(sp)
   26938:	2023883a 	mov	r17,r4
   2693c:	2821883a 	mov	r16,r5
   26940:	39000204 	addi	r4,r7,8
   26944:	01400244 	movi	r5,9
   26948:	dcc00315 	stw	r19,12(sp)
   2694c:	dc800215 	stw	r18,8(sp)
   26950:	dfc00615 	stw	ra,24(sp)
   26954:	dd400515 	stw	r21,20(sp)
   26958:	dd000415 	stw	r20,16(sp)
   2695c:	3825883a 	mov	r18,r7
   26960:	3027883a 	mov	r19,r6
   26964:	002ac140 	call	2ac14 <__divsi3>
   26968:	00c00044 	movi	r3,1
   2696c:	000b883a 	mov	r5,zero
   26970:	1880030e 	bge	r3,r2,26980 <__s2b+0x54>
   26974:	18c7883a 	add	r3,r3,r3
   26978:	29400044 	addi	r5,r5,1
   2697c:	18bffd16 	blt	r3,r2,26974 <__alt_data_end+0xfffe6974>
   26980:	8809883a 	mov	r4,r17
   26984:	00267140 	call	26714 <_Balloc>
   26988:	d8c00717 	ldw	r3,28(sp)
   2698c:	10c00515 	stw	r3,20(r2)
   26990:	00c00044 	movi	r3,1
   26994:	10c00415 	stw	r3,16(r2)
   26998:	00c00244 	movi	r3,9
   2699c:	1cc0210e 	bge	r3,r19,26a24 <__s2b+0xf8>
   269a0:	80eb883a 	add	r21,r16,r3
   269a4:	a829883a 	mov	r20,r21
   269a8:	84e1883a 	add	r16,r16,r19
   269ac:	a1c00007 	ldb	r7,0(r20)
   269b0:	01800284 	movi	r6,10
   269b4:	a5000044 	addi	r20,r20,1
   269b8:	100b883a 	mov	r5,r2
   269bc:	39fff404 	addi	r7,r7,-48
   269c0:	8809883a 	mov	r4,r17
   269c4:	00267e40 	call	267e4 <__multadd>
   269c8:	a43ff81e 	bne	r20,r16,269ac <__alt_data_end+0xfffe69ac>
   269cc:	ace1883a 	add	r16,r21,r19
   269d0:	843ffe04 	addi	r16,r16,-8
   269d4:	9c800a0e 	bge	r19,r18,26a00 <__s2b+0xd4>
   269d8:	94e5c83a 	sub	r18,r18,r19
   269dc:	84a5883a 	add	r18,r16,r18
   269e0:	81c00007 	ldb	r7,0(r16)
   269e4:	01800284 	movi	r6,10
   269e8:	84000044 	addi	r16,r16,1
   269ec:	100b883a 	mov	r5,r2
   269f0:	39fff404 	addi	r7,r7,-48
   269f4:	8809883a 	mov	r4,r17
   269f8:	00267e40 	call	267e4 <__multadd>
   269fc:	84bff81e 	bne	r16,r18,269e0 <__alt_data_end+0xfffe69e0>
   26a00:	dfc00617 	ldw	ra,24(sp)
   26a04:	dd400517 	ldw	r21,20(sp)
   26a08:	dd000417 	ldw	r20,16(sp)
   26a0c:	dcc00317 	ldw	r19,12(sp)
   26a10:	dc800217 	ldw	r18,8(sp)
   26a14:	dc400117 	ldw	r17,4(sp)
   26a18:	dc000017 	ldw	r16,0(sp)
   26a1c:	dec00704 	addi	sp,sp,28
   26a20:	f800283a 	ret
   26a24:	84000284 	addi	r16,r16,10
   26a28:	1827883a 	mov	r19,r3
   26a2c:	003fe906 	br	269d4 <__alt_data_end+0xfffe69d4>

00026a30 <__hi0bits>:
   26a30:	20bfffec 	andhi	r2,r4,65535
   26a34:	1000141e 	bne	r2,zero,26a88 <__hi0bits+0x58>
   26a38:	2008943a 	slli	r4,r4,16
   26a3c:	00800404 	movi	r2,16
   26a40:	20ffc02c 	andhi	r3,r4,65280
   26a44:	1800021e 	bne	r3,zero,26a50 <__hi0bits+0x20>
   26a48:	2008923a 	slli	r4,r4,8
   26a4c:	10800204 	addi	r2,r2,8
   26a50:	20fc002c 	andhi	r3,r4,61440
   26a54:	1800021e 	bne	r3,zero,26a60 <__hi0bits+0x30>
   26a58:	2008913a 	slli	r4,r4,4
   26a5c:	10800104 	addi	r2,r2,4
   26a60:	20f0002c 	andhi	r3,r4,49152
   26a64:	1800031e 	bne	r3,zero,26a74 <__hi0bits+0x44>
   26a68:	2109883a 	add	r4,r4,r4
   26a6c:	10800084 	addi	r2,r2,2
   26a70:	2109883a 	add	r4,r4,r4
   26a74:	20000316 	blt	r4,zero,26a84 <__hi0bits+0x54>
   26a78:	2110002c 	andhi	r4,r4,16384
   26a7c:	2000041e 	bne	r4,zero,26a90 <__hi0bits+0x60>
   26a80:	00800804 	movi	r2,32
   26a84:	f800283a 	ret
   26a88:	0005883a 	mov	r2,zero
   26a8c:	003fec06 	br	26a40 <__alt_data_end+0xfffe6a40>
   26a90:	10800044 	addi	r2,r2,1
   26a94:	f800283a 	ret

00026a98 <__lo0bits>:
   26a98:	20c00017 	ldw	r3,0(r4)
   26a9c:	188001cc 	andi	r2,r3,7
   26aa0:	10000826 	beq	r2,zero,26ac4 <__lo0bits+0x2c>
   26aa4:	1880004c 	andi	r2,r3,1
   26aa8:	1000211e 	bne	r2,zero,26b30 <__lo0bits+0x98>
   26aac:	1880008c 	andi	r2,r3,2
   26ab0:	1000211e 	bne	r2,zero,26b38 <__lo0bits+0xa0>
   26ab4:	1806d0ba 	srli	r3,r3,2
   26ab8:	00800084 	movi	r2,2
   26abc:	20c00015 	stw	r3,0(r4)
   26ac0:	f800283a 	ret
   26ac4:	18bfffcc 	andi	r2,r3,65535
   26ac8:	10001326 	beq	r2,zero,26b18 <__lo0bits+0x80>
   26acc:	0005883a 	mov	r2,zero
   26ad0:	19403fcc 	andi	r5,r3,255
   26ad4:	2800021e 	bne	r5,zero,26ae0 <__lo0bits+0x48>
   26ad8:	1806d23a 	srli	r3,r3,8
   26adc:	10800204 	addi	r2,r2,8
   26ae0:	194003cc 	andi	r5,r3,15
   26ae4:	2800021e 	bne	r5,zero,26af0 <__lo0bits+0x58>
   26ae8:	1806d13a 	srli	r3,r3,4
   26aec:	10800104 	addi	r2,r2,4
   26af0:	194000cc 	andi	r5,r3,3
   26af4:	2800021e 	bne	r5,zero,26b00 <__lo0bits+0x68>
   26af8:	1806d0ba 	srli	r3,r3,2
   26afc:	10800084 	addi	r2,r2,2
   26b00:	1940004c 	andi	r5,r3,1
   26b04:	2800081e 	bne	r5,zero,26b28 <__lo0bits+0x90>
   26b08:	1806d07a 	srli	r3,r3,1
   26b0c:	1800051e 	bne	r3,zero,26b24 <__lo0bits+0x8c>
   26b10:	00800804 	movi	r2,32
   26b14:	f800283a 	ret
   26b18:	1806d43a 	srli	r3,r3,16
   26b1c:	00800404 	movi	r2,16
   26b20:	003feb06 	br	26ad0 <__alt_data_end+0xfffe6ad0>
   26b24:	10800044 	addi	r2,r2,1
   26b28:	20c00015 	stw	r3,0(r4)
   26b2c:	f800283a 	ret
   26b30:	0005883a 	mov	r2,zero
   26b34:	f800283a 	ret
   26b38:	1806d07a 	srli	r3,r3,1
   26b3c:	00800044 	movi	r2,1
   26b40:	20c00015 	stw	r3,0(r4)
   26b44:	f800283a 	ret

00026b48 <__i2b>:
   26b48:	defffd04 	addi	sp,sp,-12
   26b4c:	dc000015 	stw	r16,0(sp)
   26b50:	04000044 	movi	r16,1
   26b54:	dc400115 	stw	r17,4(sp)
   26b58:	2823883a 	mov	r17,r5
   26b5c:	800b883a 	mov	r5,r16
   26b60:	dfc00215 	stw	ra,8(sp)
   26b64:	00267140 	call	26714 <_Balloc>
   26b68:	14400515 	stw	r17,20(r2)
   26b6c:	14000415 	stw	r16,16(r2)
   26b70:	dfc00217 	ldw	ra,8(sp)
   26b74:	dc400117 	ldw	r17,4(sp)
   26b78:	dc000017 	ldw	r16,0(sp)
   26b7c:	dec00304 	addi	sp,sp,12
   26b80:	f800283a 	ret

00026b84 <__multiply>:
   26b84:	deffef04 	addi	sp,sp,-68
   26b88:	dc400815 	stw	r17,32(sp)
   26b8c:	dc000715 	stw	r16,28(sp)
   26b90:	34400417 	ldw	r17,16(r6)
   26b94:	2c000417 	ldw	r16,16(r5)
   26b98:	dd800d15 	stw	r22,52(sp)
   26b9c:	dc800915 	stw	r18,36(sp)
   26ba0:	dfc01015 	stw	ra,64(sp)
   26ba4:	df000f15 	stw	fp,60(sp)
   26ba8:	ddc00e15 	stw	r23,56(sp)
   26bac:	dd400c15 	stw	r21,48(sp)
   26bb0:	dd000b15 	stw	r20,44(sp)
   26bb4:	dcc00a15 	stw	r19,40(sp)
   26bb8:	2825883a 	mov	r18,r5
   26bbc:	302d883a 	mov	r22,r6
   26bc0:	8440050e 	bge	r16,r17,26bd8 <__multiply+0x54>
   26bc4:	8007883a 	mov	r3,r16
   26bc8:	3025883a 	mov	r18,r6
   26bcc:	8821883a 	mov	r16,r17
   26bd0:	282d883a 	mov	r22,r5
   26bd4:	1823883a 	mov	r17,r3
   26bd8:	90800217 	ldw	r2,8(r18)
   26bdc:	8447883a 	add	r3,r16,r17
   26be0:	d8c00215 	stw	r3,8(sp)
   26be4:	91400117 	ldw	r5,4(r18)
   26be8:	10c0010e 	bge	r2,r3,26bf0 <__multiply+0x6c>
   26bec:	29400044 	addi	r5,r5,1
   26bf0:	00267140 	call	26714 <_Balloc>
   26bf4:	d8c00217 	ldw	r3,8(sp)
   26bf8:	d8800615 	stw	r2,24(sp)
   26bfc:	18eb883a 	add	r21,r3,r3
   26c00:	ad6b883a 	add	r21,r21,r21
   26c04:	10c00504 	addi	r3,r2,20
   26c08:	1d6b883a 	add	r21,r3,r21
   26c0c:	d8c00115 	stw	r3,4(sp)
   26c10:	dd400315 	stw	r21,12(sp)
   26c14:	1805883a 	mov	r2,r3
   26c18:	1d40042e 	bgeu	r3,r21,26c2c <__multiply+0xa8>
   26c1c:	d8c00317 	ldw	r3,12(sp)
   26c20:	10000015 	stw	zero,0(r2)
   26c24:	10800104 	addi	r2,r2,4
   26c28:	10fffc36 	bltu	r2,r3,26c1c <__alt_data_end+0xfffe6c1c>
   26c2c:	8c63883a 	add	r17,r17,r17
   26c30:	b5800504 	addi	r22,r22,20
   26c34:	8c63883a 	add	r17,r17,r17
   26c38:	94800504 	addi	r18,r18,20
   26c3c:	8421883a 	add	r16,r16,r16
   26c40:	b463883a 	add	r17,r22,r17
   26c44:	8421883a 	add	r16,r16,r16
   26c48:	dd800015 	stw	r22,0(sp)
   26c4c:	dc800415 	stw	r18,16(sp)
   26c50:	dc400515 	stw	r17,20(sp)
   26c54:	9429883a 	add	r20,r18,r16
   26c58:	b4404f2e 	bgeu	r22,r17,26d98 <__multiply+0x214>
   26c5c:	d8c00017 	ldw	r3,0(sp)
   26c60:	1c800017 	ldw	r18,0(r3)
   26c64:	947fffcc 	andi	r17,r18,65535
   26c68:	88001e26 	beq	r17,zero,26ce4 <__multiply+0x160>
   26c6c:	dd800117 	ldw	r22,4(sp)
   26c70:	dd400417 	ldw	r21,16(sp)
   26c74:	0027883a 	mov	r19,zero
   26c78:	ac800017 	ldw	r18,0(r21)
   26c7c:	b4000017 	ldw	r16,0(r22)
   26c80:	880b883a 	mov	r5,r17
   26c84:	913fffcc 	andi	r4,r18,65535
   26c88:	002adc80 	call	2adc8 <__mulsi3>
   26c8c:	9008d43a 	srli	r4,r18,16
   26c90:	84bfffcc 	andi	r18,r16,65535
   26c94:	1485883a 	add	r2,r2,r18
   26c98:	14e5883a 	add	r18,r2,r19
   26c9c:	8020d43a 	srli	r16,r16,16
   26ca0:	9026d43a 	srli	r19,r18,16
   26ca4:	880b883a 	mov	r5,r17
   26ca8:	002adc80 	call	2adc8 <__mulsi3>
   26cac:	1405883a 	add	r2,r2,r16
   26cb0:	14e1883a 	add	r16,r2,r19
   26cb4:	90ffffcc 	andi	r3,r18,65535
   26cb8:	8024943a 	slli	r18,r16,16
   26cbc:	ad400104 	addi	r21,r21,4
   26cc0:	b005883a 	mov	r2,r22
   26cc4:	90c6b03a 	or	r3,r18,r3
   26cc8:	b0c00015 	stw	r3,0(r22)
   26ccc:	8026d43a 	srli	r19,r16,16
   26cd0:	b5800104 	addi	r22,r22,4
   26cd4:	ad3fe836 	bltu	r21,r20,26c78 <__alt_data_end+0xfffe6c78>
   26cd8:	d8c00017 	ldw	r3,0(sp)
   26cdc:	14c00115 	stw	r19,4(r2)
   26ce0:	1c800017 	ldw	r18,0(r3)
   26ce4:	9024d43a 	srli	r18,r18,16
   26ce8:	90002226 	beq	r18,zero,26d74 <__multiply+0x1f0>
   26cec:	d8c00117 	ldw	r3,4(sp)
   26cf0:	dd800417 	ldw	r22,16(sp)
   26cf4:	002f883a 	mov	r23,zero
   26cf8:	1f000017 	ldw	fp,0(r3)
   26cfc:	1823883a 	mov	r17,r3
   26d00:	182b883a 	mov	r21,r3
   26d04:	e021883a 	mov	r16,fp
   26d08:	00000106 	br	26d10 <__multiply+0x18c>
   26d0c:	982b883a 	mov	r21,r19
   26d10:	b100000b 	ldhu	r4,0(r22)
   26d14:	8020d43a 	srli	r16,r16,16
   26d18:	900b883a 	mov	r5,r18
   26d1c:	002adc80 	call	2adc8 <__mulsi3>
   26d20:	1405883a 	add	r2,r2,r16
   26d24:	15ef883a 	add	r23,r2,r23
   26d28:	b804943a 	slli	r2,r23,16
   26d2c:	e0ffffcc 	andi	r3,fp,65535
   26d30:	8c400104 	addi	r17,r17,4
   26d34:	10c6b03a 	or	r3,r2,r3
   26d38:	88ffff15 	stw	r3,-4(r17)
   26d3c:	b5800104 	addi	r22,r22,4
   26d40:	b13fff17 	ldw	r4,-4(r22)
   26d44:	acc00104 	addi	r19,r21,4
   26d48:	900b883a 	mov	r5,r18
   26d4c:	2008d43a 	srli	r4,r4,16
   26d50:	9c000017 	ldw	r16,0(r19)
   26d54:	002adc80 	call	2adc8 <__mulsi3>
   26d58:	b806d43a 	srli	r3,r23,16
   26d5c:	813fffcc 	andi	r4,r16,65535
   26d60:	1105883a 	add	r2,r2,r4
   26d64:	10f9883a 	add	fp,r2,r3
   26d68:	e02ed43a 	srli	r23,fp,16
   26d6c:	b53fe736 	bltu	r22,r20,26d0c <__alt_data_end+0xfffe6d0c>
   26d70:	af000115 	stw	fp,4(r21)
   26d74:	d8c00017 	ldw	r3,0(sp)
   26d78:	d9000517 	ldw	r4,20(sp)
   26d7c:	18c00104 	addi	r3,r3,4
   26d80:	d8c00015 	stw	r3,0(sp)
   26d84:	d8c00117 	ldw	r3,4(sp)
   26d88:	18c00104 	addi	r3,r3,4
   26d8c:	d8c00115 	stw	r3,4(sp)
   26d90:	d8c00017 	ldw	r3,0(sp)
   26d94:	193fb136 	bltu	r3,r4,26c5c <__alt_data_end+0xfffe6c5c>
   26d98:	d8c00217 	ldw	r3,8(sp)
   26d9c:	00c00c0e 	bge	zero,r3,26dd0 <__multiply+0x24c>
   26da0:	d8c00317 	ldw	r3,12(sp)
   26da4:	18bfff17 	ldw	r2,-4(r3)
   26da8:	1d7fff04 	addi	r21,r3,-4
   26dac:	10000326 	beq	r2,zero,26dbc <__multiply+0x238>
   26db0:	00000706 	br	26dd0 <__multiply+0x24c>
   26db4:	a8800017 	ldw	r2,0(r21)
   26db8:	1000051e 	bne	r2,zero,26dd0 <__multiply+0x24c>
   26dbc:	d8c00217 	ldw	r3,8(sp)
   26dc0:	ad7fff04 	addi	r21,r21,-4
   26dc4:	18ffffc4 	addi	r3,r3,-1
   26dc8:	d8c00215 	stw	r3,8(sp)
   26dcc:	183ff91e 	bne	r3,zero,26db4 <__alt_data_end+0xfffe6db4>
   26dd0:	d8c00617 	ldw	r3,24(sp)
   26dd4:	d9000217 	ldw	r4,8(sp)
   26dd8:	1805883a 	mov	r2,r3
   26ddc:	19000415 	stw	r4,16(r3)
   26de0:	dfc01017 	ldw	ra,64(sp)
   26de4:	df000f17 	ldw	fp,60(sp)
   26de8:	ddc00e17 	ldw	r23,56(sp)
   26dec:	dd800d17 	ldw	r22,52(sp)
   26df0:	dd400c17 	ldw	r21,48(sp)
   26df4:	dd000b17 	ldw	r20,44(sp)
   26df8:	dcc00a17 	ldw	r19,40(sp)
   26dfc:	dc800917 	ldw	r18,36(sp)
   26e00:	dc400817 	ldw	r17,32(sp)
   26e04:	dc000717 	ldw	r16,28(sp)
   26e08:	dec01104 	addi	sp,sp,68
   26e0c:	f800283a 	ret

00026e10 <__pow5mult>:
   26e10:	defffa04 	addi	sp,sp,-24
   26e14:	dcc00315 	stw	r19,12(sp)
   26e18:	dc000015 	stw	r16,0(sp)
   26e1c:	dfc00515 	stw	ra,20(sp)
   26e20:	dd000415 	stw	r20,16(sp)
   26e24:	dc800215 	stw	r18,8(sp)
   26e28:	dc400115 	stw	r17,4(sp)
   26e2c:	308000cc 	andi	r2,r6,3
   26e30:	3021883a 	mov	r16,r6
   26e34:	2027883a 	mov	r19,r4
   26e38:	10002f1e 	bne	r2,zero,26ef8 <__pow5mult+0xe8>
   26e3c:	2825883a 	mov	r18,r5
   26e40:	8021d0ba 	srai	r16,r16,2
   26e44:	80001a26 	beq	r16,zero,26eb0 <__pow5mult+0xa0>
   26e48:	9c401217 	ldw	r17,72(r19)
   26e4c:	8800061e 	bne	r17,zero,26e68 <__pow5mult+0x58>
   26e50:	00003406 	br	26f24 <__pow5mult+0x114>
   26e54:	8021d07a 	srai	r16,r16,1
   26e58:	80001526 	beq	r16,zero,26eb0 <__pow5mult+0xa0>
   26e5c:	88800017 	ldw	r2,0(r17)
   26e60:	10001c26 	beq	r2,zero,26ed4 <__pow5mult+0xc4>
   26e64:	1023883a 	mov	r17,r2
   26e68:	8080004c 	andi	r2,r16,1
   26e6c:	103ff926 	beq	r2,zero,26e54 <__alt_data_end+0xfffe6e54>
   26e70:	880d883a 	mov	r6,r17
   26e74:	900b883a 	mov	r5,r18
   26e78:	9809883a 	mov	r4,r19
   26e7c:	0026b840 	call	26b84 <__multiply>
   26e80:	90001b26 	beq	r18,zero,26ef0 <__pow5mult+0xe0>
   26e84:	91000117 	ldw	r4,4(r18)
   26e88:	98c01317 	ldw	r3,76(r19)
   26e8c:	8021d07a 	srai	r16,r16,1
   26e90:	2109883a 	add	r4,r4,r4
   26e94:	2109883a 	add	r4,r4,r4
   26e98:	1907883a 	add	r3,r3,r4
   26e9c:	19000017 	ldw	r4,0(r3)
   26ea0:	91000015 	stw	r4,0(r18)
   26ea4:	1c800015 	stw	r18,0(r3)
   26ea8:	1025883a 	mov	r18,r2
   26eac:	803feb1e 	bne	r16,zero,26e5c <__alt_data_end+0xfffe6e5c>
   26eb0:	9005883a 	mov	r2,r18
   26eb4:	dfc00517 	ldw	ra,20(sp)
   26eb8:	dd000417 	ldw	r20,16(sp)
   26ebc:	dcc00317 	ldw	r19,12(sp)
   26ec0:	dc800217 	ldw	r18,8(sp)
   26ec4:	dc400117 	ldw	r17,4(sp)
   26ec8:	dc000017 	ldw	r16,0(sp)
   26ecc:	dec00604 	addi	sp,sp,24
   26ed0:	f800283a 	ret
   26ed4:	880d883a 	mov	r6,r17
   26ed8:	880b883a 	mov	r5,r17
   26edc:	9809883a 	mov	r4,r19
   26ee0:	0026b840 	call	26b84 <__multiply>
   26ee4:	88800015 	stw	r2,0(r17)
   26ee8:	10000015 	stw	zero,0(r2)
   26eec:	003fdd06 	br	26e64 <__alt_data_end+0xfffe6e64>
   26ef0:	1025883a 	mov	r18,r2
   26ef4:	003fd706 	br	26e54 <__alt_data_end+0xfffe6e54>
   26ef8:	10bfffc4 	addi	r2,r2,-1
   26efc:	1085883a 	add	r2,r2,r2
   26f00:	00c000f4 	movhi	r3,3
   26f04:	18ca2c04 	addi	r3,r3,10416
   26f08:	1085883a 	add	r2,r2,r2
   26f0c:	1885883a 	add	r2,r3,r2
   26f10:	11800017 	ldw	r6,0(r2)
   26f14:	000f883a 	mov	r7,zero
   26f18:	00267e40 	call	267e4 <__multadd>
   26f1c:	1025883a 	mov	r18,r2
   26f20:	003fc706 	br	26e40 <__alt_data_end+0xfffe6e40>
   26f24:	05000044 	movi	r20,1
   26f28:	a00b883a 	mov	r5,r20
   26f2c:	9809883a 	mov	r4,r19
   26f30:	00267140 	call	26714 <_Balloc>
   26f34:	1023883a 	mov	r17,r2
   26f38:	00809c44 	movi	r2,625
   26f3c:	88800515 	stw	r2,20(r17)
   26f40:	8d000415 	stw	r20,16(r17)
   26f44:	9c401215 	stw	r17,72(r19)
   26f48:	88000015 	stw	zero,0(r17)
   26f4c:	003fc606 	br	26e68 <__alt_data_end+0xfffe6e68>

00026f50 <__lshift>:
   26f50:	defff904 	addi	sp,sp,-28
   26f54:	dd400515 	stw	r21,20(sp)
   26f58:	dcc00315 	stw	r19,12(sp)
   26f5c:	302bd17a 	srai	r21,r6,5
   26f60:	2cc00417 	ldw	r19,16(r5)
   26f64:	28800217 	ldw	r2,8(r5)
   26f68:	dd000415 	stw	r20,16(sp)
   26f6c:	ace7883a 	add	r19,r21,r19
   26f70:	dc800215 	stw	r18,8(sp)
   26f74:	dc400115 	stw	r17,4(sp)
   26f78:	dc000015 	stw	r16,0(sp)
   26f7c:	dfc00615 	stw	ra,24(sp)
   26f80:	9c000044 	addi	r16,r19,1
   26f84:	2823883a 	mov	r17,r5
   26f88:	3029883a 	mov	r20,r6
   26f8c:	2025883a 	mov	r18,r4
   26f90:	29400117 	ldw	r5,4(r5)
   26f94:	1400030e 	bge	r2,r16,26fa4 <__lshift+0x54>
   26f98:	1085883a 	add	r2,r2,r2
   26f9c:	29400044 	addi	r5,r5,1
   26fa0:	143ffd16 	blt	r2,r16,26f98 <__alt_data_end+0xfffe6f98>
   26fa4:	9009883a 	mov	r4,r18
   26fa8:	00267140 	call	26714 <_Balloc>
   26fac:	10c00504 	addi	r3,r2,20
   26fb0:	0540070e 	bge	zero,r21,26fd0 <__lshift+0x80>
   26fb4:	ad6b883a 	add	r21,r21,r21
   26fb8:	ad6b883a 	add	r21,r21,r21
   26fbc:	1809883a 	mov	r4,r3
   26fc0:	1d47883a 	add	r3,r3,r21
   26fc4:	20000015 	stw	zero,0(r4)
   26fc8:	21000104 	addi	r4,r4,4
   26fcc:	193ffd1e 	bne	r3,r4,26fc4 <__alt_data_end+0xfffe6fc4>
   26fd0:	8a000417 	ldw	r8,16(r17)
   26fd4:	89000504 	addi	r4,r17,20
   26fd8:	a18007cc 	andi	r6,r20,31
   26fdc:	4211883a 	add	r8,r8,r8
   26fe0:	4211883a 	add	r8,r8,r8
   26fe4:	2211883a 	add	r8,r4,r8
   26fe8:	30002326 	beq	r6,zero,27078 <__lshift+0x128>
   26fec:	02400804 	movi	r9,32
   26ff0:	4993c83a 	sub	r9,r9,r6
   26ff4:	000b883a 	mov	r5,zero
   26ff8:	21c00017 	ldw	r7,0(r4)
   26ffc:	1815883a 	mov	r10,r3
   27000:	18c00104 	addi	r3,r3,4
   27004:	398e983a 	sll	r7,r7,r6
   27008:	21000104 	addi	r4,r4,4
   2700c:	394ab03a 	or	r5,r7,r5
   27010:	197fff15 	stw	r5,-4(r3)
   27014:	217fff17 	ldw	r5,-4(r4)
   27018:	2a4ad83a 	srl	r5,r5,r9
   2701c:	223ff636 	bltu	r4,r8,26ff8 <__alt_data_end+0xfffe6ff8>
   27020:	51400115 	stw	r5,4(r10)
   27024:	28001a1e 	bne	r5,zero,27090 <__lshift+0x140>
   27028:	843fffc4 	addi	r16,r16,-1
   2702c:	14000415 	stw	r16,16(r2)
   27030:	88000826 	beq	r17,zero,27054 <__lshift+0x104>
   27034:	89000117 	ldw	r4,4(r17)
   27038:	90c01317 	ldw	r3,76(r18)
   2703c:	2109883a 	add	r4,r4,r4
   27040:	2109883a 	add	r4,r4,r4
   27044:	1907883a 	add	r3,r3,r4
   27048:	19000017 	ldw	r4,0(r3)
   2704c:	89000015 	stw	r4,0(r17)
   27050:	1c400015 	stw	r17,0(r3)
   27054:	dfc00617 	ldw	ra,24(sp)
   27058:	dd400517 	ldw	r21,20(sp)
   2705c:	dd000417 	ldw	r20,16(sp)
   27060:	dcc00317 	ldw	r19,12(sp)
   27064:	dc800217 	ldw	r18,8(sp)
   27068:	dc400117 	ldw	r17,4(sp)
   2706c:	dc000017 	ldw	r16,0(sp)
   27070:	dec00704 	addi	sp,sp,28
   27074:	f800283a 	ret
   27078:	21400017 	ldw	r5,0(r4)
   2707c:	18c00104 	addi	r3,r3,4
   27080:	21000104 	addi	r4,r4,4
   27084:	197fff15 	stw	r5,-4(r3)
   27088:	223ffb36 	bltu	r4,r8,27078 <__alt_data_end+0xfffe7078>
   2708c:	003fe606 	br	27028 <__alt_data_end+0xfffe7028>
   27090:	9c000084 	addi	r16,r19,2
   27094:	003fe406 	br	27028 <__alt_data_end+0xfffe7028>

00027098 <__mcmp>:
   27098:	20800417 	ldw	r2,16(r4)
   2709c:	28c00417 	ldw	r3,16(r5)
   270a0:	10c5c83a 	sub	r2,r2,r3
   270a4:	1000111e 	bne	r2,zero,270ec <__mcmp+0x54>
   270a8:	18c7883a 	add	r3,r3,r3
   270ac:	18c7883a 	add	r3,r3,r3
   270b0:	21000504 	addi	r4,r4,20
   270b4:	29400504 	addi	r5,r5,20
   270b8:	20c5883a 	add	r2,r4,r3
   270bc:	28cb883a 	add	r5,r5,r3
   270c0:	00000106 	br	270c8 <__mcmp+0x30>
   270c4:	20800a2e 	bgeu	r4,r2,270f0 <__mcmp+0x58>
   270c8:	10bfff04 	addi	r2,r2,-4
   270cc:	297fff04 	addi	r5,r5,-4
   270d0:	11800017 	ldw	r6,0(r2)
   270d4:	28c00017 	ldw	r3,0(r5)
   270d8:	30fffa26 	beq	r6,r3,270c4 <__alt_data_end+0xfffe70c4>
   270dc:	30c00236 	bltu	r6,r3,270e8 <__mcmp+0x50>
   270e0:	00800044 	movi	r2,1
   270e4:	f800283a 	ret
   270e8:	00bfffc4 	movi	r2,-1
   270ec:	f800283a 	ret
   270f0:	0005883a 	mov	r2,zero
   270f4:	f800283a 	ret

000270f8 <__mdiff>:
   270f8:	28c00417 	ldw	r3,16(r5)
   270fc:	30800417 	ldw	r2,16(r6)
   27100:	defffa04 	addi	sp,sp,-24
   27104:	dcc00315 	stw	r19,12(sp)
   27108:	dc800215 	stw	r18,8(sp)
   2710c:	dfc00515 	stw	ra,20(sp)
   27110:	dd000415 	stw	r20,16(sp)
   27114:	dc400115 	stw	r17,4(sp)
   27118:	dc000015 	stw	r16,0(sp)
   2711c:	1887c83a 	sub	r3,r3,r2
   27120:	2825883a 	mov	r18,r5
   27124:	3027883a 	mov	r19,r6
   27128:	1800141e 	bne	r3,zero,2717c <__mdiff+0x84>
   2712c:	1085883a 	add	r2,r2,r2
   27130:	1085883a 	add	r2,r2,r2
   27134:	2a000504 	addi	r8,r5,20
   27138:	34000504 	addi	r16,r6,20
   2713c:	4087883a 	add	r3,r8,r2
   27140:	8085883a 	add	r2,r16,r2
   27144:	00000106 	br	2714c <__mdiff+0x54>
   27148:	40c0592e 	bgeu	r8,r3,272b0 <__mdiff+0x1b8>
   2714c:	18ffff04 	addi	r3,r3,-4
   27150:	10bfff04 	addi	r2,r2,-4
   27154:	19c00017 	ldw	r7,0(r3)
   27158:	11400017 	ldw	r5,0(r2)
   2715c:	397ffa26 	beq	r7,r5,27148 <__alt_data_end+0xfffe7148>
   27160:	3940592e 	bgeu	r7,r5,272c8 <__mdiff+0x1d0>
   27164:	9005883a 	mov	r2,r18
   27168:	4023883a 	mov	r17,r8
   2716c:	9825883a 	mov	r18,r19
   27170:	05000044 	movi	r20,1
   27174:	1027883a 	mov	r19,r2
   27178:	00000406 	br	2718c <__mdiff+0x94>
   2717c:	18005616 	blt	r3,zero,272d8 <__mdiff+0x1e0>
   27180:	34400504 	addi	r17,r6,20
   27184:	2c000504 	addi	r16,r5,20
   27188:	0029883a 	mov	r20,zero
   2718c:	91400117 	ldw	r5,4(r18)
   27190:	00267140 	call	26714 <_Balloc>
   27194:	92400417 	ldw	r9,16(r18)
   27198:	9b000417 	ldw	r12,16(r19)
   2719c:	12c00504 	addi	r11,r2,20
   271a0:	4a51883a 	add	r8,r9,r9
   271a4:	6319883a 	add	r12,r12,r12
   271a8:	4211883a 	add	r8,r8,r8
   271ac:	6319883a 	add	r12,r12,r12
   271b0:	15000315 	stw	r20,12(r2)
   271b4:	8211883a 	add	r8,r16,r8
   271b8:	8b19883a 	add	r12,r17,r12
   271bc:	0007883a 	mov	r3,zero
   271c0:	81400017 	ldw	r5,0(r16)
   271c4:	89c00017 	ldw	r7,0(r17)
   271c8:	59800104 	addi	r6,r11,4
   271cc:	293fffcc 	andi	r4,r5,65535
   271d0:	20c7883a 	add	r3,r4,r3
   271d4:	393fffcc 	andi	r4,r7,65535
   271d8:	1909c83a 	sub	r4,r3,r4
   271dc:	280ad43a 	srli	r5,r5,16
   271e0:	380ed43a 	srli	r7,r7,16
   271e4:	2007d43a 	srai	r3,r4,16
   271e8:	213fffcc 	andi	r4,r4,65535
   271ec:	29cbc83a 	sub	r5,r5,r7
   271f0:	28c7883a 	add	r3,r5,r3
   271f4:	180a943a 	slli	r5,r3,16
   271f8:	8c400104 	addi	r17,r17,4
   271fc:	84000104 	addi	r16,r16,4
   27200:	2908b03a 	or	r4,r5,r4
   27204:	59000015 	stw	r4,0(r11)
   27208:	1807d43a 	srai	r3,r3,16
   2720c:	3015883a 	mov	r10,r6
   27210:	3017883a 	mov	r11,r6
   27214:	8b3fea36 	bltu	r17,r12,271c0 <__alt_data_end+0xfffe71c0>
   27218:	8200162e 	bgeu	r16,r8,27274 <__mdiff+0x17c>
   2721c:	8017883a 	mov	r11,r16
   27220:	59400017 	ldw	r5,0(r11)
   27224:	31800104 	addi	r6,r6,4
   27228:	5ac00104 	addi	r11,r11,4
   2722c:	293fffcc 	andi	r4,r5,65535
   27230:	20c7883a 	add	r3,r4,r3
   27234:	280ed43a 	srli	r7,r5,16
   27238:	180bd43a 	srai	r5,r3,16
   2723c:	193fffcc 	andi	r4,r3,65535
   27240:	3947883a 	add	r3,r7,r5
   27244:	180a943a 	slli	r5,r3,16
   27248:	1807d43a 	srai	r3,r3,16
   2724c:	2908b03a 	or	r4,r5,r4
   27250:	313fff15 	stw	r4,-4(r6)
   27254:	5a3ff236 	bltu	r11,r8,27220 <__alt_data_end+0xfffe7220>
   27258:	0406303a 	nor	r3,zero,r16
   2725c:	1a07883a 	add	r3,r3,r8
   27260:	1806d0ba 	srli	r3,r3,2
   27264:	18c00044 	addi	r3,r3,1
   27268:	18c7883a 	add	r3,r3,r3
   2726c:	18c7883a 	add	r3,r3,r3
   27270:	50d5883a 	add	r10,r10,r3
   27274:	50ffff04 	addi	r3,r10,-4
   27278:	2000041e 	bne	r4,zero,2728c <__mdiff+0x194>
   2727c:	18ffff04 	addi	r3,r3,-4
   27280:	19000017 	ldw	r4,0(r3)
   27284:	4a7fffc4 	addi	r9,r9,-1
   27288:	203ffc26 	beq	r4,zero,2727c <__alt_data_end+0xfffe727c>
   2728c:	12400415 	stw	r9,16(r2)
   27290:	dfc00517 	ldw	ra,20(sp)
   27294:	dd000417 	ldw	r20,16(sp)
   27298:	dcc00317 	ldw	r19,12(sp)
   2729c:	dc800217 	ldw	r18,8(sp)
   272a0:	dc400117 	ldw	r17,4(sp)
   272a4:	dc000017 	ldw	r16,0(sp)
   272a8:	dec00604 	addi	sp,sp,24
   272ac:	f800283a 	ret
   272b0:	000b883a 	mov	r5,zero
   272b4:	00267140 	call	26714 <_Balloc>
   272b8:	00c00044 	movi	r3,1
   272bc:	10c00415 	stw	r3,16(r2)
   272c0:	10000515 	stw	zero,20(r2)
   272c4:	003ff206 	br	27290 <__alt_data_end+0xfffe7290>
   272c8:	8023883a 	mov	r17,r16
   272cc:	0029883a 	mov	r20,zero
   272d0:	4021883a 	mov	r16,r8
   272d4:	003fad06 	br	2718c <__alt_data_end+0xfffe718c>
   272d8:	9005883a 	mov	r2,r18
   272dc:	94400504 	addi	r17,r18,20
   272e0:	9c000504 	addi	r16,r19,20
   272e4:	9825883a 	mov	r18,r19
   272e8:	05000044 	movi	r20,1
   272ec:	1027883a 	mov	r19,r2
   272f0:	003fa606 	br	2718c <__alt_data_end+0xfffe718c>

000272f4 <__ulp>:
   272f4:	295ffc2c 	andhi	r5,r5,32752
   272f8:	00bf3034 	movhi	r2,64704
   272fc:	2887883a 	add	r3,r5,r2
   27300:	00c0020e 	bge	zero,r3,2730c <__ulp+0x18>
   27304:	0005883a 	mov	r2,zero
   27308:	f800283a 	ret
   2730c:	00c7c83a 	sub	r3,zero,r3
   27310:	1807d53a 	srai	r3,r3,20
   27314:	008004c4 	movi	r2,19
   27318:	10c00b0e 	bge	r2,r3,27348 <__ulp+0x54>
   2731c:	18bffb04 	addi	r2,r3,-20
   27320:	01000784 	movi	r4,30
   27324:	0007883a 	mov	r3,zero
   27328:	20800516 	blt	r4,r2,27340 <__ulp+0x4c>
   2732c:	010007c4 	movi	r4,31
   27330:	2089c83a 	sub	r4,r4,r2
   27334:	00800044 	movi	r2,1
   27338:	1104983a 	sll	r2,r2,r4
   2733c:	f800283a 	ret
   27340:	00800044 	movi	r2,1
   27344:	f800283a 	ret
   27348:	01400234 	movhi	r5,8
   2734c:	28c7d83a 	sra	r3,r5,r3
   27350:	0005883a 	mov	r2,zero
   27354:	f800283a 	ret

00027358 <__b2d>:
   27358:	defffa04 	addi	sp,sp,-24
   2735c:	dc000015 	stw	r16,0(sp)
   27360:	24000417 	ldw	r16,16(r4)
   27364:	dc400115 	stw	r17,4(sp)
   27368:	24400504 	addi	r17,r4,20
   2736c:	8421883a 	add	r16,r16,r16
   27370:	8421883a 	add	r16,r16,r16
   27374:	8c21883a 	add	r16,r17,r16
   27378:	dc800215 	stw	r18,8(sp)
   2737c:	84bfff17 	ldw	r18,-4(r16)
   27380:	dd000415 	stw	r20,16(sp)
   27384:	dcc00315 	stw	r19,12(sp)
   27388:	9009883a 	mov	r4,r18
   2738c:	2829883a 	mov	r20,r5
   27390:	dfc00515 	stw	ra,20(sp)
   27394:	0026a300 	call	26a30 <__hi0bits>
   27398:	00c00804 	movi	r3,32
   2739c:	1889c83a 	sub	r4,r3,r2
   273a0:	a1000015 	stw	r4,0(r20)
   273a4:	01000284 	movi	r4,10
   273a8:	84ffff04 	addi	r19,r16,-4
   273ac:	20801216 	blt	r4,r2,273f8 <__b2d+0xa0>
   273b0:	018002c4 	movi	r6,11
   273b4:	308dc83a 	sub	r6,r6,r2
   273b8:	9186d83a 	srl	r3,r18,r6
   273bc:	18cffc34 	orhi	r3,r3,16368
   273c0:	8cc0212e 	bgeu	r17,r19,27448 <__b2d+0xf0>
   273c4:	813ffe17 	ldw	r4,-8(r16)
   273c8:	218cd83a 	srl	r6,r4,r6
   273cc:	10800544 	addi	r2,r2,21
   273d0:	9084983a 	sll	r2,r18,r2
   273d4:	1184b03a 	or	r2,r2,r6
   273d8:	dfc00517 	ldw	ra,20(sp)
   273dc:	dd000417 	ldw	r20,16(sp)
   273e0:	dcc00317 	ldw	r19,12(sp)
   273e4:	dc800217 	ldw	r18,8(sp)
   273e8:	dc400117 	ldw	r17,4(sp)
   273ec:	dc000017 	ldw	r16,0(sp)
   273f0:	dec00604 	addi	sp,sp,24
   273f4:	f800283a 	ret
   273f8:	8cc00f2e 	bgeu	r17,r19,27438 <__b2d+0xe0>
   273fc:	117ffd44 	addi	r5,r2,-11
   27400:	80bffe17 	ldw	r2,-8(r16)
   27404:	28000e26 	beq	r5,zero,27440 <__b2d+0xe8>
   27408:	1949c83a 	sub	r4,r3,r5
   2740c:	9164983a 	sll	r18,r18,r5
   27410:	1106d83a 	srl	r3,r2,r4
   27414:	81bffe04 	addi	r6,r16,-8
   27418:	948ffc34 	orhi	r18,r18,16368
   2741c:	90c6b03a 	or	r3,r18,r3
   27420:	89800e2e 	bgeu	r17,r6,2745c <__b2d+0x104>
   27424:	81bffd17 	ldw	r6,-12(r16)
   27428:	1144983a 	sll	r2,r2,r5
   2742c:	310ad83a 	srl	r5,r6,r4
   27430:	2884b03a 	or	r2,r5,r2
   27434:	003fe806 	br	273d8 <__alt_data_end+0xfffe73d8>
   27438:	10bffd44 	addi	r2,r2,-11
   2743c:	1000041e 	bne	r2,zero,27450 <__b2d+0xf8>
   27440:	90cffc34 	orhi	r3,r18,16368
   27444:	003fe406 	br	273d8 <__alt_data_end+0xfffe73d8>
   27448:	000d883a 	mov	r6,zero
   2744c:	003fdf06 	br	273cc <__alt_data_end+0xfffe73cc>
   27450:	90a4983a 	sll	r18,r18,r2
   27454:	0005883a 	mov	r2,zero
   27458:	003ff906 	br	27440 <__alt_data_end+0xfffe7440>
   2745c:	1144983a 	sll	r2,r2,r5
   27460:	003fdd06 	br	273d8 <__alt_data_end+0xfffe73d8>

00027464 <__d2b>:
   27464:	defff804 	addi	sp,sp,-32
   27468:	dc000215 	stw	r16,8(sp)
   2746c:	3021883a 	mov	r16,r6
   27470:	dc400315 	stw	r17,12(sp)
   27474:	8022907a 	slli	r17,r16,1
   27478:	dd000615 	stw	r20,24(sp)
   2747c:	2829883a 	mov	r20,r5
   27480:	01400044 	movi	r5,1
   27484:	dcc00515 	stw	r19,20(sp)
   27488:	dc800415 	stw	r18,16(sp)
   2748c:	dfc00715 	stw	ra,28(sp)
   27490:	3825883a 	mov	r18,r7
   27494:	8822d57a 	srli	r17,r17,21
   27498:	00267140 	call	26714 <_Balloc>
   2749c:	1027883a 	mov	r19,r2
   274a0:	00800434 	movhi	r2,16
   274a4:	10bfffc4 	addi	r2,r2,-1
   274a8:	808c703a 	and	r6,r16,r2
   274ac:	88000126 	beq	r17,zero,274b4 <__d2b+0x50>
   274b0:	31800434 	orhi	r6,r6,16
   274b4:	d9800015 	stw	r6,0(sp)
   274b8:	a0002426 	beq	r20,zero,2754c <__d2b+0xe8>
   274bc:	d9000104 	addi	r4,sp,4
   274c0:	dd000115 	stw	r20,4(sp)
   274c4:	0026a980 	call	26a98 <__lo0bits>
   274c8:	d8c00017 	ldw	r3,0(sp)
   274cc:	10002f1e 	bne	r2,zero,2758c <__d2b+0x128>
   274d0:	d9000117 	ldw	r4,4(sp)
   274d4:	99000515 	stw	r4,20(r19)
   274d8:	1821003a 	cmpeq	r16,r3,zero
   274dc:	01000084 	movi	r4,2
   274e0:	2421c83a 	sub	r16,r4,r16
   274e4:	98c00615 	stw	r3,24(r19)
   274e8:	9c000415 	stw	r16,16(r19)
   274ec:	88001f1e 	bne	r17,zero,2756c <__d2b+0x108>
   274f0:	10bef384 	addi	r2,r2,-1074
   274f4:	90800015 	stw	r2,0(r18)
   274f8:	00900034 	movhi	r2,16384
   274fc:	10bfffc4 	addi	r2,r2,-1
   27500:	8085883a 	add	r2,r16,r2
   27504:	1085883a 	add	r2,r2,r2
   27508:	1085883a 	add	r2,r2,r2
   2750c:	9885883a 	add	r2,r19,r2
   27510:	11000517 	ldw	r4,20(r2)
   27514:	8020917a 	slli	r16,r16,5
   27518:	0026a300 	call	26a30 <__hi0bits>
   2751c:	d8c00817 	ldw	r3,32(sp)
   27520:	8085c83a 	sub	r2,r16,r2
   27524:	18800015 	stw	r2,0(r3)
   27528:	9805883a 	mov	r2,r19
   2752c:	dfc00717 	ldw	ra,28(sp)
   27530:	dd000617 	ldw	r20,24(sp)
   27534:	dcc00517 	ldw	r19,20(sp)
   27538:	dc800417 	ldw	r18,16(sp)
   2753c:	dc400317 	ldw	r17,12(sp)
   27540:	dc000217 	ldw	r16,8(sp)
   27544:	dec00804 	addi	sp,sp,32
   27548:	f800283a 	ret
   2754c:	d809883a 	mov	r4,sp
   27550:	0026a980 	call	26a98 <__lo0bits>
   27554:	d8c00017 	ldw	r3,0(sp)
   27558:	04000044 	movi	r16,1
   2755c:	9c000415 	stw	r16,16(r19)
   27560:	98c00515 	stw	r3,20(r19)
   27564:	10800804 	addi	r2,r2,32
   27568:	883fe126 	beq	r17,zero,274f0 <__alt_data_end+0xfffe74f0>
   2756c:	00c00d44 	movi	r3,53
   27570:	8c7ef344 	addi	r17,r17,-1075
   27574:	88a3883a 	add	r17,r17,r2
   27578:	1885c83a 	sub	r2,r3,r2
   2757c:	d8c00817 	ldw	r3,32(sp)
   27580:	94400015 	stw	r17,0(r18)
   27584:	18800015 	stw	r2,0(r3)
   27588:	003fe706 	br	27528 <__alt_data_end+0xfffe7528>
   2758c:	01000804 	movi	r4,32
   27590:	2089c83a 	sub	r4,r4,r2
   27594:	1908983a 	sll	r4,r3,r4
   27598:	d9400117 	ldw	r5,4(sp)
   2759c:	1886d83a 	srl	r3,r3,r2
   275a0:	2148b03a 	or	r4,r4,r5
   275a4:	99000515 	stw	r4,20(r19)
   275a8:	d8c00015 	stw	r3,0(sp)
   275ac:	003fca06 	br	274d8 <__alt_data_end+0xfffe74d8>

000275b0 <__ratio>:
   275b0:	defff904 	addi	sp,sp,-28
   275b4:	dc400315 	stw	r17,12(sp)
   275b8:	2823883a 	mov	r17,r5
   275bc:	d9400104 	addi	r5,sp,4
   275c0:	dfc00615 	stw	ra,24(sp)
   275c4:	dcc00515 	stw	r19,20(sp)
   275c8:	dc800415 	stw	r18,16(sp)
   275cc:	2027883a 	mov	r19,r4
   275d0:	dc000215 	stw	r16,8(sp)
   275d4:	00273580 	call	27358 <__b2d>
   275d8:	d80b883a 	mov	r5,sp
   275dc:	8809883a 	mov	r4,r17
   275e0:	1025883a 	mov	r18,r2
   275e4:	1821883a 	mov	r16,r3
   275e8:	00273580 	call	27358 <__b2d>
   275ec:	8a000417 	ldw	r8,16(r17)
   275f0:	99000417 	ldw	r4,16(r19)
   275f4:	d9400117 	ldw	r5,4(sp)
   275f8:	2209c83a 	sub	r4,r4,r8
   275fc:	2010917a 	slli	r8,r4,5
   27600:	d9000017 	ldw	r4,0(sp)
   27604:	2909c83a 	sub	r4,r5,r4
   27608:	4109883a 	add	r4,r8,r4
   2760c:	01000e0e 	bge	zero,r4,27648 <__ratio+0x98>
   27610:	2008953a 	slli	r4,r4,20
   27614:	2421883a 	add	r16,r4,r16
   27618:	100d883a 	mov	r6,r2
   2761c:	180f883a 	mov	r7,r3
   27620:	9009883a 	mov	r4,r18
   27624:	800b883a 	mov	r5,r16
   27628:	002b69c0 	call	2b69c <__divdf3>
   2762c:	dfc00617 	ldw	ra,24(sp)
   27630:	dcc00517 	ldw	r19,20(sp)
   27634:	dc800417 	ldw	r18,16(sp)
   27638:	dc400317 	ldw	r17,12(sp)
   2763c:	dc000217 	ldw	r16,8(sp)
   27640:	dec00704 	addi	sp,sp,28
   27644:	f800283a 	ret
   27648:	2008953a 	slli	r4,r4,20
   2764c:	1907c83a 	sub	r3,r3,r4
   27650:	003ff106 	br	27618 <__alt_data_end+0xfffe7618>

00027654 <_mprec_log10>:
   27654:	defffe04 	addi	sp,sp,-8
   27658:	dc000015 	stw	r16,0(sp)
   2765c:	dfc00115 	stw	ra,4(sp)
   27660:	008005c4 	movi	r2,23
   27664:	2021883a 	mov	r16,r4
   27668:	11000d0e 	bge	r2,r4,276a0 <_mprec_log10+0x4c>
   2766c:	0005883a 	mov	r2,zero
   27670:	00cffc34 	movhi	r3,16368
   27674:	843fffc4 	addi	r16,r16,-1
   27678:	000d883a 	mov	r6,zero
   2767c:	01d00934 	movhi	r7,16420
   27680:	1009883a 	mov	r4,r2
   27684:	180b883a 	mov	r5,r3
   27688:	002c2c40 	call	2c2c4 <__muldf3>
   2768c:	803ff91e 	bne	r16,zero,27674 <__alt_data_end+0xfffe7674>
   27690:	dfc00117 	ldw	ra,4(sp)
   27694:	dc000017 	ldw	r16,0(sp)
   27698:	dec00204 	addi	sp,sp,8
   2769c:	f800283a 	ret
   276a0:	202090fa 	slli	r16,r4,3
   276a4:	008000f4 	movhi	r2,3
   276a8:	108a4304 	addi	r2,r2,10508
   276ac:	1421883a 	add	r16,r2,r16
   276b0:	80800017 	ldw	r2,0(r16)
   276b4:	80c00117 	ldw	r3,4(r16)
   276b8:	dfc00117 	ldw	ra,4(sp)
   276bc:	dc000017 	ldw	r16,0(sp)
   276c0:	dec00204 	addi	sp,sp,8
   276c4:	f800283a 	ret

000276c8 <__copybits>:
   276c8:	297fffc4 	addi	r5,r5,-1
   276cc:	280fd17a 	srai	r7,r5,5
   276d0:	30c00417 	ldw	r3,16(r6)
   276d4:	30800504 	addi	r2,r6,20
   276d8:	39c00044 	addi	r7,r7,1
   276dc:	18c7883a 	add	r3,r3,r3
   276e0:	39cf883a 	add	r7,r7,r7
   276e4:	18c7883a 	add	r3,r3,r3
   276e8:	39cf883a 	add	r7,r7,r7
   276ec:	10c7883a 	add	r3,r2,r3
   276f0:	21cf883a 	add	r7,r4,r7
   276f4:	10c00d2e 	bgeu	r2,r3,2772c <__copybits+0x64>
   276f8:	200b883a 	mov	r5,r4
   276fc:	12000017 	ldw	r8,0(r2)
   27700:	29400104 	addi	r5,r5,4
   27704:	10800104 	addi	r2,r2,4
   27708:	2a3fff15 	stw	r8,-4(r5)
   2770c:	10fffb36 	bltu	r2,r3,276fc <__alt_data_end+0xfffe76fc>
   27710:	1985c83a 	sub	r2,r3,r6
   27714:	10bffac4 	addi	r2,r2,-21
   27718:	1004d0ba 	srli	r2,r2,2
   2771c:	10800044 	addi	r2,r2,1
   27720:	1085883a 	add	r2,r2,r2
   27724:	1085883a 	add	r2,r2,r2
   27728:	2089883a 	add	r4,r4,r2
   2772c:	21c0032e 	bgeu	r4,r7,2773c <__copybits+0x74>
   27730:	20000015 	stw	zero,0(r4)
   27734:	21000104 	addi	r4,r4,4
   27738:	21fffd36 	bltu	r4,r7,27730 <__alt_data_end+0xfffe7730>
   2773c:	f800283a 	ret

00027740 <__any_on>:
   27740:	20c00417 	ldw	r3,16(r4)
   27744:	2805d17a 	srai	r2,r5,5
   27748:	21000504 	addi	r4,r4,20
   2774c:	18800d0e 	bge	r3,r2,27784 <__any_on+0x44>
   27750:	18c7883a 	add	r3,r3,r3
   27754:	18c7883a 	add	r3,r3,r3
   27758:	20c7883a 	add	r3,r4,r3
   2775c:	20c0192e 	bgeu	r4,r3,277c4 <__any_on+0x84>
   27760:	18bfff17 	ldw	r2,-4(r3)
   27764:	18ffff04 	addi	r3,r3,-4
   27768:	1000041e 	bne	r2,zero,2777c <__any_on+0x3c>
   2776c:	20c0142e 	bgeu	r4,r3,277c0 <__any_on+0x80>
   27770:	18ffff04 	addi	r3,r3,-4
   27774:	19400017 	ldw	r5,0(r3)
   27778:	283ffc26 	beq	r5,zero,2776c <__alt_data_end+0xfffe776c>
   2777c:	00800044 	movi	r2,1
   27780:	f800283a 	ret
   27784:	10c00a0e 	bge	r2,r3,277b0 <__any_on+0x70>
   27788:	1085883a 	add	r2,r2,r2
   2778c:	1085883a 	add	r2,r2,r2
   27790:	294007cc 	andi	r5,r5,31
   27794:	2087883a 	add	r3,r4,r2
   27798:	283ff026 	beq	r5,zero,2775c <__alt_data_end+0xfffe775c>
   2779c:	19800017 	ldw	r6,0(r3)
   277a0:	3144d83a 	srl	r2,r6,r5
   277a4:	114a983a 	sll	r5,r2,r5
   277a8:	317ff41e 	bne	r6,r5,2777c <__alt_data_end+0xfffe777c>
   277ac:	003feb06 	br	2775c <__alt_data_end+0xfffe775c>
   277b0:	1085883a 	add	r2,r2,r2
   277b4:	1085883a 	add	r2,r2,r2
   277b8:	2087883a 	add	r3,r4,r2
   277bc:	003fe706 	br	2775c <__alt_data_end+0xfffe775c>
   277c0:	f800283a 	ret
   277c4:	0005883a 	mov	r2,zero
   277c8:	f800283a 	ret

000277cc <_realloc_r>:
   277cc:	defff604 	addi	sp,sp,-40
   277d0:	dc800215 	stw	r18,8(sp)
   277d4:	dfc00915 	stw	ra,36(sp)
   277d8:	df000815 	stw	fp,32(sp)
   277dc:	ddc00715 	stw	r23,28(sp)
   277e0:	dd800615 	stw	r22,24(sp)
   277e4:	dd400515 	stw	r21,20(sp)
   277e8:	dd000415 	stw	r20,16(sp)
   277ec:	dcc00315 	stw	r19,12(sp)
   277f0:	dc400115 	stw	r17,4(sp)
   277f4:	dc000015 	stw	r16,0(sp)
   277f8:	3025883a 	mov	r18,r6
   277fc:	2800b726 	beq	r5,zero,27adc <_realloc_r+0x310>
   27800:	282b883a 	mov	r21,r5
   27804:	2029883a 	mov	r20,r4
   27808:	002dc300 	call	2dc30 <__malloc_lock>
   2780c:	a8bfff17 	ldw	r2,-4(r21)
   27810:	043fff04 	movi	r16,-4
   27814:	90c002c4 	addi	r3,r18,11
   27818:	01000584 	movi	r4,22
   2781c:	acfffe04 	addi	r19,r21,-8
   27820:	1420703a 	and	r16,r2,r16
   27824:	20c0332e 	bgeu	r4,r3,278f4 <_realloc_r+0x128>
   27828:	047ffe04 	movi	r17,-8
   2782c:	1c62703a 	and	r17,r3,r17
   27830:	8807883a 	mov	r3,r17
   27834:	88005816 	blt	r17,zero,27998 <_realloc_r+0x1cc>
   27838:	8c805736 	bltu	r17,r18,27998 <_realloc_r+0x1cc>
   2783c:	80c0300e 	bge	r16,r3,27900 <_realloc_r+0x134>
   27840:	070000f4 	movhi	fp,3
   27844:	e70bfb04 	addi	fp,fp,12268
   27848:	e1c00217 	ldw	r7,8(fp)
   2784c:	9c09883a 	add	r4,r19,r16
   27850:	22000117 	ldw	r8,4(r4)
   27854:	21c06326 	beq	r4,r7,279e4 <_realloc_r+0x218>
   27858:	017fff84 	movi	r5,-2
   2785c:	414a703a 	and	r5,r8,r5
   27860:	214b883a 	add	r5,r4,r5
   27864:	29800117 	ldw	r6,4(r5)
   27868:	3180004c 	andi	r6,r6,1
   2786c:	30003f26 	beq	r6,zero,2796c <_realloc_r+0x1a0>
   27870:	1080004c 	andi	r2,r2,1
   27874:	10008326 	beq	r2,zero,27a84 <_realloc_r+0x2b8>
   27878:	900b883a 	mov	r5,r18
   2787c:	a009883a 	mov	r4,r20
   27880:	0025a580 	call	25a58 <_malloc_r>
   27884:	1025883a 	mov	r18,r2
   27888:	10011e26 	beq	r2,zero,27d04 <_realloc_r+0x538>
   2788c:	a93fff17 	ldw	r4,-4(r21)
   27890:	10fffe04 	addi	r3,r2,-8
   27894:	00bfff84 	movi	r2,-2
   27898:	2084703a 	and	r2,r4,r2
   2789c:	9885883a 	add	r2,r19,r2
   278a0:	1880ee26 	beq	r3,r2,27c5c <_realloc_r+0x490>
   278a4:	81bfff04 	addi	r6,r16,-4
   278a8:	00800904 	movi	r2,36
   278ac:	1180b836 	bltu	r2,r6,27b90 <_realloc_r+0x3c4>
   278b0:	00c004c4 	movi	r3,19
   278b4:	19809636 	bltu	r3,r6,27b10 <_realloc_r+0x344>
   278b8:	9005883a 	mov	r2,r18
   278bc:	a807883a 	mov	r3,r21
   278c0:	19000017 	ldw	r4,0(r3)
   278c4:	11000015 	stw	r4,0(r2)
   278c8:	19000117 	ldw	r4,4(r3)
   278cc:	11000115 	stw	r4,4(r2)
   278d0:	18c00217 	ldw	r3,8(r3)
   278d4:	10c00215 	stw	r3,8(r2)
   278d8:	a80b883a 	mov	r5,r21
   278dc:	a009883a 	mov	r4,r20
   278e0:	0024e600 	call	24e60 <_free_r>
   278e4:	a009883a 	mov	r4,r20
   278e8:	002dc540 	call	2dc54 <__malloc_unlock>
   278ec:	9005883a 	mov	r2,r18
   278f0:	00001206 	br	2793c <_realloc_r+0x170>
   278f4:	00c00404 	movi	r3,16
   278f8:	1823883a 	mov	r17,r3
   278fc:	003fce06 	br	27838 <__alt_data_end+0xfffe7838>
   27900:	a825883a 	mov	r18,r21
   27904:	8445c83a 	sub	r2,r16,r17
   27908:	00c003c4 	movi	r3,15
   2790c:	18802636 	bltu	r3,r2,279a8 <_realloc_r+0x1dc>
   27910:	99800117 	ldw	r6,4(r19)
   27914:	9c07883a 	add	r3,r19,r16
   27918:	3180004c 	andi	r6,r6,1
   2791c:	3420b03a 	or	r16,r6,r16
   27920:	9c000115 	stw	r16,4(r19)
   27924:	18800117 	ldw	r2,4(r3)
   27928:	10800054 	ori	r2,r2,1
   2792c:	18800115 	stw	r2,4(r3)
   27930:	a009883a 	mov	r4,r20
   27934:	002dc540 	call	2dc54 <__malloc_unlock>
   27938:	9005883a 	mov	r2,r18
   2793c:	dfc00917 	ldw	ra,36(sp)
   27940:	df000817 	ldw	fp,32(sp)
   27944:	ddc00717 	ldw	r23,28(sp)
   27948:	dd800617 	ldw	r22,24(sp)
   2794c:	dd400517 	ldw	r21,20(sp)
   27950:	dd000417 	ldw	r20,16(sp)
   27954:	dcc00317 	ldw	r19,12(sp)
   27958:	dc800217 	ldw	r18,8(sp)
   2795c:	dc400117 	ldw	r17,4(sp)
   27960:	dc000017 	ldw	r16,0(sp)
   27964:	dec00a04 	addi	sp,sp,40
   27968:	f800283a 	ret
   2796c:	017fff04 	movi	r5,-4
   27970:	414a703a 	and	r5,r8,r5
   27974:	814d883a 	add	r6,r16,r5
   27978:	30c01f16 	blt	r6,r3,279f8 <_realloc_r+0x22c>
   2797c:	20800317 	ldw	r2,12(r4)
   27980:	20c00217 	ldw	r3,8(r4)
   27984:	a825883a 	mov	r18,r21
   27988:	3021883a 	mov	r16,r6
   2798c:	18800315 	stw	r2,12(r3)
   27990:	10c00215 	stw	r3,8(r2)
   27994:	003fdb06 	br	27904 <__alt_data_end+0xfffe7904>
   27998:	00800304 	movi	r2,12
   2799c:	a0800015 	stw	r2,0(r20)
   279a0:	0005883a 	mov	r2,zero
   279a4:	003fe506 	br	2793c <__alt_data_end+0xfffe793c>
   279a8:	98c00117 	ldw	r3,4(r19)
   279ac:	9c4b883a 	add	r5,r19,r17
   279b0:	11000054 	ori	r4,r2,1
   279b4:	18c0004c 	andi	r3,r3,1
   279b8:	1c62b03a 	or	r17,r3,r17
   279bc:	9c400115 	stw	r17,4(r19)
   279c0:	29000115 	stw	r4,4(r5)
   279c4:	2885883a 	add	r2,r5,r2
   279c8:	10c00117 	ldw	r3,4(r2)
   279cc:	29400204 	addi	r5,r5,8
   279d0:	a009883a 	mov	r4,r20
   279d4:	18c00054 	ori	r3,r3,1
   279d8:	10c00115 	stw	r3,4(r2)
   279dc:	0024e600 	call	24e60 <_free_r>
   279e0:	003fd306 	br	27930 <__alt_data_end+0xfffe7930>
   279e4:	017fff04 	movi	r5,-4
   279e8:	414a703a 	and	r5,r8,r5
   279ec:	89800404 	addi	r6,r17,16
   279f0:	8151883a 	add	r8,r16,r5
   279f4:	4180590e 	bge	r8,r6,27b5c <_realloc_r+0x390>
   279f8:	1080004c 	andi	r2,r2,1
   279fc:	103f9e1e 	bne	r2,zero,27878 <__alt_data_end+0xfffe7878>
   27a00:	adbffe17 	ldw	r22,-8(r21)
   27a04:	00bfff04 	movi	r2,-4
   27a08:	9dadc83a 	sub	r22,r19,r22
   27a0c:	b1800117 	ldw	r6,4(r22)
   27a10:	3084703a 	and	r2,r6,r2
   27a14:	20002026 	beq	r4,zero,27a98 <_realloc_r+0x2cc>
   27a18:	80af883a 	add	r23,r16,r2
   27a1c:	b96f883a 	add	r23,r23,r5
   27a20:	21c05f26 	beq	r4,r7,27ba0 <_realloc_r+0x3d4>
   27a24:	b8c01c16 	blt	r23,r3,27a98 <_realloc_r+0x2cc>
   27a28:	20800317 	ldw	r2,12(r4)
   27a2c:	20c00217 	ldw	r3,8(r4)
   27a30:	81bfff04 	addi	r6,r16,-4
   27a34:	01000904 	movi	r4,36
   27a38:	18800315 	stw	r2,12(r3)
   27a3c:	10c00215 	stw	r3,8(r2)
   27a40:	b0c00217 	ldw	r3,8(r22)
   27a44:	b0800317 	ldw	r2,12(r22)
   27a48:	b4800204 	addi	r18,r22,8
   27a4c:	18800315 	stw	r2,12(r3)
   27a50:	10c00215 	stw	r3,8(r2)
   27a54:	21801b36 	bltu	r4,r6,27ac4 <_realloc_r+0x2f8>
   27a58:	008004c4 	movi	r2,19
   27a5c:	1180352e 	bgeu	r2,r6,27b34 <_realloc_r+0x368>
   27a60:	a8800017 	ldw	r2,0(r21)
   27a64:	b0800215 	stw	r2,8(r22)
   27a68:	a8800117 	ldw	r2,4(r21)
   27a6c:	b0800315 	stw	r2,12(r22)
   27a70:	008006c4 	movi	r2,27
   27a74:	11807f36 	bltu	r2,r6,27c74 <_realloc_r+0x4a8>
   27a78:	b0800404 	addi	r2,r22,16
   27a7c:	ad400204 	addi	r21,r21,8
   27a80:	00002d06 	br	27b38 <_realloc_r+0x36c>
   27a84:	adbffe17 	ldw	r22,-8(r21)
   27a88:	00bfff04 	movi	r2,-4
   27a8c:	9dadc83a 	sub	r22,r19,r22
   27a90:	b1000117 	ldw	r4,4(r22)
   27a94:	2084703a 	and	r2,r4,r2
   27a98:	b03f7726 	beq	r22,zero,27878 <__alt_data_end+0xfffe7878>
   27a9c:	80af883a 	add	r23,r16,r2
   27aa0:	b8ff7516 	blt	r23,r3,27878 <__alt_data_end+0xfffe7878>
   27aa4:	b0800317 	ldw	r2,12(r22)
   27aa8:	b0c00217 	ldw	r3,8(r22)
   27aac:	81bfff04 	addi	r6,r16,-4
   27ab0:	01000904 	movi	r4,36
   27ab4:	18800315 	stw	r2,12(r3)
   27ab8:	10c00215 	stw	r3,8(r2)
   27abc:	b4800204 	addi	r18,r22,8
   27ac0:	21bfe52e 	bgeu	r4,r6,27a58 <__alt_data_end+0xfffe7a58>
   27ac4:	a80b883a 	mov	r5,r21
   27ac8:	9009883a 	mov	r4,r18
   27acc:	00264900 	call	26490 <memmove>
   27ad0:	b821883a 	mov	r16,r23
   27ad4:	b027883a 	mov	r19,r22
   27ad8:	003f8a06 	br	27904 <__alt_data_end+0xfffe7904>
   27adc:	300b883a 	mov	r5,r6
   27ae0:	dfc00917 	ldw	ra,36(sp)
   27ae4:	df000817 	ldw	fp,32(sp)
   27ae8:	ddc00717 	ldw	r23,28(sp)
   27aec:	dd800617 	ldw	r22,24(sp)
   27af0:	dd400517 	ldw	r21,20(sp)
   27af4:	dd000417 	ldw	r20,16(sp)
   27af8:	dcc00317 	ldw	r19,12(sp)
   27afc:	dc800217 	ldw	r18,8(sp)
   27b00:	dc400117 	ldw	r17,4(sp)
   27b04:	dc000017 	ldw	r16,0(sp)
   27b08:	dec00a04 	addi	sp,sp,40
   27b0c:	0025a581 	jmpi	25a58 <_malloc_r>
   27b10:	a8c00017 	ldw	r3,0(r21)
   27b14:	90c00015 	stw	r3,0(r18)
   27b18:	a8c00117 	ldw	r3,4(r21)
   27b1c:	90c00115 	stw	r3,4(r18)
   27b20:	00c006c4 	movi	r3,27
   27b24:	19804536 	bltu	r3,r6,27c3c <_realloc_r+0x470>
   27b28:	90800204 	addi	r2,r18,8
   27b2c:	a8c00204 	addi	r3,r21,8
   27b30:	003f6306 	br	278c0 <__alt_data_end+0xfffe78c0>
   27b34:	9005883a 	mov	r2,r18
   27b38:	a8c00017 	ldw	r3,0(r21)
   27b3c:	b821883a 	mov	r16,r23
   27b40:	b027883a 	mov	r19,r22
   27b44:	10c00015 	stw	r3,0(r2)
   27b48:	a8c00117 	ldw	r3,4(r21)
   27b4c:	10c00115 	stw	r3,4(r2)
   27b50:	a8c00217 	ldw	r3,8(r21)
   27b54:	10c00215 	stw	r3,8(r2)
   27b58:	003f6a06 	br	27904 <__alt_data_end+0xfffe7904>
   27b5c:	9c67883a 	add	r19,r19,r17
   27b60:	4445c83a 	sub	r2,r8,r17
   27b64:	e4c00215 	stw	r19,8(fp)
   27b68:	10800054 	ori	r2,r2,1
   27b6c:	98800115 	stw	r2,4(r19)
   27b70:	a8bfff17 	ldw	r2,-4(r21)
   27b74:	a009883a 	mov	r4,r20
   27b78:	1080004c 	andi	r2,r2,1
   27b7c:	1462b03a 	or	r17,r2,r17
   27b80:	ac7fff15 	stw	r17,-4(r21)
   27b84:	002dc540 	call	2dc54 <__malloc_unlock>
   27b88:	a805883a 	mov	r2,r21
   27b8c:	003f6b06 	br	2793c <__alt_data_end+0xfffe793c>
   27b90:	a80b883a 	mov	r5,r21
   27b94:	9009883a 	mov	r4,r18
   27b98:	00264900 	call	26490 <memmove>
   27b9c:	003f4e06 	br	278d8 <__alt_data_end+0xfffe78d8>
   27ba0:	89000404 	addi	r4,r17,16
   27ba4:	b93fbc16 	blt	r23,r4,27a98 <__alt_data_end+0xfffe7a98>
   27ba8:	b0800317 	ldw	r2,12(r22)
   27bac:	b0c00217 	ldw	r3,8(r22)
   27bb0:	81bfff04 	addi	r6,r16,-4
   27bb4:	01000904 	movi	r4,36
   27bb8:	18800315 	stw	r2,12(r3)
   27bbc:	10c00215 	stw	r3,8(r2)
   27bc0:	b4800204 	addi	r18,r22,8
   27bc4:	21804336 	bltu	r4,r6,27cd4 <_realloc_r+0x508>
   27bc8:	008004c4 	movi	r2,19
   27bcc:	11803f2e 	bgeu	r2,r6,27ccc <_realloc_r+0x500>
   27bd0:	a8800017 	ldw	r2,0(r21)
   27bd4:	b0800215 	stw	r2,8(r22)
   27bd8:	a8800117 	ldw	r2,4(r21)
   27bdc:	b0800315 	stw	r2,12(r22)
   27be0:	008006c4 	movi	r2,27
   27be4:	11803f36 	bltu	r2,r6,27ce4 <_realloc_r+0x518>
   27be8:	b0800404 	addi	r2,r22,16
   27bec:	ad400204 	addi	r21,r21,8
   27bf0:	a8c00017 	ldw	r3,0(r21)
   27bf4:	10c00015 	stw	r3,0(r2)
   27bf8:	a8c00117 	ldw	r3,4(r21)
   27bfc:	10c00115 	stw	r3,4(r2)
   27c00:	a8c00217 	ldw	r3,8(r21)
   27c04:	10c00215 	stw	r3,8(r2)
   27c08:	b447883a 	add	r3,r22,r17
   27c0c:	bc45c83a 	sub	r2,r23,r17
   27c10:	e0c00215 	stw	r3,8(fp)
   27c14:	10800054 	ori	r2,r2,1
   27c18:	18800115 	stw	r2,4(r3)
   27c1c:	b0800117 	ldw	r2,4(r22)
   27c20:	a009883a 	mov	r4,r20
   27c24:	1080004c 	andi	r2,r2,1
   27c28:	1462b03a 	or	r17,r2,r17
   27c2c:	b4400115 	stw	r17,4(r22)
   27c30:	002dc540 	call	2dc54 <__malloc_unlock>
   27c34:	9005883a 	mov	r2,r18
   27c38:	003f4006 	br	2793c <__alt_data_end+0xfffe793c>
   27c3c:	a8c00217 	ldw	r3,8(r21)
   27c40:	90c00215 	stw	r3,8(r18)
   27c44:	a8c00317 	ldw	r3,12(r21)
   27c48:	90c00315 	stw	r3,12(r18)
   27c4c:	30801126 	beq	r6,r2,27c94 <_realloc_r+0x4c8>
   27c50:	90800404 	addi	r2,r18,16
   27c54:	a8c00404 	addi	r3,r21,16
   27c58:	003f1906 	br	278c0 <__alt_data_end+0xfffe78c0>
   27c5c:	90ffff17 	ldw	r3,-4(r18)
   27c60:	00bfff04 	movi	r2,-4
   27c64:	a825883a 	mov	r18,r21
   27c68:	1884703a 	and	r2,r3,r2
   27c6c:	80a1883a 	add	r16,r16,r2
   27c70:	003f2406 	br	27904 <__alt_data_end+0xfffe7904>
   27c74:	a8800217 	ldw	r2,8(r21)
   27c78:	b0800415 	stw	r2,16(r22)
   27c7c:	a8800317 	ldw	r2,12(r21)
   27c80:	b0800515 	stw	r2,20(r22)
   27c84:	31000a26 	beq	r6,r4,27cb0 <_realloc_r+0x4e4>
   27c88:	b0800604 	addi	r2,r22,24
   27c8c:	ad400404 	addi	r21,r21,16
   27c90:	003fa906 	br	27b38 <__alt_data_end+0xfffe7b38>
   27c94:	a9000417 	ldw	r4,16(r21)
   27c98:	90800604 	addi	r2,r18,24
   27c9c:	a8c00604 	addi	r3,r21,24
   27ca0:	91000415 	stw	r4,16(r18)
   27ca4:	a9000517 	ldw	r4,20(r21)
   27ca8:	91000515 	stw	r4,20(r18)
   27cac:	003f0406 	br	278c0 <__alt_data_end+0xfffe78c0>
   27cb0:	a8c00417 	ldw	r3,16(r21)
   27cb4:	ad400604 	addi	r21,r21,24
   27cb8:	b0800804 	addi	r2,r22,32
   27cbc:	b0c00615 	stw	r3,24(r22)
   27cc0:	a8ffff17 	ldw	r3,-4(r21)
   27cc4:	b0c00715 	stw	r3,28(r22)
   27cc8:	003f9b06 	br	27b38 <__alt_data_end+0xfffe7b38>
   27ccc:	9005883a 	mov	r2,r18
   27cd0:	003fc706 	br	27bf0 <__alt_data_end+0xfffe7bf0>
   27cd4:	a80b883a 	mov	r5,r21
   27cd8:	9009883a 	mov	r4,r18
   27cdc:	00264900 	call	26490 <memmove>
   27ce0:	003fc906 	br	27c08 <__alt_data_end+0xfffe7c08>
   27ce4:	a8800217 	ldw	r2,8(r21)
   27ce8:	b0800415 	stw	r2,16(r22)
   27cec:	a8800317 	ldw	r2,12(r21)
   27cf0:	b0800515 	stw	r2,20(r22)
   27cf4:	31000726 	beq	r6,r4,27d14 <_realloc_r+0x548>
   27cf8:	b0800604 	addi	r2,r22,24
   27cfc:	ad400404 	addi	r21,r21,16
   27d00:	003fbb06 	br	27bf0 <__alt_data_end+0xfffe7bf0>
   27d04:	a009883a 	mov	r4,r20
   27d08:	002dc540 	call	2dc54 <__malloc_unlock>
   27d0c:	0005883a 	mov	r2,zero
   27d10:	003f0a06 	br	2793c <__alt_data_end+0xfffe793c>
   27d14:	a8c00417 	ldw	r3,16(r21)
   27d18:	ad400604 	addi	r21,r21,24
   27d1c:	b0800804 	addi	r2,r22,32
   27d20:	b0c00615 	stw	r3,24(r22)
   27d24:	a8ffff17 	ldw	r3,-4(r21)
   27d28:	b0c00715 	stw	r3,28(r22)
   27d2c:	003fb006 	br	27bf0 <__alt_data_end+0xfffe7bf0>

00027d30 <__fpclassifyd>:
   27d30:	00a00034 	movhi	r2,32768
   27d34:	10bfffc4 	addi	r2,r2,-1
   27d38:	2884703a 	and	r2,r5,r2
   27d3c:	10000726 	beq	r2,zero,27d5c <__fpclassifyd+0x2c>
   27d40:	00fffc34 	movhi	r3,65520
   27d44:	019ff834 	movhi	r6,32736
   27d48:	28c7883a 	add	r3,r5,r3
   27d4c:	31bfffc4 	addi	r6,r6,-1
   27d50:	30c00536 	bltu	r6,r3,27d68 <__fpclassifyd+0x38>
   27d54:	00800104 	movi	r2,4
   27d58:	f800283a 	ret
   27d5c:	2000021e 	bne	r4,zero,27d68 <__fpclassifyd+0x38>
   27d60:	00800084 	movi	r2,2
   27d64:	f800283a 	ret
   27d68:	00dffc34 	movhi	r3,32752
   27d6c:	019ff834 	movhi	r6,32736
   27d70:	28cb883a 	add	r5,r5,r3
   27d74:	31bfffc4 	addi	r6,r6,-1
   27d78:	317ff62e 	bgeu	r6,r5,27d54 <__alt_data_end+0xfffe7d54>
   27d7c:	01400434 	movhi	r5,16
   27d80:	297fffc4 	addi	r5,r5,-1
   27d84:	28800236 	bltu	r5,r2,27d90 <__fpclassifyd+0x60>
   27d88:	008000c4 	movi	r2,3
   27d8c:	f800283a 	ret
   27d90:	10c00226 	beq	r2,r3,27d9c <__fpclassifyd+0x6c>
   27d94:	0005883a 	mov	r2,zero
   27d98:	f800283a 	ret
   27d9c:	2005003a 	cmpeq	r2,r4,zero
   27da0:	f800283a 	ret

00027da4 <_sbrk_r>:
   27da4:	defffd04 	addi	sp,sp,-12
   27da8:	dc000015 	stw	r16,0(sp)
   27dac:	040000f4 	movhi	r16,3
   27db0:	dc400115 	stw	r17,4(sp)
   27db4:	8418d204 	addi	r16,r16,25416
   27db8:	2023883a 	mov	r17,r4
   27dbc:	2809883a 	mov	r4,r5
   27dc0:	dfc00215 	stw	ra,8(sp)
   27dc4:	80000015 	stw	zero,0(r16)
   27dc8:	002de3c0 	call	2de3c <sbrk>
   27dcc:	00ffffc4 	movi	r3,-1
   27dd0:	10c00526 	beq	r2,r3,27de8 <_sbrk_r+0x44>
   27dd4:	dfc00217 	ldw	ra,8(sp)
   27dd8:	dc400117 	ldw	r17,4(sp)
   27ddc:	dc000017 	ldw	r16,0(sp)
   27de0:	dec00304 	addi	sp,sp,12
   27de4:	f800283a 	ret
   27de8:	80c00017 	ldw	r3,0(r16)
   27dec:	183ff926 	beq	r3,zero,27dd4 <__alt_data_end+0xfffe7dd4>
   27df0:	88c00015 	stw	r3,0(r17)
   27df4:	003ff706 	br	27dd4 <__alt_data_end+0xfffe7dd4>

00027df8 <__sread>:
   27df8:	defffe04 	addi	sp,sp,-8
   27dfc:	dc000015 	stw	r16,0(sp)
   27e00:	2821883a 	mov	r16,r5
   27e04:	2940038f 	ldh	r5,14(r5)
   27e08:	dfc00115 	stw	ra,4(sp)
   27e0c:	0029cb40 	call	29cb4 <_read_r>
   27e10:	10000716 	blt	r2,zero,27e30 <__sread+0x38>
   27e14:	80c01417 	ldw	r3,80(r16)
   27e18:	1887883a 	add	r3,r3,r2
   27e1c:	80c01415 	stw	r3,80(r16)
   27e20:	dfc00117 	ldw	ra,4(sp)
   27e24:	dc000017 	ldw	r16,0(sp)
   27e28:	dec00204 	addi	sp,sp,8
   27e2c:	f800283a 	ret
   27e30:	80c0030b 	ldhu	r3,12(r16)
   27e34:	18fbffcc 	andi	r3,r3,61439
   27e38:	80c0030d 	sth	r3,12(r16)
   27e3c:	dfc00117 	ldw	ra,4(sp)
   27e40:	dc000017 	ldw	r16,0(sp)
   27e44:	dec00204 	addi	sp,sp,8
   27e48:	f800283a 	ret

00027e4c <__seofread>:
   27e4c:	0005883a 	mov	r2,zero
   27e50:	f800283a 	ret

00027e54 <__swrite>:
   27e54:	2880030b 	ldhu	r2,12(r5)
   27e58:	defffb04 	addi	sp,sp,-20
   27e5c:	dcc00315 	stw	r19,12(sp)
   27e60:	dc800215 	stw	r18,8(sp)
   27e64:	dc400115 	stw	r17,4(sp)
   27e68:	dc000015 	stw	r16,0(sp)
   27e6c:	dfc00415 	stw	ra,16(sp)
   27e70:	10c0400c 	andi	r3,r2,256
   27e74:	2821883a 	mov	r16,r5
   27e78:	2023883a 	mov	r17,r4
   27e7c:	3025883a 	mov	r18,r6
   27e80:	3827883a 	mov	r19,r7
   27e84:	18000526 	beq	r3,zero,27e9c <__swrite+0x48>
   27e88:	2940038f 	ldh	r5,14(r5)
   27e8c:	01c00084 	movi	r7,2
   27e90:	000d883a 	mov	r6,zero
   27e94:	0029c540 	call	29c54 <_lseek_r>
   27e98:	8080030b 	ldhu	r2,12(r16)
   27e9c:	8140038f 	ldh	r5,14(r16)
   27ea0:	10bbffcc 	andi	r2,r2,61439
   27ea4:	980f883a 	mov	r7,r19
   27ea8:	900d883a 	mov	r6,r18
   27eac:	8809883a 	mov	r4,r17
   27eb0:	8080030d 	sth	r2,12(r16)
   27eb4:	dfc00417 	ldw	ra,16(sp)
   27eb8:	dcc00317 	ldw	r19,12(sp)
   27ebc:	dc800217 	ldw	r18,8(sp)
   27ec0:	dc400117 	ldw	r17,4(sp)
   27ec4:	dc000017 	ldw	r16,0(sp)
   27ec8:	dec00504 	addi	sp,sp,20
   27ecc:	00297081 	jmpi	29708 <_write_r>

00027ed0 <__sseek>:
   27ed0:	defffe04 	addi	sp,sp,-8
   27ed4:	dc000015 	stw	r16,0(sp)
   27ed8:	2821883a 	mov	r16,r5
   27edc:	2940038f 	ldh	r5,14(r5)
   27ee0:	dfc00115 	stw	ra,4(sp)
   27ee4:	0029c540 	call	29c54 <_lseek_r>
   27ee8:	00ffffc4 	movi	r3,-1
   27eec:	10c00826 	beq	r2,r3,27f10 <__sseek+0x40>
   27ef0:	80c0030b 	ldhu	r3,12(r16)
   27ef4:	80801415 	stw	r2,80(r16)
   27ef8:	18c40014 	ori	r3,r3,4096
   27efc:	80c0030d 	sth	r3,12(r16)
   27f00:	dfc00117 	ldw	ra,4(sp)
   27f04:	dc000017 	ldw	r16,0(sp)
   27f08:	dec00204 	addi	sp,sp,8
   27f0c:	f800283a 	ret
   27f10:	80c0030b 	ldhu	r3,12(r16)
   27f14:	18fbffcc 	andi	r3,r3,61439
   27f18:	80c0030d 	sth	r3,12(r16)
   27f1c:	dfc00117 	ldw	ra,4(sp)
   27f20:	dc000017 	ldw	r16,0(sp)
   27f24:	dec00204 	addi	sp,sp,8
   27f28:	f800283a 	ret

00027f2c <__sclose>:
   27f2c:	2940038f 	ldh	r5,14(r5)
   27f30:	00297681 	jmpi	29768 <_close_r>

00027f34 <strcmp>:
   27f34:	2144b03a 	or	r2,r4,r5
   27f38:	108000cc 	andi	r2,r2,3
   27f3c:	1000171e 	bne	r2,zero,27f9c <strcmp+0x68>
   27f40:	20800017 	ldw	r2,0(r4)
   27f44:	28c00017 	ldw	r3,0(r5)
   27f48:	10c0141e 	bne	r2,r3,27f9c <strcmp+0x68>
   27f4c:	027fbff4 	movhi	r9,65279
   27f50:	4a7fbfc4 	addi	r9,r9,-257
   27f54:	0086303a 	nor	r3,zero,r2
   27f58:	02202074 	movhi	r8,32897
   27f5c:	1245883a 	add	r2,r2,r9
   27f60:	42202004 	addi	r8,r8,-32640
   27f64:	10c4703a 	and	r2,r2,r3
   27f68:	1204703a 	and	r2,r2,r8
   27f6c:	10000226 	beq	r2,zero,27f78 <strcmp+0x44>
   27f70:	00002306 	br	28000 <strcmp+0xcc>
   27f74:	1000221e 	bne	r2,zero,28000 <strcmp+0xcc>
   27f78:	21000104 	addi	r4,r4,4
   27f7c:	20c00017 	ldw	r3,0(r4)
   27f80:	29400104 	addi	r5,r5,4
   27f84:	29800017 	ldw	r6,0(r5)
   27f88:	1a4f883a 	add	r7,r3,r9
   27f8c:	00c4303a 	nor	r2,zero,r3
   27f90:	3884703a 	and	r2,r7,r2
   27f94:	1204703a 	and	r2,r2,r8
   27f98:	19bff626 	beq	r3,r6,27f74 <__alt_data_end+0xfffe7f74>
   27f9c:	20800003 	ldbu	r2,0(r4)
   27fa0:	10c03fcc 	andi	r3,r2,255
   27fa4:	18c0201c 	xori	r3,r3,128
   27fa8:	18ffe004 	addi	r3,r3,-128
   27fac:	18000c26 	beq	r3,zero,27fe0 <strcmp+0xac>
   27fb0:	29800007 	ldb	r6,0(r5)
   27fb4:	19800326 	beq	r3,r6,27fc4 <strcmp+0x90>
   27fb8:	00001306 	br	28008 <strcmp+0xd4>
   27fbc:	29800007 	ldb	r6,0(r5)
   27fc0:	11800b1e 	bne	r2,r6,27ff0 <strcmp+0xbc>
   27fc4:	21000044 	addi	r4,r4,1
   27fc8:	20c00003 	ldbu	r3,0(r4)
   27fcc:	29400044 	addi	r5,r5,1
   27fd0:	18803fcc 	andi	r2,r3,255
   27fd4:	1080201c 	xori	r2,r2,128
   27fd8:	10bfe004 	addi	r2,r2,-128
   27fdc:	103ff71e 	bne	r2,zero,27fbc <__alt_data_end+0xfffe7fbc>
   27fe0:	0007883a 	mov	r3,zero
   27fe4:	28800003 	ldbu	r2,0(r5)
   27fe8:	1885c83a 	sub	r2,r3,r2
   27fec:	f800283a 	ret
   27ff0:	28800003 	ldbu	r2,0(r5)
   27ff4:	18c03fcc 	andi	r3,r3,255
   27ff8:	1885c83a 	sub	r2,r3,r2
   27ffc:	f800283a 	ret
   28000:	0005883a 	mov	r2,zero
   28004:	f800283a 	ret
   28008:	10c03fcc 	andi	r3,r2,255
   2800c:	003ff506 	br	27fe4 <__alt_data_end+0xfffe7fe4>

00028010 <__sprint_r.part.0>:
   28010:	28801917 	ldw	r2,100(r5)
   28014:	defff604 	addi	sp,sp,-40
   28018:	dd400515 	stw	r21,20(sp)
   2801c:	dfc00915 	stw	ra,36(sp)
   28020:	df000815 	stw	fp,32(sp)
   28024:	ddc00715 	stw	r23,28(sp)
   28028:	dd800615 	stw	r22,24(sp)
   2802c:	dd000415 	stw	r20,16(sp)
   28030:	dcc00315 	stw	r19,12(sp)
   28034:	dc800215 	stw	r18,8(sp)
   28038:	dc400115 	stw	r17,4(sp)
   2803c:	dc000015 	stw	r16,0(sp)
   28040:	1088000c 	andi	r2,r2,8192
   28044:	302b883a 	mov	r21,r6
   28048:	10002e26 	beq	r2,zero,28104 <__sprint_r.part.0+0xf4>
   2804c:	30800217 	ldw	r2,8(r6)
   28050:	35800017 	ldw	r22,0(r6)
   28054:	10002926 	beq	r2,zero,280fc <__sprint_r.part.0+0xec>
   28058:	2827883a 	mov	r19,r5
   2805c:	2029883a 	mov	r20,r4
   28060:	b5c00104 	addi	r23,r22,4
   28064:	04bfffc4 	movi	r18,-1
   28068:	bc400017 	ldw	r17,0(r23)
   2806c:	b4000017 	ldw	r16,0(r22)
   28070:	0039883a 	mov	fp,zero
   28074:	8822d0ba 	srli	r17,r17,2
   28078:	8800031e 	bne	r17,zero,28088 <__sprint_r.part.0+0x78>
   2807c:	00001806 	br	280e0 <__sprint_r.part.0+0xd0>
   28080:	84000104 	addi	r16,r16,4
   28084:	8f001526 	beq	r17,fp,280dc <__sprint_r.part.0+0xcc>
   28088:	81400017 	ldw	r5,0(r16)
   2808c:	980d883a 	mov	r6,r19
   28090:	a009883a 	mov	r4,r20
   28094:	0029b000 	call	29b00 <_fputwc_r>
   28098:	e7000044 	addi	fp,fp,1
   2809c:	14bff81e 	bne	r2,r18,28080 <__alt_data_end+0xfffe8080>
   280a0:	9005883a 	mov	r2,r18
   280a4:	a8000215 	stw	zero,8(r21)
   280a8:	a8000115 	stw	zero,4(r21)
   280ac:	dfc00917 	ldw	ra,36(sp)
   280b0:	df000817 	ldw	fp,32(sp)
   280b4:	ddc00717 	ldw	r23,28(sp)
   280b8:	dd800617 	ldw	r22,24(sp)
   280bc:	dd400517 	ldw	r21,20(sp)
   280c0:	dd000417 	ldw	r20,16(sp)
   280c4:	dcc00317 	ldw	r19,12(sp)
   280c8:	dc800217 	ldw	r18,8(sp)
   280cc:	dc400117 	ldw	r17,4(sp)
   280d0:	dc000017 	ldw	r16,0(sp)
   280d4:	dec00a04 	addi	sp,sp,40
   280d8:	f800283a 	ret
   280dc:	a8800217 	ldw	r2,8(r21)
   280e0:	8c63883a 	add	r17,r17,r17
   280e4:	8c63883a 	add	r17,r17,r17
   280e8:	1445c83a 	sub	r2,r2,r17
   280ec:	a8800215 	stw	r2,8(r21)
   280f0:	b5800204 	addi	r22,r22,8
   280f4:	bdc00204 	addi	r23,r23,8
   280f8:	103fdb1e 	bne	r2,zero,28068 <__alt_data_end+0xfffe8068>
   280fc:	0005883a 	mov	r2,zero
   28100:	003fe806 	br	280a4 <__alt_data_end+0xfffe80a4>
   28104:	00251700 	call	25170 <__sfvwrite_r>
   28108:	003fe606 	br	280a4 <__alt_data_end+0xfffe80a4>

0002810c <__sprint_r>:
   2810c:	30c00217 	ldw	r3,8(r6)
   28110:	18000126 	beq	r3,zero,28118 <__sprint_r+0xc>
   28114:	00280101 	jmpi	28010 <__sprint_r.part.0>
   28118:	30000115 	stw	zero,4(r6)
   2811c:	0005883a 	mov	r2,zero
   28120:	f800283a 	ret

00028124 <___vfiprintf_internal_r>:
   28124:	deffca04 	addi	sp,sp,-216
   28128:	dd403115 	stw	r21,196(sp)
   2812c:	dfc03515 	stw	ra,212(sp)
   28130:	df003415 	stw	fp,208(sp)
   28134:	ddc03315 	stw	r23,204(sp)
   28138:	dd803215 	stw	r22,200(sp)
   2813c:	dd003015 	stw	r20,192(sp)
   28140:	dcc02f15 	stw	r19,188(sp)
   28144:	dc802e15 	stw	r18,184(sp)
   28148:	dc402d15 	stw	r17,180(sp)
   2814c:	dc002c15 	stw	r16,176(sp)
   28150:	d9002115 	stw	r4,132(sp)
   28154:	d9402015 	stw	r5,128(sp)
   28158:	d9c02215 	stw	r7,136(sp)
   2815c:	302b883a 	mov	r21,r6
   28160:	20000226 	beq	r4,zero,2816c <___vfiprintf_internal_r+0x48>
   28164:	20800e17 	ldw	r2,56(r4)
   28168:	1000cf26 	beq	r2,zero,284a8 <___vfiprintf_internal_r+0x384>
   2816c:	d8c02017 	ldw	r3,128(sp)
   28170:	1880030b 	ldhu	r2,12(r3)
   28174:	10c8000c 	andi	r3,r2,8192
   28178:	1800071e 	bne	r3,zero,28198 <___vfiprintf_internal_r+0x74>
   2817c:	d9402017 	ldw	r5,128(sp)
   28180:	00f7ffc4 	movi	r3,-8193
   28184:	10880014 	ori	r2,r2,8192
   28188:	29001917 	ldw	r4,100(r5)
   2818c:	2880030d 	sth	r2,12(r5)
   28190:	20c6703a 	and	r3,r4,r3
   28194:	28c01915 	stw	r3,100(r5)
   28198:	10c0020c 	andi	r3,r2,8
   2819c:	1800a526 	beq	r3,zero,28434 <___vfiprintf_internal_r+0x310>
   281a0:	d9002017 	ldw	r4,128(sp)
   281a4:	20c00417 	ldw	r3,16(r4)
   281a8:	1800a226 	beq	r3,zero,28434 <___vfiprintf_internal_r+0x310>
   281ac:	1080068c 	andi	r2,r2,26
   281b0:	00c00284 	movi	r3,10
   281b4:	10c0a826 	beq	r2,r3,28458 <___vfiprintf_internal_r+0x334>
   281b8:	d9001a04 	addi	r4,sp,104
   281bc:	d94019c4 	addi	r5,sp,103
   281c0:	048000f4 	movhi	r18,3
   281c4:	2145c83a 	sub	r2,r4,r5
   281c8:	948a7504 	addi	r18,r18,10708
   281cc:	d9001e15 	stw	r4,120(sp)
   281d0:	d9401f15 	stw	r5,124(sp)
   281d4:	dec01a15 	stw	sp,104(sp)
   281d8:	d8001c15 	stw	zero,112(sp)
   281dc:	d8001b15 	stw	zero,108(sp)
   281e0:	d811883a 	mov	r8,sp
   281e4:	d8002615 	stw	zero,152(sp)
   281e8:	d8002415 	stw	zero,144(sp)
   281ec:	d8802815 	stw	r2,160(sp)
   281f0:	a82d883a 	mov	r22,r21
   281f4:	b0800007 	ldb	r2,0(r22)
   281f8:	10040d26 	beq	r2,zero,29230 <___vfiprintf_internal_r+0x110c>
   281fc:	00c00944 	movi	r3,37
   28200:	b029883a 	mov	r20,r22
   28204:	10c0021e 	bne	r2,r3,28210 <___vfiprintf_internal_r+0xec>
   28208:	00001606 	br	28264 <___vfiprintf_internal_r+0x140>
   2820c:	10c00326 	beq	r2,r3,2821c <___vfiprintf_internal_r+0xf8>
   28210:	a5000044 	addi	r20,r20,1
   28214:	a0800007 	ldb	r2,0(r20)
   28218:	103ffc1e 	bne	r2,zero,2820c <__alt_data_end+0xfffe820c>
   2821c:	a5a1c83a 	sub	r16,r20,r22
   28220:	80001026 	beq	r16,zero,28264 <___vfiprintf_internal_r+0x140>
   28224:	d8c01c17 	ldw	r3,112(sp)
   28228:	d8801b17 	ldw	r2,108(sp)
   2822c:	45800015 	stw	r22,0(r8)
   28230:	80c7883a 	add	r3,r16,r3
   28234:	10800044 	addi	r2,r2,1
   28238:	44000115 	stw	r16,4(r8)
   2823c:	d8c01c15 	stw	r3,112(sp)
   28240:	d8801b15 	stw	r2,108(sp)
   28244:	010001c4 	movi	r4,7
   28248:	2080750e 	bge	r4,r2,28420 <___vfiprintf_internal_r+0x2fc>
   2824c:	1803951e 	bne	r3,zero,290a4 <___vfiprintf_internal_r+0xf80>
   28250:	d8c02417 	ldw	r3,144(sp)
   28254:	d8001b15 	stw	zero,108(sp)
   28258:	d811883a 	mov	r8,sp
   2825c:	1c07883a 	add	r3,r3,r16
   28260:	d8c02415 	stw	r3,144(sp)
   28264:	a0800007 	ldb	r2,0(r20)
   28268:	1002e026 	beq	r2,zero,28dec <___vfiprintf_internal_r+0xcc8>
   2826c:	a5800044 	addi	r22,r20,1
   28270:	a0c00047 	ldb	r3,1(r20)
   28274:	d8001d85 	stb	zero,118(sp)
   28278:	0027883a 	mov	r19,zero
   2827c:	d8002305 	stb	zero,140(sp)
   28280:	043fffc4 	movi	r16,-1
   28284:	d8002515 	stw	zero,148(sp)
   28288:	0023883a 	mov	r17,zero
   2828c:	05001604 	movi	r20,88
   28290:	05400244 	movi	r21,9
   28294:	402f883a 	mov	r23,r8
   28298:	b5800044 	addi	r22,r22,1
   2829c:	18bff804 	addi	r2,r3,-32
   282a0:	a0827736 	bltu	r20,r2,28c80 <___vfiprintf_internal_r+0xb5c>
   282a4:	100490ba 	slli	r2,r2,2
   282a8:	010000f4 	movhi	r4,3
   282ac:	2120af04 	addi	r4,r4,-32068
   282b0:	1105883a 	add	r2,r2,r4
   282b4:	10800017 	ldw	r2,0(r2)
   282b8:	1000683a 	jmp	r2
   282bc:	00028980 	call	2898 <__alt_mem_RAM-0x1d768>
   282c0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282c4:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282c8:	0002899c 	xori	zero,zero,2598
   282cc:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282d0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282d4:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282d8:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282dc:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282e0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282e4:	00028ba4 	muli	zero,zero,2606
   282e8:	00028bc8 	cmpgei	zero,zero,2607
   282ec:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282f0:	000284c0 	call	284c <__alt_mem_RAM-0x1d7b4>
   282f4:	00028bdc 	xori	zero,zero,2607
   282f8:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   282fc:	000289a8 	cmpgeui	zero,zero,2598
   28300:	000289b4 	movhi	zero,2598
   28304:	000289b4 	movhi	zero,2598
   28308:	000289b4 	movhi	zero,2598
   2830c:	000289b4 	movhi	zero,2598
   28310:	000289b4 	movhi	zero,2598
   28314:	000289b4 	movhi	zero,2598
   28318:	000289b4 	movhi	zero,2598
   2831c:	000289b4 	movhi	zero,2598
   28320:	000289b4 	movhi	zero,2598
   28324:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28328:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2832c:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28330:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28334:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28338:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2833c:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28340:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28344:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28348:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2834c:	000289f4 	movhi	zero,2599
   28350:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28354:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28358:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2835c:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28360:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28364:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28368:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2836c:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28370:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28374:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28378:	00028a30 	cmpltui	zero,zero,2600
   2837c:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28380:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28384:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28388:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2838c:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28390:	00028a8c 	andi	zero,zero,2602
   28394:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28398:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2839c:	00028b00 	call	28b0 <__alt_mem_RAM-0x1d750>
   283a0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283a4:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283a8:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283ac:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283b0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283b4:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283b8:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283bc:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283c0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283c4:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283c8:	000288a8 	cmpgeui	zero,zero,2594
   283cc:	000288d8 	cmpnei	zero,zero,2595
   283d0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283d4:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283d8:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283dc:	00028c28 	cmpgeui	zero,zero,2608
   283e0:	000288d8 	cmpnei	zero,zero,2595
   283e4:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283e8:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283ec:	00028780 	call	2878 <__alt_mem_RAM-0x1d788>
   283f0:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   283f4:	00028794 	movui	zero,2590
   283f8:	000287cc 	andi	zero,zero,2591
   283fc:	000284cc 	andi	zero,zero,2579
   28400:	00028774 	movhi	zero,2589
   28404:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28408:	00028b40 	call	28b4 <__alt_mem_RAM-0x1d74c>
   2840c:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28410:	00028b8c 	andi	zero,zero,2606
   28414:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   28418:	00028c80 	call	28c8 <__alt_mem_RAM-0x1d738>
   2841c:	00028850 	cmplti	zero,zero,2593
   28420:	42000204 	addi	r8,r8,8
   28424:	d8c02417 	ldw	r3,144(sp)
   28428:	1c07883a 	add	r3,r3,r16
   2842c:	d8c02415 	stw	r3,144(sp)
   28430:	003f8c06 	br	28264 <__alt_data_end+0xfffe8264>
   28434:	d9402017 	ldw	r5,128(sp)
   28438:	d9002117 	ldw	r4,132(sp)
   2843c:	0022ce00 	call	22ce0 <__swsetup_r>
   28440:	1003c11e 	bne	r2,zero,29348 <___vfiprintf_internal_r+0x1224>
   28444:	d9402017 	ldw	r5,128(sp)
   28448:	00c00284 	movi	r3,10
   2844c:	2880030b 	ldhu	r2,12(r5)
   28450:	1080068c 	andi	r2,r2,26
   28454:	10ff581e 	bne	r2,r3,281b8 <__alt_data_end+0xfffe81b8>
   28458:	d8c02017 	ldw	r3,128(sp)
   2845c:	1880038f 	ldh	r2,14(r3)
   28460:	103f5516 	blt	r2,zero,281b8 <__alt_data_end+0xfffe81b8>
   28464:	d9c02217 	ldw	r7,136(sp)
   28468:	d9002117 	ldw	r4,132(sp)
   2846c:	a80d883a 	mov	r6,r21
   28470:	180b883a 	mov	r5,r3
   28474:	002964c0 	call	2964c <__sbprintf>
   28478:	dfc03517 	ldw	ra,212(sp)
   2847c:	df003417 	ldw	fp,208(sp)
   28480:	ddc03317 	ldw	r23,204(sp)
   28484:	dd803217 	ldw	r22,200(sp)
   28488:	dd403117 	ldw	r21,196(sp)
   2848c:	dd003017 	ldw	r20,192(sp)
   28490:	dcc02f17 	ldw	r19,188(sp)
   28494:	dc802e17 	ldw	r18,184(sp)
   28498:	dc402d17 	ldw	r17,180(sp)
   2849c:	dc002c17 	ldw	r16,176(sp)
   284a0:	dec03604 	addi	sp,sp,216
   284a4:	f800283a 	ret
   284a8:	0024cec0 	call	24cec <__sinit>
   284ac:	003f2f06 	br	2816c <__alt_data_end+0xfffe816c>
   284b0:	d8c02517 	ldw	r3,148(sp)
   284b4:	d8802215 	stw	r2,136(sp)
   284b8:	00c7c83a 	sub	r3,zero,r3
   284bc:	d8c02515 	stw	r3,148(sp)
   284c0:	8c400114 	ori	r17,r17,4
   284c4:	b0c00007 	ldb	r3,0(r22)
   284c8:	003f7306 	br	28298 <__alt_data_end+0xfffe8298>
   284cc:	00800c04 	movi	r2,48
   284d0:	d9402217 	ldw	r5,136(sp)
   284d4:	d8801d05 	stb	r2,116(sp)
   284d8:	00801e04 	movi	r2,120
   284dc:	d8801d45 	stb	r2,117(sp)
   284e0:	d8001d85 	stb	zero,118(sp)
   284e4:	b811883a 	mov	r8,r23
   284e8:	28c00104 	addi	r3,r5,4
   284ec:	2cc00017 	ldw	r19,0(r5)
   284f0:	0029883a 	mov	r20,zero
   284f4:	88800094 	ori	r2,r17,2
   284f8:	80032516 	blt	r16,zero,29190 <___vfiprintf_internal_r+0x106c>
   284fc:	00bfdfc4 	movi	r2,-129
   28500:	88a2703a 	and	r17,r17,r2
   28504:	d8c02215 	stw	r3,136(sp)
   28508:	8c400094 	ori	r17,r17,2
   2850c:	98032a1e 	bne	r19,zero,291b8 <___vfiprintf_internal_r+0x1094>
   28510:	008000f4 	movhi	r2,3
   28514:	108a1404 	addi	r2,r2,10320
   28518:	d8802615 	stw	r2,152(sp)
   2851c:	002b883a 	mov	r21,zero
   28520:	8001741e 	bne	r16,zero,28af4 <___vfiprintf_internal_r+0x9d0>
   28524:	0021883a 	mov	r16,zero
   28528:	0029883a 	mov	r20,zero
   2852c:	ddc01a04 	addi	r23,sp,104
   28530:	8027883a 	mov	r19,r16
   28534:	8500010e 	bge	r16,r20,2853c <___vfiprintf_internal_r+0x418>
   28538:	a027883a 	mov	r19,r20
   2853c:	ad403fcc 	andi	r21,r21,255
   28540:	ad40201c 	xori	r21,r21,128
   28544:	ad7fe004 	addi	r21,r21,-128
   28548:	a8000126 	beq	r21,zero,28550 <___vfiprintf_internal_r+0x42c>
   2854c:	9cc00044 	addi	r19,r19,1
   28550:	89c0008c 	andi	r7,r17,2
   28554:	38000126 	beq	r7,zero,2855c <___vfiprintf_internal_r+0x438>
   28558:	9cc00084 	addi	r19,r19,2
   2855c:	88c0210c 	andi	r3,r17,132
   28560:	1801dd1e 	bne	r3,zero,28cd8 <___vfiprintf_internal_r+0xbb4>
   28564:	d9402517 	ldw	r5,148(sp)
   28568:	2cebc83a 	sub	r21,r5,r19
   2856c:	0541da0e 	bge	zero,r21,28cd8 <___vfiprintf_internal_r+0xbb4>
   28570:	07000404 	movi	fp,16
   28574:	d8801c17 	ldw	r2,112(sp)
   28578:	e543be0e 	bge	fp,r21,29474 <___vfiprintf_internal_r+0x1350>
   2857c:	014000f4 	movhi	r5,3
   28580:	294a7904 	addi	r5,r5,10724
   28584:	dc002715 	stw	r16,156(sp)
   28588:	d9801b17 	ldw	r6,108(sp)
   2858c:	a821883a 	mov	r16,r21
   28590:	d9402315 	stw	r5,140(sp)
   28594:	028001c4 	movi	r10,7
   28598:	d9c02915 	stw	r7,164(sp)
   2859c:	182b883a 	mov	r21,r3
   285a0:	00000506 	br	285b8 <___vfiprintf_internal_r+0x494>
   285a4:	31000084 	addi	r4,r6,2
   285a8:	42000204 	addi	r8,r8,8
   285ac:	180d883a 	mov	r6,r3
   285b0:	843ffc04 	addi	r16,r16,-16
   285b4:	e4000f0e 	bge	fp,r16,285f4 <___vfiprintf_internal_r+0x4d0>
   285b8:	010000f4 	movhi	r4,3
   285bc:	10800404 	addi	r2,r2,16
   285c0:	30c00044 	addi	r3,r6,1
   285c4:	210a7904 	addi	r4,r4,10724
   285c8:	41000015 	stw	r4,0(r8)
   285cc:	47000115 	stw	fp,4(r8)
   285d0:	d8801c15 	stw	r2,112(sp)
   285d4:	d8c01b15 	stw	r3,108(sp)
   285d8:	50fff20e 	bge	r10,r3,285a4 <__alt_data_end+0xfffe85a4>
   285dc:	1001b21e 	bne	r2,zero,28ca8 <___vfiprintf_internal_r+0xb84>
   285e0:	843ffc04 	addi	r16,r16,-16
   285e4:	000d883a 	mov	r6,zero
   285e8:	01000044 	movi	r4,1
   285ec:	d811883a 	mov	r8,sp
   285f0:	e43ff116 	blt	fp,r16,285b8 <__alt_data_end+0xfffe85b8>
   285f4:	a807883a 	mov	r3,r21
   285f8:	d9c02917 	ldw	r7,164(sp)
   285fc:	802b883a 	mov	r21,r16
   28600:	dc002717 	ldw	r16,156(sp)
   28604:	d9402317 	ldw	r5,140(sp)
   28608:	a885883a 	add	r2,r21,r2
   2860c:	45400115 	stw	r21,4(r8)
   28610:	41400015 	stw	r5,0(r8)
   28614:	d8801c15 	stw	r2,112(sp)
   28618:	d9001b15 	stw	r4,108(sp)
   2861c:	014001c4 	movi	r5,7
   28620:	29026216 	blt	r5,r4,28fac <___vfiprintf_internal_r+0xe88>
   28624:	d9801d87 	ldb	r6,118(sp)
   28628:	42000204 	addi	r8,r8,8
   2862c:	21400044 	addi	r5,r4,1
   28630:	3001ae1e 	bne	r6,zero,28cec <___vfiprintf_internal_r+0xbc8>
   28634:	3801bb26 	beq	r7,zero,28d24 <___vfiprintf_internal_r+0xc00>
   28638:	d9001d04 	addi	r4,sp,116
   2863c:	10800084 	addi	r2,r2,2
   28640:	41000015 	stw	r4,0(r8)
   28644:	01000084 	movi	r4,2
   28648:	41000115 	stw	r4,4(r8)
   2864c:	d8801c15 	stw	r2,112(sp)
   28650:	d9401b15 	stw	r5,108(sp)
   28654:	010001c4 	movi	r4,7
   28658:	2142680e 	bge	r4,r5,28ffc <___vfiprintf_internal_r+0xed8>
   2865c:	1002b11e 	bne	r2,zero,29124 <___vfiprintf_internal_r+0x1000>
   28660:	01802004 	movi	r6,128
   28664:	01400044 	movi	r5,1
   28668:	0009883a 	mov	r4,zero
   2866c:	d811883a 	mov	r8,sp
   28670:	1981ae1e 	bne	r3,r6,28d2c <___vfiprintf_internal_r+0xc08>
   28674:	d8c02517 	ldw	r3,148(sp)
   28678:	1cf9c83a 	sub	fp,r3,r19
   2867c:	0701ab0e 	bge	zero,fp,28d2c <___vfiprintf_internal_r+0xc08>
   28680:	05400404 	movi	r21,16
   28684:	af03a90e 	bge	r21,fp,2952c <___vfiprintf_internal_r+0x1408>
   28688:	014000f4 	movhi	r5,3
   2868c:	294a7504 	addi	r5,r5,10708
   28690:	d9402315 	stw	r5,140(sp)
   28694:	01c001c4 	movi	r7,7
   28698:	00000506 	br	286b0 <___vfiprintf_internal_r+0x58c>
   2869c:	21800084 	addi	r6,r4,2
   286a0:	42000204 	addi	r8,r8,8
   286a4:	1809883a 	mov	r4,r3
   286a8:	e73ffc04 	addi	fp,fp,-16
   286ac:	af000d0e 	bge	r21,fp,286e4 <___vfiprintf_internal_r+0x5c0>
   286b0:	10800404 	addi	r2,r2,16
   286b4:	20c00044 	addi	r3,r4,1
   286b8:	44800015 	stw	r18,0(r8)
   286bc:	45400115 	stw	r21,4(r8)
   286c0:	d8801c15 	stw	r2,112(sp)
   286c4:	d8c01b15 	stw	r3,108(sp)
   286c8:	38fff40e 	bge	r7,r3,2869c <__alt_data_end+0xfffe869c>
   286cc:	10022b1e 	bne	r2,zero,28f7c <___vfiprintf_internal_r+0xe58>
   286d0:	e73ffc04 	addi	fp,fp,-16
   286d4:	01800044 	movi	r6,1
   286d8:	0009883a 	mov	r4,zero
   286dc:	d811883a 	mov	r8,sp
   286e0:	af3ff316 	blt	r21,fp,286b0 <__alt_data_end+0xfffe86b0>
   286e4:	d8c02317 	ldw	r3,140(sp)
   286e8:	1705883a 	add	r2,r2,fp
   286ec:	47000115 	stw	fp,4(r8)
   286f0:	40c00015 	stw	r3,0(r8)
   286f4:	d8801c15 	stw	r2,112(sp)
   286f8:	d9801b15 	stw	r6,108(sp)
   286fc:	00c001c4 	movi	r3,7
   28700:	19829416 	blt	r3,r6,29154 <___vfiprintf_internal_r+0x1030>
   28704:	8521c83a 	sub	r16,r16,r20
   28708:	42000204 	addi	r8,r8,8
   2870c:	31400044 	addi	r5,r6,1
   28710:	3009883a 	mov	r4,r6
   28714:	04018716 	blt	zero,r16,28d34 <___vfiprintf_internal_r+0xc10>
   28718:	a085883a 	add	r2,r20,r2
   2871c:	45c00015 	stw	r23,0(r8)
   28720:	45000115 	stw	r20,4(r8)
   28724:	d8801c15 	stw	r2,112(sp)
   28728:	d9401b15 	stw	r5,108(sp)
   2872c:	00c001c4 	movi	r3,7
   28730:	1941c20e 	bge	r3,r5,28e3c <___vfiprintf_internal_r+0xd18>
   28734:	1002531e 	bne	r2,zero,29084 <___vfiprintf_internal_r+0xf60>
   28738:	d8001b15 	stw	zero,108(sp)
   2873c:	8c40010c 	andi	r17,r17,4
   28740:	88023226 	beq	r17,zero,2900c <___vfiprintf_internal_r+0xee8>
   28744:	d9002517 	ldw	r4,148(sp)
   28748:	24e3c83a 	sub	r17,r4,r19
   2874c:	04432916 	blt	zero,r17,293f4 <___vfiprintf_internal_r+0x12d0>
   28750:	d8802517 	ldw	r2,148(sp)
   28754:	14c0010e 	bge	r2,r19,2875c <___vfiprintf_internal_r+0x638>
   28758:	9805883a 	mov	r2,r19
   2875c:	d8c02417 	ldw	r3,144(sp)
   28760:	1887883a 	add	r3,r3,r2
   28764:	d8c02415 	stw	r3,144(sp)
   28768:	d8001b15 	stw	zero,108(sp)
   2876c:	d811883a 	mov	r8,sp
   28770:	003ea006 	br	281f4 <__alt_data_end+0xfffe81f4>
   28774:	8c400814 	ori	r17,r17,32
   28778:	b0c00007 	ldb	r3,0(r22)
   2877c:	003ec606 	br	28298 <__alt_data_end+0xfffe8298>
   28780:	b0c00007 	ldb	r3,0(r22)
   28784:	00801b04 	movi	r2,108
   28788:	18832026 	beq	r3,r2,2940c <___vfiprintf_internal_r+0x12e8>
   2878c:	8c400414 	ori	r17,r17,16
   28790:	003ec106 	br	28298 <__alt_data_end+0xfffe8298>
   28794:	9cc03fcc 	andi	r19,r19,255
   28798:	b811883a 	mov	r8,r23
   2879c:	9803981e 	bne	r19,zero,29600 <___vfiprintf_internal_r+0x14dc>
   287a0:	8880080c 	andi	r2,r17,32
   287a4:	1002be26 	beq	r2,zero,292a0 <___vfiprintf_internal_r+0x117c>
   287a8:	d9002217 	ldw	r4,136(sp)
   287ac:	d9402417 	ldw	r5,144(sp)
   287b0:	20800017 	ldw	r2,0(r4)
   287b4:	2807d7fa 	srai	r3,r5,31
   287b8:	21000104 	addi	r4,r4,4
   287bc:	d9002215 	stw	r4,136(sp)
   287c0:	11400015 	stw	r5,0(r2)
   287c4:	10c00115 	stw	r3,4(r2)
   287c8:	003e8a06 	br	281f4 <__alt_data_end+0xfffe81f4>
   287cc:	9cc03fcc 	andi	r19,r19,255
   287d0:	b811883a 	mov	r8,r23
   287d4:	9803871e 	bne	r19,zero,295f4 <___vfiprintf_internal_r+0x14d0>
   287d8:	8880080c 	andi	r2,r17,32
   287dc:	10009a26 	beq	r2,zero,28a48 <___vfiprintf_internal_r+0x924>
   287e0:	d9002217 	ldw	r4,136(sp)
   287e4:	d8001d85 	stb	zero,118(sp)
   287e8:	20800204 	addi	r2,r4,8
   287ec:	24c00017 	ldw	r19,0(r4)
   287f0:	25000117 	ldw	r20,4(r4)
   287f4:	8002a416 	blt	r16,zero,29288 <___vfiprintf_internal_r+0x1164>
   287f8:	013fdfc4 	movi	r4,-129
   287fc:	9d06b03a 	or	r3,r19,r20
   28800:	d8802215 	stw	r2,136(sp)
   28804:	8922703a 	and	r17,r17,r4
   28808:	18009b26 	beq	r3,zero,28a78 <___vfiprintf_internal_r+0x954>
   2880c:	002b883a 	mov	r21,zero
   28810:	ddc01a04 	addi	r23,sp,104
   28814:	9806d0fa 	srli	r3,r19,3
   28818:	a008977a 	slli	r4,r20,29
   2881c:	a028d0fa 	srli	r20,r20,3
   28820:	9cc001cc 	andi	r19,r19,7
   28824:	98800c04 	addi	r2,r19,48
   28828:	bdffffc4 	addi	r23,r23,-1
   2882c:	20e6b03a 	or	r19,r4,r3
   28830:	b8800005 	stb	r2,0(r23)
   28834:	9d06b03a 	or	r3,r19,r20
   28838:	183ff61e 	bne	r3,zero,28814 <__alt_data_end+0xfffe8814>
   2883c:	88c0004c 	andi	r3,r17,1
   28840:	18021f1e 	bne	r3,zero,290c0 <___vfiprintf_internal_r+0xf9c>
   28844:	d9401e17 	ldw	r5,120(sp)
   28848:	2de9c83a 	sub	r20,r5,r23
   2884c:	003f3806 	br	28530 <__alt_data_end+0xfffe8530>
   28850:	9cc03fcc 	andi	r19,r19,255
   28854:	b811883a 	mov	r8,r23
   28858:	98034f1e 	bne	r19,zero,29598 <___vfiprintf_internal_r+0x1474>
   2885c:	008000f4 	movhi	r2,3
   28860:	108a1404 	addi	r2,r2,10320
   28864:	d8802615 	stw	r2,152(sp)
   28868:	8880080c 	andi	r2,r17,32
   2886c:	1000ac26 	beq	r2,zero,28b20 <___vfiprintf_internal_r+0x9fc>
   28870:	d9002217 	ldw	r4,136(sp)
   28874:	24c00017 	ldw	r19,0(r4)
   28878:	25000117 	ldw	r20,4(r4)
   2887c:	21000204 	addi	r4,r4,8
   28880:	d9002215 	stw	r4,136(sp)
   28884:	8880004c 	andi	r2,r17,1
   28888:	1001e726 	beq	r2,zero,29028 <___vfiprintf_internal_r+0xf04>
   2888c:	9d04b03a 	or	r2,r19,r20
   28890:	10025c1e 	bne	r2,zero,29204 <___vfiprintf_internal_r+0x10e0>
   28894:	d8001d85 	stb	zero,118(sp)
   28898:	80024416 	blt	r16,zero,291ac <___vfiprintf_internal_r+0x1088>
   2889c:	00bfdfc4 	movi	r2,-129
   288a0:	88a2703a 	and	r17,r17,r2
   288a4:	003f1d06 	br	2851c <__alt_data_end+0xfffe851c>
   288a8:	d8c02217 	ldw	r3,136(sp)
   288ac:	04c00044 	movi	r19,1
   288b0:	b811883a 	mov	r8,r23
   288b4:	18800017 	ldw	r2,0(r3)
   288b8:	18c00104 	addi	r3,r3,4
   288bc:	d8001d85 	stb	zero,118(sp)
   288c0:	d8801005 	stb	r2,64(sp)
   288c4:	d8c02215 	stw	r3,136(sp)
   288c8:	9829883a 	mov	r20,r19
   288cc:	ddc01004 	addi	r23,sp,64
   288d0:	0021883a 	mov	r16,zero
   288d4:	003f1e06 	br	28550 <__alt_data_end+0xfffe8550>
   288d8:	9cc03fcc 	andi	r19,r19,255
   288dc:	b811883a 	mov	r8,r23
   288e0:	9803331e 	bne	r19,zero,295b0 <___vfiprintf_internal_r+0x148c>
   288e4:	8880080c 	andi	r2,r17,32
   288e8:	10004826 	beq	r2,zero,28a0c <___vfiprintf_internal_r+0x8e8>
   288ec:	d9002217 	ldw	r4,136(sp)
   288f0:	20800117 	ldw	r2,4(r4)
   288f4:	24c00017 	ldw	r19,0(r4)
   288f8:	21000204 	addi	r4,r4,8
   288fc:	d9002215 	stw	r4,136(sp)
   28900:	1029883a 	mov	r20,r2
   28904:	10024c16 	blt	r2,zero,29238 <___vfiprintf_internal_r+0x1114>
   28908:	dd401d83 	ldbu	r21,118(sp)
   2890c:	80007116 	blt	r16,zero,28ad4 <___vfiprintf_internal_r+0x9b0>
   28910:	00ffdfc4 	movi	r3,-129
   28914:	9d04b03a 	or	r2,r19,r20
   28918:	88e2703a 	and	r17,r17,r3
   2891c:	1000d126 	beq	r2,zero,28c64 <___vfiprintf_internal_r+0xb40>
   28920:	a0023526 	beq	r20,zero,291f8 <___vfiprintf_internal_r+0x10d4>
   28924:	ddc01a04 	addi	r23,sp,104
   28928:	4039883a 	mov	fp,r8
   2892c:	9809883a 	mov	r4,r19
   28930:	a00b883a 	mov	r5,r20
   28934:	01800284 	movi	r6,10
   28938:	000f883a 	mov	r7,zero
   2893c:	002a6500 	call	2a650 <__umoddi3>
   28940:	10800c04 	addi	r2,r2,48
   28944:	bdffffc4 	addi	r23,r23,-1
   28948:	9809883a 	mov	r4,r19
   2894c:	a00b883a 	mov	r5,r20
   28950:	b8800005 	stb	r2,0(r23)
   28954:	01800284 	movi	r6,10
   28958:	000f883a 	mov	r7,zero
   2895c:	002a0540 	call	2a054 <__udivdi3>
   28960:	1027883a 	mov	r19,r2
   28964:	10c4b03a 	or	r2,r2,r3
   28968:	1829883a 	mov	r20,r3
   2896c:	103fef1e 	bne	r2,zero,2892c <__alt_data_end+0xfffe892c>
   28970:	d9001e17 	ldw	r4,120(sp)
   28974:	e011883a 	mov	r8,fp
   28978:	25e9c83a 	sub	r20,r4,r23
   2897c:	003eec06 	br	28530 <__alt_data_end+0xfffe8530>
   28980:	d8802307 	ldb	r2,140(sp)
   28984:	1002361e 	bne	r2,zero,29260 <___vfiprintf_internal_r+0x113c>
   28988:	00c00804 	movi	r3,32
   2898c:	d8c02305 	stb	r3,140(sp)
   28990:	04c00044 	movi	r19,1
   28994:	b0c00007 	ldb	r3,0(r22)
   28998:	003e3f06 	br	28298 <__alt_data_end+0xfffe8298>
   2899c:	8c400054 	ori	r17,r17,1
   289a0:	b0c00007 	ldb	r3,0(r22)
   289a4:	003e3c06 	br	28298 <__alt_data_end+0xfffe8298>
   289a8:	8c402014 	ori	r17,r17,128
   289ac:	b0c00007 	ldb	r3,0(r22)
   289b0:	003e3906 	br	28298 <__alt_data_end+0xfffe8298>
   289b4:	dc002715 	stw	r16,156(sp)
   289b8:	d8002515 	stw	zero,148(sp)
   289bc:	1f3ff404 	addi	fp,r3,-48
   289c0:	0009883a 	mov	r4,zero
   289c4:	b021883a 	mov	r16,r22
   289c8:	01400284 	movi	r5,10
   289cc:	002adc80 	call	2adc8 <__mulsi3>
   289d0:	80c00007 	ldb	r3,0(r16)
   289d4:	e089883a 	add	r4,fp,r2
   289d8:	b5800044 	addi	r22,r22,1
   289dc:	1f3ff404 	addi	fp,r3,-48
   289e0:	b021883a 	mov	r16,r22
   289e4:	af3ff82e 	bgeu	r21,fp,289c8 <__alt_data_end+0xfffe89c8>
   289e8:	d9002515 	stw	r4,148(sp)
   289ec:	dc002717 	ldw	r16,156(sp)
   289f0:	003e2a06 	br	2829c <__alt_data_end+0xfffe829c>
   289f4:	9cc03fcc 	andi	r19,r19,255
   289f8:	b811883a 	mov	r8,r23
   289fc:	9802e91e 	bne	r19,zero,295a4 <___vfiprintf_internal_r+0x1480>
   28a00:	8c400414 	ori	r17,r17,16
   28a04:	8880080c 	andi	r2,r17,32
   28a08:	103fb81e 	bne	r2,zero,288ec <__alt_data_end+0xfffe88ec>
   28a0c:	8880040c 	andi	r2,r17,16
   28a10:	10022e26 	beq	r2,zero,292cc <___vfiprintf_internal_r+0x11a8>
   28a14:	d9402217 	ldw	r5,136(sp)
   28a18:	2cc00017 	ldw	r19,0(r5)
   28a1c:	29400104 	addi	r5,r5,4
   28a20:	d9402215 	stw	r5,136(sp)
   28a24:	9829d7fa 	srai	r20,r19,31
   28a28:	a005883a 	mov	r2,r20
   28a2c:	003fb506 	br	28904 <__alt_data_end+0xfffe8904>
   28a30:	9cc03fcc 	andi	r19,r19,255
   28a34:	b811883a 	mov	r8,r23
   28a38:	9802fa1e 	bne	r19,zero,29624 <___vfiprintf_internal_r+0x1500>
   28a3c:	8c400414 	ori	r17,r17,16
   28a40:	8880080c 	andi	r2,r17,32
   28a44:	103f661e 	bne	r2,zero,287e0 <__alt_data_end+0xfffe87e0>
   28a48:	8880040c 	andi	r2,r17,16
   28a4c:	10020626 	beq	r2,zero,29268 <___vfiprintf_internal_r+0x1144>
   28a50:	d9402217 	ldw	r5,136(sp)
   28a54:	d8001d85 	stb	zero,118(sp)
   28a58:	0029883a 	mov	r20,zero
   28a5c:	28800104 	addi	r2,r5,4
   28a60:	2cc00017 	ldw	r19,0(r5)
   28a64:	80020816 	blt	r16,zero,29288 <___vfiprintf_internal_r+0x1164>
   28a68:	00ffdfc4 	movi	r3,-129
   28a6c:	d8802215 	stw	r2,136(sp)
   28a70:	88e2703a 	and	r17,r17,r3
   28a74:	983f651e 	bne	r19,zero,2880c <__alt_data_end+0xfffe880c>
   28a78:	002b883a 	mov	r21,zero
   28a7c:	8002cf26 	beq	r16,zero,295bc <___vfiprintf_internal_r+0x1498>
   28a80:	0027883a 	mov	r19,zero
   28a84:	0029883a 	mov	r20,zero
   28a88:	003f6106 	br	28810 <__alt_data_end+0xfffe8810>
   28a8c:	9cc03fcc 	andi	r19,r19,255
   28a90:	b811883a 	mov	r8,r23
   28a94:	9802e01e 	bne	r19,zero,29618 <___vfiprintf_internal_r+0x14f4>
   28a98:	8c400414 	ori	r17,r17,16
   28a9c:	8880080c 	andi	r2,r17,32
   28aa0:	1000641e 	bne	r2,zero,28c34 <___vfiprintf_internal_r+0xb10>
   28aa4:	8880040c 	andi	r2,r17,16
   28aa8:	1001c81e 	bne	r2,zero,291cc <___vfiprintf_internal_r+0x10a8>
   28aac:	8880100c 	andi	r2,r17,64
   28ab0:	d8001d85 	stb	zero,118(sp)
   28ab4:	1002281e 	bne	r2,zero,29358 <___vfiprintf_internal_r+0x1234>
   28ab8:	d9002217 	ldw	r4,136(sp)
   28abc:	0029883a 	mov	r20,zero
   28ac0:	20800104 	addi	r2,r4,4
   28ac4:	24c00017 	ldw	r19,0(r4)
   28ac8:	8001c60e 	bge	r16,zero,291e4 <___vfiprintf_internal_r+0x10c0>
   28acc:	d8802215 	stw	r2,136(sp)
   28ad0:	002b883a 	mov	r21,zero
   28ad4:	9d04b03a 	or	r2,r19,r20
   28ad8:	103f911e 	bne	r2,zero,28920 <__alt_data_end+0xfffe8920>
   28adc:	00800044 	movi	r2,1
   28ae0:	10803fcc 	andi	r2,r2,255
   28ae4:	00c00044 	movi	r3,1
   28ae8:	10c05f26 	beq	r2,r3,28c68 <___vfiprintf_internal_r+0xb44>
   28aec:	00c00084 	movi	r3,2
   28af0:	10ffe31e 	bne	r2,r3,28a80 <__alt_data_end+0xfffe8a80>
   28af4:	0027883a 	mov	r19,zero
   28af8:	0029883a 	mov	r20,zero
   28afc:	00015106 	br	29044 <___vfiprintf_internal_r+0xf20>
   28b00:	9cc03fcc 	andi	r19,r19,255
   28b04:	b811883a 	mov	r8,r23
   28b08:	9802c01e 	bne	r19,zero,2960c <___vfiprintf_internal_r+0x14e8>
   28b0c:	014000f4 	movhi	r5,3
   28b10:	294a0f04 	addi	r5,r5,10300
   28b14:	d9402615 	stw	r5,152(sp)
   28b18:	8880080c 	andi	r2,r17,32
   28b1c:	103f541e 	bne	r2,zero,28870 <__alt_data_end+0xfffe8870>
   28b20:	8880040c 	andi	r2,r17,16
   28b24:	1001f226 	beq	r2,zero,292f0 <___vfiprintf_internal_r+0x11cc>
   28b28:	d9402217 	ldw	r5,136(sp)
   28b2c:	0029883a 	mov	r20,zero
   28b30:	2cc00017 	ldw	r19,0(r5)
   28b34:	29400104 	addi	r5,r5,4
   28b38:	d9402215 	stw	r5,136(sp)
   28b3c:	003f5106 	br	28884 <__alt_data_end+0xfffe8884>
   28b40:	d8c02217 	ldw	r3,136(sp)
   28b44:	b811883a 	mov	r8,r23
   28b48:	d8001d85 	stb	zero,118(sp)
   28b4c:	1dc00017 	ldw	r23,0(r3)
   28b50:	1f000104 	addi	fp,r3,4
   28b54:	b8025926 	beq	r23,zero,294bc <___vfiprintf_internal_r+0x1398>
   28b58:	80023316 	blt	r16,zero,29428 <___vfiprintf_internal_r+0x1304>
   28b5c:	800d883a 	mov	r6,r16
   28b60:	000b883a 	mov	r5,zero
   28b64:	b809883a 	mov	r4,r23
   28b68:	da002a15 	stw	r8,168(sp)
   28b6c:	00262640 	call	26264 <memchr>
   28b70:	da002a17 	ldw	r8,168(sp)
   28b74:	10026826 	beq	r2,zero,29518 <___vfiprintf_internal_r+0x13f4>
   28b78:	15e9c83a 	sub	r20,r2,r23
   28b7c:	dd401d83 	ldbu	r21,118(sp)
   28b80:	df002215 	stw	fp,136(sp)
   28b84:	0021883a 	mov	r16,zero
   28b88:	003e6906 	br	28530 <__alt_data_end+0xfffe8530>
   28b8c:	9cc03fcc 	andi	r19,r19,255
   28b90:	b811883a 	mov	r8,r23
   28b94:	983fc126 	beq	r19,zero,28a9c <__alt_data_end+0xfffe8a9c>
   28b98:	d8c02303 	ldbu	r3,140(sp)
   28b9c:	d8c01d85 	stb	r3,118(sp)
   28ba0:	003fbe06 	br	28a9c <__alt_data_end+0xfffe8a9c>
   28ba4:	d9002217 	ldw	r4,136(sp)
   28ba8:	d9402217 	ldw	r5,136(sp)
   28bac:	21000017 	ldw	r4,0(r4)
   28bb0:	28800104 	addi	r2,r5,4
   28bb4:	d9002515 	stw	r4,148(sp)
   28bb8:	203e3d16 	blt	r4,zero,284b0 <__alt_data_end+0xfffe84b0>
   28bbc:	d8802215 	stw	r2,136(sp)
   28bc0:	b0c00007 	ldb	r3,0(r22)
   28bc4:	003db406 	br	28298 <__alt_data_end+0xfffe8298>
   28bc8:	00c00ac4 	movi	r3,43
   28bcc:	d8c02305 	stb	r3,140(sp)
   28bd0:	04c00044 	movi	r19,1
   28bd4:	b0c00007 	ldb	r3,0(r22)
   28bd8:	003daf06 	br	28298 <__alt_data_end+0xfffe8298>
   28bdc:	b0c00007 	ldb	r3,0(r22)
   28be0:	01000a84 	movi	r4,42
   28be4:	b4000044 	addi	r16,r22,1
   28be8:	19025e26 	beq	r3,r4,29564 <___vfiprintf_internal_r+0x1440>
   28bec:	1f3ff404 	addi	fp,r3,-48
   28bf0:	0009883a 	mov	r4,zero
   28bf4:	af025236 	bltu	r21,fp,29540 <___vfiprintf_internal_r+0x141c>
   28bf8:	01400284 	movi	r5,10
   28bfc:	002adc80 	call	2adc8 <__mulsi3>
   28c00:	80c00007 	ldb	r3,0(r16)
   28c04:	1709883a 	add	r4,r2,fp
   28c08:	85800044 	addi	r22,r16,1
   28c0c:	1f3ff404 	addi	fp,r3,-48
   28c10:	b021883a 	mov	r16,r22
   28c14:	af3ff82e 	bgeu	r21,fp,28bf8 <__alt_data_end+0xfffe8bf8>
   28c18:	2021883a 	mov	r16,r4
   28c1c:	203d9f0e 	bge	r4,zero,2829c <__alt_data_end+0xfffe829c>
   28c20:	043fffc4 	movi	r16,-1
   28c24:	003d9d06 	br	2829c <__alt_data_end+0xfffe829c>
   28c28:	8c401014 	ori	r17,r17,64
   28c2c:	b0c00007 	ldb	r3,0(r22)
   28c30:	003d9906 	br	28298 <__alt_data_end+0xfffe8298>
   28c34:	d9002217 	ldw	r4,136(sp)
   28c38:	d8001d85 	stb	zero,118(sp)
   28c3c:	20c00204 	addi	r3,r4,8
   28c40:	24c00017 	ldw	r19,0(r4)
   28c44:	25000117 	ldw	r20,4(r4)
   28c48:	8001e716 	blt	r16,zero,293e8 <___vfiprintf_internal_r+0x12c4>
   28c4c:	013fdfc4 	movi	r4,-129
   28c50:	9d04b03a 	or	r2,r19,r20
   28c54:	d8c02215 	stw	r3,136(sp)
   28c58:	8922703a 	and	r17,r17,r4
   28c5c:	002b883a 	mov	r21,zero
   28c60:	103f2f1e 	bne	r2,zero,28920 <__alt_data_end+0xfffe8920>
   28c64:	803e2f26 	beq	r16,zero,28524 <__alt_data_end+0xfffe8524>
   28c68:	0027883a 	mov	r19,zero
   28c6c:	9cc00c04 	addi	r19,r19,48
   28c70:	dcc019c5 	stb	r19,103(sp)
   28c74:	dd002817 	ldw	r20,160(sp)
   28c78:	ddc019c4 	addi	r23,sp,103
   28c7c:	003e2c06 	br	28530 <__alt_data_end+0xfffe8530>
   28c80:	9cc03fcc 	andi	r19,r19,255
   28c84:	b811883a 	mov	r8,r23
   28c88:	9802571e 	bne	r19,zero,295e8 <___vfiprintf_internal_r+0x14c4>
   28c8c:	18005726 	beq	r3,zero,28dec <___vfiprintf_internal_r+0xcc8>
   28c90:	04c00044 	movi	r19,1
   28c94:	d8c01005 	stb	r3,64(sp)
   28c98:	d8001d85 	stb	zero,118(sp)
   28c9c:	9829883a 	mov	r20,r19
   28ca0:	ddc01004 	addi	r23,sp,64
   28ca4:	003f0a06 	br	288d0 <__alt_data_end+0xfffe88d0>
   28ca8:	d9402017 	ldw	r5,128(sp)
   28cac:	d9002117 	ldw	r4,132(sp)
   28cb0:	d9801a04 	addi	r6,sp,104
   28cb4:	da802a15 	stw	r10,168(sp)
   28cb8:	00280100 	call	28010 <__sprint_r.part.0>
   28cbc:	da802a17 	ldw	r10,168(sp)
   28cc0:	1000501e 	bne	r2,zero,28e04 <___vfiprintf_internal_r+0xce0>
   28cc4:	d9801b17 	ldw	r6,108(sp)
   28cc8:	d8801c17 	ldw	r2,112(sp)
   28ccc:	d811883a 	mov	r8,sp
   28cd0:	31000044 	addi	r4,r6,1
   28cd4:	003e3606 	br	285b0 <__alt_data_end+0xfffe85b0>
   28cd8:	d9001b17 	ldw	r4,108(sp)
   28cdc:	d8801c17 	ldw	r2,112(sp)
   28ce0:	21400044 	addi	r5,r4,1
   28ce4:	d9801d87 	ldb	r6,118(sp)
   28ce8:	303e5226 	beq	r6,zero,28634 <__alt_data_end+0xfffe8634>
   28cec:	01800044 	movi	r6,1
   28cf0:	d9001d84 	addi	r4,sp,118
   28cf4:	1185883a 	add	r2,r2,r6
   28cf8:	41000015 	stw	r4,0(r8)
   28cfc:	41800115 	stw	r6,4(r8)
   28d00:	d8801c15 	stw	r2,112(sp)
   28d04:	d9401b15 	stw	r5,108(sp)
   28d08:	010001c4 	movi	r4,7
   28d0c:	2140b00e 	bge	r4,r5,28fd0 <___vfiprintf_internal_r+0xeac>
   28d10:	1000f61e 	bne	r2,zero,290ec <___vfiprintf_internal_r+0xfc8>
   28d14:	3800b31e 	bne	r7,zero,28fe4 <___vfiprintf_internal_r+0xec0>
   28d18:	0009883a 	mov	r4,zero
   28d1c:	300b883a 	mov	r5,r6
   28d20:	d811883a 	mov	r8,sp
   28d24:	01802004 	movi	r6,128
   28d28:	19be5226 	beq	r3,r6,28674 <__alt_data_end+0xfffe8674>
   28d2c:	8521c83a 	sub	r16,r16,r20
   28d30:	043e790e 	bge	zero,r16,28718 <__alt_data_end+0xfffe8718>
   28d34:	05400404 	movi	r21,16
   28d38:	ac01b00e 	bge	r21,r16,293fc <___vfiprintf_internal_r+0x12d8>
   28d3c:	014000f4 	movhi	r5,3
   28d40:	294a7504 	addi	r5,r5,10708
   28d44:	d9402315 	stw	r5,140(sp)
   28d48:	070001c4 	movi	fp,7
   28d4c:	00000506 	br	28d64 <___vfiprintf_internal_r+0xc40>
   28d50:	21400084 	addi	r5,r4,2
   28d54:	42000204 	addi	r8,r8,8
   28d58:	1809883a 	mov	r4,r3
   28d5c:	843ffc04 	addi	r16,r16,-16
   28d60:	ac000d0e 	bge	r21,r16,28d98 <___vfiprintf_internal_r+0xc74>
   28d64:	10800404 	addi	r2,r2,16
   28d68:	20c00044 	addi	r3,r4,1
   28d6c:	44800015 	stw	r18,0(r8)
   28d70:	45400115 	stw	r21,4(r8)
   28d74:	d8801c15 	stw	r2,112(sp)
   28d78:	d8c01b15 	stw	r3,108(sp)
   28d7c:	e0fff40e 	bge	fp,r3,28d50 <__alt_data_end+0xfffe8d50>
   28d80:	1000101e 	bne	r2,zero,28dc4 <___vfiprintf_internal_r+0xca0>
   28d84:	843ffc04 	addi	r16,r16,-16
   28d88:	01400044 	movi	r5,1
   28d8c:	0009883a 	mov	r4,zero
   28d90:	d811883a 	mov	r8,sp
   28d94:	ac3ff316 	blt	r21,r16,28d64 <__alt_data_end+0xfffe8d64>
   28d98:	d8c02317 	ldw	r3,140(sp)
   28d9c:	1405883a 	add	r2,r2,r16
   28da0:	44000115 	stw	r16,4(r8)
   28da4:	40c00015 	stw	r3,0(r8)
   28da8:	d8801c15 	stw	r2,112(sp)
   28dac:	d9401b15 	stw	r5,108(sp)
   28db0:	00c001c4 	movi	r3,7
   28db4:	19401916 	blt	r3,r5,28e1c <___vfiprintf_internal_r+0xcf8>
   28db8:	42000204 	addi	r8,r8,8
   28dbc:	29400044 	addi	r5,r5,1
   28dc0:	003e5506 	br	28718 <__alt_data_end+0xfffe8718>
   28dc4:	d9402017 	ldw	r5,128(sp)
   28dc8:	d9002117 	ldw	r4,132(sp)
   28dcc:	d9801a04 	addi	r6,sp,104
   28dd0:	00280100 	call	28010 <__sprint_r.part.0>
   28dd4:	10000b1e 	bne	r2,zero,28e04 <___vfiprintf_internal_r+0xce0>
   28dd8:	d9001b17 	ldw	r4,108(sp)
   28ddc:	d8801c17 	ldw	r2,112(sp)
   28de0:	d811883a 	mov	r8,sp
   28de4:	21400044 	addi	r5,r4,1
   28de8:	003fdc06 	br	28d5c <__alt_data_end+0xfffe8d5c>
   28dec:	d8801c17 	ldw	r2,112(sp)
   28df0:	10000426 	beq	r2,zero,28e04 <___vfiprintf_internal_r+0xce0>
   28df4:	d9402017 	ldw	r5,128(sp)
   28df8:	d9002117 	ldw	r4,132(sp)
   28dfc:	d9801a04 	addi	r6,sp,104
   28e00:	00280100 	call	28010 <__sprint_r.part.0>
   28e04:	d9402017 	ldw	r5,128(sp)
   28e08:	2880030b 	ldhu	r2,12(r5)
   28e0c:	1080100c 	andi	r2,r2,64
   28e10:	10014d1e 	bne	r2,zero,29348 <___vfiprintf_internal_r+0x1224>
   28e14:	d8802417 	ldw	r2,144(sp)
   28e18:	003d9706 	br	28478 <__alt_data_end+0xfffe8478>
   28e1c:	1000d21e 	bne	r2,zero,29168 <___vfiprintf_internal_r+0x1044>
   28e20:	00c00044 	movi	r3,1
   28e24:	a005883a 	mov	r2,r20
   28e28:	ddc00015 	stw	r23,0(sp)
   28e2c:	dd000115 	stw	r20,4(sp)
   28e30:	dd001c15 	stw	r20,112(sp)
   28e34:	d8c01b15 	stw	r3,108(sp)
   28e38:	d811883a 	mov	r8,sp
   28e3c:	42000204 	addi	r8,r8,8
   28e40:	8c40010c 	andi	r17,r17,4
   28e44:	88004026 	beq	r17,zero,28f48 <___vfiprintf_internal_r+0xe24>
   28e48:	d9002517 	ldw	r4,148(sp)
   28e4c:	24e3c83a 	sub	r17,r4,r19
   28e50:	04403d0e 	bge	zero,r17,28f48 <___vfiprintf_internal_r+0xe24>
   28e54:	04000404 	movi	r16,16
   28e58:	8441a90e 	bge	r16,r17,29500 <___vfiprintf_internal_r+0x13dc>
   28e5c:	00c000f4 	movhi	r3,3
   28e60:	18ca7904 	addi	r3,r3,10724
   28e64:	d9001b17 	ldw	r4,108(sp)
   28e68:	d8c02315 	stw	r3,140(sp)
   28e6c:	050001c4 	movi	r20,7
   28e70:	dd402117 	ldw	r21,132(sp)
   28e74:	ddc02017 	ldw	r23,128(sp)
   28e78:	00000506 	br	28e90 <___vfiprintf_internal_r+0xd6c>
   28e7c:	21400084 	addi	r5,r4,2
   28e80:	42000204 	addi	r8,r8,8
   28e84:	1809883a 	mov	r4,r3
   28e88:	8c7ffc04 	addi	r17,r17,-16
   28e8c:	84400f0e 	bge	r16,r17,28ecc <___vfiprintf_internal_r+0xda8>
   28e90:	014000f4 	movhi	r5,3
   28e94:	10800404 	addi	r2,r2,16
   28e98:	20c00044 	addi	r3,r4,1
   28e9c:	294a7904 	addi	r5,r5,10724
   28ea0:	41400015 	stw	r5,0(r8)
   28ea4:	44000115 	stw	r16,4(r8)
   28ea8:	d8801c15 	stw	r2,112(sp)
   28eac:	d8c01b15 	stw	r3,108(sp)
   28eb0:	a0fff20e 	bge	r20,r3,28e7c <__alt_data_end+0xfffe8e7c>
   28eb4:	1000141e 	bne	r2,zero,28f08 <___vfiprintf_internal_r+0xde4>
   28eb8:	8c7ffc04 	addi	r17,r17,-16
   28ebc:	01400044 	movi	r5,1
   28ec0:	0009883a 	mov	r4,zero
   28ec4:	d811883a 	mov	r8,sp
   28ec8:	847ff116 	blt	r16,r17,28e90 <__alt_data_end+0xfffe8e90>
   28ecc:	d8c02317 	ldw	r3,140(sp)
   28ed0:	1445883a 	add	r2,r2,r17
   28ed4:	44400115 	stw	r17,4(r8)
   28ed8:	40c00015 	stw	r3,0(r8)
   28edc:	d8801c15 	stw	r2,112(sp)
   28ee0:	d9401b15 	stw	r5,108(sp)
   28ee4:	00c001c4 	movi	r3,7
   28ee8:	1940170e 	bge	r3,r5,28f48 <___vfiprintf_internal_r+0xe24>
   28eec:	1000101e 	bne	r2,zero,28f30 <___vfiprintf_internal_r+0xe0c>
   28ef0:	d8802517 	ldw	r2,148(sp)
   28ef4:	14c11616 	blt	r2,r19,29350 <___vfiprintf_internal_r+0x122c>
   28ef8:	d9002417 	ldw	r4,144(sp)
   28efc:	2089883a 	add	r4,r4,r2
   28f00:	d9002415 	stw	r4,144(sp)
   28f04:	003e1806 	br	28768 <__alt_data_end+0xfffe8768>
   28f08:	d9801a04 	addi	r6,sp,104
   28f0c:	b80b883a 	mov	r5,r23
   28f10:	a809883a 	mov	r4,r21
   28f14:	00280100 	call	28010 <__sprint_r.part.0>
   28f18:	103fba1e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   28f1c:	d9001b17 	ldw	r4,108(sp)
   28f20:	d8801c17 	ldw	r2,112(sp)
   28f24:	d811883a 	mov	r8,sp
   28f28:	21400044 	addi	r5,r4,1
   28f2c:	003fd606 	br	28e88 <__alt_data_end+0xfffe8e88>
   28f30:	d9402017 	ldw	r5,128(sp)
   28f34:	d9002117 	ldw	r4,132(sp)
   28f38:	d9801a04 	addi	r6,sp,104
   28f3c:	00280100 	call	28010 <__sprint_r.part.0>
   28f40:	103fb01e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   28f44:	d8801c17 	ldw	r2,112(sp)
   28f48:	d8c02517 	ldw	r3,148(sp)
   28f4c:	1cc0010e 	bge	r3,r19,28f54 <___vfiprintf_internal_r+0xe30>
   28f50:	9807883a 	mov	r3,r19
   28f54:	d9002417 	ldw	r4,144(sp)
   28f58:	20c9883a 	add	r4,r4,r3
   28f5c:	d9002415 	stw	r4,144(sp)
   28f60:	103e0126 	beq	r2,zero,28768 <__alt_data_end+0xfffe8768>
   28f64:	d9402017 	ldw	r5,128(sp)
   28f68:	d9002117 	ldw	r4,132(sp)
   28f6c:	d9801a04 	addi	r6,sp,104
   28f70:	00280100 	call	28010 <__sprint_r.part.0>
   28f74:	103dfc26 	beq	r2,zero,28768 <__alt_data_end+0xfffe8768>
   28f78:	003fa206 	br	28e04 <__alt_data_end+0xfffe8e04>
   28f7c:	d9402017 	ldw	r5,128(sp)
   28f80:	d9002117 	ldw	r4,132(sp)
   28f84:	d9801a04 	addi	r6,sp,104
   28f88:	d9c02b15 	stw	r7,172(sp)
   28f8c:	00280100 	call	28010 <__sprint_r.part.0>
   28f90:	d9c02b17 	ldw	r7,172(sp)
   28f94:	103f9b1e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   28f98:	d9001b17 	ldw	r4,108(sp)
   28f9c:	d8801c17 	ldw	r2,112(sp)
   28fa0:	d811883a 	mov	r8,sp
   28fa4:	21800044 	addi	r6,r4,1
   28fa8:	003dbf06 	br	286a8 <__alt_data_end+0xfffe86a8>
   28fac:	1000d81e 	bne	r2,zero,29310 <___vfiprintf_internal_r+0x11ec>
   28fb0:	d9001d87 	ldb	r4,118(sp)
   28fb4:	20000a26 	beq	r4,zero,28fe0 <___vfiprintf_internal_r+0xebc>
   28fb8:	00800044 	movi	r2,1
   28fbc:	d9001d84 	addi	r4,sp,118
   28fc0:	100b883a 	mov	r5,r2
   28fc4:	d9000015 	stw	r4,0(sp)
   28fc8:	d8800115 	stw	r2,4(sp)
   28fcc:	d811883a 	mov	r8,sp
   28fd0:	2809883a 	mov	r4,r5
   28fd4:	42000204 	addi	r8,r8,8
   28fd8:	29400044 	addi	r5,r5,1
   28fdc:	003d9506 	br	28634 <__alt_data_end+0xfffe8634>
   28fe0:	3800fd26 	beq	r7,zero,293d8 <___vfiprintf_internal_r+0x12b4>
   28fe4:	00800084 	movi	r2,2
   28fe8:	d9001d04 	addi	r4,sp,116
   28fec:	d9000015 	stw	r4,0(sp)
   28ff0:	d8800115 	stw	r2,4(sp)
   28ff4:	01400044 	movi	r5,1
   28ff8:	d811883a 	mov	r8,sp
   28ffc:	2809883a 	mov	r4,r5
   29000:	42000204 	addi	r8,r8,8
   29004:	29400044 	addi	r5,r5,1
   29008:	003f4606 	br	28d24 <__alt_data_end+0xfffe8d24>
   2900c:	d8802517 	ldw	r2,148(sp)
   29010:	14c0010e 	bge	r2,r19,29018 <___vfiprintf_internal_r+0xef4>
   29014:	9805883a 	mov	r2,r19
   29018:	d9402417 	ldw	r5,144(sp)
   2901c:	288b883a 	add	r5,r5,r2
   29020:	d9402415 	stw	r5,144(sp)
   29024:	003dd006 	br	28768 <__alt_data_end+0xfffe8768>
   29028:	d8001d85 	stb	zero,118(sp)
   2902c:	80005d16 	blt	r16,zero,291a4 <___vfiprintf_internal_r+0x1080>
   29030:	00ffdfc4 	movi	r3,-129
   29034:	9d04b03a 	or	r2,r19,r20
   29038:	88e2703a 	and	r17,r17,r3
   2903c:	103d3726 	beq	r2,zero,2851c <__alt_data_end+0xfffe851c>
   29040:	002b883a 	mov	r21,zero
   29044:	d9002617 	ldw	r4,152(sp)
   29048:	ddc01a04 	addi	r23,sp,104
   2904c:	988003cc 	andi	r2,r19,15
   29050:	a006973a 	slli	r3,r20,28
   29054:	2085883a 	add	r2,r4,r2
   29058:	9826d13a 	srli	r19,r19,4
   2905c:	10800003 	ldbu	r2,0(r2)
   29060:	a028d13a 	srli	r20,r20,4
   29064:	bdffffc4 	addi	r23,r23,-1
   29068:	1ce6b03a 	or	r19,r3,r19
   2906c:	b8800005 	stb	r2,0(r23)
   29070:	9d04b03a 	or	r2,r19,r20
   29074:	103ff51e 	bne	r2,zero,2904c <__alt_data_end+0xfffe904c>
   29078:	d8801e17 	ldw	r2,120(sp)
   2907c:	15e9c83a 	sub	r20,r2,r23
   29080:	003d2b06 	br	28530 <__alt_data_end+0xfffe8530>
   29084:	d9402017 	ldw	r5,128(sp)
   29088:	d9002117 	ldw	r4,132(sp)
   2908c:	d9801a04 	addi	r6,sp,104
   29090:	00280100 	call	28010 <__sprint_r.part.0>
   29094:	103f5b1e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   29098:	d8801c17 	ldw	r2,112(sp)
   2909c:	d811883a 	mov	r8,sp
   290a0:	003f6706 	br	28e40 <__alt_data_end+0xfffe8e40>
   290a4:	d9402017 	ldw	r5,128(sp)
   290a8:	d9002117 	ldw	r4,132(sp)
   290ac:	d9801a04 	addi	r6,sp,104
   290b0:	00280100 	call	28010 <__sprint_r.part.0>
   290b4:	103f531e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   290b8:	d811883a 	mov	r8,sp
   290bc:	003cd906 	br	28424 <__alt_data_end+0xfffe8424>
   290c0:	10803fcc 	andi	r2,r2,255
   290c4:	1080201c 	xori	r2,r2,128
   290c8:	10bfe004 	addi	r2,r2,-128
   290cc:	00c00c04 	movi	r3,48
   290d0:	10ffe926 	beq	r2,r3,29078 <__alt_data_end+0xfffe9078>
   290d4:	b8ffffc5 	stb	r3,-1(r23)
   290d8:	d8c01e17 	ldw	r3,120(sp)
   290dc:	b8bfffc4 	addi	r2,r23,-1
   290e0:	102f883a 	mov	r23,r2
   290e4:	18a9c83a 	sub	r20,r3,r2
   290e8:	003d1106 	br	28530 <__alt_data_end+0xfffe8530>
   290ec:	d9402017 	ldw	r5,128(sp)
   290f0:	d9002117 	ldw	r4,132(sp)
   290f4:	d9801a04 	addi	r6,sp,104
   290f8:	d8c02a15 	stw	r3,168(sp)
   290fc:	d9c02b15 	stw	r7,172(sp)
   29100:	00280100 	call	28010 <__sprint_r.part.0>
   29104:	d8c02a17 	ldw	r3,168(sp)
   29108:	d9c02b17 	ldw	r7,172(sp)
   2910c:	103f3d1e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   29110:	d9001b17 	ldw	r4,108(sp)
   29114:	d8801c17 	ldw	r2,112(sp)
   29118:	d811883a 	mov	r8,sp
   2911c:	21400044 	addi	r5,r4,1
   29120:	003d4406 	br	28634 <__alt_data_end+0xfffe8634>
   29124:	d9402017 	ldw	r5,128(sp)
   29128:	d9002117 	ldw	r4,132(sp)
   2912c:	d9801a04 	addi	r6,sp,104
   29130:	d8c02a15 	stw	r3,168(sp)
   29134:	00280100 	call	28010 <__sprint_r.part.0>
   29138:	d8c02a17 	ldw	r3,168(sp)
   2913c:	103f311e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   29140:	d9001b17 	ldw	r4,108(sp)
   29144:	d8801c17 	ldw	r2,112(sp)
   29148:	d811883a 	mov	r8,sp
   2914c:	21400044 	addi	r5,r4,1
   29150:	003ef406 	br	28d24 <__alt_data_end+0xfffe8d24>
   29154:	1000bd1e 	bne	r2,zero,2944c <___vfiprintf_internal_r+0x1328>
   29158:	01400044 	movi	r5,1
   2915c:	0009883a 	mov	r4,zero
   29160:	d811883a 	mov	r8,sp
   29164:	003ef106 	br	28d2c <__alt_data_end+0xfffe8d2c>
   29168:	d9402017 	ldw	r5,128(sp)
   2916c:	d9002117 	ldw	r4,132(sp)
   29170:	d9801a04 	addi	r6,sp,104
   29174:	00280100 	call	28010 <__sprint_r.part.0>
   29178:	103f221e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   2917c:	d9401b17 	ldw	r5,108(sp)
   29180:	d8801c17 	ldw	r2,112(sp)
   29184:	d811883a 	mov	r8,sp
   29188:	29400044 	addi	r5,r5,1
   2918c:	003d6206 	br	28718 <__alt_data_end+0xfffe8718>
   29190:	014000f4 	movhi	r5,3
   29194:	294a1404 	addi	r5,r5,10320
   29198:	d9402615 	stw	r5,152(sp)
   2919c:	d8c02215 	stw	r3,136(sp)
   291a0:	1023883a 	mov	r17,r2
   291a4:	9d04b03a 	or	r2,r19,r20
   291a8:	103fa51e 	bne	r2,zero,29040 <__alt_data_end+0xfffe9040>
   291ac:	002b883a 	mov	r21,zero
   291b0:	00800084 	movi	r2,2
   291b4:	003e4a06 	br	28ae0 <__alt_data_end+0xfffe8ae0>
   291b8:	014000f4 	movhi	r5,3
   291bc:	294a1404 	addi	r5,r5,10320
   291c0:	002b883a 	mov	r21,zero
   291c4:	d9402615 	stw	r5,152(sp)
   291c8:	003f9e06 	br	29044 <__alt_data_end+0xfffe9044>
   291cc:	d9402217 	ldw	r5,136(sp)
   291d0:	d8001d85 	stb	zero,118(sp)
   291d4:	0029883a 	mov	r20,zero
   291d8:	28800104 	addi	r2,r5,4
   291dc:	2cc00017 	ldw	r19,0(r5)
   291e0:	803e3a16 	blt	r16,zero,28acc <__alt_data_end+0xfffe8acc>
   291e4:	00ffdfc4 	movi	r3,-129
   291e8:	d8802215 	stw	r2,136(sp)
   291ec:	88e2703a 	and	r17,r17,r3
   291f0:	002b883a 	mov	r21,zero
   291f4:	983e9b26 	beq	r19,zero,28c64 <__alt_data_end+0xfffe8c64>
   291f8:	00800244 	movi	r2,9
   291fc:	14fdc936 	bltu	r2,r19,28924 <__alt_data_end+0xfffe8924>
   29200:	003e9a06 	br	28c6c <__alt_data_end+0xfffe8c6c>
   29204:	00800c04 	movi	r2,48
   29208:	d8c01d45 	stb	r3,117(sp)
   2920c:	d8801d05 	stb	r2,116(sp)
   29210:	d8001d85 	stb	zero,118(sp)
   29214:	88c00094 	ori	r3,r17,2
   29218:	80009c16 	blt	r16,zero,2948c <___vfiprintf_internal_r+0x1368>
   2921c:	00bfdfc4 	movi	r2,-129
   29220:	88a2703a 	and	r17,r17,r2
   29224:	8c400094 	ori	r17,r17,2
   29228:	002b883a 	mov	r21,zero
   2922c:	003f8506 	br	29044 <__alt_data_end+0xfffe9044>
   29230:	b029883a 	mov	r20,r22
   29234:	003c0b06 	br	28264 <__alt_data_end+0xfffe8264>
   29238:	04e7c83a 	sub	r19,zero,r19
   2923c:	05400b44 	movi	r21,45
   29240:	9804c03a 	cmpne	r2,r19,zero
   29244:	0529c83a 	sub	r20,zero,r20
   29248:	dd401d85 	stb	r21,118(sp)
   2924c:	a0a9c83a 	sub	r20,r20,r2
   29250:	80009716 	blt	r16,zero,294b0 <___vfiprintf_internal_r+0x138c>
   29254:	00bfdfc4 	movi	r2,-129
   29258:	88a2703a 	and	r17,r17,r2
   2925c:	003db006 	br	28920 <__alt_data_end+0xfffe8920>
   29260:	b0c00007 	ldb	r3,0(r22)
   29264:	003c0c06 	br	28298 <__alt_data_end+0xfffe8298>
   29268:	8880100c 	andi	r2,r17,64
   2926c:	d8001d85 	stb	zero,118(sp)
   29270:	1000461e 	bne	r2,zero,2938c <___vfiprintf_internal_r+0x1268>
   29274:	d9002217 	ldw	r4,136(sp)
   29278:	0029883a 	mov	r20,zero
   2927c:	20800104 	addi	r2,r4,4
   29280:	24c00017 	ldw	r19,0(r4)
   29284:	803df80e 	bge	r16,zero,28a68 <__alt_data_end+0xfffe8a68>
   29288:	9d06b03a 	or	r3,r19,r20
   2928c:	d8802215 	stw	r2,136(sp)
   29290:	183d5e1e 	bne	r3,zero,2880c <__alt_data_end+0xfffe880c>
   29294:	002b883a 	mov	r21,zero
   29298:	0005883a 	mov	r2,zero
   2929c:	003e1006 	br	28ae0 <__alt_data_end+0xfffe8ae0>
   292a0:	8880040c 	andi	r2,r17,16
   292a4:	1000321e 	bne	r2,zero,29370 <___vfiprintf_internal_r+0x124c>
   292a8:	8c40100c 	andi	r17,r17,64
   292ac:	88008d26 	beq	r17,zero,294e4 <___vfiprintf_internal_r+0x13c0>
   292b0:	d9402217 	ldw	r5,136(sp)
   292b4:	d8c02417 	ldw	r3,144(sp)
   292b8:	28800017 	ldw	r2,0(r5)
   292bc:	29400104 	addi	r5,r5,4
   292c0:	d9402215 	stw	r5,136(sp)
   292c4:	10c0000d 	sth	r3,0(r2)
   292c8:	003bca06 	br	281f4 <__alt_data_end+0xfffe81f4>
   292cc:	8880100c 	andi	r2,r17,64
   292d0:	10003a26 	beq	r2,zero,293bc <___vfiprintf_internal_r+0x1298>
   292d4:	d8802217 	ldw	r2,136(sp)
   292d8:	14c0000f 	ldh	r19,0(r2)
   292dc:	10800104 	addi	r2,r2,4
   292e0:	d8802215 	stw	r2,136(sp)
   292e4:	9829d7fa 	srai	r20,r19,31
   292e8:	a005883a 	mov	r2,r20
   292ec:	003d8506 	br	28904 <__alt_data_end+0xfffe8904>
   292f0:	8880100c 	andi	r2,r17,64
   292f4:	10002b26 	beq	r2,zero,293a4 <___vfiprintf_internal_r+0x1280>
   292f8:	d8802217 	ldw	r2,136(sp)
   292fc:	0029883a 	mov	r20,zero
   29300:	14c0000b 	ldhu	r19,0(r2)
   29304:	10800104 	addi	r2,r2,4
   29308:	d8802215 	stw	r2,136(sp)
   2930c:	003d5d06 	br	28884 <__alt_data_end+0xfffe8884>
   29310:	d9402017 	ldw	r5,128(sp)
   29314:	d9002117 	ldw	r4,132(sp)
   29318:	d9801a04 	addi	r6,sp,104
   2931c:	d8c02a15 	stw	r3,168(sp)
   29320:	d9c02b15 	stw	r7,172(sp)
   29324:	00280100 	call	28010 <__sprint_r.part.0>
   29328:	d8c02a17 	ldw	r3,168(sp)
   2932c:	d9c02b17 	ldw	r7,172(sp)
   29330:	103eb41e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   29334:	d9001b17 	ldw	r4,108(sp)
   29338:	d8801c17 	ldw	r2,112(sp)
   2933c:	d811883a 	mov	r8,sp
   29340:	21400044 	addi	r5,r4,1
   29344:	003e6706 	br	28ce4 <__alt_data_end+0xfffe8ce4>
   29348:	00bfffc4 	movi	r2,-1
   2934c:	003c4a06 	br	28478 <__alt_data_end+0xfffe8478>
   29350:	9805883a 	mov	r2,r19
   29354:	003ee806 	br	28ef8 <__alt_data_end+0xfffe8ef8>
   29358:	d8c02217 	ldw	r3,136(sp)
   2935c:	0029883a 	mov	r20,zero
   29360:	18800104 	addi	r2,r3,4
   29364:	1cc0000b 	ldhu	r19,0(r3)
   29368:	803f9e0e 	bge	r16,zero,291e4 <__alt_data_end+0xfffe91e4>
   2936c:	003dd706 	br	28acc <__alt_data_end+0xfffe8acc>
   29370:	d8c02217 	ldw	r3,136(sp)
   29374:	d9002417 	ldw	r4,144(sp)
   29378:	18800017 	ldw	r2,0(r3)
   2937c:	18c00104 	addi	r3,r3,4
   29380:	d8c02215 	stw	r3,136(sp)
   29384:	11000015 	stw	r4,0(r2)
   29388:	003b9a06 	br	281f4 <__alt_data_end+0xfffe81f4>
   2938c:	d8c02217 	ldw	r3,136(sp)
   29390:	0029883a 	mov	r20,zero
   29394:	18800104 	addi	r2,r3,4
   29398:	1cc0000b 	ldhu	r19,0(r3)
   2939c:	803db20e 	bge	r16,zero,28a68 <__alt_data_end+0xfffe8a68>
   293a0:	003fb906 	br	29288 <__alt_data_end+0xfffe9288>
   293a4:	d9002217 	ldw	r4,136(sp)
   293a8:	0029883a 	mov	r20,zero
   293ac:	24c00017 	ldw	r19,0(r4)
   293b0:	21000104 	addi	r4,r4,4
   293b4:	d9002215 	stw	r4,136(sp)
   293b8:	003d3206 	br	28884 <__alt_data_end+0xfffe8884>
   293bc:	d8c02217 	ldw	r3,136(sp)
   293c0:	1cc00017 	ldw	r19,0(r3)
   293c4:	18c00104 	addi	r3,r3,4
   293c8:	d8c02215 	stw	r3,136(sp)
   293cc:	9829d7fa 	srai	r20,r19,31
   293d0:	a005883a 	mov	r2,r20
   293d4:	003d4b06 	br	28904 <__alt_data_end+0xfffe8904>
   293d8:	0009883a 	mov	r4,zero
   293dc:	01400044 	movi	r5,1
   293e0:	d811883a 	mov	r8,sp
   293e4:	003e4f06 	br	28d24 <__alt_data_end+0xfffe8d24>
   293e8:	d8c02215 	stw	r3,136(sp)
   293ec:	002b883a 	mov	r21,zero
   293f0:	003db806 	br	28ad4 <__alt_data_end+0xfffe8ad4>
   293f4:	d811883a 	mov	r8,sp
   293f8:	003e9606 	br	28e54 <__alt_data_end+0xfffe8e54>
   293fc:	010000f4 	movhi	r4,3
   29400:	210a7504 	addi	r4,r4,10708
   29404:	d9002315 	stw	r4,140(sp)
   29408:	003e6306 	br	28d98 <__alt_data_end+0xfffe8d98>
   2940c:	b0c00043 	ldbu	r3,1(r22)
   29410:	8c400814 	ori	r17,r17,32
   29414:	b5800044 	addi	r22,r22,1
   29418:	18c03fcc 	andi	r3,r3,255
   2941c:	18c0201c 	xori	r3,r3,128
   29420:	18ffe004 	addi	r3,r3,-128
   29424:	003b9c06 	br	28298 <__alt_data_end+0xfffe8298>
   29428:	b809883a 	mov	r4,r23
   2942c:	da002a15 	stw	r8,168(sp)
   29430:	00208940 	call	20894 <strlen>
   29434:	1029883a 	mov	r20,r2
   29438:	dd401d83 	ldbu	r21,118(sp)
   2943c:	df002215 	stw	fp,136(sp)
   29440:	0021883a 	mov	r16,zero
   29444:	da002a17 	ldw	r8,168(sp)
   29448:	003c3906 	br	28530 <__alt_data_end+0xfffe8530>
   2944c:	d9402017 	ldw	r5,128(sp)
   29450:	d9002117 	ldw	r4,132(sp)
   29454:	d9801a04 	addi	r6,sp,104
   29458:	00280100 	call	28010 <__sprint_r.part.0>
   2945c:	103e691e 	bne	r2,zero,28e04 <__alt_data_end+0xfffe8e04>
   29460:	d9001b17 	ldw	r4,108(sp)
   29464:	d8801c17 	ldw	r2,112(sp)
   29468:	d811883a 	mov	r8,sp
   2946c:	21400044 	addi	r5,r4,1
   29470:	003e2e06 	br	28d2c <__alt_data_end+0xfffe8d2c>
   29474:	010000f4 	movhi	r4,3
   29478:	210a7904 	addi	r4,r4,10724
   2947c:	d9002315 	stw	r4,140(sp)
   29480:	d9001b17 	ldw	r4,108(sp)
   29484:	21000044 	addi	r4,r4,1
   29488:	003c5e06 	br	28604 <__alt_data_end+0xfffe8604>
   2948c:	002b883a 	mov	r21,zero
   29490:	00800084 	movi	r2,2
   29494:	10803fcc 	andi	r2,r2,255
   29498:	01000044 	movi	r4,1
   2949c:	11002b26 	beq	r2,r4,2954c <___vfiprintf_internal_r+0x1428>
   294a0:	01000084 	movi	r4,2
   294a4:	11002b1e 	bne	r2,r4,29554 <___vfiprintf_internal_r+0x1430>
   294a8:	1823883a 	mov	r17,r3
   294ac:	003ee506 	br	29044 <__alt_data_end+0xfffe9044>
   294b0:	8807883a 	mov	r3,r17
   294b4:	00800044 	movi	r2,1
   294b8:	003ff606 	br	29494 <__alt_data_end+0xfffe9494>
   294bc:	00800184 	movi	r2,6
   294c0:	1400012e 	bgeu	r2,r16,294c8 <___vfiprintf_internal_r+0x13a4>
   294c4:	1021883a 	mov	r16,r2
   294c8:	8029883a 	mov	r20,r16
   294cc:	8027883a 	mov	r19,r16
   294d0:	80002216 	blt	r16,zero,2955c <___vfiprintf_internal_r+0x1438>
   294d4:	05c000f4 	movhi	r23,3
   294d8:	df002215 	stw	fp,136(sp)
   294dc:	bdca1904 	addi	r23,r23,10340
   294e0:	003cfb06 	br	288d0 <__alt_data_end+0xfffe88d0>
   294e4:	d9002217 	ldw	r4,136(sp)
   294e8:	d9402417 	ldw	r5,144(sp)
   294ec:	20800017 	ldw	r2,0(r4)
   294f0:	21000104 	addi	r4,r4,4
   294f4:	d9002215 	stw	r4,136(sp)
   294f8:	11400015 	stw	r5,0(r2)
   294fc:	003b3d06 	br	281f4 <__alt_data_end+0xfffe81f4>
   29500:	014000f4 	movhi	r5,3
   29504:	294a7904 	addi	r5,r5,10724
   29508:	d9402315 	stw	r5,140(sp)
   2950c:	d9401b17 	ldw	r5,108(sp)
   29510:	29400044 	addi	r5,r5,1
   29514:	003e6d06 	br	28ecc <__alt_data_end+0xfffe8ecc>
   29518:	8029883a 	mov	r20,r16
   2951c:	dd401d83 	ldbu	r21,118(sp)
   29520:	df002215 	stw	fp,136(sp)
   29524:	0021883a 	mov	r16,zero
   29528:	003c0106 	br	28530 <__alt_data_end+0xfffe8530>
   2952c:	00c000f4 	movhi	r3,3
   29530:	18ca7504 	addi	r3,r3,10708
   29534:	d8c02315 	stw	r3,140(sp)
   29538:	280d883a 	mov	r6,r5
   2953c:	003c6906 	br	286e4 <__alt_data_end+0xfffe86e4>
   29540:	802d883a 	mov	r22,r16
   29544:	0021883a 	mov	r16,zero
   29548:	003b5406 	br	2829c <__alt_data_end+0xfffe829c>
   2954c:	1823883a 	mov	r17,r3
   29550:	003cf306 	br	28920 <__alt_data_end+0xfffe8920>
   29554:	1823883a 	mov	r17,r3
   29558:	003cad06 	br	28810 <__alt_data_end+0xfffe8810>
   2955c:	0027883a 	mov	r19,zero
   29560:	003fdc06 	br	294d4 <__alt_data_end+0xfffe94d4>
   29564:	d9402217 	ldw	r5,136(sp)
   29568:	8005883a 	mov	r2,r16
   2956c:	b0c00043 	ldbu	r3,1(r22)
   29570:	2c000017 	ldw	r16,0(r5)
   29574:	29000104 	addi	r4,r5,4
   29578:	d9002215 	stw	r4,136(sp)
   2957c:	102d883a 	mov	r22,r2
   29580:	803fa50e 	bge	r16,zero,29418 <__alt_data_end+0xfffe9418>
   29584:	18c03fcc 	andi	r3,r3,255
   29588:	18c0201c 	xori	r3,r3,128
   2958c:	043fffc4 	movi	r16,-1
   29590:	18ffe004 	addi	r3,r3,-128
   29594:	003b4006 	br	28298 <__alt_data_end+0xfffe8298>
   29598:	d9402303 	ldbu	r5,140(sp)
   2959c:	d9401d85 	stb	r5,118(sp)
   295a0:	003cae06 	br	2885c <__alt_data_end+0xfffe885c>
   295a4:	d8c02303 	ldbu	r3,140(sp)
   295a8:	d8c01d85 	stb	r3,118(sp)
   295ac:	003d1406 	br	28a00 <__alt_data_end+0xfffe8a00>
   295b0:	d8c02303 	ldbu	r3,140(sp)
   295b4:	d8c01d85 	stb	r3,118(sp)
   295b8:	003cca06 	br	288e4 <__alt_data_end+0xfffe88e4>
   295bc:	8880004c 	andi	r2,r17,1
   295c0:	002b883a 	mov	r21,zero
   295c4:	10000526 	beq	r2,zero,295dc <___vfiprintf_internal_r+0x14b8>
   295c8:	00800c04 	movi	r2,48
   295cc:	d88019c5 	stb	r2,103(sp)
   295d0:	dd002817 	ldw	r20,160(sp)
   295d4:	ddc019c4 	addi	r23,sp,103
   295d8:	003bd506 	br	28530 <__alt_data_end+0xfffe8530>
   295dc:	0029883a 	mov	r20,zero
   295e0:	ddc01a04 	addi	r23,sp,104
   295e4:	003bd206 	br	28530 <__alt_data_end+0xfffe8530>
   295e8:	d9002303 	ldbu	r4,140(sp)
   295ec:	d9001d85 	stb	r4,118(sp)
   295f0:	003da606 	br	28c8c <__alt_data_end+0xfffe8c8c>
   295f4:	d8c02303 	ldbu	r3,140(sp)
   295f8:	d8c01d85 	stb	r3,118(sp)
   295fc:	003c7606 	br	287d8 <__alt_data_end+0xfffe87d8>
   29600:	d8c02303 	ldbu	r3,140(sp)
   29604:	d8c01d85 	stb	r3,118(sp)
   29608:	003c6506 	br	287a0 <__alt_data_end+0xfffe87a0>
   2960c:	d9002303 	ldbu	r4,140(sp)
   29610:	d9001d85 	stb	r4,118(sp)
   29614:	003d3d06 	br	28b0c <__alt_data_end+0xfffe8b0c>
   29618:	d8c02303 	ldbu	r3,140(sp)
   2961c:	d8c01d85 	stb	r3,118(sp)
   29620:	003d1d06 	br	28a98 <__alt_data_end+0xfffe8a98>
   29624:	d8c02303 	ldbu	r3,140(sp)
   29628:	d8c01d85 	stb	r3,118(sp)
   2962c:	003d0306 	br	28a3c <__alt_data_end+0xfffe8a3c>

00029630 <__vfiprintf_internal>:
   29630:	008000f4 	movhi	r2,3
   29634:	1091bf04 	addi	r2,r2,18172
   29638:	300f883a 	mov	r7,r6
   2963c:	280d883a 	mov	r6,r5
   29640:	200b883a 	mov	r5,r4
   29644:	11000017 	ldw	r4,0(r2)
   29648:	00281241 	jmpi	28124 <___vfiprintf_internal_r>

0002964c <__sbprintf>:
   2964c:	2880030b 	ldhu	r2,12(r5)
   29650:	2ac01917 	ldw	r11,100(r5)
   29654:	2a80038b 	ldhu	r10,14(r5)
   29658:	2a400717 	ldw	r9,28(r5)
   2965c:	2a000917 	ldw	r8,36(r5)
   29660:	defee204 	addi	sp,sp,-1144
   29664:	00c10004 	movi	r3,1024
   29668:	dc011a15 	stw	r16,1128(sp)
   2966c:	10bfff4c 	andi	r2,r2,65533
   29670:	2821883a 	mov	r16,r5
   29674:	d8cb883a 	add	r5,sp,r3
   29678:	dc811c15 	stw	r18,1136(sp)
   2967c:	dc411b15 	stw	r17,1132(sp)
   29680:	dfc11d15 	stw	ra,1140(sp)
   29684:	2025883a 	mov	r18,r4
   29688:	d881030d 	sth	r2,1036(sp)
   2968c:	dac11915 	stw	r11,1124(sp)
   29690:	da81038d 	sth	r10,1038(sp)
   29694:	da410715 	stw	r9,1052(sp)
   29698:	da010915 	stw	r8,1060(sp)
   2969c:	dec10015 	stw	sp,1024(sp)
   296a0:	dec10415 	stw	sp,1040(sp)
   296a4:	d8c10215 	stw	r3,1032(sp)
   296a8:	d8c10515 	stw	r3,1044(sp)
   296ac:	d8010615 	stw	zero,1048(sp)
   296b0:	00281240 	call	28124 <___vfiprintf_internal_r>
   296b4:	1023883a 	mov	r17,r2
   296b8:	10000416 	blt	r2,zero,296cc <__sbprintf+0x80>
   296bc:	d9410004 	addi	r5,sp,1024
   296c0:	9009883a 	mov	r4,r18
   296c4:	00249000 	call	24900 <_fflush_r>
   296c8:	10000d1e 	bne	r2,zero,29700 <__sbprintf+0xb4>
   296cc:	d881030b 	ldhu	r2,1036(sp)
   296d0:	1080100c 	andi	r2,r2,64
   296d4:	10000326 	beq	r2,zero,296e4 <__sbprintf+0x98>
   296d8:	8080030b 	ldhu	r2,12(r16)
   296dc:	10801014 	ori	r2,r2,64
   296e0:	8080030d 	sth	r2,12(r16)
   296e4:	8805883a 	mov	r2,r17
   296e8:	dfc11d17 	ldw	ra,1140(sp)
   296ec:	dc811c17 	ldw	r18,1136(sp)
   296f0:	dc411b17 	ldw	r17,1132(sp)
   296f4:	dc011a17 	ldw	r16,1128(sp)
   296f8:	dec11e04 	addi	sp,sp,1144
   296fc:	f800283a 	ret
   29700:	047fffc4 	movi	r17,-1
   29704:	003ff106 	br	296cc <__alt_data_end+0xfffe96cc>

00029708 <_write_r>:
   29708:	defffd04 	addi	sp,sp,-12
   2970c:	2805883a 	mov	r2,r5
   29710:	dc000015 	stw	r16,0(sp)
   29714:	040000f4 	movhi	r16,3
   29718:	dc400115 	stw	r17,4(sp)
   2971c:	300b883a 	mov	r5,r6
   29720:	8418d204 	addi	r16,r16,25416
   29724:	2023883a 	mov	r17,r4
   29728:	380d883a 	mov	r6,r7
   2972c:	1009883a 	mov	r4,r2
   29730:	dfc00215 	stw	ra,8(sp)
   29734:	80000015 	stw	zero,0(r16)
   29738:	002df580 	call	2df58 <write>
   2973c:	00ffffc4 	movi	r3,-1
   29740:	10c00526 	beq	r2,r3,29758 <_write_r+0x50>
   29744:	dfc00217 	ldw	ra,8(sp)
   29748:	dc400117 	ldw	r17,4(sp)
   2974c:	dc000017 	ldw	r16,0(sp)
   29750:	dec00304 	addi	sp,sp,12
   29754:	f800283a 	ret
   29758:	80c00017 	ldw	r3,0(r16)
   2975c:	183ff926 	beq	r3,zero,29744 <__alt_data_end+0xfffe9744>
   29760:	88c00015 	stw	r3,0(r17)
   29764:	003ff706 	br	29744 <__alt_data_end+0xfffe9744>

00029768 <_close_r>:
   29768:	defffd04 	addi	sp,sp,-12
   2976c:	dc000015 	stw	r16,0(sp)
   29770:	040000f4 	movhi	r16,3
   29774:	dc400115 	stw	r17,4(sp)
   29778:	8418d204 	addi	r16,r16,25416
   2977c:	2023883a 	mov	r17,r4
   29780:	2809883a 	mov	r4,r5
   29784:	dfc00215 	stw	ra,8(sp)
   29788:	80000015 	stw	zero,0(r16)
   2978c:	002d6d00 	call	2d6d0 <close>
   29790:	00ffffc4 	movi	r3,-1
   29794:	10c00526 	beq	r2,r3,297ac <_close_r+0x44>
   29798:	dfc00217 	ldw	ra,8(sp)
   2979c:	dc400117 	ldw	r17,4(sp)
   297a0:	dc000017 	ldw	r16,0(sp)
   297a4:	dec00304 	addi	sp,sp,12
   297a8:	f800283a 	ret
   297ac:	80c00017 	ldw	r3,0(r16)
   297b0:	183ff926 	beq	r3,zero,29798 <__alt_data_end+0xfffe9798>
   297b4:	88c00015 	stw	r3,0(r17)
   297b8:	003ff706 	br	29798 <__alt_data_end+0xfffe9798>

000297bc <_calloc_r>:
   297bc:	defffe04 	addi	sp,sp,-8
   297c0:	2805883a 	mov	r2,r5
   297c4:	dc000015 	stw	r16,0(sp)
   297c8:	300b883a 	mov	r5,r6
   297cc:	2021883a 	mov	r16,r4
   297d0:	1009883a 	mov	r4,r2
   297d4:	dfc00115 	stw	ra,4(sp)
   297d8:	002adc80 	call	2adc8 <__mulsi3>
   297dc:	100b883a 	mov	r5,r2
   297e0:	8009883a 	mov	r4,r16
   297e4:	0025a580 	call	25a58 <_malloc_r>
   297e8:	10002926 	beq	r2,zero,29890 <_calloc_r+0xd4>
   297ec:	11bfff17 	ldw	r6,-4(r2)
   297f0:	1021883a 	mov	r16,r2
   297f4:	00bfff04 	movi	r2,-4
   297f8:	308c703a 	and	r6,r6,r2
   297fc:	00c00904 	movi	r3,36
   29800:	308d883a 	add	r6,r6,r2
   29804:	19801636 	bltu	r3,r6,29860 <_calloc_r+0xa4>
   29808:	008004c4 	movi	r2,19
   2980c:	11800b2e 	bgeu	r2,r6,2983c <_calloc_r+0x80>
   29810:	80000015 	stw	zero,0(r16)
   29814:	80000115 	stw	zero,4(r16)
   29818:	008006c4 	movi	r2,27
   2981c:	11801a2e 	bgeu	r2,r6,29888 <_calloc_r+0xcc>
   29820:	80000215 	stw	zero,8(r16)
   29824:	80000315 	stw	zero,12(r16)
   29828:	30c0151e 	bne	r6,r3,29880 <_calloc_r+0xc4>
   2982c:	80000415 	stw	zero,16(r16)
   29830:	80800604 	addi	r2,r16,24
   29834:	80000515 	stw	zero,20(r16)
   29838:	00000106 	br	29840 <_calloc_r+0x84>
   2983c:	8005883a 	mov	r2,r16
   29840:	10000015 	stw	zero,0(r2)
   29844:	10000115 	stw	zero,4(r2)
   29848:	10000215 	stw	zero,8(r2)
   2984c:	8005883a 	mov	r2,r16
   29850:	dfc00117 	ldw	ra,4(sp)
   29854:	dc000017 	ldw	r16,0(sp)
   29858:	dec00204 	addi	sp,sp,8
   2985c:	f800283a 	ret
   29860:	000b883a 	mov	r5,zero
   29864:	8009883a 	mov	r4,r16
   29868:	00265ec0 	call	265ec <memset>
   2986c:	8005883a 	mov	r2,r16
   29870:	dfc00117 	ldw	ra,4(sp)
   29874:	dc000017 	ldw	r16,0(sp)
   29878:	dec00204 	addi	sp,sp,8
   2987c:	f800283a 	ret
   29880:	80800404 	addi	r2,r16,16
   29884:	003fee06 	br	29840 <__alt_data_end+0xfffe9840>
   29888:	80800204 	addi	r2,r16,8
   2988c:	003fec06 	br	29840 <__alt_data_end+0xfffe9840>
   29890:	0005883a 	mov	r2,zero
   29894:	003fee06 	br	29850 <__alt_data_end+0xfffe9850>

00029898 <_fclose_r>:
   29898:	28003926 	beq	r5,zero,29980 <_fclose_r+0xe8>
   2989c:	defffc04 	addi	sp,sp,-16
   298a0:	dc400115 	stw	r17,4(sp)
   298a4:	dc000015 	stw	r16,0(sp)
   298a8:	dfc00315 	stw	ra,12(sp)
   298ac:	dc800215 	stw	r18,8(sp)
   298b0:	2023883a 	mov	r17,r4
   298b4:	2821883a 	mov	r16,r5
   298b8:	20000226 	beq	r4,zero,298c4 <_fclose_r+0x2c>
   298bc:	20800e17 	ldw	r2,56(r4)
   298c0:	10002726 	beq	r2,zero,29960 <_fclose_r+0xc8>
   298c4:	8080030f 	ldh	r2,12(r16)
   298c8:	1000071e 	bne	r2,zero,298e8 <_fclose_r+0x50>
   298cc:	0005883a 	mov	r2,zero
   298d0:	dfc00317 	ldw	ra,12(sp)
   298d4:	dc800217 	ldw	r18,8(sp)
   298d8:	dc400117 	ldw	r17,4(sp)
   298dc:	dc000017 	ldw	r16,0(sp)
   298e0:	dec00404 	addi	sp,sp,16
   298e4:	f800283a 	ret
   298e8:	800b883a 	mov	r5,r16
   298ec:	8809883a 	mov	r4,r17
   298f0:	00246e40 	call	246e4 <__sflush_r>
   298f4:	1025883a 	mov	r18,r2
   298f8:	80800b17 	ldw	r2,44(r16)
   298fc:	10000426 	beq	r2,zero,29910 <_fclose_r+0x78>
   29900:	81400717 	ldw	r5,28(r16)
   29904:	8809883a 	mov	r4,r17
   29908:	103ee83a 	callr	r2
   2990c:	10001616 	blt	r2,zero,29968 <_fclose_r+0xd0>
   29910:	8080030b 	ldhu	r2,12(r16)
   29914:	1080200c 	andi	r2,r2,128
   29918:	1000151e 	bne	r2,zero,29970 <_fclose_r+0xd8>
   2991c:	81400c17 	ldw	r5,48(r16)
   29920:	28000526 	beq	r5,zero,29938 <_fclose_r+0xa0>
   29924:	80801004 	addi	r2,r16,64
   29928:	28800226 	beq	r5,r2,29934 <_fclose_r+0x9c>
   2992c:	8809883a 	mov	r4,r17
   29930:	0024e600 	call	24e60 <_free_r>
   29934:	80000c15 	stw	zero,48(r16)
   29938:	81401117 	ldw	r5,68(r16)
   2993c:	28000326 	beq	r5,zero,2994c <_fclose_r+0xb4>
   29940:	8809883a 	mov	r4,r17
   29944:	0024e600 	call	24e60 <_free_r>
   29948:	80001115 	stw	zero,68(r16)
   2994c:	0024cfc0 	call	24cfc <__sfp_lock_acquire>
   29950:	8000030d 	sth	zero,12(r16)
   29954:	0024d000 	call	24d00 <__sfp_lock_release>
   29958:	9005883a 	mov	r2,r18
   2995c:	003fdc06 	br	298d0 <__alt_data_end+0xfffe98d0>
   29960:	0024cec0 	call	24cec <__sinit>
   29964:	003fd706 	br	298c4 <__alt_data_end+0xfffe98c4>
   29968:	04bfffc4 	movi	r18,-1
   2996c:	003fe806 	br	29910 <__alt_data_end+0xfffe9910>
   29970:	81400417 	ldw	r5,16(r16)
   29974:	8809883a 	mov	r4,r17
   29978:	0024e600 	call	24e60 <_free_r>
   2997c:	003fe706 	br	2991c <__alt_data_end+0xfffe991c>
   29980:	0005883a 	mov	r2,zero
   29984:	f800283a 	ret

00029988 <fclose>:
   29988:	008000f4 	movhi	r2,3
   2998c:	1091bf04 	addi	r2,r2,18172
   29990:	200b883a 	mov	r5,r4
   29994:	11000017 	ldw	r4,0(r2)
   29998:	00298981 	jmpi	29898 <_fclose_r>

0002999c <__fputwc>:
   2999c:	defff804 	addi	sp,sp,-32
   299a0:	dcc00415 	stw	r19,16(sp)
   299a4:	dc800315 	stw	r18,12(sp)
   299a8:	dc000115 	stw	r16,4(sp)
   299ac:	dfc00715 	stw	ra,28(sp)
   299b0:	dd400615 	stw	r21,24(sp)
   299b4:	dd000515 	stw	r20,20(sp)
   299b8:	dc400215 	stw	r17,8(sp)
   299bc:	2027883a 	mov	r19,r4
   299c0:	2825883a 	mov	r18,r5
   299c4:	3021883a 	mov	r16,r6
   299c8:	00258480 	call	25848 <__locale_mb_cur_max>
   299cc:	00c00044 	movi	r3,1
   299d0:	10c03e26 	beq	r2,r3,29acc <__fputwc+0x130>
   299d4:	81c01704 	addi	r7,r16,92
   299d8:	900d883a 	mov	r6,r18
   299dc:	d80b883a 	mov	r5,sp
   299e0:	9809883a 	mov	r4,r19
   299e4:	0029e6c0 	call	29e6c <_wcrtomb_r>
   299e8:	1029883a 	mov	r20,r2
   299ec:	00bfffc4 	movi	r2,-1
   299f0:	a0802026 	beq	r20,r2,29a74 <__fputwc+0xd8>
   299f4:	d9400003 	ldbu	r5,0(sp)
   299f8:	a0001c26 	beq	r20,zero,29a6c <__fputwc+0xd0>
   299fc:	0023883a 	mov	r17,zero
   29a00:	05400284 	movi	r21,10
   29a04:	00000906 	br	29a2c <__fputwc+0x90>
   29a08:	80800017 	ldw	r2,0(r16)
   29a0c:	11400005 	stb	r5,0(r2)
   29a10:	80c00017 	ldw	r3,0(r16)
   29a14:	18c00044 	addi	r3,r3,1
   29a18:	80c00015 	stw	r3,0(r16)
   29a1c:	8c400044 	addi	r17,r17,1
   29a20:	dc45883a 	add	r2,sp,r17
   29a24:	8d00112e 	bgeu	r17,r20,29a6c <__fputwc+0xd0>
   29a28:	11400003 	ldbu	r5,0(r2)
   29a2c:	80c00217 	ldw	r3,8(r16)
   29a30:	18ffffc4 	addi	r3,r3,-1
   29a34:	80c00215 	stw	r3,8(r16)
   29a38:	183ff30e 	bge	r3,zero,29a08 <__alt_data_end+0xfffe9a08>
   29a3c:	80800617 	ldw	r2,24(r16)
   29a40:	18801916 	blt	r3,r2,29aa8 <__fputwc+0x10c>
   29a44:	80800017 	ldw	r2,0(r16)
   29a48:	11400005 	stb	r5,0(r2)
   29a4c:	80800017 	ldw	r2,0(r16)
   29a50:	10c00003 	ldbu	r3,0(r2)
   29a54:	10800044 	addi	r2,r2,1
   29a58:	1d402326 	beq	r3,r21,29ae8 <__fputwc+0x14c>
   29a5c:	80800015 	stw	r2,0(r16)
   29a60:	8c400044 	addi	r17,r17,1
   29a64:	dc45883a 	add	r2,sp,r17
   29a68:	8d3fef36 	bltu	r17,r20,29a28 <__alt_data_end+0xfffe9a28>
   29a6c:	9005883a 	mov	r2,r18
   29a70:	00000406 	br	29a84 <__fputwc+0xe8>
   29a74:	80c0030b 	ldhu	r3,12(r16)
   29a78:	a005883a 	mov	r2,r20
   29a7c:	18c01014 	ori	r3,r3,64
   29a80:	80c0030d 	sth	r3,12(r16)
   29a84:	dfc00717 	ldw	ra,28(sp)
   29a88:	dd400617 	ldw	r21,24(sp)
   29a8c:	dd000517 	ldw	r20,20(sp)
   29a90:	dcc00417 	ldw	r19,16(sp)
   29a94:	dc800317 	ldw	r18,12(sp)
   29a98:	dc400217 	ldw	r17,8(sp)
   29a9c:	dc000117 	ldw	r16,4(sp)
   29aa0:	dec00804 	addi	sp,sp,32
   29aa4:	f800283a 	ret
   29aa8:	800d883a 	mov	r6,r16
   29aac:	29403fcc 	andi	r5,r5,255
   29ab0:	9809883a 	mov	r4,r19
   29ab4:	0029d140 	call	29d14 <__swbuf_r>
   29ab8:	10bfffe0 	cmpeqi	r2,r2,-1
   29abc:	10803fcc 	andi	r2,r2,255
   29ac0:	103fd626 	beq	r2,zero,29a1c <__alt_data_end+0xfffe9a1c>
   29ac4:	00bfffc4 	movi	r2,-1
   29ac8:	003fee06 	br	29a84 <__alt_data_end+0xfffe9a84>
   29acc:	90ffffc4 	addi	r3,r18,-1
   29ad0:	01003f84 	movi	r4,254
   29ad4:	20ffbf36 	bltu	r4,r3,299d4 <__alt_data_end+0xfffe99d4>
   29ad8:	900b883a 	mov	r5,r18
   29adc:	dc800005 	stb	r18,0(sp)
   29ae0:	1029883a 	mov	r20,r2
   29ae4:	003fc506 	br	299fc <__alt_data_end+0xfffe99fc>
   29ae8:	800d883a 	mov	r6,r16
   29aec:	a80b883a 	mov	r5,r21
   29af0:	9809883a 	mov	r4,r19
   29af4:	0029d140 	call	29d14 <__swbuf_r>
   29af8:	10bfffe0 	cmpeqi	r2,r2,-1
   29afc:	003fef06 	br	29abc <__alt_data_end+0xfffe9abc>

00029b00 <_fputwc_r>:
   29b00:	3080030b 	ldhu	r2,12(r6)
   29b04:	10c8000c 	andi	r3,r2,8192
   29b08:	1800051e 	bne	r3,zero,29b20 <_fputwc_r+0x20>
   29b0c:	30c01917 	ldw	r3,100(r6)
   29b10:	10880014 	ori	r2,r2,8192
   29b14:	3080030d 	sth	r2,12(r6)
   29b18:	18880014 	ori	r2,r3,8192
   29b1c:	30801915 	stw	r2,100(r6)
   29b20:	002999c1 	jmpi	2999c <__fputwc>

00029b24 <fputwc>:
   29b24:	008000f4 	movhi	r2,3
   29b28:	defffc04 	addi	sp,sp,-16
   29b2c:	1091bf04 	addi	r2,r2,18172
   29b30:	dc000115 	stw	r16,4(sp)
   29b34:	14000017 	ldw	r16,0(r2)
   29b38:	dc400215 	stw	r17,8(sp)
   29b3c:	dfc00315 	stw	ra,12(sp)
   29b40:	2023883a 	mov	r17,r4
   29b44:	80000226 	beq	r16,zero,29b50 <fputwc+0x2c>
   29b48:	80800e17 	ldw	r2,56(r16)
   29b4c:	10001026 	beq	r2,zero,29b90 <fputwc+0x6c>
   29b50:	2880030b 	ldhu	r2,12(r5)
   29b54:	10c8000c 	andi	r3,r2,8192
   29b58:	1800051e 	bne	r3,zero,29b70 <fputwc+0x4c>
   29b5c:	28c01917 	ldw	r3,100(r5)
   29b60:	10880014 	ori	r2,r2,8192
   29b64:	2880030d 	sth	r2,12(r5)
   29b68:	18880014 	ori	r2,r3,8192
   29b6c:	28801915 	stw	r2,100(r5)
   29b70:	280d883a 	mov	r6,r5
   29b74:	8009883a 	mov	r4,r16
   29b78:	880b883a 	mov	r5,r17
   29b7c:	dfc00317 	ldw	ra,12(sp)
   29b80:	dc400217 	ldw	r17,8(sp)
   29b84:	dc000117 	ldw	r16,4(sp)
   29b88:	dec00404 	addi	sp,sp,16
   29b8c:	002999c1 	jmpi	2999c <__fputwc>
   29b90:	8009883a 	mov	r4,r16
   29b94:	d9400015 	stw	r5,0(sp)
   29b98:	0024cec0 	call	24cec <__sinit>
   29b9c:	d9400017 	ldw	r5,0(sp)
   29ba0:	003feb06 	br	29b50 <__alt_data_end+0xfffe9b50>

00029ba4 <_fstat_r>:
   29ba4:	defffd04 	addi	sp,sp,-12
   29ba8:	2805883a 	mov	r2,r5
   29bac:	dc000015 	stw	r16,0(sp)
   29bb0:	040000f4 	movhi	r16,3
   29bb4:	dc400115 	stw	r17,4(sp)
   29bb8:	8418d204 	addi	r16,r16,25416
   29bbc:	2023883a 	mov	r17,r4
   29bc0:	300b883a 	mov	r5,r6
   29bc4:	1009883a 	mov	r4,r2
   29bc8:	dfc00215 	stw	ra,8(sp)
   29bcc:	80000015 	stw	zero,0(r16)
   29bd0:	002d8100 	call	2d810 <fstat>
   29bd4:	00ffffc4 	movi	r3,-1
   29bd8:	10c00526 	beq	r2,r3,29bf0 <_fstat_r+0x4c>
   29bdc:	dfc00217 	ldw	ra,8(sp)
   29be0:	dc400117 	ldw	r17,4(sp)
   29be4:	dc000017 	ldw	r16,0(sp)
   29be8:	dec00304 	addi	sp,sp,12
   29bec:	f800283a 	ret
   29bf0:	80c00017 	ldw	r3,0(r16)
   29bf4:	183ff926 	beq	r3,zero,29bdc <__alt_data_end+0xfffe9bdc>
   29bf8:	88c00015 	stw	r3,0(r17)
   29bfc:	003ff706 	br	29bdc <__alt_data_end+0xfffe9bdc>

00029c00 <_isatty_r>:
   29c00:	defffd04 	addi	sp,sp,-12
   29c04:	dc000015 	stw	r16,0(sp)
   29c08:	040000f4 	movhi	r16,3
   29c0c:	dc400115 	stw	r17,4(sp)
   29c10:	8418d204 	addi	r16,r16,25416
   29c14:	2023883a 	mov	r17,r4
   29c18:	2809883a 	mov	r4,r5
   29c1c:	dfc00215 	stw	ra,8(sp)
   29c20:	80000015 	stw	zero,0(r16)
   29c24:	002d9040 	call	2d904 <isatty>
   29c28:	00ffffc4 	movi	r3,-1
   29c2c:	10c00526 	beq	r2,r3,29c44 <_isatty_r+0x44>
   29c30:	dfc00217 	ldw	ra,8(sp)
   29c34:	dc400117 	ldw	r17,4(sp)
   29c38:	dc000017 	ldw	r16,0(sp)
   29c3c:	dec00304 	addi	sp,sp,12
   29c40:	f800283a 	ret
   29c44:	80c00017 	ldw	r3,0(r16)
   29c48:	183ff926 	beq	r3,zero,29c30 <__alt_data_end+0xfffe9c30>
   29c4c:	88c00015 	stw	r3,0(r17)
   29c50:	003ff706 	br	29c30 <__alt_data_end+0xfffe9c30>

00029c54 <_lseek_r>:
   29c54:	defffd04 	addi	sp,sp,-12
   29c58:	2805883a 	mov	r2,r5
   29c5c:	dc000015 	stw	r16,0(sp)
   29c60:	040000f4 	movhi	r16,3
   29c64:	dc400115 	stw	r17,4(sp)
   29c68:	300b883a 	mov	r5,r6
   29c6c:	8418d204 	addi	r16,r16,25416
   29c70:	2023883a 	mov	r17,r4
   29c74:	380d883a 	mov	r6,r7
   29c78:	1009883a 	mov	r4,r2
   29c7c:	dfc00215 	stw	ra,8(sp)
   29c80:	80000015 	stw	zero,0(r16)
   29c84:	002dad80 	call	2dad8 <lseek>
   29c88:	00ffffc4 	movi	r3,-1
   29c8c:	10c00526 	beq	r2,r3,29ca4 <_lseek_r+0x50>
   29c90:	dfc00217 	ldw	ra,8(sp)
   29c94:	dc400117 	ldw	r17,4(sp)
   29c98:	dc000017 	ldw	r16,0(sp)
   29c9c:	dec00304 	addi	sp,sp,12
   29ca0:	f800283a 	ret
   29ca4:	80c00017 	ldw	r3,0(r16)
   29ca8:	183ff926 	beq	r3,zero,29c90 <__alt_data_end+0xfffe9c90>
   29cac:	88c00015 	stw	r3,0(r17)
   29cb0:	003ff706 	br	29c90 <__alt_data_end+0xfffe9c90>

00029cb4 <_read_r>:
   29cb4:	defffd04 	addi	sp,sp,-12
   29cb8:	2805883a 	mov	r2,r5
   29cbc:	dc000015 	stw	r16,0(sp)
   29cc0:	040000f4 	movhi	r16,3
   29cc4:	dc400115 	stw	r17,4(sp)
   29cc8:	300b883a 	mov	r5,r6
   29ccc:	8418d204 	addi	r16,r16,25416
   29cd0:	2023883a 	mov	r17,r4
   29cd4:	380d883a 	mov	r6,r7
   29cd8:	1009883a 	mov	r4,r2
   29cdc:	dfc00215 	stw	ra,8(sp)
   29ce0:	80000015 	stw	zero,0(r16)
   29ce4:	002dcb40 	call	2dcb4 <read>
   29ce8:	00ffffc4 	movi	r3,-1
   29cec:	10c00526 	beq	r2,r3,29d04 <_read_r+0x50>
   29cf0:	dfc00217 	ldw	ra,8(sp)
   29cf4:	dc400117 	ldw	r17,4(sp)
   29cf8:	dc000017 	ldw	r16,0(sp)
   29cfc:	dec00304 	addi	sp,sp,12
   29d00:	f800283a 	ret
   29d04:	80c00017 	ldw	r3,0(r16)
   29d08:	183ff926 	beq	r3,zero,29cf0 <__alt_data_end+0xfffe9cf0>
   29d0c:	88c00015 	stw	r3,0(r17)
   29d10:	003ff706 	br	29cf0 <__alt_data_end+0xfffe9cf0>

00029d14 <__swbuf_r>:
   29d14:	defffb04 	addi	sp,sp,-20
   29d18:	dcc00315 	stw	r19,12(sp)
   29d1c:	dc800215 	stw	r18,8(sp)
   29d20:	dc000015 	stw	r16,0(sp)
   29d24:	dfc00415 	stw	ra,16(sp)
   29d28:	dc400115 	stw	r17,4(sp)
   29d2c:	2025883a 	mov	r18,r4
   29d30:	2827883a 	mov	r19,r5
   29d34:	3021883a 	mov	r16,r6
   29d38:	20000226 	beq	r4,zero,29d44 <__swbuf_r+0x30>
   29d3c:	20800e17 	ldw	r2,56(r4)
   29d40:	10004226 	beq	r2,zero,29e4c <__swbuf_r+0x138>
   29d44:	80800617 	ldw	r2,24(r16)
   29d48:	8100030b 	ldhu	r4,12(r16)
   29d4c:	80800215 	stw	r2,8(r16)
   29d50:	2080020c 	andi	r2,r4,8
   29d54:	10003626 	beq	r2,zero,29e30 <__swbuf_r+0x11c>
   29d58:	80c00417 	ldw	r3,16(r16)
   29d5c:	18003426 	beq	r3,zero,29e30 <__swbuf_r+0x11c>
   29d60:	2088000c 	andi	r2,r4,8192
   29d64:	9c403fcc 	andi	r17,r19,255
   29d68:	10001a26 	beq	r2,zero,29dd4 <__swbuf_r+0xc0>
   29d6c:	80800017 	ldw	r2,0(r16)
   29d70:	81000517 	ldw	r4,20(r16)
   29d74:	10c7c83a 	sub	r3,r2,r3
   29d78:	1900200e 	bge	r3,r4,29dfc <__swbuf_r+0xe8>
   29d7c:	18c00044 	addi	r3,r3,1
   29d80:	81000217 	ldw	r4,8(r16)
   29d84:	11400044 	addi	r5,r2,1
   29d88:	81400015 	stw	r5,0(r16)
   29d8c:	213fffc4 	addi	r4,r4,-1
   29d90:	81000215 	stw	r4,8(r16)
   29d94:	14c00005 	stb	r19,0(r2)
   29d98:	80800517 	ldw	r2,20(r16)
   29d9c:	10c01e26 	beq	r2,r3,29e18 <__swbuf_r+0x104>
   29da0:	8080030b 	ldhu	r2,12(r16)
   29da4:	1080004c 	andi	r2,r2,1
   29da8:	10000226 	beq	r2,zero,29db4 <__swbuf_r+0xa0>
   29dac:	00800284 	movi	r2,10
   29db0:	88801926 	beq	r17,r2,29e18 <__swbuf_r+0x104>
   29db4:	8805883a 	mov	r2,r17
   29db8:	dfc00417 	ldw	ra,16(sp)
   29dbc:	dcc00317 	ldw	r19,12(sp)
   29dc0:	dc800217 	ldw	r18,8(sp)
   29dc4:	dc400117 	ldw	r17,4(sp)
   29dc8:	dc000017 	ldw	r16,0(sp)
   29dcc:	dec00504 	addi	sp,sp,20
   29dd0:	f800283a 	ret
   29dd4:	81401917 	ldw	r5,100(r16)
   29dd8:	00b7ffc4 	movi	r2,-8193
   29ddc:	21080014 	ori	r4,r4,8192
   29de0:	2884703a 	and	r2,r5,r2
   29de4:	80801915 	stw	r2,100(r16)
   29de8:	80800017 	ldw	r2,0(r16)
   29dec:	8100030d 	sth	r4,12(r16)
   29df0:	81000517 	ldw	r4,20(r16)
   29df4:	10c7c83a 	sub	r3,r2,r3
   29df8:	193fe016 	blt	r3,r4,29d7c <__alt_data_end+0xfffe9d7c>
   29dfc:	800b883a 	mov	r5,r16
   29e00:	9009883a 	mov	r4,r18
   29e04:	00249000 	call	24900 <_fflush_r>
   29e08:	1000071e 	bne	r2,zero,29e28 <__swbuf_r+0x114>
   29e0c:	80800017 	ldw	r2,0(r16)
   29e10:	00c00044 	movi	r3,1
   29e14:	003fda06 	br	29d80 <__alt_data_end+0xfffe9d80>
   29e18:	800b883a 	mov	r5,r16
   29e1c:	9009883a 	mov	r4,r18
   29e20:	00249000 	call	24900 <_fflush_r>
   29e24:	103fe326 	beq	r2,zero,29db4 <__alt_data_end+0xfffe9db4>
   29e28:	00bfffc4 	movi	r2,-1
   29e2c:	003fe206 	br	29db8 <__alt_data_end+0xfffe9db8>
   29e30:	800b883a 	mov	r5,r16
   29e34:	9009883a 	mov	r4,r18
   29e38:	0022ce00 	call	22ce0 <__swsetup_r>
   29e3c:	103ffa1e 	bne	r2,zero,29e28 <__alt_data_end+0xfffe9e28>
   29e40:	8100030b 	ldhu	r4,12(r16)
   29e44:	80c00417 	ldw	r3,16(r16)
   29e48:	003fc506 	br	29d60 <__alt_data_end+0xfffe9d60>
   29e4c:	0024cec0 	call	24cec <__sinit>
   29e50:	003fbc06 	br	29d44 <__alt_data_end+0xfffe9d44>

00029e54 <__swbuf>:
   29e54:	008000f4 	movhi	r2,3
   29e58:	1091bf04 	addi	r2,r2,18172
   29e5c:	280d883a 	mov	r6,r5
   29e60:	200b883a 	mov	r5,r4
   29e64:	11000017 	ldw	r4,0(r2)
   29e68:	0029d141 	jmpi	29d14 <__swbuf_r>

00029e6c <_wcrtomb_r>:
   29e6c:	defff604 	addi	sp,sp,-40
   29e70:	008000f4 	movhi	r2,3
   29e74:	dc800815 	stw	r18,32(sp)
   29e78:	dc400715 	stw	r17,28(sp)
   29e7c:	dc000615 	stw	r16,24(sp)
   29e80:	1091c304 	addi	r2,r2,18188
   29e84:	dfc00915 	stw	ra,36(sp)
   29e88:	2021883a 	mov	r16,r4
   29e8c:	3823883a 	mov	r17,r7
   29e90:	14800017 	ldw	r18,0(r2)
   29e94:	28001426 	beq	r5,zero,29ee8 <_wcrtomb_r+0x7c>
   29e98:	d9400415 	stw	r5,16(sp)
   29e9c:	d9800515 	stw	r6,20(sp)
   29ea0:	002583c0 	call	2583c <__locale_charset>
   29ea4:	d9800517 	ldw	r6,20(sp)
   29ea8:	d9400417 	ldw	r5,16(sp)
   29eac:	100f883a 	mov	r7,r2
   29eb0:	dc400015 	stw	r17,0(sp)
   29eb4:	8009883a 	mov	r4,r16
   29eb8:	903ee83a 	callr	r18
   29ebc:	00ffffc4 	movi	r3,-1
   29ec0:	10c0031e 	bne	r2,r3,29ed0 <_wcrtomb_r+0x64>
   29ec4:	88000015 	stw	zero,0(r17)
   29ec8:	00c02284 	movi	r3,138
   29ecc:	80c00015 	stw	r3,0(r16)
   29ed0:	dfc00917 	ldw	ra,36(sp)
   29ed4:	dc800817 	ldw	r18,32(sp)
   29ed8:	dc400717 	ldw	r17,28(sp)
   29edc:	dc000617 	ldw	r16,24(sp)
   29ee0:	dec00a04 	addi	sp,sp,40
   29ee4:	f800283a 	ret
   29ee8:	002583c0 	call	2583c <__locale_charset>
   29eec:	100f883a 	mov	r7,r2
   29ef0:	dc400015 	stw	r17,0(sp)
   29ef4:	000d883a 	mov	r6,zero
   29ef8:	d9400104 	addi	r5,sp,4
   29efc:	8009883a 	mov	r4,r16
   29f00:	903ee83a 	callr	r18
   29f04:	003fed06 	br	29ebc <__alt_data_end+0xfffe9ebc>

00029f08 <wcrtomb>:
   29f08:	defff604 	addi	sp,sp,-40
   29f0c:	008000f4 	movhi	r2,3
   29f10:	dc800615 	stw	r18,24(sp)
   29f14:	dc400515 	stw	r17,20(sp)
   29f18:	1091bf04 	addi	r2,r2,18172
   29f1c:	dfc00915 	stw	ra,36(sp)
   29f20:	dd000815 	stw	r20,32(sp)
   29f24:	dcc00715 	stw	r19,28(sp)
   29f28:	dc000415 	stw	r16,16(sp)
   29f2c:	3025883a 	mov	r18,r6
   29f30:	14400017 	ldw	r17,0(r2)
   29f34:	20001926 	beq	r4,zero,29f9c <wcrtomb+0x94>
   29f38:	008000f4 	movhi	r2,3
   29f3c:	1091c304 	addi	r2,r2,18188
   29f40:	15000017 	ldw	r20,0(r2)
   29f44:	2021883a 	mov	r16,r4
   29f48:	2827883a 	mov	r19,r5
   29f4c:	002583c0 	call	2583c <__locale_charset>
   29f50:	100f883a 	mov	r7,r2
   29f54:	dc800015 	stw	r18,0(sp)
   29f58:	980d883a 	mov	r6,r19
   29f5c:	800b883a 	mov	r5,r16
   29f60:	8809883a 	mov	r4,r17
   29f64:	a03ee83a 	callr	r20
   29f68:	00ffffc4 	movi	r3,-1
   29f6c:	10c0031e 	bne	r2,r3,29f7c <wcrtomb+0x74>
   29f70:	90000015 	stw	zero,0(r18)
   29f74:	00c02284 	movi	r3,138
   29f78:	88c00015 	stw	r3,0(r17)
   29f7c:	dfc00917 	ldw	ra,36(sp)
   29f80:	dd000817 	ldw	r20,32(sp)
   29f84:	dcc00717 	ldw	r19,28(sp)
   29f88:	dc800617 	ldw	r18,24(sp)
   29f8c:	dc400517 	ldw	r17,20(sp)
   29f90:	dc000417 	ldw	r16,16(sp)
   29f94:	dec00a04 	addi	sp,sp,40
   29f98:	f800283a 	ret
   29f9c:	008000f4 	movhi	r2,3
   29fa0:	1091c304 	addi	r2,r2,18188
   29fa4:	14000017 	ldw	r16,0(r2)
   29fa8:	002583c0 	call	2583c <__locale_charset>
   29fac:	100f883a 	mov	r7,r2
   29fb0:	dc800015 	stw	r18,0(sp)
   29fb4:	000d883a 	mov	r6,zero
   29fb8:	d9400104 	addi	r5,sp,4
   29fbc:	8809883a 	mov	r4,r17
   29fc0:	803ee83a 	callr	r16
   29fc4:	003fe806 	br	29f68 <__alt_data_end+0xfffe9f68>

00029fc8 <__ascii_wctomb>:
   29fc8:	28000526 	beq	r5,zero,29fe0 <__ascii_wctomb+0x18>
   29fcc:	00803fc4 	movi	r2,255
   29fd0:	11800536 	bltu	r2,r6,29fe8 <__ascii_wctomb+0x20>
   29fd4:	29800005 	stb	r6,0(r5)
   29fd8:	00800044 	movi	r2,1
   29fdc:	f800283a 	ret
   29fe0:	0005883a 	mov	r2,zero
   29fe4:	f800283a 	ret
   29fe8:	00802284 	movi	r2,138
   29fec:	20800015 	stw	r2,0(r4)
   29ff0:	00bfffc4 	movi	r2,-1
   29ff4:	f800283a 	ret

00029ff8 <_wctomb_r>:
   29ff8:	008000f4 	movhi	r2,3
   29ffc:	defff904 	addi	sp,sp,-28
   2a000:	1091c304 	addi	r2,r2,18188
   2a004:	dfc00615 	stw	ra,24(sp)
   2a008:	dc400515 	stw	r17,20(sp)
   2a00c:	dc000415 	stw	r16,16(sp)
   2a010:	3823883a 	mov	r17,r7
   2a014:	14000017 	ldw	r16,0(r2)
   2a018:	d9000115 	stw	r4,4(sp)
   2a01c:	d9400215 	stw	r5,8(sp)
   2a020:	d9800315 	stw	r6,12(sp)
   2a024:	002583c0 	call	2583c <__locale_charset>
   2a028:	d9800317 	ldw	r6,12(sp)
   2a02c:	d9400217 	ldw	r5,8(sp)
   2a030:	d9000117 	ldw	r4,4(sp)
   2a034:	100f883a 	mov	r7,r2
   2a038:	dc400015 	stw	r17,0(sp)
   2a03c:	803ee83a 	callr	r16
   2a040:	dfc00617 	ldw	ra,24(sp)
   2a044:	dc400517 	ldw	r17,20(sp)
   2a048:	dc000417 	ldw	r16,16(sp)
   2a04c:	dec00704 	addi	sp,sp,28
   2a050:	f800283a 	ret

0002a054 <__udivdi3>:
   2a054:	defff404 	addi	sp,sp,-48
   2a058:	dcc00515 	stw	r19,20(sp)
   2a05c:	dc000215 	stw	r16,8(sp)
   2a060:	dfc00b15 	stw	ra,44(sp)
   2a064:	df000a15 	stw	fp,40(sp)
   2a068:	ddc00915 	stw	r23,36(sp)
   2a06c:	dd800815 	stw	r22,32(sp)
   2a070:	dd400715 	stw	r21,28(sp)
   2a074:	dd000615 	stw	r20,24(sp)
   2a078:	dc800415 	stw	r18,16(sp)
   2a07c:	dc400315 	stw	r17,12(sp)
   2a080:	2027883a 	mov	r19,r4
   2a084:	2821883a 	mov	r16,r5
   2a088:	3800461e 	bne	r7,zero,2a1a4 <__udivdi3+0x150>
   2a08c:	3023883a 	mov	r17,r6
   2a090:	2025883a 	mov	r18,r4
   2a094:	2980572e 	bgeu	r5,r6,2a1f4 <__udivdi3+0x1a0>
   2a098:	00bfffd4 	movui	r2,65535
   2a09c:	282d883a 	mov	r22,r5
   2a0a0:	1180b236 	bltu	r2,r6,2a36c <__udivdi3+0x318>
   2a0a4:	00803fc4 	movi	r2,255
   2a0a8:	1185803a 	cmpltu	r2,r2,r6
   2a0ac:	100490fa 	slli	r2,r2,3
   2a0b0:	3086d83a 	srl	r3,r6,r2
   2a0b4:	010000f4 	movhi	r4,3
   2a0b8:	210a7d04 	addi	r4,r4,10740
   2a0bc:	20c7883a 	add	r3,r4,r3
   2a0c0:	18c00003 	ldbu	r3,0(r3)
   2a0c4:	1885883a 	add	r2,r3,r2
   2a0c8:	00c00804 	movi	r3,32
   2a0cc:	1887c83a 	sub	r3,r3,r2
   2a0d0:	18000526 	beq	r3,zero,2a0e8 <__udivdi3+0x94>
   2a0d4:	80e0983a 	sll	r16,r16,r3
   2a0d8:	9884d83a 	srl	r2,r19,r2
   2a0dc:	30e2983a 	sll	r17,r6,r3
   2a0e0:	98e4983a 	sll	r18,r19,r3
   2a0e4:	142cb03a 	or	r22,r2,r16
   2a0e8:	882ad43a 	srli	r21,r17,16
   2a0ec:	b009883a 	mov	r4,r22
   2a0f0:	8d3fffcc 	andi	r20,r17,65535
   2a0f4:	a80b883a 	mov	r5,r21
   2a0f8:	002ad700 	call	2ad70 <__umodsi3>
   2a0fc:	b009883a 	mov	r4,r22
   2a100:	a80b883a 	mov	r5,r21
   2a104:	1027883a 	mov	r19,r2
   2a108:	002ad0c0 	call	2ad0c <__udivsi3>
   2a10c:	100b883a 	mov	r5,r2
   2a110:	a009883a 	mov	r4,r20
   2a114:	102d883a 	mov	r22,r2
   2a118:	002adc80 	call	2adc8 <__mulsi3>
   2a11c:	9826943a 	slli	r19,r19,16
   2a120:	9006d43a 	srli	r3,r18,16
   2a124:	1cc6b03a 	or	r3,r3,r19
   2a128:	1880052e 	bgeu	r3,r2,2a140 <__udivdi3+0xec>
   2a12c:	1c47883a 	add	r3,r3,r17
   2a130:	b13fffc4 	addi	r4,r22,-1
   2a134:	1c400136 	bltu	r3,r17,2a13c <__udivdi3+0xe8>
   2a138:	18814236 	bltu	r3,r2,2a644 <__udivdi3+0x5f0>
   2a13c:	202d883a 	mov	r22,r4
   2a140:	18a1c83a 	sub	r16,r3,r2
   2a144:	8009883a 	mov	r4,r16
   2a148:	a80b883a 	mov	r5,r21
   2a14c:	002ad700 	call	2ad70 <__umodsi3>
   2a150:	1027883a 	mov	r19,r2
   2a154:	8009883a 	mov	r4,r16
   2a158:	a80b883a 	mov	r5,r21
   2a15c:	9826943a 	slli	r19,r19,16
   2a160:	002ad0c0 	call	2ad0c <__udivsi3>
   2a164:	100b883a 	mov	r5,r2
   2a168:	a009883a 	mov	r4,r20
   2a16c:	94bfffcc 	andi	r18,r18,65535
   2a170:	1021883a 	mov	r16,r2
   2a174:	94e4b03a 	or	r18,r18,r19
   2a178:	002adc80 	call	2adc8 <__mulsi3>
   2a17c:	9080052e 	bgeu	r18,r2,2a194 <__udivdi3+0x140>
   2a180:	8ca5883a 	add	r18,r17,r18
   2a184:	80ffffc4 	addi	r3,r16,-1
   2a188:	94410c36 	bltu	r18,r17,2a5bc <__udivdi3+0x568>
   2a18c:	90810b2e 	bgeu	r18,r2,2a5bc <__udivdi3+0x568>
   2a190:	843fff84 	addi	r16,r16,-2
   2a194:	b004943a 	slli	r2,r22,16
   2a198:	0007883a 	mov	r3,zero
   2a19c:	1404b03a 	or	r2,r2,r16
   2a1a0:	00005e06 	br	2a31c <__udivdi3+0x2c8>
   2a1a4:	29c05b36 	bltu	r5,r7,2a314 <__udivdi3+0x2c0>
   2a1a8:	00bfffd4 	movui	r2,65535
   2a1ac:	11c0672e 	bgeu	r2,r7,2a34c <__udivdi3+0x2f8>
   2a1b0:	00804034 	movhi	r2,256
   2a1b4:	10bfffc4 	addi	r2,r2,-1
   2a1b8:	11c10a36 	bltu	r2,r7,2a5e4 <__udivdi3+0x590>
   2a1bc:	00800404 	movi	r2,16
   2a1c0:	3886d83a 	srl	r3,r7,r2
   2a1c4:	010000f4 	movhi	r4,3
   2a1c8:	210a7d04 	addi	r4,r4,10740
   2a1cc:	20c7883a 	add	r3,r4,r3
   2a1d0:	18c00003 	ldbu	r3,0(r3)
   2a1d4:	05c00804 	movi	r23,32
   2a1d8:	1885883a 	add	r2,r3,r2
   2a1dc:	b8afc83a 	sub	r23,r23,r2
   2a1e0:	b800671e 	bne	r23,zero,2a380 <__udivdi3+0x32c>
   2a1e4:	3c010536 	bltu	r7,r16,2a5fc <__udivdi3+0x5a8>
   2a1e8:	9985403a 	cmpgeu	r2,r19,r6
   2a1ec:	0007883a 	mov	r3,zero
   2a1f0:	00004a06 	br	2a31c <__udivdi3+0x2c8>
   2a1f4:	3000041e 	bne	r6,zero,2a208 <__udivdi3+0x1b4>
   2a1f8:	000b883a 	mov	r5,zero
   2a1fc:	01000044 	movi	r4,1
   2a200:	002ad0c0 	call	2ad0c <__udivsi3>
   2a204:	1023883a 	mov	r17,r2
   2a208:	00bfffd4 	movui	r2,65535
   2a20c:	1440532e 	bgeu	r2,r17,2a35c <__udivdi3+0x308>
   2a210:	00804034 	movhi	r2,256
   2a214:	10bfffc4 	addi	r2,r2,-1
   2a218:	1440f436 	bltu	r2,r17,2a5ec <__udivdi3+0x598>
   2a21c:	00800404 	movi	r2,16
   2a220:	8886d83a 	srl	r3,r17,r2
   2a224:	010000f4 	movhi	r4,3
   2a228:	210a7d04 	addi	r4,r4,10740
   2a22c:	20c7883a 	add	r3,r4,r3
   2a230:	18c00003 	ldbu	r3,0(r3)
   2a234:	1885883a 	add	r2,r3,r2
   2a238:	00c00804 	movi	r3,32
   2a23c:	1887c83a 	sub	r3,r3,r2
   2a240:	1800a51e 	bne	r3,zero,2a4d8 <__udivdi3+0x484>
   2a244:	882ad43a 	srli	r21,r17,16
   2a248:	8461c83a 	sub	r16,r16,r17
   2a24c:	8d3fffcc 	andi	r20,r17,65535
   2a250:	00c00044 	movi	r3,1
   2a254:	a80b883a 	mov	r5,r21
   2a258:	8009883a 	mov	r4,r16
   2a25c:	d8c00115 	stw	r3,4(sp)
   2a260:	002ad700 	call	2ad70 <__umodsi3>
   2a264:	a80b883a 	mov	r5,r21
   2a268:	8009883a 	mov	r4,r16
   2a26c:	1027883a 	mov	r19,r2
   2a270:	002ad0c0 	call	2ad0c <__udivsi3>
   2a274:	a00b883a 	mov	r5,r20
   2a278:	1009883a 	mov	r4,r2
   2a27c:	102d883a 	mov	r22,r2
   2a280:	002adc80 	call	2adc8 <__mulsi3>
   2a284:	9826943a 	slli	r19,r19,16
   2a288:	900ed43a 	srli	r7,r18,16
   2a28c:	d8c00117 	ldw	r3,4(sp)
   2a290:	3cceb03a 	or	r7,r7,r19
   2a294:	3880052e 	bgeu	r7,r2,2a2ac <__udivdi3+0x258>
   2a298:	3c4f883a 	add	r7,r7,r17
   2a29c:	b13fffc4 	addi	r4,r22,-1
   2a2a0:	3c400136 	bltu	r7,r17,2a2a8 <__udivdi3+0x254>
   2a2a4:	3880e436 	bltu	r7,r2,2a638 <__udivdi3+0x5e4>
   2a2a8:	202d883a 	mov	r22,r4
   2a2ac:	38a1c83a 	sub	r16,r7,r2
   2a2b0:	8009883a 	mov	r4,r16
   2a2b4:	a80b883a 	mov	r5,r21
   2a2b8:	d8c00115 	stw	r3,4(sp)
   2a2bc:	002ad700 	call	2ad70 <__umodsi3>
   2a2c0:	1027883a 	mov	r19,r2
   2a2c4:	8009883a 	mov	r4,r16
   2a2c8:	a80b883a 	mov	r5,r21
   2a2cc:	9826943a 	slli	r19,r19,16
   2a2d0:	002ad0c0 	call	2ad0c <__udivsi3>
   2a2d4:	a00b883a 	mov	r5,r20
   2a2d8:	1009883a 	mov	r4,r2
   2a2dc:	94bfffcc 	andi	r18,r18,65535
   2a2e0:	1021883a 	mov	r16,r2
   2a2e4:	94e4b03a 	or	r18,r18,r19
   2a2e8:	002adc80 	call	2adc8 <__mulsi3>
   2a2ec:	d8c00117 	ldw	r3,4(sp)
   2a2f0:	9080052e 	bgeu	r18,r2,2a308 <__udivdi3+0x2b4>
   2a2f4:	8ca5883a 	add	r18,r17,r18
   2a2f8:	813fffc4 	addi	r4,r16,-1
   2a2fc:	9440ad36 	bltu	r18,r17,2a5b4 <__udivdi3+0x560>
   2a300:	9080ac2e 	bgeu	r18,r2,2a5b4 <__udivdi3+0x560>
   2a304:	843fff84 	addi	r16,r16,-2
   2a308:	b004943a 	slli	r2,r22,16
   2a30c:	1404b03a 	or	r2,r2,r16
   2a310:	00000206 	br	2a31c <__udivdi3+0x2c8>
   2a314:	0007883a 	mov	r3,zero
   2a318:	0005883a 	mov	r2,zero
   2a31c:	dfc00b17 	ldw	ra,44(sp)
   2a320:	df000a17 	ldw	fp,40(sp)
   2a324:	ddc00917 	ldw	r23,36(sp)
   2a328:	dd800817 	ldw	r22,32(sp)
   2a32c:	dd400717 	ldw	r21,28(sp)
   2a330:	dd000617 	ldw	r20,24(sp)
   2a334:	dcc00517 	ldw	r19,20(sp)
   2a338:	dc800417 	ldw	r18,16(sp)
   2a33c:	dc400317 	ldw	r17,12(sp)
   2a340:	dc000217 	ldw	r16,8(sp)
   2a344:	dec00c04 	addi	sp,sp,48
   2a348:	f800283a 	ret
   2a34c:	00803fc4 	movi	r2,255
   2a350:	11c5803a 	cmpltu	r2,r2,r7
   2a354:	100490fa 	slli	r2,r2,3
   2a358:	003f9906 	br	2a1c0 <__alt_data_end+0xfffea1c0>
   2a35c:	00803fc4 	movi	r2,255
   2a360:	1445803a 	cmpltu	r2,r2,r17
   2a364:	100490fa 	slli	r2,r2,3
   2a368:	003fad06 	br	2a220 <__alt_data_end+0xfffea220>
   2a36c:	00804034 	movhi	r2,256
   2a370:	10bfffc4 	addi	r2,r2,-1
   2a374:	11809f36 	bltu	r2,r6,2a5f4 <__udivdi3+0x5a0>
   2a378:	00800404 	movi	r2,16
   2a37c:	003f4c06 	br	2a0b0 <__alt_data_end+0xfffea0b0>
   2a380:	3dce983a 	sll	r7,r7,r23
   2a384:	30b8d83a 	srl	fp,r6,r2
   2a388:	80a2d83a 	srl	r17,r16,r2
   2a38c:	35cc983a 	sll	r6,r6,r23
   2a390:	3f38b03a 	or	fp,r7,fp
   2a394:	e024d43a 	srli	r18,fp,16
   2a398:	9884d83a 	srl	r2,r19,r2
   2a39c:	85e0983a 	sll	r16,r16,r23
   2a3a0:	8809883a 	mov	r4,r17
   2a3a4:	900b883a 	mov	r5,r18
   2a3a8:	d9800015 	stw	r6,0(sp)
   2a3ac:	1420b03a 	or	r16,r2,r16
   2a3b0:	002ad700 	call	2ad70 <__umodsi3>
   2a3b4:	900b883a 	mov	r5,r18
   2a3b8:	8809883a 	mov	r4,r17
   2a3bc:	1029883a 	mov	r20,r2
   2a3c0:	e5bfffcc 	andi	r22,fp,65535
   2a3c4:	002ad0c0 	call	2ad0c <__udivsi3>
   2a3c8:	100b883a 	mov	r5,r2
   2a3cc:	b009883a 	mov	r4,r22
   2a3d0:	102b883a 	mov	r21,r2
   2a3d4:	002adc80 	call	2adc8 <__mulsi3>
   2a3d8:	a028943a 	slli	r20,r20,16
   2a3dc:	8006d43a 	srli	r3,r16,16
   2a3e0:	1d06b03a 	or	r3,r3,r20
   2a3e4:	1880042e 	bgeu	r3,r2,2a3f8 <__udivdi3+0x3a4>
   2a3e8:	1f07883a 	add	r3,r3,fp
   2a3ec:	a93fffc4 	addi	r4,r21,-1
   2a3f0:	1f00892e 	bgeu	r3,fp,2a618 <__udivdi3+0x5c4>
   2a3f4:	202b883a 	mov	r21,r4
   2a3f8:	18a3c83a 	sub	r17,r3,r2
   2a3fc:	8809883a 	mov	r4,r17
   2a400:	900b883a 	mov	r5,r18
   2a404:	002ad700 	call	2ad70 <__umodsi3>
   2a408:	1029883a 	mov	r20,r2
   2a40c:	8809883a 	mov	r4,r17
   2a410:	900b883a 	mov	r5,r18
   2a414:	a028943a 	slli	r20,r20,16
   2a418:	002ad0c0 	call	2ad0c <__udivsi3>
   2a41c:	100b883a 	mov	r5,r2
   2a420:	b009883a 	mov	r4,r22
   2a424:	843fffcc 	andi	r16,r16,65535
   2a428:	1023883a 	mov	r17,r2
   2a42c:	8520b03a 	or	r16,r16,r20
   2a430:	002adc80 	call	2adc8 <__mulsi3>
   2a434:	8080042e 	bgeu	r16,r2,2a448 <__udivdi3+0x3f4>
   2a438:	8721883a 	add	r16,r16,fp
   2a43c:	88ffffc4 	addi	r3,r17,-1
   2a440:	8700712e 	bgeu	r16,fp,2a608 <__udivdi3+0x5b4>
   2a444:	1823883a 	mov	r17,r3
   2a448:	a80e943a 	slli	r7,r21,16
   2a44c:	d8c00017 	ldw	r3,0(sp)
   2a450:	80a1c83a 	sub	r16,r16,r2
   2a454:	3c64b03a 	or	r18,r7,r17
   2a458:	1d3fffcc 	andi	r20,r3,65535
   2a45c:	9022d43a 	srli	r17,r18,16
   2a460:	95bfffcc 	andi	r22,r18,65535
   2a464:	a00b883a 	mov	r5,r20
   2a468:	b009883a 	mov	r4,r22
   2a46c:	182ad43a 	srli	r21,r3,16
   2a470:	002adc80 	call	2adc8 <__mulsi3>
   2a474:	a00b883a 	mov	r5,r20
   2a478:	8809883a 	mov	r4,r17
   2a47c:	1039883a 	mov	fp,r2
   2a480:	002adc80 	call	2adc8 <__mulsi3>
   2a484:	8809883a 	mov	r4,r17
   2a488:	a80b883a 	mov	r5,r21
   2a48c:	1029883a 	mov	r20,r2
   2a490:	002adc80 	call	2adc8 <__mulsi3>
   2a494:	a80b883a 	mov	r5,r21
   2a498:	b009883a 	mov	r4,r22
   2a49c:	1023883a 	mov	r17,r2
   2a4a0:	002adc80 	call	2adc8 <__mulsi3>
   2a4a4:	e006d43a 	srli	r3,fp,16
   2a4a8:	1505883a 	add	r2,r2,r20
   2a4ac:	1887883a 	add	r3,r3,r2
   2a4b0:	1d00022e 	bgeu	r3,r20,2a4bc <__udivdi3+0x468>
   2a4b4:	00800074 	movhi	r2,1
   2a4b8:	88a3883a 	add	r17,r17,r2
   2a4bc:	1804d43a 	srli	r2,r3,16
   2a4c0:	1463883a 	add	r17,r2,r17
   2a4c4:	84404436 	bltu	r16,r17,2a5d8 <__udivdi3+0x584>
   2a4c8:	84403e26 	beq	r16,r17,2a5c4 <__udivdi3+0x570>
   2a4cc:	9005883a 	mov	r2,r18
   2a4d0:	0007883a 	mov	r3,zero
   2a4d4:	003f9106 	br	2a31c <__alt_data_end+0xfffea31c>
   2a4d8:	88e2983a 	sll	r17,r17,r3
   2a4dc:	80aed83a 	srl	r23,r16,r2
   2a4e0:	80e0983a 	sll	r16,r16,r3
   2a4e4:	882ad43a 	srli	r21,r17,16
   2a4e8:	9884d83a 	srl	r2,r19,r2
   2a4ec:	b809883a 	mov	r4,r23
   2a4f0:	a80b883a 	mov	r5,r21
   2a4f4:	98e4983a 	sll	r18,r19,r3
   2a4f8:	142cb03a 	or	r22,r2,r16
   2a4fc:	002ad700 	call	2ad70 <__umodsi3>
   2a500:	b809883a 	mov	r4,r23
   2a504:	a80b883a 	mov	r5,r21
   2a508:	1027883a 	mov	r19,r2
   2a50c:	8d3fffcc 	andi	r20,r17,65535
   2a510:	002ad0c0 	call	2ad0c <__udivsi3>
   2a514:	a009883a 	mov	r4,r20
   2a518:	100b883a 	mov	r5,r2
   2a51c:	102f883a 	mov	r23,r2
   2a520:	002adc80 	call	2adc8 <__mulsi3>
   2a524:	9826943a 	slli	r19,r19,16
   2a528:	b008d43a 	srli	r4,r22,16
   2a52c:	24c8b03a 	or	r4,r4,r19
   2a530:	2080062e 	bgeu	r4,r2,2a54c <__udivdi3+0x4f8>
   2a534:	2449883a 	add	r4,r4,r17
   2a538:	b8ffffc4 	addi	r3,r23,-1
   2a53c:	24403c36 	bltu	r4,r17,2a630 <__udivdi3+0x5dc>
   2a540:	20803b2e 	bgeu	r4,r2,2a630 <__udivdi3+0x5dc>
   2a544:	bdffff84 	addi	r23,r23,-2
   2a548:	2449883a 	add	r4,r4,r17
   2a54c:	20a1c83a 	sub	r16,r4,r2
   2a550:	a80b883a 	mov	r5,r21
   2a554:	8009883a 	mov	r4,r16
   2a558:	002ad700 	call	2ad70 <__umodsi3>
   2a55c:	a80b883a 	mov	r5,r21
   2a560:	8009883a 	mov	r4,r16
   2a564:	1027883a 	mov	r19,r2
   2a568:	002ad0c0 	call	2ad0c <__udivsi3>
   2a56c:	a009883a 	mov	r4,r20
   2a570:	100b883a 	mov	r5,r2
   2a574:	9826943a 	slli	r19,r19,16
   2a578:	1039883a 	mov	fp,r2
   2a57c:	002adc80 	call	2adc8 <__mulsi3>
   2a580:	b13fffcc 	andi	r4,r22,65535
   2a584:	24c8b03a 	or	r4,r4,r19
   2a588:	2080062e 	bgeu	r4,r2,2a5a4 <__udivdi3+0x550>
   2a58c:	2449883a 	add	r4,r4,r17
   2a590:	e0ffffc4 	addi	r3,fp,-1
   2a594:	24402436 	bltu	r4,r17,2a628 <__udivdi3+0x5d4>
   2a598:	2080232e 	bgeu	r4,r2,2a628 <__udivdi3+0x5d4>
   2a59c:	e73fff84 	addi	fp,fp,-2
   2a5a0:	2449883a 	add	r4,r4,r17
   2a5a4:	b82e943a 	slli	r23,r23,16
   2a5a8:	20a1c83a 	sub	r16,r4,r2
   2a5ac:	bf06b03a 	or	r3,r23,fp
   2a5b0:	003f2806 	br	2a254 <__alt_data_end+0xfffea254>
   2a5b4:	2021883a 	mov	r16,r4
   2a5b8:	003f5306 	br	2a308 <__alt_data_end+0xfffea308>
   2a5bc:	1821883a 	mov	r16,r3
   2a5c0:	003ef406 	br	2a194 <__alt_data_end+0xfffea194>
   2a5c4:	1806943a 	slli	r3,r3,16
   2a5c8:	9de6983a 	sll	r19,r19,r23
   2a5cc:	e73fffcc 	andi	fp,fp,65535
   2a5d0:	1f07883a 	add	r3,r3,fp
   2a5d4:	98ffbd2e 	bgeu	r19,r3,2a4cc <__alt_data_end+0xfffea4cc>
   2a5d8:	90bfffc4 	addi	r2,r18,-1
   2a5dc:	0007883a 	mov	r3,zero
   2a5e0:	003f4e06 	br	2a31c <__alt_data_end+0xfffea31c>
   2a5e4:	00800604 	movi	r2,24
   2a5e8:	003ef506 	br	2a1c0 <__alt_data_end+0xfffea1c0>
   2a5ec:	00800604 	movi	r2,24
   2a5f0:	003f0b06 	br	2a220 <__alt_data_end+0xfffea220>
   2a5f4:	00800604 	movi	r2,24
   2a5f8:	003ead06 	br	2a0b0 <__alt_data_end+0xfffea0b0>
   2a5fc:	0007883a 	mov	r3,zero
   2a600:	00800044 	movi	r2,1
   2a604:	003f4506 	br	2a31c <__alt_data_end+0xfffea31c>
   2a608:	80bf8e2e 	bgeu	r16,r2,2a444 <__alt_data_end+0xfffea444>
   2a60c:	8c7fff84 	addi	r17,r17,-2
   2a610:	8721883a 	add	r16,r16,fp
   2a614:	003f8c06 	br	2a448 <__alt_data_end+0xfffea448>
   2a618:	18bf762e 	bgeu	r3,r2,2a3f4 <__alt_data_end+0xfffea3f4>
   2a61c:	ad7fff84 	addi	r21,r21,-2
   2a620:	1f07883a 	add	r3,r3,fp
   2a624:	003f7406 	br	2a3f8 <__alt_data_end+0xfffea3f8>
   2a628:	1839883a 	mov	fp,r3
   2a62c:	003fdd06 	br	2a5a4 <__alt_data_end+0xfffea5a4>
   2a630:	182f883a 	mov	r23,r3
   2a634:	003fc506 	br	2a54c <__alt_data_end+0xfffea54c>
   2a638:	b5bfff84 	addi	r22,r22,-2
   2a63c:	3c4f883a 	add	r7,r7,r17
   2a640:	003f1a06 	br	2a2ac <__alt_data_end+0xfffea2ac>
   2a644:	b5bfff84 	addi	r22,r22,-2
   2a648:	1c47883a 	add	r3,r3,r17
   2a64c:	003ebc06 	br	2a140 <__alt_data_end+0xfffea140>

0002a650 <__umoddi3>:
   2a650:	defff304 	addi	sp,sp,-52
   2a654:	df000b15 	stw	fp,44(sp)
   2a658:	dc400415 	stw	r17,16(sp)
   2a65c:	dc000315 	stw	r16,12(sp)
   2a660:	dfc00c15 	stw	ra,48(sp)
   2a664:	ddc00a15 	stw	r23,40(sp)
   2a668:	dd800915 	stw	r22,36(sp)
   2a66c:	dd400815 	stw	r21,32(sp)
   2a670:	dd000715 	stw	r20,28(sp)
   2a674:	dcc00615 	stw	r19,24(sp)
   2a678:	dc800515 	stw	r18,20(sp)
   2a67c:	2021883a 	mov	r16,r4
   2a680:	2823883a 	mov	r17,r5
   2a684:	2839883a 	mov	fp,r5
   2a688:	3800401e 	bne	r7,zero,2a78c <__umoddi3+0x13c>
   2a68c:	3027883a 	mov	r19,r6
   2a690:	2029883a 	mov	r20,r4
   2a694:	2980552e 	bgeu	r5,r6,2a7ec <__umoddi3+0x19c>
   2a698:	00bfffd4 	movui	r2,65535
   2a69c:	1180a236 	bltu	r2,r6,2a928 <__umoddi3+0x2d8>
   2a6a0:	01003fc4 	movi	r4,255
   2a6a4:	2189803a 	cmpltu	r4,r4,r6
   2a6a8:	200890fa 	slli	r4,r4,3
   2a6ac:	3104d83a 	srl	r2,r6,r4
   2a6b0:	00c000f4 	movhi	r3,3
   2a6b4:	18ca7d04 	addi	r3,r3,10740
   2a6b8:	1885883a 	add	r2,r3,r2
   2a6bc:	10c00003 	ldbu	r3,0(r2)
   2a6c0:	00800804 	movi	r2,32
   2a6c4:	1909883a 	add	r4,r3,r4
   2a6c8:	1125c83a 	sub	r18,r2,r4
   2a6cc:	90000526 	beq	r18,zero,2a6e4 <__umoddi3+0x94>
   2a6d0:	8ca2983a 	sll	r17,r17,r18
   2a6d4:	8108d83a 	srl	r4,r16,r4
   2a6d8:	34a6983a 	sll	r19,r6,r18
   2a6dc:	84a8983a 	sll	r20,r16,r18
   2a6e0:	2478b03a 	or	fp,r4,r17
   2a6e4:	982cd43a 	srli	r22,r19,16
   2a6e8:	e009883a 	mov	r4,fp
   2a6ec:	9dffffcc 	andi	r23,r19,65535
   2a6f0:	b00b883a 	mov	r5,r22
   2a6f4:	002ad700 	call	2ad70 <__umodsi3>
   2a6f8:	b00b883a 	mov	r5,r22
   2a6fc:	e009883a 	mov	r4,fp
   2a700:	102b883a 	mov	r21,r2
   2a704:	002ad0c0 	call	2ad0c <__udivsi3>
   2a708:	100b883a 	mov	r5,r2
   2a70c:	b809883a 	mov	r4,r23
   2a710:	002adc80 	call	2adc8 <__mulsi3>
   2a714:	a82a943a 	slli	r21,r21,16
   2a718:	a006d43a 	srli	r3,r20,16
   2a71c:	1d46b03a 	or	r3,r3,r21
   2a720:	1880032e 	bgeu	r3,r2,2a730 <__umoddi3+0xe0>
   2a724:	1cc7883a 	add	r3,r3,r19
   2a728:	1cc00136 	bltu	r3,r19,2a730 <__umoddi3+0xe0>
   2a72c:	18813136 	bltu	r3,r2,2abf4 <__umoddi3+0x5a4>
   2a730:	18a1c83a 	sub	r16,r3,r2
   2a734:	b00b883a 	mov	r5,r22
   2a738:	8009883a 	mov	r4,r16
   2a73c:	002ad700 	call	2ad70 <__umodsi3>
   2a740:	b00b883a 	mov	r5,r22
   2a744:	8009883a 	mov	r4,r16
   2a748:	1023883a 	mov	r17,r2
   2a74c:	002ad0c0 	call	2ad0c <__udivsi3>
   2a750:	100b883a 	mov	r5,r2
   2a754:	b809883a 	mov	r4,r23
   2a758:	8822943a 	slli	r17,r17,16
   2a75c:	002adc80 	call	2adc8 <__mulsi3>
   2a760:	a0ffffcc 	andi	r3,r20,65535
   2a764:	1c46b03a 	or	r3,r3,r17
   2a768:	1880042e 	bgeu	r3,r2,2a77c <__umoddi3+0x12c>
   2a76c:	1cc7883a 	add	r3,r3,r19
   2a770:	1cc00236 	bltu	r3,r19,2a77c <__umoddi3+0x12c>
   2a774:	1880012e 	bgeu	r3,r2,2a77c <__umoddi3+0x12c>
   2a778:	1cc7883a 	add	r3,r3,r19
   2a77c:	1885c83a 	sub	r2,r3,r2
   2a780:	1484d83a 	srl	r2,r2,r18
   2a784:	0007883a 	mov	r3,zero
   2a788:	00005306 	br	2a8d8 <__umoddi3+0x288>
   2a78c:	29c05036 	bltu	r5,r7,2a8d0 <__umoddi3+0x280>
   2a790:	00bfffd4 	movui	r2,65535
   2a794:	11c05c2e 	bgeu	r2,r7,2a908 <__umoddi3+0x2b8>
   2a798:	00804034 	movhi	r2,256
   2a79c:	10bfffc4 	addi	r2,r2,-1
   2a7a0:	11c10636 	bltu	r2,r7,2abbc <__umoddi3+0x56c>
   2a7a4:	01000404 	movi	r4,16
   2a7a8:	3904d83a 	srl	r2,r7,r4
   2a7ac:	00c000f4 	movhi	r3,3
   2a7b0:	18ca7d04 	addi	r3,r3,10740
   2a7b4:	1885883a 	add	r2,r3,r2
   2a7b8:	14c00003 	ldbu	r19,0(r2)
   2a7bc:	00c00804 	movi	r3,32
   2a7c0:	9927883a 	add	r19,r19,r4
   2a7c4:	1ce9c83a 	sub	r20,r3,r19
   2a7c8:	a0005c1e 	bne	r20,zero,2a93c <__umoddi3+0x2ec>
   2a7cc:	3c400136 	bltu	r7,r17,2a7d4 <__umoddi3+0x184>
   2a7d0:	81810a36 	bltu	r16,r6,2abfc <__umoddi3+0x5ac>
   2a7d4:	8185c83a 	sub	r2,r16,r6
   2a7d8:	89e3c83a 	sub	r17,r17,r7
   2a7dc:	8089803a 	cmpltu	r4,r16,r2
   2a7e0:	8939c83a 	sub	fp,r17,r4
   2a7e4:	e007883a 	mov	r3,fp
   2a7e8:	00003b06 	br	2a8d8 <__umoddi3+0x288>
   2a7ec:	3000041e 	bne	r6,zero,2a800 <__umoddi3+0x1b0>
   2a7f0:	000b883a 	mov	r5,zero
   2a7f4:	01000044 	movi	r4,1
   2a7f8:	002ad0c0 	call	2ad0c <__udivsi3>
   2a7fc:	1027883a 	mov	r19,r2
   2a800:	00bfffd4 	movui	r2,65535
   2a804:	14c0442e 	bgeu	r2,r19,2a918 <__umoddi3+0x2c8>
   2a808:	00804034 	movhi	r2,256
   2a80c:	10bfffc4 	addi	r2,r2,-1
   2a810:	14c0ec36 	bltu	r2,r19,2abc4 <__umoddi3+0x574>
   2a814:	00800404 	movi	r2,16
   2a818:	9886d83a 	srl	r3,r19,r2
   2a81c:	010000f4 	movhi	r4,3
   2a820:	210a7d04 	addi	r4,r4,10740
   2a824:	20c7883a 	add	r3,r4,r3
   2a828:	18c00003 	ldbu	r3,0(r3)
   2a82c:	1887883a 	add	r3,r3,r2
   2a830:	00800804 	movi	r2,32
   2a834:	10e5c83a 	sub	r18,r2,r3
   2a838:	9000ab1e 	bne	r18,zero,2aae8 <__umoddi3+0x498>
   2a83c:	982cd43a 	srli	r22,r19,16
   2a840:	8ce3c83a 	sub	r17,r17,r19
   2a844:	9dffffcc 	andi	r23,r19,65535
   2a848:	b00b883a 	mov	r5,r22
   2a84c:	8809883a 	mov	r4,r17
   2a850:	002ad700 	call	2ad70 <__umodsi3>
   2a854:	b00b883a 	mov	r5,r22
   2a858:	8809883a 	mov	r4,r17
   2a85c:	102b883a 	mov	r21,r2
   2a860:	002ad0c0 	call	2ad0c <__udivsi3>
   2a864:	b80b883a 	mov	r5,r23
   2a868:	1009883a 	mov	r4,r2
   2a86c:	002adc80 	call	2adc8 <__mulsi3>
   2a870:	a82a943a 	slli	r21,r21,16
   2a874:	a006d43a 	srli	r3,r20,16
   2a878:	1d46b03a 	or	r3,r3,r21
   2a87c:	1880042e 	bgeu	r3,r2,2a890 <__umoddi3+0x240>
   2a880:	1cc7883a 	add	r3,r3,r19
   2a884:	1cc00236 	bltu	r3,r19,2a890 <__umoddi3+0x240>
   2a888:	1880012e 	bgeu	r3,r2,2a890 <__umoddi3+0x240>
   2a88c:	1cc7883a 	add	r3,r3,r19
   2a890:	18a1c83a 	sub	r16,r3,r2
   2a894:	b00b883a 	mov	r5,r22
   2a898:	8009883a 	mov	r4,r16
   2a89c:	002ad700 	call	2ad70 <__umodsi3>
   2a8a0:	1023883a 	mov	r17,r2
   2a8a4:	b00b883a 	mov	r5,r22
   2a8a8:	8009883a 	mov	r4,r16
   2a8ac:	002ad0c0 	call	2ad0c <__udivsi3>
   2a8b0:	8822943a 	slli	r17,r17,16
   2a8b4:	b80b883a 	mov	r5,r23
   2a8b8:	1009883a 	mov	r4,r2
   2a8bc:	002adc80 	call	2adc8 <__mulsi3>
   2a8c0:	a53fffcc 	andi	r20,r20,65535
   2a8c4:	a446b03a 	or	r3,r20,r17
   2a8c8:	18bfac2e 	bgeu	r3,r2,2a77c <__alt_data_end+0xfffea77c>
   2a8cc:	003fa706 	br	2a76c <__alt_data_end+0xfffea76c>
   2a8d0:	2005883a 	mov	r2,r4
   2a8d4:	2807883a 	mov	r3,r5
   2a8d8:	dfc00c17 	ldw	ra,48(sp)
   2a8dc:	df000b17 	ldw	fp,44(sp)
   2a8e0:	ddc00a17 	ldw	r23,40(sp)
   2a8e4:	dd800917 	ldw	r22,36(sp)
   2a8e8:	dd400817 	ldw	r21,32(sp)
   2a8ec:	dd000717 	ldw	r20,28(sp)
   2a8f0:	dcc00617 	ldw	r19,24(sp)
   2a8f4:	dc800517 	ldw	r18,20(sp)
   2a8f8:	dc400417 	ldw	r17,16(sp)
   2a8fc:	dc000317 	ldw	r16,12(sp)
   2a900:	dec00d04 	addi	sp,sp,52
   2a904:	f800283a 	ret
   2a908:	04c03fc4 	movi	r19,255
   2a90c:	99c9803a 	cmpltu	r4,r19,r7
   2a910:	200890fa 	slli	r4,r4,3
   2a914:	003fa406 	br	2a7a8 <__alt_data_end+0xfffea7a8>
   2a918:	00803fc4 	movi	r2,255
   2a91c:	14c5803a 	cmpltu	r2,r2,r19
   2a920:	100490fa 	slli	r2,r2,3
   2a924:	003fbc06 	br	2a818 <__alt_data_end+0xfffea818>
   2a928:	00804034 	movhi	r2,256
   2a92c:	10bfffc4 	addi	r2,r2,-1
   2a930:	1180a636 	bltu	r2,r6,2abcc <__umoddi3+0x57c>
   2a934:	01000404 	movi	r4,16
   2a938:	003f5c06 	br	2a6ac <__alt_data_end+0xfffea6ac>
   2a93c:	3d0e983a 	sll	r7,r7,r20
   2a940:	34ead83a 	srl	r21,r6,r19
   2a944:	8cc6d83a 	srl	r3,r17,r19
   2a948:	8d10983a 	sll	r8,r17,r20
   2a94c:	3d6ab03a 	or	r21,r7,r21
   2a950:	a82cd43a 	srli	r22,r21,16
   2a954:	84e2d83a 	srl	r17,r16,r19
   2a958:	1809883a 	mov	r4,r3
   2a95c:	b00b883a 	mov	r5,r22
   2a960:	8a22b03a 	or	r17,r17,r8
   2a964:	3524983a 	sll	r18,r6,r20
   2a968:	dc400015 	stw	r17,0(sp)
   2a96c:	d8c00115 	stw	r3,4(sp)
   2a970:	002ad700 	call	2ad70 <__umodsi3>
   2a974:	d8c00117 	ldw	r3,4(sp)
   2a978:	b00b883a 	mov	r5,r22
   2a97c:	1039883a 	mov	fp,r2
   2a980:	1809883a 	mov	r4,r3
   2a984:	002ad0c0 	call	2ad0c <__udivsi3>
   2a988:	adffffcc 	andi	r23,r21,65535
   2a98c:	100b883a 	mov	r5,r2
   2a990:	b809883a 	mov	r4,r23
   2a994:	1023883a 	mov	r17,r2
   2a998:	002adc80 	call	2adc8 <__mulsi3>
   2a99c:	d9400017 	ldw	r5,0(sp)
   2a9a0:	e008943a 	slli	r4,fp,16
   2a9a4:	8520983a 	sll	r16,r16,r20
   2a9a8:	2806d43a 	srli	r3,r5,16
   2a9ac:	1906b03a 	or	r3,r3,r4
   2a9b0:	1880042e 	bgeu	r3,r2,2a9c4 <__umoddi3+0x374>
   2a9b4:	1d47883a 	add	r3,r3,r21
   2a9b8:	893fffc4 	addi	r4,r17,-1
   2a9bc:	1d40892e 	bgeu	r3,r21,2abe4 <__umoddi3+0x594>
   2a9c0:	2023883a 	mov	r17,r4
   2a9c4:	18b9c83a 	sub	fp,r3,r2
   2a9c8:	b00b883a 	mov	r5,r22
   2a9cc:	e009883a 	mov	r4,fp
   2a9d0:	002ad700 	call	2ad70 <__umodsi3>
   2a9d4:	b00b883a 	mov	r5,r22
   2a9d8:	e009883a 	mov	r4,fp
   2a9dc:	d8800215 	stw	r2,8(sp)
   2a9e0:	002ad0c0 	call	2ad0c <__udivsi3>
   2a9e4:	100b883a 	mov	r5,r2
   2a9e8:	b809883a 	mov	r4,r23
   2a9ec:	102d883a 	mov	r22,r2
   2a9f0:	002adc80 	call	2adc8 <__mulsi3>
   2a9f4:	d9800217 	ldw	r6,8(sp)
   2a9f8:	d8c00017 	ldw	r3,0(sp)
   2a9fc:	300c943a 	slli	r6,r6,16
   2aa00:	1a3fffcc 	andi	r8,r3,65535
   2aa04:	4190b03a 	or	r8,r8,r6
   2aa08:	4080042e 	bgeu	r8,r2,2aa1c <__umoddi3+0x3cc>
   2aa0c:	4551883a 	add	r8,r8,r21
   2aa10:	b0ffffc4 	addi	r3,r22,-1
   2aa14:	45406f2e 	bgeu	r8,r21,2abd4 <__umoddi3+0x584>
   2aa18:	182d883a 	mov	r22,r3
   2aa1c:	880e943a 	slli	r7,r17,16
   2aa20:	9006d43a 	srli	r3,r18,16
   2aa24:	91bfffcc 	andi	r6,r18,65535
   2aa28:	3dacb03a 	or	r22,r7,r22
   2aa2c:	b02ed43a 	srli	r23,r22,16
   2aa30:	b5bfffcc 	andi	r22,r22,65535
   2aa34:	300b883a 	mov	r5,r6
   2aa38:	b009883a 	mov	r4,r22
   2aa3c:	40a3c83a 	sub	r17,r8,r2
   2aa40:	d8c00115 	stw	r3,4(sp)
   2aa44:	d9800215 	stw	r6,8(sp)
   2aa48:	002adc80 	call	2adc8 <__mulsi3>
   2aa4c:	d9800217 	ldw	r6,8(sp)
   2aa50:	b809883a 	mov	r4,r23
   2aa54:	1039883a 	mov	fp,r2
   2aa58:	300b883a 	mov	r5,r6
   2aa5c:	002adc80 	call	2adc8 <__mulsi3>
   2aa60:	d8c00117 	ldw	r3,4(sp)
   2aa64:	b809883a 	mov	r4,r23
   2aa68:	d8800215 	stw	r2,8(sp)
   2aa6c:	180b883a 	mov	r5,r3
   2aa70:	002adc80 	call	2adc8 <__mulsi3>
   2aa74:	d8c00117 	ldw	r3,4(sp)
   2aa78:	b009883a 	mov	r4,r22
   2aa7c:	102f883a 	mov	r23,r2
   2aa80:	180b883a 	mov	r5,r3
   2aa84:	002adc80 	call	2adc8 <__mulsi3>
   2aa88:	d9800217 	ldw	r6,8(sp)
   2aa8c:	e006d43a 	srli	r3,fp,16
   2aa90:	1185883a 	add	r2,r2,r6
   2aa94:	1885883a 	add	r2,r3,r2
   2aa98:	1180022e 	bgeu	r2,r6,2aaa4 <__umoddi3+0x454>
   2aa9c:	00c00074 	movhi	r3,1
   2aaa0:	b8ef883a 	add	r23,r23,r3
   2aaa4:	1006d43a 	srli	r3,r2,16
   2aaa8:	1004943a 	slli	r2,r2,16
   2aaac:	e73fffcc 	andi	fp,fp,65535
   2aab0:	1dc7883a 	add	r3,r3,r23
   2aab4:	1739883a 	add	fp,r2,fp
   2aab8:	88c03a36 	bltu	r17,r3,2aba4 <__umoddi3+0x554>
   2aabc:	88c05126 	beq	r17,r3,2ac04 <__umoddi3+0x5b4>
   2aac0:	88c9c83a 	sub	r4,r17,r3
   2aac4:	e00f883a 	mov	r7,fp
   2aac8:	81cfc83a 	sub	r7,r16,r7
   2aacc:	81c7803a 	cmpltu	r3,r16,r7
   2aad0:	20c7c83a 	sub	r3,r4,r3
   2aad4:	1cc4983a 	sll	r2,r3,r19
   2aad8:	3d0ed83a 	srl	r7,r7,r20
   2aadc:	1d06d83a 	srl	r3,r3,r20
   2aae0:	11c4b03a 	or	r2,r2,r7
   2aae4:	003f7c06 	br	2a8d8 <__alt_data_end+0xfffea8d8>
   2aae8:	9ca6983a 	sll	r19,r19,r18
   2aaec:	88f8d83a 	srl	fp,r17,r3
   2aaf0:	80c4d83a 	srl	r2,r16,r3
   2aaf4:	982cd43a 	srli	r22,r19,16
   2aaf8:	8ca2983a 	sll	r17,r17,r18
   2aafc:	e009883a 	mov	r4,fp
   2ab00:	b00b883a 	mov	r5,r22
   2ab04:	146ab03a 	or	r21,r2,r17
   2ab08:	002ad700 	call	2ad70 <__umodsi3>
   2ab0c:	b00b883a 	mov	r5,r22
   2ab10:	e009883a 	mov	r4,fp
   2ab14:	1029883a 	mov	r20,r2
   2ab18:	9dffffcc 	andi	r23,r19,65535
   2ab1c:	002ad0c0 	call	2ad0c <__udivsi3>
   2ab20:	b809883a 	mov	r4,r23
   2ab24:	100b883a 	mov	r5,r2
   2ab28:	002adc80 	call	2adc8 <__mulsi3>
   2ab2c:	a008943a 	slli	r4,r20,16
   2ab30:	a806d43a 	srli	r3,r21,16
   2ab34:	84a8983a 	sll	r20,r16,r18
   2ab38:	1906b03a 	or	r3,r3,r4
   2ab3c:	1880042e 	bgeu	r3,r2,2ab50 <__umoddi3+0x500>
   2ab40:	1cc7883a 	add	r3,r3,r19
   2ab44:	1cc00236 	bltu	r3,r19,2ab50 <__umoddi3+0x500>
   2ab48:	1880012e 	bgeu	r3,r2,2ab50 <__umoddi3+0x500>
   2ab4c:	1cc7883a 	add	r3,r3,r19
   2ab50:	18a3c83a 	sub	r17,r3,r2
   2ab54:	b00b883a 	mov	r5,r22
   2ab58:	8809883a 	mov	r4,r17
   2ab5c:	002ad700 	call	2ad70 <__umodsi3>
   2ab60:	b00b883a 	mov	r5,r22
   2ab64:	8809883a 	mov	r4,r17
   2ab68:	1021883a 	mov	r16,r2
   2ab6c:	002ad0c0 	call	2ad0c <__udivsi3>
   2ab70:	100b883a 	mov	r5,r2
   2ab74:	b809883a 	mov	r4,r23
   2ab78:	8020943a 	slli	r16,r16,16
   2ab7c:	002adc80 	call	2adc8 <__mulsi3>
   2ab80:	a8ffffcc 	andi	r3,r21,65535
   2ab84:	1c06b03a 	or	r3,r3,r16
   2ab88:	1880042e 	bgeu	r3,r2,2ab9c <__umoddi3+0x54c>
   2ab8c:	1cc7883a 	add	r3,r3,r19
   2ab90:	1cc00236 	bltu	r3,r19,2ab9c <__umoddi3+0x54c>
   2ab94:	1880012e 	bgeu	r3,r2,2ab9c <__umoddi3+0x54c>
   2ab98:	1cc7883a 	add	r3,r3,r19
   2ab9c:	18a3c83a 	sub	r17,r3,r2
   2aba0:	003f2906 	br	2a848 <__alt_data_end+0xfffea848>
   2aba4:	e48fc83a 	sub	r7,fp,r18
   2aba8:	1d49c83a 	sub	r4,r3,r21
   2abac:	e1f9803a 	cmpltu	fp,fp,r7
   2abb0:	2739c83a 	sub	fp,r4,fp
   2abb4:	8f09c83a 	sub	r4,r17,fp
   2abb8:	003fc306 	br	2aac8 <__alt_data_end+0xfffeaac8>
   2abbc:	01000604 	movi	r4,24
   2abc0:	003ef906 	br	2a7a8 <__alt_data_end+0xfffea7a8>
   2abc4:	00800604 	movi	r2,24
   2abc8:	003f1306 	br	2a818 <__alt_data_end+0xfffea818>
   2abcc:	01000604 	movi	r4,24
   2abd0:	003eb606 	br	2a6ac <__alt_data_end+0xfffea6ac>
   2abd4:	40bf902e 	bgeu	r8,r2,2aa18 <__alt_data_end+0xfffeaa18>
   2abd8:	b5bfff84 	addi	r22,r22,-2
   2abdc:	4551883a 	add	r8,r8,r21
   2abe0:	003f8e06 	br	2aa1c <__alt_data_end+0xfffeaa1c>
   2abe4:	18bf762e 	bgeu	r3,r2,2a9c0 <__alt_data_end+0xfffea9c0>
   2abe8:	8c7fff84 	addi	r17,r17,-2
   2abec:	1d47883a 	add	r3,r3,r21
   2abf0:	003f7406 	br	2a9c4 <__alt_data_end+0xfffea9c4>
   2abf4:	1cc7883a 	add	r3,r3,r19
   2abf8:	003ecd06 	br	2a730 <__alt_data_end+0xfffea730>
   2abfc:	8005883a 	mov	r2,r16
   2ac00:	003ef806 	br	2a7e4 <__alt_data_end+0xfffea7e4>
   2ac04:	873fe736 	bltu	r16,fp,2aba4 <__alt_data_end+0xfffeaba4>
   2ac08:	e00f883a 	mov	r7,fp
   2ac0c:	0009883a 	mov	r4,zero
   2ac10:	003fad06 	br	2aac8 <__alt_data_end+0xfffeaac8>

0002ac14 <__divsi3>:
   2ac14:	20001b16 	blt	r4,zero,2ac84 <__divsi3+0x70>
   2ac18:	000f883a 	mov	r7,zero
   2ac1c:	28001616 	blt	r5,zero,2ac78 <__divsi3+0x64>
   2ac20:	200d883a 	mov	r6,r4
   2ac24:	29001a2e 	bgeu	r5,r4,2ac90 <__divsi3+0x7c>
   2ac28:	00800804 	movi	r2,32
   2ac2c:	00c00044 	movi	r3,1
   2ac30:	00000106 	br	2ac38 <__divsi3+0x24>
   2ac34:	10000d26 	beq	r2,zero,2ac6c <__divsi3+0x58>
   2ac38:	294b883a 	add	r5,r5,r5
   2ac3c:	10bfffc4 	addi	r2,r2,-1
   2ac40:	18c7883a 	add	r3,r3,r3
   2ac44:	293ffb36 	bltu	r5,r4,2ac34 <__alt_data_end+0xfffeac34>
   2ac48:	0005883a 	mov	r2,zero
   2ac4c:	18000726 	beq	r3,zero,2ac6c <__divsi3+0x58>
   2ac50:	0005883a 	mov	r2,zero
   2ac54:	31400236 	bltu	r6,r5,2ac60 <__divsi3+0x4c>
   2ac58:	314dc83a 	sub	r6,r6,r5
   2ac5c:	10c4b03a 	or	r2,r2,r3
   2ac60:	1806d07a 	srli	r3,r3,1
   2ac64:	280ad07a 	srli	r5,r5,1
   2ac68:	183ffa1e 	bne	r3,zero,2ac54 <__alt_data_end+0xfffeac54>
   2ac6c:	38000126 	beq	r7,zero,2ac74 <__divsi3+0x60>
   2ac70:	0085c83a 	sub	r2,zero,r2
   2ac74:	f800283a 	ret
   2ac78:	014bc83a 	sub	r5,zero,r5
   2ac7c:	39c0005c 	xori	r7,r7,1
   2ac80:	003fe706 	br	2ac20 <__alt_data_end+0xfffeac20>
   2ac84:	0109c83a 	sub	r4,zero,r4
   2ac88:	01c00044 	movi	r7,1
   2ac8c:	003fe306 	br	2ac1c <__alt_data_end+0xfffeac1c>
   2ac90:	00c00044 	movi	r3,1
   2ac94:	003fee06 	br	2ac50 <__alt_data_end+0xfffeac50>

0002ac98 <__modsi3>:
   2ac98:	20001716 	blt	r4,zero,2acf8 <__modsi3+0x60>
   2ac9c:	000f883a 	mov	r7,zero
   2aca0:	2005883a 	mov	r2,r4
   2aca4:	28001216 	blt	r5,zero,2acf0 <__modsi3+0x58>
   2aca8:	2900162e 	bgeu	r5,r4,2ad04 <__modsi3+0x6c>
   2acac:	01800804 	movi	r6,32
   2acb0:	00c00044 	movi	r3,1
   2acb4:	00000106 	br	2acbc <__modsi3+0x24>
   2acb8:	30000a26 	beq	r6,zero,2ace4 <__modsi3+0x4c>
   2acbc:	294b883a 	add	r5,r5,r5
   2acc0:	31bfffc4 	addi	r6,r6,-1
   2acc4:	18c7883a 	add	r3,r3,r3
   2acc8:	293ffb36 	bltu	r5,r4,2acb8 <__alt_data_end+0xfffeacb8>
   2accc:	18000526 	beq	r3,zero,2ace4 <__modsi3+0x4c>
   2acd0:	1806d07a 	srli	r3,r3,1
   2acd4:	11400136 	bltu	r2,r5,2acdc <__modsi3+0x44>
   2acd8:	1145c83a 	sub	r2,r2,r5
   2acdc:	280ad07a 	srli	r5,r5,1
   2ace0:	183ffb1e 	bne	r3,zero,2acd0 <__alt_data_end+0xfffeacd0>
   2ace4:	38000126 	beq	r7,zero,2acec <__modsi3+0x54>
   2ace8:	0085c83a 	sub	r2,zero,r2
   2acec:	f800283a 	ret
   2acf0:	014bc83a 	sub	r5,zero,r5
   2acf4:	003fec06 	br	2aca8 <__alt_data_end+0xfffeaca8>
   2acf8:	0109c83a 	sub	r4,zero,r4
   2acfc:	01c00044 	movi	r7,1
   2ad00:	003fe706 	br	2aca0 <__alt_data_end+0xfffeaca0>
   2ad04:	00c00044 	movi	r3,1
   2ad08:	003ff106 	br	2acd0 <__alt_data_end+0xfffeacd0>

0002ad0c <__udivsi3>:
   2ad0c:	200d883a 	mov	r6,r4
   2ad10:	2900152e 	bgeu	r5,r4,2ad68 <__udivsi3+0x5c>
   2ad14:	28001416 	blt	r5,zero,2ad68 <__udivsi3+0x5c>
   2ad18:	00800804 	movi	r2,32
   2ad1c:	00c00044 	movi	r3,1
   2ad20:	00000206 	br	2ad2c <__udivsi3+0x20>
   2ad24:	10000e26 	beq	r2,zero,2ad60 <__udivsi3+0x54>
   2ad28:	28000516 	blt	r5,zero,2ad40 <__udivsi3+0x34>
   2ad2c:	294b883a 	add	r5,r5,r5
   2ad30:	10bfffc4 	addi	r2,r2,-1
   2ad34:	18c7883a 	add	r3,r3,r3
   2ad38:	293ffa36 	bltu	r5,r4,2ad24 <__alt_data_end+0xfffead24>
   2ad3c:	18000826 	beq	r3,zero,2ad60 <__udivsi3+0x54>
   2ad40:	0005883a 	mov	r2,zero
   2ad44:	31400236 	bltu	r6,r5,2ad50 <__udivsi3+0x44>
   2ad48:	314dc83a 	sub	r6,r6,r5
   2ad4c:	10c4b03a 	or	r2,r2,r3
   2ad50:	1806d07a 	srli	r3,r3,1
   2ad54:	280ad07a 	srli	r5,r5,1
   2ad58:	183ffa1e 	bne	r3,zero,2ad44 <__alt_data_end+0xfffead44>
   2ad5c:	f800283a 	ret
   2ad60:	0005883a 	mov	r2,zero
   2ad64:	f800283a 	ret
   2ad68:	00c00044 	movi	r3,1
   2ad6c:	003ff406 	br	2ad40 <__alt_data_end+0xfffead40>

0002ad70 <__umodsi3>:
   2ad70:	2005883a 	mov	r2,r4
   2ad74:	2900122e 	bgeu	r5,r4,2adc0 <__umodsi3+0x50>
   2ad78:	28001116 	blt	r5,zero,2adc0 <__umodsi3+0x50>
   2ad7c:	01800804 	movi	r6,32
   2ad80:	00c00044 	movi	r3,1
   2ad84:	00000206 	br	2ad90 <__umodsi3+0x20>
   2ad88:	30000c26 	beq	r6,zero,2adbc <__umodsi3+0x4c>
   2ad8c:	28000516 	blt	r5,zero,2ada4 <__umodsi3+0x34>
   2ad90:	294b883a 	add	r5,r5,r5
   2ad94:	31bfffc4 	addi	r6,r6,-1
   2ad98:	18c7883a 	add	r3,r3,r3
   2ad9c:	293ffa36 	bltu	r5,r4,2ad88 <__alt_data_end+0xfffead88>
   2ada0:	18000626 	beq	r3,zero,2adbc <__umodsi3+0x4c>
   2ada4:	1806d07a 	srli	r3,r3,1
   2ada8:	11400136 	bltu	r2,r5,2adb0 <__umodsi3+0x40>
   2adac:	1145c83a 	sub	r2,r2,r5
   2adb0:	280ad07a 	srli	r5,r5,1
   2adb4:	183ffb1e 	bne	r3,zero,2ada4 <__alt_data_end+0xfffeada4>
   2adb8:	f800283a 	ret
   2adbc:	f800283a 	ret
   2adc0:	00c00044 	movi	r3,1
   2adc4:	003ff706 	br	2ada4 <__alt_data_end+0xfffeada4>

0002adc8 <__mulsi3>:
   2adc8:	0005883a 	mov	r2,zero
   2adcc:	20000726 	beq	r4,zero,2adec <__mulsi3+0x24>
   2add0:	20c0004c 	andi	r3,r4,1
   2add4:	2008d07a 	srli	r4,r4,1
   2add8:	18000126 	beq	r3,zero,2ade0 <__mulsi3+0x18>
   2addc:	1145883a 	add	r2,r2,r5
   2ade0:	294b883a 	add	r5,r5,r5
   2ade4:	203ffa1e 	bne	r4,zero,2add0 <__alt_data_end+0xfffeadd0>
   2ade8:	f800283a 	ret
   2adec:	f800283a 	ret

0002adf0 <__adddf3>:
   2adf0:	02c00434 	movhi	r11,16
   2adf4:	5affffc4 	addi	r11,r11,-1
   2adf8:	2806d7fa 	srli	r3,r5,31
   2adfc:	2ad4703a 	and	r10,r5,r11
   2ae00:	3ad2703a 	and	r9,r7,r11
   2ae04:	3804d53a 	srli	r2,r7,20
   2ae08:	3018d77a 	srli	r12,r6,29
   2ae0c:	280ad53a 	srli	r5,r5,20
   2ae10:	501490fa 	slli	r10,r10,3
   2ae14:	2010d77a 	srli	r8,r4,29
   2ae18:	481290fa 	slli	r9,r9,3
   2ae1c:	380ed7fa 	srli	r7,r7,31
   2ae20:	defffb04 	addi	sp,sp,-20
   2ae24:	dc800215 	stw	r18,8(sp)
   2ae28:	dc400115 	stw	r17,4(sp)
   2ae2c:	dc000015 	stw	r16,0(sp)
   2ae30:	dfc00415 	stw	ra,16(sp)
   2ae34:	dcc00315 	stw	r19,12(sp)
   2ae38:	1c803fcc 	andi	r18,r3,255
   2ae3c:	2c01ffcc 	andi	r16,r5,2047
   2ae40:	5210b03a 	or	r8,r10,r8
   2ae44:	202290fa 	slli	r17,r4,3
   2ae48:	1081ffcc 	andi	r2,r2,2047
   2ae4c:	4b12b03a 	or	r9,r9,r12
   2ae50:	300c90fa 	slli	r6,r6,3
   2ae54:	91c07526 	beq	r18,r7,2b02c <__adddf3+0x23c>
   2ae58:	8087c83a 	sub	r3,r16,r2
   2ae5c:	00c0ab0e 	bge	zero,r3,2b10c <__adddf3+0x31c>
   2ae60:	10002a1e 	bne	r2,zero,2af0c <__adddf3+0x11c>
   2ae64:	4984b03a 	or	r2,r9,r6
   2ae68:	1000961e 	bne	r2,zero,2b0c4 <__adddf3+0x2d4>
   2ae6c:	888001cc 	andi	r2,r17,7
   2ae70:	10000726 	beq	r2,zero,2ae90 <__adddf3+0xa0>
   2ae74:	888003cc 	andi	r2,r17,15
   2ae78:	00c00104 	movi	r3,4
   2ae7c:	10c00426 	beq	r2,r3,2ae90 <__adddf3+0xa0>
   2ae80:	88c7883a 	add	r3,r17,r3
   2ae84:	1c63803a 	cmpltu	r17,r3,r17
   2ae88:	4451883a 	add	r8,r8,r17
   2ae8c:	1823883a 	mov	r17,r3
   2ae90:	4080202c 	andhi	r2,r8,128
   2ae94:	10005926 	beq	r2,zero,2affc <__adddf3+0x20c>
   2ae98:	84000044 	addi	r16,r16,1
   2ae9c:	0081ffc4 	movi	r2,2047
   2aea0:	8080ba26 	beq	r16,r2,2b18c <__adddf3+0x39c>
   2aea4:	00bfe034 	movhi	r2,65408
   2aea8:	10bfffc4 	addi	r2,r2,-1
   2aeac:	4090703a 	and	r8,r8,r2
   2aeb0:	4004977a 	slli	r2,r8,29
   2aeb4:	4010927a 	slli	r8,r8,9
   2aeb8:	8822d0fa 	srli	r17,r17,3
   2aebc:	8401ffcc 	andi	r16,r16,2047
   2aec0:	4010d33a 	srli	r8,r8,12
   2aec4:	9007883a 	mov	r3,r18
   2aec8:	1444b03a 	or	r2,r2,r17
   2aecc:	8401ffcc 	andi	r16,r16,2047
   2aed0:	8020953a 	slli	r16,r16,20
   2aed4:	18c03fcc 	andi	r3,r3,255
   2aed8:	01000434 	movhi	r4,16
   2aedc:	213fffc4 	addi	r4,r4,-1
   2aee0:	180697fa 	slli	r3,r3,31
   2aee4:	4110703a 	and	r8,r8,r4
   2aee8:	4410b03a 	or	r8,r8,r16
   2aeec:	40c6b03a 	or	r3,r8,r3
   2aef0:	dfc00417 	ldw	ra,16(sp)
   2aef4:	dcc00317 	ldw	r19,12(sp)
   2aef8:	dc800217 	ldw	r18,8(sp)
   2aefc:	dc400117 	ldw	r17,4(sp)
   2af00:	dc000017 	ldw	r16,0(sp)
   2af04:	dec00504 	addi	sp,sp,20
   2af08:	f800283a 	ret
   2af0c:	0081ffc4 	movi	r2,2047
   2af10:	80bfd626 	beq	r16,r2,2ae6c <__alt_data_end+0xfffeae6c>
   2af14:	4a402034 	orhi	r9,r9,128
   2af18:	00800e04 	movi	r2,56
   2af1c:	10c09f16 	blt	r2,r3,2b19c <__adddf3+0x3ac>
   2af20:	008007c4 	movi	r2,31
   2af24:	10c0c216 	blt	r2,r3,2b230 <__adddf3+0x440>
   2af28:	00800804 	movi	r2,32
   2af2c:	10c5c83a 	sub	r2,r2,r3
   2af30:	488a983a 	sll	r5,r9,r2
   2af34:	30c8d83a 	srl	r4,r6,r3
   2af38:	3084983a 	sll	r2,r6,r2
   2af3c:	48c6d83a 	srl	r3,r9,r3
   2af40:	290cb03a 	or	r6,r5,r4
   2af44:	1004c03a 	cmpne	r2,r2,zero
   2af48:	308cb03a 	or	r6,r6,r2
   2af4c:	898dc83a 	sub	r6,r17,r6
   2af50:	89a3803a 	cmpltu	r17,r17,r6
   2af54:	40d1c83a 	sub	r8,r8,r3
   2af58:	4451c83a 	sub	r8,r8,r17
   2af5c:	3023883a 	mov	r17,r6
   2af60:	4080202c 	andhi	r2,r8,128
   2af64:	10002326 	beq	r2,zero,2aff4 <__adddf3+0x204>
   2af68:	04c02034 	movhi	r19,128
   2af6c:	9cffffc4 	addi	r19,r19,-1
   2af70:	44e6703a 	and	r19,r8,r19
   2af74:	98007626 	beq	r19,zero,2b150 <__adddf3+0x360>
   2af78:	9809883a 	mov	r4,r19
   2af7c:	002d6300 	call	2d630 <__clzsi2>
   2af80:	10fffe04 	addi	r3,r2,-8
   2af84:	010007c4 	movi	r4,31
   2af88:	20c07716 	blt	r4,r3,2b168 <__adddf3+0x378>
   2af8c:	00800804 	movi	r2,32
   2af90:	10c5c83a 	sub	r2,r2,r3
   2af94:	8884d83a 	srl	r2,r17,r2
   2af98:	98d0983a 	sll	r8,r19,r3
   2af9c:	88e2983a 	sll	r17,r17,r3
   2afa0:	1204b03a 	or	r2,r2,r8
   2afa4:	1c007416 	blt	r3,r16,2b178 <__adddf3+0x388>
   2afa8:	1c21c83a 	sub	r16,r3,r16
   2afac:	82000044 	addi	r8,r16,1
   2afb0:	00c007c4 	movi	r3,31
   2afb4:	1a009116 	blt	r3,r8,2b1fc <__adddf3+0x40c>
   2afb8:	00c00804 	movi	r3,32
   2afbc:	1a07c83a 	sub	r3,r3,r8
   2afc0:	8a08d83a 	srl	r4,r17,r8
   2afc4:	88e2983a 	sll	r17,r17,r3
   2afc8:	10c6983a 	sll	r3,r2,r3
   2afcc:	1210d83a 	srl	r8,r2,r8
   2afd0:	8804c03a 	cmpne	r2,r17,zero
   2afd4:	1906b03a 	or	r3,r3,r4
   2afd8:	18a2b03a 	or	r17,r3,r2
   2afdc:	0021883a 	mov	r16,zero
   2afe0:	003fa206 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2afe4:	1890b03a 	or	r8,r3,r2
   2afe8:	40017d26 	beq	r8,zero,2b5e0 <__adddf3+0x7f0>
   2afec:	1011883a 	mov	r8,r2
   2aff0:	1823883a 	mov	r17,r3
   2aff4:	888001cc 	andi	r2,r17,7
   2aff8:	103f9e1e 	bne	r2,zero,2ae74 <__alt_data_end+0xfffeae74>
   2affc:	4004977a 	slli	r2,r8,29
   2b000:	8822d0fa 	srli	r17,r17,3
   2b004:	4010d0fa 	srli	r8,r8,3
   2b008:	9007883a 	mov	r3,r18
   2b00c:	1444b03a 	or	r2,r2,r17
   2b010:	0101ffc4 	movi	r4,2047
   2b014:	81002426 	beq	r16,r4,2b0a8 <__adddf3+0x2b8>
   2b018:	8120703a 	and	r16,r16,r4
   2b01c:	01000434 	movhi	r4,16
   2b020:	213fffc4 	addi	r4,r4,-1
   2b024:	4110703a 	and	r8,r8,r4
   2b028:	003fa806 	br	2aecc <__alt_data_end+0xfffeaecc>
   2b02c:	8089c83a 	sub	r4,r16,r2
   2b030:	01005e0e 	bge	zero,r4,2b1ac <__adddf3+0x3bc>
   2b034:	10002b26 	beq	r2,zero,2b0e4 <__adddf3+0x2f4>
   2b038:	0081ffc4 	movi	r2,2047
   2b03c:	80bf8b26 	beq	r16,r2,2ae6c <__alt_data_end+0xfffeae6c>
   2b040:	4a402034 	orhi	r9,r9,128
   2b044:	00800e04 	movi	r2,56
   2b048:	1100a40e 	bge	r2,r4,2b2dc <__adddf3+0x4ec>
   2b04c:	498cb03a 	or	r6,r9,r6
   2b050:	300ac03a 	cmpne	r5,r6,zero
   2b054:	0013883a 	mov	r9,zero
   2b058:	2c4b883a 	add	r5,r5,r17
   2b05c:	2c63803a 	cmpltu	r17,r5,r17
   2b060:	4a11883a 	add	r8,r9,r8
   2b064:	8a11883a 	add	r8,r17,r8
   2b068:	2823883a 	mov	r17,r5
   2b06c:	4080202c 	andhi	r2,r8,128
   2b070:	103fe026 	beq	r2,zero,2aff4 <__alt_data_end+0xfffeaff4>
   2b074:	84000044 	addi	r16,r16,1
   2b078:	0081ffc4 	movi	r2,2047
   2b07c:	8080d226 	beq	r16,r2,2b3c8 <__adddf3+0x5d8>
   2b080:	00bfe034 	movhi	r2,65408
   2b084:	10bfffc4 	addi	r2,r2,-1
   2b088:	4090703a 	and	r8,r8,r2
   2b08c:	880ad07a 	srli	r5,r17,1
   2b090:	400897fa 	slli	r4,r8,31
   2b094:	88c0004c 	andi	r3,r17,1
   2b098:	28e2b03a 	or	r17,r5,r3
   2b09c:	4010d07a 	srli	r8,r8,1
   2b0a0:	2462b03a 	or	r17,r4,r17
   2b0a4:	003f7106 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b0a8:	4088b03a 	or	r4,r8,r2
   2b0ac:	20014526 	beq	r4,zero,2b5c4 <__adddf3+0x7d4>
   2b0b0:	01000434 	movhi	r4,16
   2b0b4:	42000234 	orhi	r8,r8,8
   2b0b8:	213fffc4 	addi	r4,r4,-1
   2b0bc:	4110703a 	and	r8,r8,r4
   2b0c0:	003f8206 	br	2aecc <__alt_data_end+0xfffeaecc>
   2b0c4:	18ffffc4 	addi	r3,r3,-1
   2b0c8:	1800491e 	bne	r3,zero,2b1f0 <__adddf3+0x400>
   2b0cc:	898bc83a 	sub	r5,r17,r6
   2b0d0:	8963803a 	cmpltu	r17,r17,r5
   2b0d4:	4251c83a 	sub	r8,r8,r9
   2b0d8:	4451c83a 	sub	r8,r8,r17
   2b0dc:	2823883a 	mov	r17,r5
   2b0e0:	003f9f06 	br	2af60 <__alt_data_end+0xfffeaf60>
   2b0e4:	4984b03a 	or	r2,r9,r6
   2b0e8:	103f6026 	beq	r2,zero,2ae6c <__alt_data_end+0xfffeae6c>
   2b0ec:	213fffc4 	addi	r4,r4,-1
   2b0f0:	2000931e 	bne	r4,zero,2b340 <__adddf3+0x550>
   2b0f4:	898d883a 	add	r6,r17,r6
   2b0f8:	3463803a 	cmpltu	r17,r6,r17
   2b0fc:	4251883a 	add	r8,r8,r9
   2b100:	8a11883a 	add	r8,r17,r8
   2b104:	3023883a 	mov	r17,r6
   2b108:	003fd806 	br	2b06c <__alt_data_end+0xfffeb06c>
   2b10c:	1800541e 	bne	r3,zero,2b260 <__adddf3+0x470>
   2b110:	80800044 	addi	r2,r16,1
   2b114:	1081ffcc 	andi	r2,r2,2047
   2b118:	00c00044 	movi	r3,1
   2b11c:	1880a00e 	bge	r3,r2,2b3a0 <__adddf3+0x5b0>
   2b120:	8989c83a 	sub	r4,r17,r6
   2b124:	8905803a 	cmpltu	r2,r17,r4
   2b128:	4267c83a 	sub	r19,r8,r9
   2b12c:	98a7c83a 	sub	r19,r19,r2
   2b130:	9880202c 	andhi	r2,r19,128
   2b134:	10006326 	beq	r2,zero,2b2c4 <__adddf3+0x4d4>
   2b138:	3463c83a 	sub	r17,r6,r17
   2b13c:	4a07c83a 	sub	r3,r9,r8
   2b140:	344d803a 	cmpltu	r6,r6,r17
   2b144:	19a7c83a 	sub	r19,r3,r6
   2b148:	3825883a 	mov	r18,r7
   2b14c:	983f8a1e 	bne	r19,zero,2af78 <__alt_data_end+0xfffeaf78>
   2b150:	8809883a 	mov	r4,r17
   2b154:	002d6300 	call	2d630 <__clzsi2>
   2b158:	10800804 	addi	r2,r2,32
   2b15c:	10fffe04 	addi	r3,r2,-8
   2b160:	010007c4 	movi	r4,31
   2b164:	20ff890e 	bge	r4,r3,2af8c <__alt_data_end+0xfffeaf8c>
   2b168:	10bff604 	addi	r2,r2,-40
   2b16c:	8884983a 	sll	r2,r17,r2
   2b170:	0023883a 	mov	r17,zero
   2b174:	1c3f8c0e 	bge	r3,r16,2afa8 <__alt_data_end+0xfffeafa8>
   2b178:	023fe034 	movhi	r8,65408
   2b17c:	423fffc4 	addi	r8,r8,-1
   2b180:	80e1c83a 	sub	r16,r16,r3
   2b184:	1210703a 	and	r8,r2,r8
   2b188:	003f3806 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b18c:	9007883a 	mov	r3,r18
   2b190:	0011883a 	mov	r8,zero
   2b194:	0005883a 	mov	r2,zero
   2b198:	003f4c06 	br	2aecc <__alt_data_end+0xfffeaecc>
   2b19c:	498cb03a 	or	r6,r9,r6
   2b1a0:	300cc03a 	cmpne	r6,r6,zero
   2b1a4:	0007883a 	mov	r3,zero
   2b1a8:	003f6806 	br	2af4c <__alt_data_end+0xfffeaf4c>
   2b1ac:	20009c1e 	bne	r4,zero,2b420 <__adddf3+0x630>
   2b1b0:	80800044 	addi	r2,r16,1
   2b1b4:	1141ffcc 	andi	r5,r2,2047
   2b1b8:	01000044 	movi	r4,1
   2b1bc:	2140670e 	bge	r4,r5,2b35c <__adddf3+0x56c>
   2b1c0:	0101ffc4 	movi	r4,2047
   2b1c4:	11007f26 	beq	r2,r4,2b3c4 <__adddf3+0x5d4>
   2b1c8:	898d883a 	add	r6,r17,r6
   2b1cc:	4247883a 	add	r3,r8,r9
   2b1d0:	3451803a 	cmpltu	r8,r6,r17
   2b1d4:	40d1883a 	add	r8,r8,r3
   2b1d8:	402297fa 	slli	r17,r8,31
   2b1dc:	300cd07a 	srli	r6,r6,1
   2b1e0:	4010d07a 	srli	r8,r8,1
   2b1e4:	1021883a 	mov	r16,r2
   2b1e8:	89a2b03a 	or	r17,r17,r6
   2b1ec:	003f1f06 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b1f0:	0081ffc4 	movi	r2,2047
   2b1f4:	80bf481e 	bne	r16,r2,2af18 <__alt_data_end+0xfffeaf18>
   2b1f8:	003f1c06 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b1fc:	843ff844 	addi	r16,r16,-31
   2b200:	01000804 	movi	r4,32
   2b204:	1406d83a 	srl	r3,r2,r16
   2b208:	41005026 	beq	r8,r4,2b34c <__adddf3+0x55c>
   2b20c:	01001004 	movi	r4,64
   2b210:	2211c83a 	sub	r8,r4,r8
   2b214:	1204983a 	sll	r2,r2,r8
   2b218:	88a2b03a 	or	r17,r17,r2
   2b21c:	8822c03a 	cmpne	r17,r17,zero
   2b220:	1c62b03a 	or	r17,r3,r17
   2b224:	0011883a 	mov	r8,zero
   2b228:	0021883a 	mov	r16,zero
   2b22c:	003f7106 	br	2aff4 <__alt_data_end+0xfffeaff4>
   2b230:	193ff804 	addi	r4,r3,-32
   2b234:	00800804 	movi	r2,32
   2b238:	4908d83a 	srl	r4,r9,r4
   2b23c:	18804526 	beq	r3,r2,2b354 <__adddf3+0x564>
   2b240:	00801004 	movi	r2,64
   2b244:	10c5c83a 	sub	r2,r2,r3
   2b248:	4886983a 	sll	r3,r9,r2
   2b24c:	198cb03a 	or	r6,r3,r6
   2b250:	300cc03a 	cmpne	r6,r6,zero
   2b254:	218cb03a 	or	r6,r4,r6
   2b258:	0007883a 	mov	r3,zero
   2b25c:	003f3b06 	br	2af4c <__alt_data_end+0xfffeaf4c>
   2b260:	80002a26 	beq	r16,zero,2b30c <__adddf3+0x51c>
   2b264:	0101ffc4 	movi	r4,2047
   2b268:	11006826 	beq	r2,r4,2b40c <__adddf3+0x61c>
   2b26c:	00c7c83a 	sub	r3,zero,r3
   2b270:	42002034 	orhi	r8,r8,128
   2b274:	01000e04 	movi	r4,56
   2b278:	20c07c16 	blt	r4,r3,2b46c <__adddf3+0x67c>
   2b27c:	010007c4 	movi	r4,31
   2b280:	20c0da16 	blt	r4,r3,2b5ec <__adddf3+0x7fc>
   2b284:	01000804 	movi	r4,32
   2b288:	20c9c83a 	sub	r4,r4,r3
   2b28c:	4114983a 	sll	r10,r8,r4
   2b290:	88cad83a 	srl	r5,r17,r3
   2b294:	8908983a 	sll	r4,r17,r4
   2b298:	40c6d83a 	srl	r3,r8,r3
   2b29c:	5162b03a 	or	r17,r10,r5
   2b2a0:	2008c03a 	cmpne	r4,r4,zero
   2b2a4:	8922b03a 	or	r17,r17,r4
   2b2a8:	3463c83a 	sub	r17,r6,r17
   2b2ac:	48c7c83a 	sub	r3,r9,r3
   2b2b0:	344d803a 	cmpltu	r6,r6,r17
   2b2b4:	1991c83a 	sub	r8,r3,r6
   2b2b8:	1021883a 	mov	r16,r2
   2b2bc:	3825883a 	mov	r18,r7
   2b2c0:	003f2706 	br	2af60 <__alt_data_end+0xfffeaf60>
   2b2c4:	24d0b03a 	or	r8,r4,r19
   2b2c8:	40001b1e 	bne	r8,zero,2b338 <__adddf3+0x548>
   2b2cc:	0005883a 	mov	r2,zero
   2b2d0:	0007883a 	mov	r3,zero
   2b2d4:	0021883a 	mov	r16,zero
   2b2d8:	003f4d06 	br	2b010 <__alt_data_end+0xfffeb010>
   2b2dc:	008007c4 	movi	r2,31
   2b2e0:	11003c16 	blt	r2,r4,2b3d4 <__adddf3+0x5e4>
   2b2e4:	00800804 	movi	r2,32
   2b2e8:	1105c83a 	sub	r2,r2,r4
   2b2ec:	488e983a 	sll	r7,r9,r2
   2b2f0:	310ad83a 	srl	r5,r6,r4
   2b2f4:	3084983a 	sll	r2,r6,r2
   2b2f8:	4912d83a 	srl	r9,r9,r4
   2b2fc:	394ab03a 	or	r5,r7,r5
   2b300:	1004c03a 	cmpne	r2,r2,zero
   2b304:	288ab03a 	or	r5,r5,r2
   2b308:	003f5306 	br	2b058 <__alt_data_end+0xfffeb058>
   2b30c:	4448b03a 	or	r4,r8,r17
   2b310:	20003e26 	beq	r4,zero,2b40c <__adddf3+0x61c>
   2b314:	00c6303a 	nor	r3,zero,r3
   2b318:	18003a1e 	bne	r3,zero,2b404 <__adddf3+0x614>
   2b31c:	3463c83a 	sub	r17,r6,r17
   2b320:	4a07c83a 	sub	r3,r9,r8
   2b324:	344d803a 	cmpltu	r6,r6,r17
   2b328:	1991c83a 	sub	r8,r3,r6
   2b32c:	1021883a 	mov	r16,r2
   2b330:	3825883a 	mov	r18,r7
   2b334:	003f0a06 	br	2af60 <__alt_data_end+0xfffeaf60>
   2b338:	2023883a 	mov	r17,r4
   2b33c:	003f0d06 	br	2af74 <__alt_data_end+0xfffeaf74>
   2b340:	0081ffc4 	movi	r2,2047
   2b344:	80bf3f1e 	bne	r16,r2,2b044 <__alt_data_end+0xfffeb044>
   2b348:	003ec806 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b34c:	0005883a 	mov	r2,zero
   2b350:	003fb106 	br	2b218 <__alt_data_end+0xfffeb218>
   2b354:	0007883a 	mov	r3,zero
   2b358:	003fbc06 	br	2b24c <__alt_data_end+0xfffeb24c>
   2b35c:	4444b03a 	or	r2,r8,r17
   2b360:	8000871e 	bne	r16,zero,2b580 <__adddf3+0x790>
   2b364:	1000ba26 	beq	r2,zero,2b650 <__adddf3+0x860>
   2b368:	4984b03a 	or	r2,r9,r6
   2b36c:	103ebf26 	beq	r2,zero,2ae6c <__alt_data_end+0xfffeae6c>
   2b370:	8985883a 	add	r2,r17,r6
   2b374:	4247883a 	add	r3,r8,r9
   2b378:	1451803a 	cmpltu	r8,r2,r17
   2b37c:	40d1883a 	add	r8,r8,r3
   2b380:	40c0202c 	andhi	r3,r8,128
   2b384:	1023883a 	mov	r17,r2
   2b388:	183f1a26 	beq	r3,zero,2aff4 <__alt_data_end+0xfffeaff4>
   2b38c:	00bfe034 	movhi	r2,65408
   2b390:	10bfffc4 	addi	r2,r2,-1
   2b394:	2021883a 	mov	r16,r4
   2b398:	4090703a 	and	r8,r8,r2
   2b39c:	003eb306 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b3a0:	4444b03a 	or	r2,r8,r17
   2b3a4:	8000291e 	bne	r16,zero,2b44c <__adddf3+0x65c>
   2b3a8:	10004b1e 	bne	r2,zero,2b4d8 <__adddf3+0x6e8>
   2b3ac:	4990b03a 	or	r8,r9,r6
   2b3b0:	40008b26 	beq	r8,zero,2b5e0 <__adddf3+0x7f0>
   2b3b4:	4811883a 	mov	r8,r9
   2b3b8:	3023883a 	mov	r17,r6
   2b3bc:	3825883a 	mov	r18,r7
   2b3c0:	003eaa06 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b3c4:	1021883a 	mov	r16,r2
   2b3c8:	0011883a 	mov	r8,zero
   2b3cc:	0005883a 	mov	r2,zero
   2b3d0:	003f0f06 	br	2b010 <__alt_data_end+0xfffeb010>
   2b3d4:	217ff804 	addi	r5,r4,-32
   2b3d8:	00800804 	movi	r2,32
   2b3dc:	494ad83a 	srl	r5,r9,r5
   2b3e0:	20807d26 	beq	r4,r2,2b5d8 <__adddf3+0x7e8>
   2b3e4:	00801004 	movi	r2,64
   2b3e8:	1109c83a 	sub	r4,r2,r4
   2b3ec:	4912983a 	sll	r9,r9,r4
   2b3f0:	498cb03a 	or	r6,r9,r6
   2b3f4:	300cc03a 	cmpne	r6,r6,zero
   2b3f8:	298ab03a 	or	r5,r5,r6
   2b3fc:	0013883a 	mov	r9,zero
   2b400:	003f1506 	br	2b058 <__alt_data_end+0xfffeb058>
   2b404:	0101ffc4 	movi	r4,2047
   2b408:	113f9a1e 	bne	r2,r4,2b274 <__alt_data_end+0xfffeb274>
   2b40c:	4811883a 	mov	r8,r9
   2b410:	3023883a 	mov	r17,r6
   2b414:	1021883a 	mov	r16,r2
   2b418:	3825883a 	mov	r18,r7
   2b41c:	003e9306 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b420:	8000161e 	bne	r16,zero,2b47c <__adddf3+0x68c>
   2b424:	444ab03a 	or	r5,r8,r17
   2b428:	28005126 	beq	r5,zero,2b570 <__adddf3+0x780>
   2b42c:	0108303a 	nor	r4,zero,r4
   2b430:	20004d1e 	bne	r4,zero,2b568 <__adddf3+0x778>
   2b434:	89a3883a 	add	r17,r17,r6
   2b438:	4253883a 	add	r9,r8,r9
   2b43c:	898d803a 	cmpltu	r6,r17,r6
   2b440:	3251883a 	add	r8,r6,r9
   2b444:	1021883a 	mov	r16,r2
   2b448:	003f0806 	br	2b06c <__alt_data_end+0xfffeb06c>
   2b44c:	1000301e 	bne	r2,zero,2b510 <__adddf3+0x720>
   2b450:	4984b03a 	or	r2,r9,r6
   2b454:	10007126 	beq	r2,zero,2b61c <__adddf3+0x82c>
   2b458:	4811883a 	mov	r8,r9
   2b45c:	3023883a 	mov	r17,r6
   2b460:	3825883a 	mov	r18,r7
   2b464:	0401ffc4 	movi	r16,2047
   2b468:	003e8006 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b46c:	4462b03a 	or	r17,r8,r17
   2b470:	8822c03a 	cmpne	r17,r17,zero
   2b474:	0007883a 	mov	r3,zero
   2b478:	003f8b06 	br	2b2a8 <__alt_data_end+0xfffeb2a8>
   2b47c:	0141ffc4 	movi	r5,2047
   2b480:	11403b26 	beq	r2,r5,2b570 <__adddf3+0x780>
   2b484:	0109c83a 	sub	r4,zero,r4
   2b488:	42002034 	orhi	r8,r8,128
   2b48c:	01400e04 	movi	r5,56
   2b490:	29006716 	blt	r5,r4,2b630 <__adddf3+0x840>
   2b494:	014007c4 	movi	r5,31
   2b498:	29007016 	blt	r5,r4,2b65c <__adddf3+0x86c>
   2b49c:	01400804 	movi	r5,32
   2b4a0:	290bc83a 	sub	r5,r5,r4
   2b4a4:	4154983a 	sll	r10,r8,r5
   2b4a8:	890ed83a 	srl	r7,r17,r4
   2b4ac:	894a983a 	sll	r5,r17,r5
   2b4b0:	4108d83a 	srl	r4,r8,r4
   2b4b4:	51e2b03a 	or	r17,r10,r7
   2b4b8:	280ac03a 	cmpne	r5,r5,zero
   2b4bc:	8962b03a 	or	r17,r17,r5
   2b4c0:	89a3883a 	add	r17,r17,r6
   2b4c4:	2253883a 	add	r9,r4,r9
   2b4c8:	898d803a 	cmpltu	r6,r17,r6
   2b4cc:	3251883a 	add	r8,r6,r9
   2b4d0:	1021883a 	mov	r16,r2
   2b4d4:	003ee506 	br	2b06c <__alt_data_end+0xfffeb06c>
   2b4d8:	4984b03a 	or	r2,r9,r6
   2b4dc:	103e6326 	beq	r2,zero,2ae6c <__alt_data_end+0xfffeae6c>
   2b4e0:	8987c83a 	sub	r3,r17,r6
   2b4e4:	88c9803a 	cmpltu	r4,r17,r3
   2b4e8:	4245c83a 	sub	r2,r8,r9
   2b4ec:	1105c83a 	sub	r2,r2,r4
   2b4f0:	1100202c 	andhi	r4,r2,128
   2b4f4:	203ebb26 	beq	r4,zero,2afe4 <__alt_data_end+0xfffeafe4>
   2b4f8:	3463c83a 	sub	r17,r6,r17
   2b4fc:	4a07c83a 	sub	r3,r9,r8
   2b500:	344d803a 	cmpltu	r6,r6,r17
   2b504:	1991c83a 	sub	r8,r3,r6
   2b508:	3825883a 	mov	r18,r7
   2b50c:	003e5706 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b510:	4984b03a 	or	r2,r9,r6
   2b514:	10002e26 	beq	r2,zero,2b5d0 <__adddf3+0x7e0>
   2b518:	4004d0fa 	srli	r2,r8,3
   2b51c:	8822d0fa 	srli	r17,r17,3
   2b520:	4010977a 	slli	r8,r8,29
   2b524:	10c0022c 	andhi	r3,r2,8
   2b528:	4462b03a 	or	r17,r8,r17
   2b52c:	18000826 	beq	r3,zero,2b550 <__adddf3+0x760>
   2b530:	4808d0fa 	srli	r4,r9,3
   2b534:	20c0022c 	andhi	r3,r4,8
   2b538:	1800051e 	bne	r3,zero,2b550 <__adddf3+0x760>
   2b53c:	300cd0fa 	srli	r6,r6,3
   2b540:	4806977a 	slli	r3,r9,29
   2b544:	2005883a 	mov	r2,r4
   2b548:	3825883a 	mov	r18,r7
   2b54c:	19a2b03a 	or	r17,r3,r6
   2b550:	8810d77a 	srli	r8,r17,29
   2b554:	100490fa 	slli	r2,r2,3
   2b558:	882290fa 	slli	r17,r17,3
   2b55c:	0401ffc4 	movi	r16,2047
   2b560:	4090b03a 	or	r8,r8,r2
   2b564:	003e4106 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b568:	0141ffc4 	movi	r5,2047
   2b56c:	117fc71e 	bne	r2,r5,2b48c <__alt_data_end+0xfffeb48c>
   2b570:	4811883a 	mov	r8,r9
   2b574:	3023883a 	mov	r17,r6
   2b578:	1021883a 	mov	r16,r2
   2b57c:	003e3b06 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b580:	10002f26 	beq	r2,zero,2b640 <__adddf3+0x850>
   2b584:	4984b03a 	or	r2,r9,r6
   2b588:	10001126 	beq	r2,zero,2b5d0 <__adddf3+0x7e0>
   2b58c:	4004d0fa 	srli	r2,r8,3
   2b590:	8822d0fa 	srli	r17,r17,3
   2b594:	4010977a 	slli	r8,r8,29
   2b598:	10c0022c 	andhi	r3,r2,8
   2b59c:	4462b03a 	or	r17,r8,r17
   2b5a0:	183feb26 	beq	r3,zero,2b550 <__alt_data_end+0xfffeb550>
   2b5a4:	4808d0fa 	srli	r4,r9,3
   2b5a8:	20c0022c 	andhi	r3,r4,8
   2b5ac:	183fe81e 	bne	r3,zero,2b550 <__alt_data_end+0xfffeb550>
   2b5b0:	300cd0fa 	srli	r6,r6,3
   2b5b4:	4806977a 	slli	r3,r9,29
   2b5b8:	2005883a 	mov	r2,r4
   2b5bc:	19a2b03a 	or	r17,r3,r6
   2b5c0:	003fe306 	br	2b550 <__alt_data_end+0xfffeb550>
   2b5c4:	0011883a 	mov	r8,zero
   2b5c8:	0005883a 	mov	r2,zero
   2b5cc:	003e3f06 	br	2aecc <__alt_data_end+0xfffeaecc>
   2b5d0:	0401ffc4 	movi	r16,2047
   2b5d4:	003e2506 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b5d8:	0013883a 	mov	r9,zero
   2b5dc:	003f8406 	br	2b3f0 <__alt_data_end+0xfffeb3f0>
   2b5e0:	0005883a 	mov	r2,zero
   2b5e4:	0007883a 	mov	r3,zero
   2b5e8:	003e8906 	br	2b010 <__alt_data_end+0xfffeb010>
   2b5ec:	197ff804 	addi	r5,r3,-32
   2b5f0:	01000804 	movi	r4,32
   2b5f4:	414ad83a 	srl	r5,r8,r5
   2b5f8:	19002426 	beq	r3,r4,2b68c <__adddf3+0x89c>
   2b5fc:	01001004 	movi	r4,64
   2b600:	20c7c83a 	sub	r3,r4,r3
   2b604:	40c6983a 	sll	r3,r8,r3
   2b608:	1c46b03a 	or	r3,r3,r17
   2b60c:	1806c03a 	cmpne	r3,r3,zero
   2b610:	28e2b03a 	or	r17,r5,r3
   2b614:	0007883a 	mov	r3,zero
   2b618:	003f2306 	br	2b2a8 <__alt_data_end+0xfffeb2a8>
   2b61c:	0007883a 	mov	r3,zero
   2b620:	5811883a 	mov	r8,r11
   2b624:	00bfffc4 	movi	r2,-1
   2b628:	0401ffc4 	movi	r16,2047
   2b62c:	003e7806 	br	2b010 <__alt_data_end+0xfffeb010>
   2b630:	4462b03a 	or	r17,r8,r17
   2b634:	8822c03a 	cmpne	r17,r17,zero
   2b638:	0009883a 	mov	r4,zero
   2b63c:	003fa006 	br	2b4c0 <__alt_data_end+0xfffeb4c0>
   2b640:	4811883a 	mov	r8,r9
   2b644:	3023883a 	mov	r17,r6
   2b648:	0401ffc4 	movi	r16,2047
   2b64c:	003e0706 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b650:	4811883a 	mov	r8,r9
   2b654:	3023883a 	mov	r17,r6
   2b658:	003e0406 	br	2ae6c <__alt_data_end+0xfffeae6c>
   2b65c:	21fff804 	addi	r7,r4,-32
   2b660:	01400804 	movi	r5,32
   2b664:	41ced83a 	srl	r7,r8,r7
   2b668:	21400a26 	beq	r4,r5,2b694 <__adddf3+0x8a4>
   2b66c:	01401004 	movi	r5,64
   2b670:	2909c83a 	sub	r4,r5,r4
   2b674:	4108983a 	sll	r4,r8,r4
   2b678:	2448b03a 	or	r4,r4,r17
   2b67c:	2008c03a 	cmpne	r4,r4,zero
   2b680:	3922b03a 	or	r17,r7,r4
   2b684:	0009883a 	mov	r4,zero
   2b688:	003f8d06 	br	2b4c0 <__alt_data_end+0xfffeb4c0>
   2b68c:	0007883a 	mov	r3,zero
   2b690:	003fdd06 	br	2b608 <__alt_data_end+0xfffeb608>
   2b694:	0009883a 	mov	r4,zero
   2b698:	003ff706 	br	2b678 <__alt_data_end+0xfffeb678>

0002b69c <__divdf3>:
   2b69c:	defff004 	addi	sp,sp,-64
   2b6a0:	dc800815 	stw	r18,32(sp)
   2b6a4:	2824d53a 	srli	r18,r5,20
   2b6a8:	dd800c15 	stw	r22,48(sp)
   2b6ac:	282cd7fa 	srli	r22,r5,31
   2b6b0:	dc000615 	stw	r16,24(sp)
   2b6b4:	04000434 	movhi	r16,16
   2b6b8:	843fffc4 	addi	r16,r16,-1
   2b6bc:	dfc00f15 	stw	ra,60(sp)
   2b6c0:	df000e15 	stw	fp,56(sp)
   2b6c4:	ddc00d15 	stw	r23,52(sp)
   2b6c8:	dd400b15 	stw	r21,44(sp)
   2b6cc:	dd000a15 	stw	r20,40(sp)
   2b6d0:	dcc00915 	stw	r19,36(sp)
   2b6d4:	dc400715 	stw	r17,28(sp)
   2b6d8:	9481ffcc 	andi	r18,r18,2047
   2b6dc:	2c20703a 	and	r16,r5,r16
   2b6e0:	b2003fcc 	andi	r8,r22,255
   2b6e4:	90006126 	beq	r18,zero,2b86c <__divdf3+0x1d0>
   2b6e8:	0081ffc4 	movi	r2,2047
   2b6ec:	202b883a 	mov	r21,r4
   2b6f0:	90803726 	beq	r18,r2,2b7d0 <__divdf3+0x134>
   2b6f4:	80800434 	orhi	r2,r16,16
   2b6f8:	100490fa 	slli	r2,r2,3
   2b6fc:	2020d77a 	srli	r16,r4,29
   2b700:	202a90fa 	slli	r21,r4,3
   2b704:	94bf0044 	addi	r18,r18,-1023
   2b708:	80a0b03a 	or	r16,r16,r2
   2b70c:	0013883a 	mov	r9,zero
   2b710:	000b883a 	mov	r5,zero
   2b714:	3806d53a 	srli	r3,r7,20
   2b718:	382ed7fa 	srli	r23,r7,31
   2b71c:	04400434 	movhi	r17,16
   2b720:	8c7fffc4 	addi	r17,r17,-1
   2b724:	18c1ffcc 	andi	r3,r3,2047
   2b728:	3029883a 	mov	r20,r6
   2b72c:	3c62703a 	and	r17,r7,r17
   2b730:	bf003fcc 	andi	fp,r23,255
   2b734:	18006e26 	beq	r3,zero,2b8f0 <__divdf3+0x254>
   2b738:	0081ffc4 	movi	r2,2047
   2b73c:	18806626 	beq	r3,r2,2b8d8 <__divdf3+0x23c>
   2b740:	88800434 	orhi	r2,r17,16
   2b744:	100490fa 	slli	r2,r2,3
   2b748:	3022d77a 	srli	r17,r6,29
   2b74c:	302890fa 	slli	r20,r6,3
   2b750:	18ff0044 	addi	r3,r3,-1023
   2b754:	88a2b03a 	or	r17,r17,r2
   2b758:	000f883a 	mov	r7,zero
   2b75c:	b5e6f03a 	xor	r19,r22,r23
   2b760:	3a4cb03a 	or	r6,r7,r9
   2b764:	008003c4 	movi	r2,15
   2b768:	9809883a 	mov	r4,r19
   2b76c:	90c7c83a 	sub	r3,r18,r3
   2b770:	9cc03fcc 	andi	r19,r19,255
   2b774:	11809636 	bltu	r2,r6,2b9d0 <__divdf3+0x334>
   2b778:	300c90ba 	slli	r6,r6,2
   2b77c:	008000f4 	movhi	r2,3
   2b780:	10ade404 	addi	r2,r2,-18544
   2b784:	308d883a 	add	r6,r6,r2
   2b788:	30800017 	ldw	r2,0(r6)
   2b78c:	1000683a 	jmp	r2
   2b790:	0002b9d0 	cmplti	zero,zero,2791
   2b794:	0002b808 	cmpgei	zero,zero,2784
   2b798:	0002b9c0 	call	2b9c <__alt_mem_RAM-0x1d464>
   2b79c:	0002b7fc 	xorhi	zero,zero,2783
   2b7a0:	0002b9c0 	call	2b9c <__alt_mem_RAM-0x1d464>
   2b7a4:	0002b994 	movui	zero,2790
   2b7a8:	0002b9c0 	call	2b9c <__alt_mem_RAM-0x1d464>
   2b7ac:	0002b7fc 	xorhi	zero,zero,2783
   2b7b0:	0002b808 	cmpgei	zero,zero,2784
   2b7b4:	0002b808 	cmpgei	zero,zero,2784
   2b7b8:	0002b994 	movui	zero,2790
   2b7bc:	0002b7fc 	xorhi	zero,zero,2783
   2b7c0:	0002b7ec 	andhi	zero,zero,2783
   2b7c4:	0002b7ec 	andhi	zero,zero,2783
   2b7c8:	0002b7ec 	andhi	zero,zero,2783
   2b7cc:	0002bd58 	cmpnei	zero,zero,2805
   2b7d0:	2404b03a 	or	r2,r4,r16
   2b7d4:	10006c1e 	bne	r2,zero,2b988 <__divdf3+0x2ec>
   2b7d8:	02400204 	movi	r9,8
   2b7dc:	0021883a 	mov	r16,zero
   2b7e0:	002b883a 	mov	r21,zero
   2b7e4:	01400084 	movi	r5,2
   2b7e8:	003fca06 	br	2b714 <__alt_data_end+0xfffeb714>
   2b7ec:	8023883a 	mov	r17,r16
   2b7f0:	a829883a 	mov	r20,r21
   2b7f4:	4039883a 	mov	fp,r8
   2b7f8:	280f883a 	mov	r7,r5
   2b7fc:	00800084 	movi	r2,2
   2b800:	3881601e 	bne	r7,r2,2bd84 <__divdf3+0x6e8>
   2b804:	e027883a 	mov	r19,fp
   2b808:	9900004c 	andi	r4,r19,1
   2b80c:	0081ffc4 	movi	r2,2047
   2b810:	0021883a 	mov	r16,zero
   2b814:	002b883a 	mov	r21,zero
   2b818:	1004953a 	slli	r2,r2,20
   2b81c:	20c03fcc 	andi	r3,r4,255
   2b820:	01400434 	movhi	r5,16
   2b824:	297fffc4 	addi	r5,r5,-1
   2b828:	180697fa 	slli	r3,r3,31
   2b82c:	8160703a 	and	r16,r16,r5
   2b830:	80a0b03a 	or	r16,r16,r2
   2b834:	80c6b03a 	or	r3,r16,r3
   2b838:	a805883a 	mov	r2,r21
   2b83c:	dfc00f17 	ldw	ra,60(sp)
   2b840:	df000e17 	ldw	fp,56(sp)
   2b844:	ddc00d17 	ldw	r23,52(sp)
   2b848:	dd800c17 	ldw	r22,48(sp)
   2b84c:	dd400b17 	ldw	r21,44(sp)
   2b850:	dd000a17 	ldw	r20,40(sp)
   2b854:	dcc00917 	ldw	r19,36(sp)
   2b858:	dc800817 	ldw	r18,32(sp)
   2b85c:	dc400717 	ldw	r17,28(sp)
   2b860:	dc000617 	ldw	r16,24(sp)
   2b864:	dec01004 	addi	sp,sp,64
   2b868:	f800283a 	ret
   2b86c:	2404b03a 	or	r2,r4,r16
   2b870:	2023883a 	mov	r17,r4
   2b874:	10003f26 	beq	r2,zero,2b974 <__divdf3+0x2d8>
   2b878:	80015e26 	beq	r16,zero,2bdf4 <__divdf3+0x758>
   2b87c:	8009883a 	mov	r4,r16
   2b880:	d9800215 	stw	r6,8(sp)
   2b884:	d9c00515 	stw	r7,20(sp)
   2b888:	da000415 	stw	r8,16(sp)
   2b88c:	002d6300 	call	2d630 <__clzsi2>
   2b890:	d9800217 	ldw	r6,8(sp)
   2b894:	d9c00517 	ldw	r7,20(sp)
   2b898:	da000417 	ldw	r8,16(sp)
   2b89c:	113ffd44 	addi	r4,r2,-11
   2b8a0:	00c00704 	movi	r3,28
   2b8a4:	19014f16 	blt	r3,r4,2bde4 <__divdf3+0x748>
   2b8a8:	00c00744 	movi	r3,29
   2b8ac:	157ffe04 	addi	r21,r2,-8
   2b8b0:	1907c83a 	sub	r3,r3,r4
   2b8b4:	8560983a 	sll	r16,r16,r21
   2b8b8:	88c6d83a 	srl	r3,r17,r3
   2b8bc:	8d6a983a 	sll	r21,r17,r21
   2b8c0:	1c20b03a 	or	r16,r3,r16
   2b8c4:	1080fcc4 	addi	r2,r2,1011
   2b8c8:	00a5c83a 	sub	r18,zero,r2
   2b8cc:	0013883a 	mov	r9,zero
   2b8d0:	000b883a 	mov	r5,zero
   2b8d4:	003f8f06 	br	2b714 <__alt_data_end+0xfffeb714>
   2b8d8:	3444b03a 	or	r2,r6,r17
   2b8dc:	1000231e 	bne	r2,zero,2b96c <__divdf3+0x2d0>
   2b8e0:	0023883a 	mov	r17,zero
   2b8e4:	0029883a 	mov	r20,zero
   2b8e8:	01c00084 	movi	r7,2
   2b8ec:	003f9b06 	br	2b75c <__alt_data_end+0xfffeb75c>
   2b8f0:	3444b03a 	or	r2,r6,r17
   2b8f4:	10001926 	beq	r2,zero,2b95c <__divdf3+0x2c0>
   2b8f8:	88014b26 	beq	r17,zero,2be28 <__divdf3+0x78c>
   2b8fc:	8809883a 	mov	r4,r17
   2b900:	d9400115 	stw	r5,4(sp)
   2b904:	d9800215 	stw	r6,8(sp)
   2b908:	da000415 	stw	r8,16(sp)
   2b90c:	da400315 	stw	r9,12(sp)
   2b910:	002d6300 	call	2d630 <__clzsi2>
   2b914:	d9400117 	ldw	r5,4(sp)
   2b918:	d9800217 	ldw	r6,8(sp)
   2b91c:	da000417 	ldw	r8,16(sp)
   2b920:	da400317 	ldw	r9,12(sp)
   2b924:	113ffd44 	addi	r4,r2,-11
   2b928:	00c00704 	movi	r3,28
   2b92c:	19013a16 	blt	r3,r4,2be18 <__divdf3+0x77c>
   2b930:	00c00744 	movi	r3,29
   2b934:	153ffe04 	addi	r20,r2,-8
   2b938:	1907c83a 	sub	r3,r3,r4
   2b93c:	8d22983a 	sll	r17,r17,r20
   2b940:	30c6d83a 	srl	r3,r6,r3
   2b944:	3528983a 	sll	r20,r6,r20
   2b948:	1c62b03a 	or	r17,r3,r17
   2b94c:	1080fcc4 	addi	r2,r2,1011
   2b950:	0087c83a 	sub	r3,zero,r2
   2b954:	000f883a 	mov	r7,zero
   2b958:	003f8006 	br	2b75c <__alt_data_end+0xfffeb75c>
   2b95c:	0023883a 	mov	r17,zero
   2b960:	0029883a 	mov	r20,zero
   2b964:	01c00044 	movi	r7,1
   2b968:	003f7c06 	br	2b75c <__alt_data_end+0xfffeb75c>
   2b96c:	01c000c4 	movi	r7,3
   2b970:	003f7a06 	br	2b75c <__alt_data_end+0xfffeb75c>
   2b974:	02400104 	movi	r9,4
   2b978:	0021883a 	mov	r16,zero
   2b97c:	002b883a 	mov	r21,zero
   2b980:	01400044 	movi	r5,1
   2b984:	003f6306 	br	2b714 <__alt_data_end+0xfffeb714>
   2b988:	02400304 	movi	r9,12
   2b98c:	014000c4 	movi	r5,3
   2b990:	003f6006 	br	2b714 <__alt_data_end+0xfffeb714>
   2b994:	04000434 	movhi	r16,16
   2b998:	0009883a 	mov	r4,zero
   2b99c:	843fffc4 	addi	r16,r16,-1
   2b9a0:	057fffc4 	movi	r21,-1
   2b9a4:	0081ffc4 	movi	r2,2047
   2b9a8:	003f9b06 	br	2b818 <__alt_data_end+0xfffeb818>
   2b9ac:	00c00044 	movi	r3,1
   2b9b0:	1887c83a 	sub	r3,r3,r2
   2b9b4:	01000e04 	movi	r4,56
   2b9b8:	20c1530e 	bge	r4,r3,2bf08 <__divdf3+0x86c>
   2b9bc:	9900004c 	andi	r4,r19,1
   2b9c0:	0005883a 	mov	r2,zero
   2b9c4:	0021883a 	mov	r16,zero
   2b9c8:	002b883a 	mov	r21,zero
   2b9cc:	003f9206 	br	2b818 <__alt_data_end+0xfffeb818>
   2b9d0:	8c012e36 	bltu	r17,r16,2be8c <__divdf3+0x7f0>
   2b9d4:	84412c26 	beq	r16,r17,2be88 <__divdf3+0x7ec>
   2b9d8:	a82f883a 	mov	r23,r21
   2b9dc:	18ffffc4 	addi	r3,r3,-1
   2b9e0:	002b883a 	mov	r21,zero
   2b9e4:	a004d63a 	srli	r2,r20,24
   2b9e8:	8822923a 	slli	r17,r17,8
   2b9ec:	a028923a 	slli	r20,r20,8
   2b9f0:	8009883a 	mov	r4,r16
   2b9f4:	88acb03a 	or	r22,r17,r2
   2b9f8:	dd000015 	stw	r20,0(sp)
   2b9fc:	b028d43a 	srli	r20,r22,16
   2ba00:	d8c00215 	stw	r3,8(sp)
   2ba04:	b4bfffcc 	andi	r18,r22,65535
   2ba08:	a00b883a 	mov	r5,r20
   2ba0c:	002ad0c0 	call	2ad0c <__udivsi3>
   2ba10:	100b883a 	mov	r5,r2
   2ba14:	9009883a 	mov	r4,r18
   2ba18:	1023883a 	mov	r17,r2
   2ba1c:	002adc80 	call	2adc8 <__mulsi3>
   2ba20:	8009883a 	mov	r4,r16
   2ba24:	a00b883a 	mov	r5,r20
   2ba28:	1039883a 	mov	fp,r2
   2ba2c:	002ad700 	call	2ad70 <__umodsi3>
   2ba30:	1004943a 	slli	r2,r2,16
   2ba34:	b808d43a 	srli	r4,r23,16
   2ba38:	d8c00217 	ldw	r3,8(sp)
   2ba3c:	2084b03a 	or	r2,r4,r2
   2ba40:	1700062e 	bgeu	r2,fp,2ba5c <__divdf3+0x3c0>
   2ba44:	1585883a 	add	r2,r2,r22
   2ba48:	893fffc4 	addi	r4,r17,-1
   2ba4c:	15811d36 	bltu	r2,r22,2bec4 <__divdf3+0x828>
   2ba50:	17011c2e 	bgeu	r2,fp,2bec4 <__divdf3+0x828>
   2ba54:	8c7fff84 	addi	r17,r17,-2
   2ba58:	1585883a 	add	r2,r2,r22
   2ba5c:	1739c83a 	sub	fp,r2,fp
   2ba60:	a00b883a 	mov	r5,r20
   2ba64:	e009883a 	mov	r4,fp
   2ba68:	d8c00215 	stw	r3,8(sp)
   2ba6c:	002ad0c0 	call	2ad0c <__udivsi3>
   2ba70:	100b883a 	mov	r5,r2
   2ba74:	9009883a 	mov	r4,r18
   2ba78:	1021883a 	mov	r16,r2
   2ba7c:	002adc80 	call	2adc8 <__mulsi3>
   2ba80:	a00b883a 	mov	r5,r20
   2ba84:	e009883a 	mov	r4,fp
   2ba88:	d8800415 	stw	r2,16(sp)
   2ba8c:	002ad700 	call	2ad70 <__umodsi3>
   2ba90:	1004943a 	slli	r2,r2,16
   2ba94:	da000417 	ldw	r8,16(sp)
   2ba98:	bdffffcc 	andi	r23,r23,65535
   2ba9c:	b884b03a 	or	r2,r23,r2
   2baa0:	d8c00217 	ldw	r3,8(sp)
   2baa4:	1200062e 	bgeu	r2,r8,2bac0 <__divdf3+0x424>
   2baa8:	1585883a 	add	r2,r2,r22
   2baac:	813fffc4 	addi	r4,r16,-1
   2bab0:	15810236 	bltu	r2,r22,2bebc <__divdf3+0x820>
   2bab4:	1201012e 	bgeu	r2,r8,2bebc <__divdf3+0x820>
   2bab8:	843fff84 	addi	r16,r16,-2
   2babc:	1585883a 	add	r2,r2,r22
   2bac0:	8822943a 	slli	r17,r17,16
   2bac4:	d9800017 	ldw	r6,0(sp)
   2bac8:	1211c83a 	sub	r8,r2,r8
   2bacc:	8c22b03a 	or	r17,r17,r16
   2bad0:	373fffcc 	andi	fp,r6,65535
   2bad4:	8abfffcc 	andi	r10,r17,65535
   2bad8:	8820d43a 	srli	r16,r17,16
   2badc:	5009883a 	mov	r4,r10
   2bae0:	e00b883a 	mov	r5,fp
   2bae4:	302ed43a 	srli	r23,r6,16
   2bae8:	d8c00215 	stw	r3,8(sp)
   2baec:	da000415 	stw	r8,16(sp)
   2baf0:	da800115 	stw	r10,4(sp)
   2baf4:	002adc80 	call	2adc8 <__mulsi3>
   2baf8:	800b883a 	mov	r5,r16
   2bafc:	e009883a 	mov	r4,fp
   2bb00:	d8800515 	stw	r2,20(sp)
   2bb04:	002adc80 	call	2adc8 <__mulsi3>
   2bb08:	8009883a 	mov	r4,r16
   2bb0c:	b80b883a 	mov	r5,r23
   2bb10:	d8800315 	stw	r2,12(sp)
   2bb14:	002adc80 	call	2adc8 <__mulsi3>
   2bb18:	da800117 	ldw	r10,4(sp)
   2bb1c:	b80b883a 	mov	r5,r23
   2bb20:	1021883a 	mov	r16,r2
   2bb24:	5009883a 	mov	r4,r10
   2bb28:	002adc80 	call	2adc8 <__mulsi3>
   2bb2c:	d9c00517 	ldw	r7,20(sp)
   2bb30:	da400317 	ldw	r9,12(sp)
   2bb34:	d8c00217 	ldw	r3,8(sp)
   2bb38:	3808d43a 	srli	r4,r7,16
   2bb3c:	1245883a 	add	r2,r2,r9
   2bb40:	da000417 	ldw	r8,16(sp)
   2bb44:	2085883a 	add	r2,r4,r2
   2bb48:	1240022e 	bgeu	r2,r9,2bb54 <__divdf3+0x4b8>
   2bb4c:	01000074 	movhi	r4,1
   2bb50:	8121883a 	add	r16,r16,r4
   2bb54:	1008d43a 	srli	r4,r2,16
   2bb58:	1004943a 	slli	r2,r2,16
   2bb5c:	39ffffcc 	andi	r7,r7,65535
   2bb60:	2409883a 	add	r4,r4,r16
   2bb64:	11c5883a 	add	r2,r2,r7
   2bb68:	4100bb36 	bltu	r8,r4,2be58 <__divdf3+0x7bc>
   2bb6c:	4100d726 	beq	r8,r4,2becc <__divdf3+0x830>
   2bb70:	4109c83a 	sub	r4,r8,r4
   2bb74:	a8a1c83a 	sub	r16,r21,r2
   2bb78:	ac2b803a 	cmpltu	r21,r21,r16
   2bb7c:	256bc83a 	sub	r21,r4,r21
   2bb80:	b540d926 	beq	r22,r21,2bee8 <__divdf3+0x84c>
   2bb84:	a00b883a 	mov	r5,r20
   2bb88:	a809883a 	mov	r4,r21
   2bb8c:	d8c00215 	stw	r3,8(sp)
   2bb90:	002ad0c0 	call	2ad0c <__udivsi3>
   2bb94:	100b883a 	mov	r5,r2
   2bb98:	9009883a 	mov	r4,r18
   2bb9c:	d8800515 	stw	r2,20(sp)
   2bba0:	002adc80 	call	2adc8 <__mulsi3>
   2bba4:	a809883a 	mov	r4,r21
   2bba8:	a00b883a 	mov	r5,r20
   2bbac:	d8800415 	stw	r2,16(sp)
   2bbb0:	002ad700 	call	2ad70 <__umodsi3>
   2bbb4:	1004943a 	slli	r2,r2,16
   2bbb8:	8008d43a 	srli	r4,r16,16
   2bbbc:	da000417 	ldw	r8,16(sp)
   2bbc0:	d8c00217 	ldw	r3,8(sp)
   2bbc4:	2084b03a 	or	r2,r4,r2
   2bbc8:	d9c00517 	ldw	r7,20(sp)
   2bbcc:	1200062e 	bgeu	r2,r8,2bbe8 <__divdf3+0x54c>
   2bbd0:	1585883a 	add	r2,r2,r22
   2bbd4:	393fffc4 	addi	r4,r7,-1
   2bbd8:	1580c536 	bltu	r2,r22,2bef0 <__divdf3+0x854>
   2bbdc:	1200c42e 	bgeu	r2,r8,2bef0 <__divdf3+0x854>
   2bbe0:	39ffff84 	addi	r7,r7,-2
   2bbe4:	1585883a 	add	r2,r2,r22
   2bbe8:	122bc83a 	sub	r21,r2,r8
   2bbec:	a00b883a 	mov	r5,r20
   2bbf0:	a809883a 	mov	r4,r21
   2bbf4:	d8c00215 	stw	r3,8(sp)
   2bbf8:	d9c00515 	stw	r7,20(sp)
   2bbfc:	002ad0c0 	call	2ad0c <__udivsi3>
   2bc00:	9009883a 	mov	r4,r18
   2bc04:	100b883a 	mov	r5,r2
   2bc08:	d8800415 	stw	r2,16(sp)
   2bc0c:	002adc80 	call	2adc8 <__mulsi3>
   2bc10:	a809883a 	mov	r4,r21
   2bc14:	a00b883a 	mov	r5,r20
   2bc18:	1025883a 	mov	r18,r2
   2bc1c:	002ad700 	call	2ad70 <__umodsi3>
   2bc20:	1004943a 	slli	r2,r2,16
   2bc24:	813fffcc 	andi	r4,r16,65535
   2bc28:	d8c00217 	ldw	r3,8(sp)
   2bc2c:	20a0b03a 	or	r16,r4,r2
   2bc30:	d9c00517 	ldw	r7,20(sp)
   2bc34:	da000417 	ldw	r8,16(sp)
   2bc38:	8480062e 	bgeu	r16,r18,2bc54 <__divdf3+0x5b8>
   2bc3c:	85a1883a 	add	r16,r16,r22
   2bc40:	40bfffc4 	addi	r2,r8,-1
   2bc44:	8580ac36 	bltu	r16,r22,2bef8 <__divdf3+0x85c>
   2bc48:	8480ab2e 	bgeu	r16,r18,2bef8 <__divdf3+0x85c>
   2bc4c:	423fff84 	addi	r8,r8,-2
   2bc50:	85a1883a 	add	r16,r16,r22
   2bc54:	3804943a 	slli	r2,r7,16
   2bc58:	84a1c83a 	sub	r16,r16,r18
   2bc5c:	e009883a 	mov	r4,fp
   2bc60:	1228b03a 	or	r20,r2,r8
   2bc64:	a1ffffcc 	andi	r7,r20,65535
   2bc68:	a024d43a 	srli	r18,r20,16
   2bc6c:	380b883a 	mov	r5,r7
   2bc70:	d8c00215 	stw	r3,8(sp)
   2bc74:	d9c00515 	stw	r7,20(sp)
   2bc78:	002adc80 	call	2adc8 <__mulsi3>
   2bc7c:	900b883a 	mov	r5,r18
   2bc80:	e009883a 	mov	r4,fp
   2bc84:	102b883a 	mov	r21,r2
   2bc88:	002adc80 	call	2adc8 <__mulsi3>
   2bc8c:	900b883a 	mov	r5,r18
   2bc90:	b809883a 	mov	r4,r23
   2bc94:	1039883a 	mov	fp,r2
   2bc98:	002adc80 	call	2adc8 <__mulsi3>
   2bc9c:	d9c00517 	ldw	r7,20(sp)
   2bca0:	b80b883a 	mov	r5,r23
   2bca4:	1025883a 	mov	r18,r2
   2bca8:	3809883a 	mov	r4,r7
   2bcac:	002adc80 	call	2adc8 <__mulsi3>
   2bcb0:	a808d43a 	srli	r4,r21,16
   2bcb4:	1705883a 	add	r2,r2,fp
   2bcb8:	d8c00217 	ldw	r3,8(sp)
   2bcbc:	2085883a 	add	r2,r4,r2
   2bcc0:	1700022e 	bgeu	r2,fp,2bccc <__divdf3+0x630>
   2bcc4:	01000074 	movhi	r4,1
   2bcc8:	9125883a 	add	r18,r18,r4
   2bccc:	1008d43a 	srli	r4,r2,16
   2bcd0:	1004943a 	slli	r2,r2,16
   2bcd4:	ad7fffcc 	andi	r21,r21,65535
   2bcd8:	2489883a 	add	r4,r4,r18
   2bcdc:	1545883a 	add	r2,r2,r21
   2bce0:	81003836 	bltu	r16,r4,2bdc4 <__divdf3+0x728>
   2bce4:	81003626 	beq	r16,r4,2bdc0 <__divdf3+0x724>
   2bce8:	a5000054 	ori	r20,r20,1
   2bcec:	1880ffc4 	addi	r2,r3,1023
   2bcf0:	00bf2e0e 	bge	zero,r2,2b9ac <__alt_data_end+0xfffeb9ac>
   2bcf4:	a10001cc 	andi	r4,r20,7
   2bcf8:	20000726 	beq	r4,zero,2bd18 <__divdf3+0x67c>
   2bcfc:	a10003cc 	andi	r4,r20,15
   2bd00:	01400104 	movi	r5,4
   2bd04:	21400426 	beq	r4,r5,2bd18 <__divdf3+0x67c>
   2bd08:	a149883a 	add	r4,r20,r5
   2bd0c:	2529803a 	cmpltu	r20,r4,r20
   2bd10:	8d23883a 	add	r17,r17,r20
   2bd14:	2029883a 	mov	r20,r4
   2bd18:	8900402c 	andhi	r4,r17,256
   2bd1c:	20000426 	beq	r4,zero,2bd30 <__divdf3+0x694>
   2bd20:	18810004 	addi	r2,r3,1024
   2bd24:	00ffc034 	movhi	r3,65280
   2bd28:	18ffffc4 	addi	r3,r3,-1
   2bd2c:	88e2703a 	and	r17,r17,r3
   2bd30:	00c1ff84 	movi	r3,2046
   2bd34:	18beb416 	blt	r3,r2,2b808 <__alt_data_end+0xfffeb808>
   2bd38:	a028d0fa 	srli	r20,r20,3
   2bd3c:	882a977a 	slli	r21,r17,29
   2bd40:	8820927a 	slli	r16,r17,9
   2bd44:	1081ffcc 	andi	r2,r2,2047
   2bd48:	ad2ab03a 	or	r21,r21,r20
   2bd4c:	8020d33a 	srli	r16,r16,12
   2bd50:	9900004c 	andi	r4,r19,1
   2bd54:	003eb006 	br	2b818 <__alt_data_end+0xfffeb818>
   2bd58:	8080022c 	andhi	r2,r16,8
   2bd5c:	10001226 	beq	r2,zero,2bda8 <__divdf3+0x70c>
   2bd60:	8880022c 	andhi	r2,r17,8
   2bd64:	1000101e 	bne	r2,zero,2bda8 <__divdf3+0x70c>
   2bd68:	00800434 	movhi	r2,16
   2bd6c:	8c000234 	orhi	r16,r17,8
   2bd70:	10bfffc4 	addi	r2,r2,-1
   2bd74:	b809883a 	mov	r4,r23
   2bd78:	80a0703a 	and	r16,r16,r2
   2bd7c:	a02b883a 	mov	r21,r20
   2bd80:	003f0806 	br	2b9a4 <__alt_data_end+0xfffeb9a4>
   2bd84:	008000c4 	movi	r2,3
   2bd88:	3880b126 	beq	r7,r2,2c050 <__divdf3+0x9b4>
   2bd8c:	00800044 	movi	r2,1
   2bd90:	38805b1e 	bne	r7,r2,2bf00 <__divdf3+0x864>
   2bd94:	e009883a 	mov	r4,fp
   2bd98:	0005883a 	mov	r2,zero
   2bd9c:	0021883a 	mov	r16,zero
   2bda0:	002b883a 	mov	r21,zero
   2bda4:	003e9c06 	br	2b818 <__alt_data_end+0xfffeb818>
   2bda8:	00800434 	movhi	r2,16
   2bdac:	84000234 	orhi	r16,r16,8
   2bdb0:	10bfffc4 	addi	r2,r2,-1
   2bdb4:	b009883a 	mov	r4,r22
   2bdb8:	80a0703a 	and	r16,r16,r2
   2bdbc:	003ef906 	br	2b9a4 <__alt_data_end+0xfffeb9a4>
   2bdc0:	103fca26 	beq	r2,zero,2bcec <__alt_data_end+0xfffebcec>
   2bdc4:	b421883a 	add	r16,r22,r16
   2bdc8:	a17fffc4 	addi	r5,r20,-1
   2bdcc:	8580422e 	bgeu	r16,r22,2bed8 <__divdf3+0x83c>
   2bdd0:	2829883a 	mov	r20,r5
   2bdd4:	813fc41e 	bne	r16,r4,2bce8 <__alt_data_end+0xfffebce8>
   2bdd8:	d9800017 	ldw	r6,0(sp)
   2bddc:	30bfc21e 	bne	r6,r2,2bce8 <__alt_data_end+0xfffebce8>
   2bde0:	003fc206 	br	2bcec <__alt_data_end+0xfffebcec>
   2bde4:	143ff604 	addi	r16,r2,-40
   2bde8:	8c20983a 	sll	r16,r17,r16
   2bdec:	002b883a 	mov	r21,zero
   2bdf0:	003eb406 	br	2b8c4 <__alt_data_end+0xfffeb8c4>
   2bdf4:	d9800215 	stw	r6,8(sp)
   2bdf8:	d9c00515 	stw	r7,20(sp)
   2bdfc:	da000415 	stw	r8,16(sp)
   2be00:	002d6300 	call	2d630 <__clzsi2>
   2be04:	10800804 	addi	r2,r2,32
   2be08:	da000417 	ldw	r8,16(sp)
   2be0c:	d9c00517 	ldw	r7,20(sp)
   2be10:	d9800217 	ldw	r6,8(sp)
   2be14:	003ea106 	br	2b89c <__alt_data_end+0xfffeb89c>
   2be18:	147ff604 	addi	r17,r2,-40
   2be1c:	3462983a 	sll	r17,r6,r17
   2be20:	0029883a 	mov	r20,zero
   2be24:	003ec906 	br	2b94c <__alt_data_end+0xfffeb94c>
   2be28:	3009883a 	mov	r4,r6
   2be2c:	d9400115 	stw	r5,4(sp)
   2be30:	d9800215 	stw	r6,8(sp)
   2be34:	da000415 	stw	r8,16(sp)
   2be38:	da400315 	stw	r9,12(sp)
   2be3c:	002d6300 	call	2d630 <__clzsi2>
   2be40:	10800804 	addi	r2,r2,32
   2be44:	da400317 	ldw	r9,12(sp)
   2be48:	da000417 	ldw	r8,16(sp)
   2be4c:	d9800217 	ldw	r6,8(sp)
   2be50:	d9400117 	ldw	r5,4(sp)
   2be54:	003eb306 	br	2b924 <__alt_data_end+0xfffeb924>
   2be58:	d9800017 	ldw	r6,0(sp)
   2be5c:	a9ab883a 	add	r21,r21,r6
   2be60:	a98b803a 	cmpltu	r5,r21,r6
   2be64:	2d8b883a 	add	r5,r5,r22
   2be68:	2a11883a 	add	r8,r5,r8
   2be6c:	897fffc4 	addi	r5,r17,-1
   2be70:	b2000c2e 	bgeu	r22,r8,2bea4 <__divdf3+0x808>
   2be74:	41003f36 	bltu	r8,r4,2bf74 <__divdf3+0x8d8>
   2be78:	22006c26 	beq	r4,r8,2c02c <__divdf3+0x990>
   2be7c:	4109c83a 	sub	r4,r8,r4
   2be80:	2823883a 	mov	r17,r5
   2be84:	003f3b06 	br	2bb74 <__alt_data_end+0xfffebb74>
   2be88:	ad3ed336 	bltu	r21,r20,2b9d8 <__alt_data_end+0xfffeb9d8>
   2be8c:	a804d07a 	srli	r2,r21,1
   2be90:	802e97fa 	slli	r23,r16,31
   2be94:	a82a97fa 	slli	r21,r21,31
   2be98:	8020d07a 	srli	r16,r16,1
   2be9c:	b8aeb03a 	or	r23,r23,r2
   2bea0:	003ed006 	br	2b9e4 <__alt_data_end+0xfffeb9e4>
   2bea4:	b23ff51e 	bne	r22,r8,2be7c <__alt_data_end+0xfffebe7c>
   2bea8:	d9800017 	ldw	r6,0(sp)
   2beac:	a9bff12e 	bgeu	r21,r6,2be74 <__alt_data_end+0xfffebe74>
   2beb0:	b109c83a 	sub	r4,r22,r4
   2beb4:	2823883a 	mov	r17,r5
   2beb8:	003f2e06 	br	2bb74 <__alt_data_end+0xfffebb74>
   2bebc:	2021883a 	mov	r16,r4
   2bec0:	003eff06 	br	2bac0 <__alt_data_end+0xfffebac0>
   2bec4:	2023883a 	mov	r17,r4
   2bec8:	003ee406 	br	2ba5c <__alt_data_end+0xfffeba5c>
   2becc:	a8bfe236 	bltu	r21,r2,2be58 <__alt_data_end+0xfffebe58>
   2bed0:	0009883a 	mov	r4,zero
   2bed4:	003f2706 	br	2bb74 <__alt_data_end+0xfffebb74>
   2bed8:	81002d36 	bltu	r16,r4,2bf90 <__divdf3+0x8f4>
   2bedc:	24005626 	beq	r4,r16,2c038 <__divdf3+0x99c>
   2bee0:	2829883a 	mov	r20,r5
   2bee4:	003f8006 	br	2bce8 <__alt_data_end+0xfffebce8>
   2bee8:	053fffc4 	movi	r20,-1
   2beec:	003f7f06 	br	2bcec <__alt_data_end+0xfffebcec>
   2bef0:	200f883a 	mov	r7,r4
   2bef4:	003f3c06 	br	2bbe8 <__alt_data_end+0xfffebbe8>
   2bef8:	1011883a 	mov	r8,r2
   2befc:	003f5506 	br	2bc54 <__alt_data_end+0xfffebc54>
   2bf00:	e027883a 	mov	r19,fp
   2bf04:	003f7906 	br	2bcec <__alt_data_end+0xfffebcec>
   2bf08:	010007c4 	movi	r4,31
   2bf0c:	20c02816 	blt	r4,r3,2bfb0 <__divdf3+0x914>
   2bf10:	00800804 	movi	r2,32
   2bf14:	10c5c83a 	sub	r2,r2,r3
   2bf18:	888a983a 	sll	r5,r17,r2
   2bf1c:	a0c8d83a 	srl	r4,r20,r3
   2bf20:	a084983a 	sll	r2,r20,r2
   2bf24:	88e2d83a 	srl	r17,r17,r3
   2bf28:	2906b03a 	or	r3,r5,r4
   2bf2c:	1004c03a 	cmpne	r2,r2,zero
   2bf30:	1886b03a 	or	r3,r3,r2
   2bf34:	188001cc 	andi	r2,r3,7
   2bf38:	10000726 	beq	r2,zero,2bf58 <__divdf3+0x8bc>
   2bf3c:	188003cc 	andi	r2,r3,15
   2bf40:	01000104 	movi	r4,4
   2bf44:	11000426 	beq	r2,r4,2bf58 <__divdf3+0x8bc>
   2bf48:	1805883a 	mov	r2,r3
   2bf4c:	10c00104 	addi	r3,r2,4
   2bf50:	1885803a 	cmpltu	r2,r3,r2
   2bf54:	88a3883a 	add	r17,r17,r2
   2bf58:	8880202c 	andhi	r2,r17,128
   2bf5c:	10002926 	beq	r2,zero,2c004 <__divdf3+0x968>
   2bf60:	9900004c 	andi	r4,r19,1
   2bf64:	00800044 	movi	r2,1
   2bf68:	0021883a 	mov	r16,zero
   2bf6c:	002b883a 	mov	r21,zero
   2bf70:	003e2906 	br	2b818 <__alt_data_end+0xfffeb818>
   2bf74:	d9800017 	ldw	r6,0(sp)
   2bf78:	8c7fff84 	addi	r17,r17,-2
   2bf7c:	a9ab883a 	add	r21,r21,r6
   2bf80:	a98b803a 	cmpltu	r5,r21,r6
   2bf84:	2d8b883a 	add	r5,r5,r22
   2bf88:	2a11883a 	add	r8,r5,r8
   2bf8c:	003ef806 	br	2bb70 <__alt_data_end+0xfffebb70>
   2bf90:	d9800017 	ldw	r6,0(sp)
   2bf94:	318f883a 	add	r7,r6,r6
   2bf98:	398b803a 	cmpltu	r5,r7,r6
   2bf9c:	2d8d883a 	add	r6,r5,r22
   2bfa0:	81a1883a 	add	r16,r16,r6
   2bfa4:	a17fff84 	addi	r5,r20,-2
   2bfa8:	d9c00015 	stw	r7,0(sp)
   2bfac:	003f8806 	br	2bdd0 <__alt_data_end+0xfffebdd0>
   2bfb0:	013ff844 	movi	r4,-31
   2bfb4:	2085c83a 	sub	r2,r4,r2
   2bfb8:	8888d83a 	srl	r4,r17,r2
   2bfbc:	00800804 	movi	r2,32
   2bfc0:	18802126 	beq	r3,r2,2c048 <__divdf3+0x9ac>
   2bfc4:	04001004 	movi	r16,64
   2bfc8:	80c7c83a 	sub	r3,r16,r3
   2bfcc:	88e0983a 	sll	r16,r17,r3
   2bfd0:	8504b03a 	or	r2,r16,r20
   2bfd4:	1004c03a 	cmpne	r2,r2,zero
   2bfd8:	2084b03a 	or	r2,r4,r2
   2bfdc:	144001cc 	andi	r17,r2,7
   2bfe0:	88000d1e 	bne	r17,zero,2c018 <__divdf3+0x97c>
   2bfe4:	0021883a 	mov	r16,zero
   2bfe8:	102ad0fa 	srli	r21,r2,3
   2bfec:	9900004c 	andi	r4,r19,1
   2bff0:	0005883a 	mov	r2,zero
   2bff4:	ac6ab03a 	or	r21,r21,r17
   2bff8:	003e0706 	br	2b818 <__alt_data_end+0xfffeb818>
   2bffc:	1007883a 	mov	r3,r2
   2c000:	0023883a 	mov	r17,zero
   2c004:	8820927a 	slli	r16,r17,9
   2c008:	1805883a 	mov	r2,r3
   2c00c:	8822977a 	slli	r17,r17,29
   2c010:	8020d33a 	srli	r16,r16,12
   2c014:	003ff406 	br	2bfe8 <__alt_data_end+0xfffebfe8>
   2c018:	10c003cc 	andi	r3,r2,15
   2c01c:	01000104 	movi	r4,4
   2c020:	193ff626 	beq	r3,r4,2bffc <__alt_data_end+0xfffebffc>
   2c024:	0023883a 	mov	r17,zero
   2c028:	003fc806 	br	2bf4c <__alt_data_end+0xfffebf4c>
   2c02c:	a8bfd136 	bltu	r21,r2,2bf74 <__alt_data_end+0xfffebf74>
   2c030:	2823883a 	mov	r17,r5
   2c034:	003fa606 	br	2bed0 <__alt_data_end+0xfffebed0>
   2c038:	d9800017 	ldw	r6,0(sp)
   2c03c:	30bfd436 	bltu	r6,r2,2bf90 <__alt_data_end+0xfffebf90>
   2c040:	2829883a 	mov	r20,r5
   2c044:	003f6406 	br	2bdd8 <__alt_data_end+0xfffebdd8>
   2c048:	0021883a 	mov	r16,zero
   2c04c:	003fe006 	br	2bfd0 <__alt_data_end+0xfffebfd0>
   2c050:	00800434 	movhi	r2,16
   2c054:	8c000234 	orhi	r16,r17,8
   2c058:	10bfffc4 	addi	r2,r2,-1
   2c05c:	e009883a 	mov	r4,fp
   2c060:	80a0703a 	and	r16,r16,r2
   2c064:	a02b883a 	mov	r21,r20
   2c068:	003e4e06 	br	2b9a4 <__alt_data_end+0xfffeb9a4>

0002c06c <__eqdf2>:
   2c06c:	2804d53a 	srli	r2,r5,20
   2c070:	3806d53a 	srli	r3,r7,20
   2c074:	02000434 	movhi	r8,16
   2c078:	423fffc4 	addi	r8,r8,-1
   2c07c:	1081ffcc 	andi	r2,r2,2047
   2c080:	0281ffc4 	movi	r10,2047
   2c084:	2a12703a 	and	r9,r5,r8
   2c088:	18c1ffcc 	andi	r3,r3,2047
   2c08c:	3a10703a 	and	r8,r7,r8
   2c090:	280ad7fa 	srli	r5,r5,31
   2c094:	380ed7fa 	srli	r7,r7,31
   2c098:	12801026 	beq	r2,r10,2c0dc <__eqdf2+0x70>
   2c09c:	0281ffc4 	movi	r10,2047
   2c0a0:	1a800a26 	beq	r3,r10,2c0cc <__eqdf2+0x60>
   2c0a4:	10c00226 	beq	r2,r3,2c0b0 <__eqdf2+0x44>
   2c0a8:	00800044 	movi	r2,1
   2c0ac:	f800283a 	ret
   2c0b0:	4a3ffd1e 	bne	r9,r8,2c0a8 <__alt_data_end+0xfffec0a8>
   2c0b4:	21bffc1e 	bne	r4,r6,2c0a8 <__alt_data_end+0xfffec0a8>
   2c0b8:	29c00c26 	beq	r5,r7,2c0ec <__eqdf2+0x80>
   2c0bc:	103ffa1e 	bne	r2,zero,2c0a8 <__alt_data_end+0xfffec0a8>
   2c0c0:	2244b03a 	or	r2,r4,r9
   2c0c4:	1004c03a 	cmpne	r2,r2,zero
   2c0c8:	f800283a 	ret
   2c0cc:	3214b03a 	or	r10,r6,r8
   2c0d0:	503ff426 	beq	r10,zero,2c0a4 <__alt_data_end+0xfffec0a4>
   2c0d4:	00800044 	movi	r2,1
   2c0d8:	f800283a 	ret
   2c0dc:	2254b03a 	or	r10,r4,r9
   2c0e0:	503fee26 	beq	r10,zero,2c09c <__alt_data_end+0xfffec09c>
   2c0e4:	00800044 	movi	r2,1
   2c0e8:	f800283a 	ret
   2c0ec:	0005883a 	mov	r2,zero
   2c0f0:	f800283a 	ret

0002c0f4 <__gedf2>:
   2c0f4:	2804d53a 	srli	r2,r5,20
   2c0f8:	3806d53a 	srli	r3,r7,20
   2c0fc:	02000434 	movhi	r8,16
   2c100:	423fffc4 	addi	r8,r8,-1
   2c104:	1081ffcc 	andi	r2,r2,2047
   2c108:	0241ffc4 	movi	r9,2047
   2c10c:	2a14703a 	and	r10,r5,r8
   2c110:	18c1ffcc 	andi	r3,r3,2047
   2c114:	3a10703a 	and	r8,r7,r8
   2c118:	280ad7fa 	srli	r5,r5,31
   2c11c:	380ed7fa 	srli	r7,r7,31
   2c120:	12401d26 	beq	r2,r9,2c198 <__gedf2+0xa4>
   2c124:	0241ffc4 	movi	r9,2047
   2c128:	1a401226 	beq	r3,r9,2c174 <__gedf2+0x80>
   2c12c:	1000081e 	bne	r2,zero,2c150 <__gedf2+0x5c>
   2c130:	2296b03a 	or	r11,r4,r10
   2c134:	5813003a 	cmpeq	r9,r11,zero
   2c138:	1800091e 	bne	r3,zero,2c160 <__gedf2+0x6c>
   2c13c:	3218b03a 	or	r12,r6,r8
   2c140:	6000071e 	bne	r12,zero,2c160 <__gedf2+0x6c>
   2c144:	0005883a 	mov	r2,zero
   2c148:	5800101e 	bne	r11,zero,2c18c <__gedf2+0x98>
   2c14c:	f800283a 	ret
   2c150:	18000c1e 	bne	r3,zero,2c184 <__gedf2+0x90>
   2c154:	3212b03a 	or	r9,r6,r8
   2c158:	48000c26 	beq	r9,zero,2c18c <__gedf2+0x98>
   2c15c:	0013883a 	mov	r9,zero
   2c160:	39c03fcc 	andi	r7,r7,255
   2c164:	48000826 	beq	r9,zero,2c188 <__gedf2+0x94>
   2c168:	38000926 	beq	r7,zero,2c190 <__gedf2+0x9c>
   2c16c:	00800044 	movi	r2,1
   2c170:	f800283a 	ret
   2c174:	3212b03a 	or	r9,r6,r8
   2c178:	483fec26 	beq	r9,zero,2c12c <__alt_data_end+0xfffec12c>
   2c17c:	00bfff84 	movi	r2,-2
   2c180:	f800283a 	ret
   2c184:	39c03fcc 	andi	r7,r7,255
   2c188:	29c00626 	beq	r5,r7,2c1a4 <__gedf2+0xb0>
   2c18c:	283ff726 	beq	r5,zero,2c16c <__alt_data_end+0xfffec16c>
   2c190:	00bfffc4 	movi	r2,-1
   2c194:	f800283a 	ret
   2c198:	2292b03a 	or	r9,r4,r10
   2c19c:	483fe126 	beq	r9,zero,2c124 <__alt_data_end+0xfffec124>
   2c1a0:	003ff606 	br	2c17c <__alt_data_end+0xfffec17c>
   2c1a4:	18bff916 	blt	r3,r2,2c18c <__alt_data_end+0xfffec18c>
   2c1a8:	10c00316 	blt	r2,r3,2c1b8 <__gedf2+0xc4>
   2c1ac:	42bff736 	bltu	r8,r10,2c18c <__alt_data_end+0xfffec18c>
   2c1b0:	52000326 	beq	r10,r8,2c1c0 <__gedf2+0xcc>
   2c1b4:	5200042e 	bgeu	r10,r8,2c1c8 <__gedf2+0xd4>
   2c1b8:	283fec1e 	bne	r5,zero,2c16c <__alt_data_end+0xfffec16c>
   2c1bc:	003ff406 	br	2c190 <__alt_data_end+0xfffec190>
   2c1c0:	313ff236 	bltu	r6,r4,2c18c <__alt_data_end+0xfffec18c>
   2c1c4:	21bffc36 	bltu	r4,r6,2c1b8 <__alt_data_end+0xfffec1b8>
   2c1c8:	0005883a 	mov	r2,zero
   2c1cc:	f800283a 	ret

0002c1d0 <__ledf2>:
   2c1d0:	2804d53a 	srli	r2,r5,20
   2c1d4:	3810d53a 	srli	r8,r7,20
   2c1d8:	00c00434 	movhi	r3,16
   2c1dc:	18ffffc4 	addi	r3,r3,-1
   2c1e0:	1081ffcc 	andi	r2,r2,2047
   2c1e4:	0241ffc4 	movi	r9,2047
   2c1e8:	28d4703a 	and	r10,r5,r3
   2c1ec:	4201ffcc 	andi	r8,r8,2047
   2c1f0:	38c6703a 	and	r3,r7,r3
   2c1f4:	280ad7fa 	srli	r5,r5,31
   2c1f8:	380ed7fa 	srli	r7,r7,31
   2c1fc:	12401f26 	beq	r2,r9,2c27c <__ledf2+0xac>
   2c200:	0241ffc4 	movi	r9,2047
   2c204:	42401426 	beq	r8,r9,2c258 <__ledf2+0x88>
   2c208:	1000091e 	bne	r2,zero,2c230 <__ledf2+0x60>
   2c20c:	2296b03a 	or	r11,r4,r10
   2c210:	5813003a 	cmpeq	r9,r11,zero
   2c214:	29403fcc 	andi	r5,r5,255
   2c218:	40000a1e 	bne	r8,zero,2c244 <__ledf2+0x74>
   2c21c:	30d8b03a 	or	r12,r6,r3
   2c220:	6000081e 	bne	r12,zero,2c244 <__ledf2+0x74>
   2c224:	0005883a 	mov	r2,zero
   2c228:	5800111e 	bne	r11,zero,2c270 <__ledf2+0xa0>
   2c22c:	f800283a 	ret
   2c230:	29403fcc 	andi	r5,r5,255
   2c234:	40000c1e 	bne	r8,zero,2c268 <__ledf2+0x98>
   2c238:	30d2b03a 	or	r9,r6,r3
   2c23c:	48000c26 	beq	r9,zero,2c270 <__ledf2+0xa0>
   2c240:	0013883a 	mov	r9,zero
   2c244:	39c03fcc 	andi	r7,r7,255
   2c248:	48000826 	beq	r9,zero,2c26c <__ledf2+0x9c>
   2c24c:	38001126 	beq	r7,zero,2c294 <__ledf2+0xc4>
   2c250:	00800044 	movi	r2,1
   2c254:	f800283a 	ret
   2c258:	30d2b03a 	or	r9,r6,r3
   2c25c:	483fea26 	beq	r9,zero,2c208 <__alt_data_end+0xfffec208>
   2c260:	00800084 	movi	r2,2
   2c264:	f800283a 	ret
   2c268:	39c03fcc 	andi	r7,r7,255
   2c26c:	39400726 	beq	r7,r5,2c28c <__ledf2+0xbc>
   2c270:	2800081e 	bne	r5,zero,2c294 <__ledf2+0xc4>
   2c274:	00800044 	movi	r2,1
   2c278:	f800283a 	ret
   2c27c:	2292b03a 	or	r9,r4,r10
   2c280:	483fdf26 	beq	r9,zero,2c200 <__alt_data_end+0xfffec200>
   2c284:	00800084 	movi	r2,2
   2c288:	f800283a 	ret
   2c28c:	4080030e 	bge	r8,r2,2c29c <__ledf2+0xcc>
   2c290:	383fef26 	beq	r7,zero,2c250 <__alt_data_end+0xfffec250>
   2c294:	00bfffc4 	movi	r2,-1
   2c298:	f800283a 	ret
   2c29c:	123feb16 	blt	r2,r8,2c24c <__alt_data_end+0xfffec24c>
   2c2a0:	1abff336 	bltu	r3,r10,2c270 <__alt_data_end+0xfffec270>
   2c2a4:	50c00326 	beq	r10,r3,2c2b4 <__ledf2+0xe4>
   2c2a8:	50c0042e 	bgeu	r10,r3,2c2bc <__ledf2+0xec>
   2c2ac:	283fe81e 	bne	r5,zero,2c250 <__alt_data_end+0xfffec250>
   2c2b0:	003ff806 	br	2c294 <__alt_data_end+0xfffec294>
   2c2b4:	313fee36 	bltu	r6,r4,2c270 <__alt_data_end+0xfffec270>
   2c2b8:	21bffc36 	bltu	r4,r6,2c2ac <__alt_data_end+0xfffec2ac>
   2c2bc:	0005883a 	mov	r2,zero
   2c2c0:	f800283a 	ret

0002c2c4 <__muldf3>:
   2c2c4:	deffee04 	addi	sp,sp,-72
   2c2c8:	dd000c15 	stw	r20,48(sp)
   2c2cc:	2828d53a 	srli	r20,r5,20
   2c2d0:	ddc00f15 	stw	r23,60(sp)
   2c2d4:	282ed7fa 	srli	r23,r5,31
   2c2d8:	dc000815 	stw	r16,32(sp)
   2c2dc:	04000434 	movhi	r16,16
   2c2e0:	dcc00b15 	stw	r19,44(sp)
   2c2e4:	843fffc4 	addi	r16,r16,-1
   2c2e8:	dfc01115 	stw	ra,68(sp)
   2c2ec:	df001015 	stw	fp,64(sp)
   2c2f0:	dd800e15 	stw	r22,56(sp)
   2c2f4:	dd400d15 	stw	r21,52(sp)
   2c2f8:	dc800a15 	stw	r18,40(sp)
   2c2fc:	dc400915 	stw	r17,36(sp)
   2c300:	a501ffcc 	andi	r20,r20,2047
   2c304:	2c20703a 	and	r16,r5,r16
   2c308:	b827883a 	mov	r19,r23
   2c30c:	ba403fcc 	andi	r9,r23,255
   2c310:	a0006026 	beq	r20,zero,2c494 <__muldf3+0x1d0>
   2c314:	0081ffc4 	movi	r2,2047
   2c318:	202d883a 	mov	r22,r4
   2c31c:	a0803626 	beq	r20,r2,2c3f8 <__muldf3+0x134>
   2c320:	84000434 	orhi	r16,r16,16
   2c324:	200ad77a 	srli	r5,r4,29
   2c328:	800490fa 	slli	r2,r16,3
   2c32c:	202c90fa 	slli	r22,r4,3
   2c330:	a53f0044 	addi	r20,r20,-1023
   2c334:	28a0b03a 	or	r16,r5,r2
   2c338:	002b883a 	mov	r21,zero
   2c33c:	000b883a 	mov	r5,zero
   2c340:	3804d53a 	srli	r2,r7,20
   2c344:	3838d7fa 	srli	fp,r7,31
   2c348:	04400434 	movhi	r17,16
   2c34c:	8c7fffc4 	addi	r17,r17,-1
   2c350:	1081ffcc 	andi	r2,r2,2047
   2c354:	3025883a 	mov	r18,r6
   2c358:	3c62703a 	and	r17,r7,r17
   2c35c:	e2803fcc 	andi	r10,fp,255
   2c360:	10006d26 	beq	r2,zero,2c518 <__muldf3+0x254>
   2c364:	00c1ffc4 	movi	r3,2047
   2c368:	10c06526 	beq	r2,r3,2c500 <__muldf3+0x23c>
   2c36c:	8c400434 	orhi	r17,r17,16
   2c370:	300ed77a 	srli	r7,r6,29
   2c374:	880690fa 	slli	r3,r17,3
   2c378:	302490fa 	slli	r18,r6,3
   2c37c:	10bf0044 	addi	r2,r2,-1023
   2c380:	38e2b03a 	or	r17,r7,r3
   2c384:	000f883a 	mov	r7,zero
   2c388:	a087883a 	add	r3,r20,r2
   2c38c:	010003c4 	movi	r4,15
   2c390:	3d44b03a 	or	r2,r7,r21
   2c394:	e5ccf03a 	xor	r6,fp,r23
   2c398:	1a000044 	addi	r8,r3,1
   2c39c:	20809b36 	bltu	r4,r2,2c60c <__muldf3+0x348>
   2c3a0:	100490ba 	slli	r2,r2,2
   2c3a4:	010000f4 	movhi	r4,3
   2c3a8:	2130ee04 	addi	r4,r4,-15432
   2c3ac:	1105883a 	add	r2,r2,r4
   2c3b0:	10800017 	ldw	r2,0(r2)
   2c3b4:	1000683a 	jmp	r2
   2c3b8:	0002c60c 	andi	zero,zero,2840
   2c3bc:	0002c418 	cmpnei	zero,zero,2832
   2c3c0:	0002c418 	cmpnei	zero,zero,2832
   2c3c4:	0002c414 	movui	zero,2832
   2c3c8:	0002c5e8 	cmpgeui	zero,zero,2839
   2c3cc:	0002c5e8 	cmpgeui	zero,zero,2839
   2c3d0:	0002c5d0 	cmplti	zero,zero,2839
   2c3d4:	0002c414 	movui	zero,2832
   2c3d8:	0002c5e8 	cmpgeui	zero,zero,2839
   2c3dc:	0002c5d0 	cmplti	zero,zero,2839
   2c3e0:	0002c5e8 	cmpgeui	zero,zero,2839
   2c3e4:	0002c414 	movui	zero,2832
   2c3e8:	0002c5f8 	rdprs	zero,zero,2839
   2c3ec:	0002c5f8 	rdprs	zero,zero,2839
   2c3f0:	0002c5f8 	rdprs	zero,zero,2839
   2c3f4:	0002c958 	cmpnei	zero,zero,2853
   2c3f8:	2404b03a 	or	r2,r4,r16
   2c3fc:	1000711e 	bne	r2,zero,2c5c4 <__muldf3+0x300>
   2c400:	05400204 	movi	r21,8
   2c404:	0021883a 	mov	r16,zero
   2c408:	002d883a 	mov	r22,zero
   2c40c:	01400084 	movi	r5,2
   2c410:	003fcb06 	br	2c340 <__alt_data_end+0xfffec340>
   2c414:	500d883a 	mov	r6,r10
   2c418:	00800084 	movi	r2,2
   2c41c:	38805926 	beq	r7,r2,2c584 <__muldf3+0x2c0>
   2c420:	008000c4 	movi	r2,3
   2c424:	3881bb26 	beq	r7,r2,2cb14 <__muldf3+0x850>
   2c428:	00800044 	movi	r2,1
   2c42c:	3881961e 	bne	r7,r2,2ca88 <__muldf3+0x7c4>
   2c430:	3027883a 	mov	r19,r6
   2c434:	0005883a 	mov	r2,zero
   2c438:	0021883a 	mov	r16,zero
   2c43c:	002d883a 	mov	r22,zero
   2c440:	1004953a 	slli	r2,r2,20
   2c444:	98c03fcc 	andi	r3,r19,255
   2c448:	04400434 	movhi	r17,16
   2c44c:	8c7fffc4 	addi	r17,r17,-1
   2c450:	180697fa 	slli	r3,r3,31
   2c454:	8460703a 	and	r16,r16,r17
   2c458:	80a0b03a 	or	r16,r16,r2
   2c45c:	80c6b03a 	or	r3,r16,r3
   2c460:	b005883a 	mov	r2,r22
   2c464:	dfc01117 	ldw	ra,68(sp)
   2c468:	df001017 	ldw	fp,64(sp)
   2c46c:	ddc00f17 	ldw	r23,60(sp)
   2c470:	dd800e17 	ldw	r22,56(sp)
   2c474:	dd400d17 	ldw	r21,52(sp)
   2c478:	dd000c17 	ldw	r20,48(sp)
   2c47c:	dcc00b17 	ldw	r19,44(sp)
   2c480:	dc800a17 	ldw	r18,40(sp)
   2c484:	dc400917 	ldw	r17,36(sp)
   2c488:	dc000817 	ldw	r16,32(sp)
   2c48c:	dec01204 	addi	sp,sp,72
   2c490:	f800283a 	ret
   2c494:	2404b03a 	or	r2,r4,r16
   2c498:	202b883a 	mov	r21,r4
   2c49c:	10004426 	beq	r2,zero,2c5b0 <__muldf3+0x2ec>
   2c4a0:	80015126 	beq	r16,zero,2c9e8 <__muldf3+0x724>
   2c4a4:	8009883a 	mov	r4,r16
   2c4a8:	d9800715 	stw	r6,28(sp)
   2c4ac:	d9c00215 	stw	r7,8(sp)
   2c4b0:	da400415 	stw	r9,16(sp)
   2c4b4:	002d6300 	call	2d630 <__clzsi2>
   2c4b8:	d9800717 	ldw	r6,28(sp)
   2c4bc:	d9c00217 	ldw	r7,8(sp)
   2c4c0:	da400417 	ldw	r9,16(sp)
   2c4c4:	113ffd44 	addi	r4,r2,-11
   2c4c8:	00c00704 	movi	r3,28
   2c4cc:	19014216 	blt	r3,r4,2c9d8 <__muldf3+0x714>
   2c4d0:	00c00744 	movi	r3,29
   2c4d4:	15bffe04 	addi	r22,r2,-8
   2c4d8:	1907c83a 	sub	r3,r3,r4
   2c4dc:	85a0983a 	sll	r16,r16,r22
   2c4e0:	a8c6d83a 	srl	r3,r21,r3
   2c4e4:	adac983a 	sll	r22,r21,r22
   2c4e8:	1c20b03a 	or	r16,r3,r16
   2c4ec:	1080fcc4 	addi	r2,r2,1011
   2c4f0:	00a9c83a 	sub	r20,zero,r2
   2c4f4:	002b883a 	mov	r21,zero
   2c4f8:	000b883a 	mov	r5,zero
   2c4fc:	003f9006 	br	2c340 <__alt_data_end+0xfffec340>
   2c500:	3446b03a 	or	r3,r6,r17
   2c504:	1800281e 	bne	r3,zero,2c5a8 <__muldf3+0x2e4>
   2c508:	0023883a 	mov	r17,zero
   2c50c:	0025883a 	mov	r18,zero
   2c510:	01c00084 	movi	r7,2
   2c514:	003f9c06 	br	2c388 <__alt_data_end+0xfffec388>
   2c518:	3446b03a 	or	r3,r6,r17
   2c51c:	18001e26 	beq	r3,zero,2c598 <__muldf3+0x2d4>
   2c520:	88012126 	beq	r17,zero,2c9a8 <__muldf3+0x6e4>
   2c524:	8809883a 	mov	r4,r17
   2c528:	d9400215 	stw	r5,8(sp)
   2c52c:	d9800715 	stw	r6,28(sp)
   2c530:	da400415 	stw	r9,16(sp)
   2c534:	da800315 	stw	r10,12(sp)
   2c538:	002d6300 	call	2d630 <__clzsi2>
   2c53c:	d9400217 	ldw	r5,8(sp)
   2c540:	d9800717 	ldw	r6,28(sp)
   2c544:	da400417 	ldw	r9,16(sp)
   2c548:	da800317 	ldw	r10,12(sp)
   2c54c:	113ffd44 	addi	r4,r2,-11
   2c550:	00c00704 	movi	r3,28
   2c554:	19011016 	blt	r3,r4,2c998 <__muldf3+0x6d4>
   2c558:	00c00744 	movi	r3,29
   2c55c:	14bffe04 	addi	r18,r2,-8
   2c560:	1907c83a 	sub	r3,r3,r4
   2c564:	8ca2983a 	sll	r17,r17,r18
   2c568:	30c6d83a 	srl	r3,r6,r3
   2c56c:	34a4983a 	sll	r18,r6,r18
   2c570:	1c62b03a 	or	r17,r3,r17
   2c574:	1080fcc4 	addi	r2,r2,1011
   2c578:	0085c83a 	sub	r2,zero,r2
   2c57c:	000f883a 	mov	r7,zero
   2c580:	003f8106 	br	2c388 <__alt_data_end+0xfffec388>
   2c584:	3027883a 	mov	r19,r6
   2c588:	0081ffc4 	movi	r2,2047
   2c58c:	0021883a 	mov	r16,zero
   2c590:	002d883a 	mov	r22,zero
   2c594:	003faa06 	br	2c440 <__alt_data_end+0xfffec440>
   2c598:	0023883a 	mov	r17,zero
   2c59c:	0025883a 	mov	r18,zero
   2c5a0:	01c00044 	movi	r7,1
   2c5a4:	003f7806 	br	2c388 <__alt_data_end+0xfffec388>
   2c5a8:	01c000c4 	movi	r7,3
   2c5ac:	003f7606 	br	2c388 <__alt_data_end+0xfffec388>
   2c5b0:	05400104 	movi	r21,4
   2c5b4:	0021883a 	mov	r16,zero
   2c5b8:	002d883a 	mov	r22,zero
   2c5bc:	01400044 	movi	r5,1
   2c5c0:	003f5f06 	br	2c340 <__alt_data_end+0xfffec340>
   2c5c4:	05400304 	movi	r21,12
   2c5c8:	014000c4 	movi	r5,3
   2c5cc:	003f5c06 	br	2c340 <__alt_data_end+0xfffec340>
   2c5d0:	04000434 	movhi	r16,16
   2c5d4:	0027883a 	mov	r19,zero
   2c5d8:	843fffc4 	addi	r16,r16,-1
   2c5dc:	05bfffc4 	movi	r22,-1
   2c5e0:	0081ffc4 	movi	r2,2047
   2c5e4:	003f9606 	br	2c440 <__alt_data_end+0xfffec440>
   2c5e8:	8023883a 	mov	r17,r16
   2c5ec:	b025883a 	mov	r18,r22
   2c5f0:	280f883a 	mov	r7,r5
   2c5f4:	003f8806 	br	2c418 <__alt_data_end+0xfffec418>
   2c5f8:	8023883a 	mov	r17,r16
   2c5fc:	b025883a 	mov	r18,r22
   2c600:	480d883a 	mov	r6,r9
   2c604:	280f883a 	mov	r7,r5
   2c608:	003f8306 	br	2c418 <__alt_data_end+0xfffec418>
   2c60c:	b026d43a 	srli	r19,r22,16
   2c610:	902ed43a 	srli	r23,r18,16
   2c614:	b5bfffcc 	andi	r22,r22,65535
   2c618:	94bfffcc 	andi	r18,r18,65535
   2c61c:	b00b883a 	mov	r5,r22
   2c620:	9009883a 	mov	r4,r18
   2c624:	d8c00515 	stw	r3,20(sp)
   2c628:	d9800715 	stw	r6,28(sp)
   2c62c:	da000615 	stw	r8,24(sp)
   2c630:	002adc80 	call	2adc8 <__mulsi3>
   2c634:	980b883a 	mov	r5,r19
   2c638:	9009883a 	mov	r4,r18
   2c63c:	1029883a 	mov	r20,r2
   2c640:	002adc80 	call	2adc8 <__mulsi3>
   2c644:	b80b883a 	mov	r5,r23
   2c648:	9809883a 	mov	r4,r19
   2c64c:	102b883a 	mov	r21,r2
   2c650:	002adc80 	call	2adc8 <__mulsi3>
   2c654:	b809883a 	mov	r4,r23
   2c658:	b00b883a 	mov	r5,r22
   2c65c:	1039883a 	mov	fp,r2
   2c660:	002adc80 	call	2adc8 <__mulsi3>
   2c664:	a008d43a 	srli	r4,r20,16
   2c668:	1545883a 	add	r2,r2,r21
   2c66c:	d8c00517 	ldw	r3,20(sp)
   2c670:	2085883a 	add	r2,r4,r2
   2c674:	d9800717 	ldw	r6,28(sp)
   2c678:	da000617 	ldw	r8,24(sp)
   2c67c:	1540022e 	bgeu	r2,r21,2c688 <__muldf3+0x3c4>
   2c680:	01000074 	movhi	r4,1
   2c684:	e139883a 	add	fp,fp,r4
   2c688:	100e943a 	slli	r7,r2,16
   2c68c:	1004d43a 	srli	r2,r2,16
   2c690:	882ad43a 	srli	r21,r17,16
   2c694:	a53fffcc 	andi	r20,r20,65535
   2c698:	8c7fffcc 	andi	r17,r17,65535
   2c69c:	3d29883a 	add	r20,r7,r20
   2c6a0:	b00b883a 	mov	r5,r22
   2c6a4:	8809883a 	mov	r4,r17
   2c6a8:	d8c00515 	stw	r3,20(sp)
   2c6ac:	d9800715 	stw	r6,28(sp)
   2c6b0:	da000615 	stw	r8,24(sp)
   2c6b4:	dd000115 	stw	r20,4(sp)
   2c6b8:	d8800015 	stw	r2,0(sp)
   2c6bc:	002adc80 	call	2adc8 <__mulsi3>
   2c6c0:	980b883a 	mov	r5,r19
   2c6c4:	8809883a 	mov	r4,r17
   2c6c8:	d8800215 	stw	r2,8(sp)
   2c6cc:	002adc80 	call	2adc8 <__mulsi3>
   2c6d0:	9809883a 	mov	r4,r19
   2c6d4:	a80b883a 	mov	r5,r21
   2c6d8:	1029883a 	mov	r20,r2
   2c6dc:	002adc80 	call	2adc8 <__mulsi3>
   2c6e0:	b00b883a 	mov	r5,r22
   2c6e4:	a809883a 	mov	r4,r21
   2c6e8:	d8800415 	stw	r2,16(sp)
   2c6ec:	002adc80 	call	2adc8 <__mulsi3>
   2c6f0:	d9c00217 	ldw	r7,8(sp)
   2c6f4:	1505883a 	add	r2,r2,r20
   2c6f8:	d8c00517 	ldw	r3,20(sp)
   2c6fc:	3826d43a 	srli	r19,r7,16
   2c700:	d9800717 	ldw	r6,28(sp)
   2c704:	da000617 	ldw	r8,24(sp)
   2c708:	9885883a 	add	r2,r19,r2
   2c70c:	da400417 	ldw	r9,16(sp)
   2c710:	1500022e 	bgeu	r2,r20,2c71c <__muldf3+0x458>
   2c714:	01000074 	movhi	r4,1
   2c718:	4913883a 	add	r9,r9,r4
   2c71c:	1028d43a 	srli	r20,r2,16
   2c720:	1004943a 	slli	r2,r2,16
   2c724:	802cd43a 	srli	r22,r16,16
   2c728:	843fffcc 	andi	r16,r16,65535
   2c72c:	3cffffcc 	andi	r19,r7,65535
   2c730:	9009883a 	mov	r4,r18
   2c734:	800b883a 	mov	r5,r16
   2c738:	a269883a 	add	r20,r20,r9
   2c73c:	d8c00515 	stw	r3,20(sp)
   2c740:	d9800715 	stw	r6,28(sp)
   2c744:	da000615 	stw	r8,24(sp)
   2c748:	14e7883a 	add	r19,r2,r19
   2c74c:	002adc80 	call	2adc8 <__mulsi3>
   2c750:	9009883a 	mov	r4,r18
   2c754:	b00b883a 	mov	r5,r22
   2c758:	d8800315 	stw	r2,12(sp)
   2c75c:	002adc80 	call	2adc8 <__mulsi3>
   2c760:	b809883a 	mov	r4,r23
   2c764:	b00b883a 	mov	r5,r22
   2c768:	d8800215 	stw	r2,8(sp)
   2c76c:	002adc80 	call	2adc8 <__mulsi3>
   2c770:	b80b883a 	mov	r5,r23
   2c774:	8009883a 	mov	r4,r16
   2c778:	d8800415 	stw	r2,16(sp)
   2c77c:	002adc80 	call	2adc8 <__mulsi3>
   2c780:	da800317 	ldw	r10,12(sp)
   2c784:	d9c00217 	ldw	r7,8(sp)
   2c788:	d9000017 	ldw	r4,0(sp)
   2c78c:	502ed43a 	srli	r23,r10,16
   2c790:	11c5883a 	add	r2,r2,r7
   2c794:	24e5883a 	add	r18,r4,r19
   2c798:	b885883a 	add	r2,r23,r2
   2c79c:	d8c00517 	ldw	r3,20(sp)
   2c7a0:	d9800717 	ldw	r6,28(sp)
   2c7a4:	da000617 	ldw	r8,24(sp)
   2c7a8:	da400417 	ldw	r9,16(sp)
   2c7ac:	11c0022e 	bgeu	r2,r7,2c7b8 <__muldf3+0x4f4>
   2c7b0:	01000074 	movhi	r4,1
   2c7b4:	4913883a 	add	r9,r9,r4
   2c7b8:	100ed43a 	srli	r7,r2,16
   2c7bc:	1004943a 	slli	r2,r2,16
   2c7c0:	55ffffcc 	andi	r23,r10,65535
   2c7c4:	3a53883a 	add	r9,r7,r9
   2c7c8:	8809883a 	mov	r4,r17
   2c7cc:	800b883a 	mov	r5,r16
   2c7d0:	d8c00515 	stw	r3,20(sp)
   2c7d4:	d9800715 	stw	r6,28(sp)
   2c7d8:	da000615 	stw	r8,24(sp)
   2c7dc:	da400415 	stw	r9,16(sp)
   2c7e0:	15ef883a 	add	r23,r2,r23
   2c7e4:	002adc80 	call	2adc8 <__mulsi3>
   2c7e8:	8809883a 	mov	r4,r17
   2c7ec:	b00b883a 	mov	r5,r22
   2c7f0:	d8800215 	stw	r2,8(sp)
   2c7f4:	002adc80 	call	2adc8 <__mulsi3>
   2c7f8:	b00b883a 	mov	r5,r22
   2c7fc:	a809883a 	mov	r4,r21
   2c800:	d8800315 	stw	r2,12(sp)
   2c804:	002adc80 	call	2adc8 <__mulsi3>
   2c808:	8009883a 	mov	r4,r16
   2c80c:	a80b883a 	mov	r5,r21
   2c810:	1023883a 	mov	r17,r2
   2c814:	002adc80 	call	2adc8 <__mulsi3>
   2c818:	d9c00217 	ldw	r7,8(sp)
   2c81c:	da800317 	ldw	r10,12(sp)
   2c820:	d8c00517 	ldw	r3,20(sp)
   2c824:	3808d43a 	srli	r4,r7,16
   2c828:	1285883a 	add	r2,r2,r10
   2c82c:	d9800717 	ldw	r6,28(sp)
   2c830:	2085883a 	add	r2,r4,r2
   2c834:	da000617 	ldw	r8,24(sp)
   2c838:	da400417 	ldw	r9,16(sp)
   2c83c:	1280022e 	bgeu	r2,r10,2c848 <__muldf3+0x584>
   2c840:	01000074 	movhi	r4,1
   2c844:	8923883a 	add	r17,r17,r4
   2c848:	1008943a 	slli	r4,r2,16
   2c84c:	39ffffcc 	andi	r7,r7,65535
   2c850:	e4b9883a 	add	fp,fp,r18
   2c854:	21cf883a 	add	r7,r4,r7
   2c858:	e4e7803a 	cmpltu	r19,fp,r19
   2c85c:	3d0f883a 	add	r7,r7,r20
   2c860:	bf39883a 	add	fp,r23,fp
   2c864:	99c9883a 	add	r4,r19,r7
   2c868:	e5ef803a 	cmpltu	r23,fp,r23
   2c86c:	490b883a 	add	r5,r9,r4
   2c870:	1004d43a 	srli	r2,r2,16
   2c874:	b965883a 	add	r18,r23,r5
   2c878:	24c9803a 	cmpltu	r4,r4,r19
   2c87c:	3d29803a 	cmpltu	r20,r7,r20
   2c880:	a128b03a 	or	r20,r20,r4
   2c884:	95ef803a 	cmpltu	r23,r18,r23
   2c888:	2a53803a 	cmpltu	r9,r5,r9
   2c88c:	a0a9883a 	add	r20,r20,r2
   2c890:	4deeb03a 	or	r23,r9,r23
   2c894:	a5ef883a 	add	r23,r20,r23
   2c898:	bc63883a 	add	r17,r23,r17
   2c89c:	e004927a 	slli	r2,fp,9
   2c8a0:	d9000117 	ldw	r4,4(sp)
   2c8a4:	882e927a 	slli	r23,r17,9
   2c8a8:	9022d5fa 	srli	r17,r18,23
   2c8ac:	e038d5fa 	srli	fp,fp,23
   2c8b0:	1104b03a 	or	r2,r2,r4
   2c8b4:	9024927a 	slli	r18,r18,9
   2c8b8:	1004c03a 	cmpne	r2,r2,zero
   2c8bc:	bc62b03a 	or	r17,r23,r17
   2c8c0:	1738b03a 	or	fp,r2,fp
   2c8c4:	8880402c 	andhi	r2,r17,256
   2c8c8:	e4a4b03a 	or	r18,fp,r18
   2c8cc:	10000726 	beq	r2,zero,2c8ec <__muldf3+0x628>
   2c8d0:	9006d07a 	srli	r3,r18,1
   2c8d4:	880497fa 	slli	r2,r17,31
   2c8d8:	9480004c 	andi	r18,r18,1
   2c8dc:	8822d07a 	srli	r17,r17,1
   2c8e0:	1ca4b03a 	or	r18,r3,r18
   2c8e4:	14a4b03a 	or	r18,r2,r18
   2c8e8:	4007883a 	mov	r3,r8
   2c8ec:	1880ffc4 	addi	r2,r3,1023
   2c8f0:	0080460e 	bge	zero,r2,2ca0c <__muldf3+0x748>
   2c8f4:	910001cc 	andi	r4,r18,7
   2c8f8:	20000726 	beq	r4,zero,2c918 <__muldf3+0x654>
   2c8fc:	910003cc 	andi	r4,r18,15
   2c900:	01400104 	movi	r5,4
   2c904:	21400426 	beq	r4,r5,2c918 <__muldf3+0x654>
   2c908:	9149883a 	add	r4,r18,r5
   2c90c:	24a5803a 	cmpltu	r18,r4,r18
   2c910:	8ca3883a 	add	r17,r17,r18
   2c914:	2025883a 	mov	r18,r4
   2c918:	8900402c 	andhi	r4,r17,256
   2c91c:	20000426 	beq	r4,zero,2c930 <__muldf3+0x66c>
   2c920:	18810004 	addi	r2,r3,1024
   2c924:	00ffc034 	movhi	r3,65280
   2c928:	18ffffc4 	addi	r3,r3,-1
   2c92c:	88e2703a 	and	r17,r17,r3
   2c930:	00c1ff84 	movi	r3,2046
   2c934:	18bf1316 	blt	r3,r2,2c584 <__alt_data_end+0xfffec584>
   2c938:	882c977a 	slli	r22,r17,29
   2c93c:	9024d0fa 	srli	r18,r18,3
   2c940:	8822927a 	slli	r17,r17,9
   2c944:	1081ffcc 	andi	r2,r2,2047
   2c948:	b4acb03a 	or	r22,r22,r18
   2c94c:	8820d33a 	srli	r16,r17,12
   2c950:	3027883a 	mov	r19,r6
   2c954:	003eba06 	br	2c440 <__alt_data_end+0xfffec440>
   2c958:	8080022c 	andhi	r2,r16,8
   2c95c:	10000926 	beq	r2,zero,2c984 <__muldf3+0x6c0>
   2c960:	8880022c 	andhi	r2,r17,8
   2c964:	1000071e 	bne	r2,zero,2c984 <__muldf3+0x6c0>
   2c968:	00800434 	movhi	r2,16
   2c96c:	8c000234 	orhi	r16,r17,8
   2c970:	10bfffc4 	addi	r2,r2,-1
   2c974:	e027883a 	mov	r19,fp
   2c978:	80a0703a 	and	r16,r16,r2
   2c97c:	902d883a 	mov	r22,r18
   2c980:	003f1706 	br	2c5e0 <__alt_data_end+0xfffec5e0>
   2c984:	00800434 	movhi	r2,16
   2c988:	84000234 	orhi	r16,r16,8
   2c98c:	10bfffc4 	addi	r2,r2,-1
   2c990:	80a0703a 	and	r16,r16,r2
   2c994:	003f1206 	br	2c5e0 <__alt_data_end+0xfffec5e0>
   2c998:	147ff604 	addi	r17,r2,-40
   2c99c:	3462983a 	sll	r17,r6,r17
   2c9a0:	0025883a 	mov	r18,zero
   2c9a4:	003ef306 	br	2c574 <__alt_data_end+0xfffec574>
   2c9a8:	3009883a 	mov	r4,r6
   2c9ac:	d9400215 	stw	r5,8(sp)
   2c9b0:	d9800715 	stw	r6,28(sp)
   2c9b4:	da400415 	stw	r9,16(sp)
   2c9b8:	da800315 	stw	r10,12(sp)
   2c9bc:	002d6300 	call	2d630 <__clzsi2>
   2c9c0:	10800804 	addi	r2,r2,32
   2c9c4:	da800317 	ldw	r10,12(sp)
   2c9c8:	da400417 	ldw	r9,16(sp)
   2c9cc:	d9800717 	ldw	r6,28(sp)
   2c9d0:	d9400217 	ldw	r5,8(sp)
   2c9d4:	003edd06 	br	2c54c <__alt_data_end+0xfffec54c>
   2c9d8:	143ff604 	addi	r16,r2,-40
   2c9dc:	ac20983a 	sll	r16,r21,r16
   2c9e0:	002d883a 	mov	r22,zero
   2c9e4:	003ec106 	br	2c4ec <__alt_data_end+0xfffec4ec>
   2c9e8:	d9800715 	stw	r6,28(sp)
   2c9ec:	d9c00215 	stw	r7,8(sp)
   2c9f0:	da400415 	stw	r9,16(sp)
   2c9f4:	002d6300 	call	2d630 <__clzsi2>
   2c9f8:	10800804 	addi	r2,r2,32
   2c9fc:	da400417 	ldw	r9,16(sp)
   2ca00:	d9c00217 	ldw	r7,8(sp)
   2ca04:	d9800717 	ldw	r6,28(sp)
   2ca08:	003eae06 	br	2c4c4 <__alt_data_end+0xfffec4c4>
   2ca0c:	00c00044 	movi	r3,1
   2ca10:	1887c83a 	sub	r3,r3,r2
   2ca14:	01000e04 	movi	r4,56
   2ca18:	20fe8516 	blt	r4,r3,2c430 <__alt_data_end+0xfffec430>
   2ca1c:	010007c4 	movi	r4,31
   2ca20:	20c01b16 	blt	r4,r3,2ca90 <__muldf3+0x7cc>
   2ca24:	00800804 	movi	r2,32
   2ca28:	10c5c83a 	sub	r2,r2,r3
   2ca2c:	888a983a 	sll	r5,r17,r2
   2ca30:	90c8d83a 	srl	r4,r18,r3
   2ca34:	9084983a 	sll	r2,r18,r2
   2ca38:	88e2d83a 	srl	r17,r17,r3
   2ca3c:	2906b03a 	or	r3,r5,r4
   2ca40:	1004c03a 	cmpne	r2,r2,zero
   2ca44:	1886b03a 	or	r3,r3,r2
   2ca48:	188001cc 	andi	r2,r3,7
   2ca4c:	10000726 	beq	r2,zero,2ca6c <__muldf3+0x7a8>
   2ca50:	188003cc 	andi	r2,r3,15
   2ca54:	01000104 	movi	r4,4
   2ca58:	11000426 	beq	r2,r4,2ca6c <__muldf3+0x7a8>
   2ca5c:	1805883a 	mov	r2,r3
   2ca60:	10c00104 	addi	r3,r2,4
   2ca64:	1885803a 	cmpltu	r2,r3,r2
   2ca68:	88a3883a 	add	r17,r17,r2
   2ca6c:	8880202c 	andhi	r2,r17,128
   2ca70:	10001c26 	beq	r2,zero,2cae4 <__muldf3+0x820>
   2ca74:	3027883a 	mov	r19,r6
   2ca78:	00800044 	movi	r2,1
   2ca7c:	0021883a 	mov	r16,zero
   2ca80:	002d883a 	mov	r22,zero
   2ca84:	003e6e06 	br	2c440 <__alt_data_end+0xfffec440>
   2ca88:	4007883a 	mov	r3,r8
   2ca8c:	003f9706 	br	2c8ec <__alt_data_end+0xfffec8ec>
   2ca90:	017ff844 	movi	r5,-31
   2ca94:	2885c83a 	sub	r2,r5,r2
   2ca98:	888ad83a 	srl	r5,r17,r2
   2ca9c:	00800804 	movi	r2,32
   2caa0:	18801a26 	beq	r3,r2,2cb0c <__muldf3+0x848>
   2caa4:	01001004 	movi	r4,64
   2caa8:	20c7c83a 	sub	r3,r4,r3
   2caac:	88e2983a 	sll	r17,r17,r3
   2cab0:	8ca4b03a 	or	r18,r17,r18
   2cab4:	9004c03a 	cmpne	r2,r18,zero
   2cab8:	2884b03a 	or	r2,r5,r2
   2cabc:	144001cc 	andi	r17,r2,7
   2cac0:	88000d1e 	bne	r17,zero,2caf8 <__muldf3+0x834>
   2cac4:	0021883a 	mov	r16,zero
   2cac8:	102cd0fa 	srli	r22,r2,3
   2cacc:	3027883a 	mov	r19,r6
   2cad0:	0005883a 	mov	r2,zero
   2cad4:	b46cb03a 	or	r22,r22,r17
   2cad8:	003e5906 	br	2c440 <__alt_data_end+0xfffec440>
   2cadc:	1007883a 	mov	r3,r2
   2cae0:	0023883a 	mov	r17,zero
   2cae4:	8820927a 	slli	r16,r17,9
   2cae8:	1805883a 	mov	r2,r3
   2caec:	8822977a 	slli	r17,r17,29
   2caf0:	8020d33a 	srli	r16,r16,12
   2caf4:	003ff406 	br	2cac8 <__alt_data_end+0xfffecac8>
   2caf8:	10c003cc 	andi	r3,r2,15
   2cafc:	01000104 	movi	r4,4
   2cb00:	193ff626 	beq	r3,r4,2cadc <__alt_data_end+0xfffecadc>
   2cb04:	0023883a 	mov	r17,zero
   2cb08:	003fd506 	br	2ca60 <__alt_data_end+0xfffeca60>
   2cb0c:	0023883a 	mov	r17,zero
   2cb10:	003fe706 	br	2cab0 <__alt_data_end+0xfffecab0>
   2cb14:	00800434 	movhi	r2,16
   2cb18:	8c000234 	orhi	r16,r17,8
   2cb1c:	10bfffc4 	addi	r2,r2,-1
   2cb20:	3027883a 	mov	r19,r6
   2cb24:	80a0703a 	and	r16,r16,r2
   2cb28:	902d883a 	mov	r22,r18
   2cb2c:	003eac06 	br	2c5e0 <__alt_data_end+0xfffec5e0>

0002cb30 <__subdf3>:
   2cb30:	02000434 	movhi	r8,16
   2cb34:	423fffc4 	addi	r8,r8,-1
   2cb38:	defffb04 	addi	sp,sp,-20
   2cb3c:	2a14703a 	and	r10,r5,r8
   2cb40:	3812d53a 	srli	r9,r7,20
   2cb44:	3a10703a 	and	r8,r7,r8
   2cb48:	2006d77a 	srli	r3,r4,29
   2cb4c:	3004d77a 	srli	r2,r6,29
   2cb50:	dc000015 	stw	r16,0(sp)
   2cb54:	501490fa 	slli	r10,r10,3
   2cb58:	2820d53a 	srli	r16,r5,20
   2cb5c:	401090fa 	slli	r8,r8,3
   2cb60:	dc800215 	stw	r18,8(sp)
   2cb64:	dc400115 	stw	r17,4(sp)
   2cb68:	dfc00415 	stw	ra,16(sp)
   2cb6c:	202290fa 	slli	r17,r4,3
   2cb70:	dcc00315 	stw	r19,12(sp)
   2cb74:	4a41ffcc 	andi	r9,r9,2047
   2cb78:	0101ffc4 	movi	r4,2047
   2cb7c:	2824d7fa 	srli	r18,r5,31
   2cb80:	8401ffcc 	andi	r16,r16,2047
   2cb84:	50c6b03a 	or	r3,r10,r3
   2cb88:	380ed7fa 	srli	r7,r7,31
   2cb8c:	408ab03a 	or	r5,r8,r2
   2cb90:	300c90fa 	slli	r6,r6,3
   2cb94:	49009626 	beq	r9,r4,2cdf0 <__subdf3+0x2c0>
   2cb98:	39c0005c 	xori	r7,r7,1
   2cb9c:	8245c83a 	sub	r2,r16,r9
   2cba0:	3c807426 	beq	r7,r18,2cd74 <__subdf3+0x244>
   2cba4:	0080af0e 	bge	zero,r2,2ce64 <__subdf3+0x334>
   2cba8:	48002a1e 	bne	r9,zero,2cc54 <__subdf3+0x124>
   2cbac:	2988b03a 	or	r4,r5,r6
   2cbb0:	20009a1e 	bne	r4,zero,2ce1c <__subdf3+0x2ec>
   2cbb4:	888001cc 	andi	r2,r17,7
   2cbb8:	10000726 	beq	r2,zero,2cbd8 <__subdf3+0xa8>
   2cbbc:	888003cc 	andi	r2,r17,15
   2cbc0:	01000104 	movi	r4,4
   2cbc4:	11000426 	beq	r2,r4,2cbd8 <__subdf3+0xa8>
   2cbc8:	890b883a 	add	r5,r17,r4
   2cbcc:	2c63803a 	cmpltu	r17,r5,r17
   2cbd0:	1c47883a 	add	r3,r3,r17
   2cbd4:	2823883a 	mov	r17,r5
   2cbd8:	1880202c 	andhi	r2,r3,128
   2cbdc:	10005926 	beq	r2,zero,2cd44 <__subdf3+0x214>
   2cbe0:	84000044 	addi	r16,r16,1
   2cbe4:	0081ffc4 	movi	r2,2047
   2cbe8:	8080be26 	beq	r16,r2,2cee4 <__subdf3+0x3b4>
   2cbec:	017fe034 	movhi	r5,65408
   2cbf0:	297fffc4 	addi	r5,r5,-1
   2cbf4:	1946703a 	and	r3,r3,r5
   2cbf8:	1804977a 	slli	r2,r3,29
   2cbfc:	1806927a 	slli	r3,r3,9
   2cc00:	8822d0fa 	srli	r17,r17,3
   2cc04:	8401ffcc 	andi	r16,r16,2047
   2cc08:	180ad33a 	srli	r5,r3,12
   2cc0c:	9100004c 	andi	r4,r18,1
   2cc10:	1444b03a 	or	r2,r2,r17
   2cc14:	80c1ffcc 	andi	r3,r16,2047
   2cc18:	1820953a 	slli	r16,r3,20
   2cc1c:	20c03fcc 	andi	r3,r4,255
   2cc20:	180897fa 	slli	r4,r3,31
   2cc24:	00c00434 	movhi	r3,16
   2cc28:	18ffffc4 	addi	r3,r3,-1
   2cc2c:	28c6703a 	and	r3,r5,r3
   2cc30:	1c06b03a 	or	r3,r3,r16
   2cc34:	1906b03a 	or	r3,r3,r4
   2cc38:	dfc00417 	ldw	ra,16(sp)
   2cc3c:	dcc00317 	ldw	r19,12(sp)
   2cc40:	dc800217 	ldw	r18,8(sp)
   2cc44:	dc400117 	ldw	r17,4(sp)
   2cc48:	dc000017 	ldw	r16,0(sp)
   2cc4c:	dec00504 	addi	sp,sp,20
   2cc50:	f800283a 	ret
   2cc54:	0101ffc4 	movi	r4,2047
   2cc58:	813fd626 	beq	r16,r4,2cbb4 <__alt_data_end+0xfffecbb4>
   2cc5c:	29402034 	orhi	r5,r5,128
   2cc60:	01000e04 	movi	r4,56
   2cc64:	2080a316 	blt	r4,r2,2cef4 <__subdf3+0x3c4>
   2cc68:	010007c4 	movi	r4,31
   2cc6c:	2080c616 	blt	r4,r2,2cf88 <__subdf3+0x458>
   2cc70:	01000804 	movi	r4,32
   2cc74:	2089c83a 	sub	r4,r4,r2
   2cc78:	2910983a 	sll	r8,r5,r4
   2cc7c:	308ed83a 	srl	r7,r6,r2
   2cc80:	3108983a 	sll	r4,r6,r4
   2cc84:	2884d83a 	srl	r2,r5,r2
   2cc88:	41ccb03a 	or	r6,r8,r7
   2cc8c:	2008c03a 	cmpne	r4,r4,zero
   2cc90:	310cb03a 	or	r6,r6,r4
   2cc94:	898dc83a 	sub	r6,r17,r6
   2cc98:	89a3803a 	cmpltu	r17,r17,r6
   2cc9c:	1887c83a 	sub	r3,r3,r2
   2cca0:	1c47c83a 	sub	r3,r3,r17
   2cca4:	3023883a 	mov	r17,r6
   2cca8:	1880202c 	andhi	r2,r3,128
   2ccac:	10002326 	beq	r2,zero,2cd3c <__subdf3+0x20c>
   2ccb0:	04c02034 	movhi	r19,128
   2ccb4:	9cffffc4 	addi	r19,r19,-1
   2ccb8:	1ce6703a 	and	r19,r3,r19
   2ccbc:	98007a26 	beq	r19,zero,2cea8 <__subdf3+0x378>
   2ccc0:	9809883a 	mov	r4,r19
   2ccc4:	002d6300 	call	2d630 <__clzsi2>
   2ccc8:	113ffe04 	addi	r4,r2,-8
   2cccc:	00c007c4 	movi	r3,31
   2ccd0:	19007b16 	blt	r3,r4,2cec0 <__subdf3+0x390>
   2ccd4:	00800804 	movi	r2,32
   2ccd8:	1105c83a 	sub	r2,r2,r4
   2ccdc:	8884d83a 	srl	r2,r17,r2
   2cce0:	9906983a 	sll	r3,r19,r4
   2cce4:	8922983a 	sll	r17,r17,r4
   2cce8:	10c4b03a 	or	r2,r2,r3
   2ccec:	24007816 	blt	r4,r16,2ced0 <__subdf3+0x3a0>
   2ccf0:	2421c83a 	sub	r16,r4,r16
   2ccf4:	80c00044 	addi	r3,r16,1
   2ccf8:	010007c4 	movi	r4,31
   2ccfc:	20c09516 	blt	r4,r3,2cf54 <__subdf3+0x424>
   2cd00:	01400804 	movi	r5,32
   2cd04:	28cbc83a 	sub	r5,r5,r3
   2cd08:	88c8d83a 	srl	r4,r17,r3
   2cd0c:	8962983a 	sll	r17,r17,r5
   2cd10:	114a983a 	sll	r5,r2,r5
   2cd14:	10c6d83a 	srl	r3,r2,r3
   2cd18:	8804c03a 	cmpne	r2,r17,zero
   2cd1c:	290ab03a 	or	r5,r5,r4
   2cd20:	28a2b03a 	or	r17,r5,r2
   2cd24:	0021883a 	mov	r16,zero
   2cd28:	003fa206 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2cd2c:	2090b03a 	or	r8,r4,r2
   2cd30:	40018e26 	beq	r8,zero,2d36c <__subdf3+0x83c>
   2cd34:	1007883a 	mov	r3,r2
   2cd38:	2023883a 	mov	r17,r4
   2cd3c:	888001cc 	andi	r2,r17,7
   2cd40:	103f9e1e 	bne	r2,zero,2cbbc <__alt_data_end+0xfffecbbc>
   2cd44:	1804977a 	slli	r2,r3,29
   2cd48:	8822d0fa 	srli	r17,r17,3
   2cd4c:	1810d0fa 	srli	r8,r3,3
   2cd50:	9100004c 	andi	r4,r18,1
   2cd54:	1444b03a 	or	r2,r2,r17
   2cd58:	00c1ffc4 	movi	r3,2047
   2cd5c:	80c02826 	beq	r16,r3,2ce00 <__subdf3+0x2d0>
   2cd60:	01400434 	movhi	r5,16
   2cd64:	297fffc4 	addi	r5,r5,-1
   2cd68:	80e0703a 	and	r16,r16,r3
   2cd6c:	414a703a 	and	r5,r8,r5
   2cd70:	003fa806 	br	2cc14 <__alt_data_end+0xfffecc14>
   2cd74:	0080630e 	bge	zero,r2,2cf04 <__subdf3+0x3d4>
   2cd78:	48003026 	beq	r9,zero,2ce3c <__subdf3+0x30c>
   2cd7c:	0101ffc4 	movi	r4,2047
   2cd80:	813f8c26 	beq	r16,r4,2cbb4 <__alt_data_end+0xfffecbb4>
   2cd84:	29402034 	orhi	r5,r5,128
   2cd88:	01000e04 	movi	r4,56
   2cd8c:	2080a90e 	bge	r4,r2,2d034 <__subdf3+0x504>
   2cd90:	298cb03a 	or	r6,r5,r6
   2cd94:	3012c03a 	cmpne	r9,r6,zero
   2cd98:	0005883a 	mov	r2,zero
   2cd9c:	4c53883a 	add	r9,r9,r17
   2cda0:	4c63803a 	cmpltu	r17,r9,r17
   2cda4:	10c7883a 	add	r3,r2,r3
   2cda8:	88c7883a 	add	r3,r17,r3
   2cdac:	4823883a 	mov	r17,r9
   2cdb0:	1880202c 	andhi	r2,r3,128
   2cdb4:	1000d026 	beq	r2,zero,2d0f8 <__subdf3+0x5c8>
   2cdb8:	84000044 	addi	r16,r16,1
   2cdbc:	0081ffc4 	movi	r2,2047
   2cdc0:	8080fe26 	beq	r16,r2,2d1bc <__subdf3+0x68c>
   2cdc4:	00bfe034 	movhi	r2,65408
   2cdc8:	10bfffc4 	addi	r2,r2,-1
   2cdcc:	1886703a 	and	r3,r3,r2
   2cdd0:	880ad07a 	srli	r5,r17,1
   2cdd4:	180497fa 	slli	r2,r3,31
   2cdd8:	8900004c 	andi	r4,r17,1
   2cddc:	2922b03a 	or	r17,r5,r4
   2cde0:	1806d07a 	srli	r3,r3,1
   2cde4:	1462b03a 	or	r17,r2,r17
   2cde8:	3825883a 	mov	r18,r7
   2cdec:	003f7106 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2cdf0:	2984b03a 	or	r2,r5,r6
   2cdf4:	103f6826 	beq	r2,zero,2cb98 <__alt_data_end+0xfffecb98>
   2cdf8:	39c03fcc 	andi	r7,r7,255
   2cdfc:	003f6706 	br	2cb9c <__alt_data_end+0xfffecb9c>
   2ce00:	4086b03a 	or	r3,r8,r2
   2ce04:	18015226 	beq	r3,zero,2d350 <__subdf3+0x820>
   2ce08:	00c00434 	movhi	r3,16
   2ce0c:	41400234 	orhi	r5,r8,8
   2ce10:	18ffffc4 	addi	r3,r3,-1
   2ce14:	28ca703a 	and	r5,r5,r3
   2ce18:	003f7e06 	br	2cc14 <__alt_data_end+0xfffecc14>
   2ce1c:	10bfffc4 	addi	r2,r2,-1
   2ce20:	1000491e 	bne	r2,zero,2cf48 <__subdf3+0x418>
   2ce24:	898fc83a 	sub	r7,r17,r6
   2ce28:	89e3803a 	cmpltu	r17,r17,r7
   2ce2c:	1947c83a 	sub	r3,r3,r5
   2ce30:	1c47c83a 	sub	r3,r3,r17
   2ce34:	3823883a 	mov	r17,r7
   2ce38:	003f9b06 	br	2cca8 <__alt_data_end+0xfffecca8>
   2ce3c:	2988b03a 	or	r4,r5,r6
   2ce40:	203f5c26 	beq	r4,zero,2cbb4 <__alt_data_end+0xfffecbb4>
   2ce44:	10bfffc4 	addi	r2,r2,-1
   2ce48:	1000931e 	bne	r2,zero,2d098 <__subdf3+0x568>
   2ce4c:	898d883a 	add	r6,r17,r6
   2ce50:	3463803a 	cmpltu	r17,r6,r17
   2ce54:	1947883a 	add	r3,r3,r5
   2ce58:	88c7883a 	add	r3,r17,r3
   2ce5c:	3023883a 	mov	r17,r6
   2ce60:	003fd306 	br	2cdb0 <__alt_data_end+0xfffecdb0>
   2ce64:	1000541e 	bne	r2,zero,2cfb8 <__subdf3+0x488>
   2ce68:	80800044 	addi	r2,r16,1
   2ce6c:	1081ffcc 	andi	r2,r2,2047
   2ce70:	01000044 	movi	r4,1
   2ce74:	2080a20e 	bge	r4,r2,2d100 <__subdf3+0x5d0>
   2ce78:	8989c83a 	sub	r4,r17,r6
   2ce7c:	8905803a 	cmpltu	r2,r17,r4
   2ce80:	1967c83a 	sub	r19,r3,r5
   2ce84:	98a7c83a 	sub	r19,r19,r2
   2ce88:	9880202c 	andhi	r2,r19,128
   2ce8c:	10006326 	beq	r2,zero,2d01c <__subdf3+0x4ec>
   2ce90:	3463c83a 	sub	r17,r6,r17
   2ce94:	28c7c83a 	sub	r3,r5,r3
   2ce98:	344d803a 	cmpltu	r6,r6,r17
   2ce9c:	19a7c83a 	sub	r19,r3,r6
   2cea0:	3825883a 	mov	r18,r7
   2cea4:	983f861e 	bne	r19,zero,2ccc0 <__alt_data_end+0xfffeccc0>
   2cea8:	8809883a 	mov	r4,r17
   2ceac:	002d6300 	call	2d630 <__clzsi2>
   2ceb0:	10800804 	addi	r2,r2,32
   2ceb4:	113ffe04 	addi	r4,r2,-8
   2ceb8:	00c007c4 	movi	r3,31
   2cebc:	193f850e 	bge	r3,r4,2ccd4 <__alt_data_end+0xfffeccd4>
   2cec0:	10bff604 	addi	r2,r2,-40
   2cec4:	8884983a 	sll	r2,r17,r2
   2cec8:	0023883a 	mov	r17,zero
   2cecc:	243f880e 	bge	r4,r16,2ccf0 <__alt_data_end+0xfffeccf0>
   2ced0:	00ffe034 	movhi	r3,65408
   2ced4:	18ffffc4 	addi	r3,r3,-1
   2ced8:	8121c83a 	sub	r16,r16,r4
   2cedc:	10c6703a 	and	r3,r2,r3
   2cee0:	003f3406 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2cee4:	9100004c 	andi	r4,r18,1
   2cee8:	000b883a 	mov	r5,zero
   2ceec:	0005883a 	mov	r2,zero
   2cef0:	003f4806 	br	2cc14 <__alt_data_end+0xfffecc14>
   2cef4:	298cb03a 	or	r6,r5,r6
   2cef8:	300cc03a 	cmpne	r6,r6,zero
   2cefc:	0005883a 	mov	r2,zero
   2cf00:	003f6406 	br	2cc94 <__alt_data_end+0xfffecc94>
   2cf04:	10009a1e 	bne	r2,zero,2d170 <__subdf3+0x640>
   2cf08:	82400044 	addi	r9,r16,1
   2cf0c:	4881ffcc 	andi	r2,r9,2047
   2cf10:	02800044 	movi	r10,1
   2cf14:	5080670e 	bge	r10,r2,2d0b4 <__subdf3+0x584>
   2cf18:	0081ffc4 	movi	r2,2047
   2cf1c:	4880af26 	beq	r9,r2,2d1dc <__subdf3+0x6ac>
   2cf20:	898d883a 	add	r6,r17,r6
   2cf24:	1945883a 	add	r2,r3,r5
   2cf28:	3447803a 	cmpltu	r3,r6,r17
   2cf2c:	1887883a 	add	r3,r3,r2
   2cf30:	182297fa 	slli	r17,r3,31
   2cf34:	300cd07a 	srli	r6,r6,1
   2cf38:	1806d07a 	srli	r3,r3,1
   2cf3c:	4821883a 	mov	r16,r9
   2cf40:	89a2b03a 	or	r17,r17,r6
   2cf44:	003f1b06 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2cf48:	0101ffc4 	movi	r4,2047
   2cf4c:	813f441e 	bne	r16,r4,2cc60 <__alt_data_end+0xfffecc60>
   2cf50:	003f1806 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2cf54:	843ff844 	addi	r16,r16,-31
   2cf58:	01400804 	movi	r5,32
   2cf5c:	1408d83a 	srl	r4,r2,r16
   2cf60:	19405026 	beq	r3,r5,2d0a4 <__subdf3+0x574>
   2cf64:	01401004 	movi	r5,64
   2cf68:	28c7c83a 	sub	r3,r5,r3
   2cf6c:	10c4983a 	sll	r2,r2,r3
   2cf70:	88a2b03a 	or	r17,r17,r2
   2cf74:	8822c03a 	cmpne	r17,r17,zero
   2cf78:	2462b03a 	or	r17,r4,r17
   2cf7c:	0007883a 	mov	r3,zero
   2cf80:	0021883a 	mov	r16,zero
   2cf84:	003f6d06 	br	2cd3c <__alt_data_end+0xfffecd3c>
   2cf88:	11fff804 	addi	r7,r2,-32
   2cf8c:	01000804 	movi	r4,32
   2cf90:	29ced83a 	srl	r7,r5,r7
   2cf94:	11004526 	beq	r2,r4,2d0ac <__subdf3+0x57c>
   2cf98:	01001004 	movi	r4,64
   2cf9c:	2089c83a 	sub	r4,r4,r2
   2cfa0:	2904983a 	sll	r2,r5,r4
   2cfa4:	118cb03a 	or	r6,r2,r6
   2cfa8:	300cc03a 	cmpne	r6,r6,zero
   2cfac:	398cb03a 	or	r6,r7,r6
   2cfb0:	0005883a 	mov	r2,zero
   2cfb4:	003f3706 	br	2cc94 <__alt_data_end+0xfffecc94>
   2cfb8:	80002a26 	beq	r16,zero,2d064 <__subdf3+0x534>
   2cfbc:	0101ffc4 	movi	r4,2047
   2cfc0:	49006626 	beq	r9,r4,2d15c <__subdf3+0x62c>
   2cfc4:	0085c83a 	sub	r2,zero,r2
   2cfc8:	18c02034 	orhi	r3,r3,128
   2cfcc:	01000e04 	movi	r4,56
   2cfd0:	20807e16 	blt	r4,r2,2d1cc <__subdf3+0x69c>
   2cfd4:	010007c4 	movi	r4,31
   2cfd8:	2080e716 	blt	r4,r2,2d378 <__subdf3+0x848>
   2cfdc:	01000804 	movi	r4,32
   2cfe0:	2089c83a 	sub	r4,r4,r2
   2cfe4:	1914983a 	sll	r10,r3,r4
   2cfe8:	8890d83a 	srl	r8,r17,r2
   2cfec:	8908983a 	sll	r4,r17,r4
   2cff0:	1884d83a 	srl	r2,r3,r2
   2cff4:	5222b03a 	or	r17,r10,r8
   2cff8:	2006c03a 	cmpne	r3,r4,zero
   2cffc:	88e2b03a 	or	r17,r17,r3
   2d000:	3463c83a 	sub	r17,r6,r17
   2d004:	2885c83a 	sub	r2,r5,r2
   2d008:	344d803a 	cmpltu	r6,r6,r17
   2d00c:	1187c83a 	sub	r3,r2,r6
   2d010:	4821883a 	mov	r16,r9
   2d014:	3825883a 	mov	r18,r7
   2d018:	003f2306 	br	2cca8 <__alt_data_end+0xfffecca8>
   2d01c:	24d0b03a 	or	r8,r4,r19
   2d020:	40001b1e 	bne	r8,zero,2d090 <__subdf3+0x560>
   2d024:	0005883a 	mov	r2,zero
   2d028:	0009883a 	mov	r4,zero
   2d02c:	0021883a 	mov	r16,zero
   2d030:	003f4906 	br	2cd58 <__alt_data_end+0xfffecd58>
   2d034:	010007c4 	movi	r4,31
   2d038:	20803a16 	blt	r4,r2,2d124 <__subdf3+0x5f4>
   2d03c:	01000804 	movi	r4,32
   2d040:	2089c83a 	sub	r4,r4,r2
   2d044:	2912983a 	sll	r9,r5,r4
   2d048:	3090d83a 	srl	r8,r6,r2
   2d04c:	3108983a 	sll	r4,r6,r4
   2d050:	2884d83a 	srl	r2,r5,r2
   2d054:	4a12b03a 	or	r9,r9,r8
   2d058:	2008c03a 	cmpne	r4,r4,zero
   2d05c:	4912b03a 	or	r9,r9,r4
   2d060:	003f4e06 	br	2cd9c <__alt_data_end+0xfffecd9c>
   2d064:	1c48b03a 	or	r4,r3,r17
   2d068:	20003c26 	beq	r4,zero,2d15c <__subdf3+0x62c>
   2d06c:	0084303a 	nor	r2,zero,r2
   2d070:	1000381e 	bne	r2,zero,2d154 <__subdf3+0x624>
   2d074:	3463c83a 	sub	r17,r6,r17
   2d078:	28c5c83a 	sub	r2,r5,r3
   2d07c:	344d803a 	cmpltu	r6,r6,r17
   2d080:	1187c83a 	sub	r3,r2,r6
   2d084:	4821883a 	mov	r16,r9
   2d088:	3825883a 	mov	r18,r7
   2d08c:	003f0606 	br	2cca8 <__alt_data_end+0xfffecca8>
   2d090:	2023883a 	mov	r17,r4
   2d094:	003f0906 	br	2ccbc <__alt_data_end+0xfffeccbc>
   2d098:	0101ffc4 	movi	r4,2047
   2d09c:	813f3a1e 	bne	r16,r4,2cd88 <__alt_data_end+0xfffecd88>
   2d0a0:	003ec406 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d0a4:	0005883a 	mov	r2,zero
   2d0a8:	003fb106 	br	2cf70 <__alt_data_end+0xfffecf70>
   2d0ac:	0005883a 	mov	r2,zero
   2d0b0:	003fbc06 	br	2cfa4 <__alt_data_end+0xfffecfa4>
   2d0b4:	1c44b03a 	or	r2,r3,r17
   2d0b8:	80008e1e 	bne	r16,zero,2d2f4 <__subdf3+0x7c4>
   2d0bc:	1000c826 	beq	r2,zero,2d3e0 <__subdf3+0x8b0>
   2d0c0:	2984b03a 	or	r2,r5,r6
   2d0c4:	103ebb26 	beq	r2,zero,2cbb4 <__alt_data_end+0xfffecbb4>
   2d0c8:	8989883a 	add	r4,r17,r6
   2d0cc:	1945883a 	add	r2,r3,r5
   2d0d0:	2447803a 	cmpltu	r3,r4,r17
   2d0d4:	1887883a 	add	r3,r3,r2
   2d0d8:	1880202c 	andhi	r2,r3,128
   2d0dc:	2023883a 	mov	r17,r4
   2d0e0:	103f1626 	beq	r2,zero,2cd3c <__alt_data_end+0xfffecd3c>
   2d0e4:	00bfe034 	movhi	r2,65408
   2d0e8:	10bfffc4 	addi	r2,r2,-1
   2d0ec:	5021883a 	mov	r16,r10
   2d0f0:	1886703a 	and	r3,r3,r2
   2d0f4:	003eaf06 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d0f8:	3825883a 	mov	r18,r7
   2d0fc:	003f0f06 	br	2cd3c <__alt_data_end+0xfffecd3c>
   2d100:	1c44b03a 	or	r2,r3,r17
   2d104:	8000251e 	bne	r16,zero,2d19c <__subdf3+0x66c>
   2d108:	1000661e 	bne	r2,zero,2d2a4 <__subdf3+0x774>
   2d10c:	2990b03a 	or	r8,r5,r6
   2d110:	40009626 	beq	r8,zero,2d36c <__subdf3+0x83c>
   2d114:	2807883a 	mov	r3,r5
   2d118:	3023883a 	mov	r17,r6
   2d11c:	3825883a 	mov	r18,r7
   2d120:	003ea406 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d124:	127ff804 	addi	r9,r2,-32
   2d128:	01000804 	movi	r4,32
   2d12c:	2a52d83a 	srl	r9,r5,r9
   2d130:	11008c26 	beq	r2,r4,2d364 <__subdf3+0x834>
   2d134:	01001004 	movi	r4,64
   2d138:	2085c83a 	sub	r2,r4,r2
   2d13c:	2884983a 	sll	r2,r5,r2
   2d140:	118cb03a 	or	r6,r2,r6
   2d144:	300cc03a 	cmpne	r6,r6,zero
   2d148:	4992b03a 	or	r9,r9,r6
   2d14c:	0005883a 	mov	r2,zero
   2d150:	003f1206 	br	2cd9c <__alt_data_end+0xfffecd9c>
   2d154:	0101ffc4 	movi	r4,2047
   2d158:	493f9c1e 	bne	r9,r4,2cfcc <__alt_data_end+0xfffecfcc>
   2d15c:	2807883a 	mov	r3,r5
   2d160:	3023883a 	mov	r17,r6
   2d164:	4821883a 	mov	r16,r9
   2d168:	3825883a 	mov	r18,r7
   2d16c:	003e9106 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d170:	80001f1e 	bne	r16,zero,2d1f0 <__subdf3+0x6c0>
   2d174:	1c48b03a 	or	r4,r3,r17
   2d178:	20005a26 	beq	r4,zero,2d2e4 <__subdf3+0x7b4>
   2d17c:	0084303a 	nor	r2,zero,r2
   2d180:	1000561e 	bne	r2,zero,2d2dc <__subdf3+0x7ac>
   2d184:	89a3883a 	add	r17,r17,r6
   2d188:	1945883a 	add	r2,r3,r5
   2d18c:	898d803a 	cmpltu	r6,r17,r6
   2d190:	3087883a 	add	r3,r6,r2
   2d194:	4821883a 	mov	r16,r9
   2d198:	003f0506 	br	2cdb0 <__alt_data_end+0xfffecdb0>
   2d19c:	10002b1e 	bne	r2,zero,2d24c <__subdf3+0x71c>
   2d1a0:	2984b03a 	or	r2,r5,r6
   2d1a4:	10008026 	beq	r2,zero,2d3a8 <__subdf3+0x878>
   2d1a8:	2807883a 	mov	r3,r5
   2d1ac:	3023883a 	mov	r17,r6
   2d1b0:	3825883a 	mov	r18,r7
   2d1b4:	0401ffc4 	movi	r16,2047
   2d1b8:	003e7e06 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d1bc:	3809883a 	mov	r4,r7
   2d1c0:	0011883a 	mov	r8,zero
   2d1c4:	0005883a 	mov	r2,zero
   2d1c8:	003ee306 	br	2cd58 <__alt_data_end+0xfffecd58>
   2d1cc:	1c62b03a 	or	r17,r3,r17
   2d1d0:	8822c03a 	cmpne	r17,r17,zero
   2d1d4:	0005883a 	mov	r2,zero
   2d1d8:	003f8906 	br	2d000 <__alt_data_end+0xfffed000>
   2d1dc:	3809883a 	mov	r4,r7
   2d1e0:	4821883a 	mov	r16,r9
   2d1e4:	0011883a 	mov	r8,zero
   2d1e8:	0005883a 	mov	r2,zero
   2d1ec:	003eda06 	br	2cd58 <__alt_data_end+0xfffecd58>
   2d1f0:	0101ffc4 	movi	r4,2047
   2d1f4:	49003b26 	beq	r9,r4,2d2e4 <__subdf3+0x7b4>
   2d1f8:	0085c83a 	sub	r2,zero,r2
   2d1fc:	18c02034 	orhi	r3,r3,128
   2d200:	01000e04 	movi	r4,56
   2d204:	20806e16 	blt	r4,r2,2d3c0 <__subdf3+0x890>
   2d208:	010007c4 	movi	r4,31
   2d20c:	20807716 	blt	r4,r2,2d3ec <__subdf3+0x8bc>
   2d210:	01000804 	movi	r4,32
   2d214:	2089c83a 	sub	r4,r4,r2
   2d218:	1914983a 	sll	r10,r3,r4
   2d21c:	8890d83a 	srl	r8,r17,r2
   2d220:	8908983a 	sll	r4,r17,r4
   2d224:	1884d83a 	srl	r2,r3,r2
   2d228:	5222b03a 	or	r17,r10,r8
   2d22c:	2006c03a 	cmpne	r3,r4,zero
   2d230:	88e2b03a 	or	r17,r17,r3
   2d234:	89a3883a 	add	r17,r17,r6
   2d238:	1145883a 	add	r2,r2,r5
   2d23c:	898d803a 	cmpltu	r6,r17,r6
   2d240:	3087883a 	add	r3,r6,r2
   2d244:	4821883a 	mov	r16,r9
   2d248:	003ed906 	br	2cdb0 <__alt_data_end+0xfffecdb0>
   2d24c:	2984b03a 	or	r2,r5,r6
   2d250:	10004226 	beq	r2,zero,2d35c <__subdf3+0x82c>
   2d254:	1808d0fa 	srli	r4,r3,3
   2d258:	8822d0fa 	srli	r17,r17,3
   2d25c:	1806977a 	slli	r3,r3,29
   2d260:	2080022c 	andhi	r2,r4,8
   2d264:	1c62b03a 	or	r17,r3,r17
   2d268:	10000826 	beq	r2,zero,2d28c <__subdf3+0x75c>
   2d26c:	2812d0fa 	srli	r9,r5,3
   2d270:	4880022c 	andhi	r2,r9,8
   2d274:	1000051e 	bne	r2,zero,2d28c <__subdf3+0x75c>
   2d278:	300cd0fa 	srli	r6,r6,3
   2d27c:	2804977a 	slli	r2,r5,29
   2d280:	4809883a 	mov	r4,r9
   2d284:	3825883a 	mov	r18,r7
   2d288:	11a2b03a 	or	r17,r2,r6
   2d28c:	8806d77a 	srli	r3,r17,29
   2d290:	200890fa 	slli	r4,r4,3
   2d294:	882290fa 	slli	r17,r17,3
   2d298:	0401ffc4 	movi	r16,2047
   2d29c:	1906b03a 	or	r3,r3,r4
   2d2a0:	003e4406 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d2a4:	2984b03a 	or	r2,r5,r6
   2d2a8:	103e4226 	beq	r2,zero,2cbb4 <__alt_data_end+0xfffecbb4>
   2d2ac:	8989c83a 	sub	r4,r17,r6
   2d2b0:	8911803a 	cmpltu	r8,r17,r4
   2d2b4:	1945c83a 	sub	r2,r3,r5
   2d2b8:	1205c83a 	sub	r2,r2,r8
   2d2bc:	1200202c 	andhi	r8,r2,128
   2d2c0:	403e9a26 	beq	r8,zero,2cd2c <__alt_data_end+0xfffecd2c>
   2d2c4:	3463c83a 	sub	r17,r6,r17
   2d2c8:	28c5c83a 	sub	r2,r5,r3
   2d2cc:	344d803a 	cmpltu	r6,r6,r17
   2d2d0:	1187c83a 	sub	r3,r2,r6
   2d2d4:	3825883a 	mov	r18,r7
   2d2d8:	003e3606 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d2dc:	0101ffc4 	movi	r4,2047
   2d2e0:	493fc71e 	bne	r9,r4,2d200 <__alt_data_end+0xfffed200>
   2d2e4:	2807883a 	mov	r3,r5
   2d2e8:	3023883a 	mov	r17,r6
   2d2ec:	4821883a 	mov	r16,r9
   2d2f0:	003e3006 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d2f4:	10003626 	beq	r2,zero,2d3d0 <__subdf3+0x8a0>
   2d2f8:	2984b03a 	or	r2,r5,r6
   2d2fc:	10001726 	beq	r2,zero,2d35c <__subdf3+0x82c>
   2d300:	1808d0fa 	srli	r4,r3,3
   2d304:	8822d0fa 	srli	r17,r17,3
   2d308:	1806977a 	slli	r3,r3,29
   2d30c:	2080022c 	andhi	r2,r4,8
   2d310:	1c62b03a 	or	r17,r3,r17
   2d314:	10000726 	beq	r2,zero,2d334 <__subdf3+0x804>
   2d318:	2812d0fa 	srli	r9,r5,3
   2d31c:	4880022c 	andhi	r2,r9,8
   2d320:	1000041e 	bne	r2,zero,2d334 <__subdf3+0x804>
   2d324:	300cd0fa 	srli	r6,r6,3
   2d328:	2804977a 	slli	r2,r5,29
   2d32c:	4809883a 	mov	r4,r9
   2d330:	11a2b03a 	or	r17,r2,r6
   2d334:	8806d77a 	srli	r3,r17,29
   2d338:	200890fa 	slli	r4,r4,3
   2d33c:	882290fa 	slli	r17,r17,3
   2d340:	3825883a 	mov	r18,r7
   2d344:	1906b03a 	or	r3,r3,r4
   2d348:	0401ffc4 	movi	r16,2047
   2d34c:	003e1906 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d350:	000b883a 	mov	r5,zero
   2d354:	0005883a 	mov	r2,zero
   2d358:	003e2e06 	br	2cc14 <__alt_data_end+0xfffecc14>
   2d35c:	0401ffc4 	movi	r16,2047
   2d360:	003e1406 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d364:	0005883a 	mov	r2,zero
   2d368:	003f7506 	br	2d140 <__alt_data_end+0xfffed140>
   2d36c:	0005883a 	mov	r2,zero
   2d370:	0009883a 	mov	r4,zero
   2d374:	003e7806 	br	2cd58 <__alt_data_end+0xfffecd58>
   2d378:	123ff804 	addi	r8,r2,-32
   2d37c:	01000804 	movi	r4,32
   2d380:	1a10d83a 	srl	r8,r3,r8
   2d384:	11002526 	beq	r2,r4,2d41c <__subdf3+0x8ec>
   2d388:	01001004 	movi	r4,64
   2d38c:	2085c83a 	sub	r2,r4,r2
   2d390:	1884983a 	sll	r2,r3,r2
   2d394:	1444b03a 	or	r2,r2,r17
   2d398:	1004c03a 	cmpne	r2,r2,zero
   2d39c:	40a2b03a 	or	r17,r8,r2
   2d3a0:	0005883a 	mov	r2,zero
   2d3a4:	003f1606 	br	2d000 <__alt_data_end+0xfffed000>
   2d3a8:	02000434 	movhi	r8,16
   2d3ac:	0009883a 	mov	r4,zero
   2d3b0:	423fffc4 	addi	r8,r8,-1
   2d3b4:	00bfffc4 	movi	r2,-1
   2d3b8:	0401ffc4 	movi	r16,2047
   2d3bc:	003e6606 	br	2cd58 <__alt_data_end+0xfffecd58>
   2d3c0:	1c62b03a 	or	r17,r3,r17
   2d3c4:	8822c03a 	cmpne	r17,r17,zero
   2d3c8:	0005883a 	mov	r2,zero
   2d3cc:	003f9906 	br	2d234 <__alt_data_end+0xfffed234>
   2d3d0:	2807883a 	mov	r3,r5
   2d3d4:	3023883a 	mov	r17,r6
   2d3d8:	0401ffc4 	movi	r16,2047
   2d3dc:	003df506 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d3e0:	2807883a 	mov	r3,r5
   2d3e4:	3023883a 	mov	r17,r6
   2d3e8:	003df206 	br	2cbb4 <__alt_data_end+0xfffecbb4>
   2d3ec:	123ff804 	addi	r8,r2,-32
   2d3f0:	01000804 	movi	r4,32
   2d3f4:	1a10d83a 	srl	r8,r3,r8
   2d3f8:	11000a26 	beq	r2,r4,2d424 <__subdf3+0x8f4>
   2d3fc:	01001004 	movi	r4,64
   2d400:	2085c83a 	sub	r2,r4,r2
   2d404:	1884983a 	sll	r2,r3,r2
   2d408:	1444b03a 	or	r2,r2,r17
   2d40c:	1004c03a 	cmpne	r2,r2,zero
   2d410:	40a2b03a 	or	r17,r8,r2
   2d414:	0005883a 	mov	r2,zero
   2d418:	003f8606 	br	2d234 <__alt_data_end+0xfffed234>
   2d41c:	0005883a 	mov	r2,zero
   2d420:	003fdc06 	br	2d394 <__alt_data_end+0xfffed394>
   2d424:	0005883a 	mov	r2,zero
   2d428:	003ff706 	br	2d408 <__alt_data_end+0xfffed408>

0002d42c <__fixdfsi>:
   2d42c:	280cd53a 	srli	r6,r5,20
   2d430:	00c00434 	movhi	r3,16
   2d434:	18ffffc4 	addi	r3,r3,-1
   2d438:	3181ffcc 	andi	r6,r6,2047
   2d43c:	01c0ff84 	movi	r7,1022
   2d440:	28c6703a 	and	r3,r5,r3
   2d444:	280ad7fa 	srli	r5,r5,31
   2d448:	3980120e 	bge	r7,r6,2d494 <__fixdfsi+0x68>
   2d44c:	00810744 	movi	r2,1053
   2d450:	11800c16 	blt	r2,r6,2d484 <__fixdfsi+0x58>
   2d454:	00810cc4 	movi	r2,1075
   2d458:	1185c83a 	sub	r2,r2,r6
   2d45c:	01c007c4 	movi	r7,31
   2d460:	18c00434 	orhi	r3,r3,16
   2d464:	38800d16 	blt	r7,r2,2d49c <__fixdfsi+0x70>
   2d468:	31befb44 	addi	r6,r6,-1043
   2d46c:	2084d83a 	srl	r2,r4,r2
   2d470:	1986983a 	sll	r3,r3,r6
   2d474:	1884b03a 	or	r2,r3,r2
   2d478:	28000726 	beq	r5,zero,2d498 <__fixdfsi+0x6c>
   2d47c:	0085c83a 	sub	r2,zero,r2
   2d480:	f800283a 	ret
   2d484:	00a00034 	movhi	r2,32768
   2d488:	10bfffc4 	addi	r2,r2,-1
   2d48c:	2885883a 	add	r2,r5,r2
   2d490:	f800283a 	ret
   2d494:	0005883a 	mov	r2,zero
   2d498:	f800283a 	ret
   2d49c:	008104c4 	movi	r2,1043
   2d4a0:	1185c83a 	sub	r2,r2,r6
   2d4a4:	1884d83a 	srl	r2,r3,r2
   2d4a8:	003ff306 	br	2d478 <__alt_data_end+0xfffed478>

0002d4ac <__floatsidf>:
   2d4ac:	defffd04 	addi	sp,sp,-12
   2d4b0:	dfc00215 	stw	ra,8(sp)
   2d4b4:	dc400115 	stw	r17,4(sp)
   2d4b8:	dc000015 	stw	r16,0(sp)
   2d4bc:	20002b26 	beq	r4,zero,2d56c <__floatsidf+0xc0>
   2d4c0:	2023883a 	mov	r17,r4
   2d4c4:	2020d7fa 	srli	r16,r4,31
   2d4c8:	20002d16 	blt	r4,zero,2d580 <__floatsidf+0xd4>
   2d4cc:	8809883a 	mov	r4,r17
   2d4d0:	002d6300 	call	2d630 <__clzsi2>
   2d4d4:	01410784 	movi	r5,1054
   2d4d8:	288bc83a 	sub	r5,r5,r2
   2d4dc:	01010cc4 	movi	r4,1075
   2d4e0:	2149c83a 	sub	r4,r4,r5
   2d4e4:	00c007c4 	movi	r3,31
   2d4e8:	1900160e 	bge	r3,r4,2d544 <__floatsidf+0x98>
   2d4ec:	00c104c4 	movi	r3,1043
   2d4f0:	1947c83a 	sub	r3,r3,r5
   2d4f4:	88c6983a 	sll	r3,r17,r3
   2d4f8:	00800434 	movhi	r2,16
   2d4fc:	10bfffc4 	addi	r2,r2,-1
   2d500:	1886703a 	and	r3,r3,r2
   2d504:	2941ffcc 	andi	r5,r5,2047
   2d508:	800d883a 	mov	r6,r16
   2d50c:	0005883a 	mov	r2,zero
   2d510:	280a953a 	slli	r5,r5,20
   2d514:	31803fcc 	andi	r6,r6,255
   2d518:	01000434 	movhi	r4,16
   2d51c:	300c97fa 	slli	r6,r6,31
   2d520:	213fffc4 	addi	r4,r4,-1
   2d524:	1906703a 	and	r3,r3,r4
   2d528:	1946b03a 	or	r3,r3,r5
   2d52c:	1986b03a 	or	r3,r3,r6
   2d530:	dfc00217 	ldw	ra,8(sp)
   2d534:	dc400117 	ldw	r17,4(sp)
   2d538:	dc000017 	ldw	r16,0(sp)
   2d53c:	dec00304 	addi	sp,sp,12
   2d540:	f800283a 	ret
   2d544:	00c002c4 	movi	r3,11
   2d548:	1887c83a 	sub	r3,r3,r2
   2d54c:	88c6d83a 	srl	r3,r17,r3
   2d550:	8904983a 	sll	r2,r17,r4
   2d554:	01000434 	movhi	r4,16
   2d558:	213fffc4 	addi	r4,r4,-1
   2d55c:	2941ffcc 	andi	r5,r5,2047
   2d560:	1906703a 	and	r3,r3,r4
   2d564:	800d883a 	mov	r6,r16
   2d568:	003fe906 	br	2d510 <__alt_data_end+0xfffed510>
   2d56c:	000d883a 	mov	r6,zero
   2d570:	000b883a 	mov	r5,zero
   2d574:	0007883a 	mov	r3,zero
   2d578:	0005883a 	mov	r2,zero
   2d57c:	003fe406 	br	2d510 <__alt_data_end+0xfffed510>
   2d580:	0123c83a 	sub	r17,zero,r4
   2d584:	003fd106 	br	2d4cc <__alt_data_end+0xfffed4cc>

0002d588 <__floatunsidf>:
   2d588:	defffe04 	addi	sp,sp,-8
   2d58c:	dc000015 	stw	r16,0(sp)
   2d590:	dfc00115 	stw	ra,4(sp)
   2d594:	2021883a 	mov	r16,r4
   2d598:	20002226 	beq	r4,zero,2d624 <__floatunsidf+0x9c>
   2d59c:	002d6300 	call	2d630 <__clzsi2>
   2d5a0:	01010784 	movi	r4,1054
   2d5a4:	2089c83a 	sub	r4,r4,r2
   2d5a8:	01810cc4 	movi	r6,1075
   2d5ac:	310dc83a 	sub	r6,r6,r4
   2d5b0:	00c007c4 	movi	r3,31
   2d5b4:	1980120e 	bge	r3,r6,2d600 <__floatunsidf+0x78>
   2d5b8:	00c104c4 	movi	r3,1043
   2d5bc:	1907c83a 	sub	r3,r3,r4
   2d5c0:	80ca983a 	sll	r5,r16,r3
   2d5c4:	00800434 	movhi	r2,16
   2d5c8:	10bfffc4 	addi	r2,r2,-1
   2d5cc:	2101ffcc 	andi	r4,r4,2047
   2d5d0:	0021883a 	mov	r16,zero
   2d5d4:	288a703a 	and	r5,r5,r2
   2d5d8:	2008953a 	slli	r4,r4,20
   2d5dc:	00c00434 	movhi	r3,16
   2d5e0:	18ffffc4 	addi	r3,r3,-1
   2d5e4:	28c6703a 	and	r3,r5,r3
   2d5e8:	8005883a 	mov	r2,r16
   2d5ec:	1906b03a 	or	r3,r3,r4
   2d5f0:	dfc00117 	ldw	ra,4(sp)
   2d5f4:	dc000017 	ldw	r16,0(sp)
   2d5f8:	dec00204 	addi	sp,sp,8
   2d5fc:	f800283a 	ret
   2d600:	00c002c4 	movi	r3,11
   2d604:	188bc83a 	sub	r5,r3,r2
   2d608:	814ad83a 	srl	r5,r16,r5
   2d60c:	00c00434 	movhi	r3,16
   2d610:	18ffffc4 	addi	r3,r3,-1
   2d614:	81a0983a 	sll	r16,r16,r6
   2d618:	2101ffcc 	andi	r4,r4,2047
   2d61c:	28ca703a 	and	r5,r5,r3
   2d620:	003fed06 	br	2d5d8 <__alt_data_end+0xfffed5d8>
   2d624:	0009883a 	mov	r4,zero
   2d628:	000b883a 	mov	r5,zero
   2d62c:	003fea06 	br	2d5d8 <__alt_data_end+0xfffed5d8>

0002d630 <__clzsi2>:
   2d630:	00bfffd4 	movui	r2,65535
   2d634:	11000536 	bltu	r2,r4,2d64c <__clzsi2+0x1c>
   2d638:	00803fc4 	movi	r2,255
   2d63c:	11000f36 	bltu	r2,r4,2d67c <__clzsi2+0x4c>
   2d640:	00800804 	movi	r2,32
   2d644:	0007883a 	mov	r3,zero
   2d648:	00000506 	br	2d660 <__clzsi2+0x30>
   2d64c:	00804034 	movhi	r2,256
   2d650:	10bfffc4 	addi	r2,r2,-1
   2d654:	11000c2e 	bgeu	r2,r4,2d688 <__clzsi2+0x58>
   2d658:	00800204 	movi	r2,8
   2d65c:	00c00604 	movi	r3,24
   2d660:	20c8d83a 	srl	r4,r4,r3
   2d664:	00c000f4 	movhi	r3,3
   2d668:	18ca7d04 	addi	r3,r3,10740
   2d66c:	1909883a 	add	r4,r3,r4
   2d670:	20c00003 	ldbu	r3,0(r4)
   2d674:	10c5c83a 	sub	r2,r2,r3
   2d678:	f800283a 	ret
   2d67c:	00800604 	movi	r2,24
   2d680:	00c00204 	movi	r3,8
   2d684:	003ff606 	br	2d660 <__alt_data_end+0xfffed660>
   2d688:	00800404 	movi	r2,16
   2d68c:	1007883a 	mov	r3,r2
   2d690:	003ff306 	br	2d660 <__alt_data_end+0xfffed660>

0002d694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d694:	defffe04 	addi	sp,sp,-8
   2d698:	dfc00115 	stw	ra,4(sp)
   2d69c:	df000015 	stw	fp,0(sp)
   2d6a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d6a4:	d0a00b17 	ldw	r2,-32724(gp)
   2d6a8:	10000326 	beq	r2,zero,2d6b8 <alt_get_errno+0x24>
   2d6ac:	d0a00b17 	ldw	r2,-32724(gp)
   2d6b0:	103ee83a 	callr	r2
   2d6b4:	00000106 	br	2d6bc <alt_get_errno+0x28>
   2d6b8:	d0a71404 	addi	r2,gp,-25520
}
   2d6bc:	e037883a 	mov	sp,fp
   2d6c0:	dfc00117 	ldw	ra,4(sp)
   2d6c4:	df000017 	ldw	fp,0(sp)
   2d6c8:	dec00204 	addi	sp,sp,8
   2d6cc:	f800283a 	ret

0002d6d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d6d0:	defffb04 	addi	sp,sp,-20
   2d6d4:	dfc00415 	stw	ra,16(sp)
   2d6d8:	df000315 	stw	fp,12(sp)
   2d6dc:	df000304 	addi	fp,sp,12
   2d6e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d6e4:	e0bfff17 	ldw	r2,-4(fp)
   2d6e8:	10000816 	blt	r2,zero,2d70c <close+0x3c>
   2d6ec:	01400304 	movi	r5,12
   2d6f0:	e13fff17 	ldw	r4,-4(fp)
   2d6f4:	002adc80 	call	2adc8 <__mulsi3>
   2d6f8:	1007883a 	mov	r3,r2
   2d6fc:	008000f4 	movhi	r2,3
   2d700:	108d0704 	addi	r2,r2,13340
   2d704:	1885883a 	add	r2,r3,r2
   2d708:	00000106 	br	2d710 <close+0x40>
   2d70c:	0005883a 	mov	r2,zero
   2d710:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d714:	e0bffd17 	ldw	r2,-12(fp)
   2d718:	10001926 	beq	r2,zero,2d780 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d71c:	e0bffd17 	ldw	r2,-12(fp)
   2d720:	10800017 	ldw	r2,0(r2)
   2d724:	10800417 	ldw	r2,16(r2)
   2d728:	10000626 	beq	r2,zero,2d744 <close+0x74>
   2d72c:	e0bffd17 	ldw	r2,-12(fp)
   2d730:	10800017 	ldw	r2,0(r2)
   2d734:	10800417 	ldw	r2,16(r2)
   2d738:	e13ffd17 	ldw	r4,-12(fp)
   2d73c:	103ee83a 	callr	r2
   2d740:	00000106 	br	2d748 <close+0x78>
   2d744:	0005883a 	mov	r2,zero
   2d748:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d74c:	e13fff17 	ldw	r4,-4(fp)
   2d750:	002ddb80 	call	2ddb8 <alt_release_fd>
    if (rval < 0)
   2d754:	e0bffe17 	ldw	r2,-8(fp)
   2d758:	1000070e 	bge	r2,zero,2d778 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2d75c:	002d6940 	call	2d694 <alt_get_errno>
   2d760:	1007883a 	mov	r3,r2
   2d764:	e0bffe17 	ldw	r2,-8(fp)
   2d768:	0085c83a 	sub	r2,zero,r2
   2d76c:	18800015 	stw	r2,0(r3)
      return -1;
   2d770:	00bfffc4 	movi	r2,-1
   2d774:	00000706 	br	2d794 <close+0xc4>
    }
    return 0;
   2d778:	0005883a 	mov	r2,zero
   2d77c:	00000506 	br	2d794 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d780:	002d6940 	call	2d694 <alt_get_errno>
   2d784:	1007883a 	mov	r3,r2
   2d788:	00801444 	movi	r2,81
   2d78c:	18800015 	stw	r2,0(r3)
    return -1;
   2d790:	00bfffc4 	movi	r2,-1
  }
}
   2d794:	e037883a 	mov	sp,fp
   2d798:	dfc00117 	ldw	ra,4(sp)
   2d79c:	df000017 	ldw	fp,0(sp)
   2d7a0:	dec00204 	addi	sp,sp,8
   2d7a4:	f800283a 	ret

0002d7a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d7a8:	defffc04 	addi	sp,sp,-16
   2d7ac:	df000315 	stw	fp,12(sp)
   2d7b0:	df000304 	addi	fp,sp,12
   2d7b4:	e13ffd15 	stw	r4,-12(fp)
   2d7b8:	e17ffe15 	stw	r5,-8(fp)
   2d7bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d7c0:	e0bfff17 	ldw	r2,-4(fp)
}
   2d7c4:	e037883a 	mov	sp,fp
   2d7c8:	df000017 	ldw	fp,0(sp)
   2d7cc:	dec00104 	addi	sp,sp,4
   2d7d0:	f800283a 	ret

0002d7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d7d4:	defffe04 	addi	sp,sp,-8
   2d7d8:	dfc00115 	stw	ra,4(sp)
   2d7dc:	df000015 	stw	fp,0(sp)
   2d7e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d7e4:	d0a00b17 	ldw	r2,-32724(gp)
   2d7e8:	10000326 	beq	r2,zero,2d7f8 <alt_get_errno+0x24>
   2d7ec:	d0a00b17 	ldw	r2,-32724(gp)
   2d7f0:	103ee83a 	callr	r2
   2d7f4:	00000106 	br	2d7fc <alt_get_errno+0x28>
   2d7f8:	d0a71404 	addi	r2,gp,-25520
}
   2d7fc:	e037883a 	mov	sp,fp
   2d800:	dfc00117 	ldw	ra,4(sp)
   2d804:	df000017 	ldw	fp,0(sp)
   2d808:	dec00204 	addi	sp,sp,8
   2d80c:	f800283a 	ret

0002d810 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d810:	defffb04 	addi	sp,sp,-20
   2d814:	dfc00415 	stw	ra,16(sp)
   2d818:	df000315 	stw	fp,12(sp)
   2d81c:	df000304 	addi	fp,sp,12
   2d820:	e13ffe15 	stw	r4,-8(fp)
   2d824:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d828:	e0bffe17 	ldw	r2,-8(fp)
   2d82c:	10000816 	blt	r2,zero,2d850 <fstat+0x40>
   2d830:	01400304 	movi	r5,12
   2d834:	e13ffe17 	ldw	r4,-8(fp)
   2d838:	002adc80 	call	2adc8 <__mulsi3>
   2d83c:	1007883a 	mov	r3,r2
   2d840:	008000f4 	movhi	r2,3
   2d844:	108d0704 	addi	r2,r2,13340
   2d848:	1885883a 	add	r2,r3,r2
   2d84c:	00000106 	br	2d854 <fstat+0x44>
   2d850:	0005883a 	mov	r2,zero
   2d854:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d858:	e0bffd17 	ldw	r2,-12(fp)
   2d85c:	10001026 	beq	r2,zero,2d8a0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d860:	e0bffd17 	ldw	r2,-12(fp)
   2d864:	10800017 	ldw	r2,0(r2)
   2d868:	10800817 	ldw	r2,32(r2)
   2d86c:	10000726 	beq	r2,zero,2d88c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   2d870:	e0bffd17 	ldw	r2,-12(fp)
   2d874:	10800017 	ldw	r2,0(r2)
   2d878:	10800817 	ldw	r2,32(r2)
   2d87c:	e17fff17 	ldw	r5,-4(fp)
   2d880:	e13ffd17 	ldw	r4,-12(fp)
   2d884:	103ee83a 	callr	r2
   2d888:	00000a06 	br	2d8b4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d88c:	e0bfff17 	ldw	r2,-4(fp)
   2d890:	00c80004 	movi	r3,8192
   2d894:	10c00115 	stw	r3,4(r2)
      return 0;
   2d898:	0005883a 	mov	r2,zero
   2d89c:	00000506 	br	2d8b4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d8a0:	002d7d40 	call	2d7d4 <alt_get_errno>
   2d8a4:	1007883a 	mov	r3,r2
   2d8a8:	00801444 	movi	r2,81
   2d8ac:	18800015 	stw	r2,0(r3)
    return -1;
   2d8b0:	00bfffc4 	movi	r2,-1
  }
}
   2d8b4:	e037883a 	mov	sp,fp
   2d8b8:	dfc00117 	ldw	ra,4(sp)
   2d8bc:	df000017 	ldw	fp,0(sp)
   2d8c0:	dec00204 	addi	sp,sp,8
   2d8c4:	f800283a 	ret

0002d8c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d8c8:	defffe04 	addi	sp,sp,-8
   2d8cc:	dfc00115 	stw	ra,4(sp)
   2d8d0:	df000015 	stw	fp,0(sp)
   2d8d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d8d8:	d0a00b17 	ldw	r2,-32724(gp)
   2d8dc:	10000326 	beq	r2,zero,2d8ec <alt_get_errno+0x24>
   2d8e0:	d0a00b17 	ldw	r2,-32724(gp)
   2d8e4:	103ee83a 	callr	r2
   2d8e8:	00000106 	br	2d8f0 <alt_get_errno+0x28>
   2d8ec:	d0a71404 	addi	r2,gp,-25520
}
   2d8f0:	e037883a 	mov	sp,fp
   2d8f4:	dfc00117 	ldw	ra,4(sp)
   2d8f8:	df000017 	ldw	fp,0(sp)
   2d8fc:	dec00204 	addi	sp,sp,8
   2d900:	f800283a 	ret

0002d904 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d904:	deffed04 	addi	sp,sp,-76
   2d908:	dfc01215 	stw	ra,72(sp)
   2d90c:	df001115 	stw	fp,68(sp)
   2d910:	df001104 	addi	fp,sp,68
   2d914:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d918:	e0bfff17 	ldw	r2,-4(fp)
   2d91c:	10000816 	blt	r2,zero,2d940 <isatty+0x3c>
   2d920:	01400304 	movi	r5,12
   2d924:	e13fff17 	ldw	r4,-4(fp)
   2d928:	002adc80 	call	2adc8 <__mulsi3>
   2d92c:	1007883a 	mov	r3,r2
   2d930:	008000f4 	movhi	r2,3
   2d934:	108d0704 	addi	r2,r2,13340
   2d938:	1885883a 	add	r2,r3,r2
   2d93c:	00000106 	br	2d944 <isatty+0x40>
   2d940:	0005883a 	mov	r2,zero
   2d944:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d948:	e0bfef17 	ldw	r2,-68(fp)
   2d94c:	10000e26 	beq	r2,zero,2d988 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d950:	e0bfef17 	ldw	r2,-68(fp)
   2d954:	10800017 	ldw	r2,0(r2)
   2d958:	10800817 	ldw	r2,32(r2)
   2d95c:	1000021e 	bne	r2,zero,2d968 <isatty+0x64>
    {
      return 1;
   2d960:	00800044 	movi	r2,1
   2d964:	00000d06 	br	2d99c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d968:	e0bff004 	addi	r2,fp,-64
   2d96c:	100b883a 	mov	r5,r2
   2d970:	e13fff17 	ldw	r4,-4(fp)
   2d974:	002d8100 	call	2d810 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d978:	e0bff117 	ldw	r2,-60(fp)
   2d97c:	10880020 	cmpeqi	r2,r2,8192
   2d980:	10803fcc 	andi	r2,r2,255
   2d984:	00000506 	br	2d99c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d988:	002d8c80 	call	2d8c8 <alt_get_errno>
   2d98c:	1007883a 	mov	r3,r2
   2d990:	00801444 	movi	r2,81
   2d994:	18800015 	stw	r2,0(r3)
    return 0;
   2d998:	0005883a 	mov	r2,zero
  }
}
   2d99c:	e037883a 	mov	sp,fp
   2d9a0:	dfc00117 	ldw	ra,4(sp)
   2d9a4:	df000017 	ldw	fp,0(sp)
   2d9a8:	dec00204 	addi	sp,sp,8
   2d9ac:	f800283a 	ret

0002d9b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d9b0:	defffc04 	addi	sp,sp,-16
   2d9b4:	df000315 	stw	fp,12(sp)
   2d9b8:	df000304 	addi	fp,sp,12
   2d9bc:	e13ffd15 	stw	r4,-12(fp)
   2d9c0:	e17ffe15 	stw	r5,-8(fp)
   2d9c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d9c8:	e0fffe17 	ldw	r3,-8(fp)
   2d9cc:	e0bffd17 	ldw	r2,-12(fp)
   2d9d0:	18800c26 	beq	r3,r2,2da04 <alt_load_section+0x54>
  {
    while( to != end )
   2d9d4:	00000806 	br	2d9f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d9d8:	e0bffe17 	ldw	r2,-8(fp)
   2d9dc:	10c00104 	addi	r3,r2,4
   2d9e0:	e0fffe15 	stw	r3,-8(fp)
   2d9e4:	e0fffd17 	ldw	r3,-12(fp)
   2d9e8:	19000104 	addi	r4,r3,4
   2d9ec:	e13ffd15 	stw	r4,-12(fp)
   2d9f0:	18c00017 	ldw	r3,0(r3)
   2d9f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d9f8:	e0fffe17 	ldw	r3,-8(fp)
   2d9fc:	e0bfff17 	ldw	r2,-4(fp)
   2da00:	18bff51e 	bne	r3,r2,2d9d8 <__alt_data_end+0xfffed9d8>
    {
      *to++ = *from++;
    }
  }
}
   2da04:	0001883a 	nop
   2da08:	e037883a 	mov	sp,fp
   2da0c:	df000017 	ldw	fp,0(sp)
   2da10:	dec00104 	addi	sp,sp,4
   2da14:	f800283a 	ret

0002da18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2da18:	defffe04 	addi	sp,sp,-8
   2da1c:	dfc00115 	stw	ra,4(sp)
   2da20:	df000015 	stw	fp,0(sp)
   2da24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2da28:	018000f4 	movhi	r6,3
   2da2c:	3191d004 	addi	r6,r6,18240
   2da30:	014000f4 	movhi	r5,3
   2da34:	294ad404 	addi	r5,r5,11088
   2da38:	010000f4 	movhi	r4,3
   2da3c:	2111d004 	addi	r4,r4,18240
   2da40:	002d9b00 	call	2d9b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2da44:	018000b4 	movhi	r6,2
   2da48:	31808c04 	addi	r6,r6,560
   2da4c:	014000b4 	movhi	r5,2
   2da50:	29400804 	addi	r5,r5,32
   2da54:	010000b4 	movhi	r4,2
   2da58:	21000804 	addi	r4,r4,32
   2da5c:	002d9b00 	call	2d9b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2da60:	018000f4 	movhi	r6,3
   2da64:	318ad404 	addi	r6,r6,11088
   2da68:	014000f4 	movhi	r5,3
   2da6c:	2949e804 	addi	r5,r5,10144
   2da70:	010000f4 	movhi	r4,3
   2da74:	2109e804 	addi	r4,r4,10144
   2da78:	002d9b00 	call	2d9b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2da7c:	00313180 	call	31318 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2da80:	00315680 	call	31568 <alt_icache_flush_all>
}
   2da84:	0001883a 	nop
   2da88:	e037883a 	mov	sp,fp
   2da8c:	dfc00117 	ldw	ra,4(sp)
   2da90:	df000017 	ldw	fp,0(sp)
   2da94:	dec00204 	addi	sp,sp,8
   2da98:	f800283a 	ret

0002da9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2da9c:	defffe04 	addi	sp,sp,-8
   2daa0:	dfc00115 	stw	ra,4(sp)
   2daa4:	df000015 	stw	fp,0(sp)
   2daa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2daac:	d0a00b17 	ldw	r2,-32724(gp)
   2dab0:	10000326 	beq	r2,zero,2dac0 <alt_get_errno+0x24>
   2dab4:	d0a00b17 	ldw	r2,-32724(gp)
   2dab8:	103ee83a 	callr	r2
   2dabc:	00000106 	br	2dac4 <alt_get_errno+0x28>
   2dac0:	d0a71404 	addi	r2,gp,-25520
}
   2dac4:	e037883a 	mov	sp,fp
   2dac8:	dfc00117 	ldw	ra,4(sp)
   2dacc:	df000017 	ldw	fp,0(sp)
   2dad0:	dec00204 	addi	sp,sp,8
   2dad4:	f800283a 	ret

0002dad8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2dad8:	defff904 	addi	sp,sp,-28
   2dadc:	dfc00615 	stw	ra,24(sp)
   2dae0:	df000515 	stw	fp,20(sp)
   2dae4:	df000504 	addi	fp,sp,20
   2dae8:	e13ffd15 	stw	r4,-12(fp)
   2daec:	e17ffe15 	stw	r5,-8(fp)
   2daf0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2daf4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2daf8:	e0bffd17 	ldw	r2,-12(fp)
   2dafc:	10000816 	blt	r2,zero,2db20 <lseek+0x48>
   2db00:	01400304 	movi	r5,12
   2db04:	e13ffd17 	ldw	r4,-12(fp)
   2db08:	002adc80 	call	2adc8 <__mulsi3>
   2db0c:	1007883a 	mov	r3,r2
   2db10:	008000f4 	movhi	r2,3
   2db14:	108d0704 	addi	r2,r2,13340
   2db18:	1885883a 	add	r2,r3,r2
   2db1c:	00000106 	br	2db24 <lseek+0x4c>
   2db20:	0005883a 	mov	r2,zero
   2db24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2db28:	e0bffc17 	ldw	r2,-16(fp)
   2db2c:	10001026 	beq	r2,zero,2db70 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2db30:	e0bffc17 	ldw	r2,-16(fp)
   2db34:	10800017 	ldw	r2,0(r2)
   2db38:	10800717 	ldw	r2,28(r2)
   2db3c:	10000926 	beq	r2,zero,2db64 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2db40:	e0bffc17 	ldw	r2,-16(fp)
   2db44:	10800017 	ldw	r2,0(r2)
   2db48:	10800717 	ldw	r2,28(r2)
   2db4c:	e1bfff17 	ldw	r6,-4(fp)
   2db50:	e17ffe17 	ldw	r5,-8(fp)
   2db54:	e13ffc17 	ldw	r4,-16(fp)
   2db58:	103ee83a 	callr	r2
   2db5c:	e0bffb15 	stw	r2,-20(fp)
   2db60:	00000506 	br	2db78 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2db64:	00bfde84 	movi	r2,-134
   2db68:	e0bffb15 	stw	r2,-20(fp)
   2db6c:	00000206 	br	2db78 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2db70:	00bfebc4 	movi	r2,-81
   2db74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2db78:	e0bffb17 	ldw	r2,-20(fp)
   2db7c:	1000070e 	bge	r2,zero,2db9c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2db80:	002da9c0 	call	2da9c <alt_get_errno>
   2db84:	1007883a 	mov	r3,r2
   2db88:	e0bffb17 	ldw	r2,-20(fp)
   2db8c:	0085c83a 	sub	r2,zero,r2
   2db90:	18800015 	stw	r2,0(r3)
    rc = -1;
   2db94:	00bfffc4 	movi	r2,-1
   2db98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2db9c:	e0bffb17 	ldw	r2,-20(fp)
}
   2dba0:	e037883a 	mov	sp,fp
   2dba4:	dfc00117 	ldw	ra,4(sp)
   2dba8:	df000017 	ldw	fp,0(sp)
   2dbac:	dec00204 	addi	sp,sp,8
   2dbb0:	f800283a 	ret

0002dbb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2dbb4:	defffd04 	addi	sp,sp,-12
   2dbb8:	dfc00215 	stw	ra,8(sp)
   2dbbc:	df000115 	stw	fp,4(sp)
   2dbc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2dbc4:	0009883a 	mov	r4,zero
   2dbc8:	002e08c0 	call	2e08c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2dbcc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2dbd0:	002e0c40 	call	2e0c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2dbd4:	018000f4 	movhi	r6,3
   2dbd8:	318ac004 	addi	r6,r6,11008
   2dbdc:	014000f4 	movhi	r5,3
   2dbe0:	294ac004 	addi	r5,r5,11008
   2dbe4:	010000f4 	movhi	r4,3
   2dbe8:	210ac004 	addi	r4,r4,11008
   2dbec:	003190c0 	call	3190c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2dbf0:	00314180 	call	31418 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2dbf4:	010000f4 	movhi	r4,3
   2dbf8:	21051e04 	addi	r4,r4,5240
   2dbfc:	00322a40 	call	322a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2dc00:	d0a71517 	ldw	r2,-25516(gp)
   2dc04:	d0e71617 	ldw	r3,-25512(gp)
   2dc08:	d1271717 	ldw	r4,-25508(gp)
   2dc0c:	200d883a 	mov	r6,r4
   2dc10:	180b883a 	mov	r5,r3
   2dc14:	1009883a 	mov	r4,r2
   2dc18:	00207280 	call	20728 <main>
   2dc1c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2dc20:	01000044 	movi	r4,1
   2dc24:	002d6d00 	call	2d6d0 <close>
  exit (result);
   2dc28:	e13fff17 	ldw	r4,-4(fp)
   2dc2c:	00322b80 	call	322b8 <exit>

0002dc30 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2dc30:	defffe04 	addi	sp,sp,-8
   2dc34:	df000115 	stw	fp,4(sp)
   2dc38:	df000104 	addi	fp,sp,4
   2dc3c:	e13fff15 	stw	r4,-4(fp)
}
   2dc40:	0001883a 	nop
   2dc44:	e037883a 	mov	sp,fp
   2dc48:	df000017 	ldw	fp,0(sp)
   2dc4c:	dec00104 	addi	sp,sp,4
   2dc50:	f800283a 	ret

0002dc54 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2dc54:	defffe04 	addi	sp,sp,-8
   2dc58:	df000115 	stw	fp,4(sp)
   2dc5c:	df000104 	addi	fp,sp,4
   2dc60:	e13fff15 	stw	r4,-4(fp)
}
   2dc64:	0001883a 	nop
   2dc68:	e037883a 	mov	sp,fp
   2dc6c:	df000017 	ldw	fp,0(sp)
   2dc70:	dec00104 	addi	sp,sp,4
   2dc74:	f800283a 	ret

0002dc78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dc78:	defffe04 	addi	sp,sp,-8
   2dc7c:	dfc00115 	stw	ra,4(sp)
   2dc80:	df000015 	stw	fp,0(sp)
   2dc84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dc88:	d0a00b17 	ldw	r2,-32724(gp)
   2dc8c:	10000326 	beq	r2,zero,2dc9c <alt_get_errno+0x24>
   2dc90:	d0a00b17 	ldw	r2,-32724(gp)
   2dc94:	103ee83a 	callr	r2
   2dc98:	00000106 	br	2dca0 <alt_get_errno+0x28>
   2dc9c:	d0a71404 	addi	r2,gp,-25520
}
   2dca0:	e037883a 	mov	sp,fp
   2dca4:	dfc00117 	ldw	ra,4(sp)
   2dca8:	df000017 	ldw	fp,0(sp)
   2dcac:	dec00204 	addi	sp,sp,8
   2dcb0:	f800283a 	ret

0002dcb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2dcb4:	defff904 	addi	sp,sp,-28
   2dcb8:	dfc00615 	stw	ra,24(sp)
   2dcbc:	df000515 	stw	fp,20(sp)
   2dcc0:	df000504 	addi	fp,sp,20
   2dcc4:	e13ffd15 	stw	r4,-12(fp)
   2dcc8:	e17ffe15 	stw	r5,-8(fp)
   2dccc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dcd0:	e0bffd17 	ldw	r2,-12(fp)
   2dcd4:	10000816 	blt	r2,zero,2dcf8 <read+0x44>
   2dcd8:	01400304 	movi	r5,12
   2dcdc:	e13ffd17 	ldw	r4,-12(fp)
   2dce0:	002adc80 	call	2adc8 <__mulsi3>
   2dce4:	1007883a 	mov	r3,r2
   2dce8:	008000f4 	movhi	r2,3
   2dcec:	108d0704 	addi	r2,r2,13340
   2dcf0:	1885883a 	add	r2,r3,r2
   2dcf4:	00000106 	br	2dcfc <read+0x48>
   2dcf8:	0005883a 	mov	r2,zero
   2dcfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2dd00:	e0bffb17 	ldw	r2,-20(fp)
   2dd04:	10002226 	beq	r2,zero,2dd90 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dd08:	e0bffb17 	ldw	r2,-20(fp)
   2dd0c:	10800217 	ldw	r2,8(r2)
   2dd10:	108000cc 	andi	r2,r2,3
   2dd14:	10800060 	cmpeqi	r2,r2,1
   2dd18:	1000181e 	bne	r2,zero,2dd7c <read+0xc8>
        (fd->dev->read))
   2dd1c:	e0bffb17 	ldw	r2,-20(fp)
   2dd20:	10800017 	ldw	r2,0(r2)
   2dd24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dd28:	10001426 	beq	r2,zero,2dd7c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2dd2c:	e0bffb17 	ldw	r2,-20(fp)
   2dd30:	10800017 	ldw	r2,0(r2)
   2dd34:	10800517 	ldw	r2,20(r2)
   2dd38:	e0ffff17 	ldw	r3,-4(fp)
   2dd3c:	180d883a 	mov	r6,r3
   2dd40:	e17ffe17 	ldw	r5,-8(fp)
   2dd44:	e13ffb17 	ldw	r4,-20(fp)
   2dd48:	103ee83a 	callr	r2
   2dd4c:	e0bffc15 	stw	r2,-16(fp)
   2dd50:	e0bffc17 	ldw	r2,-16(fp)
   2dd54:	1000070e 	bge	r2,zero,2dd74 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   2dd58:	002dc780 	call	2dc78 <alt_get_errno>
   2dd5c:	1007883a 	mov	r3,r2
   2dd60:	e0bffc17 	ldw	r2,-16(fp)
   2dd64:	0085c83a 	sub	r2,zero,r2
   2dd68:	18800015 	stw	r2,0(r3)
          return -1;
   2dd6c:	00bfffc4 	movi	r2,-1
   2dd70:	00000c06 	br	2dda4 <read+0xf0>
        }
        return rval;
   2dd74:	e0bffc17 	ldw	r2,-16(fp)
   2dd78:	00000a06 	br	2dda4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2dd7c:	002dc780 	call	2dc78 <alt_get_errno>
   2dd80:	1007883a 	mov	r3,r2
   2dd84:	00800344 	movi	r2,13
   2dd88:	18800015 	stw	r2,0(r3)
   2dd8c:	00000406 	br	2dda0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2dd90:	002dc780 	call	2dc78 <alt_get_errno>
   2dd94:	1007883a 	mov	r3,r2
   2dd98:	00801444 	movi	r2,81
   2dd9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2dda0:	00bfffc4 	movi	r2,-1
}
   2dda4:	e037883a 	mov	sp,fp
   2dda8:	dfc00117 	ldw	ra,4(sp)
   2ddac:	df000017 	ldw	fp,0(sp)
   2ddb0:	dec00204 	addi	sp,sp,8
   2ddb4:	f800283a 	ret

0002ddb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2ddb8:	defffc04 	addi	sp,sp,-16
   2ddbc:	dfc00315 	stw	ra,12(sp)
   2ddc0:	df000215 	stw	fp,8(sp)
   2ddc4:	dc000115 	stw	r16,4(sp)
   2ddc8:	df000204 	addi	fp,sp,8
   2ddcc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2ddd0:	e0bffe17 	ldw	r2,-8(fp)
   2ddd4:	108000d0 	cmplti	r2,r2,3
   2ddd8:	1000111e 	bne	r2,zero,2de20 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2dddc:	040000f4 	movhi	r16,3
   2dde0:	840d0704 	addi	r16,r16,13340
   2dde4:	e0bffe17 	ldw	r2,-8(fp)
   2dde8:	01400304 	movi	r5,12
   2ddec:	1009883a 	mov	r4,r2
   2ddf0:	002adc80 	call	2adc8 <__mulsi3>
   2ddf4:	8085883a 	add	r2,r16,r2
   2ddf8:	10800204 	addi	r2,r2,8
   2ddfc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2de00:	040000f4 	movhi	r16,3
   2de04:	840d0704 	addi	r16,r16,13340
   2de08:	e0bffe17 	ldw	r2,-8(fp)
   2de0c:	01400304 	movi	r5,12
   2de10:	1009883a 	mov	r4,r2
   2de14:	002adc80 	call	2adc8 <__mulsi3>
   2de18:	8085883a 	add	r2,r16,r2
   2de1c:	10000015 	stw	zero,0(r2)
  }
}
   2de20:	0001883a 	nop
   2de24:	e6ffff04 	addi	sp,fp,-4
   2de28:	dfc00217 	ldw	ra,8(sp)
   2de2c:	df000117 	ldw	fp,4(sp)
   2de30:	dc000017 	ldw	r16,0(sp)
   2de34:	dec00304 	addi	sp,sp,12
   2de38:	f800283a 	ret

0002de3c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2de3c:	defff904 	addi	sp,sp,-28
   2de40:	df000615 	stw	fp,24(sp)
   2de44:	df000604 	addi	fp,sp,24
   2de48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2de4c:	0005303a 	rdctl	r2,status
   2de50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2de54:	e0fffe17 	ldw	r3,-8(fp)
   2de58:	00bfff84 	movi	r2,-2
   2de5c:	1884703a 	and	r2,r3,r2
   2de60:	1001703a 	wrctl	status,r2
  
  return context;
   2de64:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2de68:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2de6c:	d0a00c17 	ldw	r2,-32720(gp)
   2de70:	10c000c4 	addi	r3,r2,3
   2de74:	00bfff04 	movi	r2,-4
   2de78:	1884703a 	and	r2,r3,r2
   2de7c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2de80:	d0e00c17 	ldw	r3,-32720(gp)
   2de84:	e0bfff17 	ldw	r2,-4(fp)
   2de88:	1887883a 	add	r3,r3,r2
   2de8c:	00800134 	movhi	r2,4
   2de90:	10800004 	addi	r2,r2,0
   2de94:	10c0062e 	bgeu	r2,r3,2deb0 <sbrk+0x74>
   2de98:	e0bffb17 	ldw	r2,-20(fp)
   2de9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dea0:	e0bffa17 	ldw	r2,-24(fp)
   2dea4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2dea8:	00bfffc4 	movi	r2,-1
   2deac:	00000b06 	br	2dedc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2deb0:	d0a00c17 	ldw	r2,-32720(gp)
   2deb4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2deb8:	d0e00c17 	ldw	r3,-32720(gp)
   2debc:	e0bfff17 	ldw	r2,-4(fp)
   2dec0:	1885883a 	add	r2,r3,r2
   2dec4:	d0a00c15 	stw	r2,-32720(gp)
   2dec8:	e0bffb17 	ldw	r2,-20(fp)
   2decc:	e0bffc15 	stw	r2,-16(fp)
   2ded0:	e0bffc17 	ldw	r2,-16(fp)
   2ded4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2ded8:	e0bffd17 	ldw	r2,-12(fp)
} 
   2dedc:	e037883a 	mov	sp,fp
   2dee0:	df000017 	ldw	fp,0(sp)
   2dee4:	dec00104 	addi	sp,sp,4
   2dee8:	f800283a 	ret

0002deec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2deec:	defffd04 	addi	sp,sp,-12
   2def0:	dfc00215 	stw	ra,8(sp)
   2def4:	df000115 	stw	fp,4(sp)
   2def8:	df000104 	addi	fp,sp,4
   2defc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2df00:	e13fff17 	ldw	r4,-4(fp)
   2df04:	00311c00 	call	311c0 <alt_busy_sleep>
}
   2df08:	e037883a 	mov	sp,fp
   2df0c:	dfc00117 	ldw	ra,4(sp)
   2df10:	df000017 	ldw	fp,0(sp)
   2df14:	dec00204 	addi	sp,sp,8
   2df18:	f800283a 	ret

0002df1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2df1c:	defffe04 	addi	sp,sp,-8
   2df20:	dfc00115 	stw	ra,4(sp)
   2df24:	df000015 	stw	fp,0(sp)
   2df28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2df2c:	d0a00b17 	ldw	r2,-32724(gp)
   2df30:	10000326 	beq	r2,zero,2df40 <alt_get_errno+0x24>
   2df34:	d0a00b17 	ldw	r2,-32724(gp)
   2df38:	103ee83a 	callr	r2
   2df3c:	00000106 	br	2df44 <alt_get_errno+0x28>
   2df40:	d0a71404 	addi	r2,gp,-25520
}
   2df44:	e037883a 	mov	sp,fp
   2df48:	dfc00117 	ldw	ra,4(sp)
   2df4c:	df000017 	ldw	fp,0(sp)
   2df50:	dec00204 	addi	sp,sp,8
   2df54:	f800283a 	ret

0002df58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2df58:	defff904 	addi	sp,sp,-28
   2df5c:	dfc00615 	stw	ra,24(sp)
   2df60:	df000515 	stw	fp,20(sp)
   2df64:	df000504 	addi	fp,sp,20
   2df68:	e13ffd15 	stw	r4,-12(fp)
   2df6c:	e17ffe15 	stw	r5,-8(fp)
   2df70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2df74:	e0bffd17 	ldw	r2,-12(fp)
   2df78:	10000816 	blt	r2,zero,2df9c <write+0x44>
   2df7c:	01400304 	movi	r5,12
   2df80:	e13ffd17 	ldw	r4,-12(fp)
   2df84:	002adc80 	call	2adc8 <__mulsi3>
   2df88:	1007883a 	mov	r3,r2
   2df8c:	008000f4 	movhi	r2,3
   2df90:	108d0704 	addi	r2,r2,13340
   2df94:	1885883a 	add	r2,r3,r2
   2df98:	00000106 	br	2dfa0 <write+0x48>
   2df9c:	0005883a 	mov	r2,zero
   2dfa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2dfa4:	e0bffb17 	ldw	r2,-20(fp)
   2dfa8:	10002126 	beq	r2,zero,2e030 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2dfac:	e0bffb17 	ldw	r2,-20(fp)
   2dfb0:	10800217 	ldw	r2,8(r2)
   2dfb4:	108000cc 	andi	r2,r2,3
   2dfb8:	10001826 	beq	r2,zero,2e01c <write+0xc4>
   2dfbc:	e0bffb17 	ldw	r2,-20(fp)
   2dfc0:	10800017 	ldw	r2,0(r2)
   2dfc4:	10800617 	ldw	r2,24(r2)
   2dfc8:	10001426 	beq	r2,zero,2e01c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2dfcc:	e0bffb17 	ldw	r2,-20(fp)
   2dfd0:	10800017 	ldw	r2,0(r2)
   2dfd4:	10800617 	ldw	r2,24(r2)
   2dfd8:	e0ffff17 	ldw	r3,-4(fp)
   2dfdc:	180d883a 	mov	r6,r3
   2dfe0:	e17ffe17 	ldw	r5,-8(fp)
   2dfe4:	e13ffb17 	ldw	r4,-20(fp)
   2dfe8:	103ee83a 	callr	r2
   2dfec:	e0bffc15 	stw	r2,-16(fp)
   2dff0:	e0bffc17 	ldw	r2,-16(fp)
   2dff4:	1000070e 	bge	r2,zero,2e014 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   2dff8:	002df1c0 	call	2df1c <alt_get_errno>
   2dffc:	1007883a 	mov	r3,r2
   2e000:	e0bffc17 	ldw	r2,-16(fp)
   2e004:	0085c83a 	sub	r2,zero,r2
   2e008:	18800015 	stw	r2,0(r3)
        return -1;
   2e00c:	00bfffc4 	movi	r2,-1
   2e010:	00000c06 	br	2e044 <write+0xec>
      }
      return rval;
   2e014:	e0bffc17 	ldw	r2,-16(fp)
   2e018:	00000a06 	br	2e044 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e01c:	002df1c0 	call	2df1c <alt_get_errno>
   2e020:	1007883a 	mov	r3,r2
   2e024:	00800344 	movi	r2,13
   2e028:	18800015 	stw	r2,0(r3)
   2e02c:	00000406 	br	2e040 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e030:	002df1c0 	call	2df1c <alt_get_errno>
   2e034:	1007883a 	mov	r3,r2
   2e038:	00801444 	movi	r2,81
   2e03c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e040:	00bfffc4 	movi	r2,-1
}
   2e044:	e037883a 	mov	sp,fp
   2e048:	dfc00117 	ldw	ra,4(sp)
   2e04c:	df000017 	ldw	fp,0(sp)
   2e050:	dec00204 	addi	sp,sp,8
   2e054:	f800283a 	ret

0002e058 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e058:	defffd04 	addi	sp,sp,-12
   2e05c:	dfc00215 	stw	ra,8(sp)
   2e060:	df000115 	stw	fp,4(sp)
   2e064:	df000104 	addi	fp,sp,4
   2e068:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e06c:	d1600804 	addi	r5,gp,-32736
   2e070:	e13fff17 	ldw	r4,-4(fp)
   2e074:	00313740 	call	31374 <alt_dev_llist_insert>
}
   2e078:	e037883a 	mov	sp,fp
   2e07c:	dfc00117 	ldw	ra,4(sp)
   2e080:	df000017 	ldw	fp,0(sp)
   2e084:	dec00204 	addi	sp,sp,8
   2e088:	f800283a 	ret

0002e08c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e08c:	defffd04 	addi	sp,sp,-12
   2e090:	dfc00215 	stw	ra,8(sp)
   2e094:	df000115 	stw	fp,4(sp)
   2e098:	df000104 	addi	fp,sp,4
   2e09c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII, NIOSII);
   2e0a0:	00320180 	call	32018 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e0a4:	00800044 	movi	r2,1
   2e0a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e0ac:	0001883a 	nop
   2e0b0:	e037883a 	mov	sp,fp
   2e0b4:	dfc00117 	ldw	ra,4(sp)
   2e0b8:	df000017 	ldw	fp,0(sp)
   2e0bc:	dec00204 	addi	sp,sp,8
   2e0c0:	f800283a 	ret

0002e0c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e0c4:	defffe04 	addi	sp,sp,-8
   2e0c8:	dfc00115 	stw	ra,4(sp)
   2e0cc:	df000015 	stw	fp,0(sp)
   2e0d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C, I2C);
   2e0d4:	010000f4 	movhi	r4,3
   2e0d8:	210d6704 	addi	r4,r4,13724
   2e0dc:	002e38c0 	call	2e38c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
   2e0e0:	000d883a 	mov	r6,zero
   2e0e4:	000b883a 	mov	r5,zero
   2e0e8:	010000f4 	movhi	r4,3
   2e0ec:	210d7f04 	addi	r4,r4,13820
   2e0f0:	002feb80 	call	2feb8 <altera_avalon_jtag_uart_init>
   2e0f4:	010000f4 	movhi	r4,3
   2e0f8:	210d7504 	addi	r4,r4,13780
   2e0fc:	002e0580 	call	2e058 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( ID, ID);
   2e100:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART1, UART1);
   2e104:	01800084 	movi	r6,2
   2e108:	000b883a 	mov	r5,zero
   2e10c:	010000f4 	movhi	r4,3
   2e110:	21119704 	addi	r4,r4,18012
   2e114:	00308cc0 	call	308cc <altera_avalon_uart_init>
   2e118:	010000f4 	movhi	r4,3
   2e11c:	21118d04 	addi	r4,r4,17972
   2e120:	002e0580 	call	2e058 <alt_dev_reg>
}
   2e124:	0001883a 	nop
   2e128:	e037883a 	mov	sp,fp
   2e12c:	dfc00117 	ldw	ra,4(sp)
   2e130:	df000017 	ldw	fp,0(sp)
   2e134:	dec00204 	addi	sp,sp,8
   2e138:	f800283a 	ret

0002e13c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   2e13c:	defff904 	addi	sp,sp,-28
   2e140:	dfc00615 	stw	ra,24(sp)
   2e144:	df000515 	stw	fp,20(sp)
   2e148:	df000504 	addi	fp,sp,20
   2e14c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   2e150:	008000b4 	movhi	r2,2
   2e154:	10a1a804 	addi	r2,r2,-31072
   2e158:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   2e15c:	e0bfff17 	ldw	r2,-4(fp)
   2e160:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   2e164:	e0bffc17 	ldw	r2,-16(fp)
   2e168:	10800717 	ldw	r2,28(r2)
   2e16c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   2e170:	e0bffd17 	ldw	r2,-12(fp)
   2e174:	10800217 	ldw	r2,8(r2)
   2e178:	10800098 	cmpnei	r2,r2,2
   2e17c:	1000251e 	bne	r2,zero,2e214 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   2e180:	e0bffd17 	ldw	r2,-12(fp)
   2e184:	10c00017 	ldw	r3,0(r2)
   2e188:	e0bffd17 	ldw	r2,-12(fp)
   2e18c:	10800117 	ldw	r2,4(r2)
   2e190:	e13ffe04 	addi	r4,fp,-8
   2e194:	200f883a 	mov	r7,r4
   2e198:	100d883a 	mov	r6,r2
   2e19c:	180b883a 	mov	r5,r3
   2e1a0:	e13ffc17 	ldw	r4,-16(fp)
   2e1a4:	002e8ec0 	call	2e8ec <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   2e1a8:	e0bffd17 	ldw	r2,-12(fp)
   2e1ac:	10c00117 	ldw	r3,4(r2)
   2e1b0:	e0bffe17 	ldw	r2,-8(fp)
   2e1b4:	1887c83a 	sub	r3,r3,r2
   2e1b8:	e0bffd17 	ldw	r2,-12(fp)
   2e1bc:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   2e1c0:	e0bffd17 	ldw	r2,-12(fp)
   2e1c4:	10c00017 	ldw	r3,0(r2)
   2e1c8:	e0bffe17 	ldw	r2,-8(fp)
   2e1cc:	1887883a 	add	r3,r3,r2
   2e1d0:	e0bffd17 	ldw	r2,-12(fp)
   2e1d4:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   2e1d8:	e0bffd17 	ldw	r2,-12(fp)
   2e1dc:	10800117 	ldw	r2,4(r2)
   2e1e0:	10000c26 	beq	r2,zero,2e214 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e1e4:	01400704 	movi	r5,28
   2e1e8:	e13ffc17 	ldw	r4,-16(fp)
   2e1ec:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2e1f0:	01400084 	movi	r5,2
   2e1f4:	e13ffc17 	ldw	r4,-16(fp)
   2e1f8:	002fb480 	call	2fb48 <alt_avalon_i2c_int_enable>
   2e1fc:	00000e06 	br	2e238 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   2e200:	e0bffb17 	ldw	r2,-20(fp)
   2e204:	10bfffc4 	addi	r2,r2,-1
   2e208:	e0bffb15 	stw	r2,-20(fp)
   2e20c:	e0bffb17 	ldw	r2,-20(fp)
   2e210:	10000426 	beq	r2,zero,2e224 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   2e214:	e13ffc17 	ldw	r4,-16(fp)
   2e218:	002e8a80 	call	2e8a8 <alt_avalon_i2c_is_busy>
   2e21c:	103ff81e 	bne	r2,zero,2e200 <__alt_data_end+0xfffee200>
   2e220:	00000106 	br	2e228 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   2e224:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   2e228:	e13ffc17 	ldw	r4,-16(fp)
   2e22c:	002e5500 	call	2e550 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   2e230:	e0bffd17 	ldw	r2,-12(fp)
   2e234:	10000215 	stw	zero,8(r2)
}
   2e238:	e037883a 	mov	sp,fp
   2e23c:	dfc00117 	ldw	ra,4(sp)
   2e240:	df000017 	ldw	fp,0(sp)
   2e244:	dec00204 	addi	sp,sp,8
   2e248:	f800283a 	ret

0002e24c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   2e24c:	defffc04 	addi	sp,sp,-16
   2e250:	dfc00315 	stw	ra,12(sp)
   2e254:	df000215 	stw	fp,8(sp)
   2e258:	df000204 	addi	fp,sp,8
   2e25c:	e13ffe15 	stw	r4,-8(fp)
   2e260:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   2e264:	e0bfff17 	ldw	r2,-4(fp)
   2e268:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   2e26c:	e1ffff17 	ldw	r7,-4(fp)
   2e270:	000d883a 	mov	r6,zero
   2e274:	014000f4 	movhi	r5,3
   2e278:	29784f04 	addi	r5,r5,-7876
   2e27c:	e13ffe17 	ldw	r4,-8(fp)
   2e280:	002e3380 	call	2e338 <alt_avalon_i2c_register_callback>
}
   2e284:	0001883a 	nop
   2e288:	e037883a 	mov	sp,fp
   2e28c:	dfc00117 	ldw	ra,4(sp)
   2e290:	df000017 	ldw	fp,0(sp)
   2e294:	dec00204 	addi	sp,sp,8
   2e298:	f800283a 	ret

0002e29c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   2e29c:	defff904 	addi	sp,sp,-28
   2e2a0:	dfc00615 	stw	ra,24(sp)
   2e2a4:	df000515 	stw	fp,20(sp)
   2e2a8:	df000504 	addi	fp,sp,20
   2e2ac:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   2e2b0:	e0bfff17 	ldw	r2,-4(fp)
   2e2b4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2e2b8:	014007c4 	movi	r5,31
   2e2bc:	e13ffb17 	ldw	r4,-20(fp)
   2e2c0:	002fae00 	call	2fae0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e2c4:	01400704 	movi	r5,28
   2e2c8:	e13ffb17 	ldw	r4,-20(fp)
   2e2cc:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   2e2d0:	e0bffb17 	ldw	r2,-20(fp)
   2e2d4:	10800617 	ldw	r2,24(r2)
   2e2d8:	10001126 	beq	r2,zero,2e320 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e2dc:	0005303a 	rdctl	r2,status
   2e2e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e2e4:	e0fffd17 	ldw	r3,-12(fp)
   2e2e8:	00bfff84 	movi	r2,-2
   2e2ec:	1884703a 	and	r2,r3,r2
   2e2f0:	1001703a 	wrctl	status,r2
  
  return context;
   2e2f4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2e2f8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   2e2fc:	e0bffb17 	ldw	r2,-20(fp)
   2e300:	10800617 	ldw	r2,24(r2)
   2e304:	e13ffb17 	ldw	r4,-20(fp)
   2e308:	103ee83a 	callr	r2
   2e30c:	e0bffc17 	ldw	r2,-16(fp)
   2e310:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e314:	e0bffe17 	ldw	r2,-8(fp)
   2e318:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   2e31c:	0001883a 	nop
   2e320:	0001883a 	nop
}
   2e324:	e037883a 	mov	sp,fp
   2e328:	dfc00117 	ldw	ra,4(sp)
   2e32c:	df000017 	ldw	fp,0(sp)
   2e330:	dec00204 	addi	sp,sp,8
   2e334:	f800283a 	ret

0002e338 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   2e338:	defffb04 	addi	sp,sp,-20
   2e33c:	df000415 	stw	fp,16(sp)
   2e340:	df000404 	addi	fp,sp,16
   2e344:	e13ffc15 	stw	r4,-16(fp)
   2e348:	e17ffd15 	stw	r5,-12(fp)
   2e34c:	e1bffe15 	stw	r6,-8(fp)
   2e350:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   2e354:	e0bffc17 	ldw	r2,-16(fp)
   2e358:	e0fffd17 	ldw	r3,-12(fp)
   2e35c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   2e360:	e0bffc17 	ldw	r2,-16(fp)
   2e364:	e0ffff17 	ldw	r3,-4(fp)
   2e368:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   2e36c:	e0bffc17 	ldw	r2,-16(fp)
   2e370:	e0fffe17 	ldw	r3,-8(fp)
   2e374:	10c00815 	stw	r3,32(r2)

    return ;
   2e378:	0001883a 	nop
}
   2e37c:	e037883a 	mov	sp,fp
   2e380:	df000017 	ldw	fp,0(sp)
   2e384:	dec00104 	addi	sp,sp,4
   2e388:	f800283a 	ret

0002e38c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   2e38c:	defff704 	addi	sp,sp,-36
   2e390:	dfc00815 	stw	ra,32(sp)
   2e394:	df000715 	stw	fp,28(sp)
   2e398:	df000704 	addi	fp,sp,28
   2e39c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   2e3a0:	e13fff17 	ldw	r4,-4(fp)
   2e3a4:	002e5500 	call	2e550 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2e3a8:	014007c4 	movi	r5,31
   2e3ac:	e13fff17 	ldw	r4,-4(fp)
   2e3b0:	002fae00 	call	2fae0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e3b4:	01400704 	movi	r5,28
   2e3b8:	e13fff17 	ldw	r4,-4(fp)
   2e3bc:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   2e3c0:	014000c4 	movi	r5,3
   2e3c4:	e13fff17 	ldw	r4,-4(fp)
   2e3c8:	002fcec0 	call	2fcec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   2e3cc:	014000c4 	movi	r5,3
   2e3d0:	e13fff17 	ldw	r4,-4(fp)
   2e3d4:	002fc3c0 	call	2fc3c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   2e3d8:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   2e3dc:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   2e3e0:	e0bffb04 	addi	r2,fp,-20
   2e3e4:	018000b4 	movhi	r6,2
   2e3e8:	31a1a804 	addi	r6,r6,-31072
   2e3ec:	100b883a 	mov	r5,r2
   2e3f0:	e13fff17 	ldw	r4,-4(fp)
   2e3f4:	002e7ac0 	call	2e7ac <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   2e3f8:	e0bffb04 	addi	r2,fp,-20
   2e3fc:	100b883a 	mov	r5,r2
   2e400:	e13fff17 	ldw	r4,-4(fp)
   2e404:	002e64c0 	call	2e64c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   2e408:	d1600d04 	addi	r5,gp,-32716
   2e40c:	e13fff17 	ldw	r4,-4(fp)
   2e410:	00313740 	call	31374 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2e414:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   2e418:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   2e41c:	e0bffa17 	ldw	r2,-24(fp)
   2e420:	10000c1e 	bne	r2,zero,2e454 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   2e424:	e0bfff17 	ldw	r2,-4(fp)
   2e428:	10c00417 	ldw	r3,16(r2)
   2e42c:	e0bfff17 	ldw	r2,-4(fp)
   2e430:	10800517 	ldw	r2,20(r2)
   2e434:	d8000015 	stw	zero,0(sp)
   2e438:	e1ffff17 	ldw	r7,-4(fp)
   2e43c:	018000f4 	movhi	r6,3
   2e440:	31b8a704 	addi	r6,r6,-7524
   2e444:	100b883a 	mov	r5,r2
   2e448:	1809883a 	mov	r4,r3
   2e44c:	00315880 	call	31588 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   2e450:	00000406 	br	2e464 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   2e454:	010000f4 	movhi	r4,3
   2e458:	210acc04 	addi	r4,r4,11056
   2e45c:	0031c0c0 	call	31c0c <alt_printf>
    }

    return;
   2e460:	0001883a 	nop

}
   2e464:	e037883a 	mov	sp,fp
   2e468:	dfc00117 	ldw	ra,4(sp)
   2e46c:	df000017 	ldw	fp,0(sp)
   2e470:	dec00204 	addi	sp,sp,8
   2e474:	f800283a 	ret

0002e478 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   2e478:	defffc04 	addi	sp,sp,-16
   2e47c:	dfc00315 	stw	ra,12(sp)
   2e480:	df000215 	stw	fp,8(sp)
   2e484:	df000204 	addi	fp,sp,8
   2e488:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   2e48c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   2e490:	d1600d04 	addi	r5,gp,-32716
   2e494:	e13fff17 	ldw	r4,-4(fp)
   2e498:	00314d80 	call	314d8 <alt_find_dev>
   2e49c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   2e4a0:	e0bffe17 	ldw	r2,-8(fp)
}
   2e4a4:	e037883a 	mov	sp,fp
   2e4a8:	dfc00117 	ldw	ra,4(sp)
   2e4ac:	df000017 	ldw	fp,0(sp)
   2e4b0:	dec00204 	addi	sp,sp,8
   2e4b4:	f800283a 	ret

0002e4b8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e4b8:	defffc04 	addi	sp,sp,-16
   2e4bc:	df000315 	stw	fp,12(sp)
   2e4c0:	df000304 	addi	fp,sp,12
   2e4c4:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   2e4c8:	e0bfff17 	ldw	r2,-4(fp)
   2e4cc:	10800717 	ldw	r2,28(r2)
   2e4d0:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   2e4d4:	e0bfff17 	ldw	r2,-4(fp)
   2e4d8:	10800317 	ldw	r2,12(r2)
   2e4dc:	10800204 	addi	r2,r2,8
   2e4e0:	10800037 	ldwio	r2,0(r2)
   2e4e4:	1080004c 	andi	r2,r2,1
   2e4e8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   2e4ec:	e0bffe17 	ldw	r2,-8(fp)
   2e4f0:	10000226 	beq	r2,zero,2e4fc <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   2e4f4:	00bffe44 	movi	r2,-7
   2e4f8:	00001106 	br	2e540 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   2e4fc:	e0bfff17 	ldw	r2,-4(fp)
   2e500:	10c00617 	ldw	r3,24(r2)
   2e504:	008000f4 	movhi	r2,3
   2e508:	10b84f04 	addi	r2,r2,-7876
   2e50c:	1880021e 	bne	r3,r2,2e518 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   2e510:	e0bffd17 	ldw	r2,-12(fp)
   2e514:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   2e518:	e0bfff17 	ldw	r2,-4(fp)
   2e51c:	10800317 	ldw	r2,12(r2)
   2e520:	10800204 	addi	r2,r2,8
   2e524:	e0ffff17 	ldw	r3,-4(fp)
   2e528:	18c00317 	ldw	r3,12(r3)
   2e52c:	18c00204 	addi	r3,r3,8
   2e530:	18c00037 	ldwio	r3,0(r3)
   2e534:	18c00054 	ori	r3,r3,1
   2e538:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   2e53c:	0005883a 	mov	r2,zero
}
   2e540:	e037883a 	mov	sp,fp
   2e544:	df000017 	ldw	fp,0(sp)
   2e548:	dec00104 	addi	sp,sp,4
   2e54c:	f800283a 	ret

0002e550 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e550:	defffe04 	addi	sp,sp,-8
   2e554:	df000115 	stw	fp,4(sp)
   2e558:	df000104 	addi	fp,sp,4
   2e55c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   2e560:	e0bfff17 	ldw	r2,-4(fp)
   2e564:	10800317 	ldw	r2,12(r2)
   2e568:	10800204 	addi	r2,r2,8
   2e56c:	e0ffff17 	ldw	r3,-4(fp)
   2e570:	18c00317 	ldw	r3,12(r3)
   2e574:	18c00204 	addi	r3,r3,8
   2e578:	19000037 	ldwio	r4,0(r3)
   2e57c:	00ffff84 	movi	r3,-2
   2e580:	20c6703a 	and	r3,r4,r3
   2e584:	10c00035 	stwio	r3,0(r2)

}
   2e588:	0001883a 	nop
   2e58c:	e037883a 	mov	sp,fp
   2e590:	df000017 	ldw	fp,0(sp)
   2e594:	dec00104 	addi	sp,sp,4
   2e598:	f800283a 	ret

0002e59c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2e59c:	defffd04 	addi	sp,sp,-12
   2e5a0:	df000215 	stw	fp,8(sp)
   2e5a4:	df000204 	addi	fp,sp,8
   2e5a8:	e13ffe15 	stw	r4,-8(fp)
   2e5ac:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   2e5b0:	e0bffe17 	ldw	r2,-8(fp)
   2e5b4:	10c00d17 	ldw	r3,52(r2)
   2e5b8:	e0bfff17 	ldw	r2,-4(fp)
   2e5bc:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   2e5c0:	e0bffe17 	ldw	r2,-8(fp)
   2e5c4:	10800317 	ldw	r2,12(r2)
   2e5c8:	10800204 	addi	r2,r2,8
   2e5cc:	10800037 	ldwio	r2,0(r2)
   2e5d0:	1080008c 	andi	r2,r2,2
   2e5d4:	1005d07a 	srai	r2,r2,1
   2e5d8:	1007883a 	mov	r3,r2
   2e5dc:	e0bfff17 	ldw	r2,-4(fp)
   2e5e0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   2e5e4:	e0bffe17 	ldw	r2,-8(fp)
   2e5e8:	10800317 	ldw	r2,12(r2)
   2e5ec:	10800904 	addi	r2,r2,36
   2e5f0:	10800037 	ldwio	r2,0(r2)
   2e5f4:	1007883a 	mov	r3,r2
   2e5f8:	e0bfff17 	ldw	r2,-4(fp)
   2e5fc:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   2e600:	e0bffe17 	ldw	r2,-8(fp)
   2e604:	10800317 	ldw	r2,12(r2)
   2e608:	10800804 	addi	r2,r2,32
   2e60c:	10800037 	ldwio	r2,0(r2)
   2e610:	1007883a 	mov	r3,r2
   2e614:	e0bfff17 	ldw	r2,-4(fp)
   2e618:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   2e61c:	e0bffe17 	ldw	r2,-8(fp)
   2e620:	10800317 	ldw	r2,12(r2)
   2e624:	10800a04 	addi	r2,r2,40
   2e628:	10800037 	ldwio	r2,0(r2)
   2e62c:	1007883a 	mov	r3,r2
   2e630:	e0bfff17 	ldw	r2,-4(fp)
   2e634:	10c0030d 	sth	r3,12(r2)
}
   2e638:	0001883a 	nop
   2e63c:	e037883a 	mov	sp,fp
   2e640:	df000017 	ldw	fp,0(sp)
   2e644:	dec00104 	addi	sp,sp,4
   2e648:	f800283a 	ret

0002e64c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2e64c:	defffd04 	addi	sp,sp,-12
   2e650:	df000215 	stw	fp,8(sp)
   2e654:	df000204 	addi	fp,sp,8
   2e658:	e13ffe15 	stw	r4,-8(fp)
   2e65c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   2e660:	e0bfff17 	ldw	r2,-4(fp)
   2e664:	10c00017 	ldw	r3,0(r2)
   2e668:	e0bffe17 	ldw	r2,-8(fp)
   2e66c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   2e670:	e0bffe17 	ldw	r2,-8(fp)
   2e674:	10800317 	ldw	r2,12(r2)
   2e678:	10c00204 	addi	r3,r2,8
   2e67c:	e0bffe17 	ldw	r2,-8(fp)
   2e680:	10800317 	ldw	r2,12(r2)
   2e684:	10800204 	addi	r2,r2,8
   2e688:	10800037 	ldwio	r2,0(r2)
   2e68c:	1009883a 	mov	r4,r2
   2e690:	00bfff44 	movi	r2,-3
   2e694:	2088703a 	and	r4,r4,r2
   2e698:	e0bfff17 	ldw	r2,-4(fp)
   2e69c:	10800117 	ldw	r2,4(r2)
   2e6a0:	1085883a 	add	r2,r2,r2
   2e6a4:	1080008c 	andi	r2,r2,2
   2e6a8:	2084b03a 	or	r2,r4,r2
   2e6ac:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   2e6b0:	e0bffe17 	ldw	r2,-8(fp)
   2e6b4:	10800317 	ldw	r2,12(r2)
   2e6b8:	10800904 	addi	r2,r2,36
   2e6bc:	e0ffff17 	ldw	r3,-4(fp)
   2e6c0:	18c0020b 	ldhu	r3,8(r3)
   2e6c4:	18ffffcc 	andi	r3,r3,65535
   2e6c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   2e6cc:	e0bffe17 	ldw	r2,-8(fp)
   2e6d0:	10800317 	ldw	r2,12(r2)
   2e6d4:	10800804 	addi	r2,r2,32
   2e6d8:	e0ffff17 	ldw	r3,-4(fp)
   2e6dc:	18c0028b 	ldhu	r3,10(r3)
   2e6e0:	18ffffcc 	andi	r3,r3,65535
   2e6e4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   2e6e8:	e0bffe17 	ldw	r2,-8(fp)
   2e6ec:	10800317 	ldw	r2,12(r2)
   2e6f0:	10800a04 	addi	r2,r2,40
   2e6f4:	e0ffff17 	ldw	r3,-4(fp)
   2e6f8:	18c0030b 	ldhu	r3,12(r3)
   2e6fc:	18ffffcc 	andi	r3,r3,65535
   2e700:	10c00035 	stwio	r3,0(r2)
}
   2e704:	0001883a 	nop
   2e708:	e037883a 	mov	sp,fp
   2e70c:	df000017 	ldw	fp,0(sp)
   2e710:	dec00104 	addi	sp,sp,4
   2e714:	f800283a 	ret

0002e718 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   2e718:	defffb04 	addi	sp,sp,-20
   2e71c:	dfc00415 	stw	ra,16(sp)
   2e720:	df000315 	stw	fp,12(sp)
   2e724:	df000304 	addi	fp,sp,12
   2e728:	e13ffd15 	stw	r4,-12(fp)
   2e72c:	e17ffe15 	stw	r5,-8(fp)
   2e730:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   2e734:	e0bffe17 	ldw	r2,-8(fp)
   2e738:	1080028b 	ldhu	r2,10(r2)
   2e73c:	10bfffcc 	andi	r2,r2,65535
   2e740:	10000426 	beq	r2,zero,2e754 <alt_avalon_i2c_master_config_speed_get+0x3c>
   2e744:	e0bffe17 	ldw	r2,-8(fp)
   2e748:	1080020b 	ldhu	r2,8(r2)
   2e74c:	10bfffcc 	andi	r2,r2,65535
   2e750:	1000021e 	bne	r2,zero,2e75c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   2e754:	00bfff44 	movi	r2,-3
   2e758:	00000f06 	br	2e798 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   2e75c:	e0bffd17 	ldw	r2,-12(fp)
   2e760:	11000c17 	ldw	r4,48(r2)
   2e764:	e0bffe17 	ldw	r2,-8(fp)
   2e768:	1080028b 	ldhu	r2,10(r2)
   2e76c:	10ffffcc 	andi	r3,r2,65535
   2e770:	e0bffe17 	ldw	r2,-8(fp)
   2e774:	1080020b 	ldhu	r2,8(r2)
   2e778:	10bfffcc 	andi	r2,r2,65535
   2e77c:	1885883a 	add	r2,r3,r2
   2e780:	100b883a 	mov	r5,r2
   2e784:	002ad0c0 	call	2ad0c <__udivsi3>
   2e788:	1007883a 	mov	r3,r2
   2e78c:	e0bfff17 	ldw	r2,-4(fp)
   2e790:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   2e794:	0005883a 	mov	r2,zero
}
   2e798:	e037883a 	mov	sp,fp
   2e79c:	dfc00117 	ldw	ra,4(sp)
   2e7a0:	df000017 	ldw	fp,0(sp)
   2e7a4:	dec00204 	addi	sp,sp,8
   2e7a8:	f800283a 	ret

0002e7ac <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   2e7ac:	defff904 	addi	sp,sp,-28
   2e7b0:	dfc00615 	stw	ra,24(sp)
   2e7b4:	df000515 	stw	fp,20(sp)
   2e7b8:	df000504 	addi	fp,sp,20
   2e7bc:	e13ffd15 	stw	r4,-12(fp)
   2e7c0:	e17ffe15 	stw	r5,-8(fp)
   2e7c4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   2e7c8:	e0ffff17 	ldw	r3,-4(fp)
   2e7cc:	008001b4 	movhi	r2,6
   2e7d0:	1086a004 	addi	r2,r2,6784
   2e7d4:	10c00436 	bltu	r2,r3,2e7e8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   2e7d8:	e0bfff17 	ldw	r2,-4(fp)
   2e7dc:	10000226 	beq	r2,zero,2e7e8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   2e7e0:	e0bfff17 	ldw	r2,-4(fp)
   2e7e4:	1000021e 	bne	r2,zero,2e7f0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   2e7e8:	00bfff04 	movi	r2,-4
   2e7ec:	00002906 	br	2e894 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   2e7f0:	e0bffd17 	ldw	r2,-12(fp)
   2e7f4:	10c00c17 	ldw	r3,48(r2)
   2e7f8:	e0bfff17 	ldw	r2,-4(fp)
   2e7fc:	1085883a 	add	r2,r2,r2
   2e800:	100b883a 	mov	r5,r2
   2e804:	1809883a 	mov	r4,r3
   2e808:	002ad0c0 	call	2ad0c <__udivsi3>
   2e80c:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2e810:	e0bffb17 	ldw	r2,-20(fp)
   2e814:	10800f04 	addi	r2,r2,60
   2e818:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2e81c:	e0bffb17 	ldw	r2,-20(fp)
   2e820:	10bff104 	addi	r2,r2,-60
   2e824:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   2e828:	e0ffff17 	ldw	r3,-4(fp)
   2e82c:	008000b4 	movhi	r2,2
   2e830:	10a1a804 	addi	r2,r2,-31072
   2e834:	10c0042e 	bgeu	r2,r3,2e848 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   2e838:	e0bffe17 	ldw	r2,-8(fp)
   2e83c:	00c00044 	movi	r3,1
   2e840:	10c00115 	stw	r3,4(r2)
   2e844:	00000206 	br	2e850 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   2e848:	e0bffe17 	ldw	r2,-8(fp)
   2e84c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   2e850:	e0bffb17 	ldw	r2,-20(fp)
   2e854:	1007883a 	mov	r3,r2
   2e858:	e0bffe17 	ldw	r2,-8(fp)
   2e85c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   2e860:	e0bffc17 	ldw	r2,-16(fp)
   2e864:	1007883a 	mov	r3,r2
   2e868:	e0bffe17 	ldw	r2,-8(fp)
   2e86c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   2e870:	e0bffb17 	ldw	r2,-20(fp)
   2e874:	1007883a 	mov	r3,r2
   2e878:	e0bffb17 	ldw	r2,-20(fp)
   2e87c:	1004d07a 	srli	r2,r2,1
   2e880:	1885c83a 	sub	r2,r3,r2
   2e884:	1007883a 	mov	r3,r2
   2e888:	e0bffe17 	ldw	r2,-8(fp)
   2e88c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   2e890:	0005883a 	mov	r2,zero

}
   2e894:	e037883a 	mov	sp,fp
   2e898:	dfc00117 	ldw	ra,4(sp)
   2e89c:	df000017 	ldw	fp,0(sp)
   2e8a0:	dec00204 	addi	sp,sp,8
   2e8a4:	f800283a 	ret

0002e8a8 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e8a8:	defffe04 	addi	sp,sp,-8
   2e8ac:	df000115 	stw	fp,4(sp)
   2e8b0:	df000104 	addi	fp,sp,4
   2e8b4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   2e8b8:	e0bfff17 	ldw	r2,-4(fp)
   2e8bc:	10800317 	ldw	r2,12(r2)
   2e8c0:	10800504 	addi	r2,r2,20
   2e8c4:	10800037 	ldwio	r2,0(r2)
   2e8c8:	1080004c 	andi	r2,r2,1
   2e8cc:	10000226 	beq	r2,zero,2e8d8 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   2e8d0:	00800044 	movi	r2,1
   2e8d4:	00000106 	br	2e8dc <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   2e8d8:	0005883a 	mov	r2,zero
}
   2e8dc:	e037883a 	mov	sp,fp
   2e8e0:	df000017 	ldw	fp,0(sp)
   2e8e4:	dec00104 	addi	sp,sp,4
   2e8e8:	f800283a 	ret

0002e8ec <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   2e8ec:	defffb04 	addi	sp,sp,-20
   2e8f0:	df000415 	stw	fp,16(sp)
   2e8f4:	df000404 	addi	fp,sp,16
   2e8f8:	e13ffc15 	stw	r4,-16(fp)
   2e8fc:	e17ffd15 	stw	r5,-12(fp)
   2e900:	e1bffe15 	stw	r6,-8(fp)
   2e904:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   2e908:	e0bfff17 	ldw	r2,-4(fp)
   2e90c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2e910:	00001406 	br	2e964 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2e914:	e0bfff17 	ldw	r2,-4(fp)
   2e918:	10800017 	ldw	r2,0(r2)
   2e91c:	e0fffd17 	ldw	r3,-12(fp)
   2e920:	1885883a 	add	r2,r3,r2
   2e924:	e0fffc17 	ldw	r3,-16(fp)
   2e928:	18c00317 	ldw	r3,12(r3)
   2e92c:	18c00104 	addi	r3,r3,4
   2e930:	18c00037 	ldwio	r3,0(r3)
   2e934:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   2e938:	e0bfff17 	ldw	r2,-4(fp)
   2e93c:	10800017 	ldw	r2,0(r2)
   2e940:	10c00044 	addi	r3,r2,1
   2e944:	e0bfff17 	ldw	r2,-4(fp)
   2e948:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2e94c:	e0bfff17 	ldw	r2,-4(fp)
   2e950:	10c00017 	ldw	r3,0(r2)
   2e954:	e0bffe17 	ldw	r2,-8(fp)
   2e958:	1880021e 	bne	r3,r2,2e964 <alt_avalon_i2c_rx_read_available+0x78>
   2e95c:	e0bffe17 	ldw	r2,-8(fp)
   2e960:	1000061e 	bne	r2,zero,2e97c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2e964:	e0bffc17 	ldw	r2,-16(fp)
   2e968:	10800317 	ldw	r2,12(r2)
   2e96c:	10800704 	addi	r2,r2,28
   2e970:	10800037 	ldwio	r2,0(r2)
   2e974:	103fe71e 	bne	r2,zero,2e914 <__alt_data_end+0xfffee914>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   2e978:	00000106 	br	2e980 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2e97c:	0001883a 	nop
    }
}
   2e980:	0001883a 	nop
   2e984:	e037883a 	mov	sp,fp
   2e988:	df000017 	ldw	fp,0(sp)
   2e98c:	dec00104 	addi	sp,sp,4
   2e990:	f800283a 	ret

0002e994 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   2e994:	defffa04 	addi	sp,sp,-24
   2e998:	dfc00515 	stw	ra,20(sp)
   2e99c:	df000415 	stw	fp,16(sp)
   2e9a0:	df000404 	addi	fp,sp,16
   2e9a4:	e13ffe15 	stw	r4,-8(fp)
   2e9a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   2e9ac:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   2e9b0:	008000b4 	movhi	r2,2
   2e9b4:	10a1a804 	addi	r2,r2,-31072
   2e9b8:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2e9bc:	00000d06 	br	2e9f4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   2e9c0:	e0bffd17 	ldw	r2,-12(fp)
   2e9c4:	108002a8 	cmpgeui	r2,r2,10
   2e9c8:	1000021e 	bne	r2,zero,2e9d4 <alt_avalon_i2c_rx_read+0x40>
   2e9cc:	0109c404 	movi	r4,10000
   2e9d0:	00311c00 	call	311c0 <alt_busy_sleep>
      if (--timeout == 0)
   2e9d4:	e0bffd17 	ldw	r2,-12(fp)
   2e9d8:	10bfffc4 	addi	r2,r2,-1
   2e9dc:	e0bffd15 	stw	r2,-12(fp)
   2e9e0:	e0bffd17 	ldw	r2,-12(fp)
   2e9e4:	1000031e 	bne	r2,zero,2e9f4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   2e9e8:	00bfff84 	movi	r2,-2
   2e9ec:	e0bffc15 	stw	r2,-16(fp)
        break;
   2e9f0:	00000506 	br	2ea08 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2e9f4:	e0bffe17 	ldw	r2,-8(fp)
   2e9f8:	10800317 	ldw	r2,12(r2)
   2e9fc:	10800704 	addi	r2,r2,28
   2ea00:	10800037 	ldwio	r2,0(r2)
   2ea04:	103fee26 	beq	r2,zero,2e9c0 <__alt_data_end+0xfffee9c0>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2ea08:	e0bffe17 	ldw	r2,-8(fp)
   2ea0c:	10800317 	ldw	r2,12(r2)
   2ea10:	10800104 	addi	r2,r2,4
   2ea14:	10800037 	ldwio	r2,0(r2)
   2ea18:	1007883a 	mov	r3,r2
   2ea1c:	e0bfff17 	ldw	r2,-4(fp)
   2ea20:	10c00005 	stb	r3,0(r2)
        
    return status;
   2ea24:	e0bffc17 	ldw	r2,-16(fp)
}
   2ea28:	e037883a 	mov	sp,fp
   2ea2c:	dfc00117 	ldw	ra,4(sp)
   2ea30:	df000017 	ldw	fp,0(sp)
   2ea34:	dec00204 	addi	sp,sp,8
   2ea38:	f800283a 	ret

0002ea3c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   2ea3c:	defff804 	addi	sp,sp,-32
   2ea40:	dfc00715 	stw	ra,28(sp)
   2ea44:	df000615 	stw	fp,24(sp)
   2ea48:	df000604 	addi	fp,sp,24
   2ea4c:	e13ffc15 	stw	r4,-16(fp)
   2ea50:	2809883a 	mov	r4,r5
   2ea54:	3007883a 	mov	r3,r6
   2ea58:	3805883a 	mov	r2,r7
   2ea5c:	e13ffd05 	stb	r4,-12(fp)
   2ea60:	e0fffe05 	stb	r3,-8(fp)
   2ea64:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   2ea68:	0089c404 	movi	r2,10000
   2ea6c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2ea70:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2ea74:	00000c06 	br	2eaa8 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   2ea78:	e0bffa17 	ldw	r2,-24(fp)
   2ea7c:	108002a8 	cmpgeui	r2,r2,10
   2ea80:	1000021e 	bne	r2,zero,2ea8c <alt_avalon_i2c_cmd_write+0x50>
   2ea84:	0109c404 	movi	r4,10000
   2ea88:	00311c00 	call	311c0 <alt_busy_sleep>
      if (--timeout == 0)
   2ea8c:	e0bffa17 	ldw	r2,-24(fp)
   2ea90:	10bfffc4 	addi	r2,r2,-1
   2ea94:	e0bffa15 	stw	r2,-24(fp)
   2ea98:	e0bffa17 	ldw	r2,-24(fp)
   2ea9c:	1000021e 	bne	r2,zero,2eaa8 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   2eaa0:	00bfff84 	movi	r2,-2
   2eaa4:	00001906 	br	2eb0c <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2eaa8:	e0bffc17 	ldw	r2,-16(fp)
   2eaac:	10800317 	ldw	r2,12(r2)
   2eab0:	10800404 	addi	r2,r2,16
   2eab4:	10800037 	ldwio	r2,0(r2)
   2eab8:	1080004c 	andi	r2,r2,1
   2eabc:	103fee26 	beq	r2,zero,2ea78 <__alt_data_end+0xfffeea78>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   2eac0:	e0bffc17 	ldw	r2,-16(fp)
   2eac4:	10800317 	ldw	r2,12(r2)
   2eac8:	e13ffd03 	ldbu	r4,-12(fp)
   2eacc:	e0fffe03 	ldbu	r3,-8(fp)
   2ead0:	1806927a 	slli	r3,r3,9
   2ead4:	20c8b03a 	or	r4,r4,r3
   2ead8:	e0ffff03 	ldbu	r3,-4(fp)
   2eadc:	1806923a 	slli	r3,r3,8
   2eae0:	20c6b03a 	or	r3,r4,r3
   2eae4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2eae8:	e0bffb04 	addi	r2,fp,-20
   2eaec:	100b883a 	mov	r5,r2
   2eaf0:	e13ffc17 	ldw	r4,-16(fp)
   2eaf4:	002ec7c0 	call	2ec7c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   2eaf8:	e0bffb04 	addi	r2,fp,-20
   2eafc:	100b883a 	mov	r5,r2
   2eb00:	e13ffc17 	ldw	r4,-16(fp)
   2eb04:	002ecc80 	call	2ecc8 <alt_avalon_i2c_check_arblost>
    
    return status;
   2eb08:	e0bffb17 	ldw	r2,-20(fp)
}
   2eb0c:	e037883a 	mov	sp,fp
   2eb10:	dfc00117 	ldw	ra,4(sp)
   2eb14:	df000017 	ldw	fp,0(sp)
   2eb18:	dec00204 	addi	sp,sp,8
   2eb1c:	f800283a 	ret

0002eb20 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   2eb20:	defffa04 	addi	sp,sp,-24
   2eb24:	dfc00515 	stw	ra,20(sp)
   2eb28:	df000415 	stw	fp,16(sp)
   2eb2c:	df000404 	addi	fp,sp,16
   2eb30:	e13ffd15 	stw	r4,-12(fp)
   2eb34:	e17ffe15 	stw	r5,-8(fp)
   2eb38:	3005883a 	mov	r2,r6
   2eb3c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2eb40:	e0bffd17 	ldw	r2,-12(fp)
   2eb44:	10800d17 	ldw	r2,52(r2)
   2eb48:	10800058 	cmpnei	r2,r2,1
   2eb4c:	10001c1e 	bne	r2,zero,2ebc0 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2eb50:	e0bffd17 	ldw	r2,-12(fp)
   2eb54:	10800917 	ldw	r2,36(r2)
   2eb58:	109e0014 	ori	r2,r2,30720
   2eb5c:	1004d1fa 	srli	r2,r2,7
   2eb60:	1007883a 	mov	r3,r2
   2eb64:	00bfff84 	movi	r2,-2
   2eb68:	1884703a 	and	r2,r3,r2
   2eb6c:	1007883a 	mov	r3,r2
   2eb70:	e0bffe17 	ldw	r2,-8(fp)
   2eb74:	1884b03a 	or	r2,r3,r2
   2eb78:	10803fcc 	andi	r2,r2,255
   2eb7c:	e0ffff03 	ldbu	r3,-4(fp)
   2eb80:	000f883a 	mov	r7,zero
   2eb84:	180d883a 	mov	r6,r3
   2eb88:	100b883a 	mov	r5,r2
   2eb8c:	e13ffd17 	ldw	r4,-12(fp)
   2eb90:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2eb94:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   2eb98:	e0bffd17 	ldw	r2,-12(fp)
   2eb9c:	10800917 	ldw	r2,36(r2)
   2eba0:	10803fcc 	andi	r2,r2,255
   2eba4:	000f883a 	mov	r7,zero
   2eba8:	000d883a 	mov	r6,zero
   2ebac:	100b883a 	mov	r5,r2
   2ebb0:	e13ffd17 	ldw	r4,-12(fp)
   2ebb4:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2ebb8:	e0bffc15 	stw	r2,-16(fp)
   2ebbc:	00000e06 	br	2ebf8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2ebc0:	e0bffd17 	ldw	r2,-12(fp)
   2ebc4:	10800917 	ldw	r2,36(r2)
   2ebc8:	1085883a 	add	r2,r2,r2
   2ebcc:	1007883a 	mov	r3,r2
   2ebd0:	e0bffe17 	ldw	r2,-8(fp)
   2ebd4:	1884b03a 	or	r2,r3,r2
   2ebd8:	10803fcc 	andi	r2,r2,255
   2ebdc:	e0ffff03 	ldbu	r3,-4(fp)
   2ebe0:	000f883a 	mov	r7,zero
   2ebe4:	180d883a 	mov	r6,r3
   2ebe8:	100b883a 	mov	r5,r2
   2ebec:	e13ffd17 	ldw	r4,-12(fp)
   2ebf0:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2ebf4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   2ebf8:	e0bffc17 	ldw	r2,-16(fp)
}
   2ebfc:	e037883a 	mov	sp,fp
   2ec00:	dfc00117 	ldw	ra,4(sp)
   2ec04:	df000017 	ldw	fp,0(sp)
   2ec08:	dec00204 	addi	sp,sp,8
   2ec0c:	f800283a 	ret

0002ec10 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   2ec10:	defffd04 	addi	sp,sp,-12
   2ec14:	df000215 	stw	fp,8(sp)
   2ec18:	df000204 	addi	fp,sp,8
   2ec1c:	e13ffe15 	stw	r4,-8(fp)
   2ec20:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   2ec24:	e0bffe17 	ldw	r2,-8(fp)
   2ec28:	10c00917 	ldw	r3,36(r2)
   2ec2c:	e0bfff17 	ldw	r2,-4(fp)
   2ec30:	10c00015 	stw	r3,0(r2)
}
   2ec34:	0001883a 	nop
   2ec38:	e037883a 	mov	sp,fp
   2ec3c:	df000017 	ldw	fp,0(sp)
   2ec40:	dec00104 	addi	sp,sp,4
   2ec44:	f800283a 	ret

0002ec48 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   2ec48:	defffd04 	addi	sp,sp,-12
   2ec4c:	df000215 	stw	fp,8(sp)
   2ec50:	df000204 	addi	fp,sp,8
   2ec54:	e13ffe15 	stw	r4,-8(fp)
   2ec58:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   2ec5c:	e0bffe17 	ldw	r2,-8(fp)
   2ec60:	e0ffff17 	ldw	r3,-4(fp)
   2ec64:	10c00915 	stw	r3,36(r2)
}
   2ec68:	0001883a 	nop
   2ec6c:	e037883a 	mov	sp,fp
   2ec70:	df000017 	ldw	fp,0(sp)
   2ec74:	dec00104 	addi	sp,sp,4
   2ec78:	f800283a 	ret

0002ec7c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   2ec7c:	defffd04 	addi	sp,sp,-12
   2ec80:	df000215 	stw	fp,8(sp)
   2ec84:	df000204 	addi	fp,sp,8
   2ec88:	e13ffe15 	stw	r4,-8(fp)
   2ec8c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   2ec90:	e0bffe17 	ldw	r2,-8(fp)
   2ec94:	10800317 	ldw	r2,12(r2)
   2ec98:	10800404 	addi	r2,r2,16
   2ec9c:	10800037 	ldwio	r2,0(r2)
   2eca0:	1080010c 	andi	r2,r2,4
   2eca4:	10000326 	beq	r2,zero,2ecb4 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   2eca8:	e0bfff17 	ldw	r2,-4(fp)
   2ecac:	00fffec4 	movi	r3,-5
   2ecb0:	10c00015 	stw	r3,0(r2)
    }
}
   2ecb4:	0001883a 	nop
   2ecb8:	e037883a 	mov	sp,fp
   2ecbc:	df000017 	ldw	fp,0(sp)
   2ecc0:	dec00104 	addi	sp,sp,4
   2ecc4:	f800283a 	ret

0002ecc8 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   2ecc8:	defffd04 	addi	sp,sp,-12
   2eccc:	df000215 	stw	fp,8(sp)
   2ecd0:	df000204 	addi	fp,sp,8
   2ecd4:	e13ffe15 	stw	r4,-8(fp)
   2ecd8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   2ecdc:	e0bffe17 	ldw	r2,-8(fp)
   2ece0:	10800317 	ldw	r2,12(r2)
   2ece4:	10800404 	addi	r2,r2,16
   2ece8:	10800037 	ldwio	r2,0(r2)
   2ecec:	1080020c 	andi	r2,r2,8
   2ecf0:	10000326 	beq	r2,zero,2ed00 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   2ecf4:	e0bfff17 	ldw	r2,-4(fp)
   2ecf8:	00fffe84 	movi	r3,-6
   2ecfc:	10c00015 	stw	r3,0(r2)
    }
}
   2ed00:	0001883a 	nop
   2ed04:	e037883a 	mov	sp,fp
   2ed08:	df000017 	ldw	fp,0(sp)
   2ed0c:	dec00104 	addi	sp,sp,4
   2ed10:	f800283a 	ret

0002ed14 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2ed14:	defff804 	addi	sp,sp,-32
   2ed18:	dfc00715 	stw	ra,28(sp)
   2ed1c:	df000615 	stw	fp,24(sp)
   2ed20:	df000604 	addi	fp,sp,24
   2ed24:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2ed28:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   2ed2c:	e0bfff17 	ldw	r2,-4(fp)
   2ed30:	10800717 	ldw	r2,28(r2)
   2ed34:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   2ed38:	e0bffb17 	ldw	r2,-20(fp)
   2ed3c:	10800117 	ldw	r2,4(r2)
   2ed40:	10800044 	addi	r2,r2,1
   2ed44:	0149c404 	movi	r5,10000
   2ed48:	1009883a 	mov	r4,r2
   2ed4c:	002adc80 	call	2adc8 <__mulsi3>
   2ed50:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   2ed54:	e0bffd04 	addi	r2,fp,-12
   2ed58:	100b883a 	mov	r5,r2
   2ed5c:	e13fff17 	ldw	r4,-4(fp)
   2ed60:	002fbac0 	call	2fbac <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   2ed64:	e0bffd17 	ldw	r2,-12(fp)
   2ed68:	100b883a 	mov	r5,r2
   2ed6c:	e13fff17 	ldw	r4,-4(fp)
   2ed70:	002fae00 	call	2fae0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2ed74:	e0bffc04 	addi	r2,fp,-16
   2ed78:	100b883a 	mov	r5,r2
   2ed7c:	e13fff17 	ldw	r4,-4(fp)
   2ed80:	002ec7c0 	call	2ec7c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   2ed84:	e0bffc17 	ldw	r2,-16(fp)
   2ed88:	10002226 	beq	r2,zero,2ee14 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   2ed8c:	e0bffb17 	ldw	r2,-20(fp)
   2ed90:	10800217 	ldw	r2,8(r2)
   2ed94:	10001d26 	beq	r2,zero,2ee0c <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2ed98:	00000d06 	br	2edd0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   2ed9c:	e0bffa17 	ldw	r2,-24(fp)
   2eda0:	108002a8 	cmpgeui	r2,r2,10
   2eda4:	1000021e 	bne	r2,zero,2edb0 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   2eda8:	0109c404 	movi	r4,10000
   2edac:	00311c00 	call	311c0 <alt_busy_sleep>
              if (--timeout == 0)
   2edb0:	e0bffa17 	ldw	r2,-24(fp)
   2edb4:	10bfffc4 	addi	r2,r2,-1
   2edb8:	e0bffa15 	stw	r2,-24(fp)
   2edbc:	e0bffa17 	ldw	r2,-24(fp)
   2edc0:	1000031e 	bne	r2,zero,2edd0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   2edc4:	00bfff84 	movi	r2,-2
   2edc8:	e0bffc15 	stw	r2,-16(fp)
                 break;
   2edcc:	00000306 	br	2eddc <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2edd0:	e13fff17 	ldw	r4,-4(fp)
   2edd4:	002e8a80 	call	2e8a8 <alt_avalon_i2c_is_busy>
   2edd8:	103ff01e 	bne	r2,zero,2ed9c <__alt_data_end+0xfffeed9c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   2eddc:	e0bffb17 	ldw	r2,-20(fp)
   2ede0:	10800017 	ldw	r2,0(r2)
   2ede4:	e0fffe04 	addi	r3,fp,-8
   2ede8:	180f883a 	mov	r7,r3
   2edec:	000d883a 	mov	r6,zero
   2edf0:	100b883a 	mov	r5,r2
   2edf4:	e13fff17 	ldw	r4,-4(fp)
   2edf8:	002e8ec0 	call	2e8ec <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   2edfc:	e13fff17 	ldw	r4,-4(fp)
   2ee00:	002e5500 	call	2e550 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   2ee04:	e0bffb17 	ldw	r2,-20(fp)
   2ee08:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   2ee0c:	e0bffc17 	ldw	r2,-16(fp)
   2ee10:	00000a06 	br	2ee3c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   2ee14:	e0bffb17 	ldw	r2,-20(fp)
   2ee18:	10800217 	ldw	r2,8(r2)
   2ee1c:	10000626 	beq	r2,zero,2ee38 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   2ee20:	e0bffd17 	ldw	r2,-12(fp)
   2ee24:	100b883a 	mov	r5,r2
   2ee28:	e13fff17 	ldw	r4,-4(fp)
   2ee2c:	002fb480 	call	2fb48 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   2ee30:	00bffe44 	movi	r2,-7
   2ee34:	00000106 	br	2ee3c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   2ee38:	0005883a 	mov	r2,zero
}
   2ee3c:	e037883a 	mov	sp,fp
   2ee40:	dfc00117 	ldw	ra,4(sp)
   2ee44:	df000017 	ldw	fp,0(sp)
   2ee48:	dec00204 	addi	sp,sp,8
   2ee4c:	f800283a 	ret

0002ee50 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2ee50:	defff704 	addi	sp,sp,-36
   2ee54:	dfc00815 	stw	ra,32(sp)
   2ee58:	df000715 	stw	fp,28(sp)
   2ee5c:	df000704 	addi	fp,sp,28
   2ee60:	e13ffc15 	stw	r4,-16(fp)
   2ee64:	e17ffd15 	stw	r5,-12(fp)
   2ee68:	e1bffe15 	stw	r6,-8(fp)
   2ee6c:	3805883a 	mov	r2,r7
   2ee70:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2ee74:	0089c404 	movi	r2,10000
   2ee78:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   2ee7c:	00002206 	br	2ef08 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   2ee80:	e0bffb17 	ldw	r2,-20(fp)
   2ee84:	108002a8 	cmpgeui	r2,r2,10
   2ee88:	1000021e 	bne	r2,zero,2ee94 <alt_avalon_i2c_master_tx+0x44>
   2ee8c:	0109c404 	movi	r4,10000
   2ee90:	00311c00 	call	311c0 <alt_busy_sleep>
      if (use_interrupts)
   2ee94:	e0bfff03 	ldbu	r2,-4(fp)
   2ee98:	10000926 	beq	r2,zero,2eec0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   2ee9c:	00800044 	movi	r2,1
   2eea0:	d8800015 	stw	r2,0(sp)
   2eea4:	000f883a 	mov	r7,zero
   2eea8:	e1bffe17 	ldw	r6,-8(fp)
   2eeac:	e17ffd17 	ldw	r5,-12(fp)
   2eeb0:	e13ffc17 	ldw	r4,-16(fp)
   2eeb4:	002f3fc0 	call	2f3fc <alt_avalon_i2c_master_transmit_using_interrupts>
   2eeb8:	e0bffa15 	stw	r2,-24(fp)
   2eebc:	00000806 	br	2eee0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   2eec0:	00800044 	movi	r2,1
   2eec4:	d8800015 	stw	r2,0(sp)
   2eec8:	000f883a 	mov	r7,zero
   2eecc:	e1bffe17 	ldw	r6,-8(fp)
   2eed0:	e17ffd17 	ldw	r5,-12(fp)
   2eed4:	e13ffc17 	ldw	r4,-16(fp)
   2eed8:	002f23c0 	call	2f23c <alt_avalon_i2c_master_transmit>
   2eedc:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2eee0:	e0bffa17 	ldw	r2,-24(fp)
   2eee4:	10bffea0 	cmpeqi	r2,r2,-6
   2eee8:	1000061e 	bne	r2,zero,2ef04 <alt_avalon_i2c_master_tx+0xb4>
   2eeec:	e0bffa17 	ldw	r2,-24(fp)
   2eef0:	10bffee0 	cmpeqi	r2,r2,-5
   2eef4:	1000031e 	bne	r2,zero,2ef04 <alt_avalon_i2c_master_tx+0xb4>
   2eef8:	e0bffa17 	ldw	r2,-24(fp)
   2eefc:	10bffe58 	cmpnei	r2,r2,-7
   2ef00:	1000061e 	bne	r2,zero,2ef1c <alt_avalon_i2c_master_tx+0xcc>
   2ef04:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   2ef08:	e0bffb17 	ldw	r2,-20(fp)
   2ef0c:	10ffffc4 	addi	r3,r2,-1
   2ef10:	e0fffb15 	stw	r3,-20(fp)
   2ef14:	103fda1e 	bne	r2,zero,2ee80 <__alt_data_end+0xfffeee80>
   2ef18:	00000106 	br	2ef20 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   2ef1c:	0001883a 	nop
    }

    return status;
   2ef20:	e0bffa17 	ldw	r2,-24(fp)
}        
   2ef24:	e037883a 	mov	sp,fp
   2ef28:	dfc00117 	ldw	ra,4(sp)
   2ef2c:	df000017 	ldw	fp,0(sp)
   2ef30:	dec00204 	addi	sp,sp,8
   2ef34:	f800283a 	ret

0002ef38 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2ef38:	defff704 	addi	sp,sp,-36
   2ef3c:	dfc00815 	stw	ra,32(sp)
   2ef40:	df000715 	stw	fp,28(sp)
   2ef44:	df000704 	addi	fp,sp,28
   2ef48:	e13ffc15 	stw	r4,-16(fp)
   2ef4c:	e17ffd15 	stw	r5,-12(fp)
   2ef50:	e1bffe15 	stw	r6,-8(fp)
   2ef54:	3805883a 	mov	r2,r7
   2ef58:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2ef5c:	0089c404 	movi	r2,10000
   2ef60:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   2ef64:	e0bfff03 	ldbu	r2,-4(fp)
   2ef68:	10003426 	beq	r2,zero,2f03c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   2ef6c:	00001706 	br	2efcc <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   2ef70:	e0bffb17 	ldw	r2,-20(fp)
   2ef74:	108002a8 	cmpgeui	r2,r2,10
   2ef78:	1000021e 	bne	r2,zero,2ef84 <alt_avalon_i2c_master_rx+0x4c>
   2ef7c:	0109c404 	movi	r4,10000
   2ef80:	00311c00 	call	311c0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   2ef84:	00800044 	movi	r2,1
   2ef88:	d8800015 	stw	r2,0(sp)
   2ef8c:	000f883a 	mov	r7,zero
   2ef90:	e1bffe17 	ldw	r6,-8(fp)
   2ef94:	e17ffd17 	ldw	r5,-12(fp)
   2ef98:	e13ffc17 	ldw	r4,-16(fp)
   2ef9c:	002f8180 	call	2f818 <alt_avalon_i2c_master_receive_using_interrupts>
   2efa0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2efa4:	e0bffa17 	ldw	r2,-24(fp)
   2efa8:	10bffea0 	cmpeqi	r2,r2,-6
   2efac:	1000061e 	bne	r2,zero,2efc8 <alt_avalon_i2c_master_rx+0x90>
   2efb0:	e0bffa17 	ldw	r2,-24(fp)
   2efb4:	10bffee0 	cmpeqi	r2,r2,-5
   2efb8:	1000031e 	bne	r2,zero,2efc8 <alt_avalon_i2c_master_rx+0x90>
   2efbc:	e0bffa17 	ldw	r2,-24(fp)
   2efc0:	10bffe58 	cmpnei	r2,r2,-7
   2efc4:	1000221e 	bne	r2,zero,2f050 <alt_avalon_i2c_master_rx+0x118>
   2efc8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   2efcc:	e0bffb17 	ldw	r2,-20(fp)
   2efd0:	10ffffc4 	addi	r3,r2,-1
   2efd4:	e0fffb15 	stw	r3,-20(fp)
   2efd8:	103fe51e 	bne	r2,zero,2ef70 <__alt_data_end+0xfffeef70>
   2efdc:	00001f06 	br	2f05c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   2efe0:	e0bffb17 	ldw	r2,-20(fp)
   2efe4:	108002a8 	cmpgeui	r2,r2,10
   2efe8:	1000021e 	bne	r2,zero,2eff4 <alt_avalon_i2c_master_rx+0xbc>
   2efec:	0109c404 	movi	r4,10000
   2eff0:	00311c00 	call	311c0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   2eff4:	00800044 	movi	r2,1
   2eff8:	d8800015 	stw	r2,0(sp)
   2effc:	000f883a 	mov	r7,zero
   2f000:	e1bffe17 	ldw	r6,-8(fp)
   2f004:	e17ffd17 	ldw	r5,-12(fp)
   2f008:	e13ffc17 	ldw	r4,-16(fp)
   2f00c:	002f6080 	call	2f608 <alt_avalon_i2c_master_receive>
   2f010:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f014:	e0bffa17 	ldw	r2,-24(fp)
   2f018:	10bffea0 	cmpeqi	r2,r2,-6
   2f01c:	1000061e 	bne	r2,zero,2f038 <alt_avalon_i2c_master_rx+0x100>
   2f020:	e0bffa17 	ldw	r2,-24(fp)
   2f024:	10bffee0 	cmpeqi	r2,r2,-5
   2f028:	1000031e 	bne	r2,zero,2f038 <alt_avalon_i2c_master_rx+0x100>
   2f02c:	e0bffa17 	ldw	r2,-24(fp)
   2f030:	10bffe58 	cmpnei	r2,r2,-7
   2f034:	1000081e 	bne	r2,zero,2f058 <alt_avalon_i2c_master_rx+0x120>
   2f038:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   2f03c:	e0bffb17 	ldw	r2,-20(fp)
   2f040:	10ffffc4 	addi	r3,r2,-1
   2f044:	e0fffb15 	stw	r3,-20(fp)
   2f048:	103fe51e 	bne	r2,zero,2efe0 <__alt_data_end+0xfffeefe0>
   2f04c:	00000306 	br	2f05c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   2f050:	0001883a 	nop
   2f054:	00000106 	br	2f05c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   2f058:	0001883a 	nop
      }
    }
    
    return status;
   2f05c:	e0bffa17 	ldw	r2,-24(fp)
}        
   2f060:	e037883a 	mov	sp,fp
   2f064:	dfc00117 	ldw	ra,4(sp)
   2f068:	df000017 	ldw	fp,0(sp)
   2f06c:	dec00204 	addi	sp,sp,8
   2f070:	f800283a 	ret

0002f074 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   2f074:	defff604 	addi	sp,sp,-40
   2f078:	dfc00915 	stw	ra,36(sp)
   2f07c:	df000815 	stw	fp,32(sp)
   2f080:	df000804 	addi	fp,sp,32
   2f084:	e13ffb15 	stw	r4,-20(fp)
   2f088:	e17ffc15 	stw	r5,-16(fp)
   2f08c:	e1bffd15 	stw	r6,-12(fp)
   2f090:	e1fffe15 	stw	r7,-8(fp)
   2f094:	e0800317 	ldw	r2,12(fp)
   2f098:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2f09c:	0089c404 	movi	r2,10000
   2f0a0:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   2f0a4:	e0bfff03 	ldbu	r2,-4(fp)
   2f0a8:	10005626 	beq	r2,zero,2f204 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   2f0ac:	00002806 	br	2f150 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f0b0:	e0bffa17 	ldw	r2,-24(fp)
   2f0b4:	108002a8 	cmpgeui	r2,r2,10
   2f0b8:	1000021e 	bne	r2,zero,2f0c4 <alt_avalon_i2c_master_tx_rx+0x50>
   2f0bc:	0109c404 	movi	r4,10000
   2f0c0:	00311c00 	call	311c0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2f0c4:	d8000015 	stw	zero,0(sp)
   2f0c8:	000f883a 	mov	r7,zero
   2f0cc:	e1bffd17 	ldw	r6,-12(fp)
   2f0d0:	e17ffc17 	ldw	r5,-16(fp)
   2f0d4:	e13ffb17 	ldw	r4,-20(fp)
   2f0d8:	002f3fc0 	call	2f3fc <alt_avalon_i2c_master_transmit_using_interrupts>
   2f0dc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f0e0:	e0bff917 	ldw	r2,-28(fp)
   2f0e4:	10bffea0 	cmpeqi	r2,r2,-6
   2f0e8:	1000191e 	bne	r2,zero,2f150 <alt_avalon_i2c_master_tx_rx+0xdc>
   2f0ec:	e0bff917 	ldw	r2,-28(fp)
   2f0f0:	10bffee0 	cmpeqi	r2,r2,-5
   2f0f4:	1000161e 	bne	r2,zero,2f150 <alt_avalon_i2c_master_tx_rx+0xdc>
   2f0f8:	e0bff917 	ldw	r2,-28(fp)
   2f0fc:	10bffe58 	cmpnei	r2,r2,-7
   2f100:	1000011e 	bne	r2,zero,2f108 <alt_avalon_i2c_master_tx_rx+0x94>
   2f104:	00001206 	br	2f150 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2f108:	00800044 	movi	r2,1
   2f10c:	d8800015 	stw	r2,0(sp)
   2f110:	01c00044 	movi	r7,1
   2f114:	e1800217 	ldw	r6,8(fp)
   2f118:	e17ffe17 	ldw	r5,-8(fp)
   2f11c:	e13ffb17 	ldw	r4,-20(fp)
   2f120:	002f8180 	call	2f818 <alt_avalon_i2c_master_receive_using_interrupts>
   2f124:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f128:	e0bff917 	ldw	r2,-28(fp)
   2f12c:	10bffea0 	cmpeqi	r2,r2,-6
   2f130:	1000061e 	bne	r2,zero,2f14c <alt_avalon_i2c_master_tx_rx+0xd8>
   2f134:	e0bff917 	ldw	r2,-28(fp)
   2f138:	10bffee0 	cmpeqi	r2,r2,-5
   2f13c:	1000031e 	bne	r2,zero,2f14c <alt_avalon_i2c_master_tx_rx+0xd8>
   2f140:	e0bff917 	ldw	r2,-28(fp)
   2f144:	10bffe58 	cmpnei	r2,r2,-7
   2f148:	1000331e 	bne	r2,zero,2f218 <alt_avalon_i2c_master_tx_rx+0x1a4>
   2f14c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   2f150:	e0bffa17 	ldw	r2,-24(fp)
   2f154:	10ffffc4 	addi	r3,r2,-1
   2f158:	e0fffa15 	stw	r3,-24(fp)
   2f15c:	103fd41e 	bne	r2,zero,2f0b0 <__alt_data_end+0xfffef0b0>
   2f160:	00003006 	br	2f224 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f164:	e0bffa17 	ldw	r2,-24(fp)
   2f168:	108002a8 	cmpgeui	r2,r2,10
   2f16c:	1000021e 	bne	r2,zero,2f178 <alt_avalon_i2c_master_tx_rx+0x104>
   2f170:	0109c404 	movi	r4,10000
   2f174:	00311c00 	call	311c0 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2f178:	d8000015 	stw	zero,0(sp)
   2f17c:	000f883a 	mov	r7,zero
   2f180:	e1bffd17 	ldw	r6,-12(fp)
   2f184:	e17ffc17 	ldw	r5,-16(fp)
   2f188:	e13ffb17 	ldw	r4,-20(fp)
   2f18c:	002f23c0 	call	2f23c <alt_avalon_i2c_master_transmit>
   2f190:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f194:	e0bff917 	ldw	r2,-28(fp)
   2f198:	10bffea0 	cmpeqi	r2,r2,-6
   2f19c:	1000191e 	bne	r2,zero,2f204 <alt_avalon_i2c_master_tx_rx+0x190>
   2f1a0:	e0bff917 	ldw	r2,-28(fp)
   2f1a4:	10bffee0 	cmpeqi	r2,r2,-5
   2f1a8:	1000161e 	bne	r2,zero,2f204 <alt_avalon_i2c_master_tx_rx+0x190>
   2f1ac:	e0bff917 	ldw	r2,-28(fp)
   2f1b0:	10bffe58 	cmpnei	r2,r2,-7
   2f1b4:	1000011e 	bne	r2,zero,2f1bc <alt_avalon_i2c_master_tx_rx+0x148>
   2f1b8:	00001206 	br	2f204 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2f1bc:	00800044 	movi	r2,1
   2f1c0:	d8800015 	stw	r2,0(sp)
   2f1c4:	01c00044 	movi	r7,1
   2f1c8:	e1800217 	ldw	r6,8(fp)
   2f1cc:	e17ffe17 	ldw	r5,-8(fp)
   2f1d0:	e13ffb17 	ldw	r4,-20(fp)
   2f1d4:	002f6080 	call	2f608 <alt_avalon_i2c_master_receive>
   2f1d8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f1dc:	e0bff917 	ldw	r2,-28(fp)
   2f1e0:	10bffea0 	cmpeqi	r2,r2,-6
   2f1e4:	1000061e 	bne	r2,zero,2f200 <alt_avalon_i2c_master_tx_rx+0x18c>
   2f1e8:	e0bff917 	ldw	r2,-28(fp)
   2f1ec:	10bffee0 	cmpeqi	r2,r2,-5
   2f1f0:	1000031e 	bne	r2,zero,2f200 <alt_avalon_i2c_master_tx_rx+0x18c>
   2f1f4:	e0bff917 	ldw	r2,-28(fp)
   2f1f8:	10bffe58 	cmpnei	r2,r2,-7
   2f1fc:	1000081e 	bne	r2,zero,2f220 <alt_avalon_i2c_master_tx_rx+0x1ac>
   2f200:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   2f204:	e0bffa17 	ldw	r2,-24(fp)
   2f208:	10ffffc4 	addi	r3,r2,-1
   2f20c:	e0fffa15 	stw	r3,-24(fp)
   2f210:	103fd41e 	bne	r2,zero,2f164 <__alt_data_end+0xfffef164>
   2f214:	00000306 	br	2f224 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   2f218:	0001883a 	nop
   2f21c:	00000106 	br	2f224 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   2f220:	0001883a 	nop
      }
    }
    
    return status;
   2f224:	e0bff917 	ldw	r2,-28(fp)
}                                       
   2f228:	e037883a 	mov	sp,fp
   2f22c:	dfc00117 	ldw	ra,4(sp)
   2f230:	df000017 	ldw	fp,0(sp)
   2f234:	dec00204 	addi	sp,sp,8
   2f238:	f800283a 	ret

0002f23c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   2f23c:	defff704 	addi	sp,sp,-36
   2f240:	dfc00815 	stw	ra,32(sp)
   2f244:	df000715 	stw	fp,28(sp)
   2f248:	df000704 	addi	fp,sp,28
   2f24c:	e13ffb15 	stw	r4,-20(fp)
   2f250:	e17ffc15 	stw	r5,-16(fp)
   2f254:	e1bffd15 	stw	r6,-12(fp)
   2f258:	3807883a 	mov	r3,r7
   2f25c:	e0800217 	ldw	r2,8(fp)
   2f260:	e0fffe05 	stb	r3,-8(fp)
   2f264:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f268:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   2f26c:	0149c404 	movi	r5,10000
   2f270:	e13ffd17 	ldw	r4,-12(fp)
   2f274:	002adc80 	call	2adc8 <__mulsi3>
   2f278:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   2f27c:	e0bffd17 	ldw	r2,-12(fp)
   2f280:	1000021e 	bne	r2,zero,2f28c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f284:	0005883a 	mov	r2,zero
   2f288:	00005706 	br	2f3e8 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f28c:	e0bffe03 	ldbu	r2,-8(fp)
   2f290:	10000a1e 	bne	r2,zero,2f2bc <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f294:	e13ffb17 	ldw	r4,-20(fp)
   2f298:	002e4b80 	call	2e4b8 <alt_avalon_i2c_enable>
   2f29c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f2a0:	e0bffa17 	ldw	r2,-24(fp)
   2f2a4:	10000226 	beq	r2,zero,2f2b0 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   2f2a8:	e0bffa17 	ldw	r2,-24(fp)
   2f2ac:	00004e06 	br	2f3e8 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f2b0:	01400704 	movi	r5,28
   2f2b4:	e13ffb17 	ldw	r4,-20(fp)
   2f2b8:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2f2bc:	e0bffe03 	ldbu	r2,-8(fp)
   2f2c0:	100d883a 	mov	r6,r2
   2f2c4:	000b883a 	mov	r5,zero
   2f2c8:	e13ffb17 	ldw	r4,-20(fp)
   2f2cc:	002eb200 	call	2eb20 <alt_avalon_i2c_send_address>
   2f2d0:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   2f2d4:	e0bffa17 	ldw	r2,-24(fp)
   2f2d8:	1000271e 	bne	r2,zero,2f378 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f2dc:	00000f06 	br	2f31c <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f2e0:	e0bffc17 	ldw	r2,-16(fp)
   2f2e4:	10800003 	ldbu	r2,0(r2)
   2f2e8:	10803fcc 	andi	r2,r2,255
   2f2ec:	000f883a 	mov	r7,zero
   2f2f0:	000d883a 	mov	r6,zero
   2f2f4:	100b883a 	mov	r5,r2
   2f2f8:	e13ffb17 	ldw	r4,-20(fp)
   2f2fc:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f300:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   2f304:	e0bffc17 	ldw	r2,-16(fp)
   2f308:	10800044 	addi	r2,r2,1
   2f30c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f310:	e0bffd17 	ldw	r2,-12(fp)
   2f314:	10bfffc4 	addi	r2,r2,-1
   2f318:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f31c:	e0bffd17 	ldw	r2,-12(fp)
   2f320:	108000b0 	cmpltui	r2,r2,2
   2f324:	1000021e 	bne	r2,zero,2f330 <alt_avalon_i2c_master_transmit+0xf4>
   2f328:	e0bffa17 	ldw	r2,-24(fp)
   2f32c:	103fec26 	beq	r2,zero,2f2e0 <__alt_data_end+0xfffef2e0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f330:	e0bffa17 	ldw	r2,-24(fp)
   2f334:	1000101e 	bne	r2,zero,2f378 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f338:	e0bffc17 	ldw	r2,-16(fp)
   2f33c:	10800003 	ldbu	r2,0(r2)
   2f340:	10803fcc 	andi	r2,r2,255
   2f344:	e0ffff03 	ldbu	r3,-4(fp)
   2f348:	180f883a 	mov	r7,r3
   2f34c:	000d883a 	mov	r6,zero
   2f350:	100b883a 	mov	r5,r2
   2f354:	e13ffb17 	ldw	r4,-20(fp)
   2f358:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f35c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   2f360:	e0bffc17 	ldw	r2,-16(fp)
   2f364:	10800044 	addi	r2,r2,1
   2f368:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f36c:	e0bffd17 	ldw	r2,-12(fp)
   2f370:	10bfffc4 	addi	r2,r2,-1
   2f374:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2f378:	e0bfff03 	ldbu	r2,-4(fp)
   2f37c:	1000101e 	bne	r2,zero,2f3c0 <alt_avalon_i2c_master_transmit+0x184>
   2f380:	e0bffa17 	ldw	r2,-24(fp)
   2f384:	10001726 	beq	r2,zero,2f3e4 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f388:	00000d06 	br	2f3c0 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f38c:	e0bff917 	ldw	r2,-28(fp)
   2f390:	108002a8 	cmpgeui	r2,r2,10
   2f394:	1000021e 	bne	r2,zero,2f3a0 <alt_avalon_i2c_master_transmit+0x164>
   2f398:	0109c404 	movi	r4,10000
   2f39c:	00311c00 	call	311c0 <alt_busy_sleep>
            if (--timeout == 0)
   2f3a0:	e0bff917 	ldw	r2,-28(fp)
   2f3a4:	10bfffc4 	addi	r2,r2,-1
   2f3a8:	e0bff915 	stw	r2,-28(fp)
   2f3ac:	e0bff917 	ldw	r2,-28(fp)
   2f3b0:	1000031e 	bne	r2,zero,2f3c0 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f3b4:	00bfff84 	movi	r2,-2
   2f3b8:	e0bffa15 	stw	r2,-24(fp)
               break;
   2f3bc:	00000306 	br	2f3cc <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f3c0:	e13ffb17 	ldw	r4,-20(fp)
   2f3c4:	002e8a80 	call	2e8a8 <alt_avalon_i2c_is_busy>
   2f3c8:	103ff01e 	bne	r2,zero,2f38c <__alt_data_end+0xfffef38c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   2f3cc:	e0bffa04 	addi	r2,fp,-24
   2f3d0:	100b883a 	mov	r5,r2
   2f3d4:	e13ffb17 	ldw	r4,-20(fp)
   2f3d8:	002ec7c0 	call	2ec7c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f3dc:	e13ffb17 	ldw	r4,-20(fp)
   2f3e0:	002e5500 	call	2e550 <alt_avalon_i2c_disable>
    }


    return status;
   2f3e4:	e0bffa17 	ldw	r2,-24(fp)
}
   2f3e8:	e037883a 	mov	sp,fp
   2f3ec:	dfc00117 	ldw	ra,4(sp)
   2f3f0:	df000017 	ldw	fp,0(sp)
   2f3f4:	dec00204 	addi	sp,sp,8
   2f3f8:	f800283a 	ret

0002f3fc <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   2f3fc:	defff604 	addi	sp,sp,-40
   2f400:	dfc00915 	stw	ra,36(sp)
   2f404:	df000815 	stw	fp,32(sp)
   2f408:	df000804 	addi	fp,sp,32
   2f40c:	e13ffb15 	stw	r4,-20(fp)
   2f410:	e17ffc15 	stw	r5,-16(fp)
   2f414:	e1bffd15 	stw	r6,-12(fp)
   2f418:	3807883a 	mov	r3,r7
   2f41c:	e0800217 	ldw	r2,8(fp)
   2f420:	e0fffe05 	stb	r3,-8(fp)
   2f424:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f428:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   2f42c:	0149c404 	movi	r5,10000
   2f430:	e13ffd17 	ldw	r4,-12(fp)
   2f434:	002adc80 	call	2adc8 <__mulsi3>
   2f438:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   2f43c:	e0bffb17 	ldw	r2,-20(fp)
   2f440:	10800717 	ldw	r2,28(r2)
   2f444:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   2f448:	e0bffd17 	ldw	r2,-12(fp)
   2f44c:	1000021e 	bne	r2,zero,2f458 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f450:	0005883a 	mov	r2,zero
   2f454:	00006706 	br	2f5f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2f458:	e0bffb17 	ldw	r2,-20(fp)
   2f45c:	10c00617 	ldw	r3,24(r2)
   2f460:	008000f4 	movhi	r2,3
   2f464:	10b84f04 	addi	r2,r2,-7876
   2f468:	18800226 	beq	r3,r2,2f474 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2f46c:	00bfff44 	movi	r2,-3
   2f470:	00006006 	br	2f5f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f474:	e0bffe03 	ldbu	r2,-8(fp)
   2f478:	10000a1e 	bne	r2,zero,2f4a4 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f47c:	e13ffb17 	ldw	r4,-20(fp)
   2f480:	002e4b80 	call	2e4b8 <alt_avalon_i2c_enable>
   2f484:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f488:	e0bff817 	ldw	r2,-32(fp)
   2f48c:	10000226 	beq	r2,zero,2f498 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   2f490:	e0bff817 	ldw	r2,-32(fp)
   2f494:	00005706 	br	2f5f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f498:	01400704 	movi	r5,28
   2f49c:	e13ffb17 	ldw	r4,-20(fp)
   2f4a0:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2f4a4:	e0bffe03 	ldbu	r2,-8(fp)
   2f4a8:	100d883a 	mov	r6,r2
   2f4ac:	000b883a 	mov	r5,zero
   2f4b0:	e13ffb17 	ldw	r4,-20(fp)
   2f4b4:	002eb200 	call	2eb20 <alt_avalon_i2c_send_address>
   2f4b8:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   2f4bc:	e0bff817 	ldw	r2,-32(fp)
   2f4c0:	1000271e 	bne	r2,zero,2f560 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f4c4:	00000f06 	br	2f504 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f4c8:	e0bffc17 	ldw	r2,-16(fp)
   2f4cc:	10800003 	ldbu	r2,0(r2)
   2f4d0:	10803fcc 	andi	r2,r2,255
   2f4d4:	000f883a 	mov	r7,zero
   2f4d8:	000d883a 	mov	r6,zero
   2f4dc:	100b883a 	mov	r5,r2
   2f4e0:	e13ffb17 	ldw	r4,-20(fp)
   2f4e4:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f4e8:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   2f4ec:	e0bffc17 	ldw	r2,-16(fp)
   2f4f0:	10800044 	addi	r2,r2,1
   2f4f4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f4f8:	e0bffd17 	ldw	r2,-12(fp)
   2f4fc:	10bfffc4 	addi	r2,r2,-1
   2f500:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f504:	e0bffd17 	ldw	r2,-12(fp)
   2f508:	108000b0 	cmpltui	r2,r2,2
   2f50c:	1000021e 	bne	r2,zero,2f518 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   2f510:	e0bff817 	ldw	r2,-32(fp)
   2f514:	103fec26 	beq	r2,zero,2f4c8 <__alt_data_end+0xfffef4c8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f518:	e0bff817 	ldw	r2,-32(fp)
   2f51c:	1000101e 	bne	r2,zero,2f560 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f520:	e0bffc17 	ldw	r2,-16(fp)
   2f524:	10800003 	ldbu	r2,0(r2)
   2f528:	10803fcc 	andi	r2,r2,255
   2f52c:	e0ffff03 	ldbu	r3,-4(fp)
   2f530:	180f883a 	mov	r7,r3
   2f534:	000d883a 	mov	r6,zero
   2f538:	100b883a 	mov	r5,r2
   2f53c:	e13ffb17 	ldw	r4,-20(fp)
   2f540:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f544:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   2f548:	e0bffc17 	ldw	r2,-16(fp)
   2f54c:	10800044 	addi	r2,r2,1
   2f550:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f554:	e0bffd17 	ldw	r2,-12(fp)
   2f558:	10bfffc4 	addi	r2,r2,-1
   2f55c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2f560:	e0bff817 	ldw	r2,-32(fp)
   2f564:	10001426 	beq	r2,zero,2f5b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f568:	00000d06 	br	2f5a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   2f56c:	e0bff917 	ldw	r2,-28(fp)
   2f570:	108002a8 	cmpgeui	r2,r2,10
   2f574:	1000021e 	bne	r2,zero,2f580 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   2f578:	0109c404 	movi	r4,10000
   2f57c:	00311c00 	call	311c0 <alt_busy_sleep>
            if (--timeout == 0)
   2f580:	e0bff917 	ldw	r2,-28(fp)
   2f584:	10bfffc4 	addi	r2,r2,-1
   2f588:	e0bff915 	stw	r2,-28(fp)
   2f58c:	e0bff917 	ldw	r2,-28(fp)
   2f590:	1000031e 	bne	r2,zero,2f5a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f594:	00bfff84 	movi	r2,-2
   2f598:	e0bff815 	stw	r2,-32(fp)
               break;
   2f59c:	00000306 	br	2f5ac <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f5a0:	e13ffb17 	ldw	r4,-20(fp)
   2f5a4:	002e8a80 	call	2e8a8 <alt_avalon_i2c_is_busy>
   2f5a8:	103ff01e 	bne	r2,zero,2f56c <__alt_data_end+0xfffef56c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f5ac:	e13ffb17 	ldw	r4,-20(fp)
   2f5b0:	002e5500 	call	2e550 <alt_avalon_i2c_disable>
   2f5b4:	00000e06 	br	2f5f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   2f5b8:	e0bfff03 	ldbu	r2,-4(fp)
   2f5bc:	10000c26 	beq	r2,zero,2f5f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f5c0:	01400704 	movi	r5,28
   2f5c4:	e13ffb17 	ldw	r4,-20(fp)
   2f5c8:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   2f5cc:	000b883a 	mov	r5,zero
   2f5d0:	e13ffb17 	ldw	r4,-20(fp)
   2f5d4:	002fcec0 	call	2fcec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   2f5d8:	e0bffa17 	ldw	r2,-24(fp)
   2f5dc:	00c00044 	movi	r3,1
   2f5e0:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   2f5e4:	01400044 	movi	r5,1
   2f5e8:	e13ffb17 	ldw	r4,-20(fp)
   2f5ec:	002fb480 	call	2fb48 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   2f5f0:	e0bff817 	ldw	r2,-32(fp)
}
   2f5f4:	e037883a 	mov	sp,fp
   2f5f8:	dfc00117 	ldw	ra,4(sp)
   2f5fc:	df000017 	ldw	fp,0(sp)
   2f600:	dec00204 	addi	sp,sp,8
   2f604:	f800283a 	ret

0002f608 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   2f608:	defff404 	addi	sp,sp,-48
   2f60c:	dfc00b15 	stw	ra,44(sp)
   2f610:	df000a15 	stw	fp,40(sp)
   2f614:	df000a04 	addi	fp,sp,40
   2f618:	e13ffb15 	stw	r4,-20(fp)
   2f61c:	e17ffc15 	stw	r5,-16(fp)
   2f620:	e1bffd15 	stw	r6,-12(fp)
   2f624:	3807883a 	mov	r3,r7
   2f628:	e0800217 	ldw	r2,8(fp)
   2f62c:	e0fffe05 	stb	r3,-8(fp)
   2f630:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f634:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   2f638:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   2f63c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   2f640:	e0bffd17 	ldw	r2,-12(fp)
   2f644:	1000021e 	bne	r2,zero,2f650 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f648:	0005883a 	mov	r2,zero
   2f64c:	00006d06 	br	2f804 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f650:	e0bffe03 	ldbu	r2,-8(fp)
   2f654:	10000a1e 	bne	r2,zero,2f680 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f658:	e13ffb17 	ldw	r4,-20(fp)
   2f65c:	002e4b80 	call	2e4b8 <alt_avalon_i2c_enable>
   2f660:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f664:	e0bff917 	ldw	r2,-28(fp)
   2f668:	10000226 	beq	r2,zero,2f674 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   2f66c:	e0bff917 	ldw	r2,-28(fp)
   2f670:	00006406 	br	2f804 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f674:	01400704 	movi	r5,28
   2f678:	e13ffb17 	ldw	r4,-20(fp)
   2f67c:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2f680:	e0bffe03 	ldbu	r2,-8(fp)
   2f684:	100d883a 	mov	r6,r2
   2f688:	01400044 	movi	r5,1
   2f68c:	e13ffb17 	ldw	r4,-20(fp)
   2f690:	002eb200 	call	2eb20 <alt_avalon_i2c_send_address>
   2f694:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2f698:	e0bff917 	ldw	r2,-28(fp)
   2f69c:	1000341e 	bne	r2,zero,2f770 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f6a0:	00001906 	br	2f708 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f6a4:	000f883a 	mov	r7,zero
   2f6a8:	000d883a 	mov	r6,zero
   2f6ac:	000b883a 	mov	r5,zero
   2f6b0:	e13ffb17 	ldw	r4,-20(fp)
   2f6b4:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f6b8:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   2f6bc:	e0bff817 	ldw	r2,-32(fp)
   2f6c0:	10800044 	addi	r2,r2,1
   2f6c4:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   2f6c8:	e0bff917 	ldw	r2,-28(fp)
   2f6cc:	10000e1e 	bne	r2,zero,2f708 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2f6d0:	e0bffa04 	addi	r2,fp,-24
   2f6d4:	100f883a 	mov	r7,r2
   2f6d8:	000d883a 	mov	r6,zero
   2f6dc:	e17ffc17 	ldw	r5,-16(fp)
   2f6e0:	e13ffb17 	ldw	r4,-20(fp)
   2f6e4:	002e8ec0 	call	2e8ec <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   2f6e8:	e0bffa17 	ldw	r2,-24(fp)
   2f6ec:	e0fffc17 	ldw	r3,-16(fp)
   2f6f0:	1885883a 	add	r2,r3,r2
   2f6f4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   2f6f8:	e0bffa17 	ldw	r2,-24(fp)
   2f6fc:	e0fff717 	ldw	r3,-36(fp)
   2f700:	1885883a 	add	r2,r3,r2
   2f704:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f708:	e0bffd17 	ldw	r2,-12(fp)
   2f70c:	10bfffc4 	addi	r2,r2,-1
   2f710:	e0fff817 	ldw	r3,-32(fp)
   2f714:	1880022e 	bgeu	r3,r2,2f720 <alt_avalon_i2c_master_receive+0x118>
   2f718:	e0bff917 	ldw	r2,-28(fp)
   2f71c:	103fe126 	beq	r2,zero,2f6a4 <__alt_data_end+0xfffef6a4>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f720:	e0bff917 	ldw	r2,-28(fp)
   2f724:	1000121e 	bne	r2,zero,2f770 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f728:	e0bfff03 	ldbu	r2,-4(fp)
   2f72c:	100f883a 	mov	r7,r2
   2f730:	000d883a 	mov	r6,zero
   2f734:	000b883a 	mov	r5,zero
   2f738:	e13ffb17 	ldw	r4,-20(fp)
   2f73c:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f740:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2f744:	00000a06 	br	2f770 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   2f748:	e17ffc17 	ldw	r5,-16(fp)
   2f74c:	e13ffb17 	ldw	r4,-20(fp)
   2f750:	002e9940 	call	2e994 <alt_avalon_i2c_rx_read>
   2f754:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   2f758:	e0bffc17 	ldw	r2,-16(fp)
   2f75c:	10800044 	addi	r2,r2,1
   2f760:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   2f764:	e0bff717 	ldw	r2,-36(fp)
   2f768:	10800044 	addi	r2,r2,1
   2f76c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2f770:	e0fff717 	ldw	r3,-36(fp)
   2f774:	e0bffd17 	ldw	r2,-12(fp)
   2f778:	1880022e 	bgeu	r3,r2,2f784 <alt_avalon_i2c_master_receive+0x17c>
   2f77c:	e0bff917 	ldw	r2,-28(fp)
   2f780:	103ff126 	beq	r2,zero,2f748 <__alt_data_end+0xfffef748>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2f784:	e0bfff03 	ldbu	r2,-4(fp)
   2f788:	1000021e 	bne	r2,zero,2f794 <alt_avalon_i2c_master_receive+0x18c>
   2f78c:	e0bff917 	ldw	r2,-28(fp)
   2f790:	10001b26 	beq	r2,zero,2f800 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   2f794:	0149c404 	movi	r5,10000
   2f798:	e13ffd17 	ldw	r4,-12(fp)
   2f79c:	002adc80 	call	2adc8 <__mulsi3>
   2f7a0:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f7a4:	00000d06 	br	2f7dc <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f7a8:	e0bff617 	ldw	r2,-40(fp)
   2f7ac:	108002a8 	cmpgeui	r2,r2,10
   2f7b0:	1000021e 	bne	r2,zero,2f7bc <alt_avalon_i2c_master_receive+0x1b4>
   2f7b4:	0109c404 	movi	r4,10000
   2f7b8:	00311c00 	call	311c0 <alt_busy_sleep>
            if (--timeout == 0)
   2f7bc:	e0bff617 	ldw	r2,-40(fp)
   2f7c0:	10bfffc4 	addi	r2,r2,-1
   2f7c4:	e0bff615 	stw	r2,-40(fp)
   2f7c8:	e0bff617 	ldw	r2,-40(fp)
   2f7cc:	1000031e 	bne	r2,zero,2f7dc <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f7d0:	00bfff84 	movi	r2,-2
   2f7d4:	e0bff915 	stw	r2,-28(fp)
               break;
   2f7d8:	00000306 	br	2f7e8 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f7dc:	e13ffb17 	ldw	r4,-20(fp)
   2f7e0:	002e8a80 	call	2e8a8 <alt_avalon_i2c_is_busy>
   2f7e4:	103ff01e 	bne	r2,zero,2f7a8 <__alt_data_end+0xfffef7a8>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   2f7e8:	e0bff904 	addi	r2,fp,-28
   2f7ec:	100b883a 	mov	r5,r2
   2f7f0:	e13ffb17 	ldw	r4,-20(fp)
   2f7f4:	002ec7c0 	call	2ec7c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f7f8:	e13ffb17 	ldw	r4,-20(fp)
   2f7fc:	002e5500 	call	2e550 <alt_avalon_i2c_disable>
    }

    return status;
   2f800:	e0bff917 	ldw	r2,-28(fp)
}
   2f804:	e037883a 	mov	sp,fp
   2f808:	dfc00117 	ldw	ra,4(sp)
   2f80c:	df000017 	ldw	fp,0(sp)
   2f810:	dec00204 	addi	sp,sp,8
   2f814:	f800283a 	ret

0002f818 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   2f818:	defff504 	addi	sp,sp,-44
   2f81c:	dfc00a15 	stw	ra,40(sp)
   2f820:	df000915 	stw	fp,36(sp)
   2f824:	df000904 	addi	fp,sp,36
   2f828:	e13ffb15 	stw	r4,-20(fp)
   2f82c:	e17ffc15 	stw	r5,-16(fp)
   2f830:	e1bffd15 	stw	r6,-12(fp)
   2f834:	3807883a 	mov	r3,r7
   2f838:	e0800217 	ldw	r2,8(fp)
   2f83c:	e0fffe05 	stb	r3,-8(fp)
   2f840:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f844:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   2f848:	e0bffb17 	ldw	r2,-20(fp)
   2f84c:	10800717 	ldw	r2,28(r2)
   2f850:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   2f854:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   2f858:	e0bffd17 	ldw	r2,-12(fp)
   2f85c:	1000021e 	bne	r2,zero,2f868 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f860:	0005883a 	mov	r2,zero
   2f864:	00006306 	br	2f9f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2f868:	e0bffb17 	ldw	r2,-20(fp)
   2f86c:	10c00617 	ldw	r3,24(r2)
   2f870:	008000f4 	movhi	r2,3
   2f874:	10b84f04 	addi	r2,r2,-7876
   2f878:	18800226 	beq	r3,r2,2f884 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2f87c:	00bfff44 	movi	r2,-3
   2f880:	00005c06 	br	2f9f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f884:	e0bffe03 	ldbu	r2,-8(fp)
   2f888:	10000a1e 	bne	r2,zero,2f8b4 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f88c:	e13ffb17 	ldw	r4,-20(fp)
   2f890:	002e4b80 	call	2e4b8 <alt_avalon_i2c_enable>
   2f894:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f898:	e0bff717 	ldw	r2,-36(fp)
   2f89c:	10000226 	beq	r2,zero,2f8a8 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   2f8a0:	e0bff717 	ldw	r2,-36(fp)
   2f8a4:	00005306 	br	2f9f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f8a8:	01400704 	movi	r5,28
   2f8ac:	e13ffb17 	ldw	r4,-20(fp)
   2f8b0:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2f8b4:	e0bffe03 	ldbu	r2,-8(fp)
   2f8b8:	100d883a 	mov	r6,r2
   2f8bc:	01400044 	movi	r5,1
   2f8c0:	e13ffb17 	ldw	r4,-20(fp)
   2f8c4:	002eb200 	call	2eb20 <alt_avalon_i2c_send_address>
   2f8c8:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2f8cc:	e0bff717 	ldw	r2,-36(fp)
   2f8d0:	1000191e 	bne	r2,zero,2f938 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f8d4:	00000906 	br	2f8fc <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f8d8:	000f883a 	mov	r7,zero
   2f8dc:	000d883a 	mov	r6,zero
   2f8e0:	000b883a 	mov	r5,zero
   2f8e4:	e13ffb17 	ldw	r4,-20(fp)
   2f8e8:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f8ec:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   2f8f0:	e0bff917 	ldw	r2,-28(fp)
   2f8f4:	10800044 	addi	r2,r2,1
   2f8f8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f8fc:	e0bffd17 	ldw	r2,-12(fp)
   2f900:	10bfffc4 	addi	r2,r2,-1
   2f904:	e0fff917 	ldw	r3,-28(fp)
   2f908:	1880022e 	bgeu	r3,r2,2f914 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   2f90c:	e0bff717 	ldw	r2,-36(fp)
   2f910:	103ff126 	beq	r2,zero,2f8d8 <__alt_data_end+0xfffef8d8>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f914:	e0bff717 	ldw	r2,-36(fp)
   2f918:	1000071e 	bne	r2,zero,2f938 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f91c:	e0bfff03 	ldbu	r2,-4(fp)
   2f920:	100f883a 	mov	r7,r2
   2f924:	000d883a 	mov	r6,zero
   2f928:	000b883a 	mov	r5,zero
   2f92c:	e13ffb17 	ldw	r4,-20(fp)
   2f930:	002ea3c0 	call	2ea3c <alt_avalon_i2c_cmd_write>
   2f934:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2f938:	e0bff717 	ldw	r2,-36(fp)
   2f93c:	10001826 	beq	r2,zero,2f9a0 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   2f940:	0149c404 	movi	r5,10000
   2f944:	e13ffd17 	ldw	r4,-12(fp)
   2f948:	002adc80 	call	2adc8 <__mulsi3>
   2f94c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f950:	00000d06 	br	2f988 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f954:	e0bff817 	ldw	r2,-32(fp)
   2f958:	108002a8 	cmpgeui	r2,r2,10
   2f95c:	1000021e 	bne	r2,zero,2f968 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   2f960:	0109c404 	movi	r4,10000
   2f964:	00311c00 	call	311c0 <alt_busy_sleep>
            if (--timeout == 0)
   2f968:	e0bff817 	ldw	r2,-32(fp)
   2f96c:	10bfffc4 	addi	r2,r2,-1
   2f970:	e0bff815 	stw	r2,-32(fp)
   2f974:	e0bff817 	ldw	r2,-32(fp)
   2f978:	1000031e 	bne	r2,zero,2f988 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f97c:	00bfff84 	movi	r2,-2
   2f980:	e0bff715 	stw	r2,-36(fp)
               break;
   2f984:	00000306 	br	2f994 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f988:	e13ffb17 	ldw	r4,-20(fp)
   2f98c:	002e8a80 	call	2e8a8 <alt_avalon_i2c_is_busy>
   2f990:	103ff01e 	bne	r2,zero,2f954 <__alt_data_end+0xfffef954>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f994:	e13ffb17 	ldw	r4,-20(fp)
   2f998:	002e5500 	call	2e550 <alt_avalon_i2c_disable>
   2f99c:	00001406 	br	2f9f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   2f9a0:	e0bfff03 	ldbu	r2,-4(fp)
   2f9a4:	10001226 	beq	r2,zero,2f9f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f9a8:	01400704 	movi	r5,28
   2f9ac:	e13ffb17 	ldw	r4,-20(fp)
   2f9b0:	002faa40 	call	2faa4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   2f9b4:	000b883a 	mov	r5,zero
   2f9b8:	e13ffb17 	ldw	r4,-20(fp)
   2f9bc:	002fc3c0 	call	2fc3c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   2f9c0:	e0bffa17 	ldw	r2,-24(fp)
   2f9c4:	00c00084 	movi	r3,2
   2f9c8:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   2f9cc:	e0bffa17 	ldw	r2,-24(fp)
   2f9d0:	e0fffc17 	ldw	r3,-16(fp)
   2f9d4:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   2f9d8:	e0bffa17 	ldw	r2,-24(fp)
   2f9dc:	e0fffd17 	ldw	r3,-12(fp)
   2f9e0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2f9e4:	01400084 	movi	r5,2
   2f9e8:	e13ffb17 	ldw	r4,-20(fp)
   2f9ec:	002fb480 	call	2fb48 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   2f9f0:	e0bff717 	ldw	r2,-36(fp)
}
   2f9f4:	e037883a 	mov	sp,fp
   2f9f8:	dfc00117 	ldw	ra,4(sp)
   2f9fc:	df000017 	ldw	fp,0(sp)
   2fa00:	dec00204 	addi	sp,sp,8
   2fa04:	f800283a 	ret

0002fa08 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   2fa08:	defffd04 	addi	sp,sp,-12
   2fa0c:	df000215 	stw	fp,8(sp)
   2fa10:	df000204 	addi	fp,sp,8
   2fa14:	e13ffe15 	stw	r4,-8(fp)
   2fa18:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   2fa1c:	e0bffe17 	ldw	r2,-8(fp)
   2fa20:	10800317 	ldw	r2,12(r2)
   2fa24:	10800404 	addi	r2,r2,16
   2fa28:	10c00037 	ldwio	r3,0(r2)
   2fa2c:	e0bffe17 	ldw	r2,-8(fp)
   2fa30:	10800317 	ldw	r2,12(r2)
   2fa34:	10800304 	addi	r2,r2,12
   2fa38:	10800037 	ldwio	r2,0(r2)
   2fa3c:	1884703a 	and	r2,r3,r2
   2fa40:	1007883a 	mov	r3,r2
   2fa44:	e0bfff17 	ldw	r2,-4(fp)
   2fa48:	10c00015 	stw	r3,0(r2)
}
   2fa4c:	0001883a 	nop
   2fa50:	e037883a 	mov	sp,fp
   2fa54:	df000017 	ldw	fp,0(sp)
   2fa58:	dec00104 	addi	sp,sp,4
   2fa5c:	f800283a 	ret

0002fa60 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   2fa60:	defffd04 	addi	sp,sp,-12
   2fa64:	df000215 	stw	fp,8(sp)
   2fa68:	df000204 	addi	fp,sp,8
   2fa6c:	e13ffe15 	stw	r4,-8(fp)
   2fa70:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   2fa74:	e0bffe17 	ldw	r2,-8(fp)
   2fa78:	10800317 	ldw	r2,12(r2)
   2fa7c:	10800404 	addi	r2,r2,16
   2fa80:	10800037 	ldwio	r2,0(r2)
   2fa84:	1007883a 	mov	r3,r2
   2fa88:	e0bfff17 	ldw	r2,-4(fp)
   2fa8c:	10c00015 	stw	r3,0(r2)
}
   2fa90:	0001883a 	nop
   2fa94:	e037883a 	mov	sp,fp
   2fa98:	df000017 	ldw	fp,0(sp)
   2fa9c:	dec00104 	addi	sp,sp,4
   2faa0:	f800283a 	ret

0002faa4 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2faa4:	defffd04 	addi	sp,sp,-12
   2faa8:	df000215 	stw	fp,8(sp)
   2faac:	df000204 	addi	fp,sp,8
   2fab0:	e13ffe15 	stw	r4,-8(fp)
   2fab4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2fab8:	e0bffe17 	ldw	r2,-8(fp)
   2fabc:	10800317 	ldw	r2,12(r2)
   2fac0:	10800404 	addi	r2,r2,16
   2fac4:	e0ffff17 	ldw	r3,-4(fp)
   2fac8:	10c00035 	stwio	r3,0(r2)
}
   2facc:	0001883a 	nop
   2fad0:	e037883a 	mov	sp,fp
   2fad4:	df000017 	ldw	fp,0(sp)
   2fad8:	dec00104 	addi	sp,sp,4
   2fadc:	f800283a 	ret

0002fae0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fae0:	defffb04 	addi	sp,sp,-20
   2fae4:	dfc00415 	stw	ra,16(sp)
   2fae8:	df000315 	stw	fp,12(sp)
   2faec:	df000304 	addi	fp,sp,12
   2faf0:	e13ffe15 	stw	r4,-8(fp)
   2faf4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2faf8:	e17ffd04 	addi	r5,fp,-12
   2fafc:	e13ffe17 	ldw	r4,-8(fp)
   2fb00:	002fbac0 	call	2fbac <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   2fb04:	e0bfff17 	ldw	r2,-4(fp)
   2fb08:	0086303a 	nor	r3,zero,r2
   2fb0c:	e0bffd17 	ldw	r2,-12(fp)
   2fb10:	1884703a 	and	r2,r3,r2
   2fb14:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2fb18:	e0bffe17 	ldw	r2,-8(fp)
   2fb1c:	10800317 	ldw	r2,12(r2)
   2fb20:	10800304 	addi	r2,r2,12
   2fb24:	e0fffd17 	ldw	r3,-12(fp)
   2fb28:	18c007cc 	andi	r3,r3,31
   2fb2c:	10c00035 	stwio	r3,0(r2)
}
   2fb30:	0001883a 	nop
   2fb34:	e037883a 	mov	sp,fp
   2fb38:	dfc00117 	ldw	ra,4(sp)
   2fb3c:	df000017 	ldw	fp,0(sp)
   2fb40:	dec00204 	addi	sp,sp,8
   2fb44:	f800283a 	ret

0002fb48 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fb48:	defffb04 	addi	sp,sp,-20
   2fb4c:	dfc00415 	stw	ra,16(sp)
   2fb50:	df000315 	stw	fp,12(sp)
   2fb54:	df000304 	addi	fp,sp,12
   2fb58:	e13ffe15 	stw	r4,-8(fp)
   2fb5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2fb60:	e17ffd04 	addi	r5,fp,-12
   2fb64:	e13ffe17 	ldw	r4,-8(fp)
   2fb68:	002fbac0 	call	2fbac <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   2fb6c:	e0fffd17 	ldw	r3,-12(fp)
   2fb70:	e0bfff17 	ldw	r2,-4(fp)
   2fb74:	1884b03a 	or	r2,r3,r2
   2fb78:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2fb7c:	e0bffe17 	ldw	r2,-8(fp)
   2fb80:	10800317 	ldw	r2,12(r2)
   2fb84:	10800304 	addi	r2,r2,12
   2fb88:	e0fffd17 	ldw	r3,-12(fp)
   2fb8c:	18c007cc 	andi	r3,r3,31
   2fb90:	10c00035 	stwio	r3,0(r2)
}
   2fb94:	0001883a 	nop
   2fb98:	e037883a 	mov	sp,fp
   2fb9c:	dfc00117 	ldw	ra,4(sp)
   2fba0:	df000017 	ldw	fp,0(sp)
   2fba4:	dec00204 	addi	sp,sp,8
   2fba8:	f800283a 	ret

0002fbac <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   2fbac:	defffd04 	addi	sp,sp,-12
   2fbb0:	df000215 	stw	fp,8(sp)
   2fbb4:	df000204 	addi	fp,sp,8
   2fbb8:	e13ffe15 	stw	r4,-8(fp)
   2fbbc:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   2fbc0:	e0bffe17 	ldw	r2,-8(fp)
   2fbc4:	10800317 	ldw	r2,12(r2)
   2fbc8:	10800304 	addi	r2,r2,12
   2fbcc:	10800037 	ldwio	r2,0(r2)
   2fbd0:	10c007cc 	andi	r3,r2,31
   2fbd4:	e0bfff17 	ldw	r2,-4(fp)
   2fbd8:	10c00015 	stw	r3,0(r2)
}
   2fbdc:	0001883a 	nop
   2fbe0:	e037883a 	mov	sp,fp
   2fbe4:	df000017 	ldw	fp,0(sp)
   2fbe8:	dec00104 	addi	sp,sp,4
   2fbec:	f800283a 	ret

0002fbf0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   2fbf0:	defffd04 	addi	sp,sp,-12
   2fbf4:	df000215 	stw	fp,8(sp)
   2fbf8:	df000204 	addi	fp,sp,8
   2fbfc:	e13ffe15 	stw	r4,-8(fp)
   2fc00:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   2fc04:	e0bffe17 	ldw	r2,-8(fp)
   2fc08:	10800317 	ldw	r2,12(r2)
   2fc0c:	10800204 	addi	r2,r2,8
   2fc10:	10800037 	ldwio	r2,0(r2)
   2fc14:	10800c0c 	andi	r2,r2,48
   2fc18:	1005d13a 	srai	r2,r2,4
   2fc1c:	1007883a 	mov	r3,r2
   2fc20:	e0bfff17 	ldw	r2,-4(fp)
   2fc24:	10c00015 	stw	r3,0(r2)
}
   2fc28:	0001883a 	nop
   2fc2c:	e037883a 	mov	sp,fp
   2fc30:	df000017 	ldw	fp,0(sp)
   2fc34:	dec00104 	addi	sp,sp,4
   2fc38:	f800283a 	ret

0002fc3c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   2fc3c:	defffd04 	addi	sp,sp,-12
   2fc40:	df000215 	stw	fp,8(sp)
   2fc44:	df000204 	addi	fp,sp,8
   2fc48:	e13ffe15 	stw	r4,-8(fp)
   2fc4c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   2fc50:	e0bffe17 	ldw	r2,-8(fp)
   2fc54:	10800317 	ldw	r2,12(r2)
   2fc58:	10800204 	addi	r2,r2,8
   2fc5c:	e0fffe17 	ldw	r3,-8(fp)
   2fc60:	18c00317 	ldw	r3,12(r3)
   2fc64:	18c00204 	addi	r3,r3,8
   2fc68:	18c00037 	ldwio	r3,0(r3)
   2fc6c:	1809883a 	mov	r4,r3
   2fc70:	00fff3c4 	movi	r3,-49
   2fc74:	20c8703a 	and	r4,r4,r3
   2fc78:	e0ffff17 	ldw	r3,-4(fp)
   2fc7c:	1806913a 	slli	r3,r3,4
   2fc80:	18c00c0c 	andi	r3,r3,48
   2fc84:	20c6b03a 	or	r3,r4,r3
   2fc88:	10c00035 	stwio	r3,0(r2)
}
   2fc8c:	0001883a 	nop
   2fc90:	e037883a 	mov	sp,fp
   2fc94:	df000017 	ldw	fp,0(sp)
   2fc98:	dec00104 	addi	sp,sp,4
   2fc9c:	f800283a 	ret

0002fca0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   2fca0:	defffd04 	addi	sp,sp,-12
   2fca4:	df000215 	stw	fp,8(sp)
   2fca8:	df000204 	addi	fp,sp,8
   2fcac:	e13ffe15 	stw	r4,-8(fp)
   2fcb0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   2fcb4:	e0bffe17 	ldw	r2,-8(fp)
   2fcb8:	10800317 	ldw	r2,12(r2)
   2fcbc:	10800204 	addi	r2,r2,8
   2fcc0:	10800037 	ldwio	r2,0(r2)
   2fcc4:	1080030c 	andi	r2,r2,12
   2fcc8:	1005d0ba 	srai	r2,r2,2
   2fccc:	1007883a 	mov	r3,r2
   2fcd0:	e0bfff17 	ldw	r2,-4(fp)
   2fcd4:	10c00015 	stw	r3,0(r2)
}
   2fcd8:	0001883a 	nop
   2fcdc:	e037883a 	mov	sp,fp
   2fce0:	df000017 	ldw	fp,0(sp)
   2fce4:	dec00104 	addi	sp,sp,4
   2fce8:	f800283a 	ret

0002fcec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   2fcec:	defffd04 	addi	sp,sp,-12
   2fcf0:	df000215 	stw	fp,8(sp)
   2fcf4:	df000204 	addi	fp,sp,8
   2fcf8:	e13ffe15 	stw	r4,-8(fp)
   2fcfc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   2fd00:	e0bffe17 	ldw	r2,-8(fp)
   2fd04:	10800317 	ldw	r2,12(r2)
   2fd08:	10c00204 	addi	r3,r2,8
   2fd0c:	e0bffe17 	ldw	r2,-8(fp)
   2fd10:	10800317 	ldw	r2,12(r2)
   2fd14:	10800204 	addi	r2,r2,8
   2fd18:	10800037 	ldwio	r2,0(r2)
   2fd1c:	1009883a 	mov	r4,r2
   2fd20:	00bffcc4 	movi	r2,-13
   2fd24:	2088703a 	and	r4,r4,r2
   2fd28:	e0bfff17 	ldw	r2,-4(fp)
   2fd2c:	1085883a 	add	r2,r2,r2
   2fd30:	1085883a 	add	r2,r2,r2
   2fd34:	1080030c 	andi	r2,r2,12
   2fd38:	2084b03a 	or	r2,r4,r2
   2fd3c:	18800035 	stwio	r2,0(r3)
}
   2fd40:	0001883a 	nop
   2fd44:	e037883a 	mov	sp,fp
   2fd48:	df000017 	ldw	fp,0(sp)
   2fd4c:	dec00104 	addi	sp,sp,4
   2fd50:	f800283a 	ret

0002fd54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2fd54:	defffa04 	addi	sp,sp,-24
   2fd58:	dfc00515 	stw	ra,20(sp)
   2fd5c:	df000415 	stw	fp,16(sp)
   2fd60:	df000404 	addi	fp,sp,16
   2fd64:	e13ffd15 	stw	r4,-12(fp)
   2fd68:	e17ffe15 	stw	r5,-8(fp)
   2fd6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2fd70:	e0bffd17 	ldw	r2,-12(fp)
   2fd74:	10800017 	ldw	r2,0(r2)
   2fd78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2fd7c:	e0bffc17 	ldw	r2,-16(fp)
   2fd80:	10c00a04 	addi	r3,r2,40
   2fd84:	e0bffd17 	ldw	r2,-12(fp)
   2fd88:	10800217 	ldw	r2,8(r2)
   2fd8c:	100f883a 	mov	r7,r2
   2fd90:	e1bfff17 	ldw	r6,-4(fp)
   2fd94:	e17ffe17 	ldw	r5,-8(fp)
   2fd98:	1809883a 	mov	r4,r3
   2fd9c:	003037c0 	call	3037c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2fda0:	e037883a 	mov	sp,fp
   2fda4:	dfc00117 	ldw	ra,4(sp)
   2fda8:	df000017 	ldw	fp,0(sp)
   2fdac:	dec00204 	addi	sp,sp,8
   2fdb0:	f800283a 	ret

0002fdb4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2fdb4:	defffa04 	addi	sp,sp,-24
   2fdb8:	dfc00515 	stw	ra,20(sp)
   2fdbc:	df000415 	stw	fp,16(sp)
   2fdc0:	df000404 	addi	fp,sp,16
   2fdc4:	e13ffd15 	stw	r4,-12(fp)
   2fdc8:	e17ffe15 	stw	r5,-8(fp)
   2fdcc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2fdd0:	e0bffd17 	ldw	r2,-12(fp)
   2fdd4:	10800017 	ldw	r2,0(r2)
   2fdd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2fddc:	e0bffc17 	ldw	r2,-16(fp)
   2fde0:	10c00a04 	addi	r3,r2,40
   2fde4:	e0bffd17 	ldw	r2,-12(fp)
   2fde8:	10800217 	ldw	r2,8(r2)
   2fdec:	100f883a 	mov	r7,r2
   2fdf0:	e1bfff17 	ldw	r6,-4(fp)
   2fdf4:	e17ffe17 	ldw	r5,-8(fp)
   2fdf8:	1809883a 	mov	r4,r3
   2fdfc:	00305980 	call	30598 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2fe00:	e037883a 	mov	sp,fp
   2fe04:	dfc00117 	ldw	ra,4(sp)
   2fe08:	df000017 	ldw	fp,0(sp)
   2fe0c:	dec00204 	addi	sp,sp,8
   2fe10:	f800283a 	ret

0002fe14 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2fe14:	defffc04 	addi	sp,sp,-16
   2fe18:	dfc00315 	stw	ra,12(sp)
   2fe1c:	df000215 	stw	fp,8(sp)
   2fe20:	df000204 	addi	fp,sp,8
   2fe24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2fe28:	e0bfff17 	ldw	r2,-4(fp)
   2fe2c:	10800017 	ldw	r2,0(r2)
   2fe30:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2fe34:	e0bffe17 	ldw	r2,-8(fp)
   2fe38:	10c00a04 	addi	r3,r2,40
   2fe3c:	e0bfff17 	ldw	r2,-4(fp)
   2fe40:	10800217 	ldw	r2,8(r2)
   2fe44:	100b883a 	mov	r5,r2
   2fe48:	1809883a 	mov	r4,r3
   2fe4c:	00302240 	call	30224 <altera_avalon_jtag_uart_close>
}
   2fe50:	e037883a 	mov	sp,fp
   2fe54:	dfc00117 	ldw	ra,4(sp)
   2fe58:	df000017 	ldw	fp,0(sp)
   2fe5c:	dec00204 	addi	sp,sp,8
   2fe60:	f800283a 	ret

0002fe64 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2fe64:	defffa04 	addi	sp,sp,-24
   2fe68:	dfc00515 	stw	ra,20(sp)
   2fe6c:	df000415 	stw	fp,16(sp)
   2fe70:	df000404 	addi	fp,sp,16
   2fe74:	e13ffd15 	stw	r4,-12(fp)
   2fe78:	e17ffe15 	stw	r5,-8(fp)
   2fe7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2fe80:	e0bffd17 	ldw	r2,-12(fp)
   2fe84:	10800017 	ldw	r2,0(r2)
   2fe88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2fe8c:	e0bffc17 	ldw	r2,-16(fp)
   2fe90:	10800a04 	addi	r2,r2,40
   2fe94:	e1bfff17 	ldw	r6,-4(fp)
   2fe98:	e17ffe17 	ldw	r5,-8(fp)
   2fe9c:	1009883a 	mov	r4,r2
   2fea0:	003028c0 	call	3028c <altera_avalon_jtag_uart_ioctl>
}
   2fea4:	e037883a 	mov	sp,fp
   2fea8:	dfc00117 	ldw	ra,4(sp)
   2feac:	df000017 	ldw	fp,0(sp)
   2feb0:	dec00204 	addi	sp,sp,8
   2feb4:	f800283a 	ret

0002feb8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2feb8:	defffa04 	addi	sp,sp,-24
   2febc:	dfc00515 	stw	ra,20(sp)
   2fec0:	df000415 	stw	fp,16(sp)
   2fec4:	df000404 	addi	fp,sp,16
   2fec8:	e13ffd15 	stw	r4,-12(fp)
   2fecc:	e17ffe15 	stw	r5,-8(fp)
   2fed0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2fed4:	e0bffd17 	ldw	r2,-12(fp)
   2fed8:	00c00044 	movi	r3,1
   2fedc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2fee0:	e0bffd17 	ldw	r2,-12(fp)
   2fee4:	10800017 	ldw	r2,0(r2)
   2fee8:	10800104 	addi	r2,r2,4
   2feec:	1007883a 	mov	r3,r2
   2fef0:	e0bffd17 	ldw	r2,-12(fp)
   2fef4:	10800817 	ldw	r2,32(r2)
   2fef8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2fefc:	e0bffe17 	ldw	r2,-8(fp)
   2ff00:	e0ffff17 	ldw	r3,-4(fp)
   2ff04:	d8000015 	stw	zero,0(sp)
   2ff08:	e1fffd17 	ldw	r7,-12(fp)
   2ff0c:	018000f4 	movhi	r6,3
   2ff10:	31bfde04 	addi	r6,r6,-136
   2ff14:	180b883a 	mov	r5,r3
   2ff18:	1009883a 	mov	r4,r2
   2ff1c:	00315880 	call	31588 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2ff20:	e0bffd17 	ldw	r2,-12(fp)
   2ff24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2ff28:	e0bffd17 	ldw	r2,-12(fp)
   2ff2c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2ff30:	d0e71917 	ldw	r3,-25500(gp)
   2ff34:	e1fffd17 	ldw	r7,-12(fp)
   2ff38:	018000f4 	movhi	r6,3
   2ff3c:	31806104 	addi	r6,r6,388
   2ff40:	180b883a 	mov	r5,r3
   2ff44:	1009883a 	mov	r4,r2
   2ff48:	00310940 	call	31094 <alt_alarm_start>
   2ff4c:	1000040e 	bge	r2,zero,2ff60 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2ff50:	e0fffd17 	ldw	r3,-12(fp)
   2ff54:	00a00034 	movhi	r2,32768
   2ff58:	10bfffc4 	addi	r2,r2,-1
   2ff5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2ff60:	0001883a 	nop
   2ff64:	e037883a 	mov	sp,fp
   2ff68:	dfc00117 	ldw	ra,4(sp)
   2ff6c:	df000017 	ldw	fp,0(sp)
   2ff70:	dec00204 	addi	sp,sp,8
   2ff74:	f800283a 	ret

0002ff78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2ff78:	defff804 	addi	sp,sp,-32
   2ff7c:	df000715 	stw	fp,28(sp)
   2ff80:	df000704 	addi	fp,sp,28
   2ff84:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2ff88:	e0bfff17 	ldw	r2,-4(fp)
   2ff8c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2ff90:	e0bffb17 	ldw	r2,-20(fp)
   2ff94:	10800017 	ldw	r2,0(r2)
   2ff98:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ff9c:	e0bffc17 	ldw	r2,-16(fp)
   2ffa0:	10800104 	addi	r2,r2,4
   2ffa4:	10800037 	ldwio	r2,0(r2)
   2ffa8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2ffac:	e0bffd17 	ldw	r2,-12(fp)
   2ffb0:	1080c00c 	andi	r2,r2,768
   2ffb4:	10006d26 	beq	r2,zero,3016c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2ffb8:	e0bffd17 	ldw	r2,-12(fp)
   2ffbc:	1080400c 	andi	r2,r2,256
   2ffc0:	10003526 	beq	r2,zero,30098 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2ffc4:	00800074 	movhi	r2,1
   2ffc8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ffcc:	e0bffb17 	ldw	r2,-20(fp)
   2ffd0:	10800a17 	ldw	r2,40(r2)
   2ffd4:	10800044 	addi	r2,r2,1
   2ffd8:	1081ffcc 	andi	r2,r2,2047
   2ffdc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2ffe0:	e0bffb17 	ldw	r2,-20(fp)
   2ffe4:	10c00b17 	ldw	r3,44(r2)
   2ffe8:	e0bffe17 	ldw	r2,-8(fp)
   2ffec:	18801526 	beq	r3,r2,30044 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2fff0:	e0bffc17 	ldw	r2,-16(fp)
   2fff4:	10800037 	ldwio	r2,0(r2)
   2fff8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2fffc:	e0bff917 	ldw	r2,-28(fp)
   30000:	10a0000c 	andi	r2,r2,32768
   30004:	10001126 	beq	r2,zero,3004c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   30008:	e0bffb17 	ldw	r2,-20(fp)
   3000c:	10800a17 	ldw	r2,40(r2)
   30010:	e0fff917 	ldw	r3,-28(fp)
   30014:	1809883a 	mov	r4,r3
   30018:	e0fffb17 	ldw	r3,-20(fp)
   3001c:	1885883a 	add	r2,r3,r2
   30020:	10800e04 	addi	r2,r2,56
   30024:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30028:	e0bffb17 	ldw	r2,-20(fp)
   3002c:	10800a17 	ldw	r2,40(r2)
   30030:	10800044 	addi	r2,r2,1
   30034:	10c1ffcc 	andi	r3,r2,2047
   30038:	e0bffb17 	ldw	r2,-20(fp)
   3003c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   30040:	003fe206 	br	2ffcc <__alt_data_end+0xfffeffcc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   30044:	0001883a 	nop
   30048:	00000106 	br	30050 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   3004c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   30050:	e0bff917 	ldw	r2,-28(fp)
   30054:	10bfffec 	andhi	r2,r2,65535
   30058:	10000f26 	beq	r2,zero,30098 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3005c:	e0bffb17 	ldw	r2,-20(fp)
   30060:	10c00817 	ldw	r3,32(r2)
   30064:	00bfff84 	movi	r2,-2
   30068:	1886703a 	and	r3,r3,r2
   3006c:	e0bffb17 	ldw	r2,-20(fp)
   30070:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   30074:	e0bffc17 	ldw	r2,-16(fp)
   30078:	10800104 	addi	r2,r2,4
   3007c:	1007883a 	mov	r3,r2
   30080:	e0bffb17 	ldw	r2,-20(fp)
   30084:	10800817 	ldw	r2,32(r2)
   30088:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3008c:	e0bffc17 	ldw	r2,-16(fp)
   30090:	10800104 	addi	r2,r2,4
   30094:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   30098:	e0bffd17 	ldw	r2,-12(fp)
   3009c:	1080800c 	andi	r2,r2,512
   300a0:	103fbe26 	beq	r2,zero,2ff9c <__alt_data_end+0xfffeff9c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   300a4:	e0bffd17 	ldw	r2,-12(fp)
   300a8:	1004d43a 	srli	r2,r2,16
   300ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   300b0:	00001406 	br	30104 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   300b4:	e0bffc17 	ldw	r2,-16(fp)
   300b8:	e0fffb17 	ldw	r3,-20(fp)
   300bc:	18c00d17 	ldw	r3,52(r3)
   300c0:	e13ffb17 	ldw	r4,-20(fp)
   300c4:	20c7883a 	add	r3,r4,r3
   300c8:	18c20e04 	addi	r3,r3,2104
   300cc:	18c00003 	ldbu	r3,0(r3)
   300d0:	18c03fcc 	andi	r3,r3,255
   300d4:	18c0201c 	xori	r3,r3,128
   300d8:	18ffe004 	addi	r3,r3,-128
   300dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   300e0:	e0bffb17 	ldw	r2,-20(fp)
   300e4:	10800d17 	ldw	r2,52(r2)
   300e8:	10800044 	addi	r2,r2,1
   300ec:	10c1ffcc 	andi	r3,r2,2047
   300f0:	e0bffb17 	ldw	r2,-20(fp)
   300f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   300f8:	e0bffa17 	ldw	r2,-24(fp)
   300fc:	10bfffc4 	addi	r2,r2,-1
   30100:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   30104:	e0bffa17 	ldw	r2,-24(fp)
   30108:	10000526 	beq	r2,zero,30120 <altera_avalon_jtag_uart_irq+0x1a8>
   3010c:	e0bffb17 	ldw	r2,-20(fp)
   30110:	10c00d17 	ldw	r3,52(r2)
   30114:	e0bffb17 	ldw	r2,-20(fp)
   30118:	10800c17 	ldw	r2,48(r2)
   3011c:	18bfe51e 	bne	r3,r2,300b4 <__alt_data_end+0xffff00b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   30120:	e0bffa17 	ldw	r2,-24(fp)
   30124:	103f9d26 	beq	r2,zero,2ff9c <__alt_data_end+0xfffeff9c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   30128:	e0bffb17 	ldw	r2,-20(fp)
   3012c:	10c00817 	ldw	r3,32(r2)
   30130:	00bfff44 	movi	r2,-3
   30134:	1886703a 	and	r3,r3,r2
   30138:	e0bffb17 	ldw	r2,-20(fp)
   3013c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30140:	e0bffb17 	ldw	r2,-20(fp)
   30144:	10800017 	ldw	r2,0(r2)
   30148:	10800104 	addi	r2,r2,4
   3014c:	1007883a 	mov	r3,r2
   30150:	e0bffb17 	ldw	r2,-20(fp)
   30154:	10800817 	ldw	r2,32(r2)
   30158:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3015c:	e0bffc17 	ldw	r2,-16(fp)
   30160:	10800104 	addi	r2,r2,4
   30164:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   30168:	003f8c06 	br	2ff9c <__alt_data_end+0xfffeff9c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   3016c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   30170:	0001883a 	nop
   30174:	e037883a 	mov	sp,fp
   30178:	df000017 	ldw	fp,0(sp)
   3017c:	dec00104 	addi	sp,sp,4
   30180:	f800283a 	ret

00030184 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   30184:	defff804 	addi	sp,sp,-32
   30188:	df000715 	stw	fp,28(sp)
   3018c:	df000704 	addi	fp,sp,28
   30190:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   30194:	e0bffb17 	ldw	r2,-20(fp)
   30198:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3019c:	e0bff917 	ldw	r2,-28(fp)
   301a0:	10800017 	ldw	r2,0(r2)
   301a4:	10800104 	addi	r2,r2,4
   301a8:	10800037 	ldwio	r2,0(r2)
   301ac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   301b0:	e0bffa17 	ldw	r2,-24(fp)
   301b4:	1081000c 	andi	r2,r2,1024
   301b8:	10000b26 	beq	r2,zero,301e8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   301bc:	e0bff917 	ldw	r2,-28(fp)
   301c0:	10800017 	ldw	r2,0(r2)
   301c4:	10800104 	addi	r2,r2,4
   301c8:	1007883a 	mov	r3,r2
   301cc:	e0bff917 	ldw	r2,-28(fp)
   301d0:	10800817 	ldw	r2,32(r2)
   301d4:	10810014 	ori	r2,r2,1024
   301d8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   301dc:	e0bff917 	ldw	r2,-28(fp)
   301e0:	10000915 	stw	zero,36(r2)
   301e4:	00000a06 	br	30210 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   301e8:	e0bff917 	ldw	r2,-28(fp)
   301ec:	10c00917 	ldw	r3,36(r2)
   301f0:	00a00034 	movhi	r2,32768
   301f4:	10bfff04 	addi	r2,r2,-4
   301f8:	10c00536 	bltu	r2,r3,30210 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   301fc:	e0bff917 	ldw	r2,-28(fp)
   30200:	10800917 	ldw	r2,36(r2)
   30204:	10c00044 	addi	r3,r2,1
   30208:	e0bff917 	ldw	r2,-28(fp)
   3020c:	10c00915 	stw	r3,36(r2)
   30210:	d0a71917 	ldw	r2,-25500(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   30214:	e037883a 	mov	sp,fp
   30218:	df000017 	ldw	fp,0(sp)
   3021c:	dec00104 	addi	sp,sp,4
   30220:	f800283a 	ret

00030224 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   30224:	defffd04 	addi	sp,sp,-12
   30228:	df000215 	stw	fp,8(sp)
   3022c:	df000204 	addi	fp,sp,8
   30230:	e13ffe15 	stw	r4,-8(fp)
   30234:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30238:	00000506 	br	30250 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   3023c:	e0bfff17 	ldw	r2,-4(fp)
   30240:	1090000c 	andi	r2,r2,16384
   30244:	10000226 	beq	r2,zero,30250 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   30248:	00bffd44 	movi	r2,-11
   3024c:	00000b06 	br	3027c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30250:	e0bffe17 	ldw	r2,-8(fp)
   30254:	10c00d17 	ldw	r3,52(r2)
   30258:	e0bffe17 	ldw	r2,-8(fp)
   3025c:	10800c17 	ldw	r2,48(r2)
   30260:	18800526 	beq	r3,r2,30278 <altera_avalon_jtag_uart_close+0x54>
   30264:	e0bffe17 	ldw	r2,-8(fp)
   30268:	10c00917 	ldw	r3,36(r2)
   3026c:	e0bffe17 	ldw	r2,-8(fp)
   30270:	10800117 	ldw	r2,4(r2)
   30274:	18bff136 	bltu	r3,r2,3023c <__alt_data_end+0xffff023c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30278:	0005883a 	mov	r2,zero
}
   3027c:	e037883a 	mov	sp,fp
   30280:	df000017 	ldw	fp,0(sp)
   30284:	dec00104 	addi	sp,sp,4
   30288:	f800283a 	ret

0003028c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3028c:	defffa04 	addi	sp,sp,-24
   30290:	df000515 	stw	fp,20(sp)
   30294:	df000504 	addi	fp,sp,20
   30298:	e13ffd15 	stw	r4,-12(fp)
   3029c:	e17ffe15 	stw	r5,-8(fp)
   302a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   302a4:	00bff9c4 	movi	r2,-25
   302a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   302ac:	e0bffe17 	ldw	r2,-8(fp)
   302b0:	10da8060 	cmpeqi	r3,r2,27137
   302b4:	1800031e 	bne	r3,zero,302c4 <altera_avalon_jtag_uart_ioctl+0x38>
   302b8:	109a80a0 	cmpeqi	r2,r2,27138
   302bc:	1000181e 	bne	r2,zero,30320 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   302c0:	00002906 	br	30368 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   302c4:	e0bffd17 	ldw	r2,-12(fp)
   302c8:	10c00117 	ldw	r3,4(r2)
   302cc:	00a00034 	movhi	r2,32768
   302d0:	10bfffc4 	addi	r2,r2,-1
   302d4:	18802126 	beq	r3,r2,3035c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   302d8:	e0bfff17 	ldw	r2,-4(fp)
   302dc:	10800017 	ldw	r2,0(r2)
   302e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   302e4:	e0bffc17 	ldw	r2,-16(fp)
   302e8:	10800090 	cmplti	r2,r2,2
   302ec:	1000061e 	bne	r2,zero,30308 <altera_avalon_jtag_uart_ioctl+0x7c>
   302f0:	e0fffc17 	ldw	r3,-16(fp)
   302f4:	00a00034 	movhi	r2,32768
   302f8:	10bfffc4 	addi	r2,r2,-1
   302fc:	18800226 	beq	r3,r2,30308 <altera_avalon_jtag_uart_ioctl+0x7c>
   30300:	e0bffc17 	ldw	r2,-16(fp)
   30304:	00000206 	br	30310 <altera_avalon_jtag_uart_ioctl+0x84>
   30308:	00a00034 	movhi	r2,32768
   3030c:	10bfff84 	addi	r2,r2,-2
   30310:	e0fffd17 	ldw	r3,-12(fp)
   30314:	18800115 	stw	r2,4(r3)
      rc = 0;
   30318:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3031c:	00000f06 	br	3035c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   30320:	e0bffd17 	ldw	r2,-12(fp)
   30324:	10c00117 	ldw	r3,4(r2)
   30328:	00a00034 	movhi	r2,32768
   3032c:	10bfffc4 	addi	r2,r2,-1
   30330:	18800c26 	beq	r3,r2,30364 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   30334:	e0bffd17 	ldw	r2,-12(fp)
   30338:	10c00917 	ldw	r3,36(r2)
   3033c:	e0bffd17 	ldw	r2,-12(fp)
   30340:	10800117 	ldw	r2,4(r2)
   30344:	1885803a 	cmpltu	r2,r3,r2
   30348:	10c03fcc 	andi	r3,r2,255
   3034c:	e0bfff17 	ldw	r2,-4(fp)
   30350:	10c00015 	stw	r3,0(r2)
      rc = 0;
   30354:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   30358:	00000206 	br	30364 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   3035c:	0001883a 	nop
   30360:	00000106 	br	30368 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   30364:	0001883a 	nop

  default:
    break;
  }

  return rc;
   30368:	e0bffb17 	ldw	r2,-20(fp)
}
   3036c:	e037883a 	mov	sp,fp
   30370:	df000017 	ldw	fp,0(sp)
   30374:	dec00104 	addi	sp,sp,4
   30378:	f800283a 	ret

0003037c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3037c:	defff304 	addi	sp,sp,-52
   30380:	dfc00c15 	stw	ra,48(sp)
   30384:	df000b15 	stw	fp,44(sp)
   30388:	df000b04 	addi	fp,sp,44
   3038c:	e13ffc15 	stw	r4,-16(fp)
   30390:	e17ffd15 	stw	r5,-12(fp)
   30394:	e1bffe15 	stw	r6,-8(fp)
   30398:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   3039c:	e0bffd17 	ldw	r2,-12(fp)
   303a0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   303a4:	00004706 	br	304c4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   303a8:	e0bffc17 	ldw	r2,-16(fp)
   303ac:	10800a17 	ldw	r2,40(r2)
   303b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   303b4:	e0bffc17 	ldw	r2,-16(fp)
   303b8:	10800b17 	ldw	r2,44(r2)
   303bc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   303c0:	e0fff717 	ldw	r3,-36(fp)
   303c4:	e0bff817 	ldw	r2,-32(fp)
   303c8:	18800536 	bltu	r3,r2,303e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   303cc:	e0fff717 	ldw	r3,-36(fp)
   303d0:	e0bff817 	ldw	r2,-32(fp)
   303d4:	1885c83a 	sub	r2,r3,r2
   303d8:	e0bff615 	stw	r2,-40(fp)
   303dc:	00000406 	br	303f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   303e0:	00c20004 	movi	r3,2048
   303e4:	e0bff817 	ldw	r2,-32(fp)
   303e8:	1885c83a 	sub	r2,r3,r2
   303ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   303f0:	e0bff617 	ldw	r2,-40(fp)
   303f4:	10001e26 	beq	r2,zero,30470 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   303f8:	e0fffe17 	ldw	r3,-8(fp)
   303fc:	e0bff617 	ldw	r2,-40(fp)
   30400:	1880022e 	bgeu	r3,r2,3040c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   30404:	e0bffe17 	ldw	r2,-8(fp)
   30408:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   3040c:	e0bffc17 	ldw	r2,-16(fp)
   30410:	10c00e04 	addi	r3,r2,56
   30414:	e0bff817 	ldw	r2,-32(fp)
   30418:	1885883a 	add	r2,r3,r2
   3041c:	e1bff617 	ldw	r6,-40(fp)
   30420:	100b883a 	mov	r5,r2
   30424:	e13ff517 	ldw	r4,-44(fp)
   30428:	00263480 	call	26348 <memcpy>
      ptr   += n;
   3042c:	e0fff517 	ldw	r3,-44(fp)
   30430:	e0bff617 	ldw	r2,-40(fp)
   30434:	1885883a 	add	r2,r3,r2
   30438:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   3043c:	e0fffe17 	ldw	r3,-8(fp)
   30440:	e0bff617 	ldw	r2,-40(fp)
   30444:	1885c83a 	sub	r2,r3,r2
   30448:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3044c:	e0fff817 	ldw	r3,-32(fp)
   30450:	e0bff617 	ldw	r2,-40(fp)
   30454:	1885883a 	add	r2,r3,r2
   30458:	10c1ffcc 	andi	r3,r2,2047
   3045c:	e0bffc17 	ldw	r2,-16(fp)
   30460:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   30464:	e0bffe17 	ldw	r2,-8(fp)
   30468:	00bfcf16 	blt	zero,r2,303a8 <__alt_data_end+0xffff03a8>
   3046c:	00000106 	br	30474 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   30470:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   30474:	e0fff517 	ldw	r3,-44(fp)
   30478:	e0bffd17 	ldw	r2,-12(fp)
   3047c:	1880141e 	bne	r3,r2,304d0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   30480:	e0bfff17 	ldw	r2,-4(fp)
   30484:	1090000c 	andi	r2,r2,16384
   30488:	1000131e 	bne	r2,zero,304d8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3048c:	0001883a 	nop
   30490:	e0bffc17 	ldw	r2,-16(fp)
   30494:	10c00a17 	ldw	r3,40(r2)
   30498:	e0bff717 	ldw	r2,-36(fp)
   3049c:	1880051e 	bne	r3,r2,304b4 <altera_avalon_jtag_uart_read+0x138>
   304a0:	e0bffc17 	ldw	r2,-16(fp)
   304a4:	10c00917 	ldw	r3,36(r2)
   304a8:	e0bffc17 	ldw	r2,-16(fp)
   304ac:	10800117 	ldw	r2,4(r2)
   304b0:	18bff736 	bltu	r3,r2,30490 <__alt_data_end+0xffff0490>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   304b4:	e0bffc17 	ldw	r2,-16(fp)
   304b8:	10c00a17 	ldw	r3,40(r2)
   304bc:	e0bff717 	ldw	r2,-36(fp)
   304c0:	18800726 	beq	r3,r2,304e0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   304c4:	e0bffe17 	ldw	r2,-8(fp)
   304c8:	00bfb716 	blt	zero,r2,303a8 <__alt_data_end+0xffff03a8>
   304cc:	00000506 	br	304e4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   304d0:	0001883a 	nop
   304d4:	00000306 	br	304e4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   304d8:	0001883a 	nop
   304dc:	00000106 	br	304e4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   304e0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   304e4:	e0fff517 	ldw	r3,-44(fp)
   304e8:	e0bffd17 	ldw	r2,-12(fp)
   304ec:	18801826 	beq	r3,r2,30550 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   304f0:	0005303a 	rdctl	r2,status
   304f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   304f8:	e0fffb17 	ldw	r3,-20(fp)
   304fc:	00bfff84 	movi	r2,-2
   30500:	1884703a 	and	r2,r3,r2
   30504:	1001703a 	wrctl	status,r2
  
  return context;
   30508:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   3050c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   30510:	e0bffc17 	ldw	r2,-16(fp)
   30514:	10800817 	ldw	r2,32(r2)
   30518:	10c00054 	ori	r3,r2,1
   3051c:	e0bffc17 	ldw	r2,-16(fp)
   30520:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30524:	e0bffc17 	ldw	r2,-16(fp)
   30528:	10800017 	ldw	r2,0(r2)
   3052c:	10800104 	addi	r2,r2,4
   30530:	1007883a 	mov	r3,r2
   30534:	e0bffc17 	ldw	r2,-16(fp)
   30538:	10800817 	ldw	r2,32(r2)
   3053c:	18800035 	stwio	r2,0(r3)
   30540:	e0bffa17 	ldw	r2,-24(fp)
   30544:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30548:	e0bff917 	ldw	r2,-28(fp)
   3054c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   30550:	e0fff517 	ldw	r3,-44(fp)
   30554:	e0bffd17 	ldw	r2,-12(fp)
   30558:	18800426 	beq	r3,r2,3056c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   3055c:	e0fff517 	ldw	r3,-44(fp)
   30560:	e0bffd17 	ldw	r2,-12(fp)
   30564:	1885c83a 	sub	r2,r3,r2
   30568:	00000606 	br	30584 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   3056c:	e0bfff17 	ldw	r2,-4(fp)
   30570:	1090000c 	andi	r2,r2,16384
   30574:	10000226 	beq	r2,zero,30580 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   30578:	00bffd44 	movi	r2,-11
   3057c:	00000106 	br	30584 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   30580:	00bffec4 	movi	r2,-5
}
   30584:	e037883a 	mov	sp,fp
   30588:	dfc00117 	ldw	ra,4(sp)
   3058c:	df000017 	ldw	fp,0(sp)
   30590:	dec00204 	addi	sp,sp,8
   30594:	f800283a 	ret

00030598 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   30598:	defff304 	addi	sp,sp,-52
   3059c:	dfc00c15 	stw	ra,48(sp)
   305a0:	df000b15 	stw	fp,44(sp)
   305a4:	df000b04 	addi	fp,sp,44
   305a8:	e13ffc15 	stw	r4,-16(fp)
   305ac:	e17ffd15 	stw	r5,-12(fp)
   305b0:	e1bffe15 	stw	r6,-8(fp)
   305b4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   305b8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   305bc:	e0bffd17 	ldw	r2,-12(fp)
   305c0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   305c4:	00003706 	br	306a4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   305c8:	e0bffc17 	ldw	r2,-16(fp)
   305cc:	10800c17 	ldw	r2,48(r2)
   305d0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   305d4:	e0bffc17 	ldw	r2,-16(fp)
   305d8:	10800d17 	ldw	r2,52(r2)
   305dc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   305e0:	e0fff917 	ldw	r3,-28(fp)
   305e4:	e0bff517 	ldw	r2,-44(fp)
   305e8:	1880062e 	bgeu	r3,r2,30604 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   305ec:	e0fff517 	ldw	r3,-44(fp)
   305f0:	e0bff917 	ldw	r2,-28(fp)
   305f4:	1885c83a 	sub	r2,r3,r2
   305f8:	10bfffc4 	addi	r2,r2,-1
   305fc:	e0bff615 	stw	r2,-40(fp)
   30600:	00000b06 	br	30630 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   30604:	e0bff517 	ldw	r2,-44(fp)
   30608:	10000526 	beq	r2,zero,30620 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   3060c:	00c20004 	movi	r3,2048
   30610:	e0bff917 	ldw	r2,-28(fp)
   30614:	1885c83a 	sub	r2,r3,r2
   30618:	e0bff615 	stw	r2,-40(fp)
   3061c:	00000406 	br	30630 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   30620:	00c1ffc4 	movi	r3,2047
   30624:	e0bff917 	ldw	r2,-28(fp)
   30628:	1885c83a 	sub	r2,r3,r2
   3062c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   30630:	e0bff617 	ldw	r2,-40(fp)
   30634:	10001e26 	beq	r2,zero,306b0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   30638:	e0fffe17 	ldw	r3,-8(fp)
   3063c:	e0bff617 	ldw	r2,-40(fp)
   30640:	1880022e 	bgeu	r3,r2,3064c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   30644:	e0bffe17 	ldw	r2,-8(fp)
   30648:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   3064c:	e0bffc17 	ldw	r2,-16(fp)
   30650:	10c20e04 	addi	r3,r2,2104
   30654:	e0bff917 	ldw	r2,-28(fp)
   30658:	1885883a 	add	r2,r3,r2
   3065c:	e1bff617 	ldw	r6,-40(fp)
   30660:	e17ffd17 	ldw	r5,-12(fp)
   30664:	1009883a 	mov	r4,r2
   30668:	00263480 	call	26348 <memcpy>
      ptr   += n;
   3066c:	e0fffd17 	ldw	r3,-12(fp)
   30670:	e0bff617 	ldw	r2,-40(fp)
   30674:	1885883a 	add	r2,r3,r2
   30678:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   3067c:	e0fffe17 	ldw	r3,-8(fp)
   30680:	e0bff617 	ldw	r2,-40(fp)
   30684:	1885c83a 	sub	r2,r3,r2
   30688:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3068c:	e0fff917 	ldw	r3,-28(fp)
   30690:	e0bff617 	ldw	r2,-40(fp)
   30694:	1885883a 	add	r2,r3,r2
   30698:	10c1ffcc 	andi	r3,r2,2047
   3069c:	e0bffc17 	ldw	r2,-16(fp)
   306a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   306a4:	e0bffe17 	ldw	r2,-8(fp)
   306a8:	00bfc716 	blt	zero,r2,305c8 <__alt_data_end+0xffff05c8>
   306ac:	00000106 	br	306b4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   306b0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   306b4:	0005303a 	rdctl	r2,status
   306b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   306bc:	e0fffb17 	ldw	r3,-20(fp)
   306c0:	00bfff84 	movi	r2,-2
   306c4:	1884703a 	and	r2,r3,r2
   306c8:	1001703a 	wrctl	status,r2
  
  return context;
   306cc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   306d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   306d4:	e0bffc17 	ldw	r2,-16(fp)
   306d8:	10800817 	ldw	r2,32(r2)
   306dc:	10c00094 	ori	r3,r2,2
   306e0:	e0bffc17 	ldw	r2,-16(fp)
   306e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   306e8:	e0bffc17 	ldw	r2,-16(fp)
   306ec:	10800017 	ldw	r2,0(r2)
   306f0:	10800104 	addi	r2,r2,4
   306f4:	1007883a 	mov	r3,r2
   306f8:	e0bffc17 	ldw	r2,-16(fp)
   306fc:	10800817 	ldw	r2,32(r2)
   30700:	18800035 	stwio	r2,0(r3)
   30704:	e0bffa17 	ldw	r2,-24(fp)
   30708:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3070c:	e0bff817 	ldw	r2,-32(fp)
   30710:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   30714:	e0bffe17 	ldw	r2,-8(fp)
   30718:	0080100e 	bge	zero,r2,3075c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   3071c:	e0bfff17 	ldw	r2,-4(fp)
   30720:	1090000c 	andi	r2,r2,16384
   30724:	1000101e 	bne	r2,zero,30768 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   30728:	0001883a 	nop
   3072c:	e0bffc17 	ldw	r2,-16(fp)
   30730:	10c00d17 	ldw	r3,52(r2)
   30734:	e0bff517 	ldw	r2,-44(fp)
   30738:	1880051e 	bne	r3,r2,30750 <altera_avalon_jtag_uart_write+0x1b8>
   3073c:	e0bffc17 	ldw	r2,-16(fp)
   30740:	10c00917 	ldw	r3,36(r2)
   30744:	e0bffc17 	ldw	r2,-16(fp)
   30748:	10800117 	ldw	r2,4(r2)
   3074c:	18bff736 	bltu	r3,r2,3072c <__alt_data_end+0xffff072c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   30750:	e0bffc17 	ldw	r2,-16(fp)
   30754:	10800917 	ldw	r2,36(r2)
   30758:	1000051e 	bne	r2,zero,30770 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   3075c:	e0bffe17 	ldw	r2,-8(fp)
   30760:	00bfd016 	blt	zero,r2,306a4 <__alt_data_end+0xffff06a4>
   30764:	00000306 	br	30774 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   30768:	0001883a 	nop
   3076c:	00000106 	br	30774 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   30770:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   30774:	e0fffd17 	ldw	r3,-12(fp)
   30778:	e0bff717 	ldw	r2,-36(fp)
   3077c:	18800426 	beq	r3,r2,30790 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   30780:	e0fffd17 	ldw	r3,-12(fp)
   30784:	e0bff717 	ldw	r2,-36(fp)
   30788:	1885c83a 	sub	r2,r3,r2
   3078c:	00000606 	br	307a8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   30790:	e0bfff17 	ldw	r2,-4(fp)
   30794:	1090000c 	andi	r2,r2,16384
   30798:	10000226 	beq	r2,zero,307a4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   3079c:	00bffd44 	movi	r2,-11
   307a0:	00000106 	br	307a8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   307a4:	00bffec4 	movi	r2,-5
}
   307a8:	e037883a 	mov	sp,fp
   307ac:	dfc00117 	ldw	ra,4(sp)
   307b0:	df000017 	ldw	fp,0(sp)
   307b4:	dec00204 	addi	sp,sp,8
   307b8:	f800283a 	ret

000307bc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   307bc:	defffa04 	addi	sp,sp,-24
   307c0:	dfc00515 	stw	ra,20(sp)
   307c4:	df000415 	stw	fp,16(sp)
   307c8:	df000404 	addi	fp,sp,16
   307cc:	e13ffd15 	stw	r4,-12(fp)
   307d0:	e17ffe15 	stw	r5,-8(fp)
   307d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   307d8:	e0bffd17 	ldw	r2,-12(fp)
   307dc:	10800017 	ldw	r2,0(r2)
   307e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   307e4:	e0bffc17 	ldw	r2,-16(fp)
   307e8:	10c00a04 	addi	r3,r2,40
   307ec:	e0bffd17 	ldw	r2,-12(fp)
   307f0:	10800217 	ldw	r2,8(r2)
   307f4:	100f883a 	mov	r7,r2
   307f8:	e1bfff17 	ldw	r6,-4(fp)
   307fc:	e17ffe17 	ldw	r5,-8(fp)
   30800:	1809883a 	mov	r4,r3
   30804:	0030cd00 	call	30cd0 <altera_avalon_uart_read>
      fd->fd_flags);
}
   30808:	e037883a 	mov	sp,fp
   3080c:	dfc00117 	ldw	ra,4(sp)
   30810:	df000017 	ldw	fp,0(sp)
   30814:	dec00204 	addi	sp,sp,8
   30818:	f800283a 	ret

0003081c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   3081c:	defffa04 	addi	sp,sp,-24
   30820:	dfc00515 	stw	ra,20(sp)
   30824:	df000415 	stw	fp,16(sp)
   30828:	df000404 	addi	fp,sp,16
   3082c:	e13ffd15 	stw	r4,-12(fp)
   30830:	e17ffe15 	stw	r5,-8(fp)
   30834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30838:	e0bffd17 	ldw	r2,-12(fp)
   3083c:	10800017 	ldw	r2,0(r2)
   30840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   30844:	e0bffc17 	ldw	r2,-16(fp)
   30848:	10c00a04 	addi	r3,r2,40
   3084c:	e0bffd17 	ldw	r2,-12(fp)
   30850:	10800217 	ldw	r2,8(r2)
   30854:	100f883a 	mov	r7,r2
   30858:	e1bfff17 	ldw	r6,-4(fp)
   3085c:	e17ffe17 	ldw	r5,-8(fp)
   30860:	1809883a 	mov	r4,r3
   30864:	0030ee80 	call	30ee8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   30868:	e037883a 	mov	sp,fp
   3086c:	dfc00117 	ldw	ra,4(sp)
   30870:	df000017 	ldw	fp,0(sp)
   30874:	dec00204 	addi	sp,sp,8
   30878:	f800283a 	ret

0003087c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   3087c:	defffc04 	addi	sp,sp,-16
   30880:	dfc00315 	stw	ra,12(sp)
   30884:	df000215 	stw	fp,8(sp)
   30888:	df000204 	addi	fp,sp,8
   3088c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30890:	e0bfff17 	ldw	r2,-4(fp)
   30894:	10800017 	ldw	r2,0(r2)
   30898:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   3089c:	e0bffe17 	ldw	r2,-8(fp)
   308a0:	10c00a04 	addi	r3,r2,40
   308a4:	e0bfff17 	ldw	r2,-4(fp)
   308a8:	10800217 	ldw	r2,8(r2)
   308ac:	100b883a 	mov	r5,r2
   308b0:	1809883a 	mov	r4,r3
   308b4:	0030c400 	call	30c40 <altera_avalon_uart_close>
}
   308b8:	e037883a 	mov	sp,fp
   308bc:	dfc00117 	ldw	ra,4(sp)
   308c0:	df000017 	ldw	fp,0(sp)
   308c4:	dec00204 	addi	sp,sp,8
   308c8:	f800283a 	ret

000308cc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   308cc:	defff804 	addi	sp,sp,-32
   308d0:	dfc00715 	stw	ra,28(sp)
   308d4:	df000615 	stw	fp,24(sp)
   308d8:	df000604 	addi	fp,sp,24
   308dc:	e13ffd15 	stw	r4,-12(fp)
   308e0:	e17ffe15 	stw	r5,-8(fp)
   308e4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   308e8:	e0bffd17 	ldw	r2,-12(fp)
   308ec:	10800017 	ldw	r2,0(r2)
   308f0:	e0bffb15 	stw	r2,-20(fp)
   308f4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   308f8:	1000041e 	bne	r2,zero,3090c <altera_avalon_uart_init+0x40>
   308fc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   30900:	1000021e 	bne	r2,zero,3090c <altera_avalon_uart_init+0x40>
   30904:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   30908:	10000226 	beq	r2,zero,30914 <altera_avalon_uart_init+0x48>
   3090c:	00800044 	movi	r2,1
   30910:	00000106 	br	30918 <altera_avalon_uart_init+0x4c>
   30914:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   30918:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   3091c:	e0bffc17 	ldw	r2,-16(fp)
   30920:	10000f1e 	bne	r2,zero,30960 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   30924:	e0bffd17 	ldw	r2,-12(fp)
   30928:	00c32004 	movi	r3,3200
   3092c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   30930:	e0bffb17 	ldw	r2,-20(fp)
   30934:	10800304 	addi	r2,r2,12
   30938:	e0fffd17 	ldw	r3,-12(fp)
   3093c:	18c00117 	ldw	r3,4(r3)
   30940:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   30944:	d8000015 	stw	zero,0(sp)
   30948:	e1fffd17 	ldw	r7,-12(fp)
   3094c:	018000f4 	movhi	r6,3
   30950:	31825e04 	addi	r6,r6,2424
   30954:	e17fff17 	ldw	r5,-4(fp)
   30958:	e13ffe17 	ldw	r4,-8(fp)
   3095c:	00315880 	call	31588 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   30960:	0001883a 	nop
   30964:	e037883a 	mov	sp,fp
   30968:	dfc00117 	ldw	ra,4(sp)
   3096c:	df000017 	ldw	fp,0(sp)
   30970:	dec00204 	addi	sp,sp,8
   30974:	f800283a 	ret

00030978 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   30978:	defffa04 	addi	sp,sp,-24
   3097c:	dfc00515 	stw	ra,20(sp)
   30980:	df000415 	stw	fp,16(sp)
   30984:	df000404 	addi	fp,sp,16
   30988:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   3098c:	e0bfff17 	ldw	r2,-4(fp)
   30990:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   30994:	e0bffc17 	ldw	r2,-16(fp)
   30998:	10800017 	ldw	r2,0(r2)
   3099c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   309a0:	e0bffd17 	ldw	r2,-12(fp)
   309a4:	10800204 	addi	r2,r2,8
   309a8:	10800037 	ldwio	r2,0(r2)
   309ac:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   309b0:	e0bffd17 	ldw	r2,-12(fp)
   309b4:	10800204 	addi	r2,r2,8
   309b8:	0007883a 	mov	r3,zero
   309bc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   309c0:	e0bffd17 	ldw	r2,-12(fp)
   309c4:	10800204 	addi	r2,r2,8
   309c8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   309cc:	e0bffe17 	ldw	r2,-8(fp)
   309d0:	1080200c 	andi	r2,r2,128
   309d4:	10000326 	beq	r2,zero,309e4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   309d8:	e17ffe17 	ldw	r5,-8(fp)
   309dc:	e13ffc17 	ldw	r4,-16(fp)
   309e0:	0030a140 	call	30a14 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   309e4:	e0bffe17 	ldw	r2,-8(fp)
   309e8:	1081100c 	andi	r2,r2,1088
   309ec:	10000326 	beq	r2,zero,309fc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   309f0:	e17ffe17 	ldw	r5,-8(fp)
   309f4:	e13ffc17 	ldw	r4,-16(fp)
   309f8:	0030af80 	call	30af8 <altera_avalon_uart_txirq>
  }
  

}
   309fc:	0001883a 	nop
   30a00:	e037883a 	mov	sp,fp
   30a04:	dfc00117 	ldw	ra,4(sp)
   30a08:	df000017 	ldw	fp,0(sp)
   30a0c:	dec00204 	addi	sp,sp,8
   30a10:	f800283a 	ret

00030a14 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   30a14:	defffc04 	addi	sp,sp,-16
   30a18:	df000315 	stw	fp,12(sp)
   30a1c:	df000304 	addi	fp,sp,12
   30a20:	e13ffe15 	stw	r4,-8(fp)
   30a24:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   30a28:	e0bfff17 	ldw	r2,-4(fp)
   30a2c:	108000cc 	andi	r2,r2,3
   30a30:	10002c1e 	bne	r2,zero,30ae4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   30a34:	e0bffe17 	ldw	r2,-8(fp)
   30a38:	10800317 	ldw	r2,12(r2)
   30a3c:	e0bffe17 	ldw	r2,-8(fp)
   30a40:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30a44:	e0bffe17 	ldw	r2,-8(fp)
   30a48:	10800317 	ldw	r2,12(r2)
   30a4c:	10800044 	addi	r2,r2,1
   30a50:	10800fcc 	andi	r2,r2,63
   30a54:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   30a58:	e0bffe17 	ldw	r2,-8(fp)
   30a5c:	10800317 	ldw	r2,12(r2)
   30a60:	e0fffe17 	ldw	r3,-8(fp)
   30a64:	18c00017 	ldw	r3,0(r3)
   30a68:	18c00037 	ldwio	r3,0(r3)
   30a6c:	1809883a 	mov	r4,r3
   30a70:	e0fffe17 	ldw	r3,-8(fp)
   30a74:	1885883a 	add	r2,r3,r2
   30a78:	10800704 	addi	r2,r2,28
   30a7c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   30a80:	e0bffe17 	ldw	r2,-8(fp)
   30a84:	e0fffd17 	ldw	r3,-12(fp)
   30a88:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30a8c:	e0bffe17 	ldw	r2,-8(fp)
   30a90:	10800317 	ldw	r2,12(r2)
   30a94:	10800044 	addi	r2,r2,1
   30a98:	10800fcc 	andi	r2,r2,63
   30a9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   30aa0:	e0bffe17 	ldw	r2,-8(fp)
   30aa4:	10c00217 	ldw	r3,8(r2)
   30aa8:	e0bffd17 	ldw	r2,-12(fp)
   30aac:	18800e1e 	bne	r3,r2,30ae8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30ab0:	e0bffe17 	ldw	r2,-8(fp)
   30ab4:	10c00117 	ldw	r3,4(r2)
   30ab8:	00bfdfc4 	movi	r2,-129
   30abc:	1886703a 	and	r3,r3,r2
   30ac0:	e0bffe17 	ldw	r2,-8(fp)
   30ac4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   30ac8:	e0bffe17 	ldw	r2,-8(fp)
   30acc:	10800017 	ldw	r2,0(r2)
   30ad0:	10800304 	addi	r2,r2,12
   30ad4:	e0fffe17 	ldw	r3,-8(fp)
   30ad8:	18c00117 	ldw	r3,4(r3)
   30adc:	10c00035 	stwio	r3,0(r2)
   30ae0:	00000106 	br	30ae8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   30ae4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   30ae8:	e037883a 	mov	sp,fp
   30aec:	df000017 	ldw	fp,0(sp)
   30af0:	dec00104 	addi	sp,sp,4
   30af4:	f800283a 	ret

00030af8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   30af8:	defffb04 	addi	sp,sp,-20
   30afc:	df000415 	stw	fp,16(sp)
   30b00:	df000404 	addi	fp,sp,16
   30b04:	e13ffc15 	stw	r4,-16(fp)
   30b08:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   30b0c:	e0bffc17 	ldw	r2,-16(fp)
   30b10:	10c00417 	ldw	r3,16(r2)
   30b14:	e0bffc17 	ldw	r2,-16(fp)
   30b18:	10800517 	ldw	r2,20(r2)
   30b1c:	18803226 	beq	r3,r2,30be8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   30b20:	e0bffc17 	ldw	r2,-16(fp)
   30b24:	10800617 	ldw	r2,24(r2)
   30b28:	1080008c 	andi	r2,r2,2
   30b2c:	10000326 	beq	r2,zero,30b3c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   30b30:	e0bffd17 	ldw	r2,-12(fp)
   30b34:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   30b38:	10001d26 	beq	r2,zero,30bb0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   30b3c:	e0bffc17 	ldw	r2,-16(fp)
   30b40:	10800417 	ldw	r2,16(r2)
   30b44:	e0bffc17 	ldw	r2,-16(fp)
   30b48:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   30b4c:	e0bffc17 	ldw	r2,-16(fp)
   30b50:	10800017 	ldw	r2,0(r2)
   30b54:	10800104 	addi	r2,r2,4
   30b58:	e0fffc17 	ldw	r3,-16(fp)
   30b5c:	18c00417 	ldw	r3,16(r3)
   30b60:	e13ffc17 	ldw	r4,-16(fp)
   30b64:	20c7883a 	add	r3,r4,r3
   30b68:	18c01704 	addi	r3,r3,92
   30b6c:	18c00003 	ldbu	r3,0(r3)
   30b70:	18c03fcc 	andi	r3,r3,255
   30b74:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   30b78:	e0bffc17 	ldw	r2,-16(fp)
   30b7c:	10800417 	ldw	r2,16(r2)
   30b80:	10800044 	addi	r2,r2,1
   30b84:	e0fffc17 	ldw	r3,-16(fp)
   30b88:	18800415 	stw	r2,16(r3)
   30b8c:	10c00fcc 	andi	r3,r2,63
   30b90:	e0bffc17 	ldw	r2,-16(fp)
   30b94:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30b98:	e0bffc17 	ldw	r2,-16(fp)
   30b9c:	10800117 	ldw	r2,4(r2)
   30ba0:	10c01014 	ori	r3,r2,64
   30ba4:	e0bffc17 	ldw	r2,-16(fp)
   30ba8:	10c00115 	stw	r3,4(r2)
   30bac:	00000e06 	br	30be8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   30bb0:	e0bffc17 	ldw	r2,-16(fp)
   30bb4:	10800017 	ldw	r2,0(r2)
   30bb8:	10800204 	addi	r2,r2,8
   30bbc:	10800037 	ldwio	r2,0(r2)
   30bc0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   30bc4:	e0bffd17 	ldw	r2,-12(fp)
   30bc8:	1082000c 	andi	r2,r2,2048
   30bcc:	1000061e 	bne	r2,zero,30be8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30bd0:	e0bffc17 	ldw	r2,-16(fp)
   30bd4:	10c00117 	ldw	r3,4(r2)
   30bd8:	00bfefc4 	movi	r2,-65
   30bdc:	1886703a 	and	r3,r3,r2
   30be0:	e0bffc17 	ldw	r2,-16(fp)
   30be4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   30be8:	e0bffc17 	ldw	r2,-16(fp)
   30bec:	10c00417 	ldw	r3,16(r2)
   30bf0:	e0bffc17 	ldw	r2,-16(fp)
   30bf4:	10800517 	ldw	r2,20(r2)
   30bf8:	1880061e 	bne	r3,r2,30c14 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30bfc:	e0bffc17 	ldw	r2,-16(fp)
   30c00:	10c00117 	ldw	r3,4(r2)
   30c04:	00beefc4 	movi	r2,-1089
   30c08:	1886703a 	and	r3,r3,r2
   30c0c:	e0bffc17 	ldw	r2,-16(fp)
   30c10:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30c14:	e0bffc17 	ldw	r2,-16(fp)
   30c18:	10800017 	ldw	r2,0(r2)
   30c1c:	10800304 	addi	r2,r2,12
   30c20:	e0fffc17 	ldw	r3,-16(fp)
   30c24:	18c00117 	ldw	r3,4(r3)
   30c28:	10c00035 	stwio	r3,0(r2)
}
   30c2c:	0001883a 	nop
   30c30:	e037883a 	mov	sp,fp
   30c34:	df000017 	ldw	fp,0(sp)
   30c38:	dec00104 	addi	sp,sp,4
   30c3c:	f800283a 	ret

00030c40 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   30c40:	defffd04 	addi	sp,sp,-12
   30c44:	df000215 	stw	fp,8(sp)
   30c48:	df000204 	addi	fp,sp,8
   30c4c:	e13ffe15 	stw	r4,-8(fp)
   30c50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30c54:	00000506 	br	30c6c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   30c58:	e0bfff17 	ldw	r2,-4(fp)
   30c5c:	1090000c 	andi	r2,r2,16384
   30c60:	10000226 	beq	r2,zero,30c6c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   30c64:	00bffd44 	movi	r2,-11
   30c68:	00000606 	br	30c84 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30c6c:	e0bffe17 	ldw	r2,-8(fp)
   30c70:	10c00417 	ldw	r3,16(r2)
   30c74:	e0bffe17 	ldw	r2,-8(fp)
   30c78:	10800517 	ldw	r2,20(r2)
   30c7c:	18bff61e 	bne	r3,r2,30c58 <__alt_data_end+0xffff0c58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30c80:	0005883a 	mov	r2,zero
}
   30c84:	e037883a 	mov	sp,fp
   30c88:	df000017 	ldw	fp,0(sp)
   30c8c:	dec00104 	addi	sp,sp,4
   30c90:	f800283a 	ret

00030c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30c94:	defffe04 	addi	sp,sp,-8
   30c98:	dfc00115 	stw	ra,4(sp)
   30c9c:	df000015 	stw	fp,0(sp)
   30ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30ca4:	d0a00b17 	ldw	r2,-32724(gp)
   30ca8:	10000326 	beq	r2,zero,30cb8 <alt_get_errno+0x24>
   30cac:	d0a00b17 	ldw	r2,-32724(gp)
   30cb0:	103ee83a 	callr	r2
   30cb4:	00000106 	br	30cbc <alt_get_errno+0x28>
   30cb8:	d0a71404 	addi	r2,gp,-25520
}
   30cbc:	e037883a 	mov	sp,fp
   30cc0:	dfc00117 	ldw	ra,4(sp)
   30cc4:	df000017 	ldw	fp,0(sp)
   30cc8:	dec00204 	addi	sp,sp,8
   30ccc:	f800283a 	ret

00030cd0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   30cd0:	defff204 	addi	sp,sp,-56
   30cd4:	dfc00d15 	stw	ra,52(sp)
   30cd8:	df000c15 	stw	fp,48(sp)
   30cdc:	df000c04 	addi	fp,sp,48
   30ce0:	e13ffc15 	stw	r4,-16(fp)
   30ce4:	e17ffd15 	stw	r5,-12(fp)
   30ce8:	e1bffe15 	stw	r6,-8(fp)
   30cec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   30cf0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   30cf4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   30cf8:	e0bfff17 	ldw	r2,-4(fp)
   30cfc:	1090000c 	andi	r2,r2,16384
   30d00:	1005003a 	cmpeq	r2,r2,zero
   30d04:	10803fcc 	andi	r2,r2,255
   30d08:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30d0c:	00001306 	br	30d5c <altera_avalon_uart_read+0x8c>
    {
      count++;
   30d10:	e0bff517 	ldw	r2,-44(fp)
   30d14:	10800044 	addi	r2,r2,1
   30d18:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   30d1c:	e0bffd17 	ldw	r2,-12(fp)
   30d20:	10c00044 	addi	r3,r2,1
   30d24:	e0fffd15 	stw	r3,-12(fp)
   30d28:	e0fffc17 	ldw	r3,-16(fp)
   30d2c:	18c00217 	ldw	r3,8(r3)
   30d30:	e13ffc17 	ldw	r4,-16(fp)
   30d34:	20c7883a 	add	r3,r4,r3
   30d38:	18c00704 	addi	r3,r3,28
   30d3c:	18c00003 	ldbu	r3,0(r3)
   30d40:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   30d44:	e0bffc17 	ldw	r2,-16(fp)
   30d48:	10800217 	ldw	r2,8(r2)
   30d4c:	10800044 	addi	r2,r2,1
   30d50:	10c00fcc 	andi	r3,r2,63
   30d54:	e0bffc17 	ldw	r2,-16(fp)
   30d58:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30d5c:	e0fff517 	ldw	r3,-44(fp)
   30d60:	e0bffe17 	ldw	r2,-8(fp)
   30d64:	1880050e 	bge	r3,r2,30d7c <altera_avalon_uart_read+0xac>
   30d68:	e0bffc17 	ldw	r2,-16(fp)
   30d6c:	10c00217 	ldw	r3,8(r2)
   30d70:	e0bffc17 	ldw	r2,-16(fp)
   30d74:	10800317 	ldw	r2,12(r2)
   30d78:	18bfe51e 	bne	r3,r2,30d10 <__alt_data_end+0xffff0d10>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30d7c:	e0bff517 	ldw	r2,-44(fp)
   30d80:	1000251e 	bne	r2,zero,30e18 <altera_avalon_uart_read+0x148>
   30d84:	e0bffc17 	ldw	r2,-16(fp)
   30d88:	10c00217 	ldw	r3,8(r2)
   30d8c:	e0bffc17 	ldw	r2,-16(fp)
   30d90:	10800317 	ldw	r2,12(r2)
   30d94:	1880201e 	bne	r3,r2,30e18 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   30d98:	e0bff617 	ldw	r2,-40(fp)
   30d9c:	1000071e 	bne	r2,zero,30dbc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   30da0:	0030c940 	call	30c94 <alt_get_errno>
   30da4:	1007883a 	mov	r3,r2
   30da8:	008002c4 	movi	r2,11
   30dac:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   30db0:	00800044 	movi	r2,1
   30db4:	e0bff405 	stb	r2,-48(fp)
        break;
   30db8:	00001b06 	br	30e28 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30dbc:	0005303a 	rdctl	r2,status
   30dc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30dc4:	e0fff917 	ldw	r3,-28(fp)
   30dc8:	00bfff84 	movi	r2,-2
   30dcc:	1884703a 	and	r2,r3,r2
   30dd0:	1001703a 	wrctl	status,r2
  
  return context;
   30dd4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   30dd8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30ddc:	e0bffc17 	ldw	r2,-16(fp)
   30de0:	10800117 	ldw	r2,4(r2)
   30de4:	10c02014 	ori	r3,r2,128
   30de8:	e0bffc17 	ldw	r2,-16(fp)
   30dec:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30df0:	e0bffc17 	ldw	r2,-16(fp)
   30df4:	10800017 	ldw	r2,0(r2)
   30df8:	10800304 	addi	r2,r2,12
   30dfc:	e0fffc17 	ldw	r3,-16(fp)
   30e00:	18c00117 	ldw	r3,4(r3)
   30e04:	10c00035 	stwio	r3,0(r2)
   30e08:	e0bff817 	ldw	r2,-32(fp)
   30e0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30e10:	e0bffa17 	ldw	r2,-24(fp)
   30e14:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   30e18:	e0bff517 	ldw	r2,-44(fp)
   30e1c:	1000021e 	bne	r2,zero,30e28 <altera_avalon_uart_read+0x158>
   30e20:	e0bffe17 	ldw	r2,-8(fp)
   30e24:	103fcd1e 	bne	r2,zero,30d5c <__alt_data_end+0xffff0d5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30e28:	0005303a 	rdctl	r2,status
   30e2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30e30:	e0fffb17 	ldw	r3,-20(fp)
   30e34:	00bfff84 	movi	r2,-2
   30e38:	1884703a 	and	r2,r3,r2
   30e3c:	1001703a 	wrctl	status,r2
  
  return context;
   30e40:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   30e44:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30e48:	e0bffc17 	ldw	r2,-16(fp)
   30e4c:	10800117 	ldw	r2,4(r2)
   30e50:	10c02014 	ori	r3,r2,128
   30e54:	e0bffc17 	ldw	r2,-16(fp)
   30e58:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30e5c:	e0bffc17 	ldw	r2,-16(fp)
   30e60:	10800017 	ldw	r2,0(r2)
   30e64:	10800304 	addi	r2,r2,12
   30e68:	e0fffc17 	ldw	r3,-16(fp)
   30e6c:	18c00117 	ldw	r3,4(r3)
   30e70:	10c00035 	stwio	r3,0(r2)
   30e74:	e0bff817 	ldw	r2,-32(fp)
   30e78:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30e7c:	e0bff717 	ldw	r2,-36(fp)
   30e80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   30e84:	e0bff403 	ldbu	r2,-48(fp)
   30e88:	10000226 	beq	r2,zero,30e94 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   30e8c:	00bffd44 	movi	r2,-11
   30e90:	00000106 	br	30e98 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   30e94:	e0bff517 	ldw	r2,-44(fp)
  }
}
   30e98:	e037883a 	mov	sp,fp
   30e9c:	dfc00117 	ldw	ra,4(sp)
   30ea0:	df000017 	ldw	fp,0(sp)
   30ea4:	dec00204 	addi	sp,sp,8
   30ea8:	f800283a 	ret

00030eac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30eac:	defffe04 	addi	sp,sp,-8
   30eb0:	dfc00115 	stw	ra,4(sp)
   30eb4:	df000015 	stw	fp,0(sp)
   30eb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30ebc:	d0a00b17 	ldw	r2,-32724(gp)
   30ec0:	10000326 	beq	r2,zero,30ed0 <alt_get_errno+0x24>
   30ec4:	d0a00b17 	ldw	r2,-32724(gp)
   30ec8:	103ee83a 	callr	r2
   30ecc:	00000106 	br	30ed4 <alt_get_errno+0x28>
   30ed0:	d0a71404 	addi	r2,gp,-25520
}
   30ed4:	e037883a 	mov	sp,fp
   30ed8:	dfc00117 	ldw	ra,4(sp)
   30edc:	df000017 	ldw	fp,0(sp)
   30ee0:	dec00204 	addi	sp,sp,8
   30ee4:	f800283a 	ret

00030ee8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   30ee8:	defff204 	addi	sp,sp,-56
   30eec:	dfc00d15 	stw	ra,52(sp)
   30ef0:	df000c15 	stw	fp,48(sp)
   30ef4:	df000c04 	addi	fp,sp,48
   30ef8:	e13ffc15 	stw	r4,-16(fp)
   30efc:	e17ffd15 	stw	r5,-12(fp)
   30f00:	e1bffe15 	stw	r6,-8(fp)
   30f04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   30f08:	e0bffe17 	ldw	r2,-8(fp)
   30f0c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   30f10:	e0bfff17 	ldw	r2,-4(fp)
   30f14:	1090000c 	andi	r2,r2,16384
   30f18:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   30f1c:	00003c06 	br	31010 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30f20:	e0bffc17 	ldw	r2,-16(fp)
   30f24:	10800517 	ldw	r2,20(r2)
   30f28:	10800044 	addi	r2,r2,1
   30f2c:	10800fcc 	andi	r2,r2,63
   30f30:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   30f34:	e0bffc17 	ldw	r2,-16(fp)
   30f38:	10c00417 	ldw	r3,16(r2)
   30f3c:	e0bff717 	ldw	r2,-36(fp)
   30f40:	1880221e 	bne	r3,r2,30fcc <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   30f44:	e0bff517 	ldw	r2,-44(fp)
   30f48:	10000526 	beq	r2,zero,30f60 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   30f4c:	0030eac0 	call	30eac <alt_get_errno>
   30f50:	1007883a 	mov	r3,r2
   30f54:	008002c4 	movi	r2,11
   30f58:	18800015 	stw	r2,0(r3)
        break;
   30f5c:	00002e06 	br	31018 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30f60:	0005303a 	rdctl	r2,status
   30f64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30f68:	e0fff917 	ldw	r3,-28(fp)
   30f6c:	00bfff84 	movi	r2,-2
   30f70:	1884703a 	and	r2,r3,r2
   30f74:	1001703a 	wrctl	status,r2
  
  return context;
   30f78:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   30f7c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30f80:	e0bffc17 	ldw	r2,-16(fp)
   30f84:	10800117 	ldw	r2,4(r2)
   30f88:	10c11014 	ori	r3,r2,1088
   30f8c:	e0bffc17 	ldw	r2,-16(fp)
   30f90:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30f94:	e0bffc17 	ldw	r2,-16(fp)
   30f98:	10800017 	ldw	r2,0(r2)
   30f9c:	10800304 	addi	r2,r2,12
   30fa0:	e0fffc17 	ldw	r3,-16(fp)
   30fa4:	18c00117 	ldw	r3,4(r3)
   30fa8:	10c00035 	stwio	r3,0(r2)
   30fac:	e0bff817 	ldw	r2,-32(fp)
   30fb0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30fb4:	e0bff617 	ldw	r2,-40(fp)
   30fb8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   30fbc:	e0bffc17 	ldw	r2,-16(fp)
   30fc0:	10c00417 	ldw	r3,16(r2)
   30fc4:	e0bff717 	ldw	r2,-36(fp)
   30fc8:	18bffc26 	beq	r3,r2,30fbc <__alt_data_end+0xffff0fbc>
      }
    }

    count--;
   30fcc:	e0bff417 	ldw	r2,-48(fp)
   30fd0:	10bfffc4 	addi	r2,r2,-1
   30fd4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   30fd8:	e0bffc17 	ldw	r2,-16(fp)
   30fdc:	10c00517 	ldw	r3,20(r2)
   30fe0:	e0bffd17 	ldw	r2,-12(fp)
   30fe4:	11000044 	addi	r4,r2,1
   30fe8:	e13ffd15 	stw	r4,-12(fp)
   30fec:	10800003 	ldbu	r2,0(r2)
   30ff0:	1009883a 	mov	r4,r2
   30ff4:	e0bffc17 	ldw	r2,-16(fp)
   30ff8:	10c5883a 	add	r2,r2,r3
   30ffc:	10801704 	addi	r2,r2,92
   31000:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   31004:	e0bffc17 	ldw	r2,-16(fp)
   31008:	e0fff717 	ldw	r3,-36(fp)
   3100c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   31010:	e0bff417 	ldw	r2,-48(fp)
   31014:	103fc21e 	bne	r2,zero,30f20 <__alt_data_end+0xffff0f20>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31018:	0005303a 	rdctl	r2,status
   3101c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31020:	e0fffb17 	ldw	r3,-20(fp)
   31024:	00bfff84 	movi	r2,-2
   31028:	1884703a 	and	r2,r3,r2
   3102c:	1001703a 	wrctl	status,r2
  
  return context;
   31030:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   31034:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31038:	e0bffc17 	ldw	r2,-16(fp)
   3103c:	10800117 	ldw	r2,4(r2)
   31040:	10c11014 	ori	r3,r2,1088
   31044:	e0bffc17 	ldw	r2,-16(fp)
   31048:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   3104c:	e0bffc17 	ldw	r2,-16(fp)
   31050:	10800017 	ldw	r2,0(r2)
   31054:	10800304 	addi	r2,r2,12
   31058:	e0fffc17 	ldw	r3,-16(fp)
   3105c:	18c00117 	ldw	r3,4(r3)
   31060:	10c00035 	stwio	r3,0(r2)
   31064:	e0bff817 	ldw	r2,-32(fp)
   31068:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3106c:	e0bffa17 	ldw	r2,-24(fp)
   31070:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   31074:	e0fffe17 	ldw	r3,-8(fp)
   31078:	e0bff417 	ldw	r2,-48(fp)
   3107c:	1885c83a 	sub	r2,r3,r2
}
   31080:	e037883a 	mov	sp,fp
   31084:	dfc00117 	ldw	ra,4(sp)
   31088:	df000017 	ldw	fp,0(sp)
   3108c:	dec00204 	addi	sp,sp,8
   31090:	f800283a 	ret

00031094 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   31094:	defff504 	addi	sp,sp,-44
   31098:	df000a15 	stw	fp,40(sp)
   3109c:	df000a04 	addi	fp,sp,40
   310a0:	e13ffc15 	stw	r4,-16(fp)
   310a4:	e17ffd15 	stw	r5,-12(fp)
   310a8:	e1bffe15 	stw	r6,-8(fp)
   310ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   310b0:	e03ff615 	stw	zero,-40(fp)
   310b4:	d0a71917 	ldw	r2,-25500(gp)
  
  if (alt_ticks_per_second ())
   310b8:	10003c26 	beq	r2,zero,311ac <alt_alarm_start+0x118>
  {
    if (alarm)
   310bc:	e0bffc17 	ldw	r2,-16(fp)
   310c0:	10003826 	beq	r2,zero,311a4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   310c4:	e0bffc17 	ldw	r2,-16(fp)
   310c8:	e0fffe17 	ldw	r3,-8(fp)
   310cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   310d0:	e0bffc17 	ldw	r2,-16(fp)
   310d4:	e0ffff17 	ldw	r3,-4(fp)
   310d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   310dc:	0005303a 	rdctl	r2,status
   310e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   310e4:	e0fff917 	ldw	r3,-28(fp)
   310e8:	00bfff84 	movi	r2,-2
   310ec:	1884703a 	and	r2,r3,r2
   310f0:	1001703a 	wrctl	status,r2
  
  return context;
   310f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   310f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   310fc:	d0a71a17 	ldw	r2,-25496(gp)
      
      current_nticks = alt_nticks();
   31100:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   31104:	e0fffd17 	ldw	r3,-12(fp)
   31108:	e0bff617 	ldw	r2,-40(fp)
   3110c:	1885883a 	add	r2,r3,r2
   31110:	10c00044 	addi	r3,r2,1
   31114:	e0bffc17 	ldw	r2,-16(fp)
   31118:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   3111c:	e0bffc17 	ldw	r2,-16(fp)
   31120:	10c00217 	ldw	r3,8(r2)
   31124:	e0bff617 	ldw	r2,-40(fp)
   31128:	1880042e 	bgeu	r3,r2,3113c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   3112c:	e0bffc17 	ldw	r2,-16(fp)
   31130:	00c00044 	movi	r3,1
   31134:	10c00405 	stb	r3,16(r2)
   31138:	00000206 	br	31144 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   3113c:	e0bffc17 	ldw	r2,-16(fp)
   31140:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   31144:	e0bffc17 	ldw	r2,-16(fp)
   31148:	d0e01004 	addi	r3,gp,-32704
   3114c:	e0fffa15 	stw	r3,-24(fp)
   31150:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   31154:	e0bffb17 	ldw	r2,-20(fp)
   31158:	e0fffa17 	ldw	r3,-24(fp)
   3115c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   31160:	e0bffa17 	ldw	r2,-24(fp)
   31164:	10c00017 	ldw	r3,0(r2)
   31168:	e0bffb17 	ldw	r2,-20(fp)
   3116c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   31170:	e0bffa17 	ldw	r2,-24(fp)
   31174:	10800017 	ldw	r2,0(r2)
   31178:	e0fffb17 	ldw	r3,-20(fp)
   3117c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   31180:	e0bffa17 	ldw	r2,-24(fp)
   31184:	e0fffb17 	ldw	r3,-20(fp)
   31188:	10c00015 	stw	r3,0(r2)
   3118c:	e0bff817 	ldw	r2,-32(fp)
   31190:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31194:	e0bff717 	ldw	r2,-36(fp)
   31198:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   3119c:	0005883a 	mov	r2,zero
   311a0:	00000306 	br	311b0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   311a4:	00bffa84 	movi	r2,-22
   311a8:	00000106 	br	311b0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   311ac:	00bfde84 	movi	r2,-134
  }
}
   311b0:	e037883a 	mov	sp,fp
   311b4:	df000017 	ldw	fp,0(sp)
   311b8:	dec00104 	addi	sp,sp,4
   311bc:	f800283a 	ret

000311c0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   311c0:	defffa04 	addi	sp,sp,-24
   311c4:	dfc00515 	stw	ra,20(sp)
   311c8:	df000415 	stw	fp,16(sp)
   311cc:	df000404 	addi	fp,sp,16
   311d0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   311d4:	00800244 	movi	r2,9
   311d8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   311dc:	014003f4 	movhi	r5,15
   311e0:	29509004 	addi	r5,r5,16960
   311e4:	e13ffd17 	ldw	r4,-12(fp)
   311e8:	002adc80 	call	2adc8 <__mulsi3>
   311ec:	100b883a 	mov	r5,r2
   311f0:	0100bef4 	movhi	r4,763
   311f4:	213c2004 	addi	r4,r4,-3968
   311f8:	002ad0c0 	call	2ad0c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   311fc:	100b883a 	mov	r5,r2
   31200:	01200034 	movhi	r4,32768
   31204:	213fffc4 	addi	r4,r4,-1
   31208:	002ad0c0 	call	2ad0c <__udivsi3>
   3120c:	100b883a 	mov	r5,r2
   31210:	e13fff17 	ldw	r4,-4(fp)
   31214:	002ad0c0 	call	2ad0c <__udivsi3>
   31218:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   3121c:	e0bffe17 	ldw	r2,-8(fp)
   31220:	10002a26 	beq	r2,zero,312cc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   31224:	e03ffc15 	stw	zero,-16(fp)
   31228:	00001706 	br	31288 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   3122c:	00a00034 	movhi	r2,32768
   31230:	10bfffc4 	addi	r2,r2,-1
   31234:	10bfffc4 	addi	r2,r2,-1
   31238:	103ffe1e 	bne	r2,zero,31234 <__alt_data_end+0xffff1234>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   3123c:	014003f4 	movhi	r5,15
   31240:	29509004 	addi	r5,r5,16960
   31244:	e13ffd17 	ldw	r4,-12(fp)
   31248:	002adc80 	call	2adc8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   3124c:	100b883a 	mov	r5,r2
   31250:	0100bef4 	movhi	r4,763
   31254:	213c2004 	addi	r4,r4,-3968
   31258:	002ad0c0 	call	2ad0c <__udivsi3>
   3125c:	100b883a 	mov	r5,r2
   31260:	01200034 	movhi	r4,32768
   31264:	213fffc4 	addi	r4,r4,-1
   31268:	002ad0c0 	call	2ad0c <__udivsi3>
   3126c:	1007883a 	mov	r3,r2
   31270:	e0bfff17 	ldw	r2,-4(fp)
   31274:	10c5c83a 	sub	r2,r2,r3
   31278:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   3127c:	e0bffc17 	ldw	r2,-16(fp)
   31280:	10800044 	addi	r2,r2,1
   31284:	e0bffc15 	stw	r2,-16(fp)
   31288:	e0fffc17 	ldw	r3,-16(fp)
   3128c:	e0bffe17 	ldw	r2,-8(fp)
   31290:	18bfe616 	blt	r3,r2,3122c <__alt_data_end+0xffff122c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   31294:	014003f4 	movhi	r5,15
   31298:	29509004 	addi	r5,r5,16960
   3129c:	e13ffd17 	ldw	r4,-12(fp)
   312a0:	002adc80 	call	2adc8 <__mulsi3>
   312a4:	100b883a 	mov	r5,r2
   312a8:	0100bef4 	movhi	r4,763
   312ac:	213c2004 	addi	r4,r4,-3968
   312b0:	002ad0c0 	call	2ad0c <__udivsi3>
   312b4:	e17fff17 	ldw	r5,-4(fp)
   312b8:	1009883a 	mov	r4,r2
   312bc:	002adc80 	call	2adc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   312c0:	10bfffc4 	addi	r2,r2,-1
   312c4:	103ffe1e 	bne	r2,zero,312c0 <__alt_data_end+0xffff12c0>
   312c8:	00000d06 	br	31300 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   312cc:	014003f4 	movhi	r5,15
   312d0:	29509004 	addi	r5,r5,16960
   312d4:	e13ffd17 	ldw	r4,-12(fp)
   312d8:	002adc80 	call	2adc8 <__mulsi3>
   312dc:	100b883a 	mov	r5,r2
   312e0:	0100bef4 	movhi	r4,763
   312e4:	213c2004 	addi	r4,r4,-3968
   312e8:	002ad0c0 	call	2ad0c <__udivsi3>
   312ec:	e17fff17 	ldw	r5,-4(fp)
   312f0:	1009883a 	mov	r4,r2
   312f4:	002adc80 	call	2adc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   312f8:	10bfffc4 	addi	r2,r2,-1
   312fc:	00bffe16 	blt	zero,r2,312f8 <__alt_data_end+0xffff12f8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   31300:	0005883a 	mov	r2,zero
}
   31304:	e037883a 	mov	sp,fp
   31308:	dfc00117 	ldw	ra,4(sp)
   3130c:	df000017 	ldw	fp,0(sp)
   31310:	dec00204 	addi	sp,sp,8
   31314:	f800283a 	ret

00031318 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   31318:	deffff04 	addi	sp,sp,-4
   3131c:	df000015 	stw	fp,0(sp)
   31320:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   31324:	0001883a 	nop
   31328:	e037883a 	mov	sp,fp
   3132c:	df000017 	ldw	fp,0(sp)
   31330:	dec00104 	addi	sp,sp,4
   31334:	f800283a 	ret

00031338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31338:	defffe04 	addi	sp,sp,-8
   3133c:	dfc00115 	stw	ra,4(sp)
   31340:	df000015 	stw	fp,0(sp)
   31344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31348:	d0a00b17 	ldw	r2,-32724(gp)
   3134c:	10000326 	beq	r2,zero,3135c <alt_get_errno+0x24>
   31350:	d0a00b17 	ldw	r2,-32724(gp)
   31354:	103ee83a 	callr	r2
   31358:	00000106 	br	31360 <alt_get_errno+0x28>
   3135c:	d0a71404 	addi	r2,gp,-25520
}
   31360:	e037883a 	mov	sp,fp
   31364:	dfc00117 	ldw	ra,4(sp)
   31368:	df000017 	ldw	fp,0(sp)
   3136c:	dec00204 	addi	sp,sp,8
   31370:	f800283a 	ret

00031374 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   31374:	defffa04 	addi	sp,sp,-24
   31378:	dfc00515 	stw	ra,20(sp)
   3137c:	df000415 	stw	fp,16(sp)
   31380:	df000404 	addi	fp,sp,16
   31384:	e13ffe15 	stw	r4,-8(fp)
   31388:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   3138c:	e0bffe17 	ldw	r2,-8(fp)
   31390:	10000326 	beq	r2,zero,313a0 <alt_dev_llist_insert+0x2c>
   31394:	e0bffe17 	ldw	r2,-8(fp)
   31398:	10800217 	ldw	r2,8(r2)
   3139c:	1000061e 	bne	r2,zero,313b8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   313a0:	00313380 	call	31338 <alt_get_errno>
   313a4:	1007883a 	mov	r3,r2
   313a8:	00800584 	movi	r2,22
   313ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   313b0:	00bffa84 	movi	r2,-22
   313b4:	00001306 	br	31404 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   313b8:	e0bffe17 	ldw	r2,-8(fp)
   313bc:	e0ffff17 	ldw	r3,-4(fp)
   313c0:	e0fffc15 	stw	r3,-16(fp)
   313c4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   313c8:	e0bffd17 	ldw	r2,-12(fp)
   313cc:	e0fffc17 	ldw	r3,-16(fp)
   313d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   313d4:	e0bffc17 	ldw	r2,-16(fp)
   313d8:	10c00017 	ldw	r3,0(r2)
   313dc:	e0bffd17 	ldw	r2,-12(fp)
   313e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   313e4:	e0bffc17 	ldw	r2,-16(fp)
   313e8:	10800017 	ldw	r2,0(r2)
   313ec:	e0fffd17 	ldw	r3,-12(fp)
   313f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   313f4:	e0bffc17 	ldw	r2,-16(fp)
   313f8:	e0fffd17 	ldw	r3,-12(fp)
   313fc:	10c00015 	stw	r3,0(r2)

  return 0;  
   31400:	0005883a 	mov	r2,zero
}
   31404:	e037883a 	mov	sp,fp
   31408:	dfc00117 	ldw	ra,4(sp)
   3140c:	df000017 	ldw	fp,0(sp)
   31410:	dec00204 	addi	sp,sp,8
   31414:	f800283a 	ret

00031418 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   31418:	defffd04 	addi	sp,sp,-12
   3141c:	dfc00215 	stw	ra,8(sp)
   31420:	df000115 	stw	fp,4(sp)
   31424:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31428:	008000f4 	movhi	r2,3
   3142c:	1089e704 	addi	r2,r2,10140
   31430:	e0bfff15 	stw	r2,-4(fp)
   31434:	00000606 	br	31450 <_do_ctors+0x38>
        (*ctor) (); 
   31438:	e0bfff17 	ldw	r2,-4(fp)
   3143c:	10800017 	ldw	r2,0(r2)
   31440:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31444:	e0bfff17 	ldw	r2,-4(fp)
   31448:	10bfff04 	addi	r2,r2,-4
   3144c:	e0bfff15 	stw	r2,-4(fp)
   31450:	e0ffff17 	ldw	r3,-4(fp)
   31454:	008000f4 	movhi	r2,3
   31458:	1089e804 	addi	r2,r2,10144
   3145c:	18bff62e 	bgeu	r3,r2,31438 <__alt_data_end+0xffff1438>
        (*ctor) (); 
}
   31460:	0001883a 	nop
   31464:	e037883a 	mov	sp,fp
   31468:	dfc00117 	ldw	ra,4(sp)
   3146c:	df000017 	ldw	fp,0(sp)
   31470:	dec00204 	addi	sp,sp,8
   31474:	f800283a 	ret

00031478 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   31478:	defffd04 	addi	sp,sp,-12
   3147c:	dfc00215 	stw	ra,8(sp)
   31480:	df000115 	stw	fp,4(sp)
   31484:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31488:	008000f4 	movhi	r2,3
   3148c:	1089e704 	addi	r2,r2,10140
   31490:	e0bfff15 	stw	r2,-4(fp)
   31494:	00000606 	br	314b0 <_do_dtors+0x38>
        (*dtor) (); 
   31498:	e0bfff17 	ldw	r2,-4(fp)
   3149c:	10800017 	ldw	r2,0(r2)
   314a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   314a4:	e0bfff17 	ldw	r2,-4(fp)
   314a8:	10bfff04 	addi	r2,r2,-4
   314ac:	e0bfff15 	stw	r2,-4(fp)
   314b0:	e0ffff17 	ldw	r3,-4(fp)
   314b4:	008000f4 	movhi	r2,3
   314b8:	1089e804 	addi	r2,r2,10144
   314bc:	18bff62e 	bgeu	r3,r2,31498 <__alt_data_end+0xffff1498>
        (*dtor) (); 
}
   314c0:	0001883a 	nop
   314c4:	e037883a 	mov	sp,fp
   314c8:	dfc00117 	ldw	ra,4(sp)
   314cc:	df000017 	ldw	fp,0(sp)
   314d0:	dec00204 	addi	sp,sp,8
   314d4:	f800283a 	ret

000314d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   314d8:	defffa04 	addi	sp,sp,-24
   314dc:	dfc00515 	stw	ra,20(sp)
   314e0:	df000415 	stw	fp,16(sp)
   314e4:	df000404 	addi	fp,sp,16
   314e8:	e13ffe15 	stw	r4,-8(fp)
   314ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   314f0:	e0bfff17 	ldw	r2,-4(fp)
   314f4:	10800017 	ldw	r2,0(r2)
   314f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   314fc:	e13ffe17 	ldw	r4,-8(fp)
   31500:	00208940 	call	20894 <strlen>
   31504:	10800044 	addi	r2,r2,1
   31508:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3150c:	00000d06 	br	31544 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   31510:	e0bffc17 	ldw	r2,-16(fp)
   31514:	10800217 	ldw	r2,8(r2)
   31518:	e0fffd17 	ldw	r3,-12(fp)
   3151c:	180d883a 	mov	r6,r3
   31520:	e17ffe17 	ldw	r5,-8(fp)
   31524:	1009883a 	mov	r4,r2
   31528:	00322f00 	call	322f0 <memcmp>
   3152c:	1000021e 	bne	r2,zero,31538 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   31530:	e0bffc17 	ldw	r2,-16(fp)
   31534:	00000706 	br	31554 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   31538:	e0bffc17 	ldw	r2,-16(fp)
   3153c:	10800017 	ldw	r2,0(r2)
   31540:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   31544:	e0fffc17 	ldw	r3,-16(fp)
   31548:	e0bfff17 	ldw	r2,-4(fp)
   3154c:	18bff01e 	bne	r3,r2,31510 <__alt_data_end+0xffff1510>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   31550:	0005883a 	mov	r2,zero
}
   31554:	e037883a 	mov	sp,fp
   31558:	dfc00117 	ldw	ra,4(sp)
   3155c:	df000017 	ldw	fp,0(sp)
   31560:	dec00204 	addi	sp,sp,8
   31564:	f800283a 	ret

00031568 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   31568:	deffff04 	addi	sp,sp,-4
   3156c:	df000015 	stw	fp,0(sp)
   31570:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   31574:	0001883a 	nop
   31578:	e037883a 	mov	sp,fp
   3157c:	df000017 	ldw	fp,0(sp)
   31580:	dec00104 	addi	sp,sp,4
   31584:	f800283a 	ret

00031588 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   31588:	defff904 	addi	sp,sp,-28
   3158c:	dfc00615 	stw	ra,24(sp)
   31590:	df000515 	stw	fp,20(sp)
   31594:	df000504 	addi	fp,sp,20
   31598:	e13ffc15 	stw	r4,-16(fp)
   3159c:	e17ffd15 	stw	r5,-12(fp)
   315a0:	e1bffe15 	stw	r6,-8(fp)
   315a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   315a8:	e0800217 	ldw	r2,8(fp)
   315ac:	d8800015 	stw	r2,0(sp)
   315b0:	e1ffff17 	ldw	r7,-4(fp)
   315b4:	e1bffe17 	ldw	r6,-8(fp)
   315b8:	e17ffd17 	ldw	r5,-12(fp)
   315bc:	e13ffc17 	ldw	r4,-16(fp)
   315c0:	00317380 	call	31738 <alt_iic_isr_register>
}  
   315c4:	e037883a 	mov	sp,fp
   315c8:	dfc00117 	ldw	ra,4(sp)
   315cc:	df000017 	ldw	fp,0(sp)
   315d0:	dec00204 	addi	sp,sp,8
   315d4:	f800283a 	ret

000315d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   315d8:	defff904 	addi	sp,sp,-28
   315dc:	df000615 	stw	fp,24(sp)
   315e0:	df000604 	addi	fp,sp,24
   315e4:	e13ffe15 	stw	r4,-8(fp)
   315e8:	e17fff15 	stw	r5,-4(fp)
   315ec:	e0bfff17 	ldw	r2,-4(fp)
   315f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   315f4:	0005303a 	rdctl	r2,status
   315f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   315fc:	e0fffb17 	ldw	r3,-20(fp)
   31600:	00bfff84 	movi	r2,-2
   31604:	1884703a 	and	r2,r3,r2
   31608:	1001703a 	wrctl	status,r2
  
  return context;
   3160c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   31610:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   31614:	00c00044 	movi	r3,1
   31618:	e0bffa17 	ldw	r2,-24(fp)
   3161c:	1884983a 	sll	r2,r3,r2
   31620:	1007883a 	mov	r3,r2
   31624:	d0a71817 	ldw	r2,-25504(gp)
   31628:	1884b03a 	or	r2,r3,r2
   3162c:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   31630:	d0a71817 	ldw	r2,-25504(gp)
   31634:	100170fa 	wrctl	ienable,r2
   31638:	e0bffc17 	ldw	r2,-16(fp)
   3163c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31640:	e0bffd17 	ldw	r2,-12(fp)
   31644:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   31648:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   3164c:	0001883a 	nop
}
   31650:	e037883a 	mov	sp,fp
   31654:	df000017 	ldw	fp,0(sp)
   31658:	dec00104 	addi	sp,sp,4
   3165c:	f800283a 	ret

00031660 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   31660:	defff904 	addi	sp,sp,-28
   31664:	df000615 	stw	fp,24(sp)
   31668:	df000604 	addi	fp,sp,24
   3166c:	e13ffe15 	stw	r4,-8(fp)
   31670:	e17fff15 	stw	r5,-4(fp)
   31674:	e0bfff17 	ldw	r2,-4(fp)
   31678:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3167c:	0005303a 	rdctl	r2,status
   31680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31684:	e0fffb17 	ldw	r3,-20(fp)
   31688:	00bfff84 	movi	r2,-2
   3168c:	1884703a 	and	r2,r3,r2
   31690:	1001703a 	wrctl	status,r2
  
  return context;
   31694:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   31698:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   3169c:	00c00044 	movi	r3,1
   316a0:	e0bffa17 	ldw	r2,-24(fp)
   316a4:	1884983a 	sll	r2,r3,r2
   316a8:	0084303a 	nor	r2,zero,r2
   316ac:	1007883a 	mov	r3,r2
   316b0:	d0a71817 	ldw	r2,-25504(gp)
   316b4:	1884703a 	and	r2,r3,r2
   316b8:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   316bc:	d0a71817 	ldw	r2,-25504(gp)
   316c0:	100170fa 	wrctl	ienable,r2
   316c4:	e0bffc17 	ldw	r2,-16(fp)
   316c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   316cc:	e0bffd17 	ldw	r2,-12(fp)
   316d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   316d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   316d8:	0001883a 	nop
}
   316dc:	e037883a 	mov	sp,fp
   316e0:	df000017 	ldw	fp,0(sp)
   316e4:	dec00104 	addi	sp,sp,4
   316e8:	f800283a 	ret

000316ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   316ec:	defffc04 	addi	sp,sp,-16
   316f0:	df000315 	stw	fp,12(sp)
   316f4:	df000304 	addi	fp,sp,12
   316f8:	e13ffe15 	stw	r4,-8(fp)
   316fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   31700:	000530fa 	rdctl	r2,ienable
   31704:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   31708:	00c00044 	movi	r3,1
   3170c:	e0bfff17 	ldw	r2,-4(fp)
   31710:	1884983a 	sll	r2,r3,r2
   31714:	1007883a 	mov	r3,r2
   31718:	e0bffd17 	ldw	r2,-12(fp)
   3171c:	1884703a 	and	r2,r3,r2
   31720:	1004c03a 	cmpne	r2,r2,zero
   31724:	10803fcc 	andi	r2,r2,255
}
   31728:	e037883a 	mov	sp,fp
   3172c:	df000017 	ldw	fp,0(sp)
   31730:	dec00104 	addi	sp,sp,4
   31734:	f800283a 	ret

00031738 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   31738:	defff504 	addi	sp,sp,-44
   3173c:	dfc00a15 	stw	ra,40(sp)
   31740:	df000915 	stw	fp,36(sp)
   31744:	df000904 	addi	fp,sp,36
   31748:	e13ffc15 	stw	r4,-16(fp)
   3174c:	e17ffd15 	stw	r5,-12(fp)
   31750:	e1bffe15 	stw	r6,-8(fp)
   31754:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   31758:	00bffa84 	movi	r2,-22
   3175c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   31760:	e0bffd17 	ldw	r2,-12(fp)
   31764:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   31768:	e0bff817 	ldw	r2,-32(fp)
   3176c:	10800808 	cmpgei	r2,r2,32
   31770:	1000271e 	bne	r2,zero,31810 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31774:	0005303a 	rdctl	r2,status
   31778:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3177c:	e0fffb17 	ldw	r3,-20(fp)
   31780:	00bfff84 	movi	r2,-2
   31784:	1884703a 	and	r2,r3,r2
   31788:	1001703a 	wrctl	status,r2
  
  return context;
   3178c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   31790:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   31794:	008000f4 	movhi	r2,3
   31798:	1098e404 	addi	r2,r2,25488
   3179c:	e0fff817 	ldw	r3,-32(fp)
   317a0:	180690fa 	slli	r3,r3,3
   317a4:	10c5883a 	add	r2,r2,r3
   317a8:	e0fffe17 	ldw	r3,-8(fp)
   317ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   317b0:	008000f4 	movhi	r2,3
   317b4:	1098e404 	addi	r2,r2,25488
   317b8:	e0fff817 	ldw	r3,-32(fp)
   317bc:	180690fa 	slli	r3,r3,3
   317c0:	10c5883a 	add	r2,r2,r3
   317c4:	10800104 	addi	r2,r2,4
   317c8:	e0ffff17 	ldw	r3,-4(fp)
   317cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   317d0:	e0bffe17 	ldw	r2,-8(fp)
   317d4:	10000526 	beq	r2,zero,317ec <alt_iic_isr_register+0xb4>
   317d8:	e0bff817 	ldw	r2,-32(fp)
   317dc:	100b883a 	mov	r5,r2
   317e0:	e13ffc17 	ldw	r4,-16(fp)
   317e4:	00315d80 	call	315d8 <alt_ic_irq_enable>
   317e8:	00000406 	br	317fc <alt_iic_isr_register+0xc4>
   317ec:	e0bff817 	ldw	r2,-32(fp)
   317f0:	100b883a 	mov	r5,r2
   317f4:	e13ffc17 	ldw	r4,-16(fp)
   317f8:	00316600 	call	31660 <alt_ic_irq_disable>
   317fc:	e0bff715 	stw	r2,-36(fp)
   31800:	e0bffa17 	ldw	r2,-24(fp)
   31804:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31808:	e0bff917 	ldw	r2,-28(fp)
   3180c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   31810:	e0bff717 	ldw	r2,-36(fp)
}
   31814:	e037883a 	mov	sp,fp
   31818:	dfc00117 	ldw	ra,4(sp)
   3181c:	df000017 	ldw	fp,0(sp)
   31820:	dec00204 	addi	sp,sp,8
   31824:	f800283a 	ret

00031828 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   31828:	defff804 	addi	sp,sp,-32
   3182c:	dfc00715 	stw	ra,28(sp)
   31830:	df000615 	stw	fp,24(sp)
   31834:	dc000515 	stw	r16,20(sp)
   31838:	df000604 	addi	fp,sp,24
   3183c:	e13ffb15 	stw	r4,-20(fp)
   31840:	e17ffc15 	stw	r5,-16(fp)
   31844:	e1bffd15 	stw	r6,-12(fp)
   31848:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   3184c:	e1bffe17 	ldw	r6,-8(fp)
   31850:	e17ffd17 	ldw	r5,-12(fp)
   31854:	e13ffc17 	ldw	r4,-16(fp)
   31858:	0031ab00 	call	31ab0 <open>
   3185c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   31860:	e0bffa17 	ldw	r2,-24(fp)
   31864:	10002216 	blt	r2,zero,318f0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   31868:	040000f4 	movhi	r16,3
   3186c:	840d0704 	addi	r16,r16,13340
   31870:	e0bffa17 	ldw	r2,-24(fp)
   31874:	01400304 	movi	r5,12
   31878:	1009883a 	mov	r4,r2
   3187c:	002adc80 	call	2adc8 <__mulsi3>
   31880:	8085883a 	add	r2,r16,r2
   31884:	10c00017 	ldw	r3,0(r2)
   31888:	e0bffb17 	ldw	r2,-20(fp)
   3188c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   31890:	040000f4 	movhi	r16,3
   31894:	840d0704 	addi	r16,r16,13340
   31898:	e0bffa17 	ldw	r2,-24(fp)
   3189c:	01400304 	movi	r5,12
   318a0:	1009883a 	mov	r4,r2
   318a4:	002adc80 	call	2adc8 <__mulsi3>
   318a8:	8085883a 	add	r2,r16,r2
   318ac:	10800104 	addi	r2,r2,4
   318b0:	10c00017 	ldw	r3,0(r2)
   318b4:	e0bffb17 	ldw	r2,-20(fp)
   318b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   318bc:	040000f4 	movhi	r16,3
   318c0:	840d0704 	addi	r16,r16,13340
   318c4:	e0bffa17 	ldw	r2,-24(fp)
   318c8:	01400304 	movi	r5,12
   318cc:	1009883a 	mov	r4,r2
   318d0:	002adc80 	call	2adc8 <__mulsi3>
   318d4:	8085883a 	add	r2,r16,r2
   318d8:	10800204 	addi	r2,r2,8
   318dc:	10c00017 	ldw	r3,0(r2)
   318e0:	e0bffb17 	ldw	r2,-20(fp)
   318e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   318e8:	e13ffa17 	ldw	r4,-24(fp)
   318ec:	002ddb80 	call	2ddb8 <alt_release_fd>
  }
} 
   318f0:	0001883a 	nop
   318f4:	e6ffff04 	addi	sp,fp,-4
   318f8:	dfc00217 	ldw	ra,8(sp)
   318fc:	df000117 	ldw	fp,4(sp)
   31900:	dc000017 	ldw	r16,0(sp)
   31904:	dec00304 	addi	sp,sp,12
   31908:	f800283a 	ret

0003190c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   3190c:	defffb04 	addi	sp,sp,-20
   31910:	dfc00415 	stw	ra,16(sp)
   31914:	df000315 	stw	fp,12(sp)
   31918:	df000304 	addi	fp,sp,12
   3191c:	e13ffd15 	stw	r4,-12(fp)
   31920:	e17ffe15 	stw	r5,-8(fp)
   31924:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   31928:	01c07fc4 	movi	r7,511
   3192c:	01800044 	movi	r6,1
   31930:	e17ffd17 	ldw	r5,-12(fp)
   31934:	010000f4 	movhi	r4,3
   31938:	210d0a04 	addi	r4,r4,13352
   3193c:	00318280 	call	31828 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   31940:	01c07fc4 	movi	r7,511
   31944:	000d883a 	mov	r6,zero
   31948:	e17ffe17 	ldw	r5,-8(fp)
   3194c:	010000f4 	movhi	r4,3
   31950:	210d0704 	addi	r4,r4,13340
   31954:	00318280 	call	31828 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   31958:	01c07fc4 	movi	r7,511
   3195c:	01800044 	movi	r6,1
   31960:	e17fff17 	ldw	r5,-4(fp)
   31964:	010000f4 	movhi	r4,3
   31968:	210d0d04 	addi	r4,r4,13364
   3196c:	00318280 	call	31828 <alt_open_fd>
}  
   31970:	0001883a 	nop
   31974:	e037883a 	mov	sp,fp
   31978:	dfc00117 	ldw	ra,4(sp)
   3197c:	df000017 	ldw	fp,0(sp)
   31980:	dec00204 	addi	sp,sp,8
   31984:	f800283a 	ret

00031988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31988:	defffe04 	addi	sp,sp,-8
   3198c:	dfc00115 	stw	ra,4(sp)
   31990:	df000015 	stw	fp,0(sp)
   31994:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31998:	d0a00b17 	ldw	r2,-32724(gp)
   3199c:	10000326 	beq	r2,zero,319ac <alt_get_errno+0x24>
   319a0:	d0a00b17 	ldw	r2,-32724(gp)
   319a4:	103ee83a 	callr	r2
   319a8:	00000106 	br	319b0 <alt_get_errno+0x28>
   319ac:	d0a71404 	addi	r2,gp,-25520
}
   319b0:	e037883a 	mov	sp,fp
   319b4:	dfc00117 	ldw	ra,4(sp)
   319b8:	df000017 	ldw	fp,0(sp)
   319bc:	dec00204 	addi	sp,sp,8
   319c0:	f800283a 	ret

000319c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   319c4:	defffb04 	addi	sp,sp,-20
   319c8:	dfc00415 	stw	ra,16(sp)
   319cc:	df000315 	stw	fp,12(sp)
   319d0:	dc000215 	stw	r16,8(sp)
   319d4:	df000304 	addi	fp,sp,12
   319d8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   319dc:	e0bffe17 	ldw	r2,-8(fp)
   319e0:	10800217 	ldw	r2,8(r2)
   319e4:	10d00034 	orhi	r3,r2,16384
   319e8:	e0bffe17 	ldw	r2,-8(fp)
   319ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   319f0:	e03ffd15 	stw	zero,-12(fp)
   319f4:	00002306 	br	31a84 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   319f8:	040000f4 	movhi	r16,3
   319fc:	840d0704 	addi	r16,r16,13340
   31a00:	e0bffd17 	ldw	r2,-12(fp)
   31a04:	01400304 	movi	r5,12
   31a08:	1009883a 	mov	r4,r2
   31a0c:	002adc80 	call	2adc8 <__mulsi3>
   31a10:	8085883a 	add	r2,r16,r2
   31a14:	10c00017 	ldw	r3,0(r2)
   31a18:	e0bffe17 	ldw	r2,-8(fp)
   31a1c:	10800017 	ldw	r2,0(r2)
   31a20:	1880151e 	bne	r3,r2,31a78 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31a24:	040000f4 	movhi	r16,3
   31a28:	840d0704 	addi	r16,r16,13340
   31a2c:	e0bffd17 	ldw	r2,-12(fp)
   31a30:	01400304 	movi	r5,12
   31a34:	1009883a 	mov	r4,r2
   31a38:	002adc80 	call	2adc8 <__mulsi3>
   31a3c:	8085883a 	add	r2,r16,r2
   31a40:	10800204 	addi	r2,r2,8
   31a44:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31a48:	10000b0e 	bge	r2,zero,31a78 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   31a4c:	01400304 	movi	r5,12
   31a50:	e13ffd17 	ldw	r4,-12(fp)
   31a54:	002adc80 	call	2adc8 <__mulsi3>
   31a58:	1007883a 	mov	r3,r2
   31a5c:	008000f4 	movhi	r2,3
   31a60:	108d0704 	addi	r2,r2,13340
   31a64:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31a68:	e0bffe17 	ldw	r2,-8(fp)
   31a6c:	18800226 	beq	r3,r2,31a78 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   31a70:	00bffcc4 	movi	r2,-13
   31a74:	00000806 	br	31a98 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   31a78:	e0bffd17 	ldw	r2,-12(fp)
   31a7c:	10800044 	addi	r2,r2,1
   31a80:	e0bffd15 	stw	r2,-12(fp)
   31a84:	d0a00a17 	ldw	r2,-32728(gp)
   31a88:	1007883a 	mov	r3,r2
   31a8c:	e0bffd17 	ldw	r2,-12(fp)
   31a90:	18bfd92e 	bgeu	r3,r2,319f8 <__alt_data_end+0xffff19f8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   31a94:	0005883a 	mov	r2,zero
}
   31a98:	e6ffff04 	addi	sp,fp,-4
   31a9c:	dfc00217 	ldw	ra,8(sp)
   31aa0:	df000117 	ldw	fp,4(sp)
   31aa4:	dc000017 	ldw	r16,0(sp)
   31aa8:	dec00304 	addi	sp,sp,12
   31aac:	f800283a 	ret

00031ab0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   31ab0:	defff604 	addi	sp,sp,-40
   31ab4:	dfc00915 	stw	ra,36(sp)
   31ab8:	df000815 	stw	fp,32(sp)
   31abc:	df000804 	addi	fp,sp,32
   31ac0:	e13ffd15 	stw	r4,-12(fp)
   31ac4:	e17ffe15 	stw	r5,-8(fp)
   31ac8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   31acc:	00bfffc4 	movi	r2,-1
   31ad0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   31ad4:	00bffb44 	movi	r2,-19
   31ad8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   31adc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   31ae0:	d1600804 	addi	r5,gp,-32736
   31ae4:	e13ffd17 	ldw	r4,-12(fp)
   31ae8:	00314d80 	call	314d8 <alt_find_dev>
   31aec:	e0bff815 	stw	r2,-32(fp)
   31af0:	e0bff817 	ldw	r2,-32(fp)
   31af4:	1000051e 	bne	r2,zero,31b0c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   31af8:	e13ffd17 	ldw	r4,-12(fp)
   31afc:	003203c0 	call	3203c <alt_find_file>
   31b00:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   31b04:	00800044 	movi	r2,1
   31b08:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   31b0c:	e0bff817 	ldw	r2,-32(fp)
   31b10:	10002b26 	beq	r2,zero,31bc0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   31b14:	e13ff817 	ldw	r4,-32(fp)
   31b18:	00321440 	call	32144 <alt_get_fd>
   31b1c:	e0bff915 	stw	r2,-28(fp)
   31b20:	e0bff917 	ldw	r2,-28(fp)
   31b24:	1000030e 	bge	r2,zero,31b34 <open+0x84>
    {
      status = index;
   31b28:	e0bff917 	ldw	r2,-28(fp)
   31b2c:	e0bffa15 	stw	r2,-24(fp)
   31b30:	00002506 	br	31bc8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   31b34:	01400304 	movi	r5,12
   31b38:	e13ff917 	ldw	r4,-28(fp)
   31b3c:	002adc80 	call	2adc8 <__mulsi3>
   31b40:	1007883a 	mov	r3,r2
   31b44:	008000f4 	movhi	r2,3
   31b48:	108d0704 	addi	r2,r2,13340
   31b4c:	1885883a 	add	r2,r3,r2
   31b50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   31b54:	e0fffe17 	ldw	r3,-8(fp)
   31b58:	00900034 	movhi	r2,16384
   31b5c:	10bfffc4 	addi	r2,r2,-1
   31b60:	1886703a 	and	r3,r3,r2
   31b64:	e0bffc17 	ldw	r2,-16(fp)
   31b68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   31b6c:	e0bffb17 	ldw	r2,-20(fp)
   31b70:	1000051e 	bne	r2,zero,31b88 <open+0xd8>
   31b74:	e13ffc17 	ldw	r4,-16(fp)
   31b78:	00319c40 	call	319c4 <alt_file_locked>
   31b7c:	e0bffa15 	stw	r2,-24(fp)
   31b80:	e0bffa17 	ldw	r2,-24(fp)
   31b84:	10001016 	blt	r2,zero,31bc8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   31b88:	e0bff817 	ldw	r2,-32(fp)
   31b8c:	10800317 	ldw	r2,12(r2)
   31b90:	10000826 	beq	r2,zero,31bb4 <open+0x104>
   31b94:	e0bff817 	ldw	r2,-32(fp)
   31b98:	10800317 	ldw	r2,12(r2)
   31b9c:	e1ffff17 	ldw	r7,-4(fp)
   31ba0:	e1bffe17 	ldw	r6,-8(fp)
   31ba4:	e17ffd17 	ldw	r5,-12(fp)
   31ba8:	e13ffc17 	ldw	r4,-16(fp)
   31bac:	103ee83a 	callr	r2
   31bb0:	00000106 	br	31bb8 <open+0x108>
   31bb4:	0005883a 	mov	r2,zero
   31bb8:	e0bffa15 	stw	r2,-24(fp)
   31bbc:	00000206 	br	31bc8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   31bc0:	00bffb44 	movi	r2,-19
   31bc4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   31bc8:	e0bffa17 	ldw	r2,-24(fp)
   31bcc:	1000090e 	bge	r2,zero,31bf4 <open+0x144>
  {
    alt_release_fd (index);  
   31bd0:	e13ff917 	ldw	r4,-28(fp)
   31bd4:	002ddb80 	call	2ddb8 <alt_release_fd>
    ALT_ERRNO = -status;
   31bd8:	00319880 	call	31988 <alt_get_errno>
   31bdc:	1007883a 	mov	r3,r2
   31be0:	e0bffa17 	ldw	r2,-24(fp)
   31be4:	0085c83a 	sub	r2,zero,r2
   31be8:	18800015 	stw	r2,0(r3)
    return -1;
   31bec:	00bfffc4 	movi	r2,-1
   31bf0:	00000106 	br	31bf8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   31bf4:	e0bff917 	ldw	r2,-28(fp)
}
   31bf8:	e037883a 	mov	sp,fp
   31bfc:	dfc00117 	ldw	ra,4(sp)
   31c00:	df000017 	ldw	fp,0(sp)
   31c04:	dec00204 	addi	sp,sp,8
   31c08:	f800283a 	ret

00031c0c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   31c0c:	defff204 	addi	sp,sp,-56
   31c10:	dfc00a15 	stw	ra,40(sp)
   31c14:	df000915 	stw	fp,36(sp)
   31c18:	df000904 	addi	fp,sp,36
   31c1c:	e13fff15 	stw	r4,-4(fp)
   31c20:	e1400215 	stw	r5,8(fp)
   31c24:	e1800315 	stw	r6,12(fp)
   31c28:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   31c2c:	e0800204 	addi	r2,fp,8
   31c30:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   31c34:	e0bfff17 	ldw	r2,-4(fp)
   31c38:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   31c3c:	00006f06 	br	31dfc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   31c40:	e0bff807 	ldb	r2,-32(fp)
   31c44:	10800960 	cmpeqi	r2,r2,37
   31c48:	1000041e 	bne	r2,zero,31c5c <alt_printf+0x50>
        {
            alt_putchar(c);
   31c4c:	e0bff807 	ldb	r2,-32(fp)
   31c50:	1009883a 	mov	r4,r2
   31c54:	0031e380 	call	31e38 <alt_putchar>
   31c58:	00006806 	br	31dfc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   31c5c:	e0bff717 	ldw	r2,-36(fp)
   31c60:	10c00044 	addi	r3,r2,1
   31c64:	e0fff715 	stw	r3,-36(fp)
   31c68:	10800003 	ldbu	r2,0(r2)
   31c6c:	e0bff805 	stb	r2,-32(fp)
   31c70:	e0bff807 	ldb	r2,-32(fp)
   31c74:	10006926 	beq	r2,zero,31e1c <alt_printf+0x210>
            {
                if (c == '%')
   31c78:	e0bff807 	ldb	r2,-32(fp)
   31c7c:	10800958 	cmpnei	r2,r2,37
   31c80:	1000041e 	bne	r2,zero,31c94 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   31c84:	e0bff807 	ldb	r2,-32(fp)
   31c88:	1009883a 	mov	r4,r2
   31c8c:	0031e380 	call	31e38 <alt_putchar>
   31c90:	00005a06 	br	31dfc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   31c94:	e0bff807 	ldb	r2,-32(fp)
   31c98:	108018d8 	cmpnei	r2,r2,99
   31c9c:	1000081e 	bne	r2,zero,31cc0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   31ca0:	e0bffe17 	ldw	r2,-8(fp)
   31ca4:	10c00104 	addi	r3,r2,4
   31ca8:	e0fffe15 	stw	r3,-8(fp)
   31cac:	10800017 	ldw	r2,0(r2)
   31cb0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   31cb4:	e13ffd17 	ldw	r4,-12(fp)
   31cb8:	0031e380 	call	31e38 <alt_putchar>
   31cbc:	00004f06 	br	31dfc <alt_printf+0x1f0>
                }
                else if (c == 'x')
   31cc0:	e0bff807 	ldb	r2,-32(fp)
   31cc4:	10801e18 	cmpnei	r2,r2,120
   31cc8:	1000341e 	bne	r2,zero,31d9c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   31ccc:	e0bffe17 	ldw	r2,-8(fp)
   31cd0:	10c00104 	addi	r3,r2,4
   31cd4:	e0fffe15 	stw	r3,-8(fp)
   31cd8:	10800017 	ldw	r2,0(r2)
   31cdc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   31ce0:	e0bffb17 	ldw	r2,-20(fp)
   31ce4:	1000031e 	bne	r2,zero,31cf4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   31ce8:	01000c04 	movi	r4,48
   31cec:	0031e380 	call	31e38 <alt_putchar>
                        continue;
   31cf0:	00004206 	br	31dfc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   31cf4:	00800704 	movi	r2,28
   31cf8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   31cfc:	00000306 	br	31d0c <alt_printf+0x100>
                        digit_shift -= 4;
   31d00:	e0bff917 	ldw	r2,-28(fp)
   31d04:	10bfff04 	addi	r2,r2,-4
   31d08:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   31d0c:	00c003c4 	movi	r3,15
   31d10:	e0bff917 	ldw	r2,-28(fp)
   31d14:	1884983a 	sll	r2,r3,r2
   31d18:	1007883a 	mov	r3,r2
   31d1c:	e0bffb17 	ldw	r2,-20(fp)
   31d20:	1884703a 	and	r2,r3,r2
   31d24:	103ff626 	beq	r2,zero,31d00 <__alt_data_end+0xffff1d00>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   31d28:	00001906 	br	31d90 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   31d2c:	00c003c4 	movi	r3,15
   31d30:	e0bff917 	ldw	r2,-28(fp)
   31d34:	1884983a 	sll	r2,r3,r2
   31d38:	1007883a 	mov	r3,r2
   31d3c:	e0bffb17 	ldw	r2,-20(fp)
   31d40:	1886703a 	and	r3,r3,r2
   31d44:	e0bff917 	ldw	r2,-28(fp)
   31d48:	1884d83a 	srl	r2,r3,r2
   31d4c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   31d50:	e0bffc17 	ldw	r2,-16(fp)
   31d54:	108002a8 	cmpgeui	r2,r2,10
   31d58:	1000041e 	bne	r2,zero,31d6c <alt_printf+0x160>
                            c = '0' + digit;
   31d5c:	e0bffc17 	ldw	r2,-16(fp)
   31d60:	10800c04 	addi	r2,r2,48
   31d64:	e0bff805 	stb	r2,-32(fp)
   31d68:	00000306 	br	31d78 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   31d6c:	e0bffc17 	ldw	r2,-16(fp)
   31d70:	108015c4 	addi	r2,r2,87
   31d74:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   31d78:	e0bff807 	ldb	r2,-32(fp)
   31d7c:	1009883a 	mov	r4,r2
   31d80:	0031e380 	call	31e38 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   31d84:	e0bff917 	ldw	r2,-28(fp)
   31d88:	10bfff04 	addi	r2,r2,-4
   31d8c:	e0bff915 	stw	r2,-28(fp)
   31d90:	e0bff917 	ldw	r2,-28(fp)
   31d94:	103fe50e 	bge	r2,zero,31d2c <__alt_data_end+0xffff1d2c>
   31d98:	00001806 	br	31dfc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   31d9c:	e0bff807 	ldb	r2,-32(fp)
   31da0:	10801cd8 	cmpnei	r2,r2,115
   31da4:	1000151e 	bne	r2,zero,31dfc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   31da8:	e0bffe17 	ldw	r2,-8(fp)
   31dac:	10c00104 	addi	r3,r2,4
   31db0:	e0fffe15 	stw	r3,-8(fp)
   31db4:	10800017 	ldw	r2,0(r2)
   31db8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   31dbc:	00000906 	br	31de4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   31dc0:	e0bffa17 	ldw	r2,-24(fp)
   31dc4:	10c00044 	addi	r3,r2,1
   31dc8:	e0fffa15 	stw	r3,-24(fp)
   31dcc:	10800003 	ldbu	r2,0(r2)
   31dd0:	10803fcc 	andi	r2,r2,255
   31dd4:	1080201c 	xori	r2,r2,128
   31dd8:	10bfe004 	addi	r2,r2,-128
   31ddc:	1009883a 	mov	r4,r2
   31de0:	0031e380 	call	31e38 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   31de4:	e0bffa17 	ldw	r2,-24(fp)
   31de8:	10800003 	ldbu	r2,0(r2)
   31dec:	10803fcc 	andi	r2,r2,255
   31df0:	1080201c 	xori	r2,r2,128
   31df4:	10bfe004 	addi	r2,r2,-128
   31df8:	103ff11e 	bne	r2,zero,31dc0 <__alt_data_end+0xffff1dc0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   31dfc:	e0bff717 	ldw	r2,-36(fp)
   31e00:	10c00044 	addi	r3,r2,1
   31e04:	e0fff715 	stw	r3,-36(fp)
   31e08:	10800003 	ldbu	r2,0(r2)
   31e0c:	e0bff805 	stb	r2,-32(fp)
   31e10:	e0bff807 	ldb	r2,-32(fp)
   31e14:	103f8a1e 	bne	r2,zero,31c40 <__alt_data_end+0xffff1c40>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   31e18:	00000106 	br	31e20 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   31e1c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   31e20:	0001883a 	nop
   31e24:	e037883a 	mov	sp,fp
   31e28:	dfc00117 	ldw	ra,4(sp)
   31e2c:	df000017 	ldw	fp,0(sp)
   31e30:	dec00504 	addi	sp,sp,20
   31e34:	f800283a 	ret

00031e38 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   31e38:	defffd04 	addi	sp,sp,-12
   31e3c:	dfc00215 	stw	ra,8(sp)
   31e40:	df000115 	stw	fp,4(sp)
   31e44:	df000104 	addi	fp,sp,4
   31e48:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   31e4c:	d0a00117 	ldw	r2,-32764(gp)
   31e50:	10800217 	ldw	r2,8(r2)
   31e54:	100b883a 	mov	r5,r2
   31e58:	e13fff17 	ldw	r4,-4(fp)
   31e5c:	003240c0 	call	3240c <putc>
#endif
#endif
}
   31e60:	e037883a 	mov	sp,fp
   31e64:	dfc00117 	ldw	ra,4(sp)
   31e68:	df000017 	ldw	fp,0(sp)
   31e6c:	dec00204 	addi	sp,sp,8
   31e70:	f800283a 	ret

00031e74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   31e74:	defffa04 	addi	sp,sp,-24
   31e78:	df000515 	stw	fp,20(sp)
   31e7c:	df000504 	addi	fp,sp,20
   31e80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31e84:	0005303a 	rdctl	r2,status
   31e88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31e8c:	e0fffc17 	ldw	r3,-16(fp)
   31e90:	00bfff84 	movi	r2,-2
   31e94:	1884703a 	and	r2,r3,r2
   31e98:	1001703a 	wrctl	status,r2
  
  return context;
   31e9c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   31ea0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   31ea4:	e0bfff17 	ldw	r2,-4(fp)
   31ea8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   31eac:	e0bffd17 	ldw	r2,-12(fp)
   31eb0:	10800017 	ldw	r2,0(r2)
   31eb4:	e0fffd17 	ldw	r3,-12(fp)
   31eb8:	18c00117 	ldw	r3,4(r3)
   31ebc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   31ec0:	e0bffd17 	ldw	r2,-12(fp)
   31ec4:	10800117 	ldw	r2,4(r2)
   31ec8:	e0fffd17 	ldw	r3,-12(fp)
   31ecc:	18c00017 	ldw	r3,0(r3)
   31ed0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   31ed4:	e0bffd17 	ldw	r2,-12(fp)
   31ed8:	e0fffd17 	ldw	r3,-12(fp)
   31edc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   31ee0:	e0bffd17 	ldw	r2,-12(fp)
   31ee4:	e0fffd17 	ldw	r3,-12(fp)
   31ee8:	10c00015 	stw	r3,0(r2)
   31eec:	e0bffb17 	ldw	r2,-20(fp)
   31ef0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31ef4:	e0bffe17 	ldw	r2,-8(fp)
   31ef8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   31efc:	0001883a 	nop
   31f00:	e037883a 	mov	sp,fp
   31f04:	df000017 	ldw	fp,0(sp)
   31f08:	dec00104 	addi	sp,sp,4
   31f0c:	f800283a 	ret

00031f10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31f10:	defffb04 	addi	sp,sp,-20
   31f14:	dfc00415 	stw	ra,16(sp)
   31f18:	df000315 	stw	fp,12(sp)
   31f1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   31f20:	d0a01017 	ldw	r2,-32704(gp)
   31f24:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   31f28:	d0a71a17 	ldw	r2,-25496(gp)
   31f2c:	10800044 	addi	r2,r2,1
   31f30:	d0a71a15 	stw	r2,-25496(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31f34:	00002e06 	br	31ff0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   31f38:	e0bffd17 	ldw	r2,-12(fp)
   31f3c:	10800017 	ldw	r2,0(r2)
   31f40:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   31f44:	e0bffd17 	ldw	r2,-12(fp)
   31f48:	10800403 	ldbu	r2,16(r2)
   31f4c:	10803fcc 	andi	r2,r2,255
   31f50:	10000426 	beq	r2,zero,31f64 <alt_tick+0x54>
   31f54:	d0a71a17 	ldw	r2,-25496(gp)
   31f58:	1000021e 	bne	r2,zero,31f64 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   31f5c:	e0bffd17 	ldw	r2,-12(fp)
   31f60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   31f64:	e0bffd17 	ldw	r2,-12(fp)
   31f68:	10800217 	ldw	r2,8(r2)
   31f6c:	d0e71a17 	ldw	r3,-25496(gp)
   31f70:	18801d36 	bltu	r3,r2,31fe8 <alt_tick+0xd8>
   31f74:	e0bffd17 	ldw	r2,-12(fp)
   31f78:	10800403 	ldbu	r2,16(r2)
   31f7c:	10803fcc 	andi	r2,r2,255
   31f80:	1000191e 	bne	r2,zero,31fe8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   31f84:	e0bffd17 	ldw	r2,-12(fp)
   31f88:	10800317 	ldw	r2,12(r2)
   31f8c:	e0fffd17 	ldw	r3,-12(fp)
   31f90:	18c00517 	ldw	r3,20(r3)
   31f94:	1809883a 	mov	r4,r3
   31f98:	103ee83a 	callr	r2
   31f9c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   31fa0:	e0bfff17 	ldw	r2,-4(fp)
   31fa4:	1000031e 	bne	r2,zero,31fb4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   31fa8:	e13ffd17 	ldw	r4,-12(fp)
   31fac:	0031e740 	call	31e74 <alt_alarm_stop>
   31fb0:	00000d06 	br	31fe8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   31fb4:	e0bffd17 	ldw	r2,-12(fp)
   31fb8:	10c00217 	ldw	r3,8(r2)
   31fbc:	e0bfff17 	ldw	r2,-4(fp)
   31fc0:	1887883a 	add	r3,r3,r2
   31fc4:	e0bffd17 	ldw	r2,-12(fp)
   31fc8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   31fcc:	e0bffd17 	ldw	r2,-12(fp)
   31fd0:	10c00217 	ldw	r3,8(r2)
   31fd4:	d0a71a17 	ldw	r2,-25496(gp)
   31fd8:	1880032e 	bgeu	r3,r2,31fe8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   31fdc:	e0bffd17 	ldw	r2,-12(fp)
   31fe0:	00c00044 	movi	r3,1
   31fe4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   31fe8:	e0bffe17 	ldw	r2,-8(fp)
   31fec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31ff0:	e0fffd17 	ldw	r3,-12(fp)
   31ff4:	d0a01004 	addi	r2,gp,-32704
   31ff8:	18bfcf1e 	bne	r3,r2,31f38 <__alt_data_end+0xffff1f38>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   31ffc:	0001883a 	nop
}
   32000:	0001883a 	nop
   32004:	e037883a 	mov	sp,fp
   32008:	dfc00117 	ldw	ra,4(sp)
   3200c:	df000017 	ldw	fp,0(sp)
   32010:	dec00204 	addi	sp,sp,8
   32014:	f800283a 	ret

00032018 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   32018:	deffff04 	addi	sp,sp,-4
   3201c:	df000015 	stw	fp,0(sp)
   32020:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   32024:	000170fa 	wrctl	ienable,zero
}
   32028:	0001883a 	nop
   3202c:	e037883a 	mov	sp,fp
   32030:	df000017 	ldw	fp,0(sp)
   32034:	dec00104 	addi	sp,sp,4
   32038:	f800283a 	ret

0003203c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   3203c:	defffb04 	addi	sp,sp,-20
   32040:	dfc00415 	stw	ra,16(sp)
   32044:	df000315 	stw	fp,12(sp)
   32048:	df000304 	addi	fp,sp,12
   3204c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   32050:	d0a00617 	ldw	r2,-32744(gp)
   32054:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   32058:	00003106 	br	32120 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   3205c:	e0bffd17 	ldw	r2,-12(fp)
   32060:	10800217 	ldw	r2,8(r2)
   32064:	1009883a 	mov	r4,r2
   32068:	00208940 	call	20894 <strlen>
   3206c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   32070:	e0bffd17 	ldw	r2,-12(fp)
   32074:	10c00217 	ldw	r3,8(r2)
   32078:	e0bffe17 	ldw	r2,-8(fp)
   3207c:	10bfffc4 	addi	r2,r2,-1
   32080:	1885883a 	add	r2,r3,r2
   32084:	10800003 	ldbu	r2,0(r2)
   32088:	10803fcc 	andi	r2,r2,255
   3208c:	1080201c 	xori	r2,r2,128
   32090:	10bfe004 	addi	r2,r2,-128
   32094:	10800bd8 	cmpnei	r2,r2,47
   32098:	1000031e 	bne	r2,zero,320a8 <alt_find_file+0x6c>
    {
      len -= 1;
   3209c:	e0bffe17 	ldw	r2,-8(fp)
   320a0:	10bfffc4 	addi	r2,r2,-1
   320a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   320a8:	e0bffe17 	ldw	r2,-8(fp)
   320ac:	e0ffff17 	ldw	r3,-4(fp)
   320b0:	1885883a 	add	r2,r3,r2
   320b4:	10800003 	ldbu	r2,0(r2)
   320b8:	10803fcc 	andi	r2,r2,255
   320bc:	1080201c 	xori	r2,r2,128
   320c0:	10bfe004 	addi	r2,r2,-128
   320c4:	10800be0 	cmpeqi	r2,r2,47
   320c8:	1000081e 	bne	r2,zero,320ec <alt_find_file+0xb0>
   320cc:	e0bffe17 	ldw	r2,-8(fp)
   320d0:	e0ffff17 	ldw	r3,-4(fp)
   320d4:	1885883a 	add	r2,r3,r2
   320d8:	10800003 	ldbu	r2,0(r2)
   320dc:	10803fcc 	andi	r2,r2,255
   320e0:	1080201c 	xori	r2,r2,128
   320e4:	10bfe004 	addi	r2,r2,-128
   320e8:	10000a1e 	bne	r2,zero,32114 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   320ec:	e0bffd17 	ldw	r2,-12(fp)
   320f0:	10800217 	ldw	r2,8(r2)
   320f4:	e0fffe17 	ldw	r3,-8(fp)
   320f8:	180d883a 	mov	r6,r3
   320fc:	e17fff17 	ldw	r5,-4(fp)
   32100:	1009883a 	mov	r4,r2
   32104:	00322f00 	call	322f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   32108:	1000021e 	bne	r2,zero,32114 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   3210c:	e0bffd17 	ldw	r2,-12(fp)
   32110:	00000706 	br	32130 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   32114:	e0bffd17 	ldw	r2,-12(fp)
   32118:	10800017 	ldw	r2,0(r2)
   3211c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   32120:	e0fffd17 	ldw	r3,-12(fp)
   32124:	d0a00604 	addi	r2,gp,-32744
   32128:	18bfcc1e 	bne	r3,r2,3205c <__alt_data_end+0xffff205c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   3212c:	0005883a 	mov	r2,zero
}
   32130:	e037883a 	mov	sp,fp
   32134:	dfc00117 	ldw	ra,4(sp)
   32138:	df000017 	ldw	fp,0(sp)
   3213c:	dec00204 	addi	sp,sp,8
   32140:	f800283a 	ret

00032144 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   32144:	defffa04 	addi	sp,sp,-24
   32148:	dfc00515 	stw	ra,20(sp)
   3214c:	df000415 	stw	fp,16(sp)
   32150:	dc000315 	stw	r16,12(sp)
   32154:	df000404 	addi	fp,sp,16
   32158:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   3215c:	00bffa04 	movi	r2,-24
   32160:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   32164:	e03ffc15 	stw	zero,-16(fp)
   32168:	00001d06 	br	321e0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   3216c:	040000f4 	movhi	r16,3
   32170:	840d0704 	addi	r16,r16,13340
   32174:	e0bffc17 	ldw	r2,-16(fp)
   32178:	01400304 	movi	r5,12
   3217c:	1009883a 	mov	r4,r2
   32180:	002adc80 	call	2adc8 <__mulsi3>
   32184:	8085883a 	add	r2,r16,r2
   32188:	10800017 	ldw	r2,0(r2)
   3218c:	1000111e 	bne	r2,zero,321d4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   32190:	040000f4 	movhi	r16,3
   32194:	840d0704 	addi	r16,r16,13340
   32198:	e0bffc17 	ldw	r2,-16(fp)
   3219c:	01400304 	movi	r5,12
   321a0:	1009883a 	mov	r4,r2
   321a4:	002adc80 	call	2adc8 <__mulsi3>
   321a8:	8085883a 	add	r2,r16,r2
   321ac:	e0fffe17 	ldw	r3,-8(fp)
   321b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   321b4:	d0e00a17 	ldw	r3,-32728(gp)
   321b8:	e0bffc17 	ldw	r2,-16(fp)
   321bc:	1880020e 	bge	r3,r2,321c8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   321c0:	e0bffc17 	ldw	r2,-16(fp)
   321c4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   321c8:	e0bffc17 	ldw	r2,-16(fp)
   321cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   321d0:	00000606 	br	321ec <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   321d4:	e0bffc17 	ldw	r2,-16(fp)
   321d8:	10800044 	addi	r2,r2,1
   321dc:	e0bffc15 	stw	r2,-16(fp)
   321e0:	e0bffc17 	ldw	r2,-16(fp)
   321e4:	10800810 	cmplti	r2,r2,32
   321e8:	103fe01e 	bne	r2,zero,3216c <__alt_data_end+0xffff216c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   321ec:	e0bffd17 	ldw	r2,-12(fp)
}
   321f0:	e6ffff04 	addi	sp,fp,-4
   321f4:	dfc00217 	ldw	ra,8(sp)
   321f8:	df000117 	ldw	fp,4(sp)
   321fc:	dc000017 	ldw	r16,0(sp)
   32200:	dec00304 	addi	sp,sp,12
   32204:	f800283a 	ret

00032208 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   32208:	defffe04 	addi	sp,sp,-8
   3220c:	df000115 	stw	fp,4(sp)
   32210:	df000104 	addi	fp,sp,4
   32214:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   32218:	e0bfff17 	ldw	r2,-4(fp)
   3221c:	10bffe84 	addi	r2,r2,-6
   32220:	10c00428 	cmpgeui	r3,r2,16
   32224:	18001a1e 	bne	r3,zero,32290 <alt_exception_cause_generated_bad_addr+0x88>
   32228:	100690ba 	slli	r3,r2,2
   3222c:	008000f4 	movhi	r2,3
   32230:	10889004 	addi	r2,r2,8768
   32234:	1885883a 	add	r2,r3,r2
   32238:	10800017 	ldw	r2,0(r2)
   3223c:	1000683a 	jmp	r2
   32240:	00032280 	call	3228 <__alt_mem_RAM-0x1cdd8>
   32244:	00032280 	call	3228 <__alt_mem_RAM-0x1cdd8>
   32248:	00032290 	cmplti	zero,zero,3210
   3224c:	00032290 	cmplti	zero,zero,3210
   32250:	00032290 	cmplti	zero,zero,3210
   32254:	00032280 	call	3228 <__alt_mem_RAM-0x1cdd8>
   32258:	00032288 	cmpgei	zero,zero,3210
   3225c:	00032290 	cmplti	zero,zero,3210
   32260:	00032280 	call	3228 <__alt_mem_RAM-0x1cdd8>
   32264:	00032280 	call	3228 <__alt_mem_RAM-0x1cdd8>
   32268:	00032290 	cmplti	zero,zero,3210
   3226c:	00032280 	call	3228 <__alt_mem_RAM-0x1cdd8>
   32270:	00032288 	cmpgei	zero,zero,3210
   32274:	00032290 	cmplti	zero,zero,3210
   32278:	00032290 	cmplti	zero,zero,3210
   3227c:	00032280 	call	3228 <__alt_mem_RAM-0x1cdd8>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   32280:	00800044 	movi	r2,1
   32284:	00000306 	br	32294 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   32288:	0005883a 	mov	r2,zero
   3228c:	00000106 	br	32294 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   32290:	0005883a 	mov	r2,zero
  }
}
   32294:	e037883a 	mov	sp,fp
   32298:	df000017 	ldw	fp,0(sp)
   3229c:	dec00104 	addi	sp,sp,4
   322a0:	f800283a 	ret

000322a4 <atexit>:
   322a4:	200b883a 	mov	r5,r4
   322a8:	000f883a 	mov	r7,zero
   322ac:	000d883a 	mov	r6,zero
   322b0:	0009883a 	mov	r4,zero
   322b4:	00324d41 	jmpi	324d4 <__register_exitproc>

000322b8 <exit>:
   322b8:	defffe04 	addi	sp,sp,-8
   322bc:	000b883a 	mov	r5,zero
   322c0:	dc000015 	stw	r16,0(sp)
   322c4:	dfc00115 	stw	ra,4(sp)
   322c8:	2021883a 	mov	r16,r4
   322cc:	00325ec0 	call	325ec <__call_exitprocs>
   322d0:	008000f4 	movhi	r2,3
   322d4:	1091be04 	addi	r2,r2,18168
   322d8:	11000017 	ldw	r4,0(r2)
   322dc:	20800f17 	ldw	r2,60(r4)
   322e0:	10000126 	beq	r2,zero,322e8 <exit+0x30>
   322e4:	103ee83a 	callr	r2
   322e8:	8009883a 	mov	r4,r16
   322ec:	003276c0 	call	3276c <_exit>

000322f0 <memcmp>:
   322f0:	01c000c4 	movi	r7,3
   322f4:	3980192e 	bgeu	r7,r6,3235c <memcmp+0x6c>
   322f8:	2144b03a 	or	r2,r4,r5
   322fc:	11c4703a 	and	r2,r2,r7
   32300:	10000f26 	beq	r2,zero,32340 <memcmp+0x50>
   32304:	20800003 	ldbu	r2,0(r4)
   32308:	28c00003 	ldbu	r3,0(r5)
   3230c:	10c0151e 	bne	r2,r3,32364 <memcmp+0x74>
   32310:	31bfff84 	addi	r6,r6,-2
   32314:	01ffffc4 	movi	r7,-1
   32318:	00000406 	br	3232c <memcmp+0x3c>
   3231c:	20800003 	ldbu	r2,0(r4)
   32320:	28c00003 	ldbu	r3,0(r5)
   32324:	31bfffc4 	addi	r6,r6,-1
   32328:	10c00e1e 	bne	r2,r3,32364 <memcmp+0x74>
   3232c:	21000044 	addi	r4,r4,1
   32330:	29400044 	addi	r5,r5,1
   32334:	31fff91e 	bne	r6,r7,3231c <__alt_data_end+0xffff231c>
   32338:	0005883a 	mov	r2,zero
   3233c:	f800283a 	ret
   32340:	20c00017 	ldw	r3,0(r4)
   32344:	28800017 	ldw	r2,0(r5)
   32348:	18bfee1e 	bne	r3,r2,32304 <__alt_data_end+0xffff2304>
   3234c:	31bfff04 	addi	r6,r6,-4
   32350:	21000104 	addi	r4,r4,4
   32354:	29400104 	addi	r5,r5,4
   32358:	39bff936 	bltu	r7,r6,32340 <__alt_data_end+0xffff2340>
   3235c:	303fe91e 	bne	r6,zero,32304 <__alt_data_end+0xffff2304>
   32360:	003ff506 	br	32338 <__alt_data_end+0xffff2338>
   32364:	10c5c83a 	sub	r2,r2,r3
   32368:	f800283a 	ret

0003236c <_putc_r>:
   3236c:	defffc04 	addi	sp,sp,-16
   32370:	dc000215 	stw	r16,8(sp)
   32374:	dfc00315 	stw	ra,12(sp)
   32378:	2021883a 	mov	r16,r4
   3237c:	20000226 	beq	r4,zero,32388 <_putc_r+0x1c>
   32380:	20800e17 	ldw	r2,56(r4)
   32384:	10001b26 	beq	r2,zero,323f4 <_putc_r+0x88>
   32388:	30800217 	ldw	r2,8(r6)
   3238c:	10bfffc4 	addi	r2,r2,-1
   32390:	30800215 	stw	r2,8(r6)
   32394:	10000a16 	blt	r2,zero,323c0 <_putc_r+0x54>
   32398:	30800017 	ldw	r2,0(r6)
   3239c:	11400005 	stb	r5,0(r2)
   323a0:	30800017 	ldw	r2,0(r6)
   323a4:	10c00044 	addi	r3,r2,1
   323a8:	30c00015 	stw	r3,0(r6)
   323ac:	10800003 	ldbu	r2,0(r2)
   323b0:	dfc00317 	ldw	ra,12(sp)
   323b4:	dc000217 	ldw	r16,8(sp)
   323b8:	dec00404 	addi	sp,sp,16
   323bc:	f800283a 	ret
   323c0:	30c00617 	ldw	r3,24(r6)
   323c4:	10c00616 	blt	r2,r3,323e0 <_putc_r+0x74>
   323c8:	30800017 	ldw	r2,0(r6)
   323cc:	00c00284 	movi	r3,10
   323d0:	11400005 	stb	r5,0(r2)
   323d4:	30800017 	ldw	r2,0(r6)
   323d8:	11400003 	ldbu	r5,0(r2)
   323dc:	28fff11e 	bne	r5,r3,323a4 <__alt_data_end+0xffff23a4>
   323e0:	8009883a 	mov	r4,r16
   323e4:	dfc00317 	ldw	ra,12(sp)
   323e8:	dc000217 	ldw	r16,8(sp)
   323ec:	dec00404 	addi	sp,sp,16
   323f0:	0029d141 	jmpi	29d14 <__swbuf_r>
   323f4:	d9400015 	stw	r5,0(sp)
   323f8:	d9800115 	stw	r6,4(sp)
   323fc:	0024cec0 	call	24cec <__sinit>
   32400:	d9800117 	ldw	r6,4(sp)
   32404:	d9400017 	ldw	r5,0(sp)
   32408:	003fdf06 	br	32388 <__alt_data_end+0xffff2388>

0003240c <putc>:
   3240c:	008000f4 	movhi	r2,3
   32410:	defffc04 	addi	sp,sp,-16
   32414:	1091bf04 	addi	r2,r2,18172
   32418:	dc000115 	stw	r16,4(sp)
   3241c:	14000017 	ldw	r16,0(r2)
   32420:	dc400215 	stw	r17,8(sp)
   32424:	dfc00315 	stw	ra,12(sp)
   32428:	2023883a 	mov	r17,r4
   3242c:	80000226 	beq	r16,zero,32438 <putc+0x2c>
   32430:	80800e17 	ldw	r2,56(r16)
   32434:	10001a26 	beq	r2,zero,324a0 <putc+0x94>
   32438:	28800217 	ldw	r2,8(r5)
   3243c:	10bfffc4 	addi	r2,r2,-1
   32440:	28800215 	stw	r2,8(r5)
   32444:	10000b16 	blt	r2,zero,32474 <putc+0x68>
   32448:	28800017 	ldw	r2,0(r5)
   3244c:	14400005 	stb	r17,0(r2)
   32450:	28800017 	ldw	r2,0(r5)
   32454:	10c00044 	addi	r3,r2,1
   32458:	28c00015 	stw	r3,0(r5)
   3245c:	10800003 	ldbu	r2,0(r2)
   32460:	dfc00317 	ldw	ra,12(sp)
   32464:	dc400217 	ldw	r17,8(sp)
   32468:	dc000117 	ldw	r16,4(sp)
   3246c:	dec00404 	addi	sp,sp,16
   32470:	f800283a 	ret
   32474:	28c00617 	ldw	r3,24(r5)
   32478:	10c00e16 	blt	r2,r3,324b4 <putc+0xa8>
   3247c:	28800017 	ldw	r2,0(r5)
   32480:	01000284 	movi	r4,10
   32484:	14400005 	stb	r17,0(r2)
   32488:	28800017 	ldw	r2,0(r5)
   3248c:	10c00003 	ldbu	r3,0(r2)
   32490:	193ff01e 	bne	r3,r4,32454 <__alt_data_end+0xffff2454>
   32494:	280d883a 	mov	r6,r5
   32498:	180b883a 	mov	r5,r3
   3249c:	00000706 	br	324bc <putc+0xb0>
   324a0:	8009883a 	mov	r4,r16
   324a4:	d9400015 	stw	r5,0(sp)
   324a8:	0024cec0 	call	24cec <__sinit>
   324ac:	d9400017 	ldw	r5,0(sp)
   324b0:	003fe106 	br	32438 <__alt_data_end+0xffff2438>
   324b4:	280d883a 	mov	r6,r5
   324b8:	880b883a 	mov	r5,r17
   324bc:	8009883a 	mov	r4,r16
   324c0:	dfc00317 	ldw	ra,12(sp)
   324c4:	dc400217 	ldw	r17,8(sp)
   324c8:	dc000117 	ldw	r16,4(sp)
   324cc:	dec00404 	addi	sp,sp,16
   324d0:	0029d141 	jmpi	29d14 <__swbuf_r>

000324d4 <__register_exitproc>:
   324d4:	defffa04 	addi	sp,sp,-24
   324d8:	dc000315 	stw	r16,12(sp)
   324dc:	040000f4 	movhi	r16,3
   324e0:	8411be04 	addi	r16,r16,18168
   324e4:	80c00017 	ldw	r3,0(r16)
   324e8:	dc400415 	stw	r17,16(sp)
   324ec:	dfc00515 	stw	ra,20(sp)
   324f0:	18805217 	ldw	r2,328(r3)
   324f4:	2023883a 	mov	r17,r4
   324f8:	10003726 	beq	r2,zero,325d8 <__register_exitproc+0x104>
   324fc:	10c00117 	ldw	r3,4(r2)
   32500:	010007c4 	movi	r4,31
   32504:	20c00e16 	blt	r4,r3,32540 <__register_exitproc+0x6c>
   32508:	1a000044 	addi	r8,r3,1
   3250c:	8800221e 	bne	r17,zero,32598 <__register_exitproc+0xc4>
   32510:	18c00084 	addi	r3,r3,2
   32514:	18c7883a 	add	r3,r3,r3
   32518:	18c7883a 	add	r3,r3,r3
   3251c:	12000115 	stw	r8,4(r2)
   32520:	10c7883a 	add	r3,r2,r3
   32524:	19400015 	stw	r5,0(r3)
   32528:	0005883a 	mov	r2,zero
   3252c:	dfc00517 	ldw	ra,20(sp)
   32530:	dc400417 	ldw	r17,16(sp)
   32534:	dc000317 	ldw	r16,12(sp)
   32538:	dec00604 	addi	sp,sp,24
   3253c:	f800283a 	ret
   32540:	00800034 	movhi	r2,0
   32544:	10800004 	addi	r2,r2,0
   32548:	10002626 	beq	r2,zero,325e4 <__register_exitproc+0x110>
   3254c:	01006404 	movi	r4,400
   32550:	d9400015 	stw	r5,0(sp)
   32554:	d9800115 	stw	r6,4(sp)
   32558:	d9c00215 	stw	r7,8(sp)
   3255c:	00000000 	call	0 <__alt_mem_RAM-0x20000>
   32560:	d9400017 	ldw	r5,0(sp)
   32564:	d9800117 	ldw	r6,4(sp)
   32568:	d9c00217 	ldw	r7,8(sp)
   3256c:	10001d26 	beq	r2,zero,325e4 <__register_exitproc+0x110>
   32570:	81000017 	ldw	r4,0(r16)
   32574:	10000115 	stw	zero,4(r2)
   32578:	02000044 	movi	r8,1
   3257c:	22405217 	ldw	r9,328(r4)
   32580:	0007883a 	mov	r3,zero
   32584:	12400015 	stw	r9,0(r2)
   32588:	20805215 	stw	r2,328(r4)
   3258c:	10006215 	stw	zero,392(r2)
   32590:	10006315 	stw	zero,396(r2)
   32594:	883fde26 	beq	r17,zero,32510 <__alt_data_end+0xffff2510>
   32598:	18c9883a 	add	r4,r3,r3
   3259c:	2109883a 	add	r4,r4,r4
   325a0:	1109883a 	add	r4,r2,r4
   325a4:	21802215 	stw	r6,136(r4)
   325a8:	01800044 	movi	r6,1
   325ac:	12406217 	ldw	r9,392(r2)
   325b0:	30cc983a 	sll	r6,r6,r3
   325b4:	4992b03a 	or	r9,r9,r6
   325b8:	12406215 	stw	r9,392(r2)
   325bc:	21c04215 	stw	r7,264(r4)
   325c0:	01000084 	movi	r4,2
   325c4:	893fd21e 	bne	r17,r4,32510 <__alt_data_end+0xffff2510>
   325c8:	11006317 	ldw	r4,396(r2)
   325cc:	218cb03a 	or	r6,r4,r6
   325d0:	11806315 	stw	r6,396(r2)
   325d4:	003fce06 	br	32510 <__alt_data_end+0xffff2510>
   325d8:	18805304 	addi	r2,r3,332
   325dc:	18805215 	stw	r2,328(r3)
   325e0:	003fc606 	br	324fc <__alt_data_end+0xffff24fc>
   325e4:	00bfffc4 	movi	r2,-1
   325e8:	003fd006 	br	3252c <__alt_data_end+0xffff252c>

000325ec <__call_exitprocs>:
   325ec:	defff504 	addi	sp,sp,-44
   325f0:	df000915 	stw	fp,36(sp)
   325f4:	dd400615 	stw	r21,24(sp)
   325f8:	dc800315 	stw	r18,12(sp)
   325fc:	dfc00a15 	stw	ra,40(sp)
   32600:	ddc00815 	stw	r23,32(sp)
   32604:	dd800715 	stw	r22,28(sp)
   32608:	dd000515 	stw	r20,20(sp)
   3260c:	dcc00415 	stw	r19,16(sp)
   32610:	dc400215 	stw	r17,8(sp)
   32614:	dc000115 	stw	r16,4(sp)
   32618:	d9000015 	stw	r4,0(sp)
   3261c:	2839883a 	mov	fp,r5
   32620:	04800044 	movi	r18,1
   32624:	057fffc4 	movi	r21,-1
   32628:	008000f4 	movhi	r2,3
   3262c:	1091be04 	addi	r2,r2,18168
   32630:	12000017 	ldw	r8,0(r2)
   32634:	45005217 	ldw	r20,328(r8)
   32638:	44c05204 	addi	r19,r8,328
   3263c:	a0001c26 	beq	r20,zero,326b0 <__call_exitprocs+0xc4>
   32640:	a0800117 	ldw	r2,4(r20)
   32644:	15ffffc4 	addi	r23,r2,-1
   32648:	b8000d16 	blt	r23,zero,32680 <__call_exitprocs+0x94>
   3264c:	14000044 	addi	r16,r2,1
   32650:	8421883a 	add	r16,r16,r16
   32654:	8421883a 	add	r16,r16,r16
   32658:	84402004 	addi	r17,r16,128
   3265c:	a463883a 	add	r17,r20,r17
   32660:	a421883a 	add	r16,r20,r16
   32664:	e0001e26 	beq	fp,zero,326e0 <__call_exitprocs+0xf4>
   32668:	80804017 	ldw	r2,256(r16)
   3266c:	e0801c26 	beq	fp,r2,326e0 <__call_exitprocs+0xf4>
   32670:	bdffffc4 	addi	r23,r23,-1
   32674:	843fff04 	addi	r16,r16,-4
   32678:	8c7fff04 	addi	r17,r17,-4
   3267c:	bd7ff91e 	bne	r23,r21,32664 <__alt_data_end+0xffff2664>
   32680:	00800034 	movhi	r2,0
   32684:	10800004 	addi	r2,r2,0
   32688:	10000926 	beq	r2,zero,326b0 <__call_exitprocs+0xc4>
   3268c:	a0800117 	ldw	r2,4(r20)
   32690:	1000301e 	bne	r2,zero,32754 <__call_exitprocs+0x168>
   32694:	a0800017 	ldw	r2,0(r20)
   32698:	10003226 	beq	r2,zero,32764 <__call_exitprocs+0x178>
   3269c:	a009883a 	mov	r4,r20
   326a0:	98800015 	stw	r2,0(r19)
   326a4:	00000000 	call	0 <__alt_mem_RAM-0x20000>
   326a8:	9d000017 	ldw	r20,0(r19)
   326ac:	a03fe41e 	bne	r20,zero,32640 <__alt_data_end+0xffff2640>
   326b0:	dfc00a17 	ldw	ra,40(sp)
   326b4:	df000917 	ldw	fp,36(sp)
   326b8:	ddc00817 	ldw	r23,32(sp)
   326bc:	dd800717 	ldw	r22,28(sp)
   326c0:	dd400617 	ldw	r21,24(sp)
   326c4:	dd000517 	ldw	r20,20(sp)
   326c8:	dcc00417 	ldw	r19,16(sp)
   326cc:	dc800317 	ldw	r18,12(sp)
   326d0:	dc400217 	ldw	r17,8(sp)
   326d4:	dc000117 	ldw	r16,4(sp)
   326d8:	dec00b04 	addi	sp,sp,44
   326dc:	f800283a 	ret
   326e0:	a0800117 	ldw	r2,4(r20)
   326e4:	80c00017 	ldw	r3,0(r16)
   326e8:	10bfffc4 	addi	r2,r2,-1
   326ec:	15c01426 	beq	r2,r23,32740 <__call_exitprocs+0x154>
   326f0:	80000015 	stw	zero,0(r16)
   326f4:	183fde26 	beq	r3,zero,32670 <__alt_data_end+0xffff2670>
   326f8:	95c8983a 	sll	r4,r18,r23
   326fc:	a0806217 	ldw	r2,392(r20)
   32700:	a5800117 	ldw	r22,4(r20)
   32704:	2084703a 	and	r2,r4,r2
   32708:	10000b26 	beq	r2,zero,32738 <__call_exitprocs+0x14c>
   3270c:	a0806317 	ldw	r2,396(r20)
   32710:	2088703a 	and	r4,r4,r2
   32714:	20000c1e 	bne	r4,zero,32748 <__call_exitprocs+0x15c>
   32718:	89400017 	ldw	r5,0(r17)
   3271c:	d9000017 	ldw	r4,0(sp)
   32720:	183ee83a 	callr	r3
   32724:	a0800117 	ldw	r2,4(r20)
   32728:	15bfbf1e 	bne	r2,r22,32628 <__alt_data_end+0xffff2628>
   3272c:	98800017 	ldw	r2,0(r19)
   32730:	153fcf26 	beq	r2,r20,32670 <__alt_data_end+0xffff2670>
   32734:	003fbc06 	br	32628 <__alt_data_end+0xffff2628>
   32738:	183ee83a 	callr	r3
   3273c:	003ff906 	br	32724 <__alt_data_end+0xffff2724>
   32740:	a5c00115 	stw	r23,4(r20)
   32744:	003feb06 	br	326f4 <__alt_data_end+0xffff26f4>
   32748:	89000017 	ldw	r4,0(r17)
   3274c:	183ee83a 	callr	r3
   32750:	003ff406 	br	32724 <__alt_data_end+0xffff2724>
   32754:	a0800017 	ldw	r2,0(r20)
   32758:	a027883a 	mov	r19,r20
   3275c:	1029883a 	mov	r20,r2
   32760:	003fb606 	br	3263c <__alt_data_end+0xffff263c>
   32764:	0005883a 	mov	r2,zero
   32768:	003ffb06 	br	32758 <__alt_data_end+0xffff2758>

0003276c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3276c:	defffd04 	addi	sp,sp,-12
   32770:	df000215 	stw	fp,8(sp)
   32774:	df000204 	addi	fp,sp,8
   32778:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   3277c:	0001883a 	nop
   32780:	e0bfff17 	ldw	r2,-4(fp)
   32784:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   32788:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   3278c:	10000226 	beq	r2,zero,32798 <_exit+0x2c>
    ALT_SIM_FAIL();
   32790:	002af070 	cmpltui	zero,zero,43969
   32794:	00000106 	br	3279c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   32798:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   3279c:	003fff06 	br	3279c <__alt_data_end+0xffff279c>
