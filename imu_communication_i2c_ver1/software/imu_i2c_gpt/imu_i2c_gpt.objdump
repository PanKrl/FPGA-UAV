
imu_i2c_gpt.elf:     file format elf32-littlenios2
imu_i2c_gpt.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00012970 memsz 0x00012970 flags r-x
    LOAD off    0x00013990 vaddr 0x00032990 paddr 0x00034580 align 2**12
         filesz 0x00001bf0 memsz 0x00001bf0 flags rw-
    LOAD off    0x00016170 vaddr 0x00036170 paddr 0x00036170 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000123dc  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000384  0003260c  0003260c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf0  00032990  00034580  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00036170  00036170  00016170  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000362d4  000362d4  00015580  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015580  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001008  00000000  00000000  000155a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027345  00000000  00000000  000165b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f59  00000000  00000000  0003d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c67d  00000000  00000000  0004784e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a6c  00000000  00000000  00053ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004640  00000000  00000000  00056938  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b11  00000000  00000000  0005af78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00072a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001930  00000000  00000000  00072ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007802e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00078031  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078037  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078038  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00078039  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007803d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00078041  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00078045  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00078049  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0007804d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00078051  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  0007805e  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c22  00000000  00000000  0007808d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006681e  00000000  00000000  0007ccaf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
0003260c l    d  .rodata	00000000 .rodata
00032990 l    d  .rwdata	00000000 .rwdata
00036170 l    d  .bss	00000000 .bss
000362d4 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../imu_i2c_gpt_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 imu_i2c_gpt.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000326ae l     O .rodata	00000010 zeroes.4404
00022a90 l     F .text	000000bc __sbprintf
000326be l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022ca0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000247f8 l     F .text	00000008 __fp_unlock
0002480c l     F .text	0000019c __sinit.part.1
000249a8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00032990 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00032dd4 l     O .rwdata	00000020 lc_ctype_charset
00032db4 l     O .rwdata	00000020 lc_message_charset
00032df4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000326f0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00027fe4 l     F .text	000000fc __sprint_r.part.0
00032814 l     O .rodata	00000010 zeroes.4349
00029620 l     F .text	000000bc __sbprintf
00032824 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d668 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d77c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d7a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d89c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d984 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002da70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002dc4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00034568 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002def0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e02c l     F .text	00000034 alt_dev_reg
000333dc l     O .rwdata	00000038 I2C
00033414 l     O .rwdata	00001060 JTAG
00034474 l     O .rwdata	000000c4 UART1
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0002e110 l     F .text	00000110 optional_irq_callback
0002e270 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002ff4c l     F .text	0000020c altera_avalon_jtag_uart_irq
00030158 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0003094c l     F .text	0000009c altera_avalon_uart_irq
000309e8 l     F .text	000000e4 altera_avalon_uart_rxirq
00030acc l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00030c68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00030e80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003130c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000317fc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0003195c l     F .text	0000003c alt_get_errno
00031998 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000361a8 g     O .bss	00000004 alt_instruction_exception_handler
00020614 g     F .text	00000018 putchar
000274c0 g     F .text	00000074 _mprec_log10
000275ac g     F .text	0000008c __any_on
00029d2c g     F .text	00000054 _isatty_r
000326fc g     O .rodata	00000028 __mprec_tinytens
0002db88 g     F .text	0000007c alt_main
0002062c g     F .text	000000c0 _puts_r
000361d4 g     O .bss	00000100 alt_irq
00029d80 g     F .text	00000060 _lseek_r
00034580 g       *ABS*	00000000 __flash_rwdata_start
0002c040 g     F .text	00000088 .hidden __eqdf2
000362d4 g       *ABS*	00000000 __alt_heap_start
000205d0 g     F .text	0000003c printf
00029e40 g     F .text	0000009c _wcrtomb_r
00027ea4 g     F .text	0000005c __sseek
00024b58 g     F .text	00000010 __sinit
000296dc g     F .text	00000140 __swbuf_r
0002562c g     F .text	0000007c _setlocale_r
000249b0 g     F .text	00000078 __sfmoreglue
0002e968 g     F .text	000000a8 alt_avalon_i2c_rx_read
0002dc28 g     F .text	00000024 __malloc_unlock
0002fb80 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0002e6ec g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
000262fc g     F .text	0000015c memmove
00024b40 g     F .text	00000018 _cleanup
0002f3d0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00026580 g     F .text	000000a8 _Balloc
0002c0c8 g     F .text	000000dc .hidden __gtdf2
00031fec g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029cd0 g     F .text	0000005c _fstat_r
0003618c g     O .bss	00000004 errno
00027e20 g     F .text	00000008 __seofread
00036194 g     O .bss	00000004 alt_argv
0003c538 g       *ABS*	00000000 _gp
0002dec0 g     F .text	00000030 usleep
0002fbc4 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0002e87c g     F .text	00000044 alt_avalon_i2c_is_busy
0003325c g     O .rwdata	00000180 alt_fd_list
0002060c g     F .text	00000008 _putchar_r
0002e620 g     F .text	000000cc alt_avalon_i2c_master_config_set
000314ac g     F .text	00000090 alt_find_dev
000261b4 g     F .text	00000148 memcpy
00024800 g     F .text	0000000c _cleanup_r
0002d480 g     F .text	000000dc .hidden __floatsidf
000318e0 g     F .text	0000007c alt_io_redirect
0002c1a4 g     F .text	000000f4 .hidden __ltdf2
0003260c g       *ABS*	00000000 __DTOR_END__
0002f210 g     F .text	000001c0 alt_avalon_i2c_master_transmit
000206ec g     F .text	00000014 puts
000321dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027d04 g     F .text	00000074 __fpclassifyd
0002741c g     F .text	000000a4 __ratio
00029604 g     F .text	0000001c __vfiprintf_internal
00030350 g     F .text	0000021c altera_avalon_jtag_uart_read
000205a0 g     F .text	00000030 _printf_r
0002ace0 g     F .text	00000064 .hidden __udivsi3
0002d8d8 g     F .text	000000ac isatty
0003274c g     O .rodata	000000c8 __mprec_tens
000256a8 g     F .text	0000000c __locale_charset
0002e48c g     F .text	00000098 alt_avalon_i2c_enable
00036188 g     O .bss	00000004 __malloc_top_pad
0002fab4 g     F .text	00000068 alt_avalon_i2c_int_disable
00034540 g     O .rwdata	00000004 __mb_cur_max
000256d8 g     F .text	0000000c _localeconv_r
0002030c g     F .text	00000080 bno055_write_byte
000269b4 g     F .text	0000003c __i2b
00024fdc g     F .text	000004c8 __sfvwrite_r
00027d78 g     F .text	00000054 _sbrk_r
00029de0 g     F .text	00000060 _read_r
00034560 g     O .rwdata	00000004 alt_max_fd
000299c4 g     F .text	000000f0 _fclose_r
000247c8 g     F .text	00000030 fflush
00036184 g     O .bss	00000004 __malloc_max_sbrked_mem
0002f5dc g     F .text	00000210 alt_avalon_i2c_master_receive
0002adc4 g     F .text	000008ac .hidden __adddf3
000271c4 g     F .text	0000010c __b2d
0002a624 g     F .text	000005c4 .hidden __umoddi3
0002daac g     F .text	000000dc lseek
0002fb1c g     F .text	00000064 alt_avalon_i2c_int_enable
00034538 g     O .rwdata	00000004 _global_impure_ptr
000277a0 g     F .text	00000564 _realloc_r
000362d4 g       *ABS*	00000000 __bss_end
0003170c g     F .text	000000f0 alt_iic_isr_register
00031ee4 g     F .text	00000108 alt_tick
0002a028 g     F .text	000005fc .hidden __udivdi3
0002f9dc g     F .text	00000058 alt_avalon_i2c_int_status_get
00029c2c g     F .text	00000024 _fputwc_r
00032724 g     O .rodata	00000028 __mprec_bigtens
00026798 g     F .text	00000104 __s2b
0002d55c g     F .text	000000a8 .hidden __floatunsidf
00026f04 g     F .text	00000060 __mcmp
000308a0 g     F .text	000000ac altera_avalon_uart_init
00024b78 g     F .text	00000018 __fp_lock_all
000316c0 g     F .text	0000004c alt_ic_irq_enabled
00031e48 g     F .text	0000009c alt_alarm_stop
0002e30c g     F .text	00000054 alt_avalon_i2c_register_callback
0003619c g     O .bss	00000004 alt_irq_active
0002e360 g     F .text	000000ec alt_avalon_i2c_init
000200fc g     F .exceptions	000000d4 alt_irq_handler
00033234 g     O .rwdata	00000028 alt_dev_null
000312ec g     F .text	00000020 alt_dcache_flush_all
0002689c g     F .text	00000068 __hi0bits
0002d400 g     F .text	00000080 .hidden __fixdfsi
0002026c g     F .text	00000060 bno055_read_byte
00034580 g       *ABS*	00000000 __ram_rwdata_end
00034558 g     O .rwdata	00000008 alt_dev_list
0002df2c g     F .text	00000100 write
00027638 g     F .text	000000a0 _putc_r
0002ec9c g     F .text	0000004c alt_avalon_i2c_check_arblost
0002fa78 g     F .text	0000003c alt_avalon_i2c_int_clear
00032990 g       *ABS*	00000000 __ram_rodata_end
0002d7e4 g     F .text	000000b8 fstat
0002c1a4 g     F .text	000000f4 .hidden __ledf2
0003456c g     O .rwdata	00000008 alt_avalon_i2c_list
00026c7c g     F .text	00000140 __pow5mult
000280f8 g     F .text	0000150c ___vfiprintf_internal_r
0003617c g     O .bss	00000004 __nlocale_changed
0002ad44 g     F .text	00000058 .hidden __umodsi3
000362d4 g       *ABS*	00000000 end
00030ebc g     F .text	000001ac altera_avalon_uart_write
0002fe8c g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0002e44c g     F .text	00000040 alt_avalon_i2c_open
000203dc g     F .text	0000015c IMU_init
0003260c g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002ee24 g     F .text	000000e8 alt_avalon_i2c_master_tx
000307f0 g     F .text	00000060 altera_avalon_uart_write_fd
0002d604 g     F .text	00000064 .hidden __clzsi2
00030850 g     F .text	00000050 altera_avalon_uart_close_fd
0003056c g     F .text	00000224 altera_avalon_jtag_uart_write
00024b68 g     F .text	00000004 __sfp_lock_acquire
000260d0 g     F .text	000000e4 memchr
00020798 g     F .text	000022dc ___vfprintf_internal_r
00024ccc g     F .text	00000310 _free_r
00031be0 g     F .text	0000022c alt_printf
000256b4 g     F .text	00000010 __locale_mb_cur_max
00032458 g     F .text	00000180 __call_exitprocs
00036178 g     O .bss	00000004 __mlocale_changed
0002e220 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00034544 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
000361a0 g     O .bss	00000004 _alt_tick_rate
0002f7ec g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0002fc10 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00026dbc g     F .text	00000148 __lshift
000361a4 g     O .bss	00000004 _alt_nticks
0002dc88 g     F .text	00000104 read
0002e098 g     F .text	00000078 alt_sys_init
00032340 g     F .text	00000118 __register_exitproc
0002f048 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000269f0 g     F .text	0000028c __multiply
000301f8 g     F .text	00000068 altera_avalon_jtag_uart_close
0002ad9c g     F .text	00000028 .hidden __mulsi3
00032990 g       *ABS*	00000000 __ram_rwdata_start
0003260c g       *ABS*	00000000 __ram_rodata_start
000361ac g     O .bss	00000028 __malloc_current_mallinfo
000272d0 g     F .text	0000014c __d2b
0002fd28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00032118 g     F .text	000000c4 alt_get_fd
00031194 g     F .text	00000158 alt_busy_sleep
00029894 g     F .text	00000054 _close_r
000322c4 g     F .text	0000007c memcmp
0002e8c0 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0002fde8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000362d4 g       *ABS*	00000000 __alt_stack_base
0002fe38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022b4c g     F .text	00000154 __swsetup_r
00036170 g     O .bss	00000004 i2c_dev
0002b670 g     F .text	000009d0 .hidden __divdf3
00024a28 g     F .text	00000118 __sfp
00027534 g     F .text	00000078 __copybits
00032e2c g     O .rwdata	00000408 __malloc_av_
00024b74 g     F .text	00000004 __sinit_lock_release
0002c298 g     F .text	0000086c .hidden __muldf3
00027dcc g     F .text	00000054 __sread
00032010 g     F .text	00000108 alt_find_file
00031348 g     F .text	000000a4 alt_dev_llist_insert
0002dc04 g     F .text	00000024 __malloc_lock
0002de10 g     F .text	000000b0 sbrk
0002ece8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0002ec50 g     F .text	0000004c alt_avalon_i2c_check_nack
0002476c g     F .text	0000005c _fflush_r
000298e8 g     F .text	000000dc _calloc_r
000202cc g     F .text	00000040 read_byte
00036170 g       *ABS*	00000000 __bss_start
00026458 g     F .text	00000128 memset
00020538 g     F .text	00000068 main
00020000 g       *ABS*	00000000 __alt_mem_RAM
0002ec1c g     F .text	00000034 alt_avalon_i2c_master_target_set
00036198 g     O .bss	00000004 alt_envp
00036180 g     O .bss	00000004 __malloc_max_total_mem
0002fd88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002981c g     F .text	00000018 __swbuf
0002fa34 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00027f00 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00029ab4 g     F .text	00000014 fclose
00022ec8 g     F .text	00001688 _dtoa_r
000258c4 g     F .text	0000080c _malloc_r
00029f9c g     F .text	00000030 __ascii_wctomb
00034564 g     O .rwdata	00000004 alt_errno
000254a4 g     F .text	000000c4 _fwalk
000276d8 g     F .text	000000c8 putc
0002abe8 g     F .text	00000084 .hidden __divsi3
00024ba8 g     F .text	00000124 _malloc_trim_r
0003260c g       *ABS*	00000000 __CTOR_END__
00027f08 g     F .text	000000dc strcmp
0003260c g       *ABS*	00000000 __flash_rodata_start
0003260c g       *ABS*	00000000 __DTOR_LIST__
0002c040 g     F .text	00000088 .hidden __nedf2
0002e060 g     F .text	00000038 alt_irq_init
0002dd8c g     F .text	00000084 alt_release_fd
00032834 g     O .rodata	00000100 .hidden __clz_tab
00036174 g     O .bss	00000004 _PathLocale
00032278 g     F .text	00000014 atexit
00029834 g     F .text	00000060 _write_r
000256e4 g     F .text	00000018 setlocale
0003453c g     O .rwdata	00000004 _impure_ptr
00036190 g     O .bss	00000004 alt_argc
00024550 g     F .text	0000021c __sflush_r
0003144c g     F .text	00000060 _do_dtors
000256d0 g     F .text	00000008 __locale_cjk_lang
0002ebe4 g     F .text	00000038 alt_avalon_i2c_master_target_get
0002eaf4 g     F .text	000000f0 alt_avalon_i2c_send_address
00020020 g       .exceptions	00000000 alt_irq_entry
00027160 g     F .text	00000064 __ulp
00024b90 g     F .text	00000018 __fp_unlock_all
00034550 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000256fc g     F .text	0000000c localeconv
0002fcc0 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0003155c g     F .text	00000050 alt_ic_isr_register
0002e524 g     F .text	0000004c alt_avalon_i2c_disable
00034580 g       *ABS*	00000000 _edata
00030790 g     F .text	00000060 altera_avalon_uart_read_fd
000362d4 g       *ABS*	00000000 _end
00029ac8 g     F .text	00000164 __fputwc
00020230 g       *ABS*	00000000 __ram_exceptions_end
00030260 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002e570 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00031634 g     F .text	0000008c alt_ic_irq_disable
00027e28 g     F .text	0000007c __swrite
00034548 g     O .rwdata	00000004 __malloc_trim_threshold
000256c4 g     F .text	0000000c __locale_msgcharset
0003228c g     F .text	00000038 exit
00025568 g     F .text	000000c4 _fwalk_reent
00026f64 g     F .text	000001fc __mdiff
0002ac6c g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024b6c g     F .text	00000004 __sfp_lock_release
0002e780 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0002ea10 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00030c14 g     F .text	00000054 altera_avalon_uart_close
000325d8 g     F .text	00000034 _exit
00031068 g     F .text	0000012c alt_alarm_start
0002038c g     F .text	00000050 write_byte
00025708 g     F .text	000001bc __smakebuf_r
00020700 g     F .text	00000098 strlen
00031a84 g     F .text	0000015c open
0002c0c8 g     F .text	000000dc .hidden __gedf2
00031e0c g     F .text	0000003c alt_putchar
0003454c g     O .rwdata	00000004 __wctomb
000280e0 g     F .text	00000018 __sprint_r
0003153c g     F .text	00000020 alt_icache_flush_all
00034574 g     O .rwdata	00000004 alt_priority_mask
000315ac g     F .text	00000088 alt_ic_irq_enable
00022a74 g     F .text	0000001c __vfprintf_internal
00030ca4 g     F .text	000001dc altera_avalon_uart_read
00029fcc g     F .text	0000005c _wctomb_r
0002cb04 g     F .text	000008fc .hidden __subdf3
00026904 g     F .text	000000b0 __lo0bits
00034578 g     O .rwdata	00000008 alt_alarm_list
000313ec g     F .text	00000060 _do_ctors
00029edc g     F .text	000000c0 wcrtomb
0002d6a4 g     F .text	000000d8 close
0002fc74 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002d9ec g     F .text	00000084 alt_load
0002ef0c g     F .text	0000013c alt_avalon_i2c_master_rx
00029c50 g     F .text	00000080 fputwc
00024b70 g     F .text	00000004 __sinit_lock_acquire
00026650 g     F .text	00000148 __multadd
00026628 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10987504 	addi	r2,r2,25044
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10987504 	addi	r2,r2,25044
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a71c17 	ldw	r2,-25488(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a71c17 	ldw	r2,-25488(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6b14e14 	ori	gp,gp,50488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20244:	10985c14 	ori	r2,r2,24944

    movhi r3, %hi(__bss_end)
   20248:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   2024c:	18d8b514 	ori	r3,r3,25300

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002d9ec0 	call	2d9ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002db880 	call	2db88 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe0268>

0002026c <bno055_read_byte>:


ALT_AVALON_I2C_DEV_t*i2c_dev;

// Function to read a single byte from the BNO055 sensor
alt_u8 bno055_read_byte(ALT_AVALON_I2C_DEV_t*i2c_dev, alt_u8 reg_addr) {
   2026c:	defffb04 	addi	sp,sp,-20
   20270:	dfc00415 	stw	ra,16(sp)
   20274:	df000315 	stw	fp,12(sp)
   20278:	df000304 	addi	fp,sp,12
   2027c:	e13ffe15 	stw	r4,-8(fp)
   20280:	2805883a 	mov	r2,r5
   20284:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 data;
    alt_avalon_i2c_master_tx(i2c_dev,&reg_addr,1,ALT_AVALON_I2C_NO_INTERRUPTS);
   20288:	e0bfff04 	addi	r2,fp,-4
   2028c:	000f883a 	mov	r7,zero
   20290:	01800044 	movi	r6,1
   20294:	100b883a 	mov	r5,r2
   20298:	e13ffe17 	ldw	r4,-8(fp)
   2029c:	002ee240 	call	2ee24 <alt_avalon_i2c_master_tx>
    alt_avalon_i2c_master_rx(i2c_dev,&data,1,ALT_AVALON_I2C_NO_INTERRUPTS);
   202a0:	000f883a 	mov	r7,zero
   202a4:	01800044 	movi	r6,1
   202a8:	e17ffd04 	addi	r5,fp,-12
   202ac:	e13ffe17 	ldw	r4,-8(fp)
   202b0:	002ef0c0 	call	2ef0c <alt_avalon_i2c_master_rx>
    return data;
   202b4:	e0bffd03 	ldbu	r2,-12(fp)
}
   202b8:	e037883a 	mov	sp,fp
   202bc:	dfc00117 	ldw	ra,4(sp)
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00204 	addi	sp,sp,8
   202c8:	f800283a 	ret

000202cc <read_byte>:

alt_u8 read_byte(alt_u8 addr){
   202cc:	defffd04 	addi	sp,sp,-12
   202d0:	dfc00215 	stw	ra,8(sp)
   202d4:	df000115 	stw	fp,4(sp)
   202d8:	df000104 	addi	fp,sp,4
   202dc:	2005883a 	mov	r2,r4
   202e0:	e0bfff05 	stb	r2,-4(fp)
	return bno055_read_byte(i2c_dev,addr);
   202e4:	d0a70e17 	ldw	r2,-25544(gp)
   202e8:	e0ffff03 	ldbu	r3,-4(fp)
   202ec:	180b883a 	mov	r5,r3
   202f0:	1009883a 	mov	r4,r2
   202f4:	002026c0 	call	2026c <bno055_read_byte>
}
   202f8:	e037883a 	mov	sp,fp
   202fc:	dfc00117 	ldw	ra,4(sp)
   20300:	df000017 	ldw	fp,0(sp)
   20304:	dec00204 	addi	sp,sp,8
   20308:	f800283a 	ret

0002030c <bno055_write_byte>:



alt_u8 bno055_write_byte(ALT_AVALON_I2C_DEV_t*i2c_dev, alt_u8 reg_addr,alt_u8 data) {
   2030c:	defffa04 	addi	sp,sp,-24
   20310:	dfc00515 	stw	ra,20(sp)
   20314:	df000415 	stw	fp,16(sp)
   20318:	df000404 	addi	fp,sp,16
   2031c:	e13ffd15 	stw	r4,-12(fp)
   20320:	2807883a 	mov	r3,r5
   20324:	3005883a 	mov	r2,r6
   20328:	e0fffe05 	stb	r3,-8(fp)
   2032c:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 status;
    alt_avalon_i2c_master_tx(i2c_dev,&reg_addr,1,ALT_AVALON_I2C_NO_INTERRUPTS);
   20330:	e0bffe04 	addi	r2,fp,-8
   20334:	000f883a 	mov	r7,zero
   20338:	01800044 	movi	r6,1
   2033c:	100b883a 	mov	r5,r2
   20340:	e13ffd17 	ldw	r4,-12(fp)
   20344:	002ee240 	call	2ee24 <alt_avalon_i2c_master_tx>
    alt_avalon_i2c_master_tx(i2c_dev,&data,1,ALT_AVALON_I2C_NO_INTERRUPTS);
   20348:	e0bfff04 	addi	r2,fp,-4
   2034c:	000f883a 	mov	r7,zero
   20350:	01800044 	movi	r6,1
   20354:	100b883a 	mov	r5,r2
   20358:	e13ffd17 	ldw	r4,-12(fp)
   2035c:	002ee240 	call	2ee24 <alt_avalon_i2c_master_tx>

    alt_avalon_i2c_master_rx(i2c_dev,&status,1,ALT_AVALON_I2C_NO_INTERRUPTS);
   20360:	000f883a 	mov	r7,zero
   20364:	01800044 	movi	r6,1
   20368:	e17ffc04 	addi	r5,fp,-16
   2036c:	e13ffd17 	ldw	r4,-12(fp)
   20370:	002ef0c0 	call	2ef0c <alt_avalon_i2c_master_rx>
    return status;
   20374:	e0bffc03 	ldbu	r2,-16(fp)
}
   20378:	e037883a 	mov	sp,fp
   2037c:	dfc00117 	ldw	ra,4(sp)
   20380:	df000017 	ldw	fp,0(sp)
   20384:	dec00204 	addi	sp,sp,8
   20388:	f800283a 	ret

0002038c <write_byte>:

alt_u8 write_byte(alt_u8 addr,alt_u8 data){
   2038c:	defffc04 	addi	sp,sp,-16
   20390:	dfc00315 	stw	ra,12(sp)
   20394:	df000215 	stw	fp,8(sp)
   20398:	df000204 	addi	fp,sp,8
   2039c:	2007883a 	mov	r3,r4
   203a0:	2805883a 	mov	r2,r5
   203a4:	e0fffe05 	stb	r3,-8(fp)
   203a8:	e0bfff05 	stb	r2,-4(fp)
	return bno055_write_byte(i2c_dev,addr,data);
   203ac:	d0a70e17 	ldw	r2,-25544(gp)
   203b0:	e0fffe03 	ldbu	r3,-8(fp)
   203b4:	e13fff03 	ldbu	r4,-4(fp)
   203b8:	200d883a 	mov	r6,r4
   203bc:	180b883a 	mov	r5,r3
   203c0:	1009883a 	mov	r4,r2
   203c4:	002030c0 	call	2030c <bno055_write_byte>
}
   203c8:	e037883a 	mov	sp,fp
   203cc:	dfc00117 	ldw	ra,4(sp)
   203d0:	df000017 	ldw	fp,0(sp)
   203d4:	dec00204 	addi	sp,sp,8
   203d8:	f800283a 	ret

000203dc <IMU_init>:

alt_u8 IMU_init(void){
   203dc:	defffc04 	addi	sp,sp,-16
   203e0:	dfc00315 	stw	ra,12(sp)
   203e4:	df000215 	stw	fp,8(sp)
   203e8:	df000204 	addi	fp,sp,8
    // Initialize I2C
    i2c_dev =alt_avalon_i2c_open(I2C_NAME);
   203ec:	010000f4 	movhi	r4,3
   203f0:	21098304 	addi	r4,r4,9740
   203f4:	002e44c0 	call	2e44c <alt_avalon_i2c_open>
   203f8:	d0a70e15 	stw	r2,-25544(gp)
    if (i2c_dev == NULL) {
   203fc:	d0a70e17 	ldw	r2,-25544(gp)
   20400:	1000051e 	bne	r2,zero,20418 <IMU_init+0x3c>
        printf("Error: Could not open I2C device.\n");
   20404:	010000f4 	movhi	r4,3
   20408:	21098604 	addi	r4,r4,9752
   2040c:	00206ec0 	call	206ec <puts>
        return 1;
   20410:	00800044 	movi	r2,1
   20414:	00004306 	br	20524 <IMU_init+0x148>
    }
    alt_avalon_i2c_master_target_set(i2c_dev,BNO055_ADDR);//set device address
   20418:	d0a70e17 	ldw	r2,-25544(gp)
   2041c:	01400a04 	movi	r5,40
   20420:	1009883a 	mov	r4,r2
   20424:	002ec1c0 	call	2ec1c <alt_avalon_i2c_master_target_set>

	int timeout=850;
   20428:	0080d484 	movi	r2,850
   2042c:	e0bffe15 	stw	r2,-8(fp)
				break;
			}
			usleep(10);//retry!
			timeout-=10;
		}
		if(timeout<=0)
   20430:	e0bffe17 	ldw	r2,-8(fp)
   20434:	00800216 	blt	zero,r2,20440 <IMU_init+0x64>
			return FALSE;
   20438:	0005883a 	mov	r2,zero
   2043c:	00003906 	br	20524 <IMU_init+0x148>

		alt_u8 chip_id=read_byte(CHIP_ID_ADDR);
   20440:	0009883a 	mov	r4,zero
   20444:	00202cc0 	call	202cc <read_byte>
   20448:	e0bfff05 	stb	r2,-4(fp)
		if(chip_id!=0xa0){
   2044c:	e0bfff03 	ldbu	r2,-4(fp)
   20450:	10802820 	cmpeqi	r2,r2,160
   20454:	1000101e 	bne	r2,zero,20498 <IMU_init+0xbc>
			usleep(1000000);//hold on for boot
   20458:	010003f4 	movhi	r4,15
   2045c:	21109004 	addi	r4,r4,16960
   20460:	002dec00 	call	2dec0 <usleep>
			chip_id=read_byte(CHIP_ID_ADDR);
   20464:	0009883a 	mov	r4,zero
   20468:	00202cc0 	call	202cc <read_byte>
   2046c:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_SERIAL
			printf("chip_id=0x%x\n",chip_id);
   20470:	e0bfff03 	ldbu	r2,-4(fp)
   20474:	100b883a 	mov	r5,r2
   20478:	010000f4 	movhi	r4,3
   2047c:	21098f04 	addi	r4,r4,9788
   20480:	00205d00 	call	205d0 <printf>
	#endif
			if(chip_id!=0xa0){
   20484:	e0bfff03 	ldbu	r2,-4(fp)
   20488:	10802820 	cmpeqi	r2,r2,160
   2048c:	1000021e 	bne	r2,zero,20498 <IMU_init+0xbc>
			return FALSE;//still not
   20490:	0005883a 	mov	r2,zero
   20494:	00002306 	br	20524 <IMU_init+0x148>
			}
		}
		write_byte(OPR_MODE_ADDR,CONFIG_MODE);//operation mode>configuration mode
   20498:	000b883a 	mov	r5,zero
   2049c:	01000f44 	movi	r4,61
   204a0:	002038c0 	call	2038c <write_byte>
		write_byte(SYS_TRIGGER_ADDR,0x20);//
   204a4:	01400804 	movi	r5,32
   204a8:	01000fc4 	movi	r4,63
   204ac:	002038c0 	call	2038c <write_byte>
		usleep(30000);
   204b0:	011d4c04 	movi	r4,30000
   204b4:	002dec00 	call	2dec0 <usleep>
		while(read_byte(CHIP_ID_ADDR)!=0xa0){
   204b8:	00000206 	br	204c4 <IMU_init+0xe8>
			usleep(10000);
   204bc:	0109c404 	movi	r4,10000
   204c0:	002dec00 	call	2dec0 <usleep>
			}
		}
		write_byte(OPR_MODE_ADDR,CONFIG_MODE);//operation mode>configuration mode
		write_byte(SYS_TRIGGER_ADDR,0x20);//
		usleep(30000);
		while(read_byte(CHIP_ID_ADDR)!=0xa0){
   204c4:	0009883a 	mov	r4,zero
   204c8:	00202cc0 	call	202cc <read_byte>
   204cc:	10803fcc 	andi	r2,r2,255
   204d0:	10802818 	cmpnei	r2,r2,160
   204d4:	103ff91e 	bne	r2,zero,204bc <__alt_data_end+0xfffe04bc>
			usleep(10000);
		}
		usleep(50000);
   204d8:	0130d414 	movui	r4,50000
   204dc:	002dec00 	call	2dec0 <usleep>
		write_byte(PWR_MODE_ADDR,NORMAL_MODE);//power mode>normal mode
   204e0:	000b883a 	mov	r5,zero
   204e4:	01000f84 	movi	r4,62
   204e8:	002038c0 	call	2038c <write_byte>
		write_byte(PAGE_ID_ADDR,0);//page id>0
   204ec:	000b883a 	mov	r5,zero
   204f0:	010001c4 	movi	r4,7
   204f4:	002038c0 	call	2038c <write_byte>
		write_byte(SYS_TRIGGER_ADDR,0x0);
   204f8:	000b883a 	mov	r5,zero
   204fc:	01000fc4 	movi	r4,63
   20500:	002038c0 	call	2038c <write_byte>
		usleep(10000);
   20504:	0109c404 	movi	r4,10000
   20508:	002dec00 	call	2dec0 <usleep>
		write_byte(OPR_MODE_ADDR,IMU_MODE);//operation mode>IMU mode
   2050c:	01400304 	movi	r5,12
   20510:	01000f44 	movi	r4,61
   20514:	002038c0 	call	2038c <write_byte>
		usleep(20000);
   20518:	01138804 	movi	r4,20000
   2051c:	002dec00 	call	2dec0 <usleep>

		return TRUE;
   20520:	00800044 	movi	r2,1
}
   20524:	e037883a 	mov	sp,fp
   20528:	dfc00117 	ldw	ra,4(sp)
   2052c:	df000017 	ldw	fp,0(sp)
   20530:	dec00204 	addi	sp,sp,8
   20534:	f800283a 	ret

00020538 <main>:

int main() {
   20538:	defffc04 	addi	sp,sp,-16
   2053c:	dfc00315 	stw	ra,12(sp)
   20540:	df000215 	stw	fp,8(sp)
   20544:	dc000115 	stw	r16,4(sp)
   20548:	df000204 	addi	fp,sp,8
	printf("I2C_START\n");
   2054c:	010000f4 	movhi	r4,3
   20550:	21099304 	addi	r4,r4,9804
   20554:	00206ec0 	call	206ec <puts>
	IMU_init();
   20558:	00203dc0 	call	203dc <IMU_init>

	alt_u8 quat_w,quat_x,quat_y,quat_z;
    while(1){
		quat_w=read_byte(QUA_DATA_W_LSB)|(read_byte(QUA_DATA_W_MSB)<<8);
   2055c:	01000804 	movi	r4,32
   20560:	00202cc0 	call	202cc <read_byte>
   20564:	1021883a 	mov	r16,r2
   20568:	01000844 	movi	r4,33
   2056c:	00202cc0 	call	202cc <read_byte>
   20570:	10803fcc 	andi	r2,r2,255
   20574:	1004923a 	slli	r2,r2,8
   20578:	8084b03a 	or	r2,r16,r2
   2057c:	e0bffe05 	stb	r2,-8(fp)
//		quat_x=read_byte(QUA_DATA_X_LSB)|(read_byte(QUA_DATA_X_MSB)<<8);
//		quat_y=read_byte(QUA_DATA_Y_LSB)|(read_byte(QUA_DATA_Y_MSB)<<8);
//		quat_z=read_byte(QUA_DATA_Z_LSB)|(read_byte(QUA_DATA_Z_MSB)<<8);

        printf("quat_w=%04d ",quat_w);
   20580:	e0bffe03 	ldbu	r2,-8(fp)
   20584:	100b883a 	mov	r5,r2
   20588:	010000f4 	movhi	r4,3
   2058c:	21099604 	addi	r4,r4,9816
   20590:	00205d00 	call	205d0 <printf>
//        printf("quat_x=%04d ",quat_x);
//        printf("quat_y=%04d ",quat_y);
//        printf("quat_z=%04d ",quat_z);
        printf("\n");
   20594:	01000284 	movi	r4,10
   20598:	00206140 	call	20614 <putchar>
    }
   2059c:	003fef06 	br	2055c <__alt_data_end+0xfffe055c>

000205a0 <_printf_r>:
   205a0:	defffd04 	addi	sp,sp,-12
   205a4:	2805883a 	mov	r2,r5
   205a8:	dfc00015 	stw	ra,0(sp)
   205ac:	d9800115 	stw	r6,4(sp)
   205b0:	d9c00215 	stw	r7,8(sp)
   205b4:	21400217 	ldw	r5,8(r4)
   205b8:	d9c00104 	addi	r7,sp,4
   205bc:	100d883a 	mov	r6,r2
   205c0:	00207980 	call	20798 <___vfprintf_internal_r>
   205c4:	dfc00017 	ldw	ra,0(sp)
   205c8:	dec00304 	addi	sp,sp,12
   205cc:	f800283a 	ret

000205d0 <printf>:
   205d0:	defffc04 	addi	sp,sp,-16
   205d4:	dfc00015 	stw	ra,0(sp)
   205d8:	d9400115 	stw	r5,4(sp)
   205dc:	d9800215 	stw	r6,8(sp)
   205e0:	d9c00315 	stw	r7,12(sp)
   205e4:	008000f4 	movhi	r2,3
   205e8:	10914f04 	addi	r2,r2,17724
   205ec:	10800017 	ldw	r2,0(r2)
   205f0:	200b883a 	mov	r5,r4
   205f4:	d9800104 	addi	r6,sp,4
   205f8:	11000217 	ldw	r4,8(r2)
   205fc:	0022a740 	call	22a74 <__vfprintf_internal>
   20600:	dfc00017 	ldw	ra,0(sp)
   20604:	dec00404 	addi	sp,sp,16
   20608:	f800283a 	ret

0002060c <_putchar_r>:
   2060c:	21800217 	ldw	r6,8(r4)
   20610:	00276381 	jmpi	27638 <_putc_r>

00020614 <putchar>:
   20614:	008000f4 	movhi	r2,3
   20618:	10914f04 	addi	r2,r2,17724
   2061c:	200b883a 	mov	r5,r4
   20620:	11000017 	ldw	r4,0(r2)
   20624:	21800217 	ldw	r6,8(r4)
   20628:	00276381 	jmpi	27638 <_putc_r>

0002062c <_puts_r>:
   2062c:	defff604 	addi	sp,sp,-40
   20630:	dc000715 	stw	r16,28(sp)
   20634:	2021883a 	mov	r16,r4
   20638:	2809883a 	mov	r4,r5
   2063c:	dc400815 	stw	r17,32(sp)
   20640:	dfc00915 	stw	ra,36(sp)
   20644:	2823883a 	mov	r17,r5
   20648:	00207000 	call	20700 <strlen>
   2064c:	10c00044 	addi	r3,r2,1
   20650:	d8800115 	stw	r2,4(sp)
   20654:	008000f4 	movhi	r2,3
   20658:	10899a04 	addi	r2,r2,9832
   2065c:	d8800215 	stw	r2,8(sp)
   20660:	00800044 	movi	r2,1
   20664:	d8800315 	stw	r2,12(sp)
   20668:	00800084 	movi	r2,2
   2066c:	dc400015 	stw	r17,0(sp)
   20670:	d8c00615 	stw	r3,24(sp)
   20674:	dec00415 	stw	sp,16(sp)
   20678:	d8800515 	stw	r2,20(sp)
   2067c:	80000226 	beq	r16,zero,20688 <_puts_r+0x5c>
   20680:	80800e17 	ldw	r2,56(r16)
   20684:	10001426 	beq	r2,zero,206d8 <_puts_r+0xac>
   20688:	81400217 	ldw	r5,8(r16)
   2068c:	2880030b 	ldhu	r2,12(r5)
   20690:	10c8000c 	andi	r3,r2,8192
   20694:	1800061e 	bne	r3,zero,206b0 <_puts_r+0x84>
   20698:	29001917 	ldw	r4,100(r5)
   2069c:	00f7ffc4 	movi	r3,-8193
   206a0:	10880014 	ori	r2,r2,8192
   206a4:	20c6703a 	and	r3,r4,r3
   206a8:	2880030d 	sth	r2,12(r5)
   206ac:	28c01915 	stw	r3,100(r5)
   206b0:	d9800404 	addi	r6,sp,16
   206b4:	8009883a 	mov	r4,r16
   206b8:	0024fdc0 	call	24fdc <__sfvwrite_r>
   206bc:	1000091e 	bne	r2,zero,206e4 <_puts_r+0xb8>
   206c0:	00800284 	movi	r2,10
   206c4:	dfc00917 	ldw	ra,36(sp)
   206c8:	dc400817 	ldw	r17,32(sp)
   206cc:	dc000717 	ldw	r16,28(sp)
   206d0:	dec00a04 	addi	sp,sp,40
   206d4:	f800283a 	ret
   206d8:	8009883a 	mov	r4,r16
   206dc:	0024b580 	call	24b58 <__sinit>
   206e0:	003fe906 	br	20688 <__alt_data_end+0xfffe0688>
   206e4:	00bfffc4 	movi	r2,-1
   206e8:	003ff606 	br	206c4 <__alt_data_end+0xfffe06c4>

000206ec <puts>:
   206ec:	008000f4 	movhi	r2,3
   206f0:	10914f04 	addi	r2,r2,17724
   206f4:	200b883a 	mov	r5,r4
   206f8:	11000017 	ldw	r4,0(r2)
   206fc:	002062c1 	jmpi	2062c <_puts_r>

00020700 <strlen>:
   20700:	208000cc 	andi	r2,r4,3
   20704:	10002026 	beq	r2,zero,20788 <strlen+0x88>
   20708:	20800007 	ldb	r2,0(r4)
   2070c:	10002026 	beq	r2,zero,20790 <strlen+0x90>
   20710:	2005883a 	mov	r2,r4
   20714:	00000206 	br	20720 <strlen+0x20>
   20718:	10c00007 	ldb	r3,0(r2)
   2071c:	18001826 	beq	r3,zero,20780 <strlen+0x80>
   20720:	10800044 	addi	r2,r2,1
   20724:	10c000cc 	andi	r3,r2,3
   20728:	183ffb1e 	bne	r3,zero,20718 <__alt_data_end+0xfffe0718>
   2072c:	10c00017 	ldw	r3,0(r2)
   20730:	01ffbff4 	movhi	r7,65279
   20734:	39ffbfc4 	addi	r7,r7,-257
   20738:	00ca303a 	nor	r5,zero,r3
   2073c:	01a02074 	movhi	r6,32897
   20740:	19c7883a 	add	r3,r3,r7
   20744:	31a02004 	addi	r6,r6,-32640
   20748:	1946703a 	and	r3,r3,r5
   2074c:	1986703a 	and	r3,r3,r6
   20750:	1800091e 	bne	r3,zero,20778 <strlen+0x78>
   20754:	10800104 	addi	r2,r2,4
   20758:	10c00017 	ldw	r3,0(r2)
   2075c:	19cb883a 	add	r5,r3,r7
   20760:	00c6303a 	nor	r3,zero,r3
   20764:	28c6703a 	and	r3,r5,r3
   20768:	1986703a 	and	r3,r3,r6
   2076c:	183ff926 	beq	r3,zero,20754 <__alt_data_end+0xfffe0754>
   20770:	00000106 	br	20778 <strlen+0x78>
   20774:	10800044 	addi	r2,r2,1
   20778:	10c00007 	ldb	r3,0(r2)
   2077c:	183ffd1e 	bne	r3,zero,20774 <__alt_data_end+0xfffe0774>
   20780:	1105c83a 	sub	r2,r2,r4
   20784:	f800283a 	ret
   20788:	2005883a 	mov	r2,r4
   2078c:	003fe706 	br	2072c <__alt_data_end+0xfffe072c>
   20790:	0005883a 	mov	r2,zero
   20794:	f800283a 	ret

00020798 <___vfprintf_internal_r>:
   20798:	deffb804 	addi	sp,sp,-288
   2079c:	dfc04715 	stw	ra,284(sp)
   207a0:	ddc04515 	stw	r23,276(sp)
   207a4:	dd404315 	stw	r21,268(sp)
   207a8:	d9002d15 	stw	r4,180(sp)
   207ac:	282f883a 	mov	r23,r5
   207b0:	302b883a 	mov	r21,r6
   207b4:	d9c02e15 	stw	r7,184(sp)
   207b8:	df004615 	stw	fp,280(sp)
   207bc:	dd804415 	stw	r22,272(sp)
   207c0:	dd004215 	stw	r20,264(sp)
   207c4:	dcc04115 	stw	r19,260(sp)
   207c8:	dc804015 	stw	r18,256(sp)
   207cc:	dc403f15 	stw	r17,252(sp)
   207d0:	dc003e15 	stw	r16,248(sp)
   207d4:	00256d80 	call	256d8 <_localeconv_r>
   207d8:	10800017 	ldw	r2,0(r2)
   207dc:	1009883a 	mov	r4,r2
   207e0:	d8803415 	stw	r2,208(sp)
   207e4:	00207000 	call	20700 <strlen>
   207e8:	d8803715 	stw	r2,220(sp)
   207ec:	d8802d17 	ldw	r2,180(sp)
   207f0:	10000226 	beq	r2,zero,207fc <___vfprintf_internal_r+0x64>
   207f4:	10800e17 	ldw	r2,56(r2)
   207f8:	1000fb26 	beq	r2,zero,20be8 <___vfprintf_internal_r+0x450>
   207fc:	b880030b 	ldhu	r2,12(r23)
   20800:	10c8000c 	andi	r3,r2,8192
   20804:	1800061e 	bne	r3,zero,20820 <___vfprintf_internal_r+0x88>
   20808:	b9001917 	ldw	r4,100(r23)
   2080c:	00f7ffc4 	movi	r3,-8193
   20810:	10880014 	ori	r2,r2,8192
   20814:	20c6703a 	and	r3,r4,r3
   20818:	b880030d 	sth	r2,12(r23)
   2081c:	b8c01915 	stw	r3,100(r23)
   20820:	10c0020c 	andi	r3,r2,8
   20824:	1800c326 	beq	r3,zero,20b34 <___vfprintf_internal_r+0x39c>
   20828:	b8c00417 	ldw	r3,16(r23)
   2082c:	1800c126 	beq	r3,zero,20b34 <___vfprintf_internal_r+0x39c>
   20830:	1080068c 	andi	r2,r2,26
   20834:	00c00284 	movi	r3,10
   20838:	10c0c626 	beq	r2,r3,20b54 <___vfprintf_internal_r+0x3bc>
   2083c:	d8c00404 	addi	r3,sp,16
   20840:	050000f4 	movhi	r20,3
   20844:	d9001e04 	addi	r4,sp,120
   20848:	a509ab84 	addi	r20,r20,9902
   2084c:	d8c01e15 	stw	r3,120(sp)
   20850:	d8002015 	stw	zero,128(sp)
   20854:	d8001f15 	stw	zero,124(sp)
   20858:	d8003315 	stw	zero,204(sp)
   2085c:	d8003615 	stw	zero,216(sp)
   20860:	d8003815 	stw	zero,224(sp)
   20864:	1811883a 	mov	r8,r3
   20868:	d8003915 	stw	zero,228(sp)
   2086c:	d8003a15 	stw	zero,232(sp)
   20870:	d8002f15 	stw	zero,188(sp)
   20874:	d9002815 	stw	r4,160(sp)
   20878:	a8800007 	ldb	r2,0(r21)
   2087c:	10028b26 	beq	r2,zero,212ac <___vfprintf_internal_r+0xb14>
   20880:	00c00944 	movi	r3,37
   20884:	a823883a 	mov	r17,r21
   20888:	10c0021e 	bne	r2,r3,20894 <___vfprintf_internal_r+0xfc>
   2088c:	00001406 	br	208e0 <___vfprintf_internal_r+0x148>
   20890:	10c00326 	beq	r2,r3,208a0 <___vfprintf_internal_r+0x108>
   20894:	8c400044 	addi	r17,r17,1
   20898:	88800007 	ldb	r2,0(r17)
   2089c:	103ffc1e 	bne	r2,zero,20890 <__alt_data_end+0xfffe0890>
   208a0:	8d61c83a 	sub	r16,r17,r21
   208a4:	80000e26 	beq	r16,zero,208e0 <___vfprintf_internal_r+0x148>
   208a8:	d8c02017 	ldw	r3,128(sp)
   208ac:	d8801f17 	ldw	r2,124(sp)
   208b0:	45400015 	stw	r21,0(r8)
   208b4:	1c07883a 	add	r3,r3,r16
   208b8:	10800044 	addi	r2,r2,1
   208bc:	d8c02015 	stw	r3,128(sp)
   208c0:	44000115 	stw	r16,4(r8)
   208c4:	d8801f15 	stw	r2,124(sp)
   208c8:	00c001c4 	movi	r3,7
   208cc:	1880a916 	blt	r3,r2,20b74 <___vfprintf_internal_r+0x3dc>
   208d0:	42000204 	addi	r8,r8,8
   208d4:	d9402f17 	ldw	r5,188(sp)
   208d8:	2c0b883a 	add	r5,r5,r16
   208dc:	d9402f15 	stw	r5,188(sp)
   208e0:	88800007 	ldb	r2,0(r17)
   208e4:	1000aa26 	beq	r2,zero,20b90 <___vfprintf_internal_r+0x3f8>
   208e8:	8d400044 	addi	r21,r17,1
   208ec:	8c400047 	ldb	r17,1(r17)
   208f0:	0021883a 	mov	r16,zero
   208f4:	00bfffc4 	movi	r2,-1
   208f8:	0025883a 	mov	r18,zero
   208fc:	dc002905 	stb	r16,164(sp)
   20900:	d8002785 	stb	zero,158(sp)
   20904:	d8002b05 	stb	zero,172(sp)
   20908:	d8802a15 	stw	r2,168(sp)
   2090c:	d8003115 	stw	zero,196(sp)
   20910:	04c01604 	movi	r19,88
   20914:	05800244 	movi	r22,9
   20918:	9021883a 	mov	r16,r18
   2091c:	4039883a 	mov	fp,r8
   20920:	ad400044 	addi	r21,r21,1
   20924:	88bff804 	addi	r2,r17,-32
   20928:	98833236 	bltu	r19,r2,215f4 <___vfprintf_internal_r+0xe5c>
   2092c:	100490ba 	slli	r2,r2,2
   20930:	00c000b4 	movhi	r3,2
   20934:	18c25104 	addi	r3,r3,2372
   20938:	10c5883a 	add	r2,r2,r3
   2093c:	10800017 	ldw	r2,0(r2)
   20940:	1000683a 	jmp	r2
   20944:	000214ec 	andhi	zero,zero,2131
   20948:	000215f4 	movhi	zero,2135
   2094c:	000215f4 	movhi	zero,2135
   20950:	0002150c 	andi	zero,zero,2132
   20954:	000215f4 	movhi	zero,2135
   20958:	000215f4 	movhi	zero,2135
   2095c:	000215f4 	movhi	zero,2135
   20960:	000215f4 	movhi	zero,2135
   20964:	000215f4 	movhi	zero,2135
   20968:	000215f4 	movhi	zero,2135
   2096c:	00020bf4 	movhi	zero,2095
   20970:	000213fc 	xorhi	zero,zero,2127
   20974:	000215f4 	movhi	zero,2135
   20978:	00020ab8 	rdprs	zero,zero,2090
   2097c:	00020c18 	cmpnei	zero,zero,2096
   20980:	000215f4 	movhi	zero,2135
   20984:	00020c68 	cmpgeui	zero,zero,2097
   20988:	00020c74 	movhi	zero,2097
   2098c:	00020c74 	movhi	zero,2097
   20990:	00020c74 	movhi	zero,2097
   20994:	00020c74 	movhi	zero,2097
   20998:	00020c74 	movhi	zero,2097
   2099c:	00020c74 	movhi	zero,2097
   209a0:	00020c74 	movhi	zero,2097
   209a4:	00020c74 	movhi	zero,2097
   209a8:	00020c74 	movhi	zero,2097
   209ac:	000215f4 	movhi	zero,2135
   209b0:	000215f4 	movhi	zero,2135
   209b4:	000215f4 	movhi	zero,2135
   209b8:	000215f4 	movhi	zero,2135
   209bc:	000215f4 	movhi	zero,2135
   209c0:	000215f4 	movhi	zero,2135
   209c4:	000215f4 	movhi	zero,2135
   209c8:	000215f4 	movhi	zero,2135
   209cc:	000215f4 	movhi	zero,2135
   209d0:	000215f4 	movhi	zero,2135
   209d4:	00020cb0 	cmpltui	zero,zero,2098
   209d8:	00020d78 	rdprs	zero,zero,2101
   209dc:	000215f4 	movhi	zero,2135
   209e0:	00020d78 	rdprs	zero,zero,2101
   209e4:	000215f4 	movhi	zero,2135
   209e8:	000215f4 	movhi	zero,2135
   209ec:	000215f4 	movhi	zero,2135
   209f0:	000215f4 	movhi	zero,2135
   209f4:	00020e24 	muli	zero,zero,2104
   209f8:	000215f4 	movhi	zero,2135
   209fc:	000215f4 	movhi	zero,2135
   20a00:	00020e30 	cmpltui	zero,zero,2104
   20a04:	000215f4 	movhi	zero,2135
   20a08:	000215f4 	movhi	zero,2135
   20a0c:	000215f4 	movhi	zero,2135
   20a10:	000215f4 	movhi	zero,2135
   20a14:	000215f4 	movhi	zero,2135
   20a18:	000212b4 	movhi	zero,2122
   20a1c:	000215f4 	movhi	zero,2135
   20a20:	000215f4 	movhi	zero,2135
   20a24:	00021320 	cmpeqi	zero,zero,2124
   20a28:	000215f4 	movhi	zero,2135
   20a2c:	000215f4 	movhi	zero,2135
   20a30:	000215f4 	movhi	zero,2135
   20a34:	000215f4 	movhi	zero,2135
   20a38:	000215f4 	movhi	zero,2135
   20a3c:	000215f4 	movhi	zero,2135
   20a40:	000215f4 	movhi	zero,2135
   20a44:	000215f4 	movhi	zero,2135
   20a48:	000215f4 	movhi	zero,2135
   20a4c:	000215f4 	movhi	zero,2135
   20a50:	00021598 	cmpnei	zero,zero,2134
   20a54:	00021518 	cmpnei	zero,zero,2132
   20a58:	00020d78 	rdprs	zero,zero,2101
   20a5c:	00020d78 	rdprs	zero,zero,2101
   20a60:	00020d78 	rdprs	zero,zero,2101
   20a64:	00021538 	rdprs	zero,zero,2132
   20a68:	00021518 	cmpnei	zero,zero,2132
   20a6c:	000215f4 	movhi	zero,2135
   20a70:	000215f4 	movhi	zero,2135
   20a74:	00021544 	movi	zero,2133
   20a78:	000215f4 	movhi	zero,2135
   20a7c:	00021558 	cmpnei	zero,zero,2133
   20a80:	000213dc 	xori	zero,zero,2127
   20a84:	00020ac4 	movi	zero,2091
   20a88:	00021414 	movui	zero,2128
   20a8c:	000215f4 	movhi	zero,2135
   20a90:	00021420 	cmpeqi	zero,zero,2128
   20a94:	000215f4 	movhi	zero,2135
   20a98:	00021484 	movi	zero,2130
   20a9c:	000215f4 	movhi	zero,2135
   20aa0:	000215f4 	movhi	zero,2135
   20aa4:	000214a4 	muli	zero,zero,2130
   20aa8:	d8c03117 	ldw	r3,196(sp)
   20aac:	d8802e15 	stw	r2,184(sp)
   20ab0:	00c7c83a 	sub	r3,zero,r3
   20ab4:	d8c03115 	stw	r3,196(sp)
   20ab8:	84000114 	ori	r16,r16,4
   20abc:	ac400007 	ldb	r17,0(r21)
   20ac0:	003f9706 	br	20920 <__alt_data_end+0xfffe0920>
   20ac4:	00800c04 	movi	r2,48
   20ac8:	d8802705 	stb	r2,156(sp)
   20acc:	00801e04 	movi	r2,120
   20ad0:	d8802745 	stb	r2,157(sp)
   20ad4:	d9002a17 	ldw	r4,168(sp)
   20ad8:	d8802e17 	ldw	r2,184(sp)
   20adc:	d8002785 	stb	zero,158(sp)
   20ae0:	e011883a 	mov	r8,fp
   20ae4:	10c00104 	addi	r3,r2,4
   20ae8:	14c00017 	ldw	r19,0(r2)
   20aec:	002d883a 	mov	r22,zero
   20af0:	80800094 	ori	r2,r16,2
   20af4:	2002ca16 	blt	r4,zero,21620 <___vfprintf_internal_r+0xe88>
   20af8:	00bfdfc4 	movi	r2,-129
   20afc:	80a4703a 	and	r18,r16,r2
   20b00:	d8c02e15 	stw	r3,184(sp)
   20b04:	94800094 	ori	r18,r18,2
   20b08:	9802b41e 	bne	r19,zero,215dc <___vfprintf_internal_r+0xe44>
   20b0c:	014000f4 	movhi	r5,3
   20b10:	2949a404 	addi	r5,r5,9872
   20b14:	d9403915 	stw	r5,228(sp)
   20b18:	04401e04 	movi	r17,120
   20b1c:	d8802a17 	ldw	r2,168(sp)
   20b20:	0039883a 	mov	fp,zero
   20b24:	1001fa26 	beq	r2,zero,21310 <___vfprintf_internal_r+0xb78>
   20b28:	0027883a 	mov	r19,zero
   20b2c:	002d883a 	mov	r22,zero
   20b30:	00021906 	br	21398 <___vfprintf_internal_r+0xc00>
   20b34:	d9002d17 	ldw	r4,180(sp)
   20b38:	b80b883a 	mov	r5,r23
   20b3c:	0022b4c0 	call	22b4c <__swsetup_r>
   20b40:	1005dc1e 	bne	r2,zero,222b4 <___vfprintf_internal_r+0x1b1c>
   20b44:	b880030b 	ldhu	r2,12(r23)
   20b48:	00c00284 	movi	r3,10
   20b4c:	1080068c 	andi	r2,r2,26
   20b50:	10ff3a1e 	bne	r2,r3,2083c <__alt_data_end+0xfffe083c>
   20b54:	b880038f 	ldh	r2,14(r23)
   20b58:	103f3816 	blt	r2,zero,2083c <__alt_data_end+0xfffe083c>
   20b5c:	d9c02e17 	ldw	r7,184(sp)
   20b60:	d9002d17 	ldw	r4,180(sp)
   20b64:	a80d883a 	mov	r6,r21
   20b68:	b80b883a 	mov	r5,r23
   20b6c:	0022a900 	call	22a90 <__sbprintf>
   20b70:	00001106 	br	20bb8 <___vfprintf_internal_r+0x420>
   20b74:	d9002d17 	ldw	r4,180(sp)
   20b78:	d9801e04 	addi	r6,sp,120
   20b7c:	b80b883a 	mov	r5,r23
   20b80:	00280e00 	call	280e0 <__sprint_r>
   20b84:	1000081e 	bne	r2,zero,20ba8 <___vfprintf_internal_r+0x410>
   20b88:	da000404 	addi	r8,sp,16
   20b8c:	003f5106 	br	208d4 <__alt_data_end+0xfffe08d4>
   20b90:	d8802017 	ldw	r2,128(sp)
   20b94:	10000426 	beq	r2,zero,20ba8 <___vfprintf_internal_r+0x410>
   20b98:	d9002d17 	ldw	r4,180(sp)
   20b9c:	d9801e04 	addi	r6,sp,120
   20ba0:	b80b883a 	mov	r5,r23
   20ba4:	00280e00 	call	280e0 <__sprint_r>
   20ba8:	b880030b 	ldhu	r2,12(r23)
   20bac:	1080100c 	andi	r2,r2,64
   20bb0:	1005c01e 	bne	r2,zero,222b4 <___vfprintf_internal_r+0x1b1c>
   20bb4:	d8802f17 	ldw	r2,188(sp)
   20bb8:	dfc04717 	ldw	ra,284(sp)
   20bbc:	df004617 	ldw	fp,280(sp)
   20bc0:	ddc04517 	ldw	r23,276(sp)
   20bc4:	dd804417 	ldw	r22,272(sp)
   20bc8:	dd404317 	ldw	r21,268(sp)
   20bcc:	dd004217 	ldw	r20,264(sp)
   20bd0:	dcc04117 	ldw	r19,260(sp)
   20bd4:	dc804017 	ldw	r18,256(sp)
   20bd8:	dc403f17 	ldw	r17,252(sp)
   20bdc:	dc003e17 	ldw	r16,248(sp)
   20be0:	dec04804 	addi	sp,sp,288
   20be4:	f800283a 	ret
   20be8:	d9002d17 	ldw	r4,180(sp)
   20bec:	0024b580 	call	24b58 <__sinit>
   20bf0:	003f0206 	br	207fc <__alt_data_end+0xfffe07fc>
   20bf4:	d9002e17 	ldw	r4,184(sp)
   20bf8:	d9402e17 	ldw	r5,184(sp)
   20bfc:	21000017 	ldw	r4,0(r4)
   20c00:	28800104 	addi	r2,r5,4
   20c04:	d9003115 	stw	r4,196(sp)
   20c08:	203fa716 	blt	r4,zero,20aa8 <__alt_data_end+0xfffe0aa8>
   20c0c:	d8802e15 	stw	r2,184(sp)
   20c10:	ac400007 	ldb	r17,0(r21)
   20c14:	003f4206 	br	20920 <__alt_data_end+0xfffe0920>
   20c18:	ac400007 	ldb	r17,0(r21)
   20c1c:	01000a84 	movi	r4,42
   20c20:	a8c00044 	addi	r3,r21,1
   20c24:	89075826 	beq	r17,r4,22988 <___vfprintf_internal_r+0x21f0>
   20c28:	8cbff404 	addi	r18,r17,-48
   20c2c:	b486ae36 	bltu	r22,r18,226e8 <___vfprintf_internal_r+0x1f50>
   20c30:	0009883a 	mov	r4,zero
   20c34:	1823883a 	mov	r17,r3
   20c38:	01400284 	movi	r5,10
   20c3c:	002ad9c0 	call	2ad9c <__mulsi3>
   20c40:	88c00007 	ldb	r3,0(r17)
   20c44:	1489883a 	add	r4,r2,r18
   20c48:	8d400044 	addi	r21,r17,1
   20c4c:	1cbff404 	addi	r18,r3,-48
   20c50:	a823883a 	mov	r17,r21
   20c54:	b4bff82e 	bgeu	r22,r18,20c38 <__alt_data_end+0xfffe0c38>
   20c58:	1823883a 	mov	r17,r3
   20c5c:	2005f616 	blt	r4,zero,22438 <___vfprintf_internal_r+0x1ca0>
   20c60:	d9002a15 	stw	r4,168(sp)
   20c64:	003f2f06 	br	20924 <__alt_data_end+0xfffe0924>
   20c68:	84002014 	ori	r16,r16,128
   20c6c:	ac400007 	ldb	r17,0(r21)
   20c70:	003f2b06 	br	20920 <__alt_data_end+0xfffe0920>
   20c74:	8cbff404 	addi	r18,r17,-48
   20c78:	d8003115 	stw	zero,196(sp)
   20c7c:	0009883a 	mov	r4,zero
   20c80:	a823883a 	mov	r17,r21
   20c84:	01400284 	movi	r5,10
   20c88:	002ad9c0 	call	2ad9c <__mulsi3>
   20c8c:	88c00007 	ldb	r3,0(r17)
   20c90:	9089883a 	add	r4,r18,r2
   20c94:	ad400044 	addi	r21,r21,1
   20c98:	1cbff404 	addi	r18,r3,-48
   20c9c:	a823883a 	mov	r17,r21
   20ca0:	b4bff82e 	bgeu	r22,r18,20c84 <__alt_data_end+0xfffe0c84>
   20ca4:	1823883a 	mov	r17,r3
   20ca8:	d9003115 	stw	r4,196(sp)
   20cac:	003f1d06 	br	20924 <__alt_data_end+0xfffe0924>
   20cb0:	8025883a 	mov	r18,r16
   20cb4:	dc002903 	ldbu	r16,164(sp)
   20cb8:	e011883a 	mov	r8,fp
   20cbc:	84003fcc 	andi	r16,r16,255
   20cc0:	8007531e 	bne	r16,zero,22a10 <___vfprintf_internal_r+0x2278>
   20cc4:	94800414 	ori	r18,r18,16
   20cc8:	9080080c 	andi	r2,r18,32
   20ccc:	1003a326 	beq	r2,zero,21b5c <___vfprintf_internal_r+0x13c4>
   20cd0:	d9002e17 	ldw	r4,184(sp)
   20cd4:	20800117 	ldw	r2,4(r4)
   20cd8:	24c00017 	ldw	r19,0(r4)
   20cdc:	21000204 	addi	r4,r4,8
   20ce0:	d9002e15 	stw	r4,184(sp)
   20ce4:	102d883a 	mov	r22,r2
   20ce8:	10047316 	blt	r2,zero,21eb8 <___vfprintf_internal_r+0x1720>
   20cec:	d9002a17 	ldw	r4,168(sp)
   20cf0:	df002783 	ldbu	fp,158(sp)
   20cf4:	2003e416 	blt	r4,zero,21c88 <___vfprintf_internal_r+0x14f0>
   20cf8:	00ffdfc4 	movi	r3,-129
   20cfc:	9d84b03a 	or	r2,r19,r22
   20d00:	90e4703a 	and	r18,r18,r3
   20d04:	10018026 	beq	r2,zero,21308 <___vfprintf_internal_r+0xb70>
   20d08:	b003ab26 	beq	r22,zero,21bb8 <___vfprintf_internal_r+0x1420>
   20d0c:	dc402915 	stw	r17,164(sp)
   20d10:	dc001e04 	addi	r16,sp,120
   20d14:	b023883a 	mov	r17,r22
   20d18:	402d883a 	mov	r22,r8
   20d1c:	9809883a 	mov	r4,r19
   20d20:	880b883a 	mov	r5,r17
   20d24:	01800284 	movi	r6,10
   20d28:	000f883a 	mov	r7,zero
   20d2c:	002a6240 	call	2a624 <__umoddi3>
   20d30:	10800c04 	addi	r2,r2,48
   20d34:	843fffc4 	addi	r16,r16,-1
   20d38:	9809883a 	mov	r4,r19
   20d3c:	880b883a 	mov	r5,r17
   20d40:	80800005 	stb	r2,0(r16)
   20d44:	01800284 	movi	r6,10
   20d48:	000f883a 	mov	r7,zero
   20d4c:	002a0280 	call	2a028 <__udivdi3>
   20d50:	1027883a 	mov	r19,r2
   20d54:	10c4b03a 	or	r2,r2,r3
   20d58:	1823883a 	mov	r17,r3
   20d5c:	103fef1e 	bne	r2,zero,20d1c <__alt_data_end+0xfffe0d1c>
   20d60:	d8c02817 	ldw	r3,160(sp)
   20d64:	dc402917 	ldw	r17,164(sp)
   20d68:	b011883a 	mov	r8,r22
   20d6c:	1c07c83a 	sub	r3,r3,r16
   20d70:	d8c02b15 	stw	r3,172(sp)
   20d74:	00005f06 	br	20ef4 <___vfprintf_internal_r+0x75c>
   20d78:	8025883a 	mov	r18,r16
   20d7c:	dc002903 	ldbu	r16,164(sp)
   20d80:	e011883a 	mov	r8,fp
   20d84:	84003fcc 	andi	r16,r16,255
   20d88:	80071e1e 	bne	r16,zero,22a04 <___vfprintf_internal_r+0x226c>
   20d8c:	9080020c 	andi	r2,r18,8
   20d90:	1004af26 	beq	r2,zero,22050 <___vfprintf_internal_r+0x18b8>
   20d94:	d9002e17 	ldw	r4,184(sp)
   20d98:	d9402e17 	ldw	r5,184(sp)
   20d9c:	d8802e17 	ldw	r2,184(sp)
   20da0:	21000017 	ldw	r4,0(r4)
   20da4:	29400117 	ldw	r5,4(r5)
   20da8:	10800204 	addi	r2,r2,8
   20dac:	d9003615 	stw	r4,216(sp)
   20db0:	d9403815 	stw	r5,224(sp)
   20db4:	d8802e15 	stw	r2,184(sp)
   20db8:	d9003617 	ldw	r4,216(sp)
   20dbc:	d9403817 	ldw	r5,224(sp)
   20dc0:	da003d15 	stw	r8,244(sp)
   20dc4:	04000044 	movi	r16,1
   20dc8:	0027d040 	call	27d04 <__fpclassifyd>
   20dcc:	da003d17 	ldw	r8,244(sp)
   20dd0:	1404441e 	bne	r2,r16,21ee4 <___vfprintf_internal_r+0x174c>
   20dd4:	d9003617 	ldw	r4,216(sp)
   20dd8:	d9403817 	ldw	r5,224(sp)
   20ddc:	000d883a 	mov	r6,zero
   20de0:	000f883a 	mov	r7,zero
   20de4:	002c1a40 	call	2c1a4 <__ledf2>
   20de8:	da003d17 	ldw	r8,244(sp)
   20dec:	1005e316 	blt	r2,zero,2257c <___vfprintf_internal_r+0x1de4>
   20df0:	df002783 	ldbu	fp,158(sp)
   20df4:	008011c4 	movi	r2,71
   20df8:	1445580e 	bge	r2,r17,2235c <___vfprintf_internal_r+0x1bc4>
   20dfc:	040000f4 	movhi	r16,3
   20e00:	84099c04 	addi	r16,r16,9840
   20e04:	00c000c4 	movi	r3,3
   20e08:	00bfdfc4 	movi	r2,-129
   20e0c:	d8c02915 	stw	r3,164(sp)
   20e10:	90a4703a 	and	r18,r18,r2
   20e14:	d8c02b15 	stw	r3,172(sp)
   20e18:	d8002a15 	stw	zero,168(sp)
   20e1c:	d8003215 	stw	zero,200(sp)
   20e20:	00003a06 	br	20f0c <___vfprintf_internal_r+0x774>
   20e24:	84000214 	ori	r16,r16,8
   20e28:	ac400007 	ldb	r17,0(r21)
   20e2c:	003ebc06 	br	20920 <__alt_data_end+0xfffe0920>
   20e30:	8025883a 	mov	r18,r16
   20e34:	dc002903 	ldbu	r16,164(sp)
   20e38:	e011883a 	mov	r8,fp
   20e3c:	84003fcc 	andi	r16,r16,255
   20e40:	8007001e 	bne	r16,zero,22a44 <___vfprintf_internal_r+0x22ac>
   20e44:	94800414 	ori	r18,r18,16
   20e48:	9080080c 	andi	r2,r18,32
   20e4c:	1002fa26 	beq	r2,zero,21a38 <___vfprintf_internal_r+0x12a0>
   20e50:	d9002e17 	ldw	r4,184(sp)
   20e54:	d9402a17 	ldw	r5,168(sp)
   20e58:	d8002785 	stb	zero,158(sp)
   20e5c:	20800204 	addi	r2,r4,8
   20e60:	24c00017 	ldw	r19,0(r4)
   20e64:	25800117 	ldw	r22,4(r4)
   20e68:	2804b116 	blt	r5,zero,22130 <___vfprintf_internal_r+0x1998>
   20e6c:	013fdfc4 	movi	r4,-129
   20e70:	9d86b03a 	or	r3,r19,r22
   20e74:	d8802e15 	stw	r2,184(sp)
   20e78:	9124703a 	and	r18,r18,r4
   20e7c:	1802fb1e 	bne	r3,zero,21a6c <___vfprintf_internal_r+0x12d4>
   20e80:	d8c02a17 	ldw	r3,168(sp)
   20e84:	0039883a 	mov	fp,zero
   20e88:	1805e526 	beq	r3,zero,22620 <___vfprintf_internal_r+0x1e88>
   20e8c:	0027883a 	mov	r19,zero
   20e90:	002d883a 	mov	r22,zero
   20e94:	dc001e04 	addi	r16,sp,120
   20e98:	9806d0fa 	srli	r3,r19,3
   20e9c:	b008977a 	slli	r4,r22,29
   20ea0:	b02cd0fa 	srli	r22,r22,3
   20ea4:	9cc001cc 	andi	r19,r19,7
   20ea8:	98800c04 	addi	r2,r19,48
   20eac:	843fffc4 	addi	r16,r16,-1
   20eb0:	20e6b03a 	or	r19,r4,r3
   20eb4:	80800005 	stb	r2,0(r16)
   20eb8:	9d86b03a 	or	r3,r19,r22
   20ebc:	183ff61e 	bne	r3,zero,20e98 <__alt_data_end+0xfffe0e98>
   20ec0:	90c0004c 	andi	r3,r18,1
   20ec4:	18014126 	beq	r3,zero,213cc <___vfprintf_internal_r+0xc34>
   20ec8:	10803fcc 	andi	r2,r2,255
   20ecc:	1080201c 	xori	r2,r2,128
   20ed0:	10bfe004 	addi	r2,r2,-128
   20ed4:	00c00c04 	movi	r3,48
   20ed8:	10c13c26 	beq	r2,r3,213cc <___vfprintf_internal_r+0xc34>
   20edc:	80ffffc5 	stb	r3,-1(r16)
   20ee0:	d8c02817 	ldw	r3,160(sp)
   20ee4:	80bfffc4 	addi	r2,r16,-1
   20ee8:	1021883a 	mov	r16,r2
   20eec:	1887c83a 	sub	r3,r3,r2
   20ef0:	d8c02b15 	stw	r3,172(sp)
   20ef4:	d8802b17 	ldw	r2,172(sp)
   20ef8:	d9002a17 	ldw	r4,168(sp)
   20efc:	1100010e 	bge	r2,r4,20f04 <___vfprintf_internal_r+0x76c>
   20f00:	2005883a 	mov	r2,r4
   20f04:	d8802915 	stw	r2,164(sp)
   20f08:	d8003215 	stw	zero,200(sp)
   20f0c:	e7003fcc 	andi	fp,fp,255
   20f10:	e700201c 	xori	fp,fp,128
   20f14:	e73fe004 	addi	fp,fp,-128
   20f18:	e0000326 	beq	fp,zero,20f28 <___vfprintf_internal_r+0x790>
   20f1c:	d8c02917 	ldw	r3,164(sp)
   20f20:	18c00044 	addi	r3,r3,1
   20f24:	d8c02915 	stw	r3,164(sp)
   20f28:	90c0008c 	andi	r3,r18,2
   20f2c:	d8c02c15 	stw	r3,176(sp)
   20f30:	18000326 	beq	r3,zero,20f40 <___vfprintf_internal_r+0x7a8>
   20f34:	d8c02917 	ldw	r3,164(sp)
   20f38:	18c00084 	addi	r3,r3,2
   20f3c:	d8c02915 	stw	r3,164(sp)
   20f40:	90c0210c 	andi	r3,r18,132
   20f44:	d8c03015 	stw	r3,192(sp)
   20f48:	1801c51e 	bne	r3,zero,21660 <___vfprintf_internal_r+0xec8>
   20f4c:	d9003117 	ldw	r4,196(sp)
   20f50:	d8c02917 	ldw	r3,164(sp)
   20f54:	20e7c83a 	sub	r19,r4,r3
   20f58:	04c1c10e 	bge	zero,r19,21660 <___vfprintf_internal_r+0xec8>
   20f5c:	02400404 	movi	r9,16
   20f60:	d8c02017 	ldw	r3,128(sp)
   20f64:	d8801f17 	ldw	r2,124(sp)
   20f68:	4cc52f0e 	bge	r9,r19,22428 <___vfprintf_internal_r+0x1c90>
   20f6c:	014000f4 	movhi	r5,3
   20f70:	2949af84 	addi	r5,r5,9918
   20f74:	dc403b15 	stw	r17,236(sp)
   20f78:	d9403515 	stw	r5,212(sp)
   20f7c:	9823883a 	mov	r17,r19
   20f80:	482d883a 	mov	r22,r9
   20f84:	9027883a 	mov	r19,r18
   20f88:	070001c4 	movi	fp,7
   20f8c:	8025883a 	mov	r18,r16
   20f90:	dc002d17 	ldw	r16,180(sp)
   20f94:	00000306 	br	20fa4 <___vfprintf_internal_r+0x80c>
   20f98:	8c7ffc04 	addi	r17,r17,-16
   20f9c:	42000204 	addi	r8,r8,8
   20fa0:	b440130e 	bge	r22,r17,20ff0 <___vfprintf_internal_r+0x858>
   20fa4:	010000f4 	movhi	r4,3
   20fa8:	18c00404 	addi	r3,r3,16
   20fac:	10800044 	addi	r2,r2,1
   20fb0:	2109af84 	addi	r4,r4,9918
   20fb4:	41000015 	stw	r4,0(r8)
   20fb8:	45800115 	stw	r22,4(r8)
   20fbc:	d8c02015 	stw	r3,128(sp)
   20fc0:	d8801f15 	stw	r2,124(sp)
   20fc4:	e0bff40e 	bge	fp,r2,20f98 <__alt_data_end+0xfffe0f98>
   20fc8:	d9801e04 	addi	r6,sp,120
   20fcc:	b80b883a 	mov	r5,r23
   20fd0:	8009883a 	mov	r4,r16
   20fd4:	00280e00 	call	280e0 <__sprint_r>
   20fd8:	103ef31e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   20fdc:	8c7ffc04 	addi	r17,r17,-16
   20fe0:	d8c02017 	ldw	r3,128(sp)
   20fe4:	d8801f17 	ldw	r2,124(sp)
   20fe8:	da000404 	addi	r8,sp,16
   20fec:	b47fed16 	blt	r22,r17,20fa4 <__alt_data_end+0xfffe0fa4>
   20ff0:	9021883a 	mov	r16,r18
   20ff4:	9825883a 	mov	r18,r19
   20ff8:	8827883a 	mov	r19,r17
   20ffc:	dc403b17 	ldw	r17,236(sp)
   21000:	d9403517 	ldw	r5,212(sp)
   21004:	98c7883a 	add	r3,r19,r3
   21008:	10800044 	addi	r2,r2,1
   2100c:	41400015 	stw	r5,0(r8)
   21010:	44c00115 	stw	r19,4(r8)
   21014:	d8c02015 	stw	r3,128(sp)
   21018:	d8801f15 	stw	r2,124(sp)
   2101c:	010001c4 	movi	r4,7
   21020:	2082c516 	blt	r4,r2,21b38 <___vfprintf_internal_r+0x13a0>
   21024:	df002787 	ldb	fp,158(sp)
   21028:	42000204 	addi	r8,r8,8
   2102c:	e0000c26 	beq	fp,zero,21060 <___vfprintf_internal_r+0x8c8>
   21030:	d8801f17 	ldw	r2,124(sp)
   21034:	d9002784 	addi	r4,sp,158
   21038:	18c00044 	addi	r3,r3,1
   2103c:	10800044 	addi	r2,r2,1
   21040:	41000015 	stw	r4,0(r8)
   21044:	01000044 	movi	r4,1
   21048:	41000115 	stw	r4,4(r8)
   2104c:	d8c02015 	stw	r3,128(sp)
   21050:	d8801f15 	stw	r2,124(sp)
   21054:	010001c4 	movi	r4,7
   21058:	20825e16 	blt	r4,r2,219d4 <___vfprintf_internal_r+0x123c>
   2105c:	42000204 	addi	r8,r8,8
   21060:	d8802c17 	ldw	r2,176(sp)
   21064:	10000c26 	beq	r2,zero,21098 <___vfprintf_internal_r+0x900>
   21068:	d8801f17 	ldw	r2,124(sp)
   2106c:	d9002704 	addi	r4,sp,156
   21070:	18c00084 	addi	r3,r3,2
   21074:	10800044 	addi	r2,r2,1
   21078:	41000015 	stw	r4,0(r8)
   2107c:	01000084 	movi	r4,2
   21080:	41000115 	stw	r4,4(r8)
   21084:	d8c02015 	stw	r3,128(sp)
   21088:	d8801f15 	stw	r2,124(sp)
   2108c:	010001c4 	movi	r4,7
   21090:	20825816 	blt	r4,r2,219f4 <___vfprintf_internal_r+0x125c>
   21094:	42000204 	addi	r8,r8,8
   21098:	d9003017 	ldw	r4,192(sp)
   2109c:	00802004 	movi	r2,128
   210a0:	2081bb26 	beq	r4,r2,21790 <___vfprintf_internal_r+0xff8>
   210a4:	d9402a17 	ldw	r5,168(sp)
   210a8:	d8802b17 	ldw	r2,172(sp)
   210ac:	28adc83a 	sub	r22,r5,r2
   210b0:	0580310e 	bge	zero,r22,21178 <___vfprintf_internal_r+0x9e0>
   210b4:	07000404 	movi	fp,16
   210b8:	d8801f17 	ldw	r2,124(sp)
   210bc:	e584360e 	bge	fp,r22,22198 <___vfprintf_internal_r+0x1a00>
   210c0:	014000f4 	movhi	r5,3
   210c4:	2949ab84 	addi	r5,r5,9902
   210c8:	dc402a15 	stw	r17,168(sp)
   210cc:	d9402c15 	stw	r5,176(sp)
   210d0:	b023883a 	mov	r17,r22
   210d4:	04c001c4 	movi	r19,7
   210d8:	a82d883a 	mov	r22,r21
   210dc:	902b883a 	mov	r21,r18
   210e0:	8025883a 	mov	r18,r16
   210e4:	dc002d17 	ldw	r16,180(sp)
   210e8:	00000306 	br	210f8 <___vfprintf_internal_r+0x960>
   210ec:	8c7ffc04 	addi	r17,r17,-16
   210f0:	42000204 	addi	r8,r8,8
   210f4:	e440110e 	bge	fp,r17,2113c <___vfprintf_internal_r+0x9a4>
   210f8:	18c00404 	addi	r3,r3,16
   210fc:	10800044 	addi	r2,r2,1
   21100:	45000015 	stw	r20,0(r8)
   21104:	47000115 	stw	fp,4(r8)
   21108:	d8c02015 	stw	r3,128(sp)
   2110c:	d8801f15 	stw	r2,124(sp)
   21110:	98bff60e 	bge	r19,r2,210ec <__alt_data_end+0xfffe10ec>
   21114:	d9801e04 	addi	r6,sp,120
   21118:	b80b883a 	mov	r5,r23
   2111c:	8009883a 	mov	r4,r16
   21120:	00280e00 	call	280e0 <__sprint_r>
   21124:	103ea01e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21128:	8c7ffc04 	addi	r17,r17,-16
   2112c:	d8c02017 	ldw	r3,128(sp)
   21130:	d8801f17 	ldw	r2,124(sp)
   21134:	da000404 	addi	r8,sp,16
   21138:	e47fef16 	blt	fp,r17,210f8 <__alt_data_end+0xfffe10f8>
   2113c:	9021883a 	mov	r16,r18
   21140:	a825883a 	mov	r18,r21
   21144:	b02b883a 	mov	r21,r22
   21148:	882d883a 	mov	r22,r17
   2114c:	dc402a17 	ldw	r17,168(sp)
   21150:	d9002c17 	ldw	r4,176(sp)
   21154:	1d87883a 	add	r3,r3,r22
   21158:	10800044 	addi	r2,r2,1
   2115c:	41000015 	stw	r4,0(r8)
   21160:	45800115 	stw	r22,4(r8)
   21164:	d8c02015 	stw	r3,128(sp)
   21168:	d8801f15 	stw	r2,124(sp)
   2116c:	010001c4 	movi	r4,7
   21170:	20821016 	blt	r4,r2,219b4 <___vfprintf_internal_r+0x121c>
   21174:	42000204 	addi	r8,r8,8
   21178:	9080400c 	andi	r2,r18,256
   2117c:	10013a1e 	bne	r2,zero,21668 <___vfprintf_internal_r+0xed0>
   21180:	d9402b17 	ldw	r5,172(sp)
   21184:	d8801f17 	ldw	r2,124(sp)
   21188:	44000015 	stw	r16,0(r8)
   2118c:	1947883a 	add	r3,r3,r5
   21190:	10800044 	addi	r2,r2,1
   21194:	41400115 	stw	r5,4(r8)
   21198:	d8c02015 	stw	r3,128(sp)
   2119c:	d8801f15 	stw	r2,124(sp)
   211a0:	010001c4 	movi	r4,7
   211a4:	2081f516 	blt	r4,r2,2197c <___vfprintf_internal_r+0x11e4>
   211a8:	42000204 	addi	r8,r8,8
   211ac:	9480010c 	andi	r18,r18,4
   211b0:	90003226 	beq	r18,zero,2127c <___vfprintf_internal_r+0xae4>
   211b4:	d9403117 	ldw	r5,196(sp)
   211b8:	d8802917 	ldw	r2,164(sp)
   211bc:	28a1c83a 	sub	r16,r5,r2
   211c0:	04002e0e 	bge	zero,r16,2127c <___vfprintf_internal_r+0xae4>
   211c4:	04400404 	movi	r17,16
   211c8:	d8801f17 	ldw	r2,124(sp)
   211cc:	8c04c40e 	bge	r17,r16,224e0 <___vfprintf_internal_r+0x1d48>
   211d0:	014000f4 	movhi	r5,3
   211d4:	2949af84 	addi	r5,r5,9918
   211d8:	d9403515 	stw	r5,212(sp)
   211dc:	048001c4 	movi	r18,7
   211e0:	dcc02d17 	ldw	r19,180(sp)
   211e4:	00000306 	br	211f4 <___vfprintf_internal_r+0xa5c>
   211e8:	843ffc04 	addi	r16,r16,-16
   211ec:	42000204 	addi	r8,r8,8
   211f0:	8c00130e 	bge	r17,r16,21240 <___vfprintf_internal_r+0xaa8>
   211f4:	010000f4 	movhi	r4,3
   211f8:	18c00404 	addi	r3,r3,16
   211fc:	10800044 	addi	r2,r2,1
   21200:	2109af84 	addi	r4,r4,9918
   21204:	41000015 	stw	r4,0(r8)
   21208:	44400115 	stw	r17,4(r8)
   2120c:	d8c02015 	stw	r3,128(sp)
   21210:	d8801f15 	stw	r2,124(sp)
   21214:	90bff40e 	bge	r18,r2,211e8 <__alt_data_end+0xfffe11e8>
   21218:	d9801e04 	addi	r6,sp,120
   2121c:	b80b883a 	mov	r5,r23
   21220:	9809883a 	mov	r4,r19
   21224:	00280e00 	call	280e0 <__sprint_r>
   21228:	103e5f1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   2122c:	843ffc04 	addi	r16,r16,-16
   21230:	d8c02017 	ldw	r3,128(sp)
   21234:	d8801f17 	ldw	r2,124(sp)
   21238:	da000404 	addi	r8,sp,16
   2123c:	8c3fed16 	blt	r17,r16,211f4 <__alt_data_end+0xfffe11f4>
   21240:	d9403517 	ldw	r5,212(sp)
   21244:	1c07883a 	add	r3,r3,r16
   21248:	10800044 	addi	r2,r2,1
   2124c:	41400015 	stw	r5,0(r8)
   21250:	44000115 	stw	r16,4(r8)
   21254:	d8c02015 	stw	r3,128(sp)
   21258:	d8801f15 	stw	r2,124(sp)
   2125c:	010001c4 	movi	r4,7
   21260:	2080060e 	bge	r4,r2,2127c <___vfprintf_internal_r+0xae4>
   21264:	d9002d17 	ldw	r4,180(sp)
   21268:	d9801e04 	addi	r6,sp,120
   2126c:	b80b883a 	mov	r5,r23
   21270:	00280e00 	call	280e0 <__sprint_r>
   21274:	103e4c1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21278:	d8c02017 	ldw	r3,128(sp)
   2127c:	d8803117 	ldw	r2,196(sp)
   21280:	d9002917 	ldw	r4,164(sp)
   21284:	1100010e 	bge	r2,r4,2128c <___vfprintf_internal_r+0xaf4>
   21288:	2005883a 	mov	r2,r4
   2128c:	d9402f17 	ldw	r5,188(sp)
   21290:	288b883a 	add	r5,r5,r2
   21294:	d9402f15 	stw	r5,188(sp)
   21298:	1801c01e 	bne	r3,zero,2199c <___vfprintf_internal_r+0x1204>
   2129c:	a8800007 	ldb	r2,0(r21)
   212a0:	d8001f15 	stw	zero,124(sp)
   212a4:	da000404 	addi	r8,sp,16
   212a8:	103d751e 	bne	r2,zero,20880 <__alt_data_end+0xfffe0880>
   212ac:	a823883a 	mov	r17,r21
   212b0:	003d8b06 	br	208e0 <__alt_data_end+0xfffe08e0>
   212b4:	8025883a 	mov	r18,r16
   212b8:	dc002903 	ldbu	r16,164(sp)
   212bc:	e011883a 	mov	r8,fp
   212c0:	84003fcc 	andi	r16,r16,255
   212c4:	8005e51e 	bne	r16,zero,22a5c <___vfprintf_internal_r+0x22c4>
   212c8:	94800414 	ori	r18,r18,16
   212cc:	9080080c 	andi	r2,r18,32
   212d0:	10022b26 	beq	r2,zero,21b80 <___vfprintf_internal_r+0x13e8>
   212d4:	d9002e17 	ldw	r4,184(sp)
   212d8:	d9402a17 	ldw	r5,168(sp)
   212dc:	d8002785 	stb	zero,158(sp)
   212e0:	20c00204 	addi	r3,r4,8
   212e4:	24c00017 	ldw	r19,0(r4)
   212e8:	25800117 	ldw	r22,4(r4)
   212ec:	28042e16 	blt	r5,zero,223a8 <___vfprintf_internal_r+0x1c10>
   212f0:	013fdfc4 	movi	r4,-129
   212f4:	9d84b03a 	or	r2,r19,r22
   212f8:	d8c02e15 	stw	r3,184(sp)
   212fc:	9124703a 	and	r18,r18,r4
   21300:	0039883a 	mov	fp,zero
   21304:	103e801e 	bne	r2,zero,20d08 <__alt_data_end+0xfffe0d08>
   21308:	d9002a17 	ldw	r4,168(sp)
   2130c:	2002e01e 	bne	r4,zero,21e90 <___vfprintf_internal_r+0x16f8>
   21310:	d8002a15 	stw	zero,168(sp)
   21314:	d8002b15 	stw	zero,172(sp)
   21318:	dc001e04 	addi	r16,sp,120
   2131c:	003ef506 	br	20ef4 <__alt_data_end+0xfffe0ef4>
   21320:	8025883a 	mov	r18,r16
   21324:	dc002903 	ldbu	r16,164(sp)
   21328:	e011883a 	mov	r8,fp
   2132c:	84003fcc 	andi	r16,r16,255
   21330:	8005ba1e 	bne	r16,zero,22a1c <___vfprintf_internal_r+0x2284>
   21334:	010000f4 	movhi	r4,3
   21338:	21099f04 	addi	r4,r4,9852
   2133c:	d9003915 	stw	r4,228(sp)
   21340:	9080080c 	andi	r2,r18,32
   21344:	10006126 	beq	r2,zero,214cc <___vfprintf_internal_r+0xd34>
   21348:	d9402e17 	ldw	r5,184(sp)
   2134c:	2cc00017 	ldw	r19,0(r5)
   21350:	2d800117 	ldw	r22,4(r5)
   21354:	29400204 	addi	r5,r5,8
   21358:	d9402e15 	stw	r5,184(sp)
   2135c:	9080004c 	andi	r2,r18,1
   21360:	1001ac26 	beq	r2,zero,21a14 <___vfprintf_internal_r+0x127c>
   21364:	9d84b03a 	or	r2,r19,r22
   21368:	10038526 	beq	r2,zero,22180 <___vfprintf_internal_r+0x19e8>
   2136c:	d8c02a17 	ldw	r3,168(sp)
   21370:	00800c04 	movi	r2,48
   21374:	d8802705 	stb	r2,156(sp)
   21378:	dc402745 	stb	r17,157(sp)
   2137c:	d8002785 	stb	zero,158(sp)
   21380:	90800094 	ori	r2,r18,2
   21384:	18047916 	blt	r3,zero,2256c <___vfprintf_internal_r+0x1dd4>
   21388:	00bfdfc4 	movi	r2,-129
   2138c:	90a4703a 	and	r18,r18,r2
   21390:	94800094 	ori	r18,r18,2
   21394:	0039883a 	mov	fp,zero
   21398:	d9003917 	ldw	r4,228(sp)
   2139c:	dc001e04 	addi	r16,sp,120
   213a0:	988003cc 	andi	r2,r19,15
   213a4:	b006973a 	slli	r3,r22,28
   213a8:	2085883a 	add	r2,r4,r2
   213ac:	9826d13a 	srli	r19,r19,4
   213b0:	10800003 	ldbu	r2,0(r2)
   213b4:	b02cd13a 	srli	r22,r22,4
   213b8:	843fffc4 	addi	r16,r16,-1
   213bc:	1ce6b03a 	or	r19,r3,r19
   213c0:	80800005 	stb	r2,0(r16)
   213c4:	9d84b03a 	or	r2,r19,r22
   213c8:	103ff51e 	bne	r2,zero,213a0 <__alt_data_end+0xfffe13a0>
   213cc:	d8c02817 	ldw	r3,160(sp)
   213d0:	1c07c83a 	sub	r3,r3,r16
   213d4:	d8c02b15 	stw	r3,172(sp)
   213d8:	003ec606 	br	20ef4 <__alt_data_end+0xfffe0ef4>
   213dc:	8025883a 	mov	r18,r16
   213e0:	dc002903 	ldbu	r16,164(sp)
   213e4:	e011883a 	mov	r8,fp
   213e8:	84003fcc 	andi	r16,r16,255
   213ec:	803e9626 	beq	r16,zero,20e48 <__alt_data_end+0xfffe0e48>
   213f0:	d8c02b03 	ldbu	r3,172(sp)
   213f4:	d8c02785 	stb	r3,158(sp)
   213f8:	003e9306 	br	20e48 <__alt_data_end+0xfffe0e48>
   213fc:	00c00044 	movi	r3,1
   21400:	d8c02905 	stb	r3,164(sp)
   21404:	00c00ac4 	movi	r3,43
   21408:	d8c02b05 	stb	r3,172(sp)
   2140c:	ac400007 	ldb	r17,0(r21)
   21410:	003d4306 	br	20920 <__alt_data_end+0xfffe0920>
   21414:	84000814 	ori	r16,r16,32
   21418:	ac400007 	ldb	r17,0(r21)
   2141c:	003d4006 	br	20920 <__alt_data_end+0xfffe0920>
   21420:	d8802e17 	ldw	r2,184(sp)
   21424:	8025883a 	mov	r18,r16
   21428:	d8002785 	stb	zero,158(sp)
   2142c:	14000017 	ldw	r16,0(r2)
   21430:	e011883a 	mov	r8,fp
   21434:	14c00104 	addi	r19,r2,4
   21438:	80042d26 	beq	r16,zero,224f0 <___vfprintf_internal_r+0x1d58>
   2143c:	d8c02a17 	ldw	r3,168(sp)
   21440:	1803e416 	blt	r3,zero,223d4 <___vfprintf_internal_r+0x1c3c>
   21444:	180d883a 	mov	r6,r3
   21448:	000b883a 	mov	r5,zero
   2144c:	8009883a 	mov	r4,r16
   21450:	df003d15 	stw	fp,244(sp)
   21454:	00260d00 	call	260d0 <memchr>
   21458:	da003d17 	ldw	r8,244(sp)
   2145c:	10046826 	beq	r2,zero,22600 <___vfprintf_internal_r+0x1e68>
   21460:	1405c83a 	sub	r2,r2,r16
   21464:	d8802b15 	stw	r2,172(sp)
   21468:	1003e016 	blt	r2,zero,223ec <___vfprintf_internal_r+0x1c54>
   2146c:	df002783 	ldbu	fp,158(sp)
   21470:	d8802915 	stw	r2,164(sp)
   21474:	dcc02e15 	stw	r19,184(sp)
   21478:	d8002a15 	stw	zero,168(sp)
   2147c:	d8003215 	stw	zero,200(sp)
   21480:	003ea206 	br	20f0c <__alt_data_end+0xfffe0f0c>
   21484:	8025883a 	mov	r18,r16
   21488:	dc002903 	ldbu	r16,164(sp)
   2148c:	e011883a 	mov	r8,fp
   21490:	84003fcc 	andi	r16,r16,255
   21494:	803f8d26 	beq	r16,zero,212cc <__alt_data_end+0xfffe12cc>
   21498:	d8c02b03 	ldbu	r3,172(sp)
   2149c:	d8c02785 	stb	r3,158(sp)
   214a0:	003f8a06 	br	212cc <__alt_data_end+0xfffe12cc>
   214a4:	8025883a 	mov	r18,r16
   214a8:	dc002903 	ldbu	r16,164(sp)
   214ac:	e011883a 	mov	r8,fp
   214b0:	84003fcc 	andi	r16,r16,255
   214b4:	8005661e 	bne	r16,zero,22a50 <___vfprintf_internal_r+0x22b8>
   214b8:	010000f4 	movhi	r4,3
   214bc:	2109a404 	addi	r4,r4,9872
   214c0:	d9003915 	stw	r4,228(sp)
   214c4:	9080080c 	andi	r2,r18,32
   214c8:	103f9f1e 	bne	r2,zero,21348 <__alt_data_end+0xfffe1348>
   214cc:	9080040c 	andi	r2,r18,16
   214d0:	1002eb26 	beq	r2,zero,22080 <___vfprintf_internal_r+0x18e8>
   214d4:	d8802e17 	ldw	r2,184(sp)
   214d8:	002d883a 	mov	r22,zero
   214dc:	14c00017 	ldw	r19,0(r2)
   214e0:	10800104 	addi	r2,r2,4
   214e4:	d8802e15 	stw	r2,184(sp)
   214e8:	003f9c06 	br	2135c <__alt_data_end+0xfffe135c>
   214ec:	d8802b07 	ldb	r2,172(sp)
   214f0:	1002e11e 	bne	r2,zero,22078 <___vfprintf_internal_r+0x18e0>
   214f4:	00c00044 	movi	r3,1
   214f8:	d8c02905 	stb	r3,164(sp)
   214fc:	00c00804 	movi	r3,32
   21500:	d8c02b05 	stb	r3,172(sp)
   21504:	ac400007 	ldb	r17,0(r21)
   21508:	003d0506 	br	20920 <__alt_data_end+0xfffe0920>
   2150c:	84000054 	ori	r16,r16,1
   21510:	ac400007 	ldb	r17,0(r21)
   21514:	003d0206 	br	20920 <__alt_data_end+0xfffe0920>
   21518:	8025883a 	mov	r18,r16
   2151c:	dc002903 	ldbu	r16,164(sp)
   21520:	e011883a 	mov	r8,fp
   21524:	84003fcc 	andi	r16,r16,255
   21528:	803de726 	beq	r16,zero,20cc8 <__alt_data_end+0xfffe0cc8>
   2152c:	d8c02b03 	ldbu	r3,172(sp)
   21530:	d8c02785 	stb	r3,158(sp)
   21534:	003de406 	br	20cc8 <__alt_data_end+0xfffe0cc8>
   21538:	84001014 	ori	r16,r16,64
   2153c:	ac400007 	ldb	r17,0(r21)
   21540:	003cf706 	br	20920 <__alt_data_end+0xfffe0920>
   21544:	ac400007 	ldb	r17,0(r21)
   21548:	00801b04 	movi	r2,108
   2154c:	88838f26 	beq	r17,r2,2238c <___vfprintf_internal_r+0x1bf4>
   21550:	84000414 	ori	r16,r16,16
   21554:	003cf206 	br	20920 <__alt_data_end+0xfffe0920>
   21558:	8025883a 	mov	r18,r16
   2155c:	dc002903 	ldbu	r16,164(sp)
   21560:	e011883a 	mov	r8,fp
   21564:	84003fcc 	andi	r16,r16,255
   21568:	80053f1e 	bne	r16,zero,22a68 <___vfprintf_internal_r+0x22d0>
   2156c:	9080080c 	andi	r2,r18,32
   21570:	1002d226 	beq	r2,zero,220bc <___vfprintf_internal_r+0x1924>
   21574:	d9002e17 	ldw	r4,184(sp)
   21578:	d9402f17 	ldw	r5,188(sp)
   2157c:	20800017 	ldw	r2,0(r4)
   21580:	2807d7fa 	srai	r3,r5,31
   21584:	21000104 	addi	r4,r4,4
   21588:	d9002e15 	stw	r4,184(sp)
   2158c:	11400015 	stw	r5,0(r2)
   21590:	10c00115 	stw	r3,4(r2)
   21594:	003cb806 	br	20878 <__alt_data_end+0xfffe0878>
   21598:	d8c02e17 	ldw	r3,184(sp)
   2159c:	d9002e17 	ldw	r4,184(sp)
   215a0:	8025883a 	mov	r18,r16
   215a4:	18800017 	ldw	r2,0(r3)
   215a8:	21000104 	addi	r4,r4,4
   215ac:	00c00044 	movi	r3,1
   215b0:	e011883a 	mov	r8,fp
   215b4:	d8c02915 	stw	r3,164(sp)
   215b8:	d8002785 	stb	zero,158(sp)
   215bc:	d8801405 	stb	r2,80(sp)
   215c0:	d9002e15 	stw	r4,184(sp)
   215c4:	d8c02b15 	stw	r3,172(sp)
   215c8:	d8002a15 	stw	zero,168(sp)
   215cc:	d8003215 	stw	zero,200(sp)
   215d0:	dc001404 	addi	r16,sp,80
   215d4:	0039883a 	mov	fp,zero
   215d8:	003e5306 	br	20f28 <__alt_data_end+0xfffe0f28>
   215dc:	010000f4 	movhi	r4,3
   215e0:	2109a404 	addi	r4,r4,9872
   215e4:	0039883a 	mov	fp,zero
   215e8:	d9003915 	stw	r4,228(sp)
   215ec:	04401e04 	movi	r17,120
   215f0:	003f6906 	br	21398 <__alt_data_end+0xfffe1398>
   215f4:	8025883a 	mov	r18,r16
   215f8:	dc002903 	ldbu	r16,164(sp)
   215fc:	e011883a 	mov	r8,fp
   21600:	84003fcc 	andi	r16,r16,255
   21604:	8005081e 	bne	r16,zero,22a28 <___vfprintf_internal_r+0x2290>
   21608:	883d6126 	beq	r17,zero,20b90 <__alt_data_end+0xfffe0b90>
   2160c:	00c00044 	movi	r3,1
   21610:	d8c02915 	stw	r3,164(sp)
   21614:	dc401405 	stb	r17,80(sp)
   21618:	d8002785 	stb	zero,158(sp)
   2161c:	003fe906 	br	215c4 <__alt_data_end+0xfffe15c4>
   21620:	014000f4 	movhi	r5,3
   21624:	2949a404 	addi	r5,r5,9872
   21628:	d9403915 	stw	r5,228(sp)
   2162c:	d8c02e15 	stw	r3,184(sp)
   21630:	1025883a 	mov	r18,r2
   21634:	04401e04 	movi	r17,120
   21638:	9d84b03a 	or	r2,r19,r22
   2163c:	1000fc1e 	bne	r2,zero,21a30 <___vfprintf_internal_r+0x1298>
   21640:	0039883a 	mov	fp,zero
   21644:	00800084 	movi	r2,2
   21648:	10803fcc 	andi	r2,r2,255
   2164c:	00c00044 	movi	r3,1
   21650:	10c20f26 	beq	r2,r3,21e90 <___vfprintf_internal_r+0x16f8>
   21654:	00c00084 	movi	r3,2
   21658:	10fd3326 	beq	r2,r3,20b28 <__alt_data_end+0xfffe0b28>
   2165c:	003e0b06 	br	20e8c <__alt_data_end+0xfffe0e8c>
   21660:	d8c02017 	ldw	r3,128(sp)
   21664:	003e7106 	br	2102c <__alt_data_end+0xfffe102c>
   21668:	00801944 	movi	r2,101
   2166c:	14407e0e 	bge	r2,r17,21868 <___vfprintf_internal_r+0x10d0>
   21670:	d9003617 	ldw	r4,216(sp)
   21674:	d9403817 	ldw	r5,224(sp)
   21678:	000d883a 	mov	r6,zero
   2167c:	000f883a 	mov	r7,zero
   21680:	d8c03c15 	stw	r3,240(sp)
   21684:	da003d15 	stw	r8,244(sp)
   21688:	002c0400 	call	2c040 <__eqdf2>
   2168c:	d8c03c17 	ldw	r3,240(sp)
   21690:	da003d17 	ldw	r8,244(sp)
   21694:	1000f71e 	bne	r2,zero,21a74 <___vfprintf_internal_r+0x12dc>
   21698:	d8801f17 	ldw	r2,124(sp)
   2169c:	010000f4 	movhi	r4,3
   216a0:	2109ab04 	addi	r4,r4,9900
   216a4:	18c00044 	addi	r3,r3,1
   216a8:	10800044 	addi	r2,r2,1
   216ac:	41000015 	stw	r4,0(r8)
   216b0:	01000044 	movi	r4,1
   216b4:	41000115 	stw	r4,4(r8)
   216b8:	d8c02015 	stw	r3,128(sp)
   216bc:	d8801f15 	stw	r2,124(sp)
   216c0:	010001c4 	movi	r4,7
   216c4:	2082b816 	blt	r4,r2,221a8 <___vfprintf_internal_r+0x1a10>
   216c8:	42000204 	addi	r8,r8,8
   216cc:	d8802617 	ldw	r2,152(sp)
   216d0:	d9403317 	ldw	r5,204(sp)
   216d4:	11400216 	blt	r2,r5,216e0 <___vfprintf_internal_r+0xf48>
   216d8:	9080004c 	andi	r2,r18,1
   216dc:	103eb326 	beq	r2,zero,211ac <__alt_data_end+0xfffe11ac>
   216e0:	d8803717 	ldw	r2,220(sp)
   216e4:	d9003417 	ldw	r4,208(sp)
   216e8:	d9403717 	ldw	r5,220(sp)
   216ec:	1887883a 	add	r3,r3,r2
   216f0:	d8801f17 	ldw	r2,124(sp)
   216f4:	41000015 	stw	r4,0(r8)
   216f8:	41400115 	stw	r5,4(r8)
   216fc:	10800044 	addi	r2,r2,1
   21700:	d8c02015 	stw	r3,128(sp)
   21704:	d8801f15 	stw	r2,124(sp)
   21708:	010001c4 	movi	r4,7
   2170c:	20832916 	blt	r4,r2,223b4 <___vfprintf_internal_r+0x1c1c>
   21710:	42000204 	addi	r8,r8,8
   21714:	d8803317 	ldw	r2,204(sp)
   21718:	143fffc4 	addi	r16,r2,-1
   2171c:	043ea30e 	bge	zero,r16,211ac <__alt_data_end+0xfffe11ac>
   21720:	04400404 	movi	r17,16
   21724:	d8801f17 	ldw	r2,124(sp)
   21728:	8c00880e 	bge	r17,r16,2194c <___vfprintf_internal_r+0x11b4>
   2172c:	014000f4 	movhi	r5,3
   21730:	2949ab84 	addi	r5,r5,9902
   21734:	d9402c15 	stw	r5,176(sp)
   21738:	058001c4 	movi	r22,7
   2173c:	dcc02d17 	ldw	r19,180(sp)
   21740:	00000306 	br	21750 <___vfprintf_internal_r+0xfb8>
   21744:	42000204 	addi	r8,r8,8
   21748:	843ffc04 	addi	r16,r16,-16
   2174c:	8c00820e 	bge	r17,r16,21958 <___vfprintf_internal_r+0x11c0>
   21750:	18c00404 	addi	r3,r3,16
   21754:	10800044 	addi	r2,r2,1
   21758:	45000015 	stw	r20,0(r8)
   2175c:	44400115 	stw	r17,4(r8)
   21760:	d8c02015 	stw	r3,128(sp)
   21764:	d8801f15 	stw	r2,124(sp)
   21768:	b0bff60e 	bge	r22,r2,21744 <__alt_data_end+0xfffe1744>
   2176c:	d9801e04 	addi	r6,sp,120
   21770:	b80b883a 	mov	r5,r23
   21774:	9809883a 	mov	r4,r19
   21778:	00280e00 	call	280e0 <__sprint_r>
   2177c:	103d0a1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21780:	d8c02017 	ldw	r3,128(sp)
   21784:	d8801f17 	ldw	r2,124(sp)
   21788:	da000404 	addi	r8,sp,16
   2178c:	003fee06 	br	21748 <__alt_data_end+0xfffe1748>
   21790:	d9403117 	ldw	r5,196(sp)
   21794:	d8802917 	ldw	r2,164(sp)
   21798:	28adc83a 	sub	r22,r5,r2
   2179c:	05be410e 	bge	zero,r22,210a4 <__alt_data_end+0xfffe10a4>
   217a0:	07000404 	movi	fp,16
   217a4:	d8801f17 	ldw	r2,124(sp)
   217a8:	e5838f0e 	bge	fp,r22,225e8 <___vfprintf_internal_r+0x1e50>
   217ac:	014000f4 	movhi	r5,3
   217b0:	2949ab84 	addi	r5,r5,9902
   217b4:	dc403015 	stw	r17,192(sp)
   217b8:	d9402c15 	stw	r5,176(sp)
   217bc:	b023883a 	mov	r17,r22
   217c0:	04c001c4 	movi	r19,7
   217c4:	a82d883a 	mov	r22,r21
   217c8:	902b883a 	mov	r21,r18
   217cc:	8025883a 	mov	r18,r16
   217d0:	dc002d17 	ldw	r16,180(sp)
   217d4:	00000306 	br	217e4 <___vfprintf_internal_r+0x104c>
   217d8:	8c7ffc04 	addi	r17,r17,-16
   217dc:	42000204 	addi	r8,r8,8
   217e0:	e440110e 	bge	fp,r17,21828 <___vfprintf_internal_r+0x1090>
   217e4:	18c00404 	addi	r3,r3,16
   217e8:	10800044 	addi	r2,r2,1
   217ec:	45000015 	stw	r20,0(r8)
   217f0:	47000115 	stw	fp,4(r8)
   217f4:	d8c02015 	stw	r3,128(sp)
   217f8:	d8801f15 	stw	r2,124(sp)
   217fc:	98bff60e 	bge	r19,r2,217d8 <__alt_data_end+0xfffe17d8>
   21800:	d9801e04 	addi	r6,sp,120
   21804:	b80b883a 	mov	r5,r23
   21808:	8009883a 	mov	r4,r16
   2180c:	00280e00 	call	280e0 <__sprint_r>
   21810:	103ce51e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21814:	8c7ffc04 	addi	r17,r17,-16
   21818:	d8c02017 	ldw	r3,128(sp)
   2181c:	d8801f17 	ldw	r2,124(sp)
   21820:	da000404 	addi	r8,sp,16
   21824:	e47fef16 	blt	fp,r17,217e4 <__alt_data_end+0xfffe17e4>
   21828:	9021883a 	mov	r16,r18
   2182c:	a825883a 	mov	r18,r21
   21830:	b02b883a 	mov	r21,r22
   21834:	882d883a 	mov	r22,r17
   21838:	dc403017 	ldw	r17,192(sp)
   2183c:	d9002c17 	ldw	r4,176(sp)
   21840:	1d87883a 	add	r3,r3,r22
   21844:	10800044 	addi	r2,r2,1
   21848:	41000015 	stw	r4,0(r8)
   2184c:	45800115 	stw	r22,4(r8)
   21850:	d8c02015 	stw	r3,128(sp)
   21854:	d8801f15 	stw	r2,124(sp)
   21858:	010001c4 	movi	r4,7
   2185c:	20818e16 	blt	r4,r2,21e98 <___vfprintf_internal_r+0x1700>
   21860:	42000204 	addi	r8,r8,8
   21864:	003e0f06 	br	210a4 <__alt_data_end+0xfffe10a4>
   21868:	d9403317 	ldw	r5,204(sp)
   2186c:	00800044 	movi	r2,1
   21870:	18c00044 	addi	r3,r3,1
   21874:	1141530e 	bge	r2,r5,21dc4 <___vfprintf_internal_r+0x162c>
   21878:	dc401f17 	ldw	r17,124(sp)
   2187c:	00800044 	movi	r2,1
   21880:	40800115 	stw	r2,4(r8)
   21884:	8c400044 	addi	r17,r17,1
   21888:	44000015 	stw	r16,0(r8)
   2188c:	d8c02015 	stw	r3,128(sp)
   21890:	dc401f15 	stw	r17,124(sp)
   21894:	008001c4 	movi	r2,7
   21898:	14416b16 	blt	r2,r17,21e48 <___vfprintf_internal_r+0x16b0>
   2189c:	42000204 	addi	r8,r8,8
   218a0:	d8803717 	ldw	r2,220(sp)
   218a4:	d9003417 	ldw	r4,208(sp)
   218a8:	8c400044 	addi	r17,r17,1
   218ac:	10c7883a 	add	r3,r2,r3
   218b0:	40800115 	stw	r2,4(r8)
   218b4:	41000015 	stw	r4,0(r8)
   218b8:	d8c02015 	stw	r3,128(sp)
   218bc:	dc401f15 	stw	r17,124(sp)
   218c0:	008001c4 	movi	r2,7
   218c4:	14416916 	blt	r2,r17,21e6c <___vfprintf_internal_r+0x16d4>
   218c8:	45800204 	addi	r22,r8,8
   218cc:	d9003617 	ldw	r4,216(sp)
   218d0:	d9403817 	ldw	r5,224(sp)
   218d4:	000d883a 	mov	r6,zero
   218d8:	000f883a 	mov	r7,zero
   218dc:	d8c03c15 	stw	r3,240(sp)
   218e0:	002c0400 	call	2c040 <__eqdf2>
   218e4:	d8c03c17 	ldw	r3,240(sp)
   218e8:	1000bc26 	beq	r2,zero,21bdc <___vfprintf_internal_r+0x1444>
   218ec:	d9403317 	ldw	r5,204(sp)
   218f0:	84000044 	addi	r16,r16,1
   218f4:	8c400044 	addi	r17,r17,1
   218f8:	28bfffc4 	addi	r2,r5,-1
   218fc:	1887883a 	add	r3,r3,r2
   21900:	b0800115 	stw	r2,4(r22)
   21904:	b4000015 	stw	r16,0(r22)
   21908:	d8c02015 	stw	r3,128(sp)
   2190c:	dc401f15 	stw	r17,124(sp)
   21910:	008001c4 	movi	r2,7
   21914:	14414316 	blt	r2,r17,21e24 <___vfprintf_internal_r+0x168c>
   21918:	b5800204 	addi	r22,r22,8
   2191c:	d9003a17 	ldw	r4,232(sp)
   21920:	df0022c4 	addi	fp,sp,139
   21924:	8c400044 	addi	r17,r17,1
   21928:	20c7883a 	add	r3,r4,r3
   2192c:	b7000015 	stw	fp,0(r22)
   21930:	b1000115 	stw	r4,4(r22)
   21934:	d8c02015 	stw	r3,128(sp)
   21938:	dc401f15 	stw	r17,124(sp)
   2193c:	008001c4 	movi	r2,7
   21940:	14400e16 	blt	r2,r17,2197c <___vfprintf_internal_r+0x11e4>
   21944:	b2000204 	addi	r8,r22,8
   21948:	003e1806 	br	211ac <__alt_data_end+0xfffe11ac>
   2194c:	010000f4 	movhi	r4,3
   21950:	2109ab84 	addi	r4,r4,9902
   21954:	d9002c15 	stw	r4,176(sp)
   21958:	d9002c17 	ldw	r4,176(sp)
   2195c:	1c07883a 	add	r3,r3,r16
   21960:	44000115 	stw	r16,4(r8)
   21964:	41000015 	stw	r4,0(r8)
   21968:	10800044 	addi	r2,r2,1
   2196c:	d8c02015 	stw	r3,128(sp)
   21970:	d8801f15 	stw	r2,124(sp)
   21974:	010001c4 	movi	r4,7
   21978:	20be0b0e 	bge	r4,r2,211a8 <__alt_data_end+0xfffe11a8>
   2197c:	d9002d17 	ldw	r4,180(sp)
   21980:	d9801e04 	addi	r6,sp,120
   21984:	b80b883a 	mov	r5,r23
   21988:	00280e00 	call	280e0 <__sprint_r>
   2198c:	103c861e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21990:	d8c02017 	ldw	r3,128(sp)
   21994:	da000404 	addi	r8,sp,16
   21998:	003e0406 	br	211ac <__alt_data_end+0xfffe11ac>
   2199c:	d9002d17 	ldw	r4,180(sp)
   219a0:	d9801e04 	addi	r6,sp,120
   219a4:	b80b883a 	mov	r5,r23
   219a8:	00280e00 	call	280e0 <__sprint_r>
   219ac:	103e3b26 	beq	r2,zero,2129c <__alt_data_end+0xfffe129c>
   219b0:	003c7d06 	br	20ba8 <__alt_data_end+0xfffe0ba8>
   219b4:	d9002d17 	ldw	r4,180(sp)
   219b8:	d9801e04 	addi	r6,sp,120
   219bc:	b80b883a 	mov	r5,r23
   219c0:	00280e00 	call	280e0 <__sprint_r>
   219c4:	103c781e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   219c8:	d8c02017 	ldw	r3,128(sp)
   219cc:	da000404 	addi	r8,sp,16
   219d0:	003de906 	br	21178 <__alt_data_end+0xfffe1178>
   219d4:	d9002d17 	ldw	r4,180(sp)
   219d8:	d9801e04 	addi	r6,sp,120
   219dc:	b80b883a 	mov	r5,r23
   219e0:	00280e00 	call	280e0 <__sprint_r>
   219e4:	103c701e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   219e8:	d8c02017 	ldw	r3,128(sp)
   219ec:	da000404 	addi	r8,sp,16
   219f0:	003d9b06 	br	21060 <__alt_data_end+0xfffe1060>
   219f4:	d9002d17 	ldw	r4,180(sp)
   219f8:	d9801e04 	addi	r6,sp,120
   219fc:	b80b883a 	mov	r5,r23
   21a00:	00280e00 	call	280e0 <__sprint_r>
   21a04:	103c681e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21a08:	d8c02017 	ldw	r3,128(sp)
   21a0c:	da000404 	addi	r8,sp,16
   21a10:	003da106 	br	21098 <__alt_data_end+0xfffe1098>
   21a14:	d9402a17 	ldw	r5,168(sp)
   21a18:	d8002785 	stb	zero,158(sp)
   21a1c:	283f0616 	blt	r5,zero,21638 <__alt_data_end+0xfffe1638>
   21a20:	00ffdfc4 	movi	r3,-129
   21a24:	9d84b03a 	or	r2,r19,r22
   21a28:	90e4703a 	and	r18,r18,r3
   21a2c:	103c3b26 	beq	r2,zero,20b1c <__alt_data_end+0xfffe0b1c>
   21a30:	0039883a 	mov	fp,zero
   21a34:	003e5806 	br	21398 <__alt_data_end+0xfffe1398>
   21a38:	9080040c 	andi	r2,r18,16
   21a3c:	1001b326 	beq	r2,zero,2210c <___vfprintf_internal_r+0x1974>
   21a40:	d8c02e17 	ldw	r3,184(sp)
   21a44:	d9002a17 	ldw	r4,168(sp)
   21a48:	d8002785 	stb	zero,158(sp)
   21a4c:	18800104 	addi	r2,r3,4
   21a50:	1cc00017 	ldw	r19,0(r3)
   21a54:	002d883a 	mov	r22,zero
   21a58:	2001b516 	blt	r4,zero,22130 <___vfprintf_internal_r+0x1998>
   21a5c:	00ffdfc4 	movi	r3,-129
   21a60:	d8802e15 	stw	r2,184(sp)
   21a64:	90e4703a 	and	r18,r18,r3
   21a68:	983d0526 	beq	r19,zero,20e80 <__alt_data_end+0xfffe0e80>
   21a6c:	0039883a 	mov	fp,zero
   21a70:	003d0806 	br	20e94 <__alt_data_end+0xfffe0e94>
   21a74:	dc402617 	ldw	r17,152(sp)
   21a78:	0441d30e 	bge	zero,r17,221c8 <___vfprintf_internal_r+0x1a30>
   21a7c:	dc403217 	ldw	r17,200(sp)
   21a80:	d8803317 	ldw	r2,204(sp)
   21a84:	1440010e 	bge	r2,r17,21a8c <___vfprintf_internal_r+0x12f4>
   21a88:	1023883a 	mov	r17,r2
   21a8c:	04400a0e 	bge	zero,r17,21ab8 <___vfprintf_internal_r+0x1320>
   21a90:	d8801f17 	ldw	r2,124(sp)
   21a94:	1c47883a 	add	r3,r3,r17
   21a98:	44000015 	stw	r16,0(r8)
   21a9c:	10800044 	addi	r2,r2,1
   21aa0:	44400115 	stw	r17,4(r8)
   21aa4:	d8c02015 	stw	r3,128(sp)
   21aa8:	d8801f15 	stw	r2,124(sp)
   21aac:	010001c4 	movi	r4,7
   21ab0:	20826516 	blt	r4,r2,22448 <___vfprintf_internal_r+0x1cb0>
   21ab4:	42000204 	addi	r8,r8,8
   21ab8:	88026116 	blt	r17,zero,22440 <___vfprintf_internal_r+0x1ca8>
   21abc:	d9003217 	ldw	r4,200(sp)
   21ac0:	2463c83a 	sub	r17,r4,r17
   21ac4:	04407b0e 	bge	zero,r17,21cb4 <___vfprintf_internal_r+0x151c>
   21ac8:	05800404 	movi	r22,16
   21acc:	d8801f17 	ldw	r2,124(sp)
   21ad0:	b4419d0e 	bge	r22,r17,22148 <___vfprintf_internal_r+0x19b0>
   21ad4:	010000f4 	movhi	r4,3
   21ad8:	2109ab84 	addi	r4,r4,9902
   21adc:	d9002c15 	stw	r4,176(sp)
   21ae0:	070001c4 	movi	fp,7
   21ae4:	dcc02d17 	ldw	r19,180(sp)
   21ae8:	00000306 	br	21af8 <___vfprintf_internal_r+0x1360>
   21aec:	42000204 	addi	r8,r8,8
   21af0:	8c7ffc04 	addi	r17,r17,-16
   21af4:	b441970e 	bge	r22,r17,22154 <___vfprintf_internal_r+0x19bc>
   21af8:	18c00404 	addi	r3,r3,16
   21afc:	10800044 	addi	r2,r2,1
   21b00:	45000015 	stw	r20,0(r8)
   21b04:	45800115 	stw	r22,4(r8)
   21b08:	d8c02015 	stw	r3,128(sp)
   21b0c:	d8801f15 	stw	r2,124(sp)
   21b10:	e0bff60e 	bge	fp,r2,21aec <__alt_data_end+0xfffe1aec>
   21b14:	d9801e04 	addi	r6,sp,120
   21b18:	b80b883a 	mov	r5,r23
   21b1c:	9809883a 	mov	r4,r19
   21b20:	00280e00 	call	280e0 <__sprint_r>
   21b24:	103c201e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21b28:	d8c02017 	ldw	r3,128(sp)
   21b2c:	d8801f17 	ldw	r2,124(sp)
   21b30:	da000404 	addi	r8,sp,16
   21b34:	003fee06 	br	21af0 <__alt_data_end+0xfffe1af0>
   21b38:	d9002d17 	ldw	r4,180(sp)
   21b3c:	d9801e04 	addi	r6,sp,120
   21b40:	b80b883a 	mov	r5,r23
   21b44:	00280e00 	call	280e0 <__sprint_r>
   21b48:	103c171e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21b4c:	d8c02017 	ldw	r3,128(sp)
   21b50:	df002787 	ldb	fp,158(sp)
   21b54:	da000404 	addi	r8,sp,16
   21b58:	003d3406 	br	2102c <__alt_data_end+0xfffe102c>
   21b5c:	9080040c 	andi	r2,r18,16
   21b60:	10016126 	beq	r2,zero,220e8 <___vfprintf_internal_r+0x1950>
   21b64:	d9402e17 	ldw	r5,184(sp)
   21b68:	2cc00017 	ldw	r19,0(r5)
   21b6c:	29400104 	addi	r5,r5,4
   21b70:	d9402e15 	stw	r5,184(sp)
   21b74:	982dd7fa 	srai	r22,r19,31
   21b78:	b005883a 	mov	r2,r22
   21b7c:	003c5a06 	br	20ce8 <__alt_data_end+0xfffe0ce8>
   21b80:	9080040c 	andi	r2,r18,16
   21b84:	10003526 	beq	r2,zero,21c5c <___vfprintf_internal_r+0x14c4>
   21b88:	d8c02e17 	ldw	r3,184(sp)
   21b8c:	d9002a17 	ldw	r4,168(sp)
   21b90:	d8002785 	stb	zero,158(sp)
   21b94:	18800104 	addi	r2,r3,4
   21b98:	1cc00017 	ldw	r19,0(r3)
   21b9c:	002d883a 	mov	r22,zero
   21ba0:	20003716 	blt	r4,zero,21c80 <___vfprintf_internal_r+0x14e8>
   21ba4:	00ffdfc4 	movi	r3,-129
   21ba8:	d8802e15 	stw	r2,184(sp)
   21bac:	90e4703a 	and	r18,r18,r3
   21bb0:	0039883a 	mov	fp,zero
   21bb4:	983dd426 	beq	r19,zero,21308 <__alt_data_end+0xfffe1308>
   21bb8:	00800244 	movi	r2,9
   21bbc:	14fc5336 	bltu	r2,r19,20d0c <__alt_data_end+0xfffe0d0c>
   21bc0:	d8c02817 	ldw	r3,160(sp)
   21bc4:	dc001dc4 	addi	r16,sp,119
   21bc8:	9cc00c04 	addi	r19,r19,48
   21bcc:	1c07c83a 	sub	r3,r3,r16
   21bd0:	dcc01dc5 	stb	r19,119(sp)
   21bd4:	d8c02b15 	stw	r3,172(sp)
   21bd8:	003cc606 	br	20ef4 <__alt_data_end+0xfffe0ef4>
   21bdc:	d8803317 	ldw	r2,204(sp)
   21be0:	143fffc4 	addi	r16,r2,-1
   21be4:	043f4d0e 	bge	zero,r16,2191c <__alt_data_end+0xfffe191c>
   21be8:	07000404 	movi	fp,16
   21bec:	e400810e 	bge	fp,r16,21df4 <___vfprintf_internal_r+0x165c>
   21bf0:	014000f4 	movhi	r5,3
   21bf4:	2949ab84 	addi	r5,r5,9902
   21bf8:	d9402c15 	stw	r5,176(sp)
   21bfc:	01c001c4 	movi	r7,7
   21c00:	dcc02d17 	ldw	r19,180(sp)
   21c04:	00000306 	br	21c14 <___vfprintf_internal_r+0x147c>
   21c08:	b5800204 	addi	r22,r22,8
   21c0c:	843ffc04 	addi	r16,r16,-16
   21c10:	e4007b0e 	bge	fp,r16,21e00 <___vfprintf_internal_r+0x1668>
   21c14:	18c00404 	addi	r3,r3,16
   21c18:	8c400044 	addi	r17,r17,1
   21c1c:	b5000015 	stw	r20,0(r22)
   21c20:	b7000115 	stw	fp,4(r22)
   21c24:	d8c02015 	stw	r3,128(sp)
   21c28:	dc401f15 	stw	r17,124(sp)
   21c2c:	3c7ff60e 	bge	r7,r17,21c08 <__alt_data_end+0xfffe1c08>
   21c30:	d9801e04 	addi	r6,sp,120
   21c34:	b80b883a 	mov	r5,r23
   21c38:	9809883a 	mov	r4,r19
   21c3c:	d9c03c15 	stw	r7,240(sp)
   21c40:	00280e00 	call	280e0 <__sprint_r>
   21c44:	d9c03c17 	ldw	r7,240(sp)
   21c48:	103bd71e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21c4c:	d8c02017 	ldw	r3,128(sp)
   21c50:	dc401f17 	ldw	r17,124(sp)
   21c54:	dd800404 	addi	r22,sp,16
   21c58:	003fec06 	br	21c0c <__alt_data_end+0xfffe1c0c>
   21c5c:	9080100c 	andi	r2,r18,64
   21c60:	d8002785 	stb	zero,158(sp)
   21c64:	10010e26 	beq	r2,zero,220a0 <___vfprintf_internal_r+0x1908>
   21c68:	d9402e17 	ldw	r5,184(sp)
   21c6c:	d8c02a17 	ldw	r3,168(sp)
   21c70:	002d883a 	mov	r22,zero
   21c74:	28800104 	addi	r2,r5,4
   21c78:	2cc0000b 	ldhu	r19,0(r5)
   21c7c:	183fc90e 	bge	r3,zero,21ba4 <__alt_data_end+0xfffe1ba4>
   21c80:	d8802e15 	stw	r2,184(sp)
   21c84:	0039883a 	mov	fp,zero
   21c88:	9d84b03a 	or	r2,r19,r22
   21c8c:	103c1e1e 	bne	r2,zero,20d08 <__alt_data_end+0xfffe0d08>
   21c90:	00800044 	movi	r2,1
   21c94:	003e6c06 	br	21648 <__alt_data_end+0xfffe1648>
   21c98:	d9002d17 	ldw	r4,180(sp)
   21c9c:	d9801e04 	addi	r6,sp,120
   21ca0:	b80b883a 	mov	r5,r23
   21ca4:	00280e00 	call	280e0 <__sprint_r>
   21ca8:	103bbf1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21cac:	d8c02017 	ldw	r3,128(sp)
   21cb0:	da000404 	addi	r8,sp,16
   21cb4:	d9003217 	ldw	r4,200(sp)
   21cb8:	d8802617 	ldw	r2,152(sp)
   21cbc:	d9403317 	ldw	r5,204(sp)
   21cc0:	8123883a 	add	r17,r16,r4
   21cc4:	11400216 	blt	r2,r5,21cd0 <___vfprintf_internal_r+0x1538>
   21cc8:	9100004c 	andi	r4,r18,1
   21ccc:	20000d26 	beq	r4,zero,21d04 <___vfprintf_internal_r+0x156c>
   21cd0:	d9003717 	ldw	r4,220(sp)
   21cd4:	d9403417 	ldw	r5,208(sp)
   21cd8:	1907883a 	add	r3,r3,r4
   21cdc:	d9001f17 	ldw	r4,124(sp)
   21ce0:	41400015 	stw	r5,0(r8)
   21ce4:	d9403717 	ldw	r5,220(sp)
   21ce8:	21000044 	addi	r4,r4,1
   21cec:	d8c02015 	stw	r3,128(sp)
   21cf0:	41400115 	stw	r5,4(r8)
   21cf4:	d9001f15 	stw	r4,124(sp)
   21cf8:	014001c4 	movi	r5,7
   21cfc:	2901e816 	blt	r5,r4,224a0 <___vfprintf_internal_r+0x1d08>
   21d00:	42000204 	addi	r8,r8,8
   21d04:	d9003317 	ldw	r4,204(sp)
   21d08:	8121883a 	add	r16,r16,r4
   21d0c:	2085c83a 	sub	r2,r4,r2
   21d10:	8461c83a 	sub	r16,r16,r17
   21d14:	1400010e 	bge	r2,r16,21d1c <___vfprintf_internal_r+0x1584>
   21d18:	1021883a 	mov	r16,r2
   21d1c:	04000a0e 	bge	zero,r16,21d48 <___vfprintf_internal_r+0x15b0>
   21d20:	d9001f17 	ldw	r4,124(sp)
   21d24:	1c07883a 	add	r3,r3,r16
   21d28:	44400015 	stw	r17,0(r8)
   21d2c:	21000044 	addi	r4,r4,1
   21d30:	44000115 	stw	r16,4(r8)
   21d34:	d8c02015 	stw	r3,128(sp)
   21d38:	d9001f15 	stw	r4,124(sp)
   21d3c:	014001c4 	movi	r5,7
   21d40:	2901fb16 	blt	r5,r4,22530 <___vfprintf_internal_r+0x1d98>
   21d44:	42000204 	addi	r8,r8,8
   21d48:	8001f716 	blt	r16,zero,22528 <___vfprintf_internal_r+0x1d90>
   21d4c:	1421c83a 	sub	r16,r2,r16
   21d50:	043d160e 	bge	zero,r16,211ac <__alt_data_end+0xfffe11ac>
   21d54:	04400404 	movi	r17,16
   21d58:	d8801f17 	ldw	r2,124(sp)
   21d5c:	8c3efb0e 	bge	r17,r16,2194c <__alt_data_end+0xfffe194c>
   21d60:	014000f4 	movhi	r5,3
   21d64:	2949ab84 	addi	r5,r5,9902
   21d68:	d9402c15 	stw	r5,176(sp)
   21d6c:	058001c4 	movi	r22,7
   21d70:	dcc02d17 	ldw	r19,180(sp)
   21d74:	00000306 	br	21d84 <___vfprintf_internal_r+0x15ec>
   21d78:	42000204 	addi	r8,r8,8
   21d7c:	843ffc04 	addi	r16,r16,-16
   21d80:	8c3ef50e 	bge	r17,r16,21958 <__alt_data_end+0xfffe1958>
   21d84:	18c00404 	addi	r3,r3,16
   21d88:	10800044 	addi	r2,r2,1
   21d8c:	45000015 	stw	r20,0(r8)
   21d90:	44400115 	stw	r17,4(r8)
   21d94:	d8c02015 	stw	r3,128(sp)
   21d98:	d8801f15 	stw	r2,124(sp)
   21d9c:	b0bff60e 	bge	r22,r2,21d78 <__alt_data_end+0xfffe1d78>
   21da0:	d9801e04 	addi	r6,sp,120
   21da4:	b80b883a 	mov	r5,r23
   21da8:	9809883a 	mov	r4,r19
   21dac:	00280e00 	call	280e0 <__sprint_r>
   21db0:	103b7d1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21db4:	d8c02017 	ldw	r3,128(sp)
   21db8:	d8801f17 	ldw	r2,124(sp)
   21dbc:	da000404 	addi	r8,sp,16
   21dc0:	003fee06 	br	21d7c <__alt_data_end+0xfffe1d7c>
   21dc4:	9088703a 	and	r4,r18,r2
   21dc8:	203eab1e 	bne	r4,zero,21878 <__alt_data_end+0xfffe1878>
   21dcc:	dc401f17 	ldw	r17,124(sp)
   21dd0:	40800115 	stw	r2,4(r8)
   21dd4:	44000015 	stw	r16,0(r8)
   21dd8:	8c400044 	addi	r17,r17,1
   21ddc:	d8c02015 	stw	r3,128(sp)
   21de0:	dc401f15 	stw	r17,124(sp)
   21de4:	008001c4 	movi	r2,7
   21de8:	14400e16 	blt	r2,r17,21e24 <___vfprintf_internal_r+0x168c>
   21dec:	45800204 	addi	r22,r8,8
   21df0:	003eca06 	br	2191c <__alt_data_end+0xfffe191c>
   21df4:	010000f4 	movhi	r4,3
   21df8:	2109ab84 	addi	r4,r4,9902
   21dfc:	d9002c15 	stw	r4,176(sp)
   21e00:	d8802c17 	ldw	r2,176(sp)
   21e04:	1c07883a 	add	r3,r3,r16
   21e08:	8c400044 	addi	r17,r17,1
   21e0c:	b0800015 	stw	r2,0(r22)
   21e10:	b4000115 	stw	r16,4(r22)
   21e14:	d8c02015 	stw	r3,128(sp)
   21e18:	dc401f15 	stw	r17,124(sp)
   21e1c:	008001c4 	movi	r2,7
   21e20:	147ebd0e 	bge	r2,r17,21918 <__alt_data_end+0xfffe1918>
   21e24:	d9002d17 	ldw	r4,180(sp)
   21e28:	d9801e04 	addi	r6,sp,120
   21e2c:	b80b883a 	mov	r5,r23
   21e30:	00280e00 	call	280e0 <__sprint_r>
   21e34:	103b5c1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21e38:	d8c02017 	ldw	r3,128(sp)
   21e3c:	dc401f17 	ldw	r17,124(sp)
   21e40:	dd800404 	addi	r22,sp,16
   21e44:	003eb506 	br	2191c <__alt_data_end+0xfffe191c>
   21e48:	d9002d17 	ldw	r4,180(sp)
   21e4c:	d9801e04 	addi	r6,sp,120
   21e50:	b80b883a 	mov	r5,r23
   21e54:	00280e00 	call	280e0 <__sprint_r>
   21e58:	103b531e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21e5c:	d8c02017 	ldw	r3,128(sp)
   21e60:	dc401f17 	ldw	r17,124(sp)
   21e64:	da000404 	addi	r8,sp,16
   21e68:	003e8d06 	br	218a0 <__alt_data_end+0xfffe18a0>
   21e6c:	d9002d17 	ldw	r4,180(sp)
   21e70:	d9801e04 	addi	r6,sp,120
   21e74:	b80b883a 	mov	r5,r23
   21e78:	00280e00 	call	280e0 <__sprint_r>
   21e7c:	103b4a1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21e80:	d8c02017 	ldw	r3,128(sp)
   21e84:	dc401f17 	ldw	r17,124(sp)
   21e88:	dd800404 	addi	r22,sp,16
   21e8c:	003e8f06 	br	218cc <__alt_data_end+0xfffe18cc>
   21e90:	0027883a 	mov	r19,zero
   21e94:	003f4a06 	br	21bc0 <__alt_data_end+0xfffe1bc0>
   21e98:	d9002d17 	ldw	r4,180(sp)
   21e9c:	d9801e04 	addi	r6,sp,120
   21ea0:	b80b883a 	mov	r5,r23
   21ea4:	00280e00 	call	280e0 <__sprint_r>
   21ea8:	103b3f1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   21eac:	d8c02017 	ldw	r3,128(sp)
   21eb0:	da000404 	addi	r8,sp,16
   21eb4:	003c7b06 	br	210a4 <__alt_data_end+0xfffe10a4>
   21eb8:	d9402a17 	ldw	r5,168(sp)
   21ebc:	04e7c83a 	sub	r19,zero,r19
   21ec0:	07000b44 	movi	fp,45
   21ec4:	9804c03a 	cmpne	r2,r19,zero
   21ec8:	05adc83a 	sub	r22,zero,r22
   21ecc:	df002785 	stb	fp,158(sp)
   21ed0:	b0adc83a 	sub	r22,r22,r2
   21ed4:	28017b16 	blt	r5,zero,224c4 <___vfprintf_internal_r+0x1d2c>
   21ed8:	00bfdfc4 	movi	r2,-129
   21edc:	90a4703a 	and	r18,r18,r2
   21ee0:	003b8906 	br	20d08 <__alt_data_end+0xfffe0d08>
   21ee4:	d9003617 	ldw	r4,216(sp)
   21ee8:	d9403817 	ldw	r5,224(sp)
   21eec:	da003d15 	stw	r8,244(sp)
   21ef0:	0027d040 	call	27d04 <__fpclassifyd>
   21ef4:	da003d17 	ldw	r8,244(sp)
   21ef8:	1000f026 	beq	r2,zero,222bc <___vfprintf_internal_r+0x1b24>
   21efc:	d9002a17 	ldw	r4,168(sp)
   21f00:	05bff7c4 	movi	r22,-33
   21f04:	00bfffc4 	movi	r2,-1
   21f08:	8dac703a 	and	r22,r17,r22
   21f0c:	20820026 	beq	r4,r2,22710 <___vfprintf_internal_r+0x1f78>
   21f10:	008011c4 	movi	r2,71
   21f14:	b081f726 	beq	r22,r2,226f4 <___vfprintf_internal_r+0x1f5c>
   21f18:	d9003817 	ldw	r4,224(sp)
   21f1c:	90c04014 	ori	r3,r18,256
   21f20:	d8c02c15 	stw	r3,176(sp)
   21f24:	20021516 	blt	r4,zero,2277c <___vfprintf_internal_r+0x1fe4>
   21f28:	dcc03817 	ldw	r19,224(sp)
   21f2c:	d8002905 	stb	zero,164(sp)
   21f30:	00801984 	movi	r2,102
   21f34:	8881f926 	beq	r17,r2,2271c <___vfprintf_internal_r+0x1f84>
   21f38:	00801184 	movi	r2,70
   21f3c:	88821c26 	beq	r17,r2,227b0 <___vfprintf_internal_r+0x2018>
   21f40:	00801144 	movi	r2,69
   21f44:	b081ef26 	beq	r22,r2,22704 <___vfprintf_internal_r+0x1f6c>
   21f48:	d8c02a17 	ldw	r3,168(sp)
   21f4c:	d8802104 	addi	r2,sp,132
   21f50:	d8800315 	stw	r2,12(sp)
   21f54:	d9403617 	ldw	r5,216(sp)
   21f58:	d8802504 	addi	r2,sp,148
   21f5c:	d9002d17 	ldw	r4,180(sp)
   21f60:	d8800215 	stw	r2,8(sp)
   21f64:	d8802604 	addi	r2,sp,152
   21f68:	d8c00015 	stw	r3,0(sp)
   21f6c:	d8800115 	stw	r2,4(sp)
   21f70:	01c00084 	movi	r7,2
   21f74:	980d883a 	mov	r6,r19
   21f78:	d8c03c15 	stw	r3,240(sp)
   21f7c:	da003d15 	stw	r8,244(sp)
   21f80:	0022ec80 	call	22ec8 <_dtoa_r>
   21f84:	1021883a 	mov	r16,r2
   21f88:	008019c4 	movi	r2,103
   21f8c:	d8c03c17 	ldw	r3,240(sp)
   21f90:	da003d17 	ldw	r8,244(sp)
   21f94:	88817126 	beq	r17,r2,2255c <___vfprintf_internal_r+0x1dc4>
   21f98:	008011c4 	movi	r2,71
   21f9c:	88829126 	beq	r17,r2,229e4 <___vfprintf_internal_r+0x224c>
   21fa0:	80f9883a 	add	fp,r16,r3
   21fa4:	d9003617 	ldw	r4,216(sp)
   21fa8:	000d883a 	mov	r6,zero
   21fac:	000f883a 	mov	r7,zero
   21fb0:	980b883a 	mov	r5,r19
   21fb4:	da003d15 	stw	r8,244(sp)
   21fb8:	002c0400 	call	2c040 <__eqdf2>
   21fbc:	da003d17 	ldw	r8,244(sp)
   21fc0:	10018d26 	beq	r2,zero,225f8 <___vfprintf_internal_r+0x1e60>
   21fc4:	d8802117 	ldw	r2,132(sp)
   21fc8:	1700062e 	bgeu	r2,fp,21fe4 <___vfprintf_internal_r+0x184c>
   21fcc:	01000c04 	movi	r4,48
   21fd0:	10c00044 	addi	r3,r2,1
   21fd4:	d8c02115 	stw	r3,132(sp)
   21fd8:	11000005 	stb	r4,0(r2)
   21fdc:	d8802117 	ldw	r2,132(sp)
   21fe0:	173ffb36 	bltu	r2,fp,21fd0 <__alt_data_end+0xfffe1fd0>
   21fe4:	1405c83a 	sub	r2,r2,r16
   21fe8:	d8803315 	stw	r2,204(sp)
   21fec:	008011c4 	movi	r2,71
   21ff0:	b0817626 	beq	r22,r2,225cc <___vfprintf_internal_r+0x1e34>
   21ff4:	00801944 	movi	r2,101
   21ff8:	1442800e 	bge	r2,r17,229fc <___vfprintf_internal_r+0x2264>
   21ffc:	d8c02617 	ldw	r3,152(sp)
   22000:	00801984 	movi	r2,102
   22004:	d8c03215 	stw	r3,200(sp)
   22008:	8881fe26 	beq	r17,r2,22804 <___vfprintf_internal_r+0x206c>
   2200c:	d8c03217 	ldw	r3,200(sp)
   22010:	d9003317 	ldw	r4,204(sp)
   22014:	1901dd16 	blt	r3,r4,2278c <___vfprintf_internal_r+0x1ff4>
   22018:	9480004c 	andi	r18,r18,1
   2201c:	90022b1e 	bne	r18,zero,228cc <___vfprintf_internal_r+0x2134>
   22020:	1805883a 	mov	r2,r3
   22024:	18028316 	blt	r3,zero,22a34 <___vfprintf_internal_r+0x229c>
   22028:	d8c03217 	ldw	r3,200(sp)
   2202c:	044019c4 	movi	r17,103
   22030:	d8c02b15 	stw	r3,172(sp)
   22034:	df002907 	ldb	fp,164(sp)
   22038:	e001531e 	bne	fp,zero,22588 <___vfprintf_internal_r+0x1df0>
   2203c:	df002783 	ldbu	fp,158(sp)
   22040:	d8802915 	stw	r2,164(sp)
   22044:	dc802c17 	ldw	r18,176(sp)
   22048:	d8002a15 	stw	zero,168(sp)
   2204c:	003baf06 	br	20f0c <__alt_data_end+0xfffe0f0c>
   22050:	d8c02e17 	ldw	r3,184(sp)
   22054:	d9002e17 	ldw	r4,184(sp)
   22058:	d9402e17 	ldw	r5,184(sp)
   2205c:	18c00017 	ldw	r3,0(r3)
   22060:	21000117 	ldw	r4,4(r4)
   22064:	29400204 	addi	r5,r5,8
   22068:	d8c03615 	stw	r3,216(sp)
   2206c:	d9003815 	stw	r4,224(sp)
   22070:	d9402e15 	stw	r5,184(sp)
   22074:	003b5006 	br	20db8 <__alt_data_end+0xfffe0db8>
   22078:	ac400007 	ldb	r17,0(r21)
   2207c:	003a2806 	br	20920 <__alt_data_end+0xfffe0920>
   22080:	9080100c 	andi	r2,r18,64
   22084:	1000a826 	beq	r2,zero,22328 <___vfprintf_internal_r+0x1b90>
   22088:	d8c02e17 	ldw	r3,184(sp)
   2208c:	002d883a 	mov	r22,zero
   22090:	1cc0000b 	ldhu	r19,0(r3)
   22094:	18c00104 	addi	r3,r3,4
   22098:	d8c02e15 	stw	r3,184(sp)
   2209c:	003caf06 	br	2135c <__alt_data_end+0xfffe135c>
   220a0:	d9002e17 	ldw	r4,184(sp)
   220a4:	d9402a17 	ldw	r5,168(sp)
   220a8:	002d883a 	mov	r22,zero
   220ac:	20800104 	addi	r2,r4,4
   220b0:	24c00017 	ldw	r19,0(r4)
   220b4:	283ebb0e 	bge	r5,zero,21ba4 <__alt_data_end+0xfffe1ba4>
   220b8:	003ef106 	br	21c80 <__alt_data_end+0xfffe1c80>
   220bc:	9080040c 	andi	r2,r18,16
   220c0:	1000921e 	bne	r2,zero,2230c <___vfprintf_internal_r+0x1b74>
   220c4:	9480100c 	andi	r18,r18,64
   220c8:	90013926 	beq	r18,zero,225b0 <___vfprintf_internal_r+0x1e18>
   220cc:	d9402e17 	ldw	r5,184(sp)
   220d0:	d8c02f17 	ldw	r3,188(sp)
   220d4:	28800017 	ldw	r2,0(r5)
   220d8:	29400104 	addi	r5,r5,4
   220dc:	d9402e15 	stw	r5,184(sp)
   220e0:	10c0000d 	sth	r3,0(r2)
   220e4:	0039e406 	br	20878 <__alt_data_end+0xfffe0878>
   220e8:	9080100c 	andi	r2,r18,64
   220ec:	10008026 	beq	r2,zero,222f0 <___vfprintf_internal_r+0x1b58>
   220f0:	d8802e17 	ldw	r2,184(sp)
   220f4:	14c0000f 	ldh	r19,0(r2)
   220f8:	10800104 	addi	r2,r2,4
   220fc:	d8802e15 	stw	r2,184(sp)
   22100:	982dd7fa 	srai	r22,r19,31
   22104:	b005883a 	mov	r2,r22
   22108:	003af706 	br	20ce8 <__alt_data_end+0xfffe0ce8>
   2210c:	9080100c 	andi	r2,r18,64
   22110:	d8002785 	stb	zero,158(sp)
   22114:	10008a1e 	bne	r2,zero,22340 <___vfprintf_internal_r+0x1ba8>
   22118:	d9002e17 	ldw	r4,184(sp)
   2211c:	d9402a17 	ldw	r5,168(sp)
   22120:	002d883a 	mov	r22,zero
   22124:	20800104 	addi	r2,r4,4
   22128:	24c00017 	ldw	r19,0(r4)
   2212c:	283e4b0e 	bge	r5,zero,21a5c <__alt_data_end+0xfffe1a5c>
   22130:	9d86b03a 	or	r3,r19,r22
   22134:	d8802e15 	stw	r2,184(sp)
   22138:	183e4c1e 	bne	r3,zero,21a6c <__alt_data_end+0xfffe1a6c>
   2213c:	0039883a 	mov	fp,zero
   22140:	0005883a 	mov	r2,zero
   22144:	003d4006 	br	21648 <__alt_data_end+0xfffe1648>
   22148:	014000f4 	movhi	r5,3
   2214c:	2949ab84 	addi	r5,r5,9902
   22150:	d9402c15 	stw	r5,176(sp)
   22154:	d9402c17 	ldw	r5,176(sp)
   22158:	1c47883a 	add	r3,r3,r17
   2215c:	10800044 	addi	r2,r2,1
   22160:	41400015 	stw	r5,0(r8)
   22164:	44400115 	stw	r17,4(r8)
   22168:	d8c02015 	stw	r3,128(sp)
   2216c:	d8801f15 	stw	r2,124(sp)
   22170:	010001c4 	movi	r4,7
   22174:	20bec816 	blt	r4,r2,21c98 <__alt_data_end+0xfffe1c98>
   22178:	42000204 	addi	r8,r8,8
   2217c:	003ecd06 	br	21cb4 <__alt_data_end+0xfffe1cb4>
   22180:	d9002a17 	ldw	r4,168(sp)
   22184:	d8002785 	stb	zero,158(sp)
   22188:	203d2d16 	blt	r4,zero,21640 <__alt_data_end+0xfffe1640>
   2218c:	00bfdfc4 	movi	r2,-129
   22190:	90a4703a 	and	r18,r18,r2
   22194:	003a6106 	br	20b1c <__alt_data_end+0xfffe0b1c>
   22198:	010000f4 	movhi	r4,3
   2219c:	2109ab84 	addi	r4,r4,9902
   221a0:	d9002c15 	stw	r4,176(sp)
   221a4:	003bea06 	br	21150 <__alt_data_end+0xfffe1150>
   221a8:	d9002d17 	ldw	r4,180(sp)
   221ac:	d9801e04 	addi	r6,sp,120
   221b0:	b80b883a 	mov	r5,r23
   221b4:	00280e00 	call	280e0 <__sprint_r>
   221b8:	103a7b1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   221bc:	d8c02017 	ldw	r3,128(sp)
   221c0:	da000404 	addi	r8,sp,16
   221c4:	003d4106 	br	216cc <__alt_data_end+0xfffe16cc>
   221c8:	d8801f17 	ldw	r2,124(sp)
   221cc:	014000f4 	movhi	r5,3
   221d0:	01000044 	movi	r4,1
   221d4:	18c00044 	addi	r3,r3,1
   221d8:	10800044 	addi	r2,r2,1
   221dc:	2949ab04 	addi	r5,r5,9900
   221e0:	41000115 	stw	r4,4(r8)
   221e4:	41400015 	stw	r5,0(r8)
   221e8:	d8c02015 	stw	r3,128(sp)
   221ec:	d8801f15 	stw	r2,124(sp)
   221f0:	010001c4 	movi	r4,7
   221f4:	20805c16 	blt	r4,r2,22368 <___vfprintf_internal_r+0x1bd0>
   221f8:	42000204 	addi	r8,r8,8
   221fc:	8800041e 	bne	r17,zero,22210 <___vfprintf_internal_r+0x1a78>
   22200:	d8803317 	ldw	r2,204(sp)
   22204:	1000021e 	bne	r2,zero,22210 <___vfprintf_internal_r+0x1a78>
   22208:	9080004c 	andi	r2,r18,1
   2220c:	103be726 	beq	r2,zero,211ac <__alt_data_end+0xfffe11ac>
   22210:	d9003717 	ldw	r4,220(sp)
   22214:	d8801f17 	ldw	r2,124(sp)
   22218:	d9403417 	ldw	r5,208(sp)
   2221c:	20c7883a 	add	r3,r4,r3
   22220:	10800044 	addi	r2,r2,1
   22224:	41000115 	stw	r4,4(r8)
   22228:	41400015 	stw	r5,0(r8)
   2222c:	d8c02015 	stw	r3,128(sp)
   22230:	d8801f15 	stw	r2,124(sp)
   22234:	010001c4 	movi	r4,7
   22238:	20812116 	blt	r4,r2,226c0 <___vfprintf_internal_r+0x1f28>
   2223c:	42000204 	addi	r8,r8,8
   22240:	0463c83a 	sub	r17,zero,r17
   22244:	0440730e 	bge	zero,r17,22414 <___vfprintf_internal_r+0x1c7c>
   22248:	05800404 	movi	r22,16
   2224c:	b440860e 	bge	r22,r17,22468 <___vfprintf_internal_r+0x1cd0>
   22250:	014000f4 	movhi	r5,3
   22254:	2949ab84 	addi	r5,r5,9902
   22258:	d9402c15 	stw	r5,176(sp)
   2225c:	070001c4 	movi	fp,7
   22260:	dcc02d17 	ldw	r19,180(sp)
   22264:	00000306 	br	22274 <___vfprintf_internal_r+0x1adc>
   22268:	42000204 	addi	r8,r8,8
   2226c:	8c7ffc04 	addi	r17,r17,-16
   22270:	b440800e 	bge	r22,r17,22474 <___vfprintf_internal_r+0x1cdc>
   22274:	18c00404 	addi	r3,r3,16
   22278:	10800044 	addi	r2,r2,1
   2227c:	45000015 	stw	r20,0(r8)
   22280:	45800115 	stw	r22,4(r8)
   22284:	d8c02015 	stw	r3,128(sp)
   22288:	d8801f15 	stw	r2,124(sp)
   2228c:	e0bff60e 	bge	fp,r2,22268 <__alt_data_end+0xfffe2268>
   22290:	d9801e04 	addi	r6,sp,120
   22294:	b80b883a 	mov	r5,r23
   22298:	9809883a 	mov	r4,r19
   2229c:	00280e00 	call	280e0 <__sprint_r>
   222a0:	103a411e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   222a4:	d8c02017 	ldw	r3,128(sp)
   222a8:	d8801f17 	ldw	r2,124(sp)
   222ac:	da000404 	addi	r8,sp,16
   222b0:	003fee06 	br	2226c <__alt_data_end+0xfffe226c>
   222b4:	00bfffc4 	movi	r2,-1
   222b8:	003a3f06 	br	20bb8 <__alt_data_end+0xfffe0bb8>
   222bc:	008011c4 	movi	r2,71
   222c0:	1440b816 	blt	r2,r17,225a4 <___vfprintf_internal_r+0x1e0c>
   222c4:	040000f4 	movhi	r16,3
   222c8:	84099d04 	addi	r16,r16,9844
   222cc:	00c000c4 	movi	r3,3
   222d0:	00bfdfc4 	movi	r2,-129
   222d4:	d8c02915 	stw	r3,164(sp)
   222d8:	90a4703a 	and	r18,r18,r2
   222dc:	df002783 	ldbu	fp,158(sp)
   222e0:	d8c02b15 	stw	r3,172(sp)
   222e4:	d8002a15 	stw	zero,168(sp)
   222e8:	d8003215 	stw	zero,200(sp)
   222ec:	003b0706 	br	20f0c <__alt_data_end+0xfffe0f0c>
   222f0:	d8c02e17 	ldw	r3,184(sp)
   222f4:	1cc00017 	ldw	r19,0(r3)
   222f8:	18c00104 	addi	r3,r3,4
   222fc:	d8c02e15 	stw	r3,184(sp)
   22300:	982dd7fa 	srai	r22,r19,31
   22304:	b005883a 	mov	r2,r22
   22308:	003a7706 	br	20ce8 <__alt_data_end+0xfffe0ce8>
   2230c:	d8c02e17 	ldw	r3,184(sp)
   22310:	d9002f17 	ldw	r4,188(sp)
   22314:	18800017 	ldw	r2,0(r3)
   22318:	18c00104 	addi	r3,r3,4
   2231c:	d8c02e15 	stw	r3,184(sp)
   22320:	11000015 	stw	r4,0(r2)
   22324:	00395406 	br	20878 <__alt_data_end+0xfffe0878>
   22328:	d9002e17 	ldw	r4,184(sp)
   2232c:	002d883a 	mov	r22,zero
   22330:	24c00017 	ldw	r19,0(r4)
   22334:	21000104 	addi	r4,r4,4
   22338:	d9002e15 	stw	r4,184(sp)
   2233c:	003c0706 	br	2135c <__alt_data_end+0xfffe135c>
   22340:	d9402e17 	ldw	r5,184(sp)
   22344:	d8c02a17 	ldw	r3,168(sp)
   22348:	002d883a 	mov	r22,zero
   2234c:	28800104 	addi	r2,r5,4
   22350:	2cc0000b 	ldhu	r19,0(r5)
   22354:	183dc10e 	bge	r3,zero,21a5c <__alt_data_end+0xfffe1a5c>
   22358:	003f7506 	br	22130 <__alt_data_end+0xfffe2130>
   2235c:	040000f4 	movhi	r16,3
   22360:	84099b04 	addi	r16,r16,9836
   22364:	003aa706 	br	20e04 <__alt_data_end+0xfffe0e04>
   22368:	d9002d17 	ldw	r4,180(sp)
   2236c:	d9801e04 	addi	r6,sp,120
   22370:	b80b883a 	mov	r5,r23
   22374:	00280e00 	call	280e0 <__sprint_r>
   22378:	103a0b1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   2237c:	dc402617 	ldw	r17,152(sp)
   22380:	d8c02017 	ldw	r3,128(sp)
   22384:	da000404 	addi	r8,sp,16
   22388:	003f9c06 	br	221fc <__alt_data_end+0xfffe21fc>
   2238c:	ac400043 	ldbu	r17,1(r21)
   22390:	84000814 	ori	r16,r16,32
   22394:	ad400044 	addi	r21,r21,1
   22398:	8c403fcc 	andi	r17,r17,255
   2239c:	8c40201c 	xori	r17,r17,128
   223a0:	8c7fe004 	addi	r17,r17,-128
   223a4:	00395e06 	br	20920 <__alt_data_end+0xfffe0920>
   223a8:	d8c02e15 	stw	r3,184(sp)
   223ac:	0039883a 	mov	fp,zero
   223b0:	003e3506 	br	21c88 <__alt_data_end+0xfffe1c88>
   223b4:	d9002d17 	ldw	r4,180(sp)
   223b8:	d9801e04 	addi	r6,sp,120
   223bc:	b80b883a 	mov	r5,r23
   223c0:	00280e00 	call	280e0 <__sprint_r>
   223c4:	1039f81e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   223c8:	d8c02017 	ldw	r3,128(sp)
   223cc:	da000404 	addi	r8,sp,16
   223d0:	003cd006 	br	21714 <__alt_data_end+0xfffe1714>
   223d4:	8009883a 	mov	r4,r16
   223d8:	df003d15 	stw	fp,244(sp)
   223dc:	00207000 	call	20700 <strlen>
   223e0:	d8802b15 	stw	r2,172(sp)
   223e4:	da003d17 	ldw	r8,244(sp)
   223e8:	103c200e 	bge	r2,zero,2146c <__alt_data_end+0xfffe146c>
   223ec:	0005883a 	mov	r2,zero
   223f0:	003c1e06 	br	2146c <__alt_data_end+0xfffe146c>
   223f4:	d9002d17 	ldw	r4,180(sp)
   223f8:	d9801e04 	addi	r6,sp,120
   223fc:	b80b883a 	mov	r5,r23
   22400:	00280e00 	call	280e0 <__sprint_r>
   22404:	1039e81e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   22408:	d8c02017 	ldw	r3,128(sp)
   2240c:	d8801f17 	ldw	r2,124(sp)
   22410:	da000404 	addi	r8,sp,16
   22414:	d9403317 	ldw	r5,204(sp)
   22418:	10800044 	addi	r2,r2,1
   2241c:	44000015 	stw	r16,0(r8)
   22420:	28c7883a 	add	r3,r5,r3
   22424:	003b5b06 	br	21194 <__alt_data_end+0xfffe1194>
   22428:	010000f4 	movhi	r4,3
   2242c:	2109af84 	addi	r4,r4,9918
   22430:	d9003515 	stw	r4,212(sp)
   22434:	003af206 	br	21000 <__alt_data_end+0xfffe1000>
   22438:	013fffc4 	movi	r4,-1
   2243c:	003a0806 	br	20c60 <__alt_data_end+0xfffe0c60>
   22440:	0023883a 	mov	r17,zero
   22444:	003d9d06 	br	21abc <__alt_data_end+0xfffe1abc>
   22448:	d9002d17 	ldw	r4,180(sp)
   2244c:	d9801e04 	addi	r6,sp,120
   22450:	b80b883a 	mov	r5,r23
   22454:	00280e00 	call	280e0 <__sprint_r>
   22458:	1039d31e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   2245c:	d8c02017 	ldw	r3,128(sp)
   22460:	da000404 	addi	r8,sp,16
   22464:	003d9406 	br	21ab8 <__alt_data_end+0xfffe1ab8>
   22468:	010000f4 	movhi	r4,3
   2246c:	2109ab84 	addi	r4,r4,9902
   22470:	d9002c15 	stw	r4,176(sp)
   22474:	d9002c17 	ldw	r4,176(sp)
   22478:	1c47883a 	add	r3,r3,r17
   2247c:	10800044 	addi	r2,r2,1
   22480:	41000015 	stw	r4,0(r8)
   22484:	44400115 	stw	r17,4(r8)
   22488:	d8c02015 	stw	r3,128(sp)
   2248c:	d8801f15 	stw	r2,124(sp)
   22490:	010001c4 	movi	r4,7
   22494:	20bfd716 	blt	r4,r2,223f4 <__alt_data_end+0xfffe23f4>
   22498:	42000204 	addi	r8,r8,8
   2249c:	003fdd06 	br	22414 <__alt_data_end+0xfffe2414>
   224a0:	d9002d17 	ldw	r4,180(sp)
   224a4:	d9801e04 	addi	r6,sp,120
   224a8:	b80b883a 	mov	r5,r23
   224ac:	00280e00 	call	280e0 <__sprint_r>
   224b0:	1039bd1e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   224b4:	d8802617 	ldw	r2,152(sp)
   224b8:	d8c02017 	ldw	r3,128(sp)
   224bc:	da000404 	addi	r8,sp,16
   224c0:	003e1006 	br	21d04 <__alt_data_end+0xfffe1d04>
   224c4:	00800044 	movi	r2,1
   224c8:	10803fcc 	andi	r2,r2,255
   224cc:	00c00044 	movi	r3,1
   224d0:	10fa0d26 	beq	r2,r3,20d08 <__alt_data_end+0xfffe0d08>
   224d4:	00c00084 	movi	r3,2
   224d8:	10fbaf26 	beq	r2,r3,21398 <__alt_data_end+0xfffe1398>
   224dc:	003a6d06 	br	20e94 <__alt_data_end+0xfffe0e94>
   224e0:	010000f4 	movhi	r4,3
   224e4:	2109af84 	addi	r4,r4,9918
   224e8:	d9003515 	stw	r4,212(sp)
   224ec:	003b5406 	br	21240 <__alt_data_end+0xfffe1240>
   224f0:	d8802a17 	ldw	r2,168(sp)
   224f4:	00c00184 	movi	r3,6
   224f8:	1880012e 	bgeu	r3,r2,22500 <___vfprintf_internal_r+0x1d68>
   224fc:	1805883a 	mov	r2,r3
   22500:	d8802b15 	stw	r2,172(sp)
   22504:	1000ef16 	blt	r2,zero,228c4 <___vfprintf_internal_r+0x212c>
   22508:	040000f4 	movhi	r16,3
   2250c:	d8802915 	stw	r2,164(sp)
   22510:	dcc02e15 	stw	r19,184(sp)
   22514:	d8002a15 	stw	zero,168(sp)
   22518:	d8003215 	stw	zero,200(sp)
   2251c:	8409a904 	addi	r16,r16,9892
   22520:	0039883a 	mov	fp,zero
   22524:	003a8006 	br	20f28 <__alt_data_end+0xfffe0f28>
   22528:	0021883a 	mov	r16,zero
   2252c:	003e0706 	br	21d4c <__alt_data_end+0xfffe1d4c>
   22530:	d9002d17 	ldw	r4,180(sp)
   22534:	d9801e04 	addi	r6,sp,120
   22538:	b80b883a 	mov	r5,r23
   2253c:	00280e00 	call	280e0 <__sprint_r>
   22540:	1039991e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   22544:	d8802617 	ldw	r2,152(sp)
   22548:	d9403317 	ldw	r5,204(sp)
   2254c:	d8c02017 	ldw	r3,128(sp)
   22550:	da000404 	addi	r8,sp,16
   22554:	2885c83a 	sub	r2,r5,r2
   22558:	003dfb06 	br	21d48 <__alt_data_end+0xfffe1d48>
   2255c:	9080004c 	andi	r2,r18,1
   22560:	103e8f1e 	bne	r2,zero,21fa0 <__alt_data_end+0xfffe1fa0>
   22564:	d8802117 	ldw	r2,132(sp)
   22568:	003e9e06 	br	21fe4 <__alt_data_end+0xfffe1fe4>
   2256c:	1025883a 	mov	r18,r2
   22570:	0039883a 	mov	fp,zero
   22574:	00800084 	movi	r2,2
   22578:	003fd306 	br	224c8 <__alt_data_end+0xfffe24c8>
   2257c:	07000b44 	movi	fp,45
   22580:	df002785 	stb	fp,158(sp)
   22584:	003a1b06 	br	20df4 <__alt_data_end+0xfffe0df4>
   22588:	00c00b44 	movi	r3,45
   2258c:	d8c02785 	stb	r3,158(sp)
   22590:	d8802915 	stw	r2,164(sp)
   22594:	dc802c17 	ldw	r18,176(sp)
   22598:	d8002a15 	stw	zero,168(sp)
   2259c:	07000b44 	movi	fp,45
   225a0:	003a5e06 	br	20f1c <__alt_data_end+0xfffe0f1c>
   225a4:	040000f4 	movhi	r16,3
   225a8:	84099e04 	addi	r16,r16,9848
   225ac:	003f4706 	br	222cc <__alt_data_end+0xfffe22cc>
   225b0:	d9002e17 	ldw	r4,184(sp)
   225b4:	d9402f17 	ldw	r5,188(sp)
   225b8:	20800017 	ldw	r2,0(r4)
   225bc:	21000104 	addi	r4,r4,4
   225c0:	d9002e15 	stw	r4,184(sp)
   225c4:	11400015 	stw	r5,0(r2)
   225c8:	0038ab06 	br	20878 <__alt_data_end+0xfffe0878>
   225cc:	dd802617 	ldw	r22,152(sp)
   225d0:	00bfff44 	movi	r2,-3
   225d4:	b0801c16 	blt	r22,r2,22648 <___vfprintf_internal_r+0x1eb0>
   225d8:	d9402a17 	ldw	r5,168(sp)
   225dc:	2d801a16 	blt	r5,r22,22648 <___vfprintf_internal_r+0x1eb0>
   225e0:	dd803215 	stw	r22,200(sp)
   225e4:	003e8906 	br	2200c <__alt_data_end+0xfffe200c>
   225e8:	010000f4 	movhi	r4,3
   225ec:	2109ab84 	addi	r4,r4,9902
   225f0:	d9002c15 	stw	r4,176(sp)
   225f4:	003c9106 	br	2183c <__alt_data_end+0xfffe183c>
   225f8:	e005883a 	mov	r2,fp
   225fc:	003e7906 	br	21fe4 <__alt_data_end+0xfffe1fe4>
   22600:	d9002a17 	ldw	r4,168(sp)
   22604:	df002783 	ldbu	fp,158(sp)
   22608:	dcc02e15 	stw	r19,184(sp)
   2260c:	d9002915 	stw	r4,164(sp)
   22610:	d9002b15 	stw	r4,172(sp)
   22614:	d8002a15 	stw	zero,168(sp)
   22618:	d8003215 	stw	zero,200(sp)
   2261c:	003a3b06 	br	20f0c <__alt_data_end+0xfffe0f0c>
   22620:	9080004c 	andi	r2,r18,1
   22624:	0039883a 	mov	fp,zero
   22628:	10000426 	beq	r2,zero,2263c <___vfprintf_internal_r+0x1ea4>
   2262c:	00800c04 	movi	r2,48
   22630:	dc001dc4 	addi	r16,sp,119
   22634:	d8801dc5 	stb	r2,119(sp)
   22638:	003b6406 	br	213cc <__alt_data_end+0xfffe13cc>
   2263c:	d8002b15 	stw	zero,172(sp)
   22640:	dc001e04 	addi	r16,sp,120
   22644:	003a2b06 	br	20ef4 <__alt_data_end+0xfffe0ef4>
   22648:	8c7fff84 	addi	r17,r17,-2
   2264c:	b5bfffc4 	addi	r22,r22,-1
   22650:	dd802615 	stw	r22,152(sp)
   22654:	dc4022c5 	stb	r17,139(sp)
   22658:	b000bf16 	blt	r22,zero,22958 <___vfprintf_internal_r+0x21c0>
   2265c:	00800ac4 	movi	r2,43
   22660:	d8802305 	stb	r2,140(sp)
   22664:	00800244 	movi	r2,9
   22668:	15807016 	blt	r2,r22,2282c <___vfprintf_internal_r+0x2094>
   2266c:	00800c04 	movi	r2,48
   22670:	b5800c04 	addi	r22,r22,48
   22674:	d8802345 	stb	r2,141(sp)
   22678:	dd802385 	stb	r22,142(sp)
   2267c:	d88023c4 	addi	r2,sp,143
   22680:	df0022c4 	addi	fp,sp,139
   22684:	d8c03317 	ldw	r3,204(sp)
   22688:	1739c83a 	sub	fp,r2,fp
   2268c:	d9003317 	ldw	r4,204(sp)
   22690:	e0c7883a 	add	r3,fp,r3
   22694:	df003a15 	stw	fp,232(sp)
   22698:	d8c02b15 	stw	r3,172(sp)
   2269c:	00800044 	movi	r2,1
   226a0:	1100b30e 	bge	r2,r4,22970 <___vfprintf_internal_r+0x21d8>
   226a4:	d8c02b17 	ldw	r3,172(sp)
   226a8:	18c00044 	addi	r3,r3,1
   226ac:	d8c02b15 	stw	r3,172(sp)
   226b0:	1805883a 	mov	r2,r3
   226b4:	1800ac16 	blt	r3,zero,22968 <___vfprintf_internal_r+0x21d0>
   226b8:	d8003215 	stw	zero,200(sp)
   226bc:	003e5d06 	br	22034 <__alt_data_end+0xfffe2034>
   226c0:	d9002d17 	ldw	r4,180(sp)
   226c4:	d9801e04 	addi	r6,sp,120
   226c8:	b80b883a 	mov	r5,r23
   226cc:	00280e00 	call	280e0 <__sprint_r>
   226d0:	1039351e 	bne	r2,zero,20ba8 <__alt_data_end+0xfffe0ba8>
   226d4:	dc402617 	ldw	r17,152(sp)
   226d8:	d8c02017 	ldw	r3,128(sp)
   226dc:	d8801f17 	ldw	r2,124(sp)
   226e0:	da000404 	addi	r8,sp,16
   226e4:	003ed606 	br	22240 <__alt_data_end+0xfffe2240>
   226e8:	182b883a 	mov	r21,r3
   226ec:	d8002a15 	stw	zero,168(sp)
   226f0:	00388c06 	br	20924 <__alt_data_end+0xfffe0924>
   226f4:	d8802a17 	ldw	r2,168(sp)
   226f8:	103e071e 	bne	r2,zero,21f18 <__alt_data_end+0xfffe1f18>
   226fc:	dc002a15 	stw	r16,168(sp)
   22700:	003e0506 	br	21f18 <__alt_data_end+0xfffe1f18>
   22704:	d9002a17 	ldw	r4,168(sp)
   22708:	20c00044 	addi	r3,r4,1
   2270c:	003e0f06 	br	21f4c <__alt_data_end+0xfffe1f4c>
   22710:	01400184 	movi	r5,6
   22714:	d9402a15 	stw	r5,168(sp)
   22718:	003dff06 	br	21f18 <__alt_data_end+0xfffe1f18>
   2271c:	d8802104 	addi	r2,sp,132
   22720:	d8800315 	stw	r2,12(sp)
   22724:	d8802504 	addi	r2,sp,148
   22728:	d8800215 	stw	r2,8(sp)
   2272c:	d8802604 	addi	r2,sp,152
   22730:	d8800115 	stw	r2,4(sp)
   22734:	d8802a17 	ldw	r2,168(sp)
   22738:	d9403617 	ldw	r5,216(sp)
   2273c:	d9002d17 	ldw	r4,180(sp)
   22740:	d8800015 	stw	r2,0(sp)
   22744:	01c000c4 	movi	r7,3
   22748:	980d883a 	mov	r6,r19
   2274c:	da003d15 	stw	r8,244(sp)
   22750:	0022ec80 	call	22ec8 <_dtoa_r>
   22754:	d8c02a17 	ldw	r3,168(sp)
   22758:	da003d17 	ldw	r8,244(sp)
   2275c:	1021883a 	mov	r16,r2
   22760:	10f9883a 	add	fp,r2,r3
   22764:	81000007 	ldb	r4,0(r16)
   22768:	00800c04 	movi	r2,48
   2276c:	20805e26 	beq	r4,r2,228e8 <___vfprintf_internal_r+0x2150>
   22770:	d8c02617 	ldw	r3,152(sp)
   22774:	e0f9883a 	add	fp,fp,r3
   22778:	003e0a06 	br	21fa4 <__alt_data_end+0xfffe1fa4>
   2277c:	00c00b44 	movi	r3,45
   22780:	24e0003c 	xorhi	r19,r4,32768
   22784:	d8c02905 	stb	r3,164(sp)
   22788:	003de906 	br	21f30 <__alt_data_end+0xfffe1f30>
   2278c:	d8c03217 	ldw	r3,200(sp)
   22790:	00c07a0e 	bge	zero,r3,2297c <___vfprintf_internal_r+0x21e4>
   22794:	00800044 	movi	r2,1
   22798:	d9003317 	ldw	r4,204(sp)
   2279c:	1105883a 	add	r2,r2,r4
   227a0:	d8802b15 	stw	r2,172(sp)
   227a4:	10004e16 	blt	r2,zero,228e0 <___vfprintf_internal_r+0x2148>
   227a8:	044019c4 	movi	r17,103
   227ac:	003e2106 	br	22034 <__alt_data_end+0xfffe2034>
   227b0:	d9002a17 	ldw	r4,168(sp)
   227b4:	d8802104 	addi	r2,sp,132
   227b8:	d8800315 	stw	r2,12(sp)
   227bc:	d9000015 	stw	r4,0(sp)
   227c0:	d8802504 	addi	r2,sp,148
   227c4:	d9403617 	ldw	r5,216(sp)
   227c8:	d9002d17 	ldw	r4,180(sp)
   227cc:	d8800215 	stw	r2,8(sp)
   227d0:	d8802604 	addi	r2,sp,152
   227d4:	d8800115 	stw	r2,4(sp)
   227d8:	01c000c4 	movi	r7,3
   227dc:	980d883a 	mov	r6,r19
   227e0:	da003d15 	stw	r8,244(sp)
   227e4:	0022ec80 	call	22ec8 <_dtoa_r>
   227e8:	d8c02a17 	ldw	r3,168(sp)
   227ec:	da003d17 	ldw	r8,244(sp)
   227f0:	1021883a 	mov	r16,r2
   227f4:	00801184 	movi	r2,70
   227f8:	80f9883a 	add	fp,r16,r3
   227fc:	88bfd926 	beq	r17,r2,22764 <__alt_data_end+0xfffe2764>
   22800:	003de806 	br	21fa4 <__alt_data_end+0xfffe1fa4>
   22804:	d9002a17 	ldw	r4,168(sp)
   22808:	00c04d0e 	bge	zero,r3,22940 <___vfprintf_internal_r+0x21a8>
   2280c:	2000441e 	bne	r4,zero,22920 <___vfprintf_internal_r+0x2188>
   22810:	9480004c 	andi	r18,r18,1
   22814:	9000421e 	bne	r18,zero,22920 <___vfprintf_internal_r+0x2188>
   22818:	1805883a 	mov	r2,r3
   2281c:	18006f16 	blt	r3,zero,229dc <___vfprintf_internal_r+0x2244>
   22820:	d8c03217 	ldw	r3,200(sp)
   22824:	d8c02b15 	stw	r3,172(sp)
   22828:	003e0206 	br	22034 <__alt_data_end+0xfffe2034>
   2282c:	df0022c4 	addi	fp,sp,139
   22830:	dc002a15 	stw	r16,168(sp)
   22834:	4027883a 	mov	r19,r8
   22838:	e021883a 	mov	r16,fp
   2283c:	b009883a 	mov	r4,r22
   22840:	01400284 	movi	r5,10
   22844:	002ac6c0 	call	2ac6c <__modsi3>
   22848:	10800c04 	addi	r2,r2,48
   2284c:	843fffc4 	addi	r16,r16,-1
   22850:	b009883a 	mov	r4,r22
   22854:	01400284 	movi	r5,10
   22858:	80800005 	stb	r2,0(r16)
   2285c:	002abe80 	call	2abe8 <__divsi3>
   22860:	102d883a 	mov	r22,r2
   22864:	00800244 	movi	r2,9
   22868:	15bff416 	blt	r2,r22,2283c <__alt_data_end+0xfffe283c>
   2286c:	9811883a 	mov	r8,r19
   22870:	b0800c04 	addi	r2,r22,48
   22874:	8027883a 	mov	r19,r16
   22878:	997fffc4 	addi	r5,r19,-1
   2287c:	98bfffc5 	stb	r2,-1(r19)
   22880:	dc002a17 	ldw	r16,168(sp)
   22884:	2f006d2e 	bgeu	r5,fp,22a3c <___vfprintf_internal_r+0x22a4>
   22888:	d9c02384 	addi	r7,sp,142
   2288c:	3ccfc83a 	sub	r7,r7,r19
   22890:	d9002344 	addi	r4,sp,141
   22894:	e1cf883a 	add	r7,fp,r7
   22898:	00000106 	br	228a0 <___vfprintf_internal_r+0x2108>
   2289c:	28800003 	ldbu	r2,0(r5)
   228a0:	20800005 	stb	r2,0(r4)
   228a4:	21000044 	addi	r4,r4,1
   228a8:	29400044 	addi	r5,r5,1
   228ac:	393ffb1e 	bne	r7,r4,2289c <__alt_data_end+0xfffe289c>
   228b0:	d8802304 	addi	r2,sp,140
   228b4:	14c5c83a 	sub	r2,r2,r19
   228b8:	d8c02344 	addi	r3,sp,141
   228bc:	1885883a 	add	r2,r3,r2
   228c0:	003f7006 	br	22684 <__alt_data_end+0xfffe2684>
   228c4:	0005883a 	mov	r2,zero
   228c8:	003f0f06 	br	22508 <__alt_data_end+0xfffe2508>
   228cc:	d8c03217 	ldw	r3,200(sp)
   228d0:	18c00044 	addi	r3,r3,1
   228d4:	d8c02b15 	stw	r3,172(sp)
   228d8:	1805883a 	mov	r2,r3
   228dc:	183fb20e 	bge	r3,zero,227a8 <__alt_data_end+0xfffe27a8>
   228e0:	0005883a 	mov	r2,zero
   228e4:	003fb006 	br	227a8 <__alt_data_end+0xfffe27a8>
   228e8:	d9003617 	ldw	r4,216(sp)
   228ec:	000d883a 	mov	r6,zero
   228f0:	000f883a 	mov	r7,zero
   228f4:	980b883a 	mov	r5,r19
   228f8:	d8c03c15 	stw	r3,240(sp)
   228fc:	da003d15 	stw	r8,244(sp)
   22900:	002c0400 	call	2c040 <__eqdf2>
   22904:	d8c03c17 	ldw	r3,240(sp)
   22908:	da003d17 	ldw	r8,244(sp)
   2290c:	103f9826 	beq	r2,zero,22770 <__alt_data_end+0xfffe2770>
   22910:	00800044 	movi	r2,1
   22914:	10c7c83a 	sub	r3,r2,r3
   22918:	d8c02615 	stw	r3,152(sp)
   2291c:	003f9506 	br	22774 <__alt_data_end+0xfffe2774>
   22920:	d9002a17 	ldw	r4,168(sp)
   22924:	d8c03217 	ldw	r3,200(sp)
   22928:	20800044 	addi	r2,r4,1
   2292c:	1885883a 	add	r2,r3,r2
   22930:	d8802b15 	stw	r2,172(sp)
   22934:	103dbf0e 	bge	r2,zero,22034 <__alt_data_end+0xfffe2034>
   22938:	0005883a 	mov	r2,zero
   2293c:	003dbd06 	br	22034 <__alt_data_end+0xfffe2034>
   22940:	2000201e 	bne	r4,zero,229c4 <___vfprintf_internal_r+0x222c>
   22944:	9480004c 	andi	r18,r18,1
   22948:	90001e1e 	bne	r18,zero,229c4 <___vfprintf_internal_r+0x222c>
   2294c:	00800044 	movi	r2,1
   22950:	d8802b15 	stw	r2,172(sp)
   22954:	003db706 	br	22034 <__alt_data_end+0xfffe2034>
   22958:	00800b44 	movi	r2,45
   2295c:	05adc83a 	sub	r22,zero,r22
   22960:	d8802305 	stb	r2,140(sp)
   22964:	003f3f06 	br	22664 <__alt_data_end+0xfffe2664>
   22968:	0005883a 	mov	r2,zero
   2296c:	003f5206 	br	226b8 <__alt_data_end+0xfffe26b8>
   22970:	90a4703a 	and	r18,r18,r2
   22974:	903f4e26 	beq	r18,zero,226b0 <__alt_data_end+0xfffe26b0>
   22978:	003f4a06 	br	226a4 <__alt_data_end+0xfffe26a4>
   2297c:	00800084 	movi	r2,2
   22980:	10c5c83a 	sub	r2,r2,r3
   22984:	003f8406 	br	22798 <__alt_data_end+0xfffe2798>
   22988:	d9402e17 	ldw	r5,184(sp)
   2298c:	d9002e17 	ldw	r4,184(sp)
   22990:	ac400043 	ldbu	r17,1(r21)
   22994:	29400017 	ldw	r5,0(r5)
   22998:	20800104 	addi	r2,r4,4
   2299c:	d8802e15 	stw	r2,184(sp)
   229a0:	d9402a15 	stw	r5,168(sp)
   229a4:	182b883a 	mov	r21,r3
   229a8:	283e7b0e 	bge	r5,zero,22398 <__alt_data_end+0xfffe2398>
   229ac:	8c403fcc 	andi	r17,r17,255
   229b0:	017fffc4 	movi	r5,-1
   229b4:	8c40201c 	xori	r17,r17,128
   229b8:	d9402a15 	stw	r5,168(sp)
   229bc:	8c7fe004 	addi	r17,r17,-128
   229c0:	0037d706 	br	20920 <__alt_data_end+0xfffe0920>
   229c4:	d8c02a17 	ldw	r3,168(sp)
   229c8:	18c00084 	addi	r3,r3,2
   229cc:	d8c02b15 	stw	r3,172(sp)
   229d0:	1805883a 	mov	r2,r3
   229d4:	183d970e 	bge	r3,zero,22034 <__alt_data_end+0xfffe2034>
   229d8:	003fd706 	br	22938 <__alt_data_end+0xfffe2938>
   229dc:	0005883a 	mov	r2,zero
   229e0:	003f8f06 	br	22820 <__alt_data_end+0xfffe2820>
   229e4:	9080004c 	andi	r2,r18,1
   229e8:	103f821e 	bne	r2,zero,227f4 <__alt_data_end+0xfffe27f4>
   229ec:	d8802117 	ldw	r2,132(sp)
   229f0:	1405c83a 	sub	r2,r2,r16
   229f4:	d8803315 	stw	r2,204(sp)
   229f8:	b47ef426 	beq	r22,r17,225cc <__alt_data_end+0xfffe25cc>
   229fc:	dd802617 	ldw	r22,152(sp)
   22a00:	003f1206 	br	2264c <__alt_data_end+0xfffe264c>
   22a04:	d8c02b03 	ldbu	r3,172(sp)
   22a08:	d8c02785 	stb	r3,158(sp)
   22a0c:	0038df06 	br	20d8c <__alt_data_end+0xfffe0d8c>
   22a10:	d8c02b03 	ldbu	r3,172(sp)
   22a14:	d8c02785 	stb	r3,158(sp)
   22a18:	0038aa06 	br	20cc4 <__alt_data_end+0xfffe0cc4>
   22a1c:	d8c02b03 	ldbu	r3,172(sp)
   22a20:	d8c02785 	stb	r3,158(sp)
   22a24:	003a4306 	br	21334 <__alt_data_end+0xfffe1334>
   22a28:	d8c02b03 	ldbu	r3,172(sp)
   22a2c:	d8c02785 	stb	r3,158(sp)
   22a30:	003af506 	br	21608 <__alt_data_end+0xfffe1608>
   22a34:	0005883a 	mov	r2,zero
   22a38:	003d7b06 	br	22028 <__alt_data_end+0xfffe2028>
   22a3c:	d8802344 	addi	r2,sp,141
   22a40:	003f1006 	br	22684 <__alt_data_end+0xfffe2684>
   22a44:	d8c02b03 	ldbu	r3,172(sp)
   22a48:	d8c02785 	stb	r3,158(sp)
   22a4c:	0038fd06 	br	20e44 <__alt_data_end+0xfffe0e44>
   22a50:	d8c02b03 	ldbu	r3,172(sp)
   22a54:	d8c02785 	stb	r3,158(sp)
   22a58:	003a9706 	br	214b8 <__alt_data_end+0xfffe14b8>
   22a5c:	d8c02b03 	ldbu	r3,172(sp)
   22a60:	d8c02785 	stb	r3,158(sp)
   22a64:	003a1806 	br	212c8 <__alt_data_end+0xfffe12c8>
   22a68:	d8c02b03 	ldbu	r3,172(sp)
   22a6c:	d8c02785 	stb	r3,158(sp)
   22a70:	003abe06 	br	2156c <__alt_data_end+0xfffe156c>

00022a74 <__vfprintf_internal>:
   22a74:	008000f4 	movhi	r2,3
   22a78:	10914f04 	addi	r2,r2,17724
   22a7c:	300f883a 	mov	r7,r6
   22a80:	280d883a 	mov	r6,r5
   22a84:	200b883a 	mov	r5,r4
   22a88:	11000017 	ldw	r4,0(r2)
   22a8c:	00207981 	jmpi	20798 <___vfprintf_internal_r>

00022a90 <__sbprintf>:
   22a90:	2880030b 	ldhu	r2,12(r5)
   22a94:	2ac01917 	ldw	r11,100(r5)
   22a98:	2a80038b 	ldhu	r10,14(r5)
   22a9c:	2a400717 	ldw	r9,28(r5)
   22aa0:	2a000917 	ldw	r8,36(r5)
   22aa4:	defee204 	addi	sp,sp,-1144
   22aa8:	00c10004 	movi	r3,1024
   22aac:	dc011a15 	stw	r16,1128(sp)
   22ab0:	10bfff4c 	andi	r2,r2,65533
   22ab4:	2821883a 	mov	r16,r5
   22ab8:	d8cb883a 	add	r5,sp,r3
   22abc:	dc811c15 	stw	r18,1136(sp)
   22ac0:	dc411b15 	stw	r17,1132(sp)
   22ac4:	dfc11d15 	stw	ra,1140(sp)
   22ac8:	2025883a 	mov	r18,r4
   22acc:	d881030d 	sth	r2,1036(sp)
   22ad0:	dac11915 	stw	r11,1124(sp)
   22ad4:	da81038d 	sth	r10,1038(sp)
   22ad8:	da410715 	stw	r9,1052(sp)
   22adc:	da010915 	stw	r8,1060(sp)
   22ae0:	dec10015 	stw	sp,1024(sp)
   22ae4:	dec10415 	stw	sp,1040(sp)
   22ae8:	d8c10215 	stw	r3,1032(sp)
   22aec:	d8c10515 	stw	r3,1044(sp)
   22af0:	d8010615 	stw	zero,1048(sp)
   22af4:	00207980 	call	20798 <___vfprintf_internal_r>
   22af8:	1023883a 	mov	r17,r2
   22afc:	10000416 	blt	r2,zero,22b10 <__sbprintf+0x80>
   22b00:	d9410004 	addi	r5,sp,1024
   22b04:	9009883a 	mov	r4,r18
   22b08:	002476c0 	call	2476c <_fflush_r>
   22b0c:	10000d1e 	bne	r2,zero,22b44 <__sbprintf+0xb4>
   22b10:	d881030b 	ldhu	r2,1036(sp)
   22b14:	1080100c 	andi	r2,r2,64
   22b18:	10000326 	beq	r2,zero,22b28 <__sbprintf+0x98>
   22b1c:	8080030b 	ldhu	r2,12(r16)
   22b20:	10801014 	ori	r2,r2,64
   22b24:	8080030d 	sth	r2,12(r16)
   22b28:	8805883a 	mov	r2,r17
   22b2c:	dfc11d17 	ldw	ra,1140(sp)
   22b30:	dc811c17 	ldw	r18,1136(sp)
   22b34:	dc411b17 	ldw	r17,1132(sp)
   22b38:	dc011a17 	ldw	r16,1128(sp)
   22b3c:	dec11e04 	addi	sp,sp,1144
   22b40:	f800283a 	ret
   22b44:	047fffc4 	movi	r17,-1
   22b48:	003ff106 	br	22b10 <__alt_data_end+0xfffe2b10>

00022b4c <__swsetup_r>:
   22b4c:	008000f4 	movhi	r2,3
   22b50:	defffd04 	addi	sp,sp,-12
   22b54:	10914f04 	addi	r2,r2,17724
   22b58:	dc400115 	stw	r17,4(sp)
   22b5c:	2023883a 	mov	r17,r4
   22b60:	11000017 	ldw	r4,0(r2)
   22b64:	dc000015 	stw	r16,0(sp)
   22b68:	dfc00215 	stw	ra,8(sp)
   22b6c:	2821883a 	mov	r16,r5
   22b70:	20000226 	beq	r4,zero,22b7c <__swsetup_r+0x30>
   22b74:	20800e17 	ldw	r2,56(r4)
   22b78:	10003126 	beq	r2,zero,22c40 <__swsetup_r+0xf4>
   22b7c:	8080030b 	ldhu	r2,12(r16)
   22b80:	10c0020c 	andi	r3,r2,8
   22b84:	1009883a 	mov	r4,r2
   22b88:	18000f26 	beq	r3,zero,22bc8 <__swsetup_r+0x7c>
   22b8c:	80c00417 	ldw	r3,16(r16)
   22b90:	18001526 	beq	r3,zero,22be8 <__swsetup_r+0x9c>
   22b94:	1100004c 	andi	r4,r2,1
   22b98:	20001c1e 	bne	r4,zero,22c0c <__swsetup_r+0xc0>
   22b9c:	1080008c 	andi	r2,r2,2
   22ba0:	1000291e 	bne	r2,zero,22c48 <__swsetup_r+0xfc>
   22ba4:	80800517 	ldw	r2,20(r16)
   22ba8:	80800215 	stw	r2,8(r16)
   22bac:	18001c26 	beq	r3,zero,22c20 <__swsetup_r+0xd4>
   22bb0:	0005883a 	mov	r2,zero
   22bb4:	dfc00217 	ldw	ra,8(sp)
   22bb8:	dc400117 	ldw	r17,4(sp)
   22bbc:	dc000017 	ldw	r16,0(sp)
   22bc0:	dec00304 	addi	sp,sp,12
   22bc4:	f800283a 	ret
   22bc8:	2080040c 	andi	r2,r4,16
   22bcc:	10002e26 	beq	r2,zero,22c88 <__swsetup_r+0x13c>
   22bd0:	2080010c 	andi	r2,r4,4
   22bd4:	10001e1e 	bne	r2,zero,22c50 <__swsetup_r+0x104>
   22bd8:	80c00417 	ldw	r3,16(r16)
   22bdc:	20800214 	ori	r2,r4,8
   22be0:	8080030d 	sth	r2,12(r16)
   22be4:	183feb1e 	bne	r3,zero,22b94 <__alt_data_end+0xfffe2b94>
   22be8:	1100a00c 	andi	r4,r2,640
   22bec:	01408004 	movi	r5,512
   22bf0:	217fe826 	beq	r4,r5,22b94 <__alt_data_end+0xfffe2b94>
   22bf4:	800b883a 	mov	r5,r16
   22bf8:	8809883a 	mov	r4,r17
   22bfc:	00257080 	call	25708 <__smakebuf_r>
   22c00:	8080030b 	ldhu	r2,12(r16)
   22c04:	80c00417 	ldw	r3,16(r16)
   22c08:	003fe206 	br	22b94 <__alt_data_end+0xfffe2b94>
   22c0c:	80800517 	ldw	r2,20(r16)
   22c10:	80000215 	stw	zero,8(r16)
   22c14:	0085c83a 	sub	r2,zero,r2
   22c18:	80800615 	stw	r2,24(r16)
   22c1c:	183fe41e 	bne	r3,zero,22bb0 <__alt_data_end+0xfffe2bb0>
   22c20:	80c0030b 	ldhu	r3,12(r16)
   22c24:	0005883a 	mov	r2,zero
   22c28:	1900200c 	andi	r4,r3,128
   22c2c:	203fe126 	beq	r4,zero,22bb4 <__alt_data_end+0xfffe2bb4>
   22c30:	18c01014 	ori	r3,r3,64
   22c34:	80c0030d 	sth	r3,12(r16)
   22c38:	00bfffc4 	movi	r2,-1
   22c3c:	003fdd06 	br	22bb4 <__alt_data_end+0xfffe2bb4>
   22c40:	0024b580 	call	24b58 <__sinit>
   22c44:	003fcd06 	br	22b7c <__alt_data_end+0xfffe2b7c>
   22c48:	0005883a 	mov	r2,zero
   22c4c:	003fd606 	br	22ba8 <__alt_data_end+0xfffe2ba8>
   22c50:	81400c17 	ldw	r5,48(r16)
   22c54:	28000626 	beq	r5,zero,22c70 <__swsetup_r+0x124>
   22c58:	80801004 	addi	r2,r16,64
   22c5c:	28800326 	beq	r5,r2,22c6c <__swsetup_r+0x120>
   22c60:	8809883a 	mov	r4,r17
   22c64:	0024ccc0 	call	24ccc <_free_r>
   22c68:	8100030b 	ldhu	r4,12(r16)
   22c6c:	80000c15 	stw	zero,48(r16)
   22c70:	80c00417 	ldw	r3,16(r16)
   22c74:	00bff6c4 	movi	r2,-37
   22c78:	1108703a 	and	r4,r2,r4
   22c7c:	80000115 	stw	zero,4(r16)
   22c80:	80c00015 	stw	r3,0(r16)
   22c84:	003fd506 	br	22bdc <__alt_data_end+0xfffe2bdc>
   22c88:	00800244 	movi	r2,9
   22c8c:	88800015 	stw	r2,0(r17)
   22c90:	20801014 	ori	r2,r4,64
   22c94:	8080030d 	sth	r2,12(r16)
   22c98:	00bfffc4 	movi	r2,-1
   22c9c:	003fc506 	br	22bb4 <__alt_data_end+0xfffe2bb4>

00022ca0 <quorem>:
   22ca0:	defff204 	addi	sp,sp,-56
   22ca4:	ddc00b15 	stw	r23,44(sp)
   22ca8:	20800417 	ldw	r2,16(r4)
   22cac:	2dc00417 	ldw	r23,16(r5)
   22cb0:	dfc00d15 	stw	ra,52(sp)
   22cb4:	df000c15 	stw	fp,48(sp)
   22cb8:	dd800a15 	stw	r22,40(sp)
   22cbc:	dd400915 	stw	r21,36(sp)
   22cc0:	dd000815 	stw	r20,32(sp)
   22cc4:	dcc00715 	stw	r19,28(sp)
   22cc8:	dc800615 	stw	r18,24(sp)
   22ccc:	dc400515 	stw	r17,20(sp)
   22cd0:	dc000415 	stw	r16,16(sp)
   22cd4:	15c07a16 	blt	r2,r23,22ec0 <quorem+0x220>
   22cd8:	bdffffc4 	addi	r23,r23,-1
   22cdc:	bde9883a 	add	r20,r23,r23
   22ce0:	28c00504 	addi	r3,r5,20
   22ce4:	a529883a 	add	r20,r20,r20
   22ce8:	1d39883a 	add	fp,r3,r20
   22cec:	24c00504 	addi	r19,r4,20
   22cf0:	d9400215 	stw	r5,8(sp)
   22cf4:	9d29883a 	add	r20,r19,r20
   22cf8:	e1400017 	ldw	r5,0(fp)
   22cfc:	d9000015 	stw	r4,0(sp)
   22d00:	a1000017 	ldw	r4,0(r20)
   22d04:	29400044 	addi	r5,r5,1
   22d08:	d8c00115 	stw	r3,4(sp)
   22d0c:	dd000315 	stw	r20,12(sp)
   22d10:	002ace00 	call	2ace0 <__udivsi3>
   22d14:	1025883a 	mov	r18,r2
   22d18:	10003026 	beq	r2,zero,22ddc <quorem+0x13c>
   22d1c:	dc400117 	ldw	r17,4(sp)
   22d20:	9829883a 	mov	r20,r19
   22d24:	002d883a 	mov	r22,zero
   22d28:	0021883a 	mov	r16,zero
   22d2c:	8d400017 	ldw	r21,0(r17)
   22d30:	900b883a 	mov	r5,r18
   22d34:	8c400104 	addi	r17,r17,4
   22d38:	a93fffcc 	andi	r4,r21,65535
   22d3c:	002ad9c0 	call	2ad9c <__mulsi3>
   22d40:	a808d43a 	srli	r4,r21,16
   22d44:	900b883a 	mov	r5,r18
   22d48:	15ad883a 	add	r22,r2,r22
   22d4c:	002ad9c0 	call	2ad9c <__mulsi3>
   22d50:	a1000017 	ldw	r4,0(r20)
   22d54:	b00cd43a 	srli	r6,r22,16
   22d58:	b0ffffcc 	andi	r3,r22,65535
   22d5c:	217fffcc 	andi	r5,r4,65535
   22d60:	2c21883a 	add	r16,r5,r16
   22d64:	80c7c83a 	sub	r3,r16,r3
   22d68:	2008d43a 	srli	r4,r4,16
   22d6c:	1185883a 	add	r2,r2,r6
   22d70:	1821d43a 	srai	r16,r3,16
   22d74:	117fffcc 	andi	r5,r2,65535
   22d78:	2149c83a 	sub	r4,r4,r5
   22d7c:	2421883a 	add	r16,r4,r16
   22d80:	8008943a 	slli	r4,r16,16
   22d84:	18ffffcc 	andi	r3,r3,65535
   22d88:	102cd43a 	srli	r22,r2,16
   22d8c:	20c8b03a 	or	r4,r4,r3
   22d90:	a1000015 	stw	r4,0(r20)
   22d94:	8021d43a 	srai	r16,r16,16
   22d98:	a5000104 	addi	r20,r20,4
   22d9c:	e47fe32e 	bgeu	fp,r17,22d2c <__alt_data_end+0xfffe2d2c>
   22da0:	d8c00317 	ldw	r3,12(sp)
   22da4:	18800017 	ldw	r2,0(r3)
   22da8:	10000c1e 	bne	r2,zero,22ddc <quorem+0x13c>
   22dac:	18bfff04 	addi	r2,r3,-4
   22db0:	9880082e 	bgeu	r19,r2,22dd4 <quorem+0x134>
   22db4:	18ffff17 	ldw	r3,-4(r3)
   22db8:	18000326 	beq	r3,zero,22dc8 <quorem+0x128>
   22dbc:	00000506 	br	22dd4 <quorem+0x134>
   22dc0:	10c00017 	ldw	r3,0(r2)
   22dc4:	1800031e 	bne	r3,zero,22dd4 <quorem+0x134>
   22dc8:	10bfff04 	addi	r2,r2,-4
   22dcc:	bdffffc4 	addi	r23,r23,-1
   22dd0:	98bffb36 	bltu	r19,r2,22dc0 <__alt_data_end+0xfffe2dc0>
   22dd4:	d8c00017 	ldw	r3,0(sp)
   22dd8:	1dc00415 	stw	r23,16(r3)
   22ddc:	d9400217 	ldw	r5,8(sp)
   22de0:	d9000017 	ldw	r4,0(sp)
   22de4:	0026f040 	call	26f04 <__mcmp>
   22de8:	10002816 	blt	r2,zero,22e8c <quorem+0x1ec>
   22dec:	dc400117 	ldw	r17,4(sp)
   22df0:	94800044 	addi	r18,r18,1
   22df4:	980d883a 	mov	r6,r19
   22df8:	0007883a 	mov	r3,zero
   22dfc:	31000017 	ldw	r4,0(r6)
   22e00:	89400017 	ldw	r5,0(r17)
   22e04:	31800104 	addi	r6,r6,4
   22e08:	20bfffcc 	andi	r2,r4,65535
   22e0c:	10c7883a 	add	r3,r2,r3
   22e10:	28bfffcc 	andi	r2,r5,65535
   22e14:	1885c83a 	sub	r2,r3,r2
   22e18:	280ad43a 	srli	r5,r5,16
   22e1c:	2008d43a 	srli	r4,r4,16
   22e20:	1007d43a 	srai	r3,r2,16
   22e24:	10bfffcc 	andi	r2,r2,65535
   22e28:	2149c83a 	sub	r4,r4,r5
   22e2c:	20c9883a 	add	r4,r4,r3
   22e30:	200a943a 	slli	r5,r4,16
   22e34:	8c400104 	addi	r17,r17,4
   22e38:	2007d43a 	srai	r3,r4,16
   22e3c:	2884b03a 	or	r2,r5,r2
   22e40:	30bfff15 	stw	r2,-4(r6)
   22e44:	e47fed2e 	bgeu	fp,r17,22dfc <__alt_data_end+0xfffe2dfc>
   22e48:	bdc5883a 	add	r2,r23,r23
   22e4c:	1085883a 	add	r2,r2,r2
   22e50:	9887883a 	add	r3,r19,r2
   22e54:	18800017 	ldw	r2,0(r3)
   22e58:	10000c1e 	bne	r2,zero,22e8c <quorem+0x1ec>
   22e5c:	18bfff04 	addi	r2,r3,-4
   22e60:	9880082e 	bgeu	r19,r2,22e84 <quorem+0x1e4>
   22e64:	18ffff17 	ldw	r3,-4(r3)
   22e68:	18000326 	beq	r3,zero,22e78 <quorem+0x1d8>
   22e6c:	00000506 	br	22e84 <quorem+0x1e4>
   22e70:	10c00017 	ldw	r3,0(r2)
   22e74:	1800031e 	bne	r3,zero,22e84 <quorem+0x1e4>
   22e78:	10bfff04 	addi	r2,r2,-4
   22e7c:	bdffffc4 	addi	r23,r23,-1
   22e80:	98bffb36 	bltu	r19,r2,22e70 <__alt_data_end+0xfffe2e70>
   22e84:	d8c00017 	ldw	r3,0(sp)
   22e88:	1dc00415 	stw	r23,16(r3)
   22e8c:	9005883a 	mov	r2,r18
   22e90:	dfc00d17 	ldw	ra,52(sp)
   22e94:	df000c17 	ldw	fp,48(sp)
   22e98:	ddc00b17 	ldw	r23,44(sp)
   22e9c:	dd800a17 	ldw	r22,40(sp)
   22ea0:	dd400917 	ldw	r21,36(sp)
   22ea4:	dd000817 	ldw	r20,32(sp)
   22ea8:	dcc00717 	ldw	r19,28(sp)
   22eac:	dc800617 	ldw	r18,24(sp)
   22eb0:	dc400517 	ldw	r17,20(sp)
   22eb4:	dc000417 	ldw	r16,16(sp)
   22eb8:	dec00e04 	addi	sp,sp,56
   22ebc:	f800283a 	ret
   22ec0:	0005883a 	mov	r2,zero
   22ec4:	003ff206 	br	22e90 <__alt_data_end+0xfffe2e90>

00022ec8 <_dtoa_r>:
   22ec8:	20801017 	ldw	r2,64(r4)
   22ecc:	deffde04 	addi	sp,sp,-136
   22ed0:	df002015 	stw	fp,128(sp)
   22ed4:	dcc01b15 	stw	r19,108(sp)
   22ed8:	dc801a15 	stw	r18,104(sp)
   22edc:	dc401915 	stw	r17,100(sp)
   22ee0:	dc001815 	stw	r16,96(sp)
   22ee4:	dfc02115 	stw	ra,132(sp)
   22ee8:	ddc01f15 	stw	r23,124(sp)
   22eec:	dd801e15 	stw	r22,120(sp)
   22ef0:	dd401d15 	stw	r21,116(sp)
   22ef4:	dd001c15 	stw	r20,112(sp)
   22ef8:	d9c00315 	stw	r7,12(sp)
   22efc:	2039883a 	mov	fp,r4
   22f00:	3023883a 	mov	r17,r6
   22f04:	2825883a 	mov	r18,r5
   22f08:	dc002417 	ldw	r16,144(sp)
   22f0c:	3027883a 	mov	r19,r6
   22f10:	10000826 	beq	r2,zero,22f34 <_dtoa_r+0x6c>
   22f14:	21801117 	ldw	r6,68(r4)
   22f18:	00c00044 	movi	r3,1
   22f1c:	100b883a 	mov	r5,r2
   22f20:	1986983a 	sll	r3,r3,r6
   22f24:	11800115 	stw	r6,4(r2)
   22f28:	10c00215 	stw	r3,8(r2)
   22f2c:	00266280 	call	26628 <_Bfree>
   22f30:	e0001015 	stw	zero,64(fp)
   22f34:	88002e16 	blt	r17,zero,22ff0 <_dtoa_r+0x128>
   22f38:	80000015 	stw	zero,0(r16)
   22f3c:	889ffc2c 	andhi	r2,r17,32752
   22f40:	00dffc34 	movhi	r3,32752
   22f44:	10c01c26 	beq	r2,r3,22fb8 <_dtoa_r+0xf0>
   22f48:	000d883a 	mov	r6,zero
   22f4c:	000f883a 	mov	r7,zero
   22f50:	9009883a 	mov	r4,r18
   22f54:	980b883a 	mov	r5,r19
   22f58:	002c0400 	call	2c040 <__eqdf2>
   22f5c:	10002b1e 	bne	r2,zero,2300c <_dtoa_r+0x144>
   22f60:	d9c02317 	ldw	r7,140(sp)
   22f64:	00800044 	movi	r2,1
   22f68:	38800015 	stw	r2,0(r7)
   22f6c:	d8802517 	ldw	r2,148(sp)
   22f70:	10019e26 	beq	r2,zero,235ec <_dtoa_r+0x724>
   22f74:	d8c02517 	ldw	r3,148(sp)
   22f78:	008000f4 	movhi	r2,3
   22f7c:	1089ab44 	addi	r2,r2,9901
   22f80:	18800015 	stw	r2,0(r3)
   22f84:	10bfffc4 	addi	r2,r2,-1
   22f88:	dfc02117 	ldw	ra,132(sp)
   22f8c:	df002017 	ldw	fp,128(sp)
   22f90:	ddc01f17 	ldw	r23,124(sp)
   22f94:	dd801e17 	ldw	r22,120(sp)
   22f98:	dd401d17 	ldw	r21,116(sp)
   22f9c:	dd001c17 	ldw	r20,112(sp)
   22fa0:	dcc01b17 	ldw	r19,108(sp)
   22fa4:	dc801a17 	ldw	r18,104(sp)
   22fa8:	dc401917 	ldw	r17,100(sp)
   22fac:	dc001817 	ldw	r16,96(sp)
   22fb0:	dec02204 	addi	sp,sp,136
   22fb4:	f800283a 	ret
   22fb8:	d8c02317 	ldw	r3,140(sp)
   22fbc:	0089c3c4 	movi	r2,9999
   22fc0:	18800015 	stw	r2,0(r3)
   22fc4:	90017726 	beq	r18,zero,235a4 <_dtoa_r+0x6dc>
   22fc8:	008000f4 	movhi	r2,3
   22fcc:	1089b704 	addi	r2,r2,9948
   22fd0:	d9002517 	ldw	r4,148(sp)
   22fd4:	203fec26 	beq	r4,zero,22f88 <__alt_data_end+0xfffe2f88>
   22fd8:	10c000c7 	ldb	r3,3(r2)
   22fdc:	1801781e 	bne	r3,zero,235c0 <_dtoa_r+0x6f8>
   22fe0:	10c000c4 	addi	r3,r2,3
   22fe4:	d9802517 	ldw	r6,148(sp)
   22fe8:	30c00015 	stw	r3,0(r6)
   22fec:	003fe606 	br	22f88 <__alt_data_end+0xfffe2f88>
   22ff0:	04e00034 	movhi	r19,32768
   22ff4:	9cffffc4 	addi	r19,r19,-1
   22ff8:	00800044 	movi	r2,1
   22ffc:	8ce6703a 	and	r19,r17,r19
   23000:	80800015 	stw	r2,0(r16)
   23004:	9823883a 	mov	r17,r19
   23008:	003fcc06 	br	22f3c <__alt_data_end+0xfffe2f3c>
   2300c:	d8800204 	addi	r2,sp,8
   23010:	d8800015 	stw	r2,0(sp)
   23014:	d9c00104 	addi	r7,sp,4
   23018:	900b883a 	mov	r5,r18
   2301c:	980d883a 	mov	r6,r19
   23020:	e009883a 	mov	r4,fp
   23024:	8820d53a 	srli	r16,r17,20
   23028:	00272d00 	call	272d0 <__d2b>
   2302c:	d8800915 	stw	r2,36(sp)
   23030:	8001651e 	bne	r16,zero,235c8 <_dtoa_r+0x700>
   23034:	dd800217 	ldw	r22,8(sp)
   23038:	dc000117 	ldw	r16,4(sp)
   2303c:	00800804 	movi	r2,32
   23040:	b421883a 	add	r16,r22,r16
   23044:	80c10c84 	addi	r3,r16,1074
   23048:	10c2d10e 	bge	r2,r3,23b90 <_dtoa_r+0xcc8>
   2304c:	00801004 	movi	r2,64
   23050:	81010484 	addi	r4,r16,1042
   23054:	10c7c83a 	sub	r3,r2,r3
   23058:	9108d83a 	srl	r4,r18,r4
   2305c:	88e2983a 	sll	r17,r17,r3
   23060:	2448b03a 	or	r4,r4,r17
   23064:	002d55c0 	call	2d55c <__floatunsidf>
   23068:	017f8434 	movhi	r5,65040
   2306c:	01800044 	movi	r6,1
   23070:	1009883a 	mov	r4,r2
   23074:	194b883a 	add	r5,r3,r5
   23078:	843fffc4 	addi	r16,r16,-1
   2307c:	d9801115 	stw	r6,68(sp)
   23080:	000d883a 	mov	r6,zero
   23084:	01cffe34 	movhi	r7,16376
   23088:	002cb040 	call	2cb04 <__subdf3>
   2308c:	0198dbf4 	movhi	r6,25455
   23090:	01cff4f4 	movhi	r7,16339
   23094:	3190d844 	addi	r6,r6,17249
   23098:	39e1e9c4 	addi	r7,r7,-30809
   2309c:	1009883a 	mov	r4,r2
   230a0:	180b883a 	mov	r5,r3
   230a4:	002c2980 	call	2c298 <__muldf3>
   230a8:	01a2d874 	movhi	r6,35681
   230ac:	01cff1f4 	movhi	r7,16327
   230b0:	31b22cc4 	addi	r6,r6,-14157
   230b4:	39e28a04 	addi	r7,r7,-30168
   230b8:	180b883a 	mov	r5,r3
   230bc:	1009883a 	mov	r4,r2
   230c0:	002adc40 	call	2adc4 <__adddf3>
   230c4:	8009883a 	mov	r4,r16
   230c8:	1029883a 	mov	r20,r2
   230cc:	1823883a 	mov	r17,r3
   230d0:	002d4800 	call	2d480 <__floatsidf>
   230d4:	019427f4 	movhi	r6,20639
   230d8:	01cff4f4 	movhi	r7,16339
   230dc:	319e7ec4 	addi	r6,r6,31227
   230e0:	39d104c4 	addi	r7,r7,17427
   230e4:	1009883a 	mov	r4,r2
   230e8:	180b883a 	mov	r5,r3
   230ec:	002c2980 	call	2c298 <__muldf3>
   230f0:	100d883a 	mov	r6,r2
   230f4:	180f883a 	mov	r7,r3
   230f8:	a009883a 	mov	r4,r20
   230fc:	880b883a 	mov	r5,r17
   23100:	002adc40 	call	2adc4 <__adddf3>
   23104:	1009883a 	mov	r4,r2
   23108:	180b883a 	mov	r5,r3
   2310c:	1029883a 	mov	r20,r2
   23110:	1823883a 	mov	r17,r3
   23114:	002d4000 	call	2d400 <__fixdfsi>
   23118:	000d883a 	mov	r6,zero
   2311c:	000f883a 	mov	r7,zero
   23120:	a009883a 	mov	r4,r20
   23124:	880b883a 	mov	r5,r17
   23128:	d8800515 	stw	r2,20(sp)
   2312c:	002c1a40 	call	2c1a4 <__ledf2>
   23130:	10028716 	blt	r2,zero,23b50 <_dtoa_r+0xc88>
   23134:	d8c00517 	ldw	r3,20(sp)
   23138:	00800584 	movi	r2,22
   2313c:	10c27536 	bltu	r2,r3,23b14 <_dtoa_r+0xc4c>
   23140:	180490fa 	slli	r2,r3,3
   23144:	00c000f4 	movhi	r3,3
   23148:	18c9d304 	addi	r3,r3,10060
   2314c:	1885883a 	add	r2,r3,r2
   23150:	11000017 	ldw	r4,0(r2)
   23154:	11400117 	ldw	r5,4(r2)
   23158:	900d883a 	mov	r6,r18
   2315c:	980f883a 	mov	r7,r19
   23160:	002c0c80 	call	2c0c8 <__gedf2>
   23164:	00828d0e 	bge	zero,r2,23b9c <_dtoa_r+0xcd4>
   23168:	d9000517 	ldw	r4,20(sp)
   2316c:	d8000e15 	stw	zero,56(sp)
   23170:	213fffc4 	addi	r4,r4,-1
   23174:	d9000515 	stw	r4,20(sp)
   23178:	b42dc83a 	sub	r22,r22,r16
   2317c:	b5bfffc4 	addi	r22,r22,-1
   23180:	b0026f16 	blt	r22,zero,23b40 <_dtoa_r+0xc78>
   23184:	d8000815 	stw	zero,32(sp)
   23188:	d9c00517 	ldw	r7,20(sp)
   2318c:	38026416 	blt	r7,zero,23b20 <_dtoa_r+0xc58>
   23190:	b1ed883a 	add	r22,r22,r7
   23194:	d9c00d15 	stw	r7,52(sp)
   23198:	d8000a15 	stw	zero,40(sp)
   2319c:	d9800317 	ldw	r6,12(sp)
   231a0:	00800244 	movi	r2,9
   231a4:	11811436 	bltu	r2,r6,235f8 <_dtoa_r+0x730>
   231a8:	00800144 	movi	r2,5
   231ac:	1184e10e 	bge	r2,r6,24534 <_dtoa_r+0x166c>
   231b0:	31bfff04 	addi	r6,r6,-4
   231b4:	d9800315 	stw	r6,12(sp)
   231b8:	0023883a 	mov	r17,zero
   231bc:	d9800317 	ldw	r6,12(sp)
   231c0:	008000c4 	movi	r2,3
   231c4:	30836726 	beq	r6,r2,23f64 <_dtoa_r+0x109c>
   231c8:	1183410e 	bge	r2,r6,23ed0 <_dtoa_r+0x1008>
   231cc:	d9c00317 	ldw	r7,12(sp)
   231d0:	00800104 	movi	r2,4
   231d4:	38827c26 	beq	r7,r2,23bc8 <_dtoa_r+0xd00>
   231d8:	00800144 	movi	r2,5
   231dc:	3884c41e 	bne	r7,r2,244f0 <_dtoa_r+0x1628>
   231e0:	00800044 	movi	r2,1
   231e4:	d8800b15 	stw	r2,44(sp)
   231e8:	d8c00517 	ldw	r3,20(sp)
   231ec:	d9002217 	ldw	r4,136(sp)
   231f0:	1907883a 	add	r3,r3,r4
   231f4:	19800044 	addi	r6,r3,1
   231f8:	d8c00c15 	stw	r3,48(sp)
   231fc:	d9800615 	stw	r6,24(sp)
   23200:	0183a40e 	bge	zero,r6,24094 <_dtoa_r+0x11cc>
   23204:	d9800617 	ldw	r6,24(sp)
   23208:	3021883a 	mov	r16,r6
   2320c:	e0001115 	stw	zero,68(fp)
   23210:	008005c4 	movi	r2,23
   23214:	1184c92e 	bgeu	r2,r6,2453c <_dtoa_r+0x1674>
   23218:	00c00044 	movi	r3,1
   2321c:	00800104 	movi	r2,4
   23220:	1085883a 	add	r2,r2,r2
   23224:	11000504 	addi	r4,r2,20
   23228:	180b883a 	mov	r5,r3
   2322c:	18c00044 	addi	r3,r3,1
   23230:	313ffb2e 	bgeu	r6,r4,23220 <__alt_data_end+0xfffe3220>
   23234:	e1401115 	stw	r5,68(fp)
   23238:	e009883a 	mov	r4,fp
   2323c:	00265800 	call	26580 <_Balloc>
   23240:	d8800715 	stw	r2,28(sp)
   23244:	e0801015 	stw	r2,64(fp)
   23248:	00800384 	movi	r2,14
   2324c:	1400f736 	bltu	r2,r16,2362c <_dtoa_r+0x764>
   23250:	8800f626 	beq	r17,zero,2362c <_dtoa_r+0x764>
   23254:	d9c00517 	ldw	r7,20(sp)
   23258:	01c39a0e 	bge	zero,r7,240c4 <_dtoa_r+0x11fc>
   2325c:	388003cc 	andi	r2,r7,15
   23260:	100490fa 	slli	r2,r2,3
   23264:	382bd13a 	srai	r21,r7,4
   23268:	00c000f4 	movhi	r3,3
   2326c:	18c9d304 	addi	r3,r3,10060
   23270:	1885883a 	add	r2,r3,r2
   23274:	a8c0040c 	andi	r3,r21,16
   23278:	12400017 	ldw	r9,0(r2)
   2327c:	12000117 	ldw	r8,4(r2)
   23280:	18037926 	beq	r3,zero,24068 <_dtoa_r+0x11a0>
   23284:	008000f4 	movhi	r2,3
   23288:	1089c904 	addi	r2,r2,10020
   2328c:	11800817 	ldw	r6,32(r2)
   23290:	11c00917 	ldw	r7,36(r2)
   23294:	9009883a 	mov	r4,r18
   23298:	980b883a 	mov	r5,r19
   2329c:	da001715 	stw	r8,92(sp)
   232a0:	da401615 	stw	r9,88(sp)
   232a4:	002b6700 	call	2b670 <__divdf3>
   232a8:	da001717 	ldw	r8,92(sp)
   232ac:	da401617 	ldw	r9,88(sp)
   232b0:	ad4003cc 	andi	r21,r21,15
   232b4:	040000c4 	movi	r16,3
   232b8:	1023883a 	mov	r17,r2
   232bc:	1829883a 	mov	r20,r3
   232c0:	a8001126 	beq	r21,zero,23308 <_dtoa_r+0x440>
   232c4:	05c000f4 	movhi	r23,3
   232c8:	bdc9c904 	addi	r23,r23,10020
   232cc:	4805883a 	mov	r2,r9
   232d0:	4007883a 	mov	r3,r8
   232d4:	a980004c 	andi	r6,r21,1
   232d8:	1009883a 	mov	r4,r2
   232dc:	a82bd07a 	srai	r21,r21,1
   232e0:	180b883a 	mov	r5,r3
   232e4:	30000426 	beq	r6,zero,232f8 <_dtoa_r+0x430>
   232e8:	b9800017 	ldw	r6,0(r23)
   232ec:	b9c00117 	ldw	r7,4(r23)
   232f0:	84000044 	addi	r16,r16,1
   232f4:	002c2980 	call	2c298 <__muldf3>
   232f8:	bdc00204 	addi	r23,r23,8
   232fc:	a83ff51e 	bne	r21,zero,232d4 <__alt_data_end+0xfffe32d4>
   23300:	1013883a 	mov	r9,r2
   23304:	1811883a 	mov	r8,r3
   23308:	480d883a 	mov	r6,r9
   2330c:	400f883a 	mov	r7,r8
   23310:	8809883a 	mov	r4,r17
   23314:	a00b883a 	mov	r5,r20
   23318:	002b6700 	call	2b670 <__divdf3>
   2331c:	d8800f15 	stw	r2,60(sp)
   23320:	d8c01015 	stw	r3,64(sp)
   23324:	d8c00e17 	ldw	r3,56(sp)
   23328:	18000626 	beq	r3,zero,23344 <_dtoa_r+0x47c>
   2332c:	d9000f17 	ldw	r4,60(sp)
   23330:	d9401017 	ldw	r5,64(sp)
   23334:	000d883a 	mov	r6,zero
   23338:	01cffc34 	movhi	r7,16368
   2333c:	002c1a40 	call	2c1a4 <__ledf2>
   23340:	10040b16 	blt	r2,zero,24370 <_dtoa_r+0x14a8>
   23344:	8009883a 	mov	r4,r16
   23348:	002d4800 	call	2d480 <__floatsidf>
   2334c:	d9800f17 	ldw	r6,60(sp)
   23350:	d9c01017 	ldw	r7,64(sp)
   23354:	1009883a 	mov	r4,r2
   23358:	180b883a 	mov	r5,r3
   2335c:	002c2980 	call	2c298 <__muldf3>
   23360:	000d883a 	mov	r6,zero
   23364:	01d00734 	movhi	r7,16412
   23368:	1009883a 	mov	r4,r2
   2336c:	180b883a 	mov	r5,r3
   23370:	002adc40 	call	2adc4 <__adddf3>
   23374:	1021883a 	mov	r16,r2
   23378:	d8800617 	ldw	r2,24(sp)
   2337c:	047f3034 	movhi	r17,64704
   23380:	1c63883a 	add	r17,r3,r17
   23384:	10031826 	beq	r2,zero,23fe8 <_dtoa_r+0x1120>
   23388:	d8c00517 	ldw	r3,20(sp)
   2338c:	db000617 	ldw	r12,24(sp)
   23390:	d8c01315 	stw	r3,76(sp)
   23394:	d9000b17 	ldw	r4,44(sp)
   23398:	20038f26 	beq	r4,zero,241d8 <_dtoa_r+0x1310>
   2339c:	60bfffc4 	addi	r2,r12,-1
   233a0:	100490fa 	slli	r2,r2,3
   233a4:	00c000f4 	movhi	r3,3
   233a8:	18c9d304 	addi	r3,r3,10060
   233ac:	1885883a 	add	r2,r3,r2
   233b0:	11800017 	ldw	r6,0(r2)
   233b4:	11c00117 	ldw	r7,4(r2)
   233b8:	d8800717 	ldw	r2,28(sp)
   233bc:	0009883a 	mov	r4,zero
   233c0:	014ff834 	movhi	r5,16352
   233c4:	db001615 	stw	r12,88(sp)
   233c8:	15c00044 	addi	r23,r2,1
   233cc:	002b6700 	call	2b670 <__divdf3>
   233d0:	800d883a 	mov	r6,r16
   233d4:	880f883a 	mov	r7,r17
   233d8:	1009883a 	mov	r4,r2
   233dc:	180b883a 	mov	r5,r3
   233e0:	002cb040 	call	2cb04 <__subdf3>
   233e4:	d9401017 	ldw	r5,64(sp)
   233e8:	d9000f17 	ldw	r4,60(sp)
   233ec:	102b883a 	mov	r21,r2
   233f0:	d8c01215 	stw	r3,72(sp)
   233f4:	002d4000 	call	2d400 <__fixdfsi>
   233f8:	1009883a 	mov	r4,r2
   233fc:	1029883a 	mov	r20,r2
   23400:	002d4800 	call	2d480 <__floatsidf>
   23404:	d9000f17 	ldw	r4,60(sp)
   23408:	d9401017 	ldw	r5,64(sp)
   2340c:	100d883a 	mov	r6,r2
   23410:	180f883a 	mov	r7,r3
   23414:	002cb040 	call	2cb04 <__subdf3>
   23418:	1823883a 	mov	r17,r3
   2341c:	d8c00717 	ldw	r3,28(sp)
   23420:	d9401217 	ldw	r5,72(sp)
   23424:	a2000c04 	addi	r8,r20,48
   23428:	1021883a 	mov	r16,r2
   2342c:	1a000005 	stb	r8,0(r3)
   23430:	800d883a 	mov	r6,r16
   23434:	880f883a 	mov	r7,r17
   23438:	a809883a 	mov	r4,r21
   2343c:	4029883a 	mov	r20,r8
   23440:	002c0c80 	call	2c0c8 <__gedf2>
   23444:	00841d16 	blt	zero,r2,244bc <_dtoa_r+0x15f4>
   23448:	800d883a 	mov	r6,r16
   2344c:	880f883a 	mov	r7,r17
   23450:	0009883a 	mov	r4,zero
   23454:	014ffc34 	movhi	r5,16368
   23458:	002cb040 	call	2cb04 <__subdf3>
   2345c:	d9401217 	ldw	r5,72(sp)
   23460:	100d883a 	mov	r6,r2
   23464:	180f883a 	mov	r7,r3
   23468:	a809883a 	mov	r4,r21
   2346c:	002c0c80 	call	2c0c8 <__gedf2>
   23470:	db001617 	ldw	r12,88(sp)
   23474:	00840e16 	blt	zero,r2,244b0 <_dtoa_r+0x15e8>
   23478:	00800044 	movi	r2,1
   2347c:	13006b0e 	bge	r2,r12,2362c <_dtoa_r+0x764>
   23480:	d9000717 	ldw	r4,28(sp)
   23484:	dd800f15 	stw	r22,60(sp)
   23488:	dcc01015 	stw	r19,64(sp)
   2348c:	2319883a 	add	r12,r4,r12
   23490:	dcc01217 	ldw	r19,72(sp)
   23494:	602d883a 	mov	r22,r12
   23498:	dc801215 	stw	r18,72(sp)
   2349c:	b825883a 	mov	r18,r23
   234a0:	00000906 	br	234c8 <_dtoa_r+0x600>
   234a4:	002cb040 	call	2cb04 <__subdf3>
   234a8:	a80d883a 	mov	r6,r21
   234ac:	980f883a 	mov	r7,r19
   234b0:	1009883a 	mov	r4,r2
   234b4:	180b883a 	mov	r5,r3
   234b8:	002c1a40 	call	2c1a4 <__ledf2>
   234bc:	1003e816 	blt	r2,zero,24460 <_dtoa_r+0x1598>
   234c0:	b825883a 	mov	r18,r23
   234c4:	bd83e926 	beq	r23,r22,2446c <_dtoa_r+0x15a4>
   234c8:	a809883a 	mov	r4,r21
   234cc:	980b883a 	mov	r5,r19
   234d0:	000d883a 	mov	r6,zero
   234d4:	01d00934 	movhi	r7,16420
   234d8:	002c2980 	call	2c298 <__muldf3>
   234dc:	000d883a 	mov	r6,zero
   234e0:	01d00934 	movhi	r7,16420
   234e4:	8009883a 	mov	r4,r16
   234e8:	880b883a 	mov	r5,r17
   234ec:	102b883a 	mov	r21,r2
   234f0:	1827883a 	mov	r19,r3
   234f4:	002c2980 	call	2c298 <__muldf3>
   234f8:	180b883a 	mov	r5,r3
   234fc:	1009883a 	mov	r4,r2
   23500:	1821883a 	mov	r16,r3
   23504:	1023883a 	mov	r17,r2
   23508:	002d4000 	call	2d400 <__fixdfsi>
   2350c:	1009883a 	mov	r4,r2
   23510:	1029883a 	mov	r20,r2
   23514:	002d4800 	call	2d480 <__floatsidf>
   23518:	8809883a 	mov	r4,r17
   2351c:	800b883a 	mov	r5,r16
   23520:	100d883a 	mov	r6,r2
   23524:	180f883a 	mov	r7,r3
   23528:	002cb040 	call	2cb04 <__subdf3>
   2352c:	a5000c04 	addi	r20,r20,48
   23530:	a80d883a 	mov	r6,r21
   23534:	980f883a 	mov	r7,r19
   23538:	1009883a 	mov	r4,r2
   2353c:	180b883a 	mov	r5,r3
   23540:	95000005 	stb	r20,0(r18)
   23544:	1021883a 	mov	r16,r2
   23548:	1823883a 	mov	r17,r3
   2354c:	002c1a40 	call	2c1a4 <__ledf2>
   23550:	bdc00044 	addi	r23,r23,1
   23554:	800d883a 	mov	r6,r16
   23558:	880f883a 	mov	r7,r17
   2355c:	0009883a 	mov	r4,zero
   23560:	014ffc34 	movhi	r5,16368
   23564:	103fcf0e 	bge	r2,zero,234a4 <__alt_data_end+0xfffe34a4>
   23568:	d8c01317 	ldw	r3,76(sp)
   2356c:	d8c00515 	stw	r3,20(sp)
   23570:	d9400917 	ldw	r5,36(sp)
   23574:	e009883a 	mov	r4,fp
   23578:	00266280 	call	26628 <_Bfree>
   2357c:	d9000517 	ldw	r4,20(sp)
   23580:	d9802317 	ldw	r6,140(sp)
   23584:	d9c02517 	ldw	r7,148(sp)
   23588:	b8000005 	stb	zero,0(r23)
   2358c:	20800044 	addi	r2,r4,1
   23590:	30800015 	stw	r2,0(r6)
   23594:	3802aa26 	beq	r7,zero,24040 <_dtoa_r+0x1178>
   23598:	3dc00015 	stw	r23,0(r7)
   2359c:	d8800717 	ldw	r2,28(sp)
   235a0:	003e7906 	br	22f88 <__alt_data_end+0xfffe2f88>
   235a4:	00800434 	movhi	r2,16
   235a8:	10bfffc4 	addi	r2,r2,-1
   235ac:	88a2703a 	and	r17,r17,r2
   235b0:	883e851e 	bne	r17,zero,22fc8 <__alt_data_end+0xfffe2fc8>
   235b4:	008000f4 	movhi	r2,3
   235b8:	1089b404 	addi	r2,r2,9936
   235bc:	003e8406 	br	22fd0 <__alt_data_end+0xfffe2fd0>
   235c0:	10c00204 	addi	r3,r2,8
   235c4:	003e8706 	br	22fe4 <__alt_data_end+0xfffe2fe4>
   235c8:	01400434 	movhi	r5,16
   235cc:	297fffc4 	addi	r5,r5,-1
   235d0:	994a703a 	and	r5,r19,r5
   235d4:	9009883a 	mov	r4,r18
   235d8:	843f0044 	addi	r16,r16,-1023
   235dc:	294ffc34 	orhi	r5,r5,16368
   235e0:	dd800217 	ldw	r22,8(sp)
   235e4:	d8001115 	stw	zero,68(sp)
   235e8:	003ea506 	br	23080 <__alt_data_end+0xfffe3080>
   235ec:	008000f4 	movhi	r2,3
   235f0:	1089ab04 	addi	r2,r2,9900
   235f4:	003e6406 	br	22f88 <__alt_data_end+0xfffe2f88>
   235f8:	e0001115 	stw	zero,68(fp)
   235fc:	000b883a 	mov	r5,zero
   23600:	e009883a 	mov	r4,fp
   23604:	00265800 	call	26580 <_Balloc>
   23608:	01bfffc4 	movi	r6,-1
   2360c:	01c00044 	movi	r7,1
   23610:	d8800715 	stw	r2,28(sp)
   23614:	d9800c15 	stw	r6,48(sp)
   23618:	e0801015 	stw	r2,64(fp)
   2361c:	d8000315 	stw	zero,12(sp)
   23620:	d9c00b15 	stw	r7,44(sp)
   23624:	d9800615 	stw	r6,24(sp)
   23628:	d8002215 	stw	zero,136(sp)
   2362c:	d8800117 	ldw	r2,4(sp)
   23630:	10008916 	blt	r2,zero,23858 <_dtoa_r+0x990>
   23634:	d9000517 	ldw	r4,20(sp)
   23638:	00c00384 	movi	r3,14
   2363c:	19008616 	blt	r3,r4,23858 <_dtoa_r+0x990>
   23640:	200490fa 	slli	r2,r4,3
   23644:	00c000f4 	movhi	r3,3
   23648:	d9802217 	ldw	r6,136(sp)
   2364c:	18c9d304 	addi	r3,r3,10060
   23650:	1885883a 	add	r2,r3,r2
   23654:	14000017 	ldw	r16,0(r2)
   23658:	14400117 	ldw	r17,4(r2)
   2365c:	30016316 	blt	r6,zero,23bec <_dtoa_r+0xd24>
   23660:	800d883a 	mov	r6,r16
   23664:	880f883a 	mov	r7,r17
   23668:	9009883a 	mov	r4,r18
   2366c:	980b883a 	mov	r5,r19
   23670:	002b6700 	call	2b670 <__divdf3>
   23674:	180b883a 	mov	r5,r3
   23678:	1009883a 	mov	r4,r2
   2367c:	002d4000 	call	2d400 <__fixdfsi>
   23680:	1009883a 	mov	r4,r2
   23684:	102b883a 	mov	r21,r2
   23688:	002d4800 	call	2d480 <__floatsidf>
   2368c:	800d883a 	mov	r6,r16
   23690:	880f883a 	mov	r7,r17
   23694:	1009883a 	mov	r4,r2
   23698:	180b883a 	mov	r5,r3
   2369c:	002c2980 	call	2c298 <__muldf3>
   236a0:	100d883a 	mov	r6,r2
   236a4:	180f883a 	mov	r7,r3
   236a8:	9009883a 	mov	r4,r18
   236ac:	980b883a 	mov	r5,r19
   236b0:	002cb040 	call	2cb04 <__subdf3>
   236b4:	d9c00717 	ldw	r7,28(sp)
   236b8:	1009883a 	mov	r4,r2
   236bc:	a8800c04 	addi	r2,r21,48
   236c0:	38800005 	stb	r2,0(r7)
   236c4:	3dc00044 	addi	r23,r7,1
   236c8:	d9c00617 	ldw	r7,24(sp)
   236cc:	01800044 	movi	r6,1
   236d0:	180b883a 	mov	r5,r3
   236d4:	2005883a 	mov	r2,r4
   236d8:	39803826 	beq	r7,r6,237bc <_dtoa_r+0x8f4>
   236dc:	000d883a 	mov	r6,zero
   236e0:	01d00934 	movhi	r7,16420
   236e4:	002c2980 	call	2c298 <__muldf3>
   236e8:	000d883a 	mov	r6,zero
   236ec:	000f883a 	mov	r7,zero
   236f0:	1009883a 	mov	r4,r2
   236f4:	180b883a 	mov	r5,r3
   236f8:	1025883a 	mov	r18,r2
   236fc:	1827883a 	mov	r19,r3
   23700:	002c0400 	call	2c040 <__eqdf2>
   23704:	103f9a26 	beq	r2,zero,23570 <__alt_data_end+0xfffe3570>
   23708:	d9c00617 	ldw	r7,24(sp)
   2370c:	d8c00717 	ldw	r3,28(sp)
   23710:	b829883a 	mov	r20,r23
   23714:	38bfffc4 	addi	r2,r7,-1
   23718:	18ad883a 	add	r22,r3,r2
   2371c:	00000a06 	br	23748 <_dtoa_r+0x880>
   23720:	002c2980 	call	2c298 <__muldf3>
   23724:	000d883a 	mov	r6,zero
   23728:	000f883a 	mov	r7,zero
   2372c:	1009883a 	mov	r4,r2
   23730:	180b883a 	mov	r5,r3
   23734:	1025883a 	mov	r18,r2
   23738:	1827883a 	mov	r19,r3
   2373c:	b829883a 	mov	r20,r23
   23740:	002c0400 	call	2c040 <__eqdf2>
   23744:	103f8a26 	beq	r2,zero,23570 <__alt_data_end+0xfffe3570>
   23748:	800d883a 	mov	r6,r16
   2374c:	880f883a 	mov	r7,r17
   23750:	9009883a 	mov	r4,r18
   23754:	980b883a 	mov	r5,r19
   23758:	002b6700 	call	2b670 <__divdf3>
   2375c:	180b883a 	mov	r5,r3
   23760:	1009883a 	mov	r4,r2
   23764:	002d4000 	call	2d400 <__fixdfsi>
   23768:	1009883a 	mov	r4,r2
   2376c:	102b883a 	mov	r21,r2
   23770:	002d4800 	call	2d480 <__floatsidf>
   23774:	800d883a 	mov	r6,r16
   23778:	880f883a 	mov	r7,r17
   2377c:	1009883a 	mov	r4,r2
   23780:	180b883a 	mov	r5,r3
   23784:	002c2980 	call	2c298 <__muldf3>
   23788:	100d883a 	mov	r6,r2
   2378c:	180f883a 	mov	r7,r3
   23790:	9009883a 	mov	r4,r18
   23794:	980b883a 	mov	r5,r19
   23798:	002cb040 	call	2cb04 <__subdf3>
   2379c:	aa000c04 	addi	r8,r21,48
   237a0:	a2000005 	stb	r8,0(r20)
   237a4:	000d883a 	mov	r6,zero
   237a8:	01d00934 	movhi	r7,16420
   237ac:	1009883a 	mov	r4,r2
   237b0:	180b883a 	mov	r5,r3
   237b4:	a5c00044 	addi	r23,r20,1
   237b8:	b53fd91e 	bne	r22,r20,23720 <__alt_data_end+0xfffe3720>
   237bc:	100d883a 	mov	r6,r2
   237c0:	180f883a 	mov	r7,r3
   237c4:	1009883a 	mov	r4,r2
   237c8:	180b883a 	mov	r5,r3
   237cc:	002adc40 	call	2adc4 <__adddf3>
   237d0:	100d883a 	mov	r6,r2
   237d4:	180f883a 	mov	r7,r3
   237d8:	8009883a 	mov	r4,r16
   237dc:	880b883a 	mov	r5,r17
   237e0:	1027883a 	mov	r19,r2
   237e4:	1825883a 	mov	r18,r3
   237e8:	002c1a40 	call	2c1a4 <__ledf2>
   237ec:	10000816 	blt	r2,zero,23810 <_dtoa_r+0x948>
   237f0:	980d883a 	mov	r6,r19
   237f4:	900f883a 	mov	r7,r18
   237f8:	8009883a 	mov	r4,r16
   237fc:	880b883a 	mov	r5,r17
   23800:	002c0400 	call	2c040 <__eqdf2>
   23804:	103f5a1e 	bne	r2,zero,23570 <__alt_data_end+0xfffe3570>
   23808:	ad40004c 	andi	r21,r21,1
   2380c:	a83f5826 	beq	r21,zero,23570 <__alt_data_end+0xfffe3570>
   23810:	bd3fffc3 	ldbu	r20,-1(r23)
   23814:	b8bfffc4 	addi	r2,r23,-1
   23818:	1007883a 	mov	r3,r2
   2381c:	01400e44 	movi	r5,57
   23820:	d9800717 	ldw	r6,28(sp)
   23824:	00000506 	br	2383c <_dtoa_r+0x974>
   23828:	18ffffc4 	addi	r3,r3,-1
   2382c:	11824726 	beq	r2,r6,2414c <_dtoa_r+0x1284>
   23830:	1d000003 	ldbu	r20,0(r3)
   23834:	102f883a 	mov	r23,r2
   23838:	10bfffc4 	addi	r2,r2,-1
   2383c:	a1003fcc 	andi	r4,r20,255
   23840:	2100201c 	xori	r4,r4,128
   23844:	213fe004 	addi	r4,r4,-128
   23848:	217ff726 	beq	r4,r5,23828 <__alt_data_end+0xfffe3828>
   2384c:	a2000044 	addi	r8,r20,1
   23850:	12000005 	stb	r8,0(r2)
   23854:	003f4606 	br	23570 <__alt_data_end+0xfffe3570>
   23858:	d9000b17 	ldw	r4,44(sp)
   2385c:	2000c826 	beq	r4,zero,23b80 <_dtoa_r+0xcb8>
   23860:	d9800317 	ldw	r6,12(sp)
   23864:	00c00044 	movi	r3,1
   23868:	1980f90e 	bge	r3,r6,23c50 <_dtoa_r+0xd88>
   2386c:	d8800617 	ldw	r2,24(sp)
   23870:	d8c00a17 	ldw	r3,40(sp)
   23874:	157fffc4 	addi	r21,r2,-1
   23878:	1d41f316 	blt	r3,r21,24048 <_dtoa_r+0x1180>
   2387c:	1d6bc83a 	sub	r21,r3,r21
   23880:	d9c00617 	ldw	r7,24(sp)
   23884:	3802aa16 	blt	r7,zero,24330 <_dtoa_r+0x1468>
   23888:	dd000817 	ldw	r20,32(sp)
   2388c:	d8800617 	ldw	r2,24(sp)
   23890:	d8c00817 	ldw	r3,32(sp)
   23894:	01400044 	movi	r5,1
   23898:	e009883a 	mov	r4,fp
   2389c:	1887883a 	add	r3,r3,r2
   238a0:	d8c00815 	stw	r3,32(sp)
   238a4:	b0ad883a 	add	r22,r22,r2
   238a8:	00269b40 	call	269b4 <__i2b>
   238ac:	1023883a 	mov	r17,r2
   238b0:	a0000826 	beq	r20,zero,238d4 <_dtoa_r+0xa0c>
   238b4:	0580070e 	bge	zero,r22,238d4 <_dtoa_r+0xa0c>
   238b8:	a005883a 	mov	r2,r20
   238bc:	b500b916 	blt	r22,r20,23ba4 <_dtoa_r+0xcdc>
   238c0:	d9000817 	ldw	r4,32(sp)
   238c4:	a0a9c83a 	sub	r20,r20,r2
   238c8:	b0adc83a 	sub	r22,r22,r2
   238cc:	2089c83a 	sub	r4,r4,r2
   238d0:	d9000815 	stw	r4,32(sp)
   238d4:	d9800a17 	ldw	r6,40(sp)
   238d8:	0181810e 	bge	zero,r6,23ee0 <_dtoa_r+0x1018>
   238dc:	d9c00b17 	ldw	r7,44(sp)
   238e0:	3800b326 	beq	r7,zero,23bb0 <_dtoa_r+0xce8>
   238e4:	a800b226 	beq	r21,zero,23bb0 <_dtoa_r+0xce8>
   238e8:	880b883a 	mov	r5,r17
   238ec:	a80d883a 	mov	r6,r21
   238f0:	e009883a 	mov	r4,fp
   238f4:	0026c7c0 	call	26c7c <__pow5mult>
   238f8:	d9800917 	ldw	r6,36(sp)
   238fc:	100b883a 	mov	r5,r2
   23900:	e009883a 	mov	r4,fp
   23904:	1023883a 	mov	r17,r2
   23908:	00269f00 	call	269f0 <__multiply>
   2390c:	1021883a 	mov	r16,r2
   23910:	d8800a17 	ldw	r2,40(sp)
   23914:	d9400917 	ldw	r5,36(sp)
   23918:	e009883a 	mov	r4,fp
   2391c:	1545c83a 	sub	r2,r2,r21
   23920:	d8800a15 	stw	r2,40(sp)
   23924:	00266280 	call	26628 <_Bfree>
   23928:	d8c00a17 	ldw	r3,40(sp)
   2392c:	18009f1e 	bne	r3,zero,23bac <_dtoa_r+0xce4>
   23930:	05c00044 	movi	r23,1
   23934:	e009883a 	mov	r4,fp
   23938:	b80b883a 	mov	r5,r23
   2393c:	00269b40 	call	269b4 <__i2b>
   23940:	d9000d17 	ldw	r4,52(sp)
   23944:	102b883a 	mov	r21,r2
   23948:	2000ce26 	beq	r4,zero,23c84 <_dtoa_r+0xdbc>
   2394c:	200d883a 	mov	r6,r4
   23950:	100b883a 	mov	r5,r2
   23954:	e009883a 	mov	r4,fp
   23958:	0026c7c0 	call	26c7c <__pow5mult>
   2395c:	d9800317 	ldw	r6,12(sp)
   23960:	102b883a 	mov	r21,r2
   23964:	b981810e 	bge	r23,r6,23f6c <_dtoa_r+0x10a4>
   23968:	0027883a 	mov	r19,zero
   2396c:	a8800417 	ldw	r2,16(r21)
   23970:	05c00804 	movi	r23,32
   23974:	10800104 	addi	r2,r2,4
   23978:	1085883a 	add	r2,r2,r2
   2397c:	1085883a 	add	r2,r2,r2
   23980:	a885883a 	add	r2,r21,r2
   23984:	11000017 	ldw	r4,0(r2)
   23988:	002689c0 	call	2689c <__hi0bits>
   2398c:	b885c83a 	sub	r2,r23,r2
   23990:	1585883a 	add	r2,r2,r22
   23994:	108007cc 	andi	r2,r2,31
   23998:	1000b326 	beq	r2,zero,23c68 <_dtoa_r+0xda0>
   2399c:	00c00804 	movi	r3,32
   239a0:	1887c83a 	sub	r3,r3,r2
   239a4:	01000104 	movi	r4,4
   239a8:	20c2cd0e 	bge	r4,r3,244e0 <_dtoa_r+0x1618>
   239ac:	00c00704 	movi	r3,28
   239b0:	1885c83a 	sub	r2,r3,r2
   239b4:	d8c00817 	ldw	r3,32(sp)
   239b8:	a0a9883a 	add	r20,r20,r2
   239bc:	b0ad883a 	add	r22,r22,r2
   239c0:	1887883a 	add	r3,r3,r2
   239c4:	d8c00815 	stw	r3,32(sp)
   239c8:	d9800817 	ldw	r6,32(sp)
   239cc:	0180040e 	bge	zero,r6,239e0 <_dtoa_r+0xb18>
   239d0:	800b883a 	mov	r5,r16
   239d4:	e009883a 	mov	r4,fp
   239d8:	0026dbc0 	call	26dbc <__lshift>
   239dc:	1021883a 	mov	r16,r2
   239e0:	0580050e 	bge	zero,r22,239f8 <_dtoa_r+0xb30>
   239e4:	a80b883a 	mov	r5,r21
   239e8:	b00d883a 	mov	r6,r22
   239ec:	e009883a 	mov	r4,fp
   239f0:	0026dbc0 	call	26dbc <__lshift>
   239f4:	102b883a 	mov	r21,r2
   239f8:	d9c00e17 	ldw	r7,56(sp)
   239fc:	3801211e 	bne	r7,zero,23e84 <_dtoa_r+0xfbc>
   23a00:	d9800617 	ldw	r6,24(sp)
   23a04:	0181380e 	bge	zero,r6,23ee8 <_dtoa_r+0x1020>
   23a08:	d8c00b17 	ldw	r3,44(sp)
   23a0c:	1800ab1e 	bne	r3,zero,23cbc <_dtoa_r+0xdf4>
   23a10:	dc800717 	ldw	r18,28(sp)
   23a14:	dcc00617 	ldw	r19,24(sp)
   23a18:	9029883a 	mov	r20,r18
   23a1c:	00000206 	br	23a28 <_dtoa_r+0xb60>
   23a20:	00266500 	call	26650 <__multadd>
   23a24:	1021883a 	mov	r16,r2
   23a28:	a80b883a 	mov	r5,r21
   23a2c:	8009883a 	mov	r4,r16
   23a30:	0022ca00 	call	22ca0 <quorem>
   23a34:	10800c04 	addi	r2,r2,48
   23a38:	90800005 	stb	r2,0(r18)
   23a3c:	94800044 	addi	r18,r18,1
   23a40:	9507c83a 	sub	r3,r18,r20
   23a44:	000f883a 	mov	r7,zero
   23a48:	01800284 	movi	r6,10
   23a4c:	800b883a 	mov	r5,r16
   23a50:	e009883a 	mov	r4,fp
   23a54:	1cfff216 	blt	r3,r19,23a20 <__alt_data_end+0xfffe3a20>
   23a58:	1011883a 	mov	r8,r2
   23a5c:	d8800617 	ldw	r2,24(sp)
   23a60:	0082370e 	bge	zero,r2,24340 <_dtoa_r+0x1478>
   23a64:	d9000717 	ldw	r4,28(sp)
   23a68:	0025883a 	mov	r18,zero
   23a6c:	20af883a 	add	r23,r4,r2
   23a70:	01800044 	movi	r6,1
   23a74:	800b883a 	mov	r5,r16
   23a78:	e009883a 	mov	r4,fp
   23a7c:	da001715 	stw	r8,92(sp)
   23a80:	0026dbc0 	call	26dbc <__lshift>
   23a84:	a80b883a 	mov	r5,r21
   23a88:	1009883a 	mov	r4,r2
   23a8c:	d8800915 	stw	r2,36(sp)
   23a90:	0026f040 	call	26f04 <__mcmp>
   23a94:	da001717 	ldw	r8,92(sp)
   23a98:	0081800e 	bge	zero,r2,2409c <_dtoa_r+0x11d4>
   23a9c:	b93fffc3 	ldbu	r4,-1(r23)
   23aa0:	b8bfffc4 	addi	r2,r23,-1
   23aa4:	1007883a 	mov	r3,r2
   23aa8:	01800e44 	movi	r6,57
   23aac:	d9c00717 	ldw	r7,28(sp)
   23ab0:	00000506 	br	23ac8 <_dtoa_r+0xc00>
   23ab4:	18ffffc4 	addi	r3,r3,-1
   23ab8:	11c12326 	beq	r2,r7,23f48 <_dtoa_r+0x1080>
   23abc:	19000003 	ldbu	r4,0(r3)
   23ac0:	102f883a 	mov	r23,r2
   23ac4:	10bfffc4 	addi	r2,r2,-1
   23ac8:	21403fcc 	andi	r5,r4,255
   23acc:	2940201c 	xori	r5,r5,128
   23ad0:	297fe004 	addi	r5,r5,-128
   23ad4:	29bff726 	beq	r5,r6,23ab4 <__alt_data_end+0xfffe3ab4>
   23ad8:	21000044 	addi	r4,r4,1
   23adc:	11000005 	stb	r4,0(r2)
   23ae0:	a80b883a 	mov	r5,r21
   23ae4:	e009883a 	mov	r4,fp
   23ae8:	00266280 	call	26628 <_Bfree>
   23aec:	883ea026 	beq	r17,zero,23570 <__alt_data_end+0xfffe3570>
   23af0:	90000426 	beq	r18,zero,23b04 <_dtoa_r+0xc3c>
   23af4:	94400326 	beq	r18,r17,23b04 <_dtoa_r+0xc3c>
   23af8:	900b883a 	mov	r5,r18
   23afc:	e009883a 	mov	r4,fp
   23b00:	00266280 	call	26628 <_Bfree>
   23b04:	880b883a 	mov	r5,r17
   23b08:	e009883a 	mov	r4,fp
   23b0c:	00266280 	call	26628 <_Bfree>
   23b10:	003e9706 	br	23570 <__alt_data_end+0xfffe3570>
   23b14:	01800044 	movi	r6,1
   23b18:	d9800e15 	stw	r6,56(sp)
   23b1c:	003d9606 	br	23178 <__alt_data_end+0xfffe3178>
   23b20:	d8800817 	ldw	r2,32(sp)
   23b24:	d8c00517 	ldw	r3,20(sp)
   23b28:	d8000d15 	stw	zero,52(sp)
   23b2c:	10c5c83a 	sub	r2,r2,r3
   23b30:	00c9c83a 	sub	r4,zero,r3
   23b34:	d8800815 	stw	r2,32(sp)
   23b38:	d9000a15 	stw	r4,40(sp)
   23b3c:	003d9706 	br	2319c <__alt_data_end+0xfffe319c>
   23b40:	05adc83a 	sub	r22,zero,r22
   23b44:	dd800815 	stw	r22,32(sp)
   23b48:	002d883a 	mov	r22,zero
   23b4c:	003d8e06 	br	23188 <__alt_data_end+0xfffe3188>
   23b50:	d9000517 	ldw	r4,20(sp)
   23b54:	002d4800 	call	2d480 <__floatsidf>
   23b58:	100d883a 	mov	r6,r2
   23b5c:	180f883a 	mov	r7,r3
   23b60:	a009883a 	mov	r4,r20
   23b64:	880b883a 	mov	r5,r17
   23b68:	002c0400 	call	2c040 <__eqdf2>
   23b6c:	103d7126 	beq	r2,zero,23134 <__alt_data_end+0xfffe3134>
   23b70:	d9c00517 	ldw	r7,20(sp)
   23b74:	39ffffc4 	addi	r7,r7,-1
   23b78:	d9c00515 	stw	r7,20(sp)
   23b7c:	003d6d06 	br	23134 <__alt_data_end+0xfffe3134>
   23b80:	dd400a17 	ldw	r21,40(sp)
   23b84:	dd000817 	ldw	r20,32(sp)
   23b88:	0023883a 	mov	r17,zero
   23b8c:	003f4806 	br	238b0 <__alt_data_end+0xfffe38b0>
   23b90:	10e3c83a 	sub	r17,r2,r3
   23b94:	9448983a 	sll	r4,r18,r17
   23b98:	003d3206 	br	23064 <__alt_data_end+0xfffe3064>
   23b9c:	d8000e15 	stw	zero,56(sp)
   23ba0:	003d7506 	br	23178 <__alt_data_end+0xfffe3178>
   23ba4:	b005883a 	mov	r2,r22
   23ba8:	003f4506 	br	238c0 <__alt_data_end+0xfffe38c0>
   23bac:	dc000915 	stw	r16,36(sp)
   23bb0:	d9800a17 	ldw	r6,40(sp)
   23bb4:	d9400917 	ldw	r5,36(sp)
   23bb8:	e009883a 	mov	r4,fp
   23bbc:	0026c7c0 	call	26c7c <__pow5mult>
   23bc0:	1021883a 	mov	r16,r2
   23bc4:	003f5a06 	br	23930 <__alt_data_end+0xfffe3930>
   23bc8:	01c00044 	movi	r7,1
   23bcc:	d9c00b15 	stw	r7,44(sp)
   23bd0:	d8802217 	ldw	r2,136(sp)
   23bd4:	0081280e 	bge	zero,r2,24078 <_dtoa_r+0x11b0>
   23bd8:	100d883a 	mov	r6,r2
   23bdc:	1021883a 	mov	r16,r2
   23be0:	d8800c15 	stw	r2,48(sp)
   23be4:	d8800615 	stw	r2,24(sp)
   23be8:	003d8806 	br	2320c <__alt_data_end+0xfffe320c>
   23bec:	d8800617 	ldw	r2,24(sp)
   23bf0:	00be9b16 	blt	zero,r2,23660 <__alt_data_end+0xfffe3660>
   23bf4:	10010f1e 	bne	r2,zero,24034 <_dtoa_r+0x116c>
   23bf8:	880b883a 	mov	r5,r17
   23bfc:	000d883a 	mov	r6,zero
   23c00:	01d00534 	movhi	r7,16404
   23c04:	8009883a 	mov	r4,r16
   23c08:	002c2980 	call	2c298 <__muldf3>
   23c0c:	900d883a 	mov	r6,r18
   23c10:	980f883a 	mov	r7,r19
   23c14:	1009883a 	mov	r4,r2
   23c18:	180b883a 	mov	r5,r3
   23c1c:	002c0c80 	call	2c0c8 <__gedf2>
   23c20:	002b883a 	mov	r21,zero
   23c24:	0023883a 	mov	r17,zero
   23c28:	1000bf16 	blt	r2,zero,23f28 <_dtoa_r+0x1060>
   23c2c:	d9802217 	ldw	r6,136(sp)
   23c30:	ddc00717 	ldw	r23,28(sp)
   23c34:	018c303a 	nor	r6,zero,r6
   23c38:	d9800515 	stw	r6,20(sp)
   23c3c:	a80b883a 	mov	r5,r21
   23c40:	e009883a 	mov	r4,fp
   23c44:	00266280 	call	26628 <_Bfree>
   23c48:	883e4926 	beq	r17,zero,23570 <__alt_data_end+0xfffe3570>
   23c4c:	003fad06 	br	23b04 <__alt_data_end+0xfffe3b04>
   23c50:	d9c01117 	ldw	r7,68(sp)
   23c54:	3801bc26 	beq	r7,zero,24348 <_dtoa_r+0x1480>
   23c58:	10810cc4 	addi	r2,r2,1075
   23c5c:	dd400a17 	ldw	r21,40(sp)
   23c60:	dd000817 	ldw	r20,32(sp)
   23c64:	003f0a06 	br	23890 <__alt_data_end+0xfffe3890>
   23c68:	00800704 	movi	r2,28
   23c6c:	d9000817 	ldw	r4,32(sp)
   23c70:	a0a9883a 	add	r20,r20,r2
   23c74:	b0ad883a 	add	r22,r22,r2
   23c78:	2089883a 	add	r4,r4,r2
   23c7c:	d9000815 	stw	r4,32(sp)
   23c80:	003f5106 	br	239c8 <__alt_data_end+0xfffe39c8>
   23c84:	d8c00317 	ldw	r3,12(sp)
   23c88:	b8c1fc0e 	bge	r23,r3,2447c <_dtoa_r+0x15b4>
   23c8c:	0027883a 	mov	r19,zero
   23c90:	b805883a 	mov	r2,r23
   23c94:	003f3e06 	br	23990 <__alt_data_end+0xfffe3990>
   23c98:	880b883a 	mov	r5,r17
   23c9c:	e009883a 	mov	r4,fp
   23ca0:	000f883a 	mov	r7,zero
   23ca4:	01800284 	movi	r6,10
   23ca8:	00266500 	call	26650 <__multadd>
   23cac:	d9000c17 	ldw	r4,48(sp)
   23cb0:	1023883a 	mov	r17,r2
   23cb4:	0102040e 	bge	zero,r4,244c8 <_dtoa_r+0x1600>
   23cb8:	d9000615 	stw	r4,24(sp)
   23cbc:	0500050e 	bge	zero,r20,23cd4 <_dtoa_r+0xe0c>
   23cc0:	880b883a 	mov	r5,r17
   23cc4:	a00d883a 	mov	r6,r20
   23cc8:	e009883a 	mov	r4,fp
   23ccc:	0026dbc0 	call	26dbc <__lshift>
   23cd0:	1023883a 	mov	r17,r2
   23cd4:	9801241e 	bne	r19,zero,24168 <_dtoa_r+0x12a0>
   23cd8:	8829883a 	mov	r20,r17
   23cdc:	d9000617 	ldw	r4,24(sp)
   23ce0:	dcc00717 	ldw	r19,28(sp)
   23ce4:	9480004c 	andi	r18,r18,1
   23ce8:	20bfffc4 	addi	r2,r4,-1
   23cec:	9885883a 	add	r2,r19,r2
   23cf0:	d8800415 	stw	r2,16(sp)
   23cf4:	dc800615 	stw	r18,24(sp)
   23cf8:	a80b883a 	mov	r5,r21
   23cfc:	8009883a 	mov	r4,r16
   23d00:	0022ca00 	call	22ca0 <quorem>
   23d04:	880b883a 	mov	r5,r17
   23d08:	8009883a 	mov	r4,r16
   23d0c:	102f883a 	mov	r23,r2
   23d10:	0026f040 	call	26f04 <__mcmp>
   23d14:	a80b883a 	mov	r5,r21
   23d18:	a00d883a 	mov	r6,r20
   23d1c:	e009883a 	mov	r4,fp
   23d20:	102d883a 	mov	r22,r2
   23d24:	0026f640 	call	26f64 <__mdiff>
   23d28:	1007883a 	mov	r3,r2
   23d2c:	10800317 	ldw	r2,12(r2)
   23d30:	bc800c04 	addi	r18,r23,48
   23d34:	180b883a 	mov	r5,r3
   23d38:	10004e1e 	bne	r2,zero,23e74 <_dtoa_r+0xfac>
   23d3c:	8009883a 	mov	r4,r16
   23d40:	d8c01615 	stw	r3,88(sp)
   23d44:	0026f040 	call	26f04 <__mcmp>
   23d48:	d8c01617 	ldw	r3,88(sp)
   23d4c:	e009883a 	mov	r4,fp
   23d50:	d8801615 	stw	r2,88(sp)
   23d54:	180b883a 	mov	r5,r3
   23d58:	00266280 	call	26628 <_Bfree>
   23d5c:	d8801617 	ldw	r2,88(sp)
   23d60:	1000041e 	bne	r2,zero,23d74 <_dtoa_r+0xeac>
   23d64:	d9800317 	ldw	r6,12(sp)
   23d68:	3000021e 	bne	r6,zero,23d74 <_dtoa_r+0xeac>
   23d6c:	d8c00617 	ldw	r3,24(sp)
   23d70:	18003726 	beq	r3,zero,23e50 <_dtoa_r+0xf88>
   23d74:	b0002016 	blt	r22,zero,23df8 <_dtoa_r+0xf30>
   23d78:	b000041e 	bne	r22,zero,23d8c <_dtoa_r+0xec4>
   23d7c:	d9000317 	ldw	r4,12(sp)
   23d80:	2000021e 	bne	r4,zero,23d8c <_dtoa_r+0xec4>
   23d84:	d8c00617 	ldw	r3,24(sp)
   23d88:	18001b26 	beq	r3,zero,23df8 <_dtoa_r+0xf30>
   23d8c:	00810716 	blt	zero,r2,241ac <_dtoa_r+0x12e4>
   23d90:	d8c00417 	ldw	r3,16(sp)
   23d94:	9d800044 	addi	r22,r19,1
   23d98:	9c800005 	stb	r18,0(r19)
   23d9c:	b02f883a 	mov	r23,r22
   23da0:	98c10626 	beq	r19,r3,241bc <_dtoa_r+0x12f4>
   23da4:	800b883a 	mov	r5,r16
   23da8:	000f883a 	mov	r7,zero
   23dac:	01800284 	movi	r6,10
   23db0:	e009883a 	mov	r4,fp
   23db4:	00266500 	call	26650 <__multadd>
   23db8:	1021883a 	mov	r16,r2
   23dbc:	000f883a 	mov	r7,zero
   23dc0:	01800284 	movi	r6,10
   23dc4:	880b883a 	mov	r5,r17
   23dc8:	e009883a 	mov	r4,fp
   23dcc:	8d002526 	beq	r17,r20,23e64 <_dtoa_r+0xf9c>
   23dd0:	00266500 	call	26650 <__multadd>
   23dd4:	a00b883a 	mov	r5,r20
   23dd8:	000f883a 	mov	r7,zero
   23ddc:	01800284 	movi	r6,10
   23de0:	e009883a 	mov	r4,fp
   23de4:	1023883a 	mov	r17,r2
   23de8:	00266500 	call	26650 <__multadd>
   23dec:	1029883a 	mov	r20,r2
   23df0:	b027883a 	mov	r19,r22
   23df4:	003fc006 	br	23cf8 <__alt_data_end+0xfffe3cf8>
   23df8:	9011883a 	mov	r8,r18
   23dfc:	00800e0e 	bge	zero,r2,23e38 <_dtoa_r+0xf70>
   23e00:	800b883a 	mov	r5,r16
   23e04:	01800044 	movi	r6,1
   23e08:	e009883a 	mov	r4,fp
   23e0c:	da001715 	stw	r8,92(sp)
   23e10:	0026dbc0 	call	26dbc <__lshift>
   23e14:	a80b883a 	mov	r5,r21
   23e18:	1009883a 	mov	r4,r2
   23e1c:	1021883a 	mov	r16,r2
   23e20:	0026f040 	call	26f04 <__mcmp>
   23e24:	da001717 	ldw	r8,92(sp)
   23e28:	0081960e 	bge	zero,r2,24484 <_dtoa_r+0x15bc>
   23e2c:	00800e44 	movi	r2,57
   23e30:	40817026 	beq	r8,r2,243f4 <_dtoa_r+0x152c>
   23e34:	ba000c44 	addi	r8,r23,49
   23e38:	8825883a 	mov	r18,r17
   23e3c:	9dc00044 	addi	r23,r19,1
   23e40:	9a000005 	stb	r8,0(r19)
   23e44:	a023883a 	mov	r17,r20
   23e48:	dc000915 	stw	r16,36(sp)
   23e4c:	003f2406 	br	23ae0 <__alt_data_end+0xfffe3ae0>
   23e50:	00800e44 	movi	r2,57
   23e54:	9011883a 	mov	r8,r18
   23e58:	90816626 	beq	r18,r2,243f4 <_dtoa_r+0x152c>
   23e5c:	05bff516 	blt	zero,r22,23e34 <__alt_data_end+0xfffe3e34>
   23e60:	003ff506 	br	23e38 <__alt_data_end+0xfffe3e38>
   23e64:	00266500 	call	26650 <__multadd>
   23e68:	1023883a 	mov	r17,r2
   23e6c:	1029883a 	mov	r20,r2
   23e70:	003fdf06 	br	23df0 <__alt_data_end+0xfffe3df0>
   23e74:	e009883a 	mov	r4,fp
   23e78:	00266280 	call	26628 <_Bfree>
   23e7c:	00800044 	movi	r2,1
   23e80:	003fbc06 	br	23d74 <__alt_data_end+0xfffe3d74>
   23e84:	a80b883a 	mov	r5,r21
   23e88:	8009883a 	mov	r4,r16
   23e8c:	0026f040 	call	26f04 <__mcmp>
   23e90:	103edb0e 	bge	r2,zero,23a00 <__alt_data_end+0xfffe3a00>
   23e94:	800b883a 	mov	r5,r16
   23e98:	000f883a 	mov	r7,zero
   23e9c:	01800284 	movi	r6,10
   23ea0:	e009883a 	mov	r4,fp
   23ea4:	00266500 	call	26650 <__multadd>
   23ea8:	1021883a 	mov	r16,r2
   23eac:	d8800517 	ldw	r2,20(sp)
   23eb0:	d8c00b17 	ldw	r3,44(sp)
   23eb4:	10bfffc4 	addi	r2,r2,-1
   23eb8:	d8800515 	stw	r2,20(sp)
   23ebc:	183f761e 	bne	r3,zero,23c98 <__alt_data_end+0xfffe3c98>
   23ec0:	d9000c17 	ldw	r4,48(sp)
   23ec4:	0101730e 	bge	zero,r4,24494 <_dtoa_r+0x15cc>
   23ec8:	d9000615 	stw	r4,24(sp)
   23ecc:	003ed006 	br	23a10 <__alt_data_end+0xfffe3a10>
   23ed0:	00800084 	movi	r2,2
   23ed4:	3081861e 	bne	r6,r2,244f0 <_dtoa_r+0x1628>
   23ed8:	d8000b15 	stw	zero,44(sp)
   23edc:	003f3c06 	br	23bd0 <__alt_data_end+0xfffe3bd0>
   23ee0:	dc000917 	ldw	r16,36(sp)
   23ee4:	003e9206 	br	23930 <__alt_data_end+0xfffe3930>
   23ee8:	d9c00317 	ldw	r7,12(sp)
   23eec:	00800084 	movi	r2,2
   23ef0:	11fec50e 	bge	r2,r7,23a08 <__alt_data_end+0xfffe3a08>
   23ef4:	d9000617 	ldw	r4,24(sp)
   23ef8:	20013c1e 	bne	r4,zero,243ec <_dtoa_r+0x1524>
   23efc:	a80b883a 	mov	r5,r21
   23f00:	000f883a 	mov	r7,zero
   23f04:	01800144 	movi	r6,5
   23f08:	e009883a 	mov	r4,fp
   23f0c:	00266500 	call	26650 <__multadd>
   23f10:	100b883a 	mov	r5,r2
   23f14:	8009883a 	mov	r4,r16
   23f18:	102b883a 	mov	r21,r2
   23f1c:	0026f040 	call	26f04 <__mcmp>
   23f20:	dc000915 	stw	r16,36(sp)
   23f24:	00bf410e 	bge	zero,r2,23c2c <__alt_data_end+0xfffe3c2c>
   23f28:	d9c00717 	ldw	r7,28(sp)
   23f2c:	00800c44 	movi	r2,49
   23f30:	38800005 	stb	r2,0(r7)
   23f34:	d8800517 	ldw	r2,20(sp)
   23f38:	3dc00044 	addi	r23,r7,1
   23f3c:	10800044 	addi	r2,r2,1
   23f40:	d8800515 	stw	r2,20(sp)
   23f44:	003f3d06 	br	23c3c <__alt_data_end+0xfffe3c3c>
   23f48:	d9800517 	ldw	r6,20(sp)
   23f4c:	d9c00717 	ldw	r7,28(sp)
   23f50:	00800c44 	movi	r2,49
   23f54:	31800044 	addi	r6,r6,1
   23f58:	d9800515 	stw	r6,20(sp)
   23f5c:	38800005 	stb	r2,0(r7)
   23f60:	003edf06 	br	23ae0 <__alt_data_end+0xfffe3ae0>
   23f64:	d8000b15 	stw	zero,44(sp)
   23f68:	003c9f06 	br	231e8 <__alt_data_end+0xfffe31e8>
   23f6c:	903e7e1e 	bne	r18,zero,23968 <__alt_data_end+0xfffe3968>
   23f70:	00800434 	movhi	r2,16
   23f74:	10bfffc4 	addi	r2,r2,-1
   23f78:	9884703a 	and	r2,r19,r2
   23f7c:	1000ea1e 	bne	r2,zero,24328 <_dtoa_r+0x1460>
   23f80:	9cdffc2c 	andhi	r19,r19,32752
   23f84:	9800e826 	beq	r19,zero,24328 <_dtoa_r+0x1460>
   23f88:	d9c00817 	ldw	r7,32(sp)
   23f8c:	b5800044 	addi	r22,r22,1
   23f90:	04c00044 	movi	r19,1
   23f94:	39c00044 	addi	r7,r7,1
   23f98:	d9c00815 	stw	r7,32(sp)
   23f9c:	d8800d17 	ldw	r2,52(sp)
   23fa0:	103e721e 	bne	r2,zero,2396c <__alt_data_end+0xfffe396c>
   23fa4:	00800044 	movi	r2,1
   23fa8:	003e7906 	br	23990 <__alt_data_end+0xfffe3990>
   23fac:	8009883a 	mov	r4,r16
   23fb0:	002d4800 	call	2d480 <__floatsidf>
   23fb4:	d9800f17 	ldw	r6,60(sp)
   23fb8:	d9c01017 	ldw	r7,64(sp)
   23fbc:	1009883a 	mov	r4,r2
   23fc0:	180b883a 	mov	r5,r3
   23fc4:	002c2980 	call	2c298 <__muldf3>
   23fc8:	000d883a 	mov	r6,zero
   23fcc:	01d00734 	movhi	r7,16412
   23fd0:	1009883a 	mov	r4,r2
   23fd4:	180b883a 	mov	r5,r3
   23fd8:	002adc40 	call	2adc4 <__adddf3>
   23fdc:	047f3034 	movhi	r17,64704
   23fe0:	1021883a 	mov	r16,r2
   23fe4:	1c63883a 	add	r17,r3,r17
   23fe8:	d9000f17 	ldw	r4,60(sp)
   23fec:	d9401017 	ldw	r5,64(sp)
   23ff0:	000d883a 	mov	r6,zero
   23ff4:	01d00534 	movhi	r7,16404
   23ff8:	002cb040 	call	2cb04 <__subdf3>
   23ffc:	800d883a 	mov	r6,r16
   24000:	880f883a 	mov	r7,r17
   24004:	1009883a 	mov	r4,r2
   24008:	180b883a 	mov	r5,r3
   2400c:	102b883a 	mov	r21,r2
   24010:	1829883a 	mov	r20,r3
   24014:	002c0c80 	call	2c0c8 <__gedf2>
   24018:	00806c16 	blt	zero,r2,241cc <_dtoa_r+0x1304>
   2401c:	89e0003c 	xorhi	r7,r17,32768
   24020:	800d883a 	mov	r6,r16
   24024:	a809883a 	mov	r4,r21
   24028:	a00b883a 	mov	r5,r20
   2402c:	002c1a40 	call	2c1a4 <__ledf2>
   24030:	103d7e0e 	bge	r2,zero,2362c <__alt_data_end+0xfffe362c>
   24034:	002b883a 	mov	r21,zero
   24038:	0023883a 	mov	r17,zero
   2403c:	003efb06 	br	23c2c <__alt_data_end+0xfffe3c2c>
   24040:	d8800717 	ldw	r2,28(sp)
   24044:	003bd006 	br	22f88 <__alt_data_end+0xfffe2f88>
   24048:	d9000a17 	ldw	r4,40(sp)
   2404c:	d9800d17 	ldw	r6,52(sp)
   24050:	dd400a15 	stw	r21,40(sp)
   24054:	a905c83a 	sub	r2,r21,r4
   24058:	308d883a 	add	r6,r6,r2
   2405c:	d9800d15 	stw	r6,52(sp)
   24060:	002b883a 	mov	r21,zero
   24064:	003e0606 	br	23880 <__alt_data_end+0xfffe3880>
   24068:	9023883a 	mov	r17,r18
   2406c:	9829883a 	mov	r20,r19
   24070:	04000084 	movi	r16,2
   24074:	003c9206 	br	232c0 <__alt_data_end+0xfffe32c0>
   24078:	04000044 	movi	r16,1
   2407c:	dc000c15 	stw	r16,48(sp)
   24080:	dc000615 	stw	r16,24(sp)
   24084:	dc002215 	stw	r16,136(sp)
   24088:	e0001115 	stw	zero,68(fp)
   2408c:	000b883a 	mov	r5,zero
   24090:	003c6906 	br	23238 <__alt_data_end+0xfffe3238>
   24094:	3021883a 	mov	r16,r6
   24098:	003ffb06 	br	24088 <__alt_data_end+0xfffe4088>
   2409c:	1000021e 	bne	r2,zero,240a8 <_dtoa_r+0x11e0>
   240a0:	4200004c 	andi	r8,r8,1
   240a4:	403e7d1e 	bne	r8,zero,23a9c <__alt_data_end+0xfffe3a9c>
   240a8:	01000c04 	movi	r4,48
   240ac:	00000106 	br	240b4 <_dtoa_r+0x11ec>
   240b0:	102f883a 	mov	r23,r2
   240b4:	b8bfffc4 	addi	r2,r23,-1
   240b8:	10c00007 	ldb	r3,0(r2)
   240bc:	193ffc26 	beq	r3,r4,240b0 <__alt_data_end+0xfffe40b0>
   240c0:	003e8706 	br	23ae0 <__alt_data_end+0xfffe3ae0>
   240c4:	d8800517 	ldw	r2,20(sp)
   240c8:	00a3c83a 	sub	r17,zero,r2
   240cc:	8800a426 	beq	r17,zero,24360 <_dtoa_r+0x1498>
   240d0:	888003cc 	andi	r2,r17,15
   240d4:	100490fa 	slli	r2,r2,3
   240d8:	00c000f4 	movhi	r3,3
   240dc:	18c9d304 	addi	r3,r3,10060
   240e0:	1885883a 	add	r2,r3,r2
   240e4:	11800017 	ldw	r6,0(r2)
   240e8:	11c00117 	ldw	r7,4(r2)
   240ec:	9009883a 	mov	r4,r18
   240f0:	980b883a 	mov	r5,r19
   240f4:	8823d13a 	srai	r17,r17,4
   240f8:	002c2980 	call	2c298 <__muldf3>
   240fc:	d8800f15 	stw	r2,60(sp)
   24100:	d8c01015 	stw	r3,64(sp)
   24104:	8800e826 	beq	r17,zero,244a8 <_dtoa_r+0x15e0>
   24108:	050000f4 	movhi	r20,3
   2410c:	a509c904 	addi	r20,r20,10020
   24110:	04000084 	movi	r16,2
   24114:	8980004c 	andi	r6,r17,1
   24118:	1009883a 	mov	r4,r2
   2411c:	8823d07a 	srai	r17,r17,1
   24120:	180b883a 	mov	r5,r3
   24124:	30000426 	beq	r6,zero,24138 <_dtoa_r+0x1270>
   24128:	a1800017 	ldw	r6,0(r20)
   2412c:	a1c00117 	ldw	r7,4(r20)
   24130:	84000044 	addi	r16,r16,1
   24134:	002c2980 	call	2c298 <__muldf3>
   24138:	a5000204 	addi	r20,r20,8
   2413c:	883ff51e 	bne	r17,zero,24114 <__alt_data_end+0xfffe4114>
   24140:	d8800f15 	stw	r2,60(sp)
   24144:	d8c01015 	stw	r3,64(sp)
   24148:	003c7606 	br	23324 <__alt_data_end+0xfffe3324>
   2414c:	00c00c04 	movi	r3,48
   24150:	10c00005 	stb	r3,0(r2)
   24154:	d8c00517 	ldw	r3,20(sp)
   24158:	bd3fffc3 	ldbu	r20,-1(r23)
   2415c:	18c00044 	addi	r3,r3,1
   24160:	d8c00515 	stw	r3,20(sp)
   24164:	003db906 	br	2384c <__alt_data_end+0xfffe384c>
   24168:	89400117 	ldw	r5,4(r17)
   2416c:	e009883a 	mov	r4,fp
   24170:	00265800 	call	26580 <_Balloc>
   24174:	89800417 	ldw	r6,16(r17)
   24178:	89400304 	addi	r5,r17,12
   2417c:	11000304 	addi	r4,r2,12
   24180:	31800084 	addi	r6,r6,2
   24184:	318d883a 	add	r6,r6,r6
   24188:	318d883a 	add	r6,r6,r6
   2418c:	1027883a 	mov	r19,r2
   24190:	00261b40 	call	261b4 <memcpy>
   24194:	01800044 	movi	r6,1
   24198:	980b883a 	mov	r5,r19
   2419c:	e009883a 	mov	r4,fp
   241a0:	0026dbc0 	call	26dbc <__lshift>
   241a4:	1029883a 	mov	r20,r2
   241a8:	003ecc06 	br	23cdc <__alt_data_end+0xfffe3cdc>
   241ac:	00800e44 	movi	r2,57
   241b0:	90809026 	beq	r18,r2,243f4 <_dtoa_r+0x152c>
   241b4:	92000044 	addi	r8,r18,1
   241b8:	003f1f06 	br	23e38 <__alt_data_end+0xfffe3e38>
   241bc:	9011883a 	mov	r8,r18
   241c0:	8825883a 	mov	r18,r17
   241c4:	a023883a 	mov	r17,r20
   241c8:	003e2906 	br	23a70 <__alt_data_end+0xfffe3a70>
   241cc:	002b883a 	mov	r21,zero
   241d0:	0023883a 	mov	r17,zero
   241d4:	003f5406 	br	23f28 <__alt_data_end+0xfffe3f28>
   241d8:	61bfffc4 	addi	r6,r12,-1
   241dc:	300490fa 	slli	r2,r6,3
   241e0:	00c000f4 	movhi	r3,3
   241e4:	18c9d304 	addi	r3,r3,10060
   241e8:	1885883a 	add	r2,r3,r2
   241ec:	11000017 	ldw	r4,0(r2)
   241f0:	11400117 	ldw	r5,4(r2)
   241f4:	d8800717 	ldw	r2,28(sp)
   241f8:	880f883a 	mov	r7,r17
   241fc:	d9801215 	stw	r6,72(sp)
   24200:	800d883a 	mov	r6,r16
   24204:	db001615 	stw	r12,88(sp)
   24208:	15c00044 	addi	r23,r2,1
   2420c:	002c2980 	call	2c298 <__muldf3>
   24210:	d9401017 	ldw	r5,64(sp)
   24214:	d9000f17 	ldw	r4,60(sp)
   24218:	d8c01515 	stw	r3,84(sp)
   2421c:	d8801415 	stw	r2,80(sp)
   24220:	002d4000 	call	2d400 <__fixdfsi>
   24224:	1009883a 	mov	r4,r2
   24228:	1021883a 	mov	r16,r2
   2422c:	002d4800 	call	2d480 <__floatsidf>
   24230:	d9000f17 	ldw	r4,60(sp)
   24234:	d9401017 	ldw	r5,64(sp)
   24238:	100d883a 	mov	r6,r2
   2423c:	180f883a 	mov	r7,r3
   24240:	002cb040 	call	2cb04 <__subdf3>
   24244:	1829883a 	mov	r20,r3
   24248:	d8c00717 	ldw	r3,28(sp)
   2424c:	84000c04 	addi	r16,r16,48
   24250:	1023883a 	mov	r17,r2
   24254:	1c000005 	stb	r16,0(r3)
   24258:	db001617 	ldw	r12,88(sp)
   2425c:	00800044 	movi	r2,1
   24260:	60802226 	beq	r12,r2,242ec <_dtoa_r+0x1424>
   24264:	d9c00717 	ldw	r7,28(sp)
   24268:	8805883a 	mov	r2,r17
   2426c:	b82b883a 	mov	r21,r23
   24270:	3b19883a 	add	r12,r7,r12
   24274:	6023883a 	mov	r17,r12
   24278:	a007883a 	mov	r3,r20
   2427c:	dc800f15 	stw	r18,60(sp)
   24280:	000d883a 	mov	r6,zero
   24284:	01d00934 	movhi	r7,16420
   24288:	1009883a 	mov	r4,r2
   2428c:	180b883a 	mov	r5,r3
   24290:	002c2980 	call	2c298 <__muldf3>
   24294:	180b883a 	mov	r5,r3
   24298:	1009883a 	mov	r4,r2
   2429c:	1829883a 	mov	r20,r3
   242a0:	1025883a 	mov	r18,r2
   242a4:	002d4000 	call	2d400 <__fixdfsi>
   242a8:	1009883a 	mov	r4,r2
   242ac:	1021883a 	mov	r16,r2
   242b0:	002d4800 	call	2d480 <__floatsidf>
   242b4:	100d883a 	mov	r6,r2
   242b8:	180f883a 	mov	r7,r3
   242bc:	9009883a 	mov	r4,r18
   242c0:	a00b883a 	mov	r5,r20
   242c4:	84000c04 	addi	r16,r16,48
   242c8:	002cb040 	call	2cb04 <__subdf3>
   242cc:	ad400044 	addi	r21,r21,1
   242d0:	ac3fffc5 	stb	r16,-1(r21)
   242d4:	ac7fea1e 	bne	r21,r17,24280 <__alt_data_end+0xfffe4280>
   242d8:	1023883a 	mov	r17,r2
   242dc:	d8801217 	ldw	r2,72(sp)
   242e0:	dc800f17 	ldw	r18,60(sp)
   242e4:	1829883a 	mov	r20,r3
   242e8:	b8af883a 	add	r23,r23,r2
   242ec:	d9001417 	ldw	r4,80(sp)
   242f0:	d9401517 	ldw	r5,84(sp)
   242f4:	000d883a 	mov	r6,zero
   242f8:	01cff834 	movhi	r7,16352
   242fc:	002adc40 	call	2adc4 <__adddf3>
   24300:	880d883a 	mov	r6,r17
   24304:	a00f883a 	mov	r7,r20
   24308:	1009883a 	mov	r4,r2
   2430c:	180b883a 	mov	r5,r3
   24310:	002c1a40 	call	2c1a4 <__ledf2>
   24314:	10003e0e 	bge	r2,zero,24410 <_dtoa_r+0x1548>
   24318:	d9001317 	ldw	r4,76(sp)
   2431c:	bd3fffc3 	ldbu	r20,-1(r23)
   24320:	d9000515 	stw	r4,20(sp)
   24324:	003d3b06 	br	23814 <__alt_data_end+0xfffe3814>
   24328:	0027883a 	mov	r19,zero
   2432c:	003f1b06 	br	23f9c <__alt_data_end+0xfffe3f9c>
   24330:	d8800817 	ldw	r2,32(sp)
   24334:	11e9c83a 	sub	r20,r2,r7
   24338:	0005883a 	mov	r2,zero
   2433c:	003d5406 	br	23890 <__alt_data_end+0xfffe3890>
   24340:	00800044 	movi	r2,1
   24344:	003dc706 	br	23a64 <__alt_data_end+0xfffe3a64>
   24348:	d8c00217 	ldw	r3,8(sp)
   2434c:	00800d84 	movi	r2,54
   24350:	dd400a17 	ldw	r21,40(sp)
   24354:	10c5c83a 	sub	r2,r2,r3
   24358:	dd000817 	ldw	r20,32(sp)
   2435c:	003d4c06 	br	23890 <__alt_data_end+0xfffe3890>
   24360:	dc800f15 	stw	r18,60(sp)
   24364:	dcc01015 	stw	r19,64(sp)
   24368:	04000084 	movi	r16,2
   2436c:	003bed06 	br	23324 <__alt_data_end+0xfffe3324>
   24370:	d9000617 	ldw	r4,24(sp)
   24374:	203f0d26 	beq	r4,zero,23fac <__alt_data_end+0xfffe3fac>
   24378:	d9800c17 	ldw	r6,48(sp)
   2437c:	01bcab0e 	bge	zero,r6,2362c <__alt_data_end+0xfffe362c>
   24380:	d9401017 	ldw	r5,64(sp)
   24384:	d9000f17 	ldw	r4,60(sp)
   24388:	000d883a 	mov	r6,zero
   2438c:	01d00934 	movhi	r7,16420
   24390:	002c2980 	call	2c298 <__muldf3>
   24394:	81000044 	addi	r4,r16,1
   24398:	d8800f15 	stw	r2,60(sp)
   2439c:	d8c01015 	stw	r3,64(sp)
   243a0:	002d4800 	call	2d480 <__floatsidf>
   243a4:	d9800f17 	ldw	r6,60(sp)
   243a8:	d9c01017 	ldw	r7,64(sp)
   243ac:	1009883a 	mov	r4,r2
   243b0:	180b883a 	mov	r5,r3
   243b4:	002c2980 	call	2c298 <__muldf3>
   243b8:	01d00734 	movhi	r7,16412
   243bc:	000d883a 	mov	r6,zero
   243c0:	1009883a 	mov	r4,r2
   243c4:	180b883a 	mov	r5,r3
   243c8:	002adc40 	call	2adc4 <__adddf3>
   243cc:	d9c00517 	ldw	r7,20(sp)
   243d0:	047f3034 	movhi	r17,64704
   243d4:	1021883a 	mov	r16,r2
   243d8:	39ffffc4 	addi	r7,r7,-1
   243dc:	d9c01315 	stw	r7,76(sp)
   243e0:	1c63883a 	add	r17,r3,r17
   243e4:	db000c17 	ldw	r12,48(sp)
   243e8:	003bea06 	br	23394 <__alt_data_end+0xfffe3394>
   243ec:	dc000915 	stw	r16,36(sp)
   243f0:	003e0e06 	br	23c2c <__alt_data_end+0xfffe3c2c>
   243f4:	01000e44 	movi	r4,57
   243f8:	8825883a 	mov	r18,r17
   243fc:	9dc00044 	addi	r23,r19,1
   24400:	99000005 	stb	r4,0(r19)
   24404:	a023883a 	mov	r17,r20
   24408:	dc000915 	stw	r16,36(sp)
   2440c:	003da406 	br	23aa0 <__alt_data_end+0xfffe3aa0>
   24410:	d9801417 	ldw	r6,80(sp)
   24414:	d9c01517 	ldw	r7,84(sp)
   24418:	0009883a 	mov	r4,zero
   2441c:	014ff834 	movhi	r5,16352
   24420:	002cb040 	call	2cb04 <__subdf3>
   24424:	880d883a 	mov	r6,r17
   24428:	a00f883a 	mov	r7,r20
   2442c:	1009883a 	mov	r4,r2
   24430:	180b883a 	mov	r5,r3
   24434:	002c0c80 	call	2c0c8 <__gedf2>
   24438:	00bc7c0e 	bge	zero,r2,2362c <__alt_data_end+0xfffe362c>
   2443c:	01000c04 	movi	r4,48
   24440:	00000106 	br	24448 <_dtoa_r+0x1580>
   24444:	102f883a 	mov	r23,r2
   24448:	b8bfffc4 	addi	r2,r23,-1
   2444c:	10c00007 	ldb	r3,0(r2)
   24450:	193ffc26 	beq	r3,r4,24444 <__alt_data_end+0xfffe4444>
   24454:	d9801317 	ldw	r6,76(sp)
   24458:	d9800515 	stw	r6,20(sp)
   2445c:	003c4406 	br	23570 <__alt_data_end+0xfffe3570>
   24460:	d9801317 	ldw	r6,76(sp)
   24464:	d9800515 	stw	r6,20(sp)
   24468:	003cea06 	br	23814 <__alt_data_end+0xfffe3814>
   2446c:	dd800f17 	ldw	r22,60(sp)
   24470:	dcc01017 	ldw	r19,64(sp)
   24474:	dc801217 	ldw	r18,72(sp)
   24478:	003c6c06 	br	2362c <__alt_data_end+0xfffe362c>
   2447c:	903e031e 	bne	r18,zero,23c8c <__alt_data_end+0xfffe3c8c>
   24480:	003ebb06 	br	23f70 <__alt_data_end+0xfffe3f70>
   24484:	103e6c1e 	bne	r2,zero,23e38 <__alt_data_end+0xfffe3e38>
   24488:	4080004c 	andi	r2,r8,1
   2448c:	103e6a26 	beq	r2,zero,23e38 <__alt_data_end+0xfffe3e38>
   24490:	003e6606 	br	23e2c <__alt_data_end+0xfffe3e2c>
   24494:	d8c00317 	ldw	r3,12(sp)
   24498:	00800084 	movi	r2,2
   2449c:	10c02916 	blt	r2,r3,24544 <_dtoa_r+0x167c>
   244a0:	d9000c17 	ldw	r4,48(sp)
   244a4:	003e8806 	br	23ec8 <__alt_data_end+0xfffe3ec8>
   244a8:	04000084 	movi	r16,2
   244ac:	003b9d06 	br	23324 <__alt_data_end+0xfffe3324>
   244b0:	d9001317 	ldw	r4,76(sp)
   244b4:	d9000515 	stw	r4,20(sp)
   244b8:	003cd606 	br	23814 <__alt_data_end+0xfffe3814>
   244bc:	d8801317 	ldw	r2,76(sp)
   244c0:	d8800515 	stw	r2,20(sp)
   244c4:	003c2a06 	br	23570 <__alt_data_end+0xfffe3570>
   244c8:	d9800317 	ldw	r6,12(sp)
   244cc:	00800084 	movi	r2,2
   244d0:	11801516 	blt	r2,r6,24528 <_dtoa_r+0x1660>
   244d4:	d9c00c17 	ldw	r7,48(sp)
   244d8:	d9c00615 	stw	r7,24(sp)
   244dc:	003df706 	br	23cbc <__alt_data_end+0xfffe3cbc>
   244e0:	193d3926 	beq	r3,r4,239c8 <__alt_data_end+0xfffe39c8>
   244e4:	00c00f04 	movi	r3,60
   244e8:	1885c83a 	sub	r2,r3,r2
   244ec:	003ddf06 	br	23c6c <__alt_data_end+0xfffe3c6c>
   244f0:	e009883a 	mov	r4,fp
   244f4:	e0001115 	stw	zero,68(fp)
   244f8:	000b883a 	mov	r5,zero
   244fc:	00265800 	call	26580 <_Balloc>
   24500:	d8800715 	stw	r2,28(sp)
   24504:	d8c00717 	ldw	r3,28(sp)
   24508:	00bfffc4 	movi	r2,-1
   2450c:	01000044 	movi	r4,1
   24510:	d8800c15 	stw	r2,48(sp)
   24514:	e0c01015 	stw	r3,64(fp)
   24518:	d9000b15 	stw	r4,44(sp)
   2451c:	d8800615 	stw	r2,24(sp)
   24520:	d8002215 	stw	zero,136(sp)
   24524:	003c4106 	br	2362c <__alt_data_end+0xfffe362c>
   24528:	d8c00c17 	ldw	r3,48(sp)
   2452c:	d8c00615 	stw	r3,24(sp)
   24530:	003e7006 	br	23ef4 <__alt_data_end+0xfffe3ef4>
   24534:	04400044 	movi	r17,1
   24538:	003b2006 	br	231bc <__alt_data_end+0xfffe31bc>
   2453c:	000b883a 	mov	r5,zero
   24540:	003b3d06 	br	23238 <__alt_data_end+0xfffe3238>
   24544:	d8800c17 	ldw	r2,48(sp)
   24548:	d8800615 	stw	r2,24(sp)
   2454c:	003e6906 	br	23ef4 <__alt_data_end+0xfffe3ef4>

00024550 <__sflush_r>:
   24550:	2880030b 	ldhu	r2,12(r5)
   24554:	defffb04 	addi	sp,sp,-20
   24558:	dcc00315 	stw	r19,12(sp)
   2455c:	dc400115 	stw	r17,4(sp)
   24560:	dfc00415 	stw	ra,16(sp)
   24564:	dc800215 	stw	r18,8(sp)
   24568:	dc000015 	stw	r16,0(sp)
   2456c:	10c0020c 	andi	r3,r2,8
   24570:	2823883a 	mov	r17,r5
   24574:	2027883a 	mov	r19,r4
   24578:	1800311e 	bne	r3,zero,24640 <__sflush_r+0xf0>
   2457c:	28c00117 	ldw	r3,4(r5)
   24580:	10820014 	ori	r2,r2,2048
   24584:	2880030d 	sth	r2,12(r5)
   24588:	00c04b0e 	bge	zero,r3,246b8 <__sflush_r+0x168>
   2458c:	8a000a17 	ldw	r8,40(r17)
   24590:	40002326 	beq	r8,zero,24620 <__sflush_r+0xd0>
   24594:	9c000017 	ldw	r16,0(r19)
   24598:	10c4000c 	andi	r3,r2,4096
   2459c:	98000015 	stw	zero,0(r19)
   245a0:	18004826 	beq	r3,zero,246c4 <__sflush_r+0x174>
   245a4:	89801417 	ldw	r6,80(r17)
   245a8:	10c0010c 	andi	r3,r2,4
   245ac:	18000626 	beq	r3,zero,245c8 <__sflush_r+0x78>
   245b0:	88c00117 	ldw	r3,4(r17)
   245b4:	88800c17 	ldw	r2,48(r17)
   245b8:	30cdc83a 	sub	r6,r6,r3
   245bc:	10000226 	beq	r2,zero,245c8 <__sflush_r+0x78>
   245c0:	88800f17 	ldw	r2,60(r17)
   245c4:	308dc83a 	sub	r6,r6,r2
   245c8:	89400717 	ldw	r5,28(r17)
   245cc:	000f883a 	mov	r7,zero
   245d0:	9809883a 	mov	r4,r19
   245d4:	403ee83a 	callr	r8
   245d8:	00ffffc4 	movi	r3,-1
   245dc:	10c04426 	beq	r2,r3,246f0 <__sflush_r+0x1a0>
   245e0:	88c0030b 	ldhu	r3,12(r17)
   245e4:	89000417 	ldw	r4,16(r17)
   245e8:	88000115 	stw	zero,4(r17)
   245ec:	197dffcc 	andi	r5,r3,63487
   245f0:	8940030d 	sth	r5,12(r17)
   245f4:	89000015 	stw	r4,0(r17)
   245f8:	18c4000c 	andi	r3,r3,4096
   245fc:	18002c1e 	bne	r3,zero,246b0 <__sflush_r+0x160>
   24600:	89400c17 	ldw	r5,48(r17)
   24604:	9c000015 	stw	r16,0(r19)
   24608:	28000526 	beq	r5,zero,24620 <__sflush_r+0xd0>
   2460c:	88801004 	addi	r2,r17,64
   24610:	28800226 	beq	r5,r2,2461c <__sflush_r+0xcc>
   24614:	9809883a 	mov	r4,r19
   24618:	0024ccc0 	call	24ccc <_free_r>
   2461c:	88000c15 	stw	zero,48(r17)
   24620:	0005883a 	mov	r2,zero
   24624:	dfc00417 	ldw	ra,16(sp)
   24628:	dcc00317 	ldw	r19,12(sp)
   2462c:	dc800217 	ldw	r18,8(sp)
   24630:	dc400117 	ldw	r17,4(sp)
   24634:	dc000017 	ldw	r16,0(sp)
   24638:	dec00504 	addi	sp,sp,20
   2463c:	f800283a 	ret
   24640:	2c800417 	ldw	r18,16(r5)
   24644:	903ff626 	beq	r18,zero,24620 <__alt_data_end+0xfffe4620>
   24648:	2c000017 	ldw	r16,0(r5)
   2464c:	108000cc 	andi	r2,r2,3
   24650:	2c800015 	stw	r18,0(r5)
   24654:	84a1c83a 	sub	r16,r16,r18
   24658:	1000131e 	bne	r2,zero,246a8 <__sflush_r+0x158>
   2465c:	28800517 	ldw	r2,20(r5)
   24660:	88800215 	stw	r2,8(r17)
   24664:	04000316 	blt	zero,r16,24674 <__sflush_r+0x124>
   24668:	003fed06 	br	24620 <__alt_data_end+0xfffe4620>
   2466c:	90a5883a 	add	r18,r18,r2
   24670:	043feb0e 	bge	zero,r16,24620 <__alt_data_end+0xfffe4620>
   24674:	88800917 	ldw	r2,36(r17)
   24678:	89400717 	ldw	r5,28(r17)
   2467c:	800f883a 	mov	r7,r16
   24680:	900d883a 	mov	r6,r18
   24684:	9809883a 	mov	r4,r19
   24688:	103ee83a 	callr	r2
   2468c:	80a1c83a 	sub	r16,r16,r2
   24690:	00bff616 	blt	zero,r2,2466c <__alt_data_end+0xfffe466c>
   24694:	88c0030b 	ldhu	r3,12(r17)
   24698:	00bfffc4 	movi	r2,-1
   2469c:	18c01014 	ori	r3,r3,64
   246a0:	88c0030d 	sth	r3,12(r17)
   246a4:	003fdf06 	br	24624 <__alt_data_end+0xfffe4624>
   246a8:	0005883a 	mov	r2,zero
   246ac:	003fec06 	br	24660 <__alt_data_end+0xfffe4660>
   246b0:	88801415 	stw	r2,80(r17)
   246b4:	003fd206 	br	24600 <__alt_data_end+0xfffe4600>
   246b8:	28c00f17 	ldw	r3,60(r5)
   246bc:	00ffb316 	blt	zero,r3,2458c <__alt_data_end+0xfffe458c>
   246c0:	003fd706 	br	24620 <__alt_data_end+0xfffe4620>
   246c4:	89400717 	ldw	r5,28(r17)
   246c8:	000d883a 	mov	r6,zero
   246cc:	01c00044 	movi	r7,1
   246d0:	9809883a 	mov	r4,r19
   246d4:	403ee83a 	callr	r8
   246d8:	100d883a 	mov	r6,r2
   246dc:	00bfffc4 	movi	r2,-1
   246e0:	30801426 	beq	r6,r2,24734 <__sflush_r+0x1e4>
   246e4:	8880030b 	ldhu	r2,12(r17)
   246e8:	8a000a17 	ldw	r8,40(r17)
   246ec:	003fae06 	br	245a8 <__alt_data_end+0xfffe45a8>
   246f0:	98c00017 	ldw	r3,0(r19)
   246f4:	183fba26 	beq	r3,zero,245e0 <__alt_data_end+0xfffe45e0>
   246f8:	01000744 	movi	r4,29
   246fc:	19000626 	beq	r3,r4,24718 <__sflush_r+0x1c8>
   24700:	01000584 	movi	r4,22
   24704:	19000426 	beq	r3,r4,24718 <__sflush_r+0x1c8>
   24708:	88c0030b 	ldhu	r3,12(r17)
   2470c:	18c01014 	ori	r3,r3,64
   24710:	88c0030d 	sth	r3,12(r17)
   24714:	003fc306 	br	24624 <__alt_data_end+0xfffe4624>
   24718:	8880030b 	ldhu	r2,12(r17)
   2471c:	88c00417 	ldw	r3,16(r17)
   24720:	88000115 	stw	zero,4(r17)
   24724:	10bdffcc 	andi	r2,r2,63487
   24728:	8880030d 	sth	r2,12(r17)
   2472c:	88c00015 	stw	r3,0(r17)
   24730:	003fb306 	br	24600 <__alt_data_end+0xfffe4600>
   24734:	98800017 	ldw	r2,0(r19)
   24738:	103fea26 	beq	r2,zero,246e4 <__alt_data_end+0xfffe46e4>
   2473c:	00c00744 	movi	r3,29
   24740:	10c00226 	beq	r2,r3,2474c <__sflush_r+0x1fc>
   24744:	00c00584 	movi	r3,22
   24748:	10c0031e 	bne	r2,r3,24758 <__sflush_r+0x208>
   2474c:	9c000015 	stw	r16,0(r19)
   24750:	0005883a 	mov	r2,zero
   24754:	003fb306 	br	24624 <__alt_data_end+0xfffe4624>
   24758:	88c0030b 	ldhu	r3,12(r17)
   2475c:	3005883a 	mov	r2,r6
   24760:	18c01014 	ori	r3,r3,64
   24764:	88c0030d 	sth	r3,12(r17)
   24768:	003fae06 	br	24624 <__alt_data_end+0xfffe4624>

0002476c <_fflush_r>:
   2476c:	defffd04 	addi	sp,sp,-12
   24770:	dc000115 	stw	r16,4(sp)
   24774:	dfc00215 	stw	ra,8(sp)
   24778:	2021883a 	mov	r16,r4
   2477c:	20000226 	beq	r4,zero,24788 <_fflush_r+0x1c>
   24780:	20800e17 	ldw	r2,56(r4)
   24784:	10000c26 	beq	r2,zero,247b8 <_fflush_r+0x4c>
   24788:	2880030f 	ldh	r2,12(r5)
   2478c:	1000051e 	bne	r2,zero,247a4 <_fflush_r+0x38>
   24790:	0005883a 	mov	r2,zero
   24794:	dfc00217 	ldw	ra,8(sp)
   24798:	dc000117 	ldw	r16,4(sp)
   2479c:	dec00304 	addi	sp,sp,12
   247a0:	f800283a 	ret
   247a4:	8009883a 	mov	r4,r16
   247a8:	dfc00217 	ldw	ra,8(sp)
   247ac:	dc000117 	ldw	r16,4(sp)
   247b0:	dec00304 	addi	sp,sp,12
   247b4:	00245501 	jmpi	24550 <__sflush_r>
   247b8:	d9400015 	stw	r5,0(sp)
   247bc:	0024b580 	call	24b58 <__sinit>
   247c0:	d9400017 	ldw	r5,0(sp)
   247c4:	003ff006 	br	24788 <__alt_data_end+0xfffe4788>

000247c8 <fflush>:
   247c8:	20000526 	beq	r4,zero,247e0 <fflush+0x18>
   247cc:	008000f4 	movhi	r2,3
   247d0:	10914f04 	addi	r2,r2,17724
   247d4:	200b883a 	mov	r5,r4
   247d8:	11000017 	ldw	r4,0(r2)
   247dc:	002476c1 	jmpi	2476c <_fflush_r>
   247e0:	008000f4 	movhi	r2,3
   247e4:	10914e04 	addi	r2,r2,17720
   247e8:	11000017 	ldw	r4,0(r2)
   247ec:	014000b4 	movhi	r5,2
   247f0:	2951db04 	addi	r5,r5,18284
   247f4:	00255681 	jmpi	25568 <_fwalk_reent>

000247f8 <__fp_unlock>:
   247f8:	0005883a 	mov	r2,zero
   247fc:	f800283a 	ret

00024800 <_cleanup_r>:
   24800:	014000f4 	movhi	r5,3
   24804:	29667104 	addi	r5,r5,-26172
   24808:	00255681 	jmpi	25568 <_fwalk_reent>

0002480c <__sinit.part.1>:
   2480c:	defff704 	addi	sp,sp,-36
   24810:	00c000b4 	movhi	r3,2
   24814:	dfc00815 	stw	ra,32(sp)
   24818:	ddc00715 	stw	r23,28(sp)
   2481c:	dd800615 	stw	r22,24(sp)
   24820:	dd400515 	stw	r21,20(sp)
   24824:	dd000415 	stw	r20,16(sp)
   24828:	dcc00315 	stw	r19,12(sp)
   2482c:	dc800215 	stw	r18,8(sp)
   24830:	dc400115 	stw	r17,4(sp)
   24834:	dc000015 	stw	r16,0(sp)
   24838:	18d20004 	addi	r3,r3,18432
   2483c:	24000117 	ldw	r16,4(r4)
   24840:	20c00f15 	stw	r3,60(r4)
   24844:	2080bb04 	addi	r2,r4,748
   24848:	00c000c4 	movi	r3,3
   2484c:	20c0b915 	stw	r3,740(r4)
   24850:	2080ba15 	stw	r2,744(r4)
   24854:	2000b815 	stw	zero,736(r4)
   24858:	05c00204 	movi	r23,8
   2485c:	00800104 	movi	r2,4
   24860:	2025883a 	mov	r18,r4
   24864:	b80d883a 	mov	r6,r23
   24868:	81001704 	addi	r4,r16,92
   2486c:	000b883a 	mov	r5,zero
   24870:	80000015 	stw	zero,0(r16)
   24874:	80000115 	stw	zero,4(r16)
   24878:	80000215 	stw	zero,8(r16)
   2487c:	8080030d 	sth	r2,12(r16)
   24880:	80001915 	stw	zero,100(r16)
   24884:	8000038d 	sth	zero,14(r16)
   24888:	80000415 	stw	zero,16(r16)
   2488c:	80000515 	stw	zero,20(r16)
   24890:	80000615 	stw	zero,24(r16)
   24894:	00264580 	call	26458 <memset>
   24898:	058000b4 	movhi	r22,2
   2489c:	94400217 	ldw	r17,8(r18)
   248a0:	054000b4 	movhi	r21,2
   248a4:	050000b4 	movhi	r20,2
   248a8:	04c000b4 	movhi	r19,2
   248ac:	b59f7304 	addi	r22,r22,32204
   248b0:	ad5f8a04 	addi	r21,r21,32296
   248b4:	a51fa904 	addi	r20,r20,32420
   248b8:	9cdfc004 	addi	r19,r19,32512
   248bc:	85800815 	stw	r22,32(r16)
   248c0:	85400915 	stw	r21,36(r16)
   248c4:	85000a15 	stw	r20,40(r16)
   248c8:	84c00b15 	stw	r19,44(r16)
   248cc:	84000715 	stw	r16,28(r16)
   248d0:	00800284 	movi	r2,10
   248d4:	8880030d 	sth	r2,12(r17)
   248d8:	00800044 	movi	r2,1
   248dc:	b80d883a 	mov	r6,r23
   248e0:	89001704 	addi	r4,r17,92
   248e4:	000b883a 	mov	r5,zero
   248e8:	88000015 	stw	zero,0(r17)
   248ec:	88000115 	stw	zero,4(r17)
   248f0:	88000215 	stw	zero,8(r17)
   248f4:	88001915 	stw	zero,100(r17)
   248f8:	8880038d 	sth	r2,14(r17)
   248fc:	88000415 	stw	zero,16(r17)
   24900:	88000515 	stw	zero,20(r17)
   24904:	88000615 	stw	zero,24(r17)
   24908:	00264580 	call	26458 <memset>
   2490c:	94000317 	ldw	r16,12(r18)
   24910:	00800484 	movi	r2,18
   24914:	8c400715 	stw	r17,28(r17)
   24918:	8d800815 	stw	r22,32(r17)
   2491c:	8d400915 	stw	r21,36(r17)
   24920:	8d000a15 	stw	r20,40(r17)
   24924:	8cc00b15 	stw	r19,44(r17)
   24928:	8080030d 	sth	r2,12(r16)
   2492c:	00800084 	movi	r2,2
   24930:	80000015 	stw	zero,0(r16)
   24934:	80000115 	stw	zero,4(r16)
   24938:	80000215 	stw	zero,8(r16)
   2493c:	80001915 	stw	zero,100(r16)
   24940:	8080038d 	sth	r2,14(r16)
   24944:	80000415 	stw	zero,16(r16)
   24948:	80000515 	stw	zero,20(r16)
   2494c:	80000615 	stw	zero,24(r16)
   24950:	b80d883a 	mov	r6,r23
   24954:	000b883a 	mov	r5,zero
   24958:	81001704 	addi	r4,r16,92
   2495c:	00264580 	call	26458 <memset>
   24960:	00800044 	movi	r2,1
   24964:	84000715 	stw	r16,28(r16)
   24968:	85800815 	stw	r22,32(r16)
   2496c:	85400915 	stw	r21,36(r16)
   24970:	85000a15 	stw	r20,40(r16)
   24974:	84c00b15 	stw	r19,44(r16)
   24978:	90800e15 	stw	r2,56(r18)
   2497c:	dfc00817 	ldw	ra,32(sp)
   24980:	ddc00717 	ldw	r23,28(sp)
   24984:	dd800617 	ldw	r22,24(sp)
   24988:	dd400517 	ldw	r21,20(sp)
   2498c:	dd000417 	ldw	r20,16(sp)
   24990:	dcc00317 	ldw	r19,12(sp)
   24994:	dc800217 	ldw	r18,8(sp)
   24998:	dc400117 	ldw	r17,4(sp)
   2499c:	dc000017 	ldw	r16,0(sp)
   249a0:	dec00904 	addi	sp,sp,36
   249a4:	f800283a 	ret

000249a8 <__fp_lock>:
   249a8:	0005883a 	mov	r2,zero
   249ac:	f800283a 	ret

000249b0 <__sfmoreglue>:
   249b0:	defffc04 	addi	sp,sp,-16
   249b4:	dc800215 	stw	r18,8(sp)
   249b8:	2825883a 	mov	r18,r5
   249bc:	dc000015 	stw	r16,0(sp)
   249c0:	01401a04 	movi	r5,104
   249c4:	2021883a 	mov	r16,r4
   249c8:	913fffc4 	addi	r4,r18,-1
   249cc:	dfc00315 	stw	ra,12(sp)
   249d0:	dc400115 	stw	r17,4(sp)
   249d4:	002ad9c0 	call	2ad9c <__mulsi3>
   249d8:	8009883a 	mov	r4,r16
   249dc:	11401d04 	addi	r5,r2,116
   249e0:	1023883a 	mov	r17,r2
   249e4:	00258c40 	call	258c4 <_malloc_r>
   249e8:	1021883a 	mov	r16,r2
   249ec:	10000726 	beq	r2,zero,24a0c <__sfmoreglue+0x5c>
   249f0:	11000304 	addi	r4,r2,12
   249f4:	10000015 	stw	zero,0(r2)
   249f8:	14800115 	stw	r18,4(r2)
   249fc:	11000215 	stw	r4,8(r2)
   24a00:	89801a04 	addi	r6,r17,104
   24a04:	000b883a 	mov	r5,zero
   24a08:	00264580 	call	26458 <memset>
   24a0c:	8005883a 	mov	r2,r16
   24a10:	dfc00317 	ldw	ra,12(sp)
   24a14:	dc800217 	ldw	r18,8(sp)
   24a18:	dc400117 	ldw	r17,4(sp)
   24a1c:	dc000017 	ldw	r16,0(sp)
   24a20:	dec00404 	addi	sp,sp,16
   24a24:	f800283a 	ret

00024a28 <__sfp>:
   24a28:	defffb04 	addi	sp,sp,-20
   24a2c:	dc000015 	stw	r16,0(sp)
   24a30:	040000f4 	movhi	r16,3
   24a34:	84114e04 	addi	r16,r16,17720
   24a38:	dcc00315 	stw	r19,12(sp)
   24a3c:	2027883a 	mov	r19,r4
   24a40:	81000017 	ldw	r4,0(r16)
   24a44:	dfc00415 	stw	ra,16(sp)
   24a48:	dc800215 	stw	r18,8(sp)
   24a4c:	20800e17 	ldw	r2,56(r4)
   24a50:	dc400115 	stw	r17,4(sp)
   24a54:	1000021e 	bne	r2,zero,24a60 <__sfp+0x38>
   24a58:	002480c0 	call	2480c <__sinit.part.1>
   24a5c:	81000017 	ldw	r4,0(r16)
   24a60:	2480b804 	addi	r18,r4,736
   24a64:	047fffc4 	movi	r17,-1
   24a68:	91000117 	ldw	r4,4(r18)
   24a6c:	94000217 	ldw	r16,8(r18)
   24a70:	213fffc4 	addi	r4,r4,-1
   24a74:	20000a16 	blt	r4,zero,24aa0 <__sfp+0x78>
   24a78:	8080030f 	ldh	r2,12(r16)
   24a7c:	10000c26 	beq	r2,zero,24ab0 <__sfp+0x88>
   24a80:	80c01d04 	addi	r3,r16,116
   24a84:	00000206 	br	24a90 <__sfp+0x68>
   24a88:	18bfe60f 	ldh	r2,-104(r3)
   24a8c:	10000826 	beq	r2,zero,24ab0 <__sfp+0x88>
   24a90:	213fffc4 	addi	r4,r4,-1
   24a94:	1c3ffd04 	addi	r16,r3,-12
   24a98:	18c01a04 	addi	r3,r3,104
   24a9c:	247ffa1e 	bne	r4,r17,24a88 <__alt_data_end+0xfffe4a88>
   24aa0:	90800017 	ldw	r2,0(r18)
   24aa4:	10001d26 	beq	r2,zero,24b1c <__sfp+0xf4>
   24aa8:	1025883a 	mov	r18,r2
   24aac:	003fee06 	br	24a68 <__alt_data_end+0xfffe4a68>
   24ab0:	00bfffc4 	movi	r2,-1
   24ab4:	8080038d 	sth	r2,14(r16)
   24ab8:	00800044 	movi	r2,1
   24abc:	8080030d 	sth	r2,12(r16)
   24ac0:	80001915 	stw	zero,100(r16)
   24ac4:	80000015 	stw	zero,0(r16)
   24ac8:	80000215 	stw	zero,8(r16)
   24acc:	80000115 	stw	zero,4(r16)
   24ad0:	80000415 	stw	zero,16(r16)
   24ad4:	80000515 	stw	zero,20(r16)
   24ad8:	80000615 	stw	zero,24(r16)
   24adc:	01800204 	movi	r6,8
   24ae0:	000b883a 	mov	r5,zero
   24ae4:	81001704 	addi	r4,r16,92
   24ae8:	00264580 	call	26458 <memset>
   24aec:	8005883a 	mov	r2,r16
   24af0:	80000c15 	stw	zero,48(r16)
   24af4:	80000d15 	stw	zero,52(r16)
   24af8:	80001115 	stw	zero,68(r16)
   24afc:	80001215 	stw	zero,72(r16)
   24b00:	dfc00417 	ldw	ra,16(sp)
   24b04:	dcc00317 	ldw	r19,12(sp)
   24b08:	dc800217 	ldw	r18,8(sp)
   24b0c:	dc400117 	ldw	r17,4(sp)
   24b10:	dc000017 	ldw	r16,0(sp)
   24b14:	dec00504 	addi	sp,sp,20
   24b18:	f800283a 	ret
   24b1c:	01400104 	movi	r5,4
   24b20:	9809883a 	mov	r4,r19
   24b24:	00249b00 	call	249b0 <__sfmoreglue>
   24b28:	90800015 	stw	r2,0(r18)
   24b2c:	103fde1e 	bne	r2,zero,24aa8 <__alt_data_end+0xfffe4aa8>
   24b30:	00800304 	movi	r2,12
   24b34:	98800015 	stw	r2,0(r19)
   24b38:	0005883a 	mov	r2,zero
   24b3c:	003ff006 	br	24b00 <__alt_data_end+0xfffe4b00>

00024b40 <_cleanup>:
   24b40:	008000f4 	movhi	r2,3
   24b44:	10914e04 	addi	r2,r2,17720
   24b48:	11000017 	ldw	r4,0(r2)
   24b4c:	014000f4 	movhi	r5,3
   24b50:	29667104 	addi	r5,r5,-26172
   24b54:	00255681 	jmpi	25568 <_fwalk_reent>

00024b58 <__sinit>:
   24b58:	20800e17 	ldw	r2,56(r4)
   24b5c:	10000126 	beq	r2,zero,24b64 <__sinit+0xc>
   24b60:	f800283a 	ret
   24b64:	002480c1 	jmpi	2480c <__sinit.part.1>

00024b68 <__sfp_lock_acquire>:
   24b68:	f800283a 	ret

00024b6c <__sfp_lock_release>:
   24b6c:	f800283a 	ret

00024b70 <__sinit_lock_acquire>:
   24b70:	f800283a 	ret

00024b74 <__sinit_lock_release>:
   24b74:	f800283a 	ret

00024b78 <__fp_lock_all>:
   24b78:	008000f4 	movhi	r2,3
   24b7c:	10914f04 	addi	r2,r2,17724
   24b80:	11000017 	ldw	r4,0(r2)
   24b84:	014000b4 	movhi	r5,2
   24b88:	29526a04 	addi	r5,r5,18856
   24b8c:	00254a41 	jmpi	254a4 <_fwalk>

00024b90 <__fp_unlock_all>:
   24b90:	008000f4 	movhi	r2,3
   24b94:	10914f04 	addi	r2,r2,17724
   24b98:	11000017 	ldw	r4,0(r2)
   24b9c:	014000b4 	movhi	r5,2
   24ba0:	2951fe04 	addi	r5,r5,18424
   24ba4:	00254a41 	jmpi	254a4 <_fwalk>

00024ba8 <_malloc_trim_r>:
   24ba8:	defffb04 	addi	sp,sp,-20
   24bac:	dcc00315 	stw	r19,12(sp)
   24bb0:	04c000f4 	movhi	r19,3
   24bb4:	dc800215 	stw	r18,8(sp)
   24bb8:	dc400115 	stw	r17,4(sp)
   24bbc:	dc000015 	stw	r16,0(sp)
   24bc0:	dfc00415 	stw	ra,16(sp)
   24bc4:	2821883a 	mov	r16,r5
   24bc8:	9ccb8b04 	addi	r19,r19,11820
   24bcc:	2025883a 	mov	r18,r4
   24bd0:	002dc040 	call	2dc04 <__malloc_lock>
   24bd4:	98800217 	ldw	r2,8(r19)
   24bd8:	14400117 	ldw	r17,4(r2)
   24bdc:	00bfff04 	movi	r2,-4
   24be0:	88a2703a 	and	r17,r17,r2
   24be4:	8c21c83a 	sub	r16,r17,r16
   24be8:	8403fbc4 	addi	r16,r16,4079
   24bec:	8020d33a 	srli	r16,r16,12
   24bf0:	0083ffc4 	movi	r2,4095
   24bf4:	843fffc4 	addi	r16,r16,-1
   24bf8:	8020933a 	slli	r16,r16,12
   24bfc:	1400060e 	bge	r2,r16,24c18 <_malloc_trim_r+0x70>
   24c00:	000b883a 	mov	r5,zero
   24c04:	9009883a 	mov	r4,r18
   24c08:	0027d780 	call	27d78 <_sbrk_r>
   24c0c:	98c00217 	ldw	r3,8(r19)
   24c10:	1c47883a 	add	r3,r3,r17
   24c14:	10c00a26 	beq	r2,r3,24c40 <_malloc_trim_r+0x98>
   24c18:	9009883a 	mov	r4,r18
   24c1c:	002dc280 	call	2dc28 <__malloc_unlock>
   24c20:	0005883a 	mov	r2,zero
   24c24:	dfc00417 	ldw	ra,16(sp)
   24c28:	dcc00317 	ldw	r19,12(sp)
   24c2c:	dc800217 	ldw	r18,8(sp)
   24c30:	dc400117 	ldw	r17,4(sp)
   24c34:	dc000017 	ldw	r16,0(sp)
   24c38:	dec00504 	addi	sp,sp,20
   24c3c:	f800283a 	ret
   24c40:	040bc83a 	sub	r5,zero,r16
   24c44:	9009883a 	mov	r4,r18
   24c48:	0027d780 	call	27d78 <_sbrk_r>
   24c4c:	00ffffc4 	movi	r3,-1
   24c50:	10c00d26 	beq	r2,r3,24c88 <_malloc_trim_r+0xe0>
   24c54:	00c000f4 	movhi	r3,3
   24c58:	18d86b04 	addi	r3,r3,25004
   24c5c:	18800017 	ldw	r2,0(r3)
   24c60:	99000217 	ldw	r4,8(r19)
   24c64:	8c23c83a 	sub	r17,r17,r16
   24c68:	8c400054 	ori	r17,r17,1
   24c6c:	1421c83a 	sub	r16,r2,r16
   24c70:	24400115 	stw	r17,4(r4)
   24c74:	9009883a 	mov	r4,r18
   24c78:	1c000015 	stw	r16,0(r3)
   24c7c:	002dc280 	call	2dc28 <__malloc_unlock>
   24c80:	00800044 	movi	r2,1
   24c84:	003fe706 	br	24c24 <__alt_data_end+0xfffe4c24>
   24c88:	000b883a 	mov	r5,zero
   24c8c:	9009883a 	mov	r4,r18
   24c90:	0027d780 	call	27d78 <_sbrk_r>
   24c94:	99000217 	ldw	r4,8(r19)
   24c98:	014003c4 	movi	r5,15
   24c9c:	1107c83a 	sub	r3,r2,r4
   24ca0:	28ffdd0e 	bge	r5,r3,24c18 <__alt_data_end+0xfffe4c18>
   24ca4:	014000f4 	movhi	r5,3
   24ca8:	29515104 	addi	r5,r5,17732
   24cac:	29400017 	ldw	r5,0(r5)
   24cb0:	18c00054 	ori	r3,r3,1
   24cb4:	20c00115 	stw	r3,4(r4)
   24cb8:	00c000f4 	movhi	r3,3
   24cbc:	1145c83a 	sub	r2,r2,r5
   24cc0:	18d86b04 	addi	r3,r3,25004
   24cc4:	18800015 	stw	r2,0(r3)
   24cc8:	003fd306 	br	24c18 <__alt_data_end+0xfffe4c18>

00024ccc <_free_r>:
   24ccc:	28004126 	beq	r5,zero,24dd4 <_free_r+0x108>
   24cd0:	defffd04 	addi	sp,sp,-12
   24cd4:	dc400115 	stw	r17,4(sp)
   24cd8:	dc000015 	stw	r16,0(sp)
   24cdc:	2023883a 	mov	r17,r4
   24ce0:	2821883a 	mov	r16,r5
   24ce4:	dfc00215 	stw	ra,8(sp)
   24ce8:	002dc040 	call	2dc04 <__malloc_lock>
   24cec:	81ffff17 	ldw	r7,-4(r16)
   24cf0:	00bfff84 	movi	r2,-2
   24cf4:	010000f4 	movhi	r4,3
   24cf8:	81bffe04 	addi	r6,r16,-8
   24cfc:	3884703a 	and	r2,r7,r2
   24d00:	210b8b04 	addi	r4,r4,11820
   24d04:	308b883a 	add	r5,r6,r2
   24d08:	2a400117 	ldw	r9,4(r5)
   24d0c:	22000217 	ldw	r8,8(r4)
   24d10:	00ffff04 	movi	r3,-4
   24d14:	48c6703a 	and	r3,r9,r3
   24d18:	2a005726 	beq	r5,r8,24e78 <_free_r+0x1ac>
   24d1c:	28c00115 	stw	r3,4(r5)
   24d20:	39c0004c 	andi	r7,r7,1
   24d24:	3800091e 	bne	r7,zero,24d4c <_free_r+0x80>
   24d28:	823ffe17 	ldw	r8,-8(r16)
   24d2c:	22400204 	addi	r9,r4,8
   24d30:	320dc83a 	sub	r6,r6,r8
   24d34:	31c00217 	ldw	r7,8(r6)
   24d38:	1205883a 	add	r2,r2,r8
   24d3c:	3a406526 	beq	r7,r9,24ed4 <_free_r+0x208>
   24d40:	32000317 	ldw	r8,12(r6)
   24d44:	3a000315 	stw	r8,12(r7)
   24d48:	41c00215 	stw	r7,8(r8)
   24d4c:	28cf883a 	add	r7,r5,r3
   24d50:	39c00117 	ldw	r7,4(r7)
   24d54:	39c0004c 	andi	r7,r7,1
   24d58:	38003a26 	beq	r7,zero,24e44 <_free_r+0x178>
   24d5c:	10c00054 	ori	r3,r2,1
   24d60:	30c00115 	stw	r3,4(r6)
   24d64:	3087883a 	add	r3,r6,r2
   24d68:	18800015 	stw	r2,0(r3)
   24d6c:	00c07fc4 	movi	r3,511
   24d70:	18801936 	bltu	r3,r2,24dd8 <_free_r+0x10c>
   24d74:	1004d0fa 	srli	r2,r2,3
   24d78:	01c00044 	movi	r7,1
   24d7c:	21400117 	ldw	r5,4(r4)
   24d80:	10c00044 	addi	r3,r2,1
   24d84:	18c7883a 	add	r3,r3,r3
   24d88:	1005d0ba 	srai	r2,r2,2
   24d8c:	18c7883a 	add	r3,r3,r3
   24d90:	18c7883a 	add	r3,r3,r3
   24d94:	1907883a 	add	r3,r3,r4
   24d98:	3884983a 	sll	r2,r7,r2
   24d9c:	19c00017 	ldw	r7,0(r3)
   24da0:	1a3ffe04 	addi	r8,r3,-8
   24da4:	1144b03a 	or	r2,r2,r5
   24da8:	32000315 	stw	r8,12(r6)
   24dac:	31c00215 	stw	r7,8(r6)
   24db0:	20800115 	stw	r2,4(r4)
   24db4:	19800015 	stw	r6,0(r3)
   24db8:	39800315 	stw	r6,12(r7)
   24dbc:	8809883a 	mov	r4,r17
   24dc0:	dfc00217 	ldw	ra,8(sp)
   24dc4:	dc400117 	ldw	r17,4(sp)
   24dc8:	dc000017 	ldw	r16,0(sp)
   24dcc:	dec00304 	addi	sp,sp,12
   24dd0:	002dc281 	jmpi	2dc28 <__malloc_unlock>
   24dd4:	f800283a 	ret
   24dd8:	100ad27a 	srli	r5,r2,9
   24ddc:	00c00104 	movi	r3,4
   24de0:	19404a36 	bltu	r3,r5,24f0c <_free_r+0x240>
   24de4:	100ad1ba 	srli	r5,r2,6
   24de8:	28c00e44 	addi	r3,r5,57
   24dec:	18c7883a 	add	r3,r3,r3
   24df0:	29400e04 	addi	r5,r5,56
   24df4:	18c7883a 	add	r3,r3,r3
   24df8:	18c7883a 	add	r3,r3,r3
   24dfc:	1909883a 	add	r4,r3,r4
   24e00:	20c00017 	ldw	r3,0(r4)
   24e04:	01c000f4 	movhi	r7,3
   24e08:	213ffe04 	addi	r4,r4,-8
   24e0c:	39cb8b04 	addi	r7,r7,11820
   24e10:	20c04426 	beq	r4,r3,24f24 <_free_r+0x258>
   24e14:	01ffff04 	movi	r7,-4
   24e18:	19400117 	ldw	r5,4(r3)
   24e1c:	29ca703a 	and	r5,r5,r7
   24e20:	1140022e 	bgeu	r2,r5,24e2c <_free_r+0x160>
   24e24:	18c00217 	ldw	r3,8(r3)
   24e28:	20fffb1e 	bne	r4,r3,24e18 <__alt_data_end+0xfffe4e18>
   24e2c:	19000317 	ldw	r4,12(r3)
   24e30:	31000315 	stw	r4,12(r6)
   24e34:	30c00215 	stw	r3,8(r6)
   24e38:	21800215 	stw	r6,8(r4)
   24e3c:	19800315 	stw	r6,12(r3)
   24e40:	003fde06 	br	24dbc <__alt_data_end+0xfffe4dbc>
   24e44:	29c00217 	ldw	r7,8(r5)
   24e48:	10c5883a 	add	r2,r2,r3
   24e4c:	00c000f4 	movhi	r3,3
   24e50:	18cb8d04 	addi	r3,r3,11828
   24e54:	38c03b26 	beq	r7,r3,24f44 <_free_r+0x278>
   24e58:	2a000317 	ldw	r8,12(r5)
   24e5c:	11400054 	ori	r5,r2,1
   24e60:	3087883a 	add	r3,r6,r2
   24e64:	3a000315 	stw	r8,12(r7)
   24e68:	41c00215 	stw	r7,8(r8)
   24e6c:	31400115 	stw	r5,4(r6)
   24e70:	18800015 	stw	r2,0(r3)
   24e74:	003fbd06 	br	24d6c <__alt_data_end+0xfffe4d6c>
   24e78:	39c0004c 	andi	r7,r7,1
   24e7c:	10c5883a 	add	r2,r2,r3
   24e80:	3800071e 	bne	r7,zero,24ea0 <_free_r+0x1d4>
   24e84:	81fffe17 	ldw	r7,-8(r16)
   24e88:	31cdc83a 	sub	r6,r6,r7
   24e8c:	30c00317 	ldw	r3,12(r6)
   24e90:	31400217 	ldw	r5,8(r6)
   24e94:	11c5883a 	add	r2,r2,r7
   24e98:	28c00315 	stw	r3,12(r5)
   24e9c:	19400215 	stw	r5,8(r3)
   24ea0:	10c00054 	ori	r3,r2,1
   24ea4:	30c00115 	stw	r3,4(r6)
   24ea8:	00c000f4 	movhi	r3,3
   24eac:	18d15204 	addi	r3,r3,17736
   24eb0:	18c00017 	ldw	r3,0(r3)
   24eb4:	21800215 	stw	r6,8(r4)
   24eb8:	10ffc036 	bltu	r2,r3,24dbc <__alt_data_end+0xfffe4dbc>
   24ebc:	008000f4 	movhi	r2,3
   24ec0:	10986204 	addi	r2,r2,24968
   24ec4:	11400017 	ldw	r5,0(r2)
   24ec8:	8809883a 	mov	r4,r17
   24ecc:	0024ba80 	call	24ba8 <_malloc_trim_r>
   24ed0:	003fba06 	br	24dbc <__alt_data_end+0xfffe4dbc>
   24ed4:	28c9883a 	add	r4,r5,r3
   24ed8:	21000117 	ldw	r4,4(r4)
   24edc:	2100004c 	andi	r4,r4,1
   24ee0:	2000391e 	bne	r4,zero,24fc8 <_free_r+0x2fc>
   24ee4:	29c00217 	ldw	r7,8(r5)
   24ee8:	29000317 	ldw	r4,12(r5)
   24eec:	1885883a 	add	r2,r3,r2
   24ef0:	10c00054 	ori	r3,r2,1
   24ef4:	39000315 	stw	r4,12(r7)
   24ef8:	21c00215 	stw	r7,8(r4)
   24efc:	30c00115 	stw	r3,4(r6)
   24f00:	308d883a 	add	r6,r6,r2
   24f04:	30800015 	stw	r2,0(r6)
   24f08:	003fac06 	br	24dbc <__alt_data_end+0xfffe4dbc>
   24f0c:	00c00504 	movi	r3,20
   24f10:	19401536 	bltu	r3,r5,24f68 <_free_r+0x29c>
   24f14:	28c01704 	addi	r3,r5,92
   24f18:	18c7883a 	add	r3,r3,r3
   24f1c:	294016c4 	addi	r5,r5,91
   24f20:	003fb406 	br	24df4 <__alt_data_end+0xfffe4df4>
   24f24:	280bd0ba 	srai	r5,r5,2
   24f28:	00c00044 	movi	r3,1
   24f2c:	38800117 	ldw	r2,4(r7)
   24f30:	194a983a 	sll	r5,r3,r5
   24f34:	2007883a 	mov	r3,r4
   24f38:	2884b03a 	or	r2,r5,r2
   24f3c:	38800115 	stw	r2,4(r7)
   24f40:	003fbb06 	br	24e30 <__alt_data_end+0xfffe4e30>
   24f44:	21800515 	stw	r6,20(r4)
   24f48:	21800415 	stw	r6,16(r4)
   24f4c:	10c00054 	ori	r3,r2,1
   24f50:	31c00315 	stw	r7,12(r6)
   24f54:	31c00215 	stw	r7,8(r6)
   24f58:	30c00115 	stw	r3,4(r6)
   24f5c:	308d883a 	add	r6,r6,r2
   24f60:	30800015 	stw	r2,0(r6)
   24f64:	003f9506 	br	24dbc <__alt_data_end+0xfffe4dbc>
   24f68:	00c01504 	movi	r3,84
   24f6c:	19400536 	bltu	r3,r5,24f84 <_free_r+0x2b8>
   24f70:	100ad33a 	srli	r5,r2,12
   24f74:	28c01bc4 	addi	r3,r5,111
   24f78:	18c7883a 	add	r3,r3,r3
   24f7c:	29401b84 	addi	r5,r5,110
   24f80:	003f9c06 	br	24df4 <__alt_data_end+0xfffe4df4>
   24f84:	00c05504 	movi	r3,340
   24f88:	19400536 	bltu	r3,r5,24fa0 <_free_r+0x2d4>
   24f8c:	100ad3fa 	srli	r5,r2,15
   24f90:	28c01e04 	addi	r3,r5,120
   24f94:	18c7883a 	add	r3,r3,r3
   24f98:	29401dc4 	addi	r5,r5,119
   24f9c:	003f9506 	br	24df4 <__alt_data_end+0xfffe4df4>
   24fa0:	00c15504 	movi	r3,1364
   24fa4:	19400536 	bltu	r3,r5,24fbc <_free_r+0x2f0>
   24fa8:	100ad4ba 	srli	r5,r2,18
   24fac:	28c01f44 	addi	r3,r5,125
   24fb0:	18c7883a 	add	r3,r3,r3
   24fb4:	29401f04 	addi	r5,r5,124
   24fb8:	003f8e06 	br	24df4 <__alt_data_end+0xfffe4df4>
   24fbc:	00c03f84 	movi	r3,254
   24fc0:	01401f84 	movi	r5,126
   24fc4:	003f8b06 	br	24df4 <__alt_data_end+0xfffe4df4>
   24fc8:	10c00054 	ori	r3,r2,1
   24fcc:	30c00115 	stw	r3,4(r6)
   24fd0:	308d883a 	add	r6,r6,r2
   24fd4:	30800015 	stw	r2,0(r6)
   24fd8:	003f7806 	br	24dbc <__alt_data_end+0xfffe4dbc>

00024fdc <__sfvwrite_r>:
   24fdc:	30800217 	ldw	r2,8(r6)
   24fe0:	10006726 	beq	r2,zero,25180 <__sfvwrite_r+0x1a4>
   24fe4:	28c0030b 	ldhu	r3,12(r5)
   24fe8:	defff404 	addi	sp,sp,-48
   24fec:	dd400715 	stw	r21,28(sp)
   24ff0:	dd000615 	stw	r20,24(sp)
   24ff4:	dc000215 	stw	r16,8(sp)
   24ff8:	dfc00b15 	stw	ra,44(sp)
   24ffc:	df000a15 	stw	fp,40(sp)
   25000:	ddc00915 	stw	r23,36(sp)
   25004:	dd800815 	stw	r22,32(sp)
   25008:	dcc00515 	stw	r19,20(sp)
   2500c:	dc800415 	stw	r18,16(sp)
   25010:	dc400315 	stw	r17,12(sp)
   25014:	1880020c 	andi	r2,r3,8
   25018:	2821883a 	mov	r16,r5
   2501c:	202b883a 	mov	r21,r4
   25020:	3029883a 	mov	r20,r6
   25024:	10002726 	beq	r2,zero,250c4 <__sfvwrite_r+0xe8>
   25028:	28800417 	ldw	r2,16(r5)
   2502c:	10002526 	beq	r2,zero,250c4 <__sfvwrite_r+0xe8>
   25030:	1880008c 	andi	r2,r3,2
   25034:	a4400017 	ldw	r17,0(r20)
   25038:	10002a26 	beq	r2,zero,250e4 <__sfvwrite_r+0x108>
   2503c:	05a00034 	movhi	r22,32768
   25040:	0027883a 	mov	r19,zero
   25044:	0025883a 	mov	r18,zero
   25048:	b5bf0004 	addi	r22,r22,-1024
   2504c:	980d883a 	mov	r6,r19
   25050:	a809883a 	mov	r4,r21
   25054:	90004626 	beq	r18,zero,25170 <__sfvwrite_r+0x194>
   25058:	900f883a 	mov	r7,r18
   2505c:	b480022e 	bgeu	r22,r18,25068 <__sfvwrite_r+0x8c>
   25060:	01e00034 	movhi	r7,32768
   25064:	39ff0004 	addi	r7,r7,-1024
   25068:	80800917 	ldw	r2,36(r16)
   2506c:	81400717 	ldw	r5,28(r16)
   25070:	103ee83a 	callr	r2
   25074:	00805a0e 	bge	zero,r2,251e0 <__sfvwrite_r+0x204>
   25078:	a0c00217 	ldw	r3,8(r20)
   2507c:	98a7883a 	add	r19,r19,r2
   25080:	90a5c83a 	sub	r18,r18,r2
   25084:	1885c83a 	sub	r2,r3,r2
   25088:	a0800215 	stw	r2,8(r20)
   2508c:	103fef1e 	bne	r2,zero,2504c <__alt_data_end+0xfffe504c>
   25090:	0005883a 	mov	r2,zero
   25094:	dfc00b17 	ldw	ra,44(sp)
   25098:	df000a17 	ldw	fp,40(sp)
   2509c:	ddc00917 	ldw	r23,36(sp)
   250a0:	dd800817 	ldw	r22,32(sp)
   250a4:	dd400717 	ldw	r21,28(sp)
   250a8:	dd000617 	ldw	r20,24(sp)
   250ac:	dcc00517 	ldw	r19,20(sp)
   250b0:	dc800417 	ldw	r18,16(sp)
   250b4:	dc400317 	ldw	r17,12(sp)
   250b8:	dc000217 	ldw	r16,8(sp)
   250bc:	dec00c04 	addi	sp,sp,48
   250c0:	f800283a 	ret
   250c4:	800b883a 	mov	r5,r16
   250c8:	a809883a 	mov	r4,r21
   250cc:	0022b4c0 	call	22b4c <__swsetup_r>
   250d0:	1000ee1e 	bne	r2,zero,2548c <__sfvwrite_r+0x4b0>
   250d4:	80c0030b 	ldhu	r3,12(r16)
   250d8:	a4400017 	ldw	r17,0(r20)
   250dc:	1880008c 	andi	r2,r3,2
   250e0:	103fd61e 	bne	r2,zero,2503c <__alt_data_end+0xfffe503c>
   250e4:	1880004c 	andi	r2,r3,1
   250e8:	1000421e 	bne	r2,zero,251f4 <__sfvwrite_r+0x218>
   250ec:	0039883a 	mov	fp,zero
   250f0:	0025883a 	mov	r18,zero
   250f4:	90001a26 	beq	r18,zero,25160 <__sfvwrite_r+0x184>
   250f8:	1880800c 	andi	r2,r3,512
   250fc:	84c00217 	ldw	r19,8(r16)
   25100:	10002126 	beq	r2,zero,25188 <__sfvwrite_r+0x1ac>
   25104:	982f883a 	mov	r23,r19
   25108:	94c09636 	bltu	r18,r19,25364 <__sfvwrite_r+0x388>
   2510c:	1881200c 	andi	r2,r3,1152
   25110:	1000a11e 	bne	r2,zero,25398 <__sfvwrite_r+0x3bc>
   25114:	81000017 	ldw	r4,0(r16)
   25118:	b80d883a 	mov	r6,r23
   2511c:	e00b883a 	mov	r5,fp
   25120:	00262fc0 	call	262fc <memmove>
   25124:	80c00217 	ldw	r3,8(r16)
   25128:	81000017 	ldw	r4,0(r16)
   2512c:	9005883a 	mov	r2,r18
   25130:	1ce7c83a 	sub	r19,r3,r19
   25134:	25cf883a 	add	r7,r4,r23
   25138:	84c00215 	stw	r19,8(r16)
   2513c:	81c00015 	stw	r7,0(r16)
   25140:	a0c00217 	ldw	r3,8(r20)
   25144:	e0b9883a 	add	fp,fp,r2
   25148:	90a5c83a 	sub	r18,r18,r2
   2514c:	18a7c83a 	sub	r19,r3,r2
   25150:	a4c00215 	stw	r19,8(r20)
   25154:	983fce26 	beq	r19,zero,25090 <__alt_data_end+0xfffe5090>
   25158:	80c0030b 	ldhu	r3,12(r16)
   2515c:	903fe61e 	bne	r18,zero,250f8 <__alt_data_end+0xfffe50f8>
   25160:	8f000017 	ldw	fp,0(r17)
   25164:	8c800117 	ldw	r18,4(r17)
   25168:	8c400204 	addi	r17,r17,8
   2516c:	003fe106 	br	250f4 <__alt_data_end+0xfffe50f4>
   25170:	8cc00017 	ldw	r19,0(r17)
   25174:	8c800117 	ldw	r18,4(r17)
   25178:	8c400204 	addi	r17,r17,8
   2517c:	003fb306 	br	2504c <__alt_data_end+0xfffe504c>
   25180:	0005883a 	mov	r2,zero
   25184:	f800283a 	ret
   25188:	81000017 	ldw	r4,0(r16)
   2518c:	80800417 	ldw	r2,16(r16)
   25190:	11005a36 	bltu	r2,r4,252fc <__sfvwrite_r+0x320>
   25194:	85c00517 	ldw	r23,20(r16)
   25198:	95c05836 	bltu	r18,r23,252fc <__sfvwrite_r+0x320>
   2519c:	00a00034 	movhi	r2,32768
   251a0:	10bfffc4 	addi	r2,r2,-1
   251a4:	9009883a 	mov	r4,r18
   251a8:	1480012e 	bgeu	r2,r18,251b0 <__sfvwrite_r+0x1d4>
   251ac:	1009883a 	mov	r4,r2
   251b0:	b80b883a 	mov	r5,r23
   251b4:	002abe80 	call	2abe8 <__divsi3>
   251b8:	b80b883a 	mov	r5,r23
   251bc:	1009883a 	mov	r4,r2
   251c0:	002ad9c0 	call	2ad9c <__mulsi3>
   251c4:	81400717 	ldw	r5,28(r16)
   251c8:	80c00917 	ldw	r3,36(r16)
   251cc:	100f883a 	mov	r7,r2
   251d0:	e00d883a 	mov	r6,fp
   251d4:	a809883a 	mov	r4,r21
   251d8:	183ee83a 	callr	r3
   251dc:	00bfd816 	blt	zero,r2,25140 <__alt_data_end+0xfffe5140>
   251e0:	8080030b 	ldhu	r2,12(r16)
   251e4:	10801014 	ori	r2,r2,64
   251e8:	8080030d 	sth	r2,12(r16)
   251ec:	00bfffc4 	movi	r2,-1
   251f0:	003fa806 	br	25094 <__alt_data_end+0xfffe5094>
   251f4:	0027883a 	mov	r19,zero
   251f8:	0011883a 	mov	r8,zero
   251fc:	0039883a 	mov	fp,zero
   25200:	0025883a 	mov	r18,zero
   25204:	90001f26 	beq	r18,zero,25284 <__sfvwrite_r+0x2a8>
   25208:	40005a26 	beq	r8,zero,25374 <__sfvwrite_r+0x398>
   2520c:	982d883a 	mov	r22,r19
   25210:	94c0012e 	bgeu	r18,r19,25218 <__sfvwrite_r+0x23c>
   25214:	902d883a 	mov	r22,r18
   25218:	81000017 	ldw	r4,0(r16)
   2521c:	80800417 	ldw	r2,16(r16)
   25220:	b02f883a 	mov	r23,r22
   25224:	81c00517 	ldw	r7,20(r16)
   25228:	1100032e 	bgeu	r2,r4,25238 <__sfvwrite_r+0x25c>
   2522c:	80c00217 	ldw	r3,8(r16)
   25230:	38c7883a 	add	r3,r7,r3
   25234:	1d801816 	blt	r3,r22,25298 <__sfvwrite_r+0x2bc>
   25238:	b1c03e16 	blt	r22,r7,25334 <__sfvwrite_r+0x358>
   2523c:	80800917 	ldw	r2,36(r16)
   25240:	81400717 	ldw	r5,28(r16)
   25244:	e00d883a 	mov	r6,fp
   25248:	da000115 	stw	r8,4(sp)
   2524c:	a809883a 	mov	r4,r21
   25250:	103ee83a 	callr	r2
   25254:	102f883a 	mov	r23,r2
   25258:	da000117 	ldw	r8,4(sp)
   2525c:	00bfe00e 	bge	zero,r2,251e0 <__alt_data_end+0xfffe51e0>
   25260:	9de7c83a 	sub	r19,r19,r23
   25264:	98001f26 	beq	r19,zero,252e4 <__sfvwrite_r+0x308>
   25268:	a0800217 	ldw	r2,8(r20)
   2526c:	e5f9883a 	add	fp,fp,r23
   25270:	95e5c83a 	sub	r18,r18,r23
   25274:	15efc83a 	sub	r23,r2,r23
   25278:	a5c00215 	stw	r23,8(r20)
   2527c:	b83f8426 	beq	r23,zero,25090 <__alt_data_end+0xfffe5090>
   25280:	903fe11e 	bne	r18,zero,25208 <__alt_data_end+0xfffe5208>
   25284:	8f000017 	ldw	fp,0(r17)
   25288:	8c800117 	ldw	r18,4(r17)
   2528c:	0011883a 	mov	r8,zero
   25290:	8c400204 	addi	r17,r17,8
   25294:	003fdb06 	br	25204 <__alt_data_end+0xfffe5204>
   25298:	180d883a 	mov	r6,r3
   2529c:	e00b883a 	mov	r5,fp
   252a0:	da000115 	stw	r8,4(sp)
   252a4:	d8c00015 	stw	r3,0(sp)
   252a8:	00262fc0 	call	262fc <memmove>
   252ac:	d8c00017 	ldw	r3,0(sp)
   252b0:	80800017 	ldw	r2,0(r16)
   252b4:	800b883a 	mov	r5,r16
   252b8:	a809883a 	mov	r4,r21
   252bc:	10c5883a 	add	r2,r2,r3
   252c0:	80800015 	stw	r2,0(r16)
   252c4:	d8c00015 	stw	r3,0(sp)
   252c8:	002476c0 	call	2476c <_fflush_r>
   252cc:	d8c00017 	ldw	r3,0(sp)
   252d0:	da000117 	ldw	r8,4(sp)
   252d4:	103fc21e 	bne	r2,zero,251e0 <__alt_data_end+0xfffe51e0>
   252d8:	182f883a 	mov	r23,r3
   252dc:	9de7c83a 	sub	r19,r19,r23
   252e0:	983fe11e 	bne	r19,zero,25268 <__alt_data_end+0xfffe5268>
   252e4:	800b883a 	mov	r5,r16
   252e8:	a809883a 	mov	r4,r21
   252ec:	002476c0 	call	2476c <_fflush_r>
   252f0:	103fbb1e 	bne	r2,zero,251e0 <__alt_data_end+0xfffe51e0>
   252f4:	0011883a 	mov	r8,zero
   252f8:	003fdb06 	br	25268 <__alt_data_end+0xfffe5268>
   252fc:	94c0012e 	bgeu	r18,r19,25304 <__sfvwrite_r+0x328>
   25300:	9027883a 	mov	r19,r18
   25304:	980d883a 	mov	r6,r19
   25308:	e00b883a 	mov	r5,fp
   2530c:	00262fc0 	call	262fc <memmove>
   25310:	80800217 	ldw	r2,8(r16)
   25314:	80c00017 	ldw	r3,0(r16)
   25318:	14c5c83a 	sub	r2,r2,r19
   2531c:	1cc7883a 	add	r3,r3,r19
   25320:	80800215 	stw	r2,8(r16)
   25324:	80c00015 	stw	r3,0(r16)
   25328:	10004326 	beq	r2,zero,25438 <__sfvwrite_r+0x45c>
   2532c:	9805883a 	mov	r2,r19
   25330:	003f8306 	br	25140 <__alt_data_end+0xfffe5140>
   25334:	b00d883a 	mov	r6,r22
   25338:	e00b883a 	mov	r5,fp
   2533c:	da000115 	stw	r8,4(sp)
   25340:	00262fc0 	call	262fc <memmove>
   25344:	80800217 	ldw	r2,8(r16)
   25348:	80c00017 	ldw	r3,0(r16)
   2534c:	da000117 	ldw	r8,4(sp)
   25350:	1585c83a 	sub	r2,r2,r22
   25354:	1dad883a 	add	r22,r3,r22
   25358:	80800215 	stw	r2,8(r16)
   2535c:	85800015 	stw	r22,0(r16)
   25360:	003fbf06 	br	25260 <__alt_data_end+0xfffe5260>
   25364:	81000017 	ldw	r4,0(r16)
   25368:	9027883a 	mov	r19,r18
   2536c:	902f883a 	mov	r23,r18
   25370:	003f6906 	br	25118 <__alt_data_end+0xfffe5118>
   25374:	900d883a 	mov	r6,r18
   25378:	01400284 	movi	r5,10
   2537c:	e009883a 	mov	r4,fp
   25380:	00260d00 	call	260d0 <memchr>
   25384:	10003e26 	beq	r2,zero,25480 <__sfvwrite_r+0x4a4>
   25388:	10800044 	addi	r2,r2,1
   2538c:	1727c83a 	sub	r19,r2,fp
   25390:	02000044 	movi	r8,1
   25394:	003f9d06 	br	2520c <__alt_data_end+0xfffe520c>
   25398:	80800517 	ldw	r2,20(r16)
   2539c:	81400417 	ldw	r5,16(r16)
   253a0:	81c00017 	ldw	r7,0(r16)
   253a4:	10a7883a 	add	r19,r2,r2
   253a8:	9885883a 	add	r2,r19,r2
   253ac:	1026d7fa 	srli	r19,r2,31
   253b0:	396dc83a 	sub	r22,r7,r5
   253b4:	b1000044 	addi	r4,r22,1
   253b8:	9885883a 	add	r2,r19,r2
   253bc:	1027d07a 	srai	r19,r2,1
   253c0:	2485883a 	add	r2,r4,r18
   253c4:	980d883a 	mov	r6,r19
   253c8:	9880022e 	bgeu	r19,r2,253d4 <__sfvwrite_r+0x3f8>
   253cc:	1027883a 	mov	r19,r2
   253d0:	100d883a 	mov	r6,r2
   253d4:	18c1000c 	andi	r3,r3,1024
   253d8:	18001c26 	beq	r3,zero,2544c <__sfvwrite_r+0x470>
   253dc:	300b883a 	mov	r5,r6
   253e0:	a809883a 	mov	r4,r21
   253e4:	00258c40 	call	258c4 <_malloc_r>
   253e8:	102f883a 	mov	r23,r2
   253ec:	10002926 	beq	r2,zero,25494 <__sfvwrite_r+0x4b8>
   253f0:	81400417 	ldw	r5,16(r16)
   253f4:	b00d883a 	mov	r6,r22
   253f8:	1009883a 	mov	r4,r2
   253fc:	00261b40 	call	261b4 <memcpy>
   25400:	8080030b 	ldhu	r2,12(r16)
   25404:	00fedfc4 	movi	r3,-1153
   25408:	10c4703a 	and	r2,r2,r3
   2540c:	10802014 	ori	r2,r2,128
   25410:	8080030d 	sth	r2,12(r16)
   25414:	bd89883a 	add	r4,r23,r22
   25418:	9d8fc83a 	sub	r7,r19,r22
   2541c:	85c00415 	stw	r23,16(r16)
   25420:	84c00515 	stw	r19,20(r16)
   25424:	81000015 	stw	r4,0(r16)
   25428:	9027883a 	mov	r19,r18
   2542c:	81c00215 	stw	r7,8(r16)
   25430:	902f883a 	mov	r23,r18
   25434:	003f3806 	br	25118 <__alt_data_end+0xfffe5118>
   25438:	800b883a 	mov	r5,r16
   2543c:	a809883a 	mov	r4,r21
   25440:	002476c0 	call	2476c <_fflush_r>
   25444:	103fb926 	beq	r2,zero,2532c <__alt_data_end+0xfffe532c>
   25448:	003f6506 	br	251e0 <__alt_data_end+0xfffe51e0>
   2544c:	a809883a 	mov	r4,r21
   25450:	00277a00 	call	277a0 <_realloc_r>
   25454:	102f883a 	mov	r23,r2
   25458:	103fee1e 	bne	r2,zero,25414 <__alt_data_end+0xfffe5414>
   2545c:	81400417 	ldw	r5,16(r16)
   25460:	a809883a 	mov	r4,r21
   25464:	0024ccc0 	call	24ccc <_free_r>
   25468:	8080030b 	ldhu	r2,12(r16)
   2546c:	00ffdfc4 	movi	r3,-129
   25470:	1884703a 	and	r2,r3,r2
   25474:	00c00304 	movi	r3,12
   25478:	a8c00015 	stw	r3,0(r21)
   2547c:	003f5906 	br	251e4 <__alt_data_end+0xfffe51e4>
   25480:	94c00044 	addi	r19,r18,1
   25484:	02000044 	movi	r8,1
   25488:	003f6006 	br	2520c <__alt_data_end+0xfffe520c>
   2548c:	00bfffc4 	movi	r2,-1
   25490:	003f0006 	br	25094 <__alt_data_end+0xfffe5094>
   25494:	00800304 	movi	r2,12
   25498:	a8800015 	stw	r2,0(r21)
   2549c:	8080030b 	ldhu	r2,12(r16)
   254a0:	003f5006 	br	251e4 <__alt_data_end+0xfffe51e4>

000254a4 <_fwalk>:
   254a4:	defff704 	addi	sp,sp,-36
   254a8:	dd000415 	stw	r20,16(sp)
   254ac:	dfc00815 	stw	ra,32(sp)
   254b0:	ddc00715 	stw	r23,28(sp)
   254b4:	dd800615 	stw	r22,24(sp)
   254b8:	dd400515 	stw	r21,20(sp)
   254bc:	dcc00315 	stw	r19,12(sp)
   254c0:	dc800215 	stw	r18,8(sp)
   254c4:	dc400115 	stw	r17,4(sp)
   254c8:	dc000015 	stw	r16,0(sp)
   254cc:	2500b804 	addi	r20,r4,736
   254d0:	a0002326 	beq	r20,zero,25560 <_fwalk+0xbc>
   254d4:	282b883a 	mov	r21,r5
   254d8:	002f883a 	mov	r23,zero
   254dc:	05800044 	movi	r22,1
   254e0:	04ffffc4 	movi	r19,-1
   254e4:	a4400117 	ldw	r17,4(r20)
   254e8:	a4800217 	ldw	r18,8(r20)
   254ec:	8c7fffc4 	addi	r17,r17,-1
   254f0:	88000d16 	blt	r17,zero,25528 <_fwalk+0x84>
   254f4:	94000304 	addi	r16,r18,12
   254f8:	94800384 	addi	r18,r18,14
   254fc:	8080000b 	ldhu	r2,0(r16)
   25500:	8c7fffc4 	addi	r17,r17,-1
   25504:	813ffd04 	addi	r4,r16,-12
   25508:	b080042e 	bgeu	r22,r2,2551c <_fwalk+0x78>
   2550c:	9080000f 	ldh	r2,0(r18)
   25510:	14c00226 	beq	r2,r19,2551c <_fwalk+0x78>
   25514:	a83ee83a 	callr	r21
   25518:	b8aeb03a 	or	r23,r23,r2
   2551c:	84001a04 	addi	r16,r16,104
   25520:	94801a04 	addi	r18,r18,104
   25524:	8cfff51e 	bne	r17,r19,254fc <__alt_data_end+0xfffe54fc>
   25528:	a5000017 	ldw	r20,0(r20)
   2552c:	a03fed1e 	bne	r20,zero,254e4 <__alt_data_end+0xfffe54e4>
   25530:	b805883a 	mov	r2,r23
   25534:	dfc00817 	ldw	ra,32(sp)
   25538:	ddc00717 	ldw	r23,28(sp)
   2553c:	dd800617 	ldw	r22,24(sp)
   25540:	dd400517 	ldw	r21,20(sp)
   25544:	dd000417 	ldw	r20,16(sp)
   25548:	dcc00317 	ldw	r19,12(sp)
   2554c:	dc800217 	ldw	r18,8(sp)
   25550:	dc400117 	ldw	r17,4(sp)
   25554:	dc000017 	ldw	r16,0(sp)
   25558:	dec00904 	addi	sp,sp,36
   2555c:	f800283a 	ret
   25560:	002f883a 	mov	r23,zero
   25564:	003ff206 	br	25530 <__alt_data_end+0xfffe5530>

00025568 <_fwalk_reent>:
   25568:	defff704 	addi	sp,sp,-36
   2556c:	dd000415 	stw	r20,16(sp)
   25570:	dfc00815 	stw	ra,32(sp)
   25574:	ddc00715 	stw	r23,28(sp)
   25578:	dd800615 	stw	r22,24(sp)
   2557c:	dd400515 	stw	r21,20(sp)
   25580:	dcc00315 	stw	r19,12(sp)
   25584:	dc800215 	stw	r18,8(sp)
   25588:	dc400115 	stw	r17,4(sp)
   2558c:	dc000015 	stw	r16,0(sp)
   25590:	2500b804 	addi	r20,r4,736
   25594:	a0002326 	beq	r20,zero,25624 <_fwalk_reent+0xbc>
   25598:	282b883a 	mov	r21,r5
   2559c:	2027883a 	mov	r19,r4
   255a0:	002f883a 	mov	r23,zero
   255a4:	05800044 	movi	r22,1
   255a8:	04bfffc4 	movi	r18,-1
   255ac:	a4400117 	ldw	r17,4(r20)
   255b0:	a4000217 	ldw	r16,8(r20)
   255b4:	8c7fffc4 	addi	r17,r17,-1
   255b8:	88000c16 	blt	r17,zero,255ec <_fwalk_reent+0x84>
   255bc:	84000304 	addi	r16,r16,12
   255c0:	8080000b 	ldhu	r2,0(r16)
   255c4:	8c7fffc4 	addi	r17,r17,-1
   255c8:	817ffd04 	addi	r5,r16,-12
   255cc:	b080052e 	bgeu	r22,r2,255e4 <_fwalk_reent+0x7c>
   255d0:	8080008f 	ldh	r2,2(r16)
   255d4:	9809883a 	mov	r4,r19
   255d8:	14800226 	beq	r2,r18,255e4 <_fwalk_reent+0x7c>
   255dc:	a83ee83a 	callr	r21
   255e0:	b8aeb03a 	or	r23,r23,r2
   255e4:	84001a04 	addi	r16,r16,104
   255e8:	8cbff51e 	bne	r17,r18,255c0 <__alt_data_end+0xfffe55c0>
   255ec:	a5000017 	ldw	r20,0(r20)
   255f0:	a03fee1e 	bne	r20,zero,255ac <__alt_data_end+0xfffe55ac>
   255f4:	b805883a 	mov	r2,r23
   255f8:	dfc00817 	ldw	ra,32(sp)
   255fc:	ddc00717 	ldw	r23,28(sp)
   25600:	dd800617 	ldw	r22,24(sp)
   25604:	dd400517 	ldw	r21,20(sp)
   25608:	dd000417 	ldw	r20,16(sp)
   2560c:	dcc00317 	ldw	r19,12(sp)
   25610:	dc800217 	ldw	r18,8(sp)
   25614:	dc400117 	ldw	r17,4(sp)
   25618:	dc000017 	ldw	r16,0(sp)
   2561c:	dec00904 	addi	sp,sp,36
   25620:	f800283a 	ret
   25624:	002f883a 	mov	r23,zero
   25628:	003ff206 	br	255f4 <__alt_data_end+0xfffe55f4>

0002562c <_setlocale_r>:
   2562c:	30001b26 	beq	r6,zero,2569c <_setlocale_r+0x70>
   25630:	014000f4 	movhi	r5,3
   25634:	defffe04 	addi	sp,sp,-8
   25638:	2949b904 	addi	r5,r5,9956
   2563c:	3009883a 	mov	r4,r6
   25640:	dc000015 	stw	r16,0(sp)
   25644:	dfc00115 	stw	ra,4(sp)
   25648:	3021883a 	mov	r16,r6
   2564c:	0027f080 	call	27f08 <strcmp>
   25650:	1000061e 	bne	r2,zero,2566c <_setlocale_r+0x40>
   25654:	008000f4 	movhi	r2,3
   25658:	1089b804 	addi	r2,r2,9952
   2565c:	dfc00117 	ldw	ra,4(sp)
   25660:	dc000017 	ldw	r16,0(sp)
   25664:	dec00204 	addi	sp,sp,8
   25668:	f800283a 	ret
   2566c:	014000f4 	movhi	r5,3
   25670:	2949b804 	addi	r5,r5,9952
   25674:	8009883a 	mov	r4,r16
   25678:	0027f080 	call	27f08 <strcmp>
   2567c:	103ff526 	beq	r2,zero,25654 <__alt_data_end+0xfffe5654>
   25680:	014000f4 	movhi	r5,3
   25684:	2949a304 	addi	r5,r5,9868
   25688:	8009883a 	mov	r4,r16
   2568c:	0027f080 	call	27f08 <strcmp>
   25690:	103ff026 	beq	r2,zero,25654 <__alt_data_end+0xfffe5654>
   25694:	0005883a 	mov	r2,zero
   25698:	003ff006 	br	2565c <__alt_data_end+0xfffe565c>
   2569c:	008000f4 	movhi	r2,3
   256a0:	1089b804 	addi	r2,r2,9952
   256a4:	f800283a 	ret

000256a8 <__locale_charset>:
   256a8:	008000f4 	movhi	r2,3
   256ac:	108b7504 	addi	r2,r2,11732
   256b0:	f800283a 	ret

000256b4 <__locale_mb_cur_max>:
   256b4:	008000f4 	movhi	r2,3
   256b8:	10915004 	addi	r2,r2,17728
   256bc:	10800017 	ldw	r2,0(r2)
   256c0:	f800283a 	ret

000256c4 <__locale_msgcharset>:
   256c4:	008000f4 	movhi	r2,3
   256c8:	108b6d04 	addi	r2,r2,11700
   256cc:	f800283a 	ret

000256d0 <__locale_cjk_lang>:
   256d0:	0005883a 	mov	r2,zero
   256d4:	f800283a 	ret

000256d8 <_localeconv_r>:
   256d8:	008000f4 	movhi	r2,3
   256dc:	108b7d04 	addi	r2,r2,11764
   256e0:	f800283a 	ret

000256e4 <setlocale>:
   256e4:	008000f4 	movhi	r2,3
   256e8:	10914f04 	addi	r2,r2,17724
   256ec:	280d883a 	mov	r6,r5
   256f0:	200b883a 	mov	r5,r4
   256f4:	11000017 	ldw	r4,0(r2)
   256f8:	002562c1 	jmpi	2562c <_setlocale_r>

000256fc <localeconv>:
   256fc:	008000f4 	movhi	r2,3
   25700:	108b7d04 	addi	r2,r2,11764
   25704:	f800283a 	ret

00025708 <__smakebuf_r>:
   25708:	2880030b 	ldhu	r2,12(r5)
   2570c:	10c0008c 	andi	r3,r2,2
   25710:	1800411e 	bne	r3,zero,25818 <__smakebuf_r+0x110>
   25714:	deffec04 	addi	sp,sp,-80
   25718:	dc000f15 	stw	r16,60(sp)
   2571c:	2821883a 	mov	r16,r5
   25720:	2940038f 	ldh	r5,14(r5)
   25724:	dc401015 	stw	r17,64(sp)
   25728:	dfc01315 	stw	ra,76(sp)
   2572c:	dcc01215 	stw	r19,72(sp)
   25730:	dc801115 	stw	r18,68(sp)
   25734:	2023883a 	mov	r17,r4
   25738:	28001c16 	blt	r5,zero,257ac <__smakebuf_r+0xa4>
   2573c:	d80d883a 	mov	r6,sp
   25740:	0029cd00 	call	29cd0 <_fstat_r>
   25744:	10001816 	blt	r2,zero,257a8 <__smakebuf_r+0xa0>
   25748:	d8800117 	ldw	r2,4(sp)
   2574c:	00e00014 	movui	r3,32768
   25750:	10bc000c 	andi	r2,r2,61440
   25754:	14c80020 	cmpeqi	r19,r2,8192
   25758:	10c03726 	beq	r2,r3,25838 <__smakebuf_r+0x130>
   2575c:	80c0030b 	ldhu	r3,12(r16)
   25760:	18c20014 	ori	r3,r3,2048
   25764:	80c0030d 	sth	r3,12(r16)
   25768:	00c80004 	movi	r3,8192
   2576c:	10c0521e 	bne	r2,r3,258b8 <__smakebuf_r+0x1b0>
   25770:	8140038f 	ldh	r5,14(r16)
   25774:	8809883a 	mov	r4,r17
   25778:	0029d2c0 	call	29d2c <_isatty_r>
   2577c:	10004c26 	beq	r2,zero,258b0 <__smakebuf_r+0x1a8>
   25780:	8080030b 	ldhu	r2,12(r16)
   25784:	80c010c4 	addi	r3,r16,67
   25788:	80c00015 	stw	r3,0(r16)
   2578c:	10800054 	ori	r2,r2,1
   25790:	8080030d 	sth	r2,12(r16)
   25794:	00800044 	movi	r2,1
   25798:	80c00415 	stw	r3,16(r16)
   2579c:	80800515 	stw	r2,20(r16)
   257a0:	04810004 	movi	r18,1024
   257a4:	00000706 	br	257c4 <__smakebuf_r+0xbc>
   257a8:	8080030b 	ldhu	r2,12(r16)
   257ac:	10c0200c 	andi	r3,r2,128
   257b0:	18001f1e 	bne	r3,zero,25830 <__smakebuf_r+0x128>
   257b4:	04810004 	movi	r18,1024
   257b8:	10820014 	ori	r2,r2,2048
   257bc:	8080030d 	sth	r2,12(r16)
   257c0:	0027883a 	mov	r19,zero
   257c4:	900b883a 	mov	r5,r18
   257c8:	8809883a 	mov	r4,r17
   257cc:	00258c40 	call	258c4 <_malloc_r>
   257d0:	10002c26 	beq	r2,zero,25884 <__smakebuf_r+0x17c>
   257d4:	80c0030b 	ldhu	r3,12(r16)
   257d8:	010000b4 	movhi	r4,2
   257dc:	21120004 	addi	r4,r4,18432
   257e0:	89000f15 	stw	r4,60(r17)
   257e4:	18c02014 	ori	r3,r3,128
   257e8:	80c0030d 	sth	r3,12(r16)
   257ec:	80800015 	stw	r2,0(r16)
   257f0:	80800415 	stw	r2,16(r16)
   257f4:	84800515 	stw	r18,20(r16)
   257f8:	98001a1e 	bne	r19,zero,25864 <__smakebuf_r+0x15c>
   257fc:	dfc01317 	ldw	ra,76(sp)
   25800:	dcc01217 	ldw	r19,72(sp)
   25804:	dc801117 	ldw	r18,68(sp)
   25808:	dc401017 	ldw	r17,64(sp)
   2580c:	dc000f17 	ldw	r16,60(sp)
   25810:	dec01404 	addi	sp,sp,80
   25814:	f800283a 	ret
   25818:	288010c4 	addi	r2,r5,67
   2581c:	28800015 	stw	r2,0(r5)
   25820:	28800415 	stw	r2,16(r5)
   25824:	00800044 	movi	r2,1
   25828:	28800515 	stw	r2,20(r5)
   2582c:	f800283a 	ret
   25830:	04801004 	movi	r18,64
   25834:	003fe006 	br	257b8 <__alt_data_end+0xfffe57b8>
   25838:	81000a17 	ldw	r4,40(r16)
   2583c:	00c000b4 	movhi	r3,2
   25840:	18dfa904 	addi	r3,r3,32420
   25844:	20ffc51e 	bne	r4,r3,2575c <__alt_data_end+0xfffe575c>
   25848:	8080030b 	ldhu	r2,12(r16)
   2584c:	04810004 	movi	r18,1024
   25850:	84801315 	stw	r18,76(r16)
   25854:	1484b03a 	or	r2,r2,r18
   25858:	8080030d 	sth	r2,12(r16)
   2585c:	0027883a 	mov	r19,zero
   25860:	003fd806 	br	257c4 <__alt_data_end+0xfffe57c4>
   25864:	8140038f 	ldh	r5,14(r16)
   25868:	8809883a 	mov	r4,r17
   2586c:	0029d2c0 	call	29d2c <_isatty_r>
   25870:	103fe226 	beq	r2,zero,257fc <__alt_data_end+0xfffe57fc>
   25874:	8080030b 	ldhu	r2,12(r16)
   25878:	10800054 	ori	r2,r2,1
   2587c:	8080030d 	sth	r2,12(r16)
   25880:	003fde06 	br	257fc <__alt_data_end+0xfffe57fc>
   25884:	8080030b 	ldhu	r2,12(r16)
   25888:	10c0800c 	andi	r3,r2,512
   2588c:	183fdb1e 	bne	r3,zero,257fc <__alt_data_end+0xfffe57fc>
   25890:	10800094 	ori	r2,r2,2
   25894:	80c010c4 	addi	r3,r16,67
   25898:	8080030d 	sth	r2,12(r16)
   2589c:	00800044 	movi	r2,1
   258a0:	80c00015 	stw	r3,0(r16)
   258a4:	80c00415 	stw	r3,16(r16)
   258a8:	80800515 	stw	r2,20(r16)
   258ac:	003fd306 	br	257fc <__alt_data_end+0xfffe57fc>
   258b0:	04810004 	movi	r18,1024
   258b4:	003fc306 	br	257c4 <__alt_data_end+0xfffe57c4>
   258b8:	0027883a 	mov	r19,zero
   258bc:	04810004 	movi	r18,1024
   258c0:	003fc006 	br	257c4 <__alt_data_end+0xfffe57c4>

000258c4 <_malloc_r>:
   258c4:	defff504 	addi	sp,sp,-44
   258c8:	dc800315 	stw	r18,12(sp)
   258cc:	dfc00a15 	stw	ra,40(sp)
   258d0:	df000915 	stw	fp,36(sp)
   258d4:	ddc00815 	stw	r23,32(sp)
   258d8:	dd800715 	stw	r22,28(sp)
   258dc:	dd400615 	stw	r21,24(sp)
   258e0:	dd000515 	stw	r20,20(sp)
   258e4:	dcc00415 	stw	r19,16(sp)
   258e8:	dc400215 	stw	r17,8(sp)
   258ec:	dc000115 	stw	r16,4(sp)
   258f0:	288002c4 	addi	r2,r5,11
   258f4:	00c00584 	movi	r3,22
   258f8:	2025883a 	mov	r18,r4
   258fc:	18807f2e 	bgeu	r3,r2,25afc <_malloc_r+0x238>
   25900:	047ffe04 	movi	r17,-8
   25904:	1462703a 	and	r17,r2,r17
   25908:	8800a316 	blt	r17,zero,25b98 <_malloc_r+0x2d4>
   2590c:	8940a236 	bltu	r17,r5,25b98 <_malloc_r+0x2d4>
   25910:	002dc040 	call	2dc04 <__malloc_lock>
   25914:	00807dc4 	movi	r2,503
   25918:	1441e92e 	bgeu	r2,r17,260c0 <_malloc_r+0x7fc>
   2591c:	8804d27a 	srli	r2,r17,9
   25920:	1000a126 	beq	r2,zero,25ba8 <_malloc_r+0x2e4>
   25924:	00c00104 	movi	r3,4
   25928:	18811e36 	bltu	r3,r2,25da4 <_malloc_r+0x4e0>
   2592c:	8804d1ba 	srli	r2,r17,6
   25930:	12000e44 	addi	r8,r2,57
   25934:	11c00e04 	addi	r7,r2,56
   25938:	4209883a 	add	r4,r8,r8
   2593c:	04c000f4 	movhi	r19,3
   25940:	2109883a 	add	r4,r4,r4
   25944:	9ccb8b04 	addi	r19,r19,11820
   25948:	2109883a 	add	r4,r4,r4
   2594c:	9909883a 	add	r4,r19,r4
   25950:	24000117 	ldw	r16,4(r4)
   25954:	213ffe04 	addi	r4,r4,-8
   25958:	24009726 	beq	r4,r16,25bb8 <_malloc_r+0x2f4>
   2595c:	80800117 	ldw	r2,4(r16)
   25960:	01bfff04 	movi	r6,-4
   25964:	014003c4 	movi	r5,15
   25968:	1184703a 	and	r2,r2,r6
   2596c:	1447c83a 	sub	r3,r2,r17
   25970:	28c00716 	blt	r5,r3,25990 <_malloc_r+0xcc>
   25974:	1800920e 	bge	r3,zero,25bc0 <_malloc_r+0x2fc>
   25978:	84000317 	ldw	r16,12(r16)
   2597c:	24008e26 	beq	r4,r16,25bb8 <_malloc_r+0x2f4>
   25980:	80800117 	ldw	r2,4(r16)
   25984:	1184703a 	and	r2,r2,r6
   25988:	1447c83a 	sub	r3,r2,r17
   2598c:	28fff90e 	bge	r5,r3,25974 <__alt_data_end+0xfffe5974>
   25990:	3809883a 	mov	r4,r7
   25994:	018000f4 	movhi	r6,3
   25998:	9c000417 	ldw	r16,16(r19)
   2599c:	318b8b04 	addi	r6,r6,11820
   259a0:	32000204 	addi	r8,r6,8
   259a4:	82013426 	beq	r16,r8,25e78 <_malloc_r+0x5b4>
   259a8:	80c00117 	ldw	r3,4(r16)
   259ac:	00bfff04 	movi	r2,-4
   259b0:	188e703a 	and	r7,r3,r2
   259b4:	3c45c83a 	sub	r2,r7,r17
   259b8:	00c003c4 	movi	r3,15
   259bc:	18811f16 	blt	r3,r2,25e3c <_malloc_r+0x578>
   259c0:	32000515 	stw	r8,20(r6)
   259c4:	32000415 	stw	r8,16(r6)
   259c8:	10007f0e 	bge	r2,zero,25bc8 <_malloc_r+0x304>
   259cc:	00807fc4 	movi	r2,511
   259d0:	11c0fd36 	bltu	r2,r7,25dc8 <_malloc_r+0x504>
   259d4:	3806d0fa 	srli	r3,r7,3
   259d8:	01c00044 	movi	r7,1
   259dc:	30800117 	ldw	r2,4(r6)
   259e0:	19400044 	addi	r5,r3,1
   259e4:	294b883a 	add	r5,r5,r5
   259e8:	1807d0ba 	srai	r3,r3,2
   259ec:	294b883a 	add	r5,r5,r5
   259f0:	294b883a 	add	r5,r5,r5
   259f4:	298b883a 	add	r5,r5,r6
   259f8:	38c6983a 	sll	r3,r7,r3
   259fc:	29c00017 	ldw	r7,0(r5)
   25a00:	2a7ffe04 	addi	r9,r5,-8
   25a04:	1886b03a 	or	r3,r3,r2
   25a08:	82400315 	stw	r9,12(r16)
   25a0c:	81c00215 	stw	r7,8(r16)
   25a10:	30c00115 	stw	r3,4(r6)
   25a14:	2c000015 	stw	r16,0(r5)
   25a18:	3c000315 	stw	r16,12(r7)
   25a1c:	2005d0ba 	srai	r2,r4,2
   25a20:	01400044 	movi	r5,1
   25a24:	288a983a 	sll	r5,r5,r2
   25a28:	19406f36 	bltu	r3,r5,25be8 <_malloc_r+0x324>
   25a2c:	28c4703a 	and	r2,r5,r3
   25a30:	10000a1e 	bne	r2,zero,25a5c <_malloc_r+0x198>
   25a34:	00bfff04 	movi	r2,-4
   25a38:	294b883a 	add	r5,r5,r5
   25a3c:	2088703a 	and	r4,r4,r2
   25a40:	28c4703a 	and	r2,r5,r3
   25a44:	21000104 	addi	r4,r4,4
   25a48:	1000041e 	bne	r2,zero,25a5c <_malloc_r+0x198>
   25a4c:	294b883a 	add	r5,r5,r5
   25a50:	28c4703a 	and	r2,r5,r3
   25a54:	21000104 	addi	r4,r4,4
   25a58:	103ffc26 	beq	r2,zero,25a4c <__alt_data_end+0xfffe5a4c>
   25a5c:	02bfff04 	movi	r10,-4
   25a60:	024003c4 	movi	r9,15
   25a64:	21800044 	addi	r6,r4,1
   25a68:	318d883a 	add	r6,r6,r6
   25a6c:	318d883a 	add	r6,r6,r6
   25a70:	318d883a 	add	r6,r6,r6
   25a74:	998d883a 	add	r6,r19,r6
   25a78:	333ffe04 	addi	r12,r6,-8
   25a7c:	2017883a 	mov	r11,r4
   25a80:	31800104 	addi	r6,r6,4
   25a84:	34000017 	ldw	r16,0(r6)
   25a88:	31fffd04 	addi	r7,r6,-12
   25a8c:	81c0041e 	bne	r16,r7,25aa0 <_malloc_r+0x1dc>
   25a90:	0000fb06 	br	25e80 <_malloc_r+0x5bc>
   25a94:	1801030e 	bge	r3,zero,25ea4 <_malloc_r+0x5e0>
   25a98:	84000317 	ldw	r16,12(r16)
   25a9c:	81c0f826 	beq	r16,r7,25e80 <_malloc_r+0x5bc>
   25aa0:	80800117 	ldw	r2,4(r16)
   25aa4:	1284703a 	and	r2,r2,r10
   25aa8:	1447c83a 	sub	r3,r2,r17
   25aac:	48fff90e 	bge	r9,r3,25a94 <__alt_data_end+0xfffe5a94>
   25ab0:	80800317 	ldw	r2,12(r16)
   25ab4:	81000217 	ldw	r4,8(r16)
   25ab8:	89400054 	ori	r5,r17,1
   25abc:	81400115 	stw	r5,4(r16)
   25ac0:	20800315 	stw	r2,12(r4)
   25ac4:	11000215 	stw	r4,8(r2)
   25ac8:	8463883a 	add	r17,r16,r17
   25acc:	9c400515 	stw	r17,20(r19)
   25ad0:	9c400415 	stw	r17,16(r19)
   25ad4:	18800054 	ori	r2,r3,1
   25ad8:	88800115 	stw	r2,4(r17)
   25adc:	8a000315 	stw	r8,12(r17)
   25ae0:	8a000215 	stw	r8,8(r17)
   25ae4:	88e3883a 	add	r17,r17,r3
   25ae8:	88c00015 	stw	r3,0(r17)
   25aec:	9009883a 	mov	r4,r18
   25af0:	002dc280 	call	2dc28 <__malloc_unlock>
   25af4:	80800204 	addi	r2,r16,8
   25af8:	00001b06 	br	25b68 <_malloc_r+0x2a4>
   25afc:	04400404 	movi	r17,16
   25b00:	89402536 	bltu	r17,r5,25b98 <_malloc_r+0x2d4>
   25b04:	002dc040 	call	2dc04 <__malloc_lock>
   25b08:	00800184 	movi	r2,6
   25b0c:	01000084 	movi	r4,2
   25b10:	04c000f4 	movhi	r19,3
   25b14:	1085883a 	add	r2,r2,r2
   25b18:	9ccb8b04 	addi	r19,r19,11820
   25b1c:	1085883a 	add	r2,r2,r2
   25b20:	9885883a 	add	r2,r19,r2
   25b24:	14000117 	ldw	r16,4(r2)
   25b28:	10fffe04 	addi	r3,r2,-8
   25b2c:	80c0d926 	beq	r16,r3,25e94 <_malloc_r+0x5d0>
   25b30:	80c00117 	ldw	r3,4(r16)
   25b34:	81000317 	ldw	r4,12(r16)
   25b38:	00bfff04 	movi	r2,-4
   25b3c:	1884703a 	and	r2,r3,r2
   25b40:	81400217 	ldw	r5,8(r16)
   25b44:	8085883a 	add	r2,r16,r2
   25b48:	10c00117 	ldw	r3,4(r2)
   25b4c:	29000315 	stw	r4,12(r5)
   25b50:	21400215 	stw	r5,8(r4)
   25b54:	18c00054 	ori	r3,r3,1
   25b58:	10c00115 	stw	r3,4(r2)
   25b5c:	9009883a 	mov	r4,r18
   25b60:	002dc280 	call	2dc28 <__malloc_unlock>
   25b64:	80800204 	addi	r2,r16,8
   25b68:	dfc00a17 	ldw	ra,40(sp)
   25b6c:	df000917 	ldw	fp,36(sp)
   25b70:	ddc00817 	ldw	r23,32(sp)
   25b74:	dd800717 	ldw	r22,28(sp)
   25b78:	dd400617 	ldw	r21,24(sp)
   25b7c:	dd000517 	ldw	r20,20(sp)
   25b80:	dcc00417 	ldw	r19,16(sp)
   25b84:	dc800317 	ldw	r18,12(sp)
   25b88:	dc400217 	ldw	r17,8(sp)
   25b8c:	dc000117 	ldw	r16,4(sp)
   25b90:	dec00b04 	addi	sp,sp,44
   25b94:	f800283a 	ret
   25b98:	00800304 	movi	r2,12
   25b9c:	90800015 	stw	r2,0(r18)
   25ba0:	0005883a 	mov	r2,zero
   25ba4:	003ff006 	br	25b68 <__alt_data_end+0xfffe5b68>
   25ba8:	01002004 	movi	r4,128
   25bac:	02001004 	movi	r8,64
   25bb0:	01c00fc4 	movi	r7,63
   25bb4:	003f6106 	br	2593c <__alt_data_end+0xfffe593c>
   25bb8:	4009883a 	mov	r4,r8
   25bbc:	003f7506 	br	25994 <__alt_data_end+0xfffe5994>
   25bc0:	81000317 	ldw	r4,12(r16)
   25bc4:	003fde06 	br	25b40 <__alt_data_end+0xfffe5b40>
   25bc8:	81c5883a 	add	r2,r16,r7
   25bcc:	11400117 	ldw	r5,4(r2)
   25bd0:	9009883a 	mov	r4,r18
   25bd4:	29400054 	ori	r5,r5,1
   25bd8:	11400115 	stw	r5,4(r2)
   25bdc:	002dc280 	call	2dc28 <__malloc_unlock>
   25be0:	80800204 	addi	r2,r16,8
   25be4:	003fe006 	br	25b68 <__alt_data_end+0xfffe5b68>
   25be8:	9c000217 	ldw	r16,8(r19)
   25bec:	00bfff04 	movi	r2,-4
   25bf0:	85800117 	ldw	r22,4(r16)
   25bf4:	b0ac703a 	and	r22,r22,r2
   25bf8:	b4400336 	bltu	r22,r17,25c08 <_malloc_r+0x344>
   25bfc:	b445c83a 	sub	r2,r22,r17
   25c00:	00c003c4 	movi	r3,15
   25c04:	18805d16 	blt	r3,r2,25d7c <_malloc_r+0x4b8>
   25c08:	05c000f4 	movhi	r23,3
   25c0c:	008000f4 	movhi	r2,3
   25c10:	10986204 	addi	r2,r2,24968
   25c14:	bdd15104 	addi	r23,r23,17732
   25c18:	15400017 	ldw	r21,0(r2)
   25c1c:	b8c00017 	ldw	r3,0(r23)
   25c20:	00bfffc4 	movi	r2,-1
   25c24:	858d883a 	add	r6,r16,r22
   25c28:	8d6b883a 	add	r21,r17,r21
   25c2c:	1880ea26 	beq	r3,r2,25fd8 <_malloc_r+0x714>
   25c30:	ad4403c4 	addi	r21,r21,4111
   25c34:	00bc0004 	movi	r2,-4096
   25c38:	a8aa703a 	and	r21,r21,r2
   25c3c:	a80b883a 	mov	r5,r21
   25c40:	9009883a 	mov	r4,r18
   25c44:	d9800015 	stw	r6,0(sp)
   25c48:	0027d780 	call	27d78 <_sbrk_r>
   25c4c:	1029883a 	mov	r20,r2
   25c50:	00bfffc4 	movi	r2,-1
   25c54:	d9800017 	ldw	r6,0(sp)
   25c58:	a080e826 	beq	r20,r2,25ffc <_malloc_r+0x738>
   25c5c:	a180a636 	bltu	r20,r6,25ef8 <_malloc_r+0x634>
   25c60:	070000f4 	movhi	fp,3
   25c64:	e7186b04 	addi	fp,fp,25004
   25c68:	e0800017 	ldw	r2,0(fp)
   25c6c:	a887883a 	add	r3,r21,r2
   25c70:	e0c00015 	stw	r3,0(fp)
   25c74:	3500e626 	beq	r6,r20,26010 <_malloc_r+0x74c>
   25c78:	b9000017 	ldw	r4,0(r23)
   25c7c:	00bfffc4 	movi	r2,-1
   25c80:	2080ee26 	beq	r4,r2,2603c <_malloc_r+0x778>
   25c84:	a185c83a 	sub	r2,r20,r6
   25c88:	10c5883a 	add	r2,r2,r3
   25c8c:	e0800015 	stw	r2,0(fp)
   25c90:	a0c001cc 	andi	r3,r20,7
   25c94:	1800bc26 	beq	r3,zero,25f88 <_malloc_r+0x6c4>
   25c98:	a0e9c83a 	sub	r20,r20,r3
   25c9c:	00840204 	movi	r2,4104
   25ca0:	a5000204 	addi	r20,r20,8
   25ca4:	10c7c83a 	sub	r3,r2,r3
   25ca8:	a545883a 	add	r2,r20,r21
   25cac:	1083ffcc 	andi	r2,r2,4095
   25cb0:	18abc83a 	sub	r21,r3,r2
   25cb4:	a80b883a 	mov	r5,r21
   25cb8:	9009883a 	mov	r4,r18
   25cbc:	0027d780 	call	27d78 <_sbrk_r>
   25cc0:	00ffffc4 	movi	r3,-1
   25cc4:	10c0e126 	beq	r2,r3,2604c <_malloc_r+0x788>
   25cc8:	1505c83a 	sub	r2,r2,r20
   25ccc:	1545883a 	add	r2,r2,r21
   25cd0:	10800054 	ori	r2,r2,1
   25cd4:	e0c00017 	ldw	r3,0(fp)
   25cd8:	9d000215 	stw	r20,8(r19)
   25cdc:	a0800115 	stw	r2,4(r20)
   25ce0:	a8c7883a 	add	r3,r21,r3
   25ce4:	e0c00015 	stw	r3,0(fp)
   25ce8:	84c00e26 	beq	r16,r19,25d24 <_malloc_r+0x460>
   25cec:	018003c4 	movi	r6,15
   25cf0:	3580a72e 	bgeu	r6,r22,25f90 <_malloc_r+0x6cc>
   25cf4:	81400117 	ldw	r5,4(r16)
   25cf8:	013ffe04 	movi	r4,-8
   25cfc:	b0bffd04 	addi	r2,r22,-12
   25d00:	1104703a 	and	r2,r2,r4
   25d04:	2900004c 	andi	r4,r5,1
   25d08:	2088b03a 	or	r4,r4,r2
   25d0c:	81000115 	stw	r4,4(r16)
   25d10:	01400144 	movi	r5,5
   25d14:	8089883a 	add	r4,r16,r2
   25d18:	21400115 	stw	r5,4(r4)
   25d1c:	21400215 	stw	r5,8(r4)
   25d20:	3080cd36 	bltu	r6,r2,26058 <_malloc_r+0x794>
   25d24:	008000f4 	movhi	r2,3
   25d28:	10986104 	addi	r2,r2,24964
   25d2c:	11000017 	ldw	r4,0(r2)
   25d30:	20c0012e 	bgeu	r4,r3,25d38 <_malloc_r+0x474>
   25d34:	10c00015 	stw	r3,0(r2)
   25d38:	008000f4 	movhi	r2,3
   25d3c:	10986004 	addi	r2,r2,24960
   25d40:	11000017 	ldw	r4,0(r2)
   25d44:	9c000217 	ldw	r16,8(r19)
   25d48:	20c0012e 	bgeu	r4,r3,25d50 <_malloc_r+0x48c>
   25d4c:	10c00015 	stw	r3,0(r2)
   25d50:	80c00117 	ldw	r3,4(r16)
   25d54:	00bfff04 	movi	r2,-4
   25d58:	1886703a 	and	r3,r3,r2
   25d5c:	1c45c83a 	sub	r2,r3,r17
   25d60:	1c400236 	bltu	r3,r17,25d6c <_malloc_r+0x4a8>
   25d64:	00c003c4 	movi	r3,15
   25d68:	18800416 	blt	r3,r2,25d7c <_malloc_r+0x4b8>
   25d6c:	9009883a 	mov	r4,r18
   25d70:	002dc280 	call	2dc28 <__malloc_unlock>
   25d74:	0005883a 	mov	r2,zero
   25d78:	003f7b06 	br	25b68 <__alt_data_end+0xfffe5b68>
   25d7c:	88c00054 	ori	r3,r17,1
   25d80:	80c00115 	stw	r3,4(r16)
   25d84:	8463883a 	add	r17,r16,r17
   25d88:	10800054 	ori	r2,r2,1
   25d8c:	9c400215 	stw	r17,8(r19)
   25d90:	88800115 	stw	r2,4(r17)
   25d94:	9009883a 	mov	r4,r18
   25d98:	002dc280 	call	2dc28 <__malloc_unlock>
   25d9c:	80800204 	addi	r2,r16,8
   25da0:	003f7106 	br	25b68 <__alt_data_end+0xfffe5b68>
   25da4:	00c00504 	movi	r3,20
   25da8:	18804a2e 	bgeu	r3,r2,25ed4 <_malloc_r+0x610>
   25dac:	00c01504 	movi	r3,84
   25db0:	18806e36 	bltu	r3,r2,25f6c <_malloc_r+0x6a8>
   25db4:	8804d33a 	srli	r2,r17,12
   25db8:	12001bc4 	addi	r8,r2,111
   25dbc:	11c01b84 	addi	r7,r2,110
   25dc0:	4209883a 	add	r4,r8,r8
   25dc4:	003edd06 	br	2593c <__alt_data_end+0xfffe593c>
   25dc8:	3804d27a 	srli	r2,r7,9
   25dcc:	00c00104 	movi	r3,4
   25dd0:	1880442e 	bgeu	r3,r2,25ee4 <_malloc_r+0x620>
   25dd4:	00c00504 	movi	r3,20
   25dd8:	18808136 	bltu	r3,r2,25fe0 <_malloc_r+0x71c>
   25ddc:	11401704 	addi	r5,r2,92
   25de0:	10c016c4 	addi	r3,r2,91
   25de4:	294b883a 	add	r5,r5,r5
   25de8:	294b883a 	add	r5,r5,r5
   25dec:	294b883a 	add	r5,r5,r5
   25df0:	994b883a 	add	r5,r19,r5
   25df4:	28800017 	ldw	r2,0(r5)
   25df8:	018000f4 	movhi	r6,3
   25dfc:	297ffe04 	addi	r5,r5,-8
   25e00:	318b8b04 	addi	r6,r6,11820
   25e04:	28806526 	beq	r5,r2,25f9c <_malloc_r+0x6d8>
   25e08:	01bfff04 	movi	r6,-4
   25e0c:	10c00117 	ldw	r3,4(r2)
   25e10:	1986703a 	and	r3,r3,r6
   25e14:	38c0022e 	bgeu	r7,r3,25e20 <_malloc_r+0x55c>
   25e18:	10800217 	ldw	r2,8(r2)
   25e1c:	28bffb1e 	bne	r5,r2,25e0c <__alt_data_end+0xfffe5e0c>
   25e20:	11400317 	ldw	r5,12(r2)
   25e24:	98c00117 	ldw	r3,4(r19)
   25e28:	81400315 	stw	r5,12(r16)
   25e2c:	80800215 	stw	r2,8(r16)
   25e30:	2c000215 	stw	r16,8(r5)
   25e34:	14000315 	stw	r16,12(r2)
   25e38:	003ef806 	br	25a1c <__alt_data_end+0xfffe5a1c>
   25e3c:	88c00054 	ori	r3,r17,1
   25e40:	80c00115 	stw	r3,4(r16)
   25e44:	8463883a 	add	r17,r16,r17
   25e48:	34400515 	stw	r17,20(r6)
   25e4c:	34400415 	stw	r17,16(r6)
   25e50:	10c00054 	ori	r3,r2,1
   25e54:	8a000315 	stw	r8,12(r17)
   25e58:	8a000215 	stw	r8,8(r17)
   25e5c:	88c00115 	stw	r3,4(r17)
   25e60:	88a3883a 	add	r17,r17,r2
   25e64:	88800015 	stw	r2,0(r17)
   25e68:	9009883a 	mov	r4,r18
   25e6c:	002dc280 	call	2dc28 <__malloc_unlock>
   25e70:	80800204 	addi	r2,r16,8
   25e74:	003f3c06 	br	25b68 <__alt_data_end+0xfffe5b68>
   25e78:	30c00117 	ldw	r3,4(r6)
   25e7c:	003ee706 	br	25a1c <__alt_data_end+0xfffe5a1c>
   25e80:	5ac00044 	addi	r11,r11,1
   25e84:	588000cc 	andi	r2,r11,3
   25e88:	31800204 	addi	r6,r6,8
   25e8c:	103efd1e 	bne	r2,zero,25a84 <__alt_data_end+0xfffe5a84>
   25e90:	00002406 	br	25f24 <_malloc_r+0x660>
   25e94:	14000317 	ldw	r16,12(r2)
   25e98:	143f251e 	bne	r2,r16,25b30 <__alt_data_end+0xfffe5b30>
   25e9c:	21000084 	addi	r4,r4,2
   25ea0:	003ebc06 	br	25994 <__alt_data_end+0xfffe5994>
   25ea4:	8085883a 	add	r2,r16,r2
   25ea8:	10c00117 	ldw	r3,4(r2)
   25eac:	81000317 	ldw	r4,12(r16)
   25eb0:	81400217 	ldw	r5,8(r16)
   25eb4:	18c00054 	ori	r3,r3,1
   25eb8:	10c00115 	stw	r3,4(r2)
   25ebc:	29000315 	stw	r4,12(r5)
   25ec0:	21400215 	stw	r5,8(r4)
   25ec4:	9009883a 	mov	r4,r18
   25ec8:	002dc280 	call	2dc28 <__malloc_unlock>
   25ecc:	80800204 	addi	r2,r16,8
   25ed0:	003f2506 	br	25b68 <__alt_data_end+0xfffe5b68>
   25ed4:	12001704 	addi	r8,r2,92
   25ed8:	11c016c4 	addi	r7,r2,91
   25edc:	4209883a 	add	r4,r8,r8
   25ee0:	003e9606 	br	2593c <__alt_data_end+0xfffe593c>
   25ee4:	3804d1ba 	srli	r2,r7,6
   25ee8:	11400e44 	addi	r5,r2,57
   25eec:	10c00e04 	addi	r3,r2,56
   25ef0:	294b883a 	add	r5,r5,r5
   25ef4:	003fbc06 	br	25de8 <__alt_data_end+0xfffe5de8>
   25ef8:	84ff5926 	beq	r16,r19,25c60 <__alt_data_end+0xfffe5c60>
   25efc:	008000f4 	movhi	r2,3
   25f00:	108b8b04 	addi	r2,r2,11820
   25f04:	14000217 	ldw	r16,8(r2)
   25f08:	00bfff04 	movi	r2,-4
   25f0c:	80c00117 	ldw	r3,4(r16)
   25f10:	1886703a 	and	r3,r3,r2
   25f14:	003f9106 	br	25d5c <__alt_data_end+0xfffe5d5c>
   25f18:	60800217 	ldw	r2,8(r12)
   25f1c:	213fffc4 	addi	r4,r4,-1
   25f20:	1300651e 	bne	r2,r12,260b8 <_malloc_r+0x7f4>
   25f24:	208000cc 	andi	r2,r4,3
   25f28:	633ffe04 	addi	r12,r12,-8
   25f2c:	103ffa1e 	bne	r2,zero,25f18 <__alt_data_end+0xfffe5f18>
   25f30:	98800117 	ldw	r2,4(r19)
   25f34:	0146303a 	nor	r3,zero,r5
   25f38:	1884703a 	and	r2,r3,r2
   25f3c:	98800115 	stw	r2,4(r19)
   25f40:	294b883a 	add	r5,r5,r5
   25f44:	117f2836 	bltu	r2,r5,25be8 <__alt_data_end+0xfffe5be8>
   25f48:	283f2726 	beq	r5,zero,25be8 <__alt_data_end+0xfffe5be8>
   25f4c:	2886703a 	and	r3,r5,r2
   25f50:	5809883a 	mov	r4,r11
   25f54:	183ec31e 	bne	r3,zero,25a64 <__alt_data_end+0xfffe5a64>
   25f58:	294b883a 	add	r5,r5,r5
   25f5c:	2886703a 	and	r3,r5,r2
   25f60:	21000104 	addi	r4,r4,4
   25f64:	183ffc26 	beq	r3,zero,25f58 <__alt_data_end+0xfffe5f58>
   25f68:	003ebe06 	br	25a64 <__alt_data_end+0xfffe5a64>
   25f6c:	00c05504 	movi	r3,340
   25f70:	18801236 	bltu	r3,r2,25fbc <_malloc_r+0x6f8>
   25f74:	8804d3fa 	srli	r2,r17,15
   25f78:	12001e04 	addi	r8,r2,120
   25f7c:	11c01dc4 	addi	r7,r2,119
   25f80:	4209883a 	add	r4,r8,r8
   25f84:	003e6d06 	br	2593c <__alt_data_end+0xfffe593c>
   25f88:	00c40004 	movi	r3,4096
   25f8c:	003f4606 	br	25ca8 <__alt_data_end+0xfffe5ca8>
   25f90:	00800044 	movi	r2,1
   25f94:	a0800115 	stw	r2,4(r20)
   25f98:	003f7406 	br	25d6c <__alt_data_end+0xfffe5d6c>
   25f9c:	1805d0ba 	srai	r2,r3,2
   25fa0:	01c00044 	movi	r7,1
   25fa4:	30c00117 	ldw	r3,4(r6)
   25fa8:	388e983a 	sll	r7,r7,r2
   25fac:	2805883a 	mov	r2,r5
   25fb0:	38c6b03a 	or	r3,r7,r3
   25fb4:	30c00115 	stw	r3,4(r6)
   25fb8:	003f9b06 	br	25e28 <__alt_data_end+0xfffe5e28>
   25fbc:	00c15504 	movi	r3,1364
   25fc0:	18801a36 	bltu	r3,r2,2602c <_malloc_r+0x768>
   25fc4:	8804d4ba 	srli	r2,r17,18
   25fc8:	12001f44 	addi	r8,r2,125
   25fcc:	11c01f04 	addi	r7,r2,124
   25fd0:	4209883a 	add	r4,r8,r8
   25fd4:	003e5906 	br	2593c <__alt_data_end+0xfffe593c>
   25fd8:	ad400404 	addi	r21,r21,16
   25fdc:	003f1706 	br	25c3c <__alt_data_end+0xfffe5c3c>
   25fe0:	00c01504 	movi	r3,84
   25fe4:	18802336 	bltu	r3,r2,26074 <_malloc_r+0x7b0>
   25fe8:	3804d33a 	srli	r2,r7,12
   25fec:	11401bc4 	addi	r5,r2,111
   25ff0:	10c01b84 	addi	r3,r2,110
   25ff4:	294b883a 	add	r5,r5,r5
   25ff8:	003f7b06 	br	25de8 <__alt_data_end+0xfffe5de8>
   25ffc:	9c000217 	ldw	r16,8(r19)
   26000:	00bfff04 	movi	r2,-4
   26004:	80c00117 	ldw	r3,4(r16)
   26008:	1886703a 	and	r3,r3,r2
   2600c:	003f5306 	br	25d5c <__alt_data_end+0xfffe5d5c>
   26010:	3083ffcc 	andi	r2,r6,4095
   26014:	103f181e 	bne	r2,zero,25c78 <__alt_data_end+0xfffe5c78>
   26018:	99000217 	ldw	r4,8(r19)
   2601c:	b545883a 	add	r2,r22,r21
   26020:	10800054 	ori	r2,r2,1
   26024:	20800115 	stw	r2,4(r4)
   26028:	003f3e06 	br	25d24 <__alt_data_end+0xfffe5d24>
   2602c:	01003f84 	movi	r4,254
   26030:	02001fc4 	movi	r8,127
   26034:	01c01f84 	movi	r7,126
   26038:	003e4006 	br	2593c <__alt_data_end+0xfffe593c>
   2603c:	008000f4 	movhi	r2,3
   26040:	10915104 	addi	r2,r2,17732
   26044:	15000015 	stw	r20,0(r2)
   26048:	003f1106 	br	25c90 <__alt_data_end+0xfffe5c90>
   2604c:	00800044 	movi	r2,1
   26050:	002b883a 	mov	r21,zero
   26054:	003f1f06 	br	25cd4 <__alt_data_end+0xfffe5cd4>
   26058:	81400204 	addi	r5,r16,8
   2605c:	9009883a 	mov	r4,r18
   26060:	0024ccc0 	call	24ccc <_free_r>
   26064:	008000f4 	movhi	r2,3
   26068:	10986b04 	addi	r2,r2,25004
   2606c:	10c00017 	ldw	r3,0(r2)
   26070:	003f2c06 	br	25d24 <__alt_data_end+0xfffe5d24>
   26074:	00c05504 	movi	r3,340
   26078:	18800536 	bltu	r3,r2,26090 <_malloc_r+0x7cc>
   2607c:	3804d3fa 	srli	r2,r7,15
   26080:	11401e04 	addi	r5,r2,120
   26084:	10c01dc4 	addi	r3,r2,119
   26088:	294b883a 	add	r5,r5,r5
   2608c:	003f5606 	br	25de8 <__alt_data_end+0xfffe5de8>
   26090:	00c15504 	movi	r3,1364
   26094:	18800536 	bltu	r3,r2,260ac <_malloc_r+0x7e8>
   26098:	3804d4ba 	srli	r2,r7,18
   2609c:	11401f44 	addi	r5,r2,125
   260a0:	10c01f04 	addi	r3,r2,124
   260a4:	294b883a 	add	r5,r5,r5
   260a8:	003f4f06 	br	25de8 <__alt_data_end+0xfffe5de8>
   260ac:	01403f84 	movi	r5,254
   260b0:	00c01f84 	movi	r3,126
   260b4:	003f4c06 	br	25de8 <__alt_data_end+0xfffe5de8>
   260b8:	98800117 	ldw	r2,4(r19)
   260bc:	003fa006 	br	25f40 <__alt_data_end+0xfffe5f40>
   260c0:	8808d0fa 	srli	r4,r17,3
   260c4:	20800044 	addi	r2,r4,1
   260c8:	1085883a 	add	r2,r2,r2
   260cc:	003e9006 	br	25b10 <__alt_data_end+0xfffe5b10>

000260d0 <memchr>:
   260d0:	208000cc 	andi	r2,r4,3
   260d4:	280f883a 	mov	r7,r5
   260d8:	10003426 	beq	r2,zero,261ac <memchr+0xdc>
   260dc:	30bfffc4 	addi	r2,r6,-1
   260e0:	30001a26 	beq	r6,zero,2614c <memchr+0x7c>
   260e4:	20c00003 	ldbu	r3,0(r4)
   260e8:	29803fcc 	andi	r6,r5,255
   260ec:	30c0051e 	bne	r6,r3,26104 <memchr+0x34>
   260f0:	00001806 	br	26154 <memchr+0x84>
   260f4:	10001526 	beq	r2,zero,2614c <memchr+0x7c>
   260f8:	20c00003 	ldbu	r3,0(r4)
   260fc:	10bfffc4 	addi	r2,r2,-1
   26100:	30c01426 	beq	r6,r3,26154 <memchr+0x84>
   26104:	21000044 	addi	r4,r4,1
   26108:	20c000cc 	andi	r3,r4,3
   2610c:	183ff91e 	bne	r3,zero,260f4 <__alt_data_end+0xfffe60f4>
   26110:	020000c4 	movi	r8,3
   26114:	40801136 	bltu	r8,r2,2615c <memchr+0x8c>
   26118:	10000c26 	beq	r2,zero,2614c <memchr+0x7c>
   2611c:	20c00003 	ldbu	r3,0(r4)
   26120:	29403fcc 	andi	r5,r5,255
   26124:	28c00b26 	beq	r5,r3,26154 <memchr+0x84>
   26128:	20c00044 	addi	r3,r4,1
   2612c:	39803fcc 	andi	r6,r7,255
   26130:	2089883a 	add	r4,r4,r2
   26134:	00000306 	br	26144 <memchr+0x74>
   26138:	18c00044 	addi	r3,r3,1
   2613c:	197fffc3 	ldbu	r5,-1(r3)
   26140:	31400526 	beq	r6,r5,26158 <memchr+0x88>
   26144:	1805883a 	mov	r2,r3
   26148:	20fffb1e 	bne	r4,r3,26138 <__alt_data_end+0xfffe6138>
   2614c:	0005883a 	mov	r2,zero
   26150:	f800283a 	ret
   26154:	2005883a 	mov	r2,r4
   26158:	f800283a 	ret
   2615c:	28c03fcc 	andi	r3,r5,255
   26160:	1812923a 	slli	r9,r3,8
   26164:	02ffbff4 	movhi	r11,65279
   26168:	02a02074 	movhi	r10,32897
   2616c:	48d2b03a 	or	r9,r9,r3
   26170:	4806943a 	slli	r3,r9,16
   26174:	5affbfc4 	addi	r11,r11,-257
   26178:	52a02004 	addi	r10,r10,-32640
   2617c:	48d2b03a 	or	r9,r9,r3
   26180:	20c00017 	ldw	r3,0(r4)
   26184:	48c6f03a 	xor	r3,r9,r3
   26188:	1acd883a 	add	r6,r3,r11
   2618c:	00c6303a 	nor	r3,zero,r3
   26190:	30c6703a 	and	r3,r6,r3
   26194:	1a86703a 	and	r3,r3,r10
   26198:	183fe01e 	bne	r3,zero,2611c <__alt_data_end+0xfffe611c>
   2619c:	10bfff04 	addi	r2,r2,-4
   261a0:	21000104 	addi	r4,r4,4
   261a4:	40bff636 	bltu	r8,r2,26180 <__alt_data_end+0xfffe6180>
   261a8:	003fdb06 	br	26118 <__alt_data_end+0xfffe6118>
   261ac:	3005883a 	mov	r2,r6
   261b0:	003fd706 	br	26110 <__alt_data_end+0xfffe6110>

000261b4 <memcpy>:
   261b4:	defffd04 	addi	sp,sp,-12
   261b8:	dfc00215 	stw	ra,8(sp)
   261bc:	dc400115 	stw	r17,4(sp)
   261c0:	dc000015 	stw	r16,0(sp)
   261c4:	00c003c4 	movi	r3,15
   261c8:	2005883a 	mov	r2,r4
   261cc:	1980452e 	bgeu	r3,r6,262e4 <memcpy+0x130>
   261d0:	2906b03a 	or	r3,r5,r4
   261d4:	18c000cc 	andi	r3,r3,3
   261d8:	1800441e 	bne	r3,zero,262ec <memcpy+0x138>
   261dc:	347ffc04 	addi	r17,r6,-16
   261e0:	8822d13a 	srli	r17,r17,4
   261e4:	28c00104 	addi	r3,r5,4
   261e8:	23400104 	addi	r13,r4,4
   261ec:	8820913a 	slli	r16,r17,4
   261f0:	2b000204 	addi	r12,r5,8
   261f4:	22c00204 	addi	r11,r4,8
   261f8:	84000504 	addi	r16,r16,20
   261fc:	2a800304 	addi	r10,r5,12
   26200:	22400304 	addi	r9,r4,12
   26204:	2c21883a 	add	r16,r5,r16
   26208:	2811883a 	mov	r8,r5
   2620c:	200f883a 	mov	r7,r4
   26210:	41000017 	ldw	r4,0(r8)
   26214:	1fc00017 	ldw	ra,0(r3)
   26218:	63c00017 	ldw	r15,0(r12)
   2621c:	39000015 	stw	r4,0(r7)
   26220:	53800017 	ldw	r14,0(r10)
   26224:	6fc00015 	stw	ra,0(r13)
   26228:	5bc00015 	stw	r15,0(r11)
   2622c:	4b800015 	stw	r14,0(r9)
   26230:	18c00404 	addi	r3,r3,16
   26234:	39c00404 	addi	r7,r7,16
   26238:	42000404 	addi	r8,r8,16
   2623c:	6b400404 	addi	r13,r13,16
   26240:	63000404 	addi	r12,r12,16
   26244:	5ac00404 	addi	r11,r11,16
   26248:	52800404 	addi	r10,r10,16
   2624c:	4a400404 	addi	r9,r9,16
   26250:	1c3fef1e 	bne	r3,r16,26210 <__alt_data_end+0xfffe6210>
   26254:	89c00044 	addi	r7,r17,1
   26258:	380e913a 	slli	r7,r7,4
   2625c:	310003cc 	andi	r4,r6,15
   26260:	02c000c4 	movi	r11,3
   26264:	11c7883a 	add	r3,r2,r7
   26268:	29cb883a 	add	r5,r5,r7
   2626c:	5900212e 	bgeu	r11,r4,262f4 <memcpy+0x140>
   26270:	1813883a 	mov	r9,r3
   26274:	2811883a 	mov	r8,r5
   26278:	200f883a 	mov	r7,r4
   2627c:	42800017 	ldw	r10,0(r8)
   26280:	4a400104 	addi	r9,r9,4
   26284:	39ffff04 	addi	r7,r7,-4
   26288:	4abfff15 	stw	r10,-4(r9)
   2628c:	42000104 	addi	r8,r8,4
   26290:	59fffa36 	bltu	r11,r7,2627c <__alt_data_end+0xfffe627c>
   26294:	213fff04 	addi	r4,r4,-4
   26298:	2008d0ba 	srli	r4,r4,2
   2629c:	318000cc 	andi	r6,r6,3
   262a0:	21000044 	addi	r4,r4,1
   262a4:	2109883a 	add	r4,r4,r4
   262a8:	2109883a 	add	r4,r4,r4
   262ac:	1907883a 	add	r3,r3,r4
   262b0:	290b883a 	add	r5,r5,r4
   262b4:	30000626 	beq	r6,zero,262d0 <memcpy+0x11c>
   262b8:	198d883a 	add	r6,r3,r6
   262bc:	29c00003 	ldbu	r7,0(r5)
   262c0:	18c00044 	addi	r3,r3,1
   262c4:	29400044 	addi	r5,r5,1
   262c8:	19ffffc5 	stb	r7,-1(r3)
   262cc:	19bffb1e 	bne	r3,r6,262bc <__alt_data_end+0xfffe62bc>
   262d0:	dfc00217 	ldw	ra,8(sp)
   262d4:	dc400117 	ldw	r17,4(sp)
   262d8:	dc000017 	ldw	r16,0(sp)
   262dc:	dec00304 	addi	sp,sp,12
   262e0:	f800283a 	ret
   262e4:	2007883a 	mov	r3,r4
   262e8:	003ff206 	br	262b4 <__alt_data_end+0xfffe62b4>
   262ec:	2007883a 	mov	r3,r4
   262f0:	003ff106 	br	262b8 <__alt_data_end+0xfffe62b8>
   262f4:	200d883a 	mov	r6,r4
   262f8:	003fee06 	br	262b4 <__alt_data_end+0xfffe62b4>

000262fc <memmove>:
   262fc:	2005883a 	mov	r2,r4
   26300:	29000b2e 	bgeu	r5,r4,26330 <memmove+0x34>
   26304:	298f883a 	add	r7,r5,r6
   26308:	21c0092e 	bgeu	r4,r7,26330 <memmove+0x34>
   2630c:	2187883a 	add	r3,r4,r6
   26310:	198bc83a 	sub	r5,r3,r6
   26314:	30004826 	beq	r6,zero,26438 <memmove+0x13c>
   26318:	39ffffc4 	addi	r7,r7,-1
   2631c:	39000003 	ldbu	r4,0(r7)
   26320:	18ffffc4 	addi	r3,r3,-1
   26324:	19000005 	stb	r4,0(r3)
   26328:	28fffb1e 	bne	r5,r3,26318 <__alt_data_end+0xfffe6318>
   2632c:	f800283a 	ret
   26330:	00c003c4 	movi	r3,15
   26334:	1980412e 	bgeu	r3,r6,2643c <memmove+0x140>
   26338:	2886b03a 	or	r3,r5,r2
   2633c:	18c000cc 	andi	r3,r3,3
   26340:	1800401e 	bne	r3,zero,26444 <memmove+0x148>
   26344:	33fffc04 	addi	r15,r6,-16
   26348:	781ed13a 	srli	r15,r15,4
   2634c:	28c00104 	addi	r3,r5,4
   26350:	13400104 	addi	r13,r2,4
   26354:	781c913a 	slli	r14,r15,4
   26358:	2b000204 	addi	r12,r5,8
   2635c:	12c00204 	addi	r11,r2,8
   26360:	73800504 	addi	r14,r14,20
   26364:	2a800304 	addi	r10,r5,12
   26368:	12400304 	addi	r9,r2,12
   2636c:	2b9d883a 	add	r14,r5,r14
   26370:	2811883a 	mov	r8,r5
   26374:	100f883a 	mov	r7,r2
   26378:	41000017 	ldw	r4,0(r8)
   2637c:	39c00404 	addi	r7,r7,16
   26380:	18c00404 	addi	r3,r3,16
   26384:	393ffc15 	stw	r4,-16(r7)
   26388:	193ffc17 	ldw	r4,-16(r3)
   2638c:	6b400404 	addi	r13,r13,16
   26390:	5ac00404 	addi	r11,r11,16
   26394:	693ffc15 	stw	r4,-16(r13)
   26398:	61000017 	ldw	r4,0(r12)
   2639c:	4a400404 	addi	r9,r9,16
   263a0:	42000404 	addi	r8,r8,16
   263a4:	593ffc15 	stw	r4,-16(r11)
   263a8:	51000017 	ldw	r4,0(r10)
   263ac:	63000404 	addi	r12,r12,16
   263b0:	52800404 	addi	r10,r10,16
   263b4:	493ffc15 	stw	r4,-16(r9)
   263b8:	1bbfef1e 	bne	r3,r14,26378 <__alt_data_end+0xfffe6378>
   263bc:	79000044 	addi	r4,r15,1
   263c0:	2008913a 	slli	r4,r4,4
   263c4:	328003cc 	andi	r10,r6,15
   263c8:	02c000c4 	movi	r11,3
   263cc:	1107883a 	add	r3,r2,r4
   263d0:	290b883a 	add	r5,r5,r4
   263d4:	5a801e2e 	bgeu	r11,r10,26450 <memmove+0x154>
   263d8:	1813883a 	mov	r9,r3
   263dc:	2811883a 	mov	r8,r5
   263e0:	500f883a 	mov	r7,r10
   263e4:	41000017 	ldw	r4,0(r8)
   263e8:	4a400104 	addi	r9,r9,4
   263ec:	39ffff04 	addi	r7,r7,-4
   263f0:	493fff15 	stw	r4,-4(r9)
   263f4:	42000104 	addi	r8,r8,4
   263f8:	59fffa36 	bltu	r11,r7,263e4 <__alt_data_end+0xfffe63e4>
   263fc:	513fff04 	addi	r4,r10,-4
   26400:	2008d0ba 	srli	r4,r4,2
   26404:	318000cc 	andi	r6,r6,3
   26408:	21000044 	addi	r4,r4,1
   2640c:	2109883a 	add	r4,r4,r4
   26410:	2109883a 	add	r4,r4,r4
   26414:	1907883a 	add	r3,r3,r4
   26418:	290b883a 	add	r5,r5,r4
   2641c:	30000b26 	beq	r6,zero,2644c <memmove+0x150>
   26420:	198d883a 	add	r6,r3,r6
   26424:	29c00003 	ldbu	r7,0(r5)
   26428:	18c00044 	addi	r3,r3,1
   2642c:	29400044 	addi	r5,r5,1
   26430:	19ffffc5 	stb	r7,-1(r3)
   26434:	19bffb1e 	bne	r3,r6,26424 <__alt_data_end+0xfffe6424>
   26438:	f800283a 	ret
   2643c:	1007883a 	mov	r3,r2
   26440:	003ff606 	br	2641c <__alt_data_end+0xfffe641c>
   26444:	1007883a 	mov	r3,r2
   26448:	003ff506 	br	26420 <__alt_data_end+0xfffe6420>
   2644c:	f800283a 	ret
   26450:	500d883a 	mov	r6,r10
   26454:	003ff106 	br	2641c <__alt_data_end+0xfffe641c>

00026458 <memset>:
   26458:	20c000cc 	andi	r3,r4,3
   2645c:	2005883a 	mov	r2,r4
   26460:	18004426 	beq	r3,zero,26574 <memset+0x11c>
   26464:	31ffffc4 	addi	r7,r6,-1
   26468:	30004026 	beq	r6,zero,2656c <memset+0x114>
   2646c:	2813883a 	mov	r9,r5
   26470:	200d883a 	mov	r6,r4
   26474:	2007883a 	mov	r3,r4
   26478:	00000406 	br	2648c <memset+0x34>
   2647c:	3a3fffc4 	addi	r8,r7,-1
   26480:	31800044 	addi	r6,r6,1
   26484:	38003926 	beq	r7,zero,2656c <memset+0x114>
   26488:	400f883a 	mov	r7,r8
   2648c:	18c00044 	addi	r3,r3,1
   26490:	32400005 	stb	r9,0(r6)
   26494:	1a0000cc 	andi	r8,r3,3
   26498:	403ff81e 	bne	r8,zero,2647c <__alt_data_end+0xfffe647c>
   2649c:	010000c4 	movi	r4,3
   264a0:	21c02d2e 	bgeu	r4,r7,26558 <memset+0x100>
   264a4:	29003fcc 	andi	r4,r5,255
   264a8:	200c923a 	slli	r6,r4,8
   264ac:	3108b03a 	or	r4,r6,r4
   264b0:	200c943a 	slli	r6,r4,16
   264b4:	218cb03a 	or	r6,r4,r6
   264b8:	010003c4 	movi	r4,15
   264bc:	21c0182e 	bgeu	r4,r7,26520 <memset+0xc8>
   264c0:	3b3ffc04 	addi	r12,r7,-16
   264c4:	6018d13a 	srli	r12,r12,4
   264c8:	1a000104 	addi	r8,r3,4
   264cc:	1ac00204 	addi	r11,r3,8
   264d0:	6008913a 	slli	r4,r12,4
   264d4:	1a800304 	addi	r10,r3,12
   264d8:	1813883a 	mov	r9,r3
   264dc:	21000504 	addi	r4,r4,20
   264e0:	1909883a 	add	r4,r3,r4
   264e4:	49800015 	stw	r6,0(r9)
   264e8:	41800015 	stw	r6,0(r8)
   264ec:	59800015 	stw	r6,0(r11)
   264f0:	51800015 	stw	r6,0(r10)
   264f4:	42000404 	addi	r8,r8,16
   264f8:	4a400404 	addi	r9,r9,16
   264fc:	5ac00404 	addi	r11,r11,16
   26500:	52800404 	addi	r10,r10,16
   26504:	413ff71e 	bne	r8,r4,264e4 <__alt_data_end+0xfffe64e4>
   26508:	63000044 	addi	r12,r12,1
   2650c:	6018913a 	slli	r12,r12,4
   26510:	39c003cc 	andi	r7,r7,15
   26514:	010000c4 	movi	r4,3
   26518:	1b07883a 	add	r3,r3,r12
   2651c:	21c00e2e 	bgeu	r4,r7,26558 <memset+0x100>
   26520:	1813883a 	mov	r9,r3
   26524:	3811883a 	mov	r8,r7
   26528:	010000c4 	movi	r4,3
   2652c:	49800015 	stw	r6,0(r9)
   26530:	423fff04 	addi	r8,r8,-4
   26534:	4a400104 	addi	r9,r9,4
   26538:	223ffc36 	bltu	r4,r8,2652c <__alt_data_end+0xfffe652c>
   2653c:	393fff04 	addi	r4,r7,-4
   26540:	2008d0ba 	srli	r4,r4,2
   26544:	39c000cc 	andi	r7,r7,3
   26548:	21000044 	addi	r4,r4,1
   2654c:	2109883a 	add	r4,r4,r4
   26550:	2109883a 	add	r4,r4,r4
   26554:	1907883a 	add	r3,r3,r4
   26558:	38000526 	beq	r7,zero,26570 <memset+0x118>
   2655c:	19cf883a 	add	r7,r3,r7
   26560:	19400005 	stb	r5,0(r3)
   26564:	18c00044 	addi	r3,r3,1
   26568:	38fffd1e 	bne	r7,r3,26560 <__alt_data_end+0xfffe6560>
   2656c:	f800283a 	ret
   26570:	f800283a 	ret
   26574:	2007883a 	mov	r3,r4
   26578:	300f883a 	mov	r7,r6
   2657c:	003fc706 	br	2649c <__alt_data_end+0xfffe649c>

00026580 <_Balloc>:
   26580:	20801317 	ldw	r2,76(r4)
   26584:	defffc04 	addi	sp,sp,-16
   26588:	dc400115 	stw	r17,4(sp)
   2658c:	dc000015 	stw	r16,0(sp)
   26590:	dfc00315 	stw	ra,12(sp)
   26594:	dc800215 	stw	r18,8(sp)
   26598:	2023883a 	mov	r17,r4
   2659c:	2821883a 	mov	r16,r5
   265a0:	10000f26 	beq	r2,zero,265e0 <_Balloc+0x60>
   265a4:	8407883a 	add	r3,r16,r16
   265a8:	18c7883a 	add	r3,r3,r3
   265ac:	10c7883a 	add	r3,r2,r3
   265b0:	18800017 	ldw	r2,0(r3)
   265b4:	10001126 	beq	r2,zero,265fc <_Balloc+0x7c>
   265b8:	11000017 	ldw	r4,0(r2)
   265bc:	19000015 	stw	r4,0(r3)
   265c0:	10000415 	stw	zero,16(r2)
   265c4:	10000315 	stw	zero,12(r2)
   265c8:	dfc00317 	ldw	ra,12(sp)
   265cc:	dc800217 	ldw	r18,8(sp)
   265d0:	dc400117 	ldw	r17,4(sp)
   265d4:	dc000017 	ldw	r16,0(sp)
   265d8:	dec00404 	addi	sp,sp,16
   265dc:	f800283a 	ret
   265e0:	01800844 	movi	r6,33
   265e4:	01400104 	movi	r5,4
   265e8:	00298e80 	call	298e8 <_calloc_r>
   265ec:	88801315 	stw	r2,76(r17)
   265f0:	103fec1e 	bne	r2,zero,265a4 <__alt_data_end+0xfffe65a4>
   265f4:	0005883a 	mov	r2,zero
   265f8:	003ff306 	br	265c8 <__alt_data_end+0xfffe65c8>
   265fc:	01400044 	movi	r5,1
   26600:	2c24983a 	sll	r18,r5,r16
   26604:	8809883a 	mov	r4,r17
   26608:	91800144 	addi	r6,r18,5
   2660c:	318d883a 	add	r6,r6,r6
   26610:	318d883a 	add	r6,r6,r6
   26614:	00298e80 	call	298e8 <_calloc_r>
   26618:	103ff626 	beq	r2,zero,265f4 <__alt_data_end+0xfffe65f4>
   2661c:	14000115 	stw	r16,4(r2)
   26620:	14800215 	stw	r18,8(r2)
   26624:	003fe606 	br	265c0 <__alt_data_end+0xfffe65c0>

00026628 <_Bfree>:
   26628:	28000826 	beq	r5,zero,2664c <_Bfree+0x24>
   2662c:	28c00117 	ldw	r3,4(r5)
   26630:	20801317 	ldw	r2,76(r4)
   26634:	18c7883a 	add	r3,r3,r3
   26638:	18c7883a 	add	r3,r3,r3
   2663c:	10c5883a 	add	r2,r2,r3
   26640:	10c00017 	ldw	r3,0(r2)
   26644:	28c00015 	stw	r3,0(r5)
   26648:	11400015 	stw	r5,0(r2)
   2664c:	f800283a 	ret

00026650 <__multadd>:
   26650:	defff704 	addi	sp,sp,-36
   26654:	dc800215 	stw	r18,8(sp)
   26658:	2c800417 	ldw	r18,16(r5)
   2665c:	dd800615 	stw	r22,24(sp)
   26660:	dd400515 	stw	r21,20(sp)
   26664:	dd000415 	stw	r20,16(sp)
   26668:	dcc00315 	stw	r19,12(sp)
   2666c:	dc400115 	stw	r17,4(sp)
   26670:	dc000015 	stw	r16,0(sp)
   26674:	dfc00815 	stw	ra,32(sp)
   26678:	ddc00715 	stw	r23,28(sp)
   2667c:	2827883a 	mov	r19,r5
   26680:	2029883a 	mov	r20,r4
   26684:	3023883a 	mov	r17,r6
   26688:	3821883a 	mov	r16,r7
   2668c:	2d400504 	addi	r21,r5,20
   26690:	002d883a 	mov	r22,zero
   26694:	adc00017 	ldw	r23,0(r21)
   26698:	880b883a 	mov	r5,r17
   2669c:	ad400104 	addi	r21,r21,4
   266a0:	b93fffcc 	andi	r4,r23,65535
   266a4:	002ad9c0 	call	2ad9c <__mulsi3>
   266a8:	b808d43a 	srli	r4,r23,16
   266ac:	880b883a 	mov	r5,r17
   266b0:	1421883a 	add	r16,r2,r16
   266b4:	002ad9c0 	call	2ad9c <__mulsi3>
   266b8:	800ed43a 	srli	r7,r16,16
   266bc:	80ffffcc 	andi	r3,r16,65535
   266c0:	b5800044 	addi	r22,r22,1
   266c4:	11c5883a 	add	r2,r2,r7
   266c8:	100e943a 	slli	r7,r2,16
   266cc:	1020d43a 	srli	r16,r2,16
   266d0:	38c7883a 	add	r3,r7,r3
   266d4:	a8ffff15 	stw	r3,-4(r21)
   266d8:	b4bfee16 	blt	r22,r18,26694 <__alt_data_end+0xfffe6694>
   266dc:	80000926 	beq	r16,zero,26704 <__multadd+0xb4>
   266e0:	98800217 	ldw	r2,8(r19)
   266e4:	9080130e 	bge	r18,r2,26734 <__multadd+0xe4>
   266e8:	90800144 	addi	r2,r18,5
   266ec:	1085883a 	add	r2,r2,r2
   266f0:	1085883a 	add	r2,r2,r2
   266f4:	9885883a 	add	r2,r19,r2
   266f8:	14000015 	stw	r16,0(r2)
   266fc:	94800044 	addi	r18,r18,1
   26700:	9c800415 	stw	r18,16(r19)
   26704:	9805883a 	mov	r2,r19
   26708:	dfc00817 	ldw	ra,32(sp)
   2670c:	ddc00717 	ldw	r23,28(sp)
   26710:	dd800617 	ldw	r22,24(sp)
   26714:	dd400517 	ldw	r21,20(sp)
   26718:	dd000417 	ldw	r20,16(sp)
   2671c:	dcc00317 	ldw	r19,12(sp)
   26720:	dc800217 	ldw	r18,8(sp)
   26724:	dc400117 	ldw	r17,4(sp)
   26728:	dc000017 	ldw	r16,0(sp)
   2672c:	dec00904 	addi	sp,sp,36
   26730:	f800283a 	ret
   26734:	99400117 	ldw	r5,4(r19)
   26738:	a009883a 	mov	r4,r20
   2673c:	29400044 	addi	r5,r5,1
   26740:	00265800 	call	26580 <_Balloc>
   26744:	99800417 	ldw	r6,16(r19)
   26748:	99400304 	addi	r5,r19,12
   2674c:	11000304 	addi	r4,r2,12
   26750:	31800084 	addi	r6,r6,2
   26754:	318d883a 	add	r6,r6,r6
   26758:	318d883a 	add	r6,r6,r6
   2675c:	1023883a 	mov	r17,r2
   26760:	00261b40 	call	261b4 <memcpy>
   26764:	98000a26 	beq	r19,zero,26790 <__multadd+0x140>
   26768:	98c00117 	ldw	r3,4(r19)
   2676c:	a0801317 	ldw	r2,76(r20)
   26770:	18c7883a 	add	r3,r3,r3
   26774:	18c7883a 	add	r3,r3,r3
   26778:	10c5883a 	add	r2,r2,r3
   2677c:	10c00017 	ldw	r3,0(r2)
   26780:	98c00015 	stw	r3,0(r19)
   26784:	14c00015 	stw	r19,0(r2)
   26788:	8827883a 	mov	r19,r17
   2678c:	003fd606 	br	266e8 <__alt_data_end+0xfffe66e8>
   26790:	8827883a 	mov	r19,r17
   26794:	003fd406 	br	266e8 <__alt_data_end+0xfffe66e8>

00026798 <__s2b>:
   26798:	defff904 	addi	sp,sp,-28
   2679c:	dc400115 	stw	r17,4(sp)
   267a0:	dc000015 	stw	r16,0(sp)
   267a4:	2023883a 	mov	r17,r4
   267a8:	2821883a 	mov	r16,r5
   267ac:	39000204 	addi	r4,r7,8
   267b0:	01400244 	movi	r5,9
   267b4:	dcc00315 	stw	r19,12(sp)
   267b8:	dc800215 	stw	r18,8(sp)
   267bc:	dfc00615 	stw	ra,24(sp)
   267c0:	dd400515 	stw	r21,20(sp)
   267c4:	dd000415 	stw	r20,16(sp)
   267c8:	3825883a 	mov	r18,r7
   267cc:	3027883a 	mov	r19,r6
   267d0:	002abe80 	call	2abe8 <__divsi3>
   267d4:	00c00044 	movi	r3,1
   267d8:	000b883a 	mov	r5,zero
   267dc:	1880030e 	bge	r3,r2,267ec <__s2b+0x54>
   267e0:	18c7883a 	add	r3,r3,r3
   267e4:	29400044 	addi	r5,r5,1
   267e8:	18bffd16 	blt	r3,r2,267e0 <__alt_data_end+0xfffe67e0>
   267ec:	8809883a 	mov	r4,r17
   267f0:	00265800 	call	26580 <_Balloc>
   267f4:	d8c00717 	ldw	r3,28(sp)
   267f8:	10c00515 	stw	r3,20(r2)
   267fc:	00c00044 	movi	r3,1
   26800:	10c00415 	stw	r3,16(r2)
   26804:	00c00244 	movi	r3,9
   26808:	1cc0210e 	bge	r3,r19,26890 <__s2b+0xf8>
   2680c:	80eb883a 	add	r21,r16,r3
   26810:	a829883a 	mov	r20,r21
   26814:	84e1883a 	add	r16,r16,r19
   26818:	a1c00007 	ldb	r7,0(r20)
   2681c:	01800284 	movi	r6,10
   26820:	a5000044 	addi	r20,r20,1
   26824:	100b883a 	mov	r5,r2
   26828:	39fff404 	addi	r7,r7,-48
   2682c:	8809883a 	mov	r4,r17
   26830:	00266500 	call	26650 <__multadd>
   26834:	a43ff81e 	bne	r20,r16,26818 <__alt_data_end+0xfffe6818>
   26838:	ace1883a 	add	r16,r21,r19
   2683c:	843ffe04 	addi	r16,r16,-8
   26840:	9c800a0e 	bge	r19,r18,2686c <__s2b+0xd4>
   26844:	94e5c83a 	sub	r18,r18,r19
   26848:	84a5883a 	add	r18,r16,r18
   2684c:	81c00007 	ldb	r7,0(r16)
   26850:	01800284 	movi	r6,10
   26854:	84000044 	addi	r16,r16,1
   26858:	100b883a 	mov	r5,r2
   2685c:	39fff404 	addi	r7,r7,-48
   26860:	8809883a 	mov	r4,r17
   26864:	00266500 	call	26650 <__multadd>
   26868:	84bff81e 	bne	r16,r18,2684c <__alt_data_end+0xfffe684c>
   2686c:	dfc00617 	ldw	ra,24(sp)
   26870:	dd400517 	ldw	r21,20(sp)
   26874:	dd000417 	ldw	r20,16(sp)
   26878:	dcc00317 	ldw	r19,12(sp)
   2687c:	dc800217 	ldw	r18,8(sp)
   26880:	dc400117 	ldw	r17,4(sp)
   26884:	dc000017 	ldw	r16,0(sp)
   26888:	dec00704 	addi	sp,sp,28
   2688c:	f800283a 	ret
   26890:	84000284 	addi	r16,r16,10
   26894:	1827883a 	mov	r19,r3
   26898:	003fe906 	br	26840 <__alt_data_end+0xfffe6840>

0002689c <__hi0bits>:
   2689c:	20bfffec 	andhi	r2,r4,65535
   268a0:	1000141e 	bne	r2,zero,268f4 <__hi0bits+0x58>
   268a4:	2008943a 	slli	r4,r4,16
   268a8:	00800404 	movi	r2,16
   268ac:	20ffc02c 	andhi	r3,r4,65280
   268b0:	1800021e 	bne	r3,zero,268bc <__hi0bits+0x20>
   268b4:	2008923a 	slli	r4,r4,8
   268b8:	10800204 	addi	r2,r2,8
   268bc:	20fc002c 	andhi	r3,r4,61440
   268c0:	1800021e 	bne	r3,zero,268cc <__hi0bits+0x30>
   268c4:	2008913a 	slli	r4,r4,4
   268c8:	10800104 	addi	r2,r2,4
   268cc:	20f0002c 	andhi	r3,r4,49152
   268d0:	1800031e 	bne	r3,zero,268e0 <__hi0bits+0x44>
   268d4:	2109883a 	add	r4,r4,r4
   268d8:	10800084 	addi	r2,r2,2
   268dc:	2109883a 	add	r4,r4,r4
   268e0:	20000316 	blt	r4,zero,268f0 <__hi0bits+0x54>
   268e4:	2110002c 	andhi	r4,r4,16384
   268e8:	2000041e 	bne	r4,zero,268fc <__hi0bits+0x60>
   268ec:	00800804 	movi	r2,32
   268f0:	f800283a 	ret
   268f4:	0005883a 	mov	r2,zero
   268f8:	003fec06 	br	268ac <__alt_data_end+0xfffe68ac>
   268fc:	10800044 	addi	r2,r2,1
   26900:	f800283a 	ret

00026904 <__lo0bits>:
   26904:	20c00017 	ldw	r3,0(r4)
   26908:	188001cc 	andi	r2,r3,7
   2690c:	10000826 	beq	r2,zero,26930 <__lo0bits+0x2c>
   26910:	1880004c 	andi	r2,r3,1
   26914:	1000211e 	bne	r2,zero,2699c <__lo0bits+0x98>
   26918:	1880008c 	andi	r2,r3,2
   2691c:	1000211e 	bne	r2,zero,269a4 <__lo0bits+0xa0>
   26920:	1806d0ba 	srli	r3,r3,2
   26924:	00800084 	movi	r2,2
   26928:	20c00015 	stw	r3,0(r4)
   2692c:	f800283a 	ret
   26930:	18bfffcc 	andi	r2,r3,65535
   26934:	10001326 	beq	r2,zero,26984 <__lo0bits+0x80>
   26938:	0005883a 	mov	r2,zero
   2693c:	19403fcc 	andi	r5,r3,255
   26940:	2800021e 	bne	r5,zero,2694c <__lo0bits+0x48>
   26944:	1806d23a 	srli	r3,r3,8
   26948:	10800204 	addi	r2,r2,8
   2694c:	194003cc 	andi	r5,r3,15
   26950:	2800021e 	bne	r5,zero,2695c <__lo0bits+0x58>
   26954:	1806d13a 	srli	r3,r3,4
   26958:	10800104 	addi	r2,r2,4
   2695c:	194000cc 	andi	r5,r3,3
   26960:	2800021e 	bne	r5,zero,2696c <__lo0bits+0x68>
   26964:	1806d0ba 	srli	r3,r3,2
   26968:	10800084 	addi	r2,r2,2
   2696c:	1940004c 	andi	r5,r3,1
   26970:	2800081e 	bne	r5,zero,26994 <__lo0bits+0x90>
   26974:	1806d07a 	srli	r3,r3,1
   26978:	1800051e 	bne	r3,zero,26990 <__lo0bits+0x8c>
   2697c:	00800804 	movi	r2,32
   26980:	f800283a 	ret
   26984:	1806d43a 	srli	r3,r3,16
   26988:	00800404 	movi	r2,16
   2698c:	003feb06 	br	2693c <__alt_data_end+0xfffe693c>
   26990:	10800044 	addi	r2,r2,1
   26994:	20c00015 	stw	r3,0(r4)
   26998:	f800283a 	ret
   2699c:	0005883a 	mov	r2,zero
   269a0:	f800283a 	ret
   269a4:	1806d07a 	srli	r3,r3,1
   269a8:	00800044 	movi	r2,1
   269ac:	20c00015 	stw	r3,0(r4)
   269b0:	f800283a 	ret

000269b4 <__i2b>:
   269b4:	defffd04 	addi	sp,sp,-12
   269b8:	dc000015 	stw	r16,0(sp)
   269bc:	04000044 	movi	r16,1
   269c0:	dc400115 	stw	r17,4(sp)
   269c4:	2823883a 	mov	r17,r5
   269c8:	800b883a 	mov	r5,r16
   269cc:	dfc00215 	stw	ra,8(sp)
   269d0:	00265800 	call	26580 <_Balloc>
   269d4:	14400515 	stw	r17,20(r2)
   269d8:	14000415 	stw	r16,16(r2)
   269dc:	dfc00217 	ldw	ra,8(sp)
   269e0:	dc400117 	ldw	r17,4(sp)
   269e4:	dc000017 	ldw	r16,0(sp)
   269e8:	dec00304 	addi	sp,sp,12
   269ec:	f800283a 	ret

000269f0 <__multiply>:
   269f0:	deffef04 	addi	sp,sp,-68
   269f4:	dc400815 	stw	r17,32(sp)
   269f8:	dc000715 	stw	r16,28(sp)
   269fc:	34400417 	ldw	r17,16(r6)
   26a00:	2c000417 	ldw	r16,16(r5)
   26a04:	dd800d15 	stw	r22,52(sp)
   26a08:	dc800915 	stw	r18,36(sp)
   26a0c:	dfc01015 	stw	ra,64(sp)
   26a10:	df000f15 	stw	fp,60(sp)
   26a14:	ddc00e15 	stw	r23,56(sp)
   26a18:	dd400c15 	stw	r21,48(sp)
   26a1c:	dd000b15 	stw	r20,44(sp)
   26a20:	dcc00a15 	stw	r19,40(sp)
   26a24:	2825883a 	mov	r18,r5
   26a28:	302d883a 	mov	r22,r6
   26a2c:	8440050e 	bge	r16,r17,26a44 <__multiply+0x54>
   26a30:	8007883a 	mov	r3,r16
   26a34:	3025883a 	mov	r18,r6
   26a38:	8821883a 	mov	r16,r17
   26a3c:	282d883a 	mov	r22,r5
   26a40:	1823883a 	mov	r17,r3
   26a44:	90800217 	ldw	r2,8(r18)
   26a48:	8447883a 	add	r3,r16,r17
   26a4c:	d8c00215 	stw	r3,8(sp)
   26a50:	91400117 	ldw	r5,4(r18)
   26a54:	10c0010e 	bge	r2,r3,26a5c <__multiply+0x6c>
   26a58:	29400044 	addi	r5,r5,1
   26a5c:	00265800 	call	26580 <_Balloc>
   26a60:	d8c00217 	ldw	r3,8(sp)
   26a64:	d8800615 	stw	r2,24(sp)
   26a68:	18eb883a 	add	r21,r3,r3
   26a6c:	ad6b883a 	add	r21,r21,r21
   26a70:	10c00504 	addi	r3,r2,20
   26a74:	1d6b883a 	add	r21,r3,r21
   26a78:	d8c00115 	stw	r3,4(sp)
   26a7c:	dd400315 	stw	r21,12(sp)
   26a80:	1805883a 	mov	r2,r3
   26a84:	1d40042e 	bgeu	r3,r21,26a98 <__multiply+0xa8>
   26a88:	d8c00317 	ldw	r3,12(sp)
   26a8c:	10000015 	stw	zero,0(r2)
   26a90:	10800104 	addi	r2,r2,4
   26a94:	10fffc36 	bltu	r2,r3,26a88 <__alt_data_end+0xfffe6a88>
   26a98:	8c63883a 	add	r17,r17,r17
   26a9c:	b5800504 	addi	r22,r22,20
   26aa0:	8c63883a 	add	r17,r17,r17
   26aa4:	94800504 	addi	r18,r18,20
   26aa8:	8421883a 	add	r16,r16,r16
   26aac:	b463883a 	add	r17,r22,r17
   26ab0:	8421883a 	add	r16,r16,r16
   26ab4:	dd800015 	stw	r22,0(sp)
   26ab8:	dc800415 	stw	r18,16(sp)
   26abc:	dc400515 	stw	r17,20(sp)
   26ac0:	9429883a 	add	r20,r18,r16
   26ac4:	b4404f2e 	bgeu	r22,r17,26c04 <__multiply+0x214>
   26ac8:	d8c00017 	ldw	r3,0(sp)
   26acc:	1c800017 	ldw	r18,0(r3)
   26ad0:	947fffcc 	andi	r17,r18,65535
   26ad4:	88001e26 	beq	r17,zero,26b50 <__multiply+0x160>
   26ad8:	dd800117 	ldw	r22,4(sp)
   26adc:	dd400417 	ldw	r21,16(sp)
   26ae0:	0027883a 	mov	r19,zero
   26ae4:	ac800017 	ldw	r18,0(r21)
   26ae8:	b4000017 	ldw	r16,0(r22)
   26aec:	880b883a 	mov	r5,r17
   26af0:	913fffcc 	andi	r4,r18,65535
   26af4:	002ad9c0 	call	2ad9c <__mulsi3>
   26af8:	9008d43a 	srli	r4,r18,16
   26afc:	84bfffcc 	andi	r18,r16,65535
   26b00:	1485883a 	add	r2,r2,r18
   26b04:	14e5883a 	add	r18,r2,r19
   26b08:	8020d43a 	srli	r16,r16,16
   26b0c:	9026d43a 	srli	r19,r18,16
   26b10:	880b883a 	mov	r5,r17
   26b14:	002ad9c0 	call	2ad9c <__mulsi3>
   26b18:	1405883a 	add	r2,r2,r16
   26b1c:	14e1883a 	add	r16,r2,r19
   26b20:	90ffffcc 	andi	r3,r18,65535
   26b24:	8024943a 	slli	r18,r16,16
   26b28:	ad400104 	addi	r21,r21,4
   26b2c:	b005883a 	mov	r2,r22
   26b30:	90c6b03a 	or	r3,r18,r3
   26b34:	b0c00015 	stw	r3,0(r22)
   26b38:	8026d43a 	srli	r19,r16,16
   26b3c:	b5800104 	addi	r22,r22,4
   26b40:	ad3fe836 	bltu	r21,r20,26ae4 <__alt_data_end+0xfffe6ae4>
   26b44:	d8c00017 	ldw	r3,0(sp)
   26b48:	14c00115 	stw	r19,4(r2)
   26b4c:	1c800017 	ldw	r18,0(r3)
   26b50:	9024d43a 	srli	r18,r18,16
   26b54:	90002226 	beq	r18,zero,26be0 <__multiply+0x1f0>
   26b58:	d8c00117 	ldw	r3,4(sp)
   26b5c:	dd800417 	ldw	r22,16(sp)
   26b60:	002f883a 	mov	r23,zero
   26b64:	1f000017 	ldw	fp,0(r3)
   26b68:	1823883a 	mov	r17,r3
   26b6c:	182b883a 	mov	r21,r3
   26b70:	e021883a 	mov	r16,fp
   26b74:	00000106 	br	26b7c <__multiply+0x18c>
   26b78:	982b883a 	mov	r21,r19
   26b7c:	b100000b 	ldhu	r4,0(r22)
   26b80:	8020d43a 	srli	r16,r16,16
   26b84:	900b883a 	mov	r5,r18
   26b88:	002ad9c0 	call	2ad9c <__mulsi3>
   26b8c:	1405883a 	add	r2,r2,r16
   26b90:	15ef883a 	add	r23,r2,r23
   26b94:	b804943a 	slli	r2,r23,16
   26b98:	e0ffffcc 	andi	r3,fp,65535
   26b9c:	8c400104 	addi	r17,r17,4
   26ba0:	10c6b03a 	or	r3,r2,r3
   26ba4:	88ffff15 	stw	r3,-4(r17)
   26ba8:	b5800104 	addi	r22,r22,4
   26bac:	b13fff17 	ldw	r4,-4(r22)
   26bb0:	acc00104 	addi	r19,r21,4
   26bb4:	900b883a 	mov	r5,r18
   26bb8:	2008d43a 	srli	r4,r4,16
   26bbc:	9c000017 	ldw	r16,0(r19)
   26bc0:	002ad9c0 	call	2ad9c <__mulsi3>
   26bc4:	b806d43a 	srli	r3,r23,16
   26bc8:	813fffcc 	andi	r4,r16,65535
   26bcc:	1105883a 	add	r2,r2,r4
   26bd0:	10f9883a 	add	fp,r2,r3
   26bd4:	e02ed43a 	srli	r23,fp,16
   26bd8:	b53fe736 	bltu	r22,r20,26b78 <__alt_data_end+0xfffe6b78>
   26bdc:	af000115 	stw	fp,4(r21)
   26be0:	d8c00017 	ldw	r3,0(sp)
   26be4:	d9000517 	ldw	r4,20(sp)
   26be8:	18c00104 	addi	r3,r3,4
   26bec:	d8c00015 	stw	r3,0(sp)
   26bf0:	d8c00117 	ldw	r3,4(sp)
   26bf4:	18c00104 	addi	r3,r3,4
   26bf8:	d8c00115 	stw	r3,4(sp)
   26bfc:	d8c00017 	ldw	r3,0(sp)
   26c00:	193fb136 	bltu	r3,r4,26ac8 <__alt_data_end+0xfffe6ac8>
   26c04:	d8c00217 	ldw	r3,8(sp)
   26c08:	00c00c0e 	bge	zero,r3,26c3c <__multiply+0x24c>
   26c0c:	d8c00317 	ldw	r3,12(sp)
   26c10:	18bfff17 	ldw	r2,-4(r3)
   26c14:	1d7fff04 	addi	r21,r3,-4
   26c18:	10000326 	beq	r2,zero,26c28 <__multiply+0x238>
   26c1c:	00000706 	br	26c3c <__multiply+0x24c>
   26c20:	a8800017 	ldw	r2,0(r21)
   26c24:	1000051e 	bne	r2,zero,26c3c <__multiply+0x24c>
   26c28:	d8c00217 	ldw	r3,8(sp)
   26c2c:	ad7fff04 	addi	r21,r21,-4
   26c30:	18ffffc4 	addi	r3,r3,-1
   26c34:	d8c00215 	stw	r3,8(sp)
   26c38:	183ff91e 	bne	r3,zero,26c20 <__alt_data_end+0xfffe6c20>
   26c3c:	d8c00617 	ldw	r3,24(sp)
   26c40:	d9000217 	ldw	r4,8(sp)
   26c44:	1805883a 	mov	r2,r3
   26c48:	19000415 	stw	r4,16(r3)
   26c4c:	dfc01017 	ldw	ra,64(sp)
   26c50:	df000f17 	ldw	fp,60(sp)
   26c54:	ddc00e17 	ldw	r23,56(sp)
   26c58:	dd800d17 	ldw	r22,52(sp)
   26c5c:	dd400c17 	ldw	r21,48(sp)
   26c60:	dd000b17 	ldw	r20,44(sp)
   26c64:	dcc00a17 	ldw	r19,40(sp)
   26c68:	dc800917 	ldw	r18,36(sp)
   26c6c:	dc400817 	ldw	r17,32(sp)
   26c70:	dc000717 	ldw	r16,28(sp)
   26c74:	dec01104 	addi	sp,sp,68
   26c78:	f800283a 	ret

00026c7c <__pow5mult>:
   26c7c:	defffa04 	addi	sp,sp,-24
   26c80:	dcc00315 	stw	r19,12(sp)
   26c84:	dc000015 	stw	r16,0(sp)
   26c88:	dfc00515 	stw	ra,20(sp)
   26c8c:	dd000415 	stw	r20,16(sp)
   26c90:	dc800215 	stw	r18,8(sp)
   26c94:	dc400115 	stw	r17,4(sp)
   26c98:	308000cc 	andi	r2,r6,3
   26c9c:	3021883a 	mov	r16,r6
   26ca0:	2027883a 	mov	r19,r4
   26ca4:	10002f1e 	bne	r2,zero,26d64 <__pow5mult+0xe8>
   26ca8:	2825883a 	mov	r18,r5
   26cac:	8021d0ba 	srai	r16,r16,2
   26cb0:	80001a26 	beq	r16,zero,26d1c <__pow5mult+0xa0>
   26cb4:	9c401217 	ldw	r17,72(r19)
   26cb8:	8800061e 	bne	r17,zero,26cd4 <__pow5mult+0x58>
   26cbc:	00003406 	br	26d90 <__pow5mult+0x114>
   26cc0:	8021d07a 	srai	r16,r16,1
   26cc4:	80001526 	beq	r16,zero,26d1c <__pow5mult+0xa0>
   26cc8:	88800017 	ldw	r2,0(r17)
   26ccc:	10001c26 	beq	r2,zero,26d40 <__pow5mult+0xc4>
   26cd0:	1023883a 	mov	r17,r2
   26cd4:	8080004c 	andi	r2,r16,1
   26cd8:	103ff926 	beq	r2,zero,26cc0 <__alt_data_end+0xfffe6cc0>
   26cdc:	880d883a 	mov	r6,r17
   26ce0:	900b883a 	mov	r5,r18
   26ce4:	9809883a 	mov	r4,r19
   26ce8:	00269f00 	call	269f0 <__multiply>
   26cec:	90001b26 	beq	r18,zero,26d5c <__pow5mult+0xe0>
   26cf0:	91000117 	ldw	r4,4(r18)
   26cf4:	98c01317 	ldw	r3,76(r19)
   26cf8:	8021d07a 	srai	r16,r16,1
   26cfc:	2109883a 	add	r4,r4,r4
   26d00:	2109883a 	add	r4,r4,r4
   26d04:	1907883a 	add	r3,r3,r4
   26d08:	19000017 	ldw	r4,0(r3)
   26d0c:	91000015 	stw	r4,0(r18)
   26d10:	1c800015 	stw	r18,0(r3)
   26d14:	1025883a 	mov	r18,r2
   26d18:	803feb1e 	bne	r16,zero,26cc8 <__alt_data_end+0xfffe6cc8>
   26d1c:	9005883a 	mov	r2,r18
   26d20:	dfc00517 	ldw	ra,20(sp)
   26d24:	dd000417 	ldw	r20,16(sp)
   26d28:	dcc00317 	ldw	r19,12(sp)
   26d2c:	dc800217 	ldw	r18,8(sp)
   26d30:	dc400117 	ldw	r17,4(sp)
   26d34:	dc000017 	ldw	r16,0(sp)
   26d38:	dec00604 	addi	sp,sp,24
   26d3c:	f800283a 	ret
   26d40:	880d883a 	mov	r6,r17
   26d44:	880b883a 	mov	r5,r17
   26d48:	9809883a 	mov	r4,r19
   26d4c:	00269f00 	call	269f0 <__multiply>
   26d50:	88800015 	stw	r2,0(r17)
   26d54:	10000015 	stw	zero,0(r2)
   26d58:	003fdd06 	br	26cd0 <__alt_data_end+0xfffe6cd0>
   26d5c:	1025883a 	mov	r18,r2
   26d60:	003fd706 	br	26cc0 <__alt_data_end+0xfffe6cc0>
   26d64:	10bfffc4 	addi	r2,r2,-1
   26d68:	1085883a 	add	r2,r2,r2
   26d6c:	00c000f4 	movhi	r3,3
   26d70:	18c9bc04 	addi	r3,r3,9968
   26d74:	1085883a 	add	r2,r2,r2
   26d78:	1885883a 	add	r2,r3,r2
   26d7c:	11800017 	ldw	r6,0(r2)
   26d80:	000f883a 	mov	r7,zero
   26d84:	00266500 	call	26650 <__multadd>
   26d88:	1025883a 	mov	r18,r2
   26d8c:	003fc706 	br	26cac <__alt_data_end+0xfffe6cac>
   26d90:	05000044 	movi	r20,1
   26d94:	a00b883a 	mov	r5,r20
   26d98:	9809883a 	mov	r4,r19
   26d9c:	00265800 	call	26580 <_Balloc>
   26da0:	1023883a 	mov	r17,r2
   26da4:	00809c44 	movi	r2,625
   26da8:	88800515 	stw	r2,20(r17)
   26dac:	8d000415 	stw	r20,16(r17)
   26db0:	9c401215 	stw	r17,72(r19)
   26db4:	88000015 	stw	zero,0(r17)
   26db8:	003fc606 	br	26cd4 <__alt_data_end+0xfffe6cd4>

00026dbc <__lshift>:
   26dbc:	defff904 	addi	sp,sp,-28
   26dc0:	dd400515 	stw	r21,20(sp)
   26dc4:	dcc00315 	stw	r19,12(sp)
   26dc8:	302bd17a 	srai	r21,r6,5
   26dcc:	2cc00417 	ldw	r19,16(r5)
   26dd0:	28800217 	ldw	r2,8(r5)
   26dd4:	dd000415 	stw	r20,16(sp)
   26dd8:	ace7883a 	add	r19,r21,r19
   26ddc:	dc800215 	stw	r18,8(sp)
   26de0:	dc400115 	stw	r17,4(sp)
   26de4:	dc000015 	stw	r16,0(sp)
   26de8:	dfc00615 	stw	ra,24(sp)
   26dec:	9c000044 	addi	r16,r19,1
   26df0:	2823883a 	mov	r17,r5
   26df4:	3029883a 	mov	r20,r6
   26df8:	2025883a 	mov	r18,r4
   26dfc:	29400117 	ldw	r5,4(r5)
   26e00:	1400030e 	bge	r2,r16,26e10 <__lshift+0x54>
   26e04:	1085883a 	add	r2,r2,r2
   26e08:	29400044 	addi	r5,r5,1
   26e0c:	143ffd16 	blt	r2,r16,26e04 <__alt_data_end+0xfffe6e04>
   26e10:	9009883a 	mov	r4,r18
   26e14:	00265800 	call	26580 <_Balloc>
   26e18:	10c00504 	addi	r3,r2,20
   26e1c:	0540070e 	bge	zero,r21,26e3c <__lshift+0x80>
   26e20:	ad6b883a 	add	r21,r21,r21
   26e24:	ad6b883a 	add	r21,r21,r21
   26e28:	1809883a 	mov	r4,r3
   26e2c:	1d47883a 	add	r3,r3,r21
   26e30:	20000015 	stw	zero,0(r4)
   26e34:	21000104 	addi	r4,r4,4
   26e38:	193ffd1e 	bne	r3,r4,26e30 <__alt_data_end+0xfffe6e30>
   26e3c:	8a000417 	ldw	r8,16(r17)
   26e40:	89000504 	addi	r4,r17,20
   26e44:	a18007cc 	andi	r6,r20,31
   26e48:	4211883a 	add	r8,r8,r8
   26e4c:	4211883a 	add	r8,r8,r8
   26e50:	2211883a 	add	r8,r4,r8
   26e54:	30002326 	beq	r6,zero,26ee4 <__lshift+0x128>
   26e58:	02400804 	movi	r9,32
   26e5c:	4993c83a 	sub	r9,r9,r6
   26e60:	000b883a 	mov	r5,zero
   26e64:	21c00017 	ldw	r7,0(r4)
   26e68:	1815883a 	mov	r10,r3
   26e6c:	18c00104 	addi	r3,r3,4
   26e70:	398e983a 	sll	r7,r7,r6
   26e74:	21000104 	addi	r4,r4,4
   26e78:	394ab03a 	or	r5,r7,r5
   26e7c:	197fff15 	stw	r5,-4(r3)
   26e80:	217fff17 	ldw	r5,-4(r4)
   26e84:	2a4ad83a 	srl	r5,r5,r9
   26e88:	223ff636 	bltu	r4,r8,26e64 <__alt_data_end+0xfffe6e64>
   26e8c:	51400115 	stw	r5,4(r10)
   26e90:	28001a1e 	bne	r5,zero,26efc <__lshift+0x140>
   26e94:	843fffc4 	addi	r16,r16,-1
   26e98:	14000415 	stw	r16,16(r2)
   26e9c:	88000826 	beq	r17,zero,26ec0 <__lshift+0x104>
   26ea0:	89000117 	ldw	r4,4(r17)
   26ea4:	90c01317 	ldw	r3,76(r18)
   26ea8:	2109883a 	add	r4,r4,r4
   26eac:	2109883a 	add	r4,r4,r4
   26eb0:	1907883a 	add	r3,r3,r4
   26eb4:	19000017 	ldw	r4,0(r3)
   26eb8:	89000015 	stw	r4,0(r17)
   26ebc:	1c400015 	stw	r17,0(r3)
   26ec0:	dfc00617 	ldw	ra,24(sp)
   26ec4:	dd400517 	ldw	r21,20(sp)
   26ec8:	dd000417 	ldw	r20,16(sp)
   26ecc:	dcc00317 	ldw	r19,12(sp)
   26ed0:	dc800217 	ldw	r18,8(sp)
   26ed4:	dc400117 	ldw	r17,4(sp)
   26ed8:	dc000017 	ldw	r16,0(sp)
   26edc:	dec00704 	addi	sp,sp,28
   26ee0:	f800283a 	ret
   26ee4:	21400017 	ldw	r5,0(r4)
   26ee8:	18c00104 	addi	r3,r3,4
   26eec:	21000104 	addi	r4,r4,4
   26ef0:	197fff15 	stw	r5,-4(r3)
   26ef4:	223ffb36 	bltu	r4,r8,26ee4 <__alt_data_end+0xfffe6ee4>
   26ef8:	003fe606 	br	26e94 <__alt_data_end+0xfffe6e94>
   26efc:	9c000084 	addi	r16,r19,2
   26f00:	003fe406 	br	26e94 <__alt_data_end+0xfffe6e94>

00026f04 <__mcmp>:
   26f04:	20800417 	ldw	r2,16(r4)
   26f08:	28c00417 	ldw	r3,16(r5)
   26f0c:	10c5c83a 	sub	r2,r2,r3
   26f10:	1000111e 	bne	r2,zero,26f58 <__mcmp+0x54>
   26f14:	18c7883a 	add	r3,r3,r3
   26f18:	18c7883a 	add	r3,r3,r3
   26f1c:	21000504 	addi	r4,r4,20
   26f20:	29400504 	addi	r5,r5,20
   26f24:	20c5883a 	add	r2,r4,r3
   26f28:	28cb883a 	add	r5,r5,r3
   26f2c:	00000106 	br	26f34 <__mcmp+0x30>
   26f30:	20800a2e 	bgeu	r4,r2,26f5c <__mcmp+0x58>
   26f34:	10bfff04 	addi	r2,r2,-4
   26f38:	297fff04 	addi	r5,r5,-4
   26f3c:	11800017 	ldw	r6,0(r2)
   26f40:	28c00017 	ldw	r3,0(r5)
   26f44:	30fffa26 	beq	r6,r3,26f30 <__alt_data_end+0xfffe6f30>
   26f48:	30c00236 	bltu	r6,r3,26f54 <__mcmp+0x50>
   26f4c:	00800044 	movi	r2,1
   26f50:	f800283a 	ret
   26f54:	00bfffc4 	movi	r2,-1
   26f58:	f800283a 	ret
   26f5c:	0005883a 	mov	r2,zero
   26f60:	f800283a 	ret

00026f64 <__mdiff>:
   26f64:	28c00417 	ldw	r3,16(r5)
   26f68:	30800417 	ldw	r2,16(r6)
   26f6c:	defffa04 	addi	sp,sp,-24
   26f70:	dcc00315 	stw	r19,12(sp)
   26f74:	dc800215 	stw	r18,8(sp)
   26f78:	dfc00515 	stw	ra,20(sp)
   26f7c:	dd000415 	stw	r20,16(sp)
   26f80:	dc400115 	stw	r17,4(sp)
   26f84:	dc000015 	stw	r16,0(sp)
   26f88:	1887c83a 	sub	r3,r3,r2
   26f8c:	2825883a 	mov	r18,r5
   26f90:	3027883a 	mov	r19,r6
   26f94:	1800141e 	bne	r3,zero,26fe8 <__mdiff+0x84>
   26f98:	1085883a 	add	r2,r2,r2
   26f9c:	1085883a 	add	r2,r2,r2
   26fa0:	2a000504 	addi	r8,r5,20
   26fa4:	34000504 	addi	r16,r6,20
   26fa8:	4087883a 	add	r3,r8,r2
   26fac:	8085883a 	add	r2,r16,r2
   26fb0:	00000106 	br	26fb8 <__mdiff+0x54>
   26fb4:	40c0592e 	bgeu	r8,r3,2711c <__mdiff+0x1b8>
   26fb8:	18ffff04 	addi	r3,r3,-4
   26fbc:	10bfff04 	addi	r2,r2,-4
   26fc0:	19c00017 	ldw	r7,0(r3)
   26fc4:	11400017 	ldw	r5,0(r2)
   26fc8:	397ffa26 	beq	r7,r5,26fb4 <__alt_data_end+0xfffe6fb4>
   26fcc:	3940592e 	bgeu	r7,r5,27134 <__mdiff+0x1d0>
   26fd0:	9005883a 	mov	r2,r18
   26fd4:	4023883a 	mov	r17,r8
   26fd8:	9825883a 	mov	r18,r19
   26fdc:	05000044 	movi	r20,1
   26fe0:	1027883a 	mov	r19,r2
   26fe4:	00000406 	br	26ff8 <__mdiff+0x94>
   26fe8:	18005616 	blt	r3,zero,27144 <__mdiff+0x1e0>
   26fec:	34400504 	addi	r17,r6,20
   26ff0:	2c000504 	addi	r16,r5,20
   26ff4:	0029883a 	mov	r20,zero
   26ff8:	91400117 	ldw	r5,4(r18)
   26ffc:	00265800 	call	26580 <_Balloc>
   27000:	92400417 	ldw	r9,16(r18)
   27004:	9b000417 	ldw	r12,16(r19)
   27008:	12c00504 	addi	r11,r2,20
   2700c:	4a51883a 	add	r8,r9,r9
   27010:	6319883a 	add	r12,r12,r12
   27014:	4211883a 	add	r8,r8,r8
   27018:	6319883a 	add	r12,r12,r12
   2701c:	15000315 	stw	r20,12(r2)
   27020:	8211883a 	add	r8,r16,r8
   27024:	8b19883a 	add	r12,r17,r12
   27028:	0007883a 	mov	r3,zero
   2702c:	81400017 	ldw	r5,0(r16)
   27030:	89c00017 	ldw	r7,0(r17)
   27034:	59800104 	addi	r6,r11,4
   27038:	293fffcc 	andi	r4,r5,65535
   2703c:	20c7883a 	add	r3,r4,r3
   27040:	393fffcc 	andi	r4,r7,65535
   27044:	1909c83a 	sub	r4,r3,r4
   27048:	280ad43a 	srli	r5,r5,16
   2704c:	380ed43a 	srli	r7,r7,16
   27050:	2007d43a 	srai	r3,r4,16
   27054:	213fffcc 	andi	r4,r4,65535
   27058:	29cbc83a 	sub	r5,r5,r7
   2705c:	28c7883a 	add	r3,r5,r3
   27060:	180a943a 	slli	r5,r3,16
   27064:	8c400104 	addi	r17,r17,4
   27068:	84000104 	addi	r16,r16,4
   2706c:	2908b03a 	or	r4,r5,r4
   27070:	59000015 	stw	r4,0(r11)
   27074:	1807d43a 	srai	r3,r3,16
   27078:	3015883a 	mov	r10,r6
   2707c:	3017883a 	mov	r11,r6
   27080:	8b3fea36 	bltu	r17,r12,2702c <__alt_data_end+0xfffe702c>
   27084:	8200162e 	bgeu	r16,r8,270e0 <__mdiff+0x17c>
   27088:	8017883a 	mov	r11,r16
   2708c:	59400017 	ldw	r5,0(r11)
   27090:	31800104 	addi	r6,r6,4
   27094:	5ac00104 	addi	r11,r11,4
   27098:	293fffcc 	andi	r4,r5,65535
   2709c:	20c7883a 	add	r3,r4,r3
   270a0:	280ed43a 	srli	r7,r5,16
   270a4:	180bd43a 	srai	r5,r3,16
   270a8:	193fffcc 	andi	r4,r3,65535
   270ac:	3947883a 	add	r3,r7,r5
   270b0:	180a943a 	slli	r5,r3,16
   270b4:	1807d43a 	srai	r3,r3,16
   270b8:	2908b03a 	or	r4,r5,r4
   270bc:	313fff15 	stw	r4,-4(r6)
   270c0:	5a3ff236 	bltu	r11,r8,2708c <__alt_data_end+0xfffe708c>
   270c4:	0406303a 	nor	r3,zero,r16
   270c8:	1a07883a 	add	r3,r3,r8
   270cc:	1806d0ba 	srli	r3,r3,2
   270d0:	18c00044 	addi	r3,r3,1
   270d4:	18c7883a 	add	r3,r3,r3
   270d8:	18c7883a 	add	r3,r3,r3
   270dc:	50d5883a 	add	r10,r10,r3
   270e0:	50ffff04 	addi	r3,r10,-4
   270e4:	2000041e 	bne	r4,zero,270f8 <__mdiff+0x194>
   270e8:	18ffff04 	addi	r3,r3,-4
   270ec:	19000017 	ldw	r4,0(r3)
   270f0:	4a7fffc4 	addi	r9,r9,-1
   270f4:	203ffc26 	beq	r4,zero,270e8 <__alt_data_end+0xfffe70e8>
   270f8:	12400415 	stw	r9,16(r2)
   270fc:	dfc00517 	ldw	ra,20(sp)
   27100:	dd000417 	ldw	r20,16(sp)
   27104:	dcc00317 	ldw	r19,12(sp)
   27108:	dc800217 	ldw	r18,8(sp)
   2710c:	dc400117 	ldw	r17,4(sp)
   27110:	dc000017 	ldw	r16,0(sp)
   27114:	dec00604 	addi	sp,sp,24
   27118:	f800283a 	ret
   2711c:	000b883a 	mov	r5,zero
   27120:	00265800 	call	26580 <_Balloc>
   27124:	00c00044 	movi	r3,1
   27128:	10c00415 	stw	r3,16(r2)
   2712c:	10000515 	stw	zero,20(r2)
   27130:	003ff206 	br	270fc <__alt_data_end+0xfffe70fc>
   27134:	8023883a 	mov	r17,r16
   27138:	0029883a 	mov	r20,zero
   2713c:	4021883a 	mov	r16,r8
   27140:	003fad06 	br	26ff8 <__alt_data_end+0xfffe6ff8>
   27144:	9005883a 	mov	r2,r18
   27148:	94400504 	addi	r17,r18,20
   2714c:	9c000504 	addi	r16,r19,20
   27150:	9825883a 	mov	r18,r19
   27154:	05000044 	movi	r20,1
   27158:	1027883a 	mov	r19,r2
   2715c:	003fa606 	br	26ff8 <__alt_data_end+0xfffe6ff8>

00027160 <__ulp>:
   27160:	295ffc2c 	andhi	r5,r5,32752
   27164:	00bf3034 	movhi	r2,64704
   27168:	2887883a 	add	r3,r5,r2
   2716c:	00c0020e 	bge	zero,r3,27178 <__ulp+0x18>
   27170:	0005883a 	mov	r2,zero
   27174:	f800283a 	ret
   27178:	00c7c83a 	sub	r3,zero,r3
   2717c:	1807d53a 	srai	r3,r3,20
   27180:	008004c4 	movi	r2,19
   27184:	10c00b0e 	bge	r2,r3,271b4 <__ulp+0x54>
   27188:	18bffb04 	addi	r2,r3,-20
   2718c:	01000784 	movi	r4,30
   27190:	0007883a 	mov	r3,zero
   27194:	20800516 	blt	r4,r2,271ac <__ulp+0x4c>
   27198:	010007c4 	movi	r4,31
   2719c:	2089c83a 	sub	r4,r4,r2
   271a0:	00800044 	movi	r2,1
   271a4:	1104983a 	sll	r2,r2,r4
   271a8:	f800283a 	ret
   271ac:	00800044 	movi	r2,1
   271b0:	f800283a 	ret
   271b4:	01400234 	movhi	r5,8
   271b8:	28c7d83a 	sra	r3,r5,r3
   271bc:	0005883a 	mov	r2,zero
   271c0:	f800283a 	ret

000271c4 <__b2d>:
   271c4:	defffa04 	addi	sp,sp,-24
   271c8:	dc000015 	stw	r16,0(sp)
   271cc:	24000417 	ldw	r16,16(r4)
   271d0:	dc400115 	stw	r17,4(sp)
   271d4:	24400504 	addi	r17,r4,20
   271d8:	8421883a 	add	r16,r16,r16
   271dc:	8421883a 	add	r16,r16,r16
   271e0:	8c21883a 	add	r16,r17,r16
   271e4:	dc800215 	stw	r18,8(sp)
   271e8:	84bfff17 	ldw	r18,-4(r16)
   271ec:	dd000415 	stw	r20,16(sp)
   271f0:	dcc00315 	stw	r19,12(sp)
   271f4:	9009883a 	mov	r4,r18
   271f8:	2829883a 	mov	r20,r5
   271fc:	dfc00515 	stw	ra,20(sp)
   27200:	002689c0 	call	2689c <__hi0bits>
   27204:	00c00804 	movi	r3,32
   27208:	1889c83a 	sub	r4,r3,r2
   2720c:	a1000015 	stw	r4,0(r20)
   27210:	01000284 	movi	r4,10
   27214:	84ffff04 	addi	r19,r16,-4
   27218:	20801216 	blt	r4,r2,27264 <__b2d+0xa0>
   2721c:	018002c4 	movi	r6,11
   27220:	308dc83a 	sub	r6,r6,r2
   27224:	9186d83a 	srl	r3,r18,r6
   27228:	18cffc34 	orhi	r3,r3,16368
   2722c:	8cc0212e 	bgeu	r17,r19,272b4 <__b2d+0xf0>
   27230:	813ffe17 	ldw	r4,-8(r16)
   27234:	218cd83a 	srl	r6,r4,r6
   27238:	10800544 	addi	r2,r2,21
   2723c:	9084983a 	sll	r2,r18,r2
   27240:	1184b03a 	or	r2,r2,r6
   27244:	dfc00517 	ldw	ra,20(sp)
   27248:	dd000417 	ldw	r20,16(sp)
   2724c:	dcc00317 	ldw	r19,12(sp)
   27250:	dc800217 	ldw	r18,8(sp)
   27254:	dc400117 	ldw	r17,4(sp)
   27258:	dc000017 	ldw	r16,0(sp)
   2725c:	dec00604 	addi	sp,sp,24
   27260:	f800283a 	ret
   27264:	8cc00f2e 	bgeu	r17,r19,272a4 <__b2d+0xe0>
   27268:	117ffd44 	addi	r5,r2,-11
   2726c:	80bffe17 	ldw	r2,-8(r16)
   27270:	28000e26 	beq	r5,zero,272ac <__b2d+0xe8>
   27274:	1949c83a 	sub	r4,r3,r5
   27278:	9164983a 	sll	r18,r18,r5
   2727c:	1106d83a 	srl	r3,r2,r4
   27280:	81bffe04 	addi	r6,r16,-8
   27284:	948ffc34 	orhi	r18,r18,16368
   27288:	90c6b03a 	or	r3,r18,r3
   2728c:	89800e2e 	bgeu	r17,r6,272c8 <__b2d+0x104>
   27290:	81bffd17 	ldw	r6,-12(r16)
   27294:	1144983a 	sll	r2,r2,r5
   27298:	310ad83a 	srl	r5,r6,r4
   2729c:	2884b03a 	or	r2,r5,r2
   272a0:	003fe806 	br	27244 <__alt_data_end+0xfffe7244>
   272a4:	10bffd44 	addi	r2,r2,-11
   272a8:	1000041e 	bne	r2,zero,272bc <__b2d+0xf8>
   272ac:	90cffc34 	orhi	r3,r18,16368
   272b0:	003fe406 	br	27244 <__alt_data_end+0xfffe7244>
   272b4:	000d883a 	mov	r6,zero
   272b8:	003fdf06 	br	27238 <__alt_data_end+0xfffe7238>
   272bc:	90a4983a 	sll	r18,r18,r2
   272c0:	0005883a 	mov	r2,zero
   272c4:	003ff906 	br	272ac <__alt_data_end+0xfffe72ac>
   272c8:	1144983a 	sll	r2,r2,r5
   272cc:	003fdd06 	br	27244 <__alt_data_end+0xfffe7244>

000272d0 <__d2b>:
   272d0:	defff804 	addi	sp,sp,-32
   272d4:	dc000215 	stw	r16,8(sp)
   272d8:	3021883a 	mov	r16,r6
   272dc:	dc400315 	stw	r17,12(sp)
   272e0:	8022907a 	slli	r17,r16,1
   272e4:	dd000615 	stw	r20,24(sp)
   272e8:	2829883a 	mov	r20,r5
   272ec:	01400044 	movi	r5,1
   272f0:	dcc00515 	stw	r19,20(sp)
   272f4:	dc800415 	stw	r18,16(sp)
   272f8:	dfc00715 	stw	ra,28(sp)
   272fc:	3825883a 	mov	r18,r7
   27300:	8822d57a 	srli	r17,r17,21
   27304:	00265800 	call	26580 <_Balloc>
   27308:	1027883a 	mov	r19,r2
   2730c:	00800434 	movhi	r2,16
   27310:	10bfffc4 	addi	r2,r2,-1
   27314:	808c703a 	and	r6,r16,r2
   27318:	88000126 	beq	r17,zero,27320 <__d2b+0x50>
   2731c:	31800434 	orhi	r6,r6,16
   27320:	d9800015 	stw	r6,0(sp)
   27324:	a0002426 	beq	r20,zero,273b8 <__d2b+0xe8>
   27328:	d9000104 	addi	r4,sp,4
   2732c:	dd000115 	stw	r20,4(sp)
   27330:	00269040 	call	26904 <__lo0bits>
   27334:	d8c00017 	ldw	r3,0(sp)
   27338:	10002f1e 	bne	r2,zero,273f8 <__d2b+0x128>
   2733c:	d9000117 	ldw	r4,4(sp)
   27340:	99000515 	stw	r4,20(r19)
   27344:	1821003a 	cmpeq	r16,r3,zero
   27348:	01000084 	movi	r4,2
   2734c:	2421c83a 	sub	r16,r4,r16
   27350:	98c00615 	stw	r3,24(r19)
   27354:	9c000415 	stw	r16,16(r19)
   27358:	88001f1e 	bne	r17,zero,273d8 <__d2b+0x108>
   2735c:	10bef384 	addi	r2,r2,-1074
   27360:	90800015 	stw	r2,0(r18)
   27364:	00900034 	movhi	r2,16384
   27368:	10bfffc4 	addi	r2,r2,-1
   2736c:	8085883a 	add	r2,r16,r2
   27370:	1085883a 	add	r2,r2,r2
   27374:	1085883a 	add	r2,r2,r2
   27378:	9885883a 	add	r2,r19,r2
   2737c:	11000517 	ldw	r4,20(r2)
   27380:	8020917a 	slli	r16,r16,5
   27384:	002689c0 	call	2689c <__hi0bits>
   27388:	d8c00817 	ldw	r3,32(sp)
   2738c:	8085c83a 	sub	r2,r16,r2
   27390:	18800015 	stw	r2,0(r3)
   27394:	9805883a 	mov	r2,r19
   27398:	dfc00717 	ldw	ra,28(sp)
   2739c:	dd000617 	ldw	r20,24(sp)
   273a0:	dcc00517 	ldw	r19,20(sp)
   273a4:	dc800417 	ldw	r18,16(sp)
   273a8:	dc400317 	ldw	r17,12(sp)
   273ac:	dc000217 	ldw	r16,8(sp)
   273b0:	dec00804 	addi	sp,sp,32
   273b4:	f800283a 	ret
   273b8:	d809883a 	mov	r4,sp
   273bc:	00269040 	call	26904 <__lo0bits>
   273c0:	d8c00017 	ldw	r3,0(sp)
   273c4:	04000044 	movi	r16,1
   273c8:	9c000415 	stw	r16,16(r19)
   273cc:	98c00515 	stw	r3,20(r19)
   273d0:	10800804 	addi	r2,r2,32
   273d4:	883fe126 	beq	r17,zero,2735c <__alt_data_end+0xfffe735c>
   273d8:	00c00d44 	movi	r3,53
   273dc:	8c7ef344 	addi	r17,r17,-1075
   273e0:	88a3883a 	add	r17,r17,r2
   273e4:	1885c83a 	sub	r2,r3,r2
   273e8:	d8c00817 	ldw	r3,32(sp)
   273ec:	94400015 	stw	r17,0(r18)
   273f0:	18800015 	stw	r2,0(r3)
   273f4:	003fe706 	br	27394 <__alt_data_end+0xfffe7394>
   273f8:	01000804 	movi	r4,32
   273fc:	2089c83a 	sub	r4,r4,r2
   27400:	1908983a 	sll	r4,r3,r4
   27404:	d9400117 	ldw	r5,4(sp)
   27408:	1886d83a 	srl	r3,r3,r2
   2740c:	2148b03a 	or	r4,r4,r5
   27410:	99000515 	stw	r4,20(r19)
   27414:	d8c00015 	stw	r3,0(sp)
   27418:	003fca06 	br	27344 <__alt_data_end+0xfffe7344>

0002741c <__ratio>:
   2741c:	defff904 	addi	sp,sp,-28
   27420:	dc400315 	stw	r17,12(sp)
   27424:	2823883a 	mov	r17,r5
   27428:	d9400104 	addi	r5,sp,4
   2742c:	dfc00615 	stw	ra,24(sp)
   27430:	dcc00515 	stw	r19,20(sp)
   27434:	dc800415 	stw	r18,16(sp)
   27438:	2027883a 	mov	r19,r4
   2743c:	dc000215 	stw	r16,8(sp)
   27440:	00271c40 	call	271c4 <__b2d>
   27444:	d80b883a 	mov	r5,sp
   27448:	8809883a 	mov	r4,r17
   2744c:	1025883a 	mov	r18,r2
   27450:	1821883a 	mov	r16,r3
   27454:	00271c40 	call	271c4 <__b2d>
   27458:	8a000417 	ldw	r8,16(r17)
   2745c:	99000417 	ldw	r4,16(r19)
   27460:	d9400117 	ldw	r5,4(sp)
   27464:	2209c83a 	sub	r4,r4,r8
   27468:	2010917a 	slli	r8,r4,5
   2746c:	d9000017 	ldw	r4,0(sp)
   27470:	2909c83a 	sub	r4,r5,r4
   27474:	4109883a 	add	r4,r8,r4
   27478:	01000e0e 	bge	zero,r4,274b4 <__ratio+0x98>
   2747c:	2008953a 	slli	r4,r4,20
   27480:	2421883a 	add	r16,r4,r16
   27484:	100d883a 	mov	r6,r2
   27488:	180f883a 	mov	r7,r3
   2748c:	9009883a 	mov	r4,r18
   27490:	800b883a 	mov	r5,r16
   27494:	002b6700 	call	2b670 <__divdf3>
   27498:	dfc00617 	ldw	ra,24(sp)
   2749c:	dcc00517 	ldw	r19,20(sp)
   274a0:	dc800417 	ldw	r18,16(sp)
   274a4:	dc400317 	ldw	r17,12(sp)
   274a8:	dc000217 	ldw	r16,8(sp)
   274ac:	dec00704 	addi	sp,sp,28
   274b0:	f800283a 	ret
   274b4:	2008953a 	slli	r4,r4,20
   274b8:	1907c83a 	sub	r3,r3,r4
   274bc:	003ff106 	br	27484 <__alt_data_end+0xfffe7484>

000274c0 <_mprec_log10>:
   274c0:	defffe04 	addi	sp,sp,-8
   274c4:	dc000015 	stw	r16,0(sp)
   274c8:	dfc00115 	stw	ra,4(sp)
   274cc:	008005c4 	movi	r2,23
   274d0:	2021883a 	mov	r16,r4
   274d4:	11000d0e 	bge	r2,r4,2750c <_mprec_log10+0x4c>
   274d8:	0005883a 	mov	r2,zero
   274dc:	00cffc34 	movhi	r3,16368
   274e0:	843fffc4 	addi	r16,r16,-1
   274e4:	000d883a 	mov	r6,zero
   274e8:	01d00934 	movhi	r7,16420
   274ec:	1009883a 	mov	r4,r2
   274f0:	180b883a 	mov	r5,r3
   274f4:	002c2980 	call	2c298 <__muldf3>
   274f8:	803ff91e 	bne	r16,zero,274e0 <__alt_data_end+0xfffe74e0>
   274fc:	dfc00117 	ldw	ra,4(sp)
   27500:	dc000017 	ldw	r16,0(sp)
   27504:	dec00204 	addi	sp,sp,8
   27508:	f800283a 	ret
   2750c:	202090fa 	slli	r16,r4,3
   27510:	008000f4 	movhi	r2,3
   27514:	1089d304 	addi	r2,r2,10060
   27518:	1421883a 	add	r16,r2,r16
   2751c:	80800017 	ldw	r2,0(r16)
   27520:	80c00117 	ldw	r3,4(r16)
   27524:	dfc00117 	ldw	ra,4(sp)
   27528:	dc000017 	ldw	r16,0(sp)
   2752c:	dec00204 	addi	sp,sp,8
   27530:	f800283a 	ret

00027534 <__copybits>:
   27534:	297fffc4 	addi	r5,r5,-1
   27538:	280fd17a 	srai	r7,r5,5
   2753c:	30c00417 	ldw	r3,16(r6)
   27540:	30800504 	addi	r2,r6,20
   27544:	39c00044 	addi	r7,r7,1
   27548:	18c7883a 	add	r3,r3,r3
   2754c:	39cf883a 	add	r7,r7,r7
   27550:	18c7883a 	add	r3,r3,r3
   27554:	39cf883a 	add	r7,r7,r7
   27558:	10c7883a 	add	r3,r2,r3
   2755c:	21cf883a 	add	r7,r4,r7
   27560:	10c00d2e 	bgeu	r2,r3,27598 <__copybits+0x64>
   27564:	200b883a 	mov	r5,r4
   27568:	12000017 	ldw	r8,0(r2)
   2756c:	29400104 	addi	r5,r5,4
   27570:	10800104 	addi	r2,r2,4
   27574:	2a3fff15 	stw	r8,-4(r5)
   27578:	10fffb36 	bltu	r2,r3,27568 <__alt_data_end+0xfffe7568>
   2757c:	1985c83a 	sub	r2,r3,r6
   27580:	10bffac4 	addi	r2,r2,-21
   27584:	1004d0ba 	srli	r2,r2,2
   27588:	10800044 	addi	r2,r2,1
   2758c:	1085883a 	add	r2,r2,r2
   27590:	1085883a 	add	r2,r2,r2
   27594:	2089883a 	add	r4,r4,r2
   27598:	21c0032e 	bgeu	r4,r7,275a8 <__copybits+0x74>
   2759c:	20000015 	stw	zero,0(r4)
   275a0:	21000104 	addi	r4,r4,4
   275a4:	21fffd36 	bltu	r4,r7,2759c <__alt_data_end+0xfffe759c>
   275a8:	f800283a 	ret

000275ac <__any_on>:
   275ac:	20c00417 	ldw	r3,16(r4)
   275b0:	2805d17a 	srai	r2,r5,5
   275b4:	21000504 	addi	r4,r4,20
   275b8:	18800d0e 	bge	r3,r2,275f0 <__any_on+0x44>
   275bc:	18c7883a 	add	r3,r3,r3
   275c0:	18c7883a 	add	r3,r3,r3
   275c4:	20c7883a 	add	r3,r4,r3
   275c8:	20c0192e 	bgeu	r4,r3,27630 <__any_on+0x84>
   275cc:	18bfff17 	ldw	r2,-4(r3)
   275d0:	18ffff04 	addi	r3,r3,-4
   275d4:	1000041e 	bne	r2,zero,275e8 <__any_on+0x3c>
   275d8:	20c0142e 	bgeu	r4,r3,2762c <__any_on+0x80>
   275dc:	18ffff04 	addi	r3,r3,-4
   275e0:	19400017 	ldw	r5,0(r3)
   275e4:	283ffc26 	beq	r5,zero,275d8 <__alt_data_end+0xfffe75d8>
   275e8:	00800044 	movi	r2,1
   275ec:	f800283a 	ret
   275f0:	10c00a0e 	bge	r2,r3,2761c <__any_on+0x70>
   275f4:	1085883a 	add	r2,r2,r2
   275f8:	1085883a 	add	r2,r2,r2
   275fc:	294007cc 	andi	r5,r5,31
   27600:	2087883a 	add	r3,r4,r2
   27604:	283ff026 	beq	r5,zero,275c8 <__alt_data_end+0xfffe75c8>
   27608:	19800017 	ldw	r6,0(r3)
   2760c:	3144d83a 	srl	r2,r6,r5
   27610:	114a983a 	sll	r5,r2,r5
   27614:	317ff41e 	bne	r6,r5,275e8 <__alt_data_end+0xfffe75e8>
   27618:	003feb06 	br	275c8 <__alt_data_end+0xfffe75c8>
   2761c:	1085883a 	add	r2,r2,r2
   27620:	1085883a 	add	r2,r2,r2
   27624:	2087883a 	add	r3,r4,r2
   27628:	003fe706 	br	275c8 <__alt_data_end+0xfffe75c8>
   2762c:	f800283a 	ret
   27630:	0005883a 	mov	r2,zero
   27634:	f800283a 	ret

00027638 <_putc_r>:
   27638:	defffc04 	addi	sp,sp,-16
   2763c:	dc000215 	stw	r16,8(sp)
   27640:	dfc00315 	stw	ra,12(sp)
   27644:	2021883a 	mov	r16,r4
   27648:	20000226 	beq	r4,zero,27654 <_putc_r+0x1c>
   2764c:	20800e17 	ldw	r2,56(r4)
   27650:	10001b26 	beq	r2,zero,276c0 <_putc_r+0x88>
   27654:	30800217 	ldw	r2,8(r6)
   27658:	10bfffc4 	addi	r2,r2,-1
   2765c:	30800215 	stw	r2,8(r6)
   27660:	10000a16 	blt	r2,zero,2768c <_putc_r+0x54>
   27664:	30800017 	ldw	r2,0(r6)
   27668:	11400005 	stb	r5,0(r2)
   2766c:	30800017 	ldw	r2,0(r6)
   27670:	10c00044 	addi	r3,r2,1
   27674:	30c00015 	stw	r3,0(r6)
   27678:	10800003 	ldbu	r2,0(r2)
   2767c:	dfc00317 	ldw	ra,12(sp)
   27680:	dc000217 	ldw	r16,8(sp)
   27684:	dec00404 	addi	sp,sp,16
   27688:	f800283a 	ret
   2768c:	30c00617 	ldw	r3,24(r6)
   27690:	10c00616 	blt	r2,r3,276ac <_putc_r+0x74>
   27694:	30800017 	ldw	r2,0(r6)
   27698:	00c00284 	movi	r3,10
   2769c:	11400005 	stb	r5,0(r2)
   276a0:	30800017 	ldw	r2,0(r6)
   276a4:	11400003 	ldbu	r5,0(r2)
   276a8:	28fff11e 	bne	r5,r3,27670 <__alt_data_end+0xfffe7670>
   276ac:	8009883a 	mov	r4,r16
   276b0:	dfc00317 	ldw	ra,12(sp)
   276b4:	dc000217 	ldw	r16,8(sp)
   276b8:	dec00404 	addi	sp,sp,16
   276bc:	00296dc1 	jmpi	296dc <__swbuf_r>
   276c0:	d9400015 	stw	r5,0(sp)
   276c4:	d9800115 	stw	r6,4(sp)
   276c8:	0024b580 	call	24b58 <__sinit>
   276cc:	d9800117 	ldw	r6,4(sp)
   276d0:	d9400017 	ldw	r5,0(sp)
   276d4:	003fdf06 	br	27654 <__alt_data_end+0xfffe7654>

000276d8 <putc>:
   276d8:	008000f4 	movhi	r2,3
   276dc:	defffc04 	addi	sp,sp,-16
   276e0:	10914f04 	addi	r2,r2,17724
   276e4:	dc000115 	stw	r16,4(sp)
   276e8:	14000017 	ldw	r16,0(r2)
   276ec:	dc400215 	stw	r17,8(sp)
   276f0:	dfc00315 	stw	ra,12(sp)
   276f4:	2023883a 	mov	r17,r4
   276f8:	80000226 	beq	r16,zero,27704 <putc+0x2c>
   276fc:	80800e17 	ldw	r2,56(r16)
   27700:	10001a26 	beq	r2,zero,2776c <putc+0x94>
   27704:	28800217 	ldw	r2,8(r5)
   27708:	10bfffc4 	addi	r2,r2,-1
   2770c:	28800215 	stw	r2,8(r5)
   27710:	10000b16 	blt	r2,zero,27740 <putc+0x68>
   27714:	28800017 	ldw	r2,0(r5)
   27718:	14400005 	stb	r17,0(r2)
   2771c:	28800017 	ldw	r2,0(r5)
   27720:	10c00044 	addi	r3,r2,1
   27724:	28c00015 	stw	r3,0(r5)
   27728:	10800003 	ldbu	r2,0(r2)
   2772c:	dfc00317 	ldw	ra,12(sp)
   27730:	dc400217 	ldw	r17,8(sp)
   27734:	dc000117 	ldw	r16,4(sp)
   27738:	dec00404 	addi	sp,sp,16
   2773c:	f800283a 	ret
   27740:	28c00617 	ldw	r3,24(r5)
   27744:	10c00e16 	blt	r2,r3,27780 <putc+0xa8>
   27748:	28800017 	ldw	r2,0(r5)
   2774c:	01000284 	movi	r4,10
   27750:	14400005 	stb	r17,0(r2)
   27754:	28800017 	ldw	r2,0(r5)
   27758:	10c00003 	ldbu	r3,0(r2)
   2775c:	193ff01e 	bne	r3,r4,27720 <__alt_data_end+0xfffe7720>
   27760:	280d883a 	mov	r6,r5
   27764:	180b883a 	mov	r5,r3
   27768:	00000706 	br	27788 <putc+0xb0>
   2776c:	8009883a 	mov	r4,r16
   27770:	d9400015 	stw	r5,0(sp)
   27774:	0024b580 	call	24b58 <__sinit>
   27778:	d9400017 	ldw	r5,0(sp)
   2777c:	003fe106 	br	27704 <__alt_data_end+0xfffe7704>
   27780:	280d883a 	mov	r6,r5
   27784:	880b883a 	mov	r5,r17
   27788:	8009883a 	mov	r4,r16
   2778c:	dfc00317 	ldw	ra,12(sp)
   27790:	dc400217 	ldw	r17,8(sp)
   27794:	dc000117 	ldw	r16,4(sp)
   27798:	dec00404 	addi	sp,sp,16
   2779c:	00296dc1 	jmpi	296dc <__swbuf_r>

000277a0 <_realloc_r>:
   277a0:	defff604 	addi	sp,sp,-40
   277a4:	dc800215 	stw	r18,8(sp)
   277a8:	dfc00915 	stw	ra,36(sp)
   277ac:	df000815 	stw	fp,32(sp)
   277b0:	ddc00715 	stw	r23,28(sp)
   277b4:	dd800615 	stw	r22,24(sp)
   277b8:	dd400515 	stw	r21,20(sp)
   277bc:	dd000415 	stw	r20,16(sp)
   277c0:	dcc00315 	stw	r19,12(sp)
   277c4:	dc400115 	stw	r17,4(sp)
   277c8:	dc000015 	stw	r16,0(sp)
   277cc:	3025883a 	mov	r18,r6
   277d0:	2800b726 	beq	r5,zero,27ab0 <_realloc_r+0x310>
   277d4:	282b883a 	mov	r21,r5
   277d8:	2029883a 	mov	r20,r4
   277dc:	002dc040 	call	2dc04 <__malloc_lock>
   277e0:	a8bfff17 	ldw	r2,-4(r21)
   277e4:	043fff04 	movi	r16,-4
   277e8:	90c002c4 	addi	r3,r18,11
   277ec:	01000584 	movi	r4,22
   277f0:	acfffe04 	addi	r19,r21,-8
   277f4:	1420703a 	and	r16,r2,r16
   277f8:	20c0332e 	bgeu	r4,r3,278c8 <_realloc_r+0x128>
   277fc:	047ffe04 	movi	r17,-8
   27800:	1c62703a 	and	r17,r3,r17
   27804:	8807883a 	mov	r3,r17
   27808:	88005816 	blt	r17,zero,2796c <_realloc_r+0x1cc>
   2780c:	8c805736 	bltu	r17,r18,2796c <_realloc_r+0x1cc>
   27810:	80c0300e 	bge	r16,r3,278d4 <_realloc_r+0x134>
   27814:	070000f4 	movhi	fp,3
   27818:	e70b8b04 	addi	fp,fp,11820
   2781c:	e1c00217 	ldw	r7,8(fp)
   27820:	9c09883a 	add	r4,r19,r16
   27824:	22000117 	ldw	r8,4(r4)
   27828:	21c06326 	beq	r4,r7,279b8 <_realloc_r+0x218>
   2782c:	017fff84 	movi	r5,-2
   27830:	414a703a 	and	r5,r8,r5
   27834:	214b883a 	add	r5,r4,r5
   27838:	29800117 	ldw	r6,4(r5)
   2783c:	3180004c 	andi	r6,r6,1
   27840:	30003f26 	beq	r6,zero,27940 <_realloc_r+0x1a0>
   27844:	1080004c 	andi	r2,r2,1
   27848:	10008326 	beq	r2,zero,27a58 <_realloc_r+0x2b8>
   2784c:	900b883a 	mov	r5,r18
   27850:	a009883a 	mov	r4,r20
   27854:	00258c40 	call	258c4 <_malloc_r>
   27858:	1025883a 	mov	r18,r2
   2785c:	10011e26 	beq	r2,zero,27cd8 <_realloc_r+0x538>
   27860:	a93fff17 	ldw	r4,-4(r21)
   27864:	10fffe04 	addi	r3,r2,-8
   27868:	00bfff84 	movi	r2,-2
   2786c:	2084703a 	and	r2,r4,r2
   27870:	9885883a 	add	r2,r19,r2
   27874:	1880ee26 	beq	r3,r2,27c30 <_realloc_r+0x490>
   27878:	81bfff04 	addi	r6,r16,-4
   2787c:	00800904 	movi	r2,36
   27880:	1180b836 	bltu	r2,r6,27b64 <_realloc_r+0x3c4>
   27884:	00c004c4 	movi	r3,19
   27888:	19809636 	bltu	r3,r6,27ae4 <_realloc_r+0x344>
   2788c:	9005883a 	mov	r2,r18
   27890:	a807883a 	mov	r3,r21
   27894:	19000017 	ldw	r4,0(r3)
   27898:	11000015 	stw	r4,0(r2)
   2789c:	19000117 	ldw	r4,4(r3)
   278a0:	11000115 	stw	r4,4(r2)
   278a4:	18c00217 	ldw	r3,8(r3)
   278a8:	10c00215 	stw	r3,8(r2)
   278ac:	a80b883a 	mov	r5,r21
   278b0:	a009883a 	mov	r4,r20
   278b4:	0024ccc0 	call	24ccc <_free_r>
   278b8:	a009883a 	mov	r4,r20
   278bc:	002dc280 	call	2dc28 <__malloc_unlock>
   278c0:	9005883a 	mov	r2,r18
   278c4:	00001206 	br	27910 <_realloc_r+0x170>
   278c8:	00c00404 	movi	r3,16
   278cc:	1823883a 	mov	r17,r3
   278d0:	003fce06 	br	2780c <__alt_data_end+0xfffe780c>
   278d4:	a825883a 	mov	r18,r21
   278d8:	8445c83a 	sub	r2,r16,r17
   278dc:	00c003c4 	movi	r3,15
   278e0:	18802636 	bltu	r3,r2,2797c <_realloc_r+0x1dc>
   278e4:	99800117 	ldw	r6,4(r19)
   278e8:	9c07883a 	add	r3,r19,r16
   278ec:	3180004c 	andi	r6,r6,1
   278f0:	3420b03a 	or	r16,r6,r16
   278f4:	9c000115 	stw	r16,4(r19)
   278f8:	18800117 	ldw	r2,4(r3)
   278fc:	10800054 	ori	r2,r2,1
   27900:	18800115 	stw	r2,4(r3)
   27904:	a009883a 	mov	r4,r20
   27908:	002dc280 	call	2dc28 <__malloc_unlock>
   2790c:	9005883a 	mov	r2,r18
   27910:	dfc00917 	ldw	ra,36(sp)
   27914:	df000817 	ldw	fp,32(sp)
   27918:	ddc00717 	ldw	r23,28(sp)
   2791c:	dd800617 	ldw	r22,24(sp)
   27920:	dd400517 	ldw	r21,20(sp)
   27924:	dd000417 	ldw	r20,16(sp)
   27928:	dcc00317 	ldw	r19,12(sp)
   2792c:	dc800217 	ldw	r18,8(sp)
   27930:	dc400117 	ldw	r17,4(sp)
   27934:	dc000017 	ldw	r16,0(sp)
   27938:	dec00a04 	addi	sp,sp,40
   2793c:	f800283a 	ret
   27940:	017fff04 	movi	r5,-4
   27944:	414a703a 	and	r5,r8,r5
   27948:	814d883a 	add	r6,r16,r5
   2794c:	30c01f16 	blt	r6,r3,279cc <_realloc_r+0x22c>
   27950:	20800317 	ldw	r2,12(r4)
   27954:	20c00217 	ldw	r3,8(r4)
   27958:	a825883a 	mov	r18,r21
   2795c:	3021883a 	mov	r16,r6
   27960:	18800315 	stw	r2,12(r3)
   27964:	10c00215 	stw	r3,8(r2)
   27968:	003fdb06 	br	278d8 <__alt_data_end+0xfffe78d8>
   2796c:	00800304 	movi	r2,12
   27970:	a0800015 	stw	r2,0(r20)
   27974:	0005883a 	mov	r2,zero
   27978:	003fe506 	br	27910 <__alt_data_end+0xfffe7910>
   2797c:	98c00117 	ldw	r3,4(r19)
   27980:	9c4b883a 	add	r5,r19,r17
   27984:	11000054 	ori	r4,r2,1
   27988:	18c0004c 	andi	r3,r3,1
   2798c:	1c62b03a 	or	r17,r3,r17
   27990:	9c400115 	stw	r17,4(r19)
   27994:	29000115 	stw	r4,4(r5)
   27998:	2885883a 	add	r2,r5,r2
   2799c:	10c00117 	ldw	r3,4(r2)
   279a0:	29400204 	addi	r5,r5,8
   279a4:	a009883a 	mov	r4,r20
   279a8:	18c00054 	ori	r3,r3,1
   279ac:	10c00115 	stw	r3,4(r2)
   279b0:	0024ccc0 	call	24ccc <_free_r>
   279b4:	003fd306 	br	27904 <__alt_data_end+0xfffe7904>
   279b8:	017fff04 	movi	r5,-4
   279bc:	414a703a 	and	r5,r8,r5
   279c0:	89800404 	addi	r6,r17,16
   279c4:	8151883a 	add	r8,r16,r5
   279c8:	4180590e 	bge	r8,r6,27b30 <_realloc_r+0x390>
   279cc:	1080004c 	andi	r2,r2,1
   279d0:	103f9e1e 	bne	r2,zero,2784c <__alt_data_end+0xfffe784c>
   279d4:	adbffe17 	ldw	r22,-8(r21)
   279d8:	00bfff04 	movi	r2,-4
   279dc:	9dadc83a 	sub	r22,r19,r22
   279e0:	b1800117 	ldw	r6,4(r22)
   279e4:	3084703a 	and	r2,r6,r2
   279e8:	20002026 	beq	r4,zero,27a6c <_realloc_r+0x2cc>
   279ec:	80af883a 	add	r23,r16,r2
   279f0:	b96f883a 	add	r23,r23,r5
   279f4:	21c05f26 	beq	r4,r7,27b74 <_realloc_r+0x3d4>
   279f8:	b8c01c16 	blt	r23,r3,27a6c <_realloc_r+0x2cc>
   279fc:	20800317 	ldw	r2,12(r4)
   27a00:	20c00217 	ldw	r3,8(r4)
   27a04:	81bfff04 	addi	r6,r16,-4
   27a08:	01000904 	movi	r4,36
   27a0c:	18800315 	stw	r2,12(r3)
   27a10:	10c00215 	stw	r3,8(r2)
   27a14:	b0c00217 	ldw	r3,8(r22)
   27a18:	b0800317 	ldw	r2,12(r22)
   27a1c:	b4800204 	addi	r18,r22,8
   27a20:	18800315 	stw	r2,12(r3)
   27a24:	10c00215 	stw	r3,8(r2)
   27a28:	21801b36 	bltu	r4,r6,27a98 <_realloc_r+0x2f8>
   27a2c:	008004c4 	movi	r2,19
   27a30:	1180352e 	bgeu	r2,r6,27b08 <_realloc_r+0x368>
   27a34:	a8800017 	ldw	r2,0(r21)
   27a38:	b0800215 	stw	r2,8(r22)
   27a3c:	a8800117 	ldw	r2,4(r21)
   27a40:	b0800315 	stw	r2,12(r22)
   27a44:	008006c4 	movi	r2,27
   27a48:	11807f36 	bltu	r2,r6,27c48 <_realloc_r+0x4a8>
   27a4c:	b0800404 	addi	r2,r22,16
   27a50:	ad400204 	addi	r21,r21,8
   27a54:	00002d06 	br	27b0c <_realloc_r+0x36c>
   27a58:	adbffe17 	ldw	r22,-8(r21)
   27a5c:	00bfff04 	movi	r2,-4
   27a60:	9dadc83a 	sub	r22,r19,r22
   27a64:	b1000117 	ldw	r4,4(r22)
   27a68:	2084703a 	and	r2,r4,r2
   27a6c:	b03f7726 	beq	r22,zero,2784c <__alt_data_end+0xfffe784c>
   27a70:	80af883a 	add	r23,r16,r2
   27a74:	b8ff7516 	blt	r23,r3,2784c <__alt_data_end+0xfffe784c>
   27a78:	b0800317 	ldw	r2,12(r22)
   27a7c:	b0c00217 	ldw	r3,8(r22)
   27a80:	81bfff04 	addi	r6,r16,-4
   27a84:	01000904 	movi	r4,36
   27a88:	18800315 	stw	r2,12(r3)
   27a8c:	10c00215 	stw	r3,8(r2)
   27a90:	b4800204 	addi	r18,r22,8
   27a94:	21bfe52e 	bgeu	r4,r6,27a2c <__alt_data_end+0xfffe7a2c>
   27a98:	a80b883a 	mov	r5,r21
   27a9c:	9009883a 	mov	r4,r18
   27aa0:	00262fc0 	call	262fc <memmove>
   27aa4:	b821883a 	mov	r16,r23
   27aa8:	b027883a 	mov	r19,r22
   27aac:	003f8a06 	br	278d8 <__alt_data_end+0xfffe78d8>
   27ab0:	300b883a 	mov	r5,r6
   27ab4:	dfc00917 	ldw	ra,36(sp)
   27ab8:	df000817 	ldw	fp,32(sp)
   27abc:	ddc00717 	ldw	r23,28(sp)
   27ac0:	dd800617 	ldw	r22,24(sp)
   27ac4:	dd400517 	ldw	r21,20(sp)
   27ac8:	dd000417 	ldw	r20,16(sp)
   27acc:	dcc00317 	ldw	r19,12(sp)
   27ad0:	dc800217 	ldw	r18,8(sp)
   27ad4:	dc400117 	ldw	r17,4(sp)
   27ad8:	dc000017 	ldw	r16,0(sp)
   27adc:	dec00a04 	addi	sp,sp,40
   27ae0:	00258c41 	jmpi	258c4 <_malloc_r>
   27ae4:	a8c00017 	ldw	r3,0(r21)
   27ae8:	90c00015 	stw	r3,0(r18)
   27aec:	a8c00117 	ldw	r3,4(r21)
   27af0:	90c00115 	stw	r3,4(r18)
   27af4:	00c006c4 	movi	r3,27
   27af8:	19804536 	bltu	r3,r6,27c10 <_realloc_r+0x470>
   27afc:	90800204 	addi	r2,r18,8
   27b00:	a8c00204 	addi	r3,r21,8
   27b04:	003f6306 	br	27894 <__alt_data_end+0xfffe7894>
   27b08:	9005883a 	mov	r2,r18
   27b0c:	a8c00017 	ldw	r3,0(r21)
   27b10:	b821883a 	mov	r16,r23
   27b14:	b027883a 	mov	r19,r22
   27b18:	10c00015 	stw	r3,0(r2)
   27b1c:	a8c00117 	ldw	r3,4(r21)
   27b20:	10c00115 	stw	r3,4(r2)
   27b24:	a8c00217 	ldw	r3,8(r21)
   27b28:	10c00215 	stw	r3,8(r2)
   27b2c:	003f6a06 	br	278d8 <__alt_data_end+0xfffe78d8>
   27b30:	9c67883a 	add	r19,r19,r17
   27b34:	4445c83a 	sub	r2,r8,r17
   27b38:	e4c00215 	stw	r19,8(fp)
   27b3c:	10800054 	ori	r2,r2,1
   27b40:	98800115 	stw	r2,4(r19)
   27b44:	a8bfff17 	ldw	r2,-4(r21)
   27b48:	a009883a 	mov	r4,r20
   27b4c:	1080004c 	andi	r2,r2,1
   27b50:	1462b03a 	or	r17,r2,r17
   27b54:	ac7fff15 	stw	r17,-4(r21)
   27b58:	002dc280 	call	2dc28 <__malloc_unlock>
   27b5c:	a805883a 	mov	r2,r21
   27b60:	003f6b06 	br	27910 <__alt_data_end+0xfffe7910>
   27b64:	a80b883a 	mov	r5,r21
   27b68:	9009883a 	mov	r4,r18
   27b6c:	00262fc0 	call	262fc <memmove>
   27b70:	003f4e06 	br	278ac <__alt_data_end+0xfffe78ac>
   27b74:	89000404 	addi	r4,r17,16
   27b78:	b93fbc16 	blt	r23,r4,27a6c <__alt_data_end+0xfffe7a6c>
   27b7c:	b0800317 	ldw	r2,12(r22)
   27b80:	b0c00217 	ldw	r3,8(r22)
   27b84:	81bfff04 	addi	r6,r16,-4
   27b88:	01000904 	movi	r4,36
   27b8c:	18800315 	stw	r2,12(r3)
   27b90:	10c00215 	stw	r3,8(r2)
   27b94:	b4800204 	addi	r18,r22,8
   27b98:	21804336 	bltu	r4,r6,27ca8 <_realloc_r+0x508>
   27b9c:	008004c4 	movi	r2,19
   27ba0:	11803f2e 	bgeu	r2,r6,27ca0 <_realloc_r+0x500>
   27ba4:	a8800017 	ldw	r2,0(r21)
   27ba8:	b0800215 	stw	r2,8(r22)
   27bac:	a8800117 	ldw	r2,4(r21)
   27bb0:	b0800315 	stw	r2,12(r22)
   27bb4:	008006c4 	movi	r2,27
   27bb8:	11803f36 	bltu	r2,r6,27cb8 <_realloc_r+0x518>
   27bbc:	b0800404 	addi	r2,r22,16
   27bc0:	ad400204 	addi	r21,r21,8
   27bc4:	a8c00017 	ldw	r3,0(r21)
   27bc8:	10c00015 	stw	r3,0(r2)
   27bcc:	a8c00117 	ldw	r3,4(r21)
   27bd0:	10c00115 	stw	r3,4(r2)
   27bd4:	a8c00217 	ldw	r3,8(r21)
   27bd8:	10c00215 	stw	r3,8(r2)
   27bdc:	b447883a 	add	r3,r22,r17
   27be0:	bc45c83a 	sub	r2,r23,r17
   27be4:	e0c00215 	stw	r3,8(fp)
   27be8:	10800054 	ori	r2,r2,1
   27bec:	18800115 	stw	r2,4(r3)
   27bf0:	b0800117 	ldw	r2,4(r22)
   27bf4:	a009883a 	mov	r4,r20
   27bf8:	1080004c 	andi	r2,r2,1
   27bfc:	1462b03a 	or	r17,r2,r17
   27c00:	b4400115 	stw	r17,4(r22)
   27c04:	002dc280 	call	2dc28 <__malloc_unlock>
   27c08:	9005883a 	mov	r2,r18
   27c0c:	003f4006 	br	27910 <__alt_data_end+0xfffe7910>
   27c10:	a8c00217 	ldw	r3,8(r21)
   27c14:	90c00215 	stw	r3,8(r18)
   27c18:	a8c00317 	ldw	r3,12(r21)
   27c1c:	90c00315 	stw	r3,12(r18)
   27c20:	30801126 	beq	r6,r2,27c68 <_realloc_r+0x4c8>
   27c24:	90800404 	addi	r2,r18,16
   27c28:	a8c00404 	addi	r3,r21,16
   27c2c:	003f1906 	br	27894 <__alt_data_end+0xfffe7894>
   27c30:	90ffff17 	ldw	r3,-4(r18)
   27c34:	00bfff04 	movi	r2,-4
   27c38:	a825883a 	mov	r18,r21
   27c3c:	1884703a 	and	r2,r3,r2
   27c40:	80a1883a 	add	r16,r16,r2
   27c44:	003f2406 	br	278d8 <__alt_data_end+0xfffe78d8>
   27c48:	a8800217 	ldw	r2,8(r21)
   27c4c:	b0800415 	stw	r2,16(r22)
   27c50:	a8800317 	ldw	r2,12(r21)
   27c54:	b0800515 	stw	r2,20(r22)
   27c58:	31000a26 	beq	r6,r4,27c84 <_realloc_r+0x4e4>
   27c5c:	b0800604 	addi	r2,r22,24
   27c60:	ad400404 	addi	r21,r21,16
   27c64:	003fa906 	br	27b0c <__alt_data_end+0xfffe7b0c>
   27c68:	a9000417 	ldw	r4,16(r21)
   27c6c:	90800604 	addi	r2,r18,24
   27c70:	a8c00604 	addi	r3,r21,24
   27c74:	91000415 	stw	r4,16(r18)
   27c78:	a9000517 	ldw	r4,20(r21)
   27c7c:	91000515 	stw	r4,20(r18)
   27c80:	003f0406 	br	27894 <__alt_data_end+0xfffe7894>
   27c84:	a8c00417 	ldw	r3,16(r21)
   27c88:	ad400604 	addi	r21,r21,24
   27c8c:	b0800804 	addi	r2,r22,32
   27c90:	b0c00615 	stw	r3,24(r22)
   27c94:	a8ffff17 	ldw	r3,-4(r21)
   27c98:	b0c00715 	stw	r3,28(r22)
   27c9c:	003f9b06 	br	27b0c <__alt_data_end+0xfffe7b0c>
   27ca0:	9005883a 	mov	r2,r18
   27ca4:	003fc706 	br	27bc4 <__alt_data_end+0xfffe7bc4>
   27ca8:	a80b883a 	mov	r5,r21
   27cac:	9009883a 	mov	r4,r18
   27cb0:	00262fc0 	call	262fc <memmove>
   27cb4:	003fc906 	br	27bdc <__alt_data_end+0xfffe7bdc>
   27cb8:	a8800217 	ldw	r2,8(r21)
   27cbc:	b0800415 	stw	r2,16(r22)
   27cc0:	a8800317 	ldw	r2,12(r21)
   27cc4:	b0800515 	stw	r2,20(r22)
   27cc8:	31000726 	beq	r6,r4,27ce8 <_realloc_r+0x548>
   27ccc:	b0800604 	addi	r2,r22,24
   27cd0:	ad400404 	addi	r21,r21,16
   27cd4:	003fbb06 	br	27bc4 <__alt_data_end+0xfffe7bc4>
   27cd8:	a009883a 	mov	r4,r20
   27cdc:	002dc280 	call	2dc28 <__malloc_unlock>
   27ce0:	0005883a 	mov	r2,zero
   27ce4:	003f0a06 	br	27910 <__alt_data_end+0xfffe7910>
   27ce8:	a8c00417 	ldw	r3,16(r21)
   27cec:	ad400604 	addi	r21,r21,24
   27cf0:	b0800804 	addi	r2,r22,32
   27cf4:	b0c00615 	stw	r3,24(r22)
   27cf8:	a8ffff17 	ldw	r3,-4(r21)
   27cfc:	b0c00715 	stw	r3,28(r22)
   27d00:	003fb006 	br	27bc4 <__alt_data_end+0xfffe7bc4>

00027d04 <__fpclassifyd>:
   27d04:	00a00034 	movhi	r2,32768
   27d08:	10bfffc4 	addi	r2,r2,-1
   27d0c:	2884703a 	and	r2,r5,r2
   27d10:	10000726 	beq	r2,zero,27d30 <__fpclassifyd+0x2c>
   27d14:	00fffc34 	movhi	r3,65520
   27d18:	019ff834 	movhi	r6,32736
   27d1c:	28c7883a 	add	r3,r5,r3
   27d20:	31bfffc4 	addi	r6,r6,-1
   27d24:	30c00536 	bltu	r6,r3,27d3c <__fpclassifyd+0x38>
   27d28:	00800104 	movi	r2,4
   27d2c:	f800283a 	ret
   27d30:	2000021e 	bne	r4,zero,27d3c <__fpclassifyd+0x38>
   27d34:	00800084 	movi	r2,2
   27d38:	f800283a 	ret
   27d3c:	00dffc34 	movhi	r3,32752
   27d40:	019ff834 	movhi	r6,32736
   27d44:	28cb883a 	add	r5,r5,r3
   27d48:	31bfffc4 	addi	r6,r6,-1
   27d4c:	317ff62e 	bgeu	r6,r5,27d28 <__alt_data_end+0xfffe7d28>
   27d50:	01400434 	movhi	r5,16
   27d54:	297fffc4 	addi	r5,r5,-1
   27d58:	28800236 	bltu	r5,r2,27d64 <__fpclassifyd+0x60>
   27d5c:	008000c4 	movi	r2,3
   27d60:	f800283a 	ret
   27d64:	10c00226 	beq	r2,r3,27d70 <__fpclassifyd+0x6c>
   27d68:	0005883a 	mov	r2,zero
   27d6c:	f800283a 	ret
   27d70:	2005003a 	cmpeq	r2,r4,zero
   27d74:	f800283a 	ret

00027d78 <_sbrk_r>:
   27d78:	defffd04 	addi	sp,sp,-12
   27d7c:	dc000015 	stw	r16,0(sp)
   27d80:	040000f4 	movhi	r16,3
   27d84:	dc400115 	stw	r17,4(sp)
   27d88:	84186304 	addi	r16,r16,24972
   27d8c:	2023883a 	mov	r17,r4
   27d90:	2809883a 	mov	r4,r5
   27d94:	dfc00215 	stw	ra,8(sp)
   27d98:	80000015 	stw	zero,0(r16)
   27d9c:	002de100 	call	2de10 <sbrk>
   27da0:	00ffffc4 	movi	r3,-1
   27da4:	10c00526 	beq	r2,r3,27dbc <_sbrk_r+0x44>
   27da8:	dfc00217 	ldw	ra,8(sp)
   27dac:	dc400117 	ldw	r17,4(sp)
   27db0:	dc000017 	ldw	r16,0(sp)
   27db4:	dec00304 	addi	sp,sp,12
   27db8:	f800283a 	ret
   27dbc:	80c00017 	ldw	r3,0(r16)
   27dc0:	183ff926 	beq	r3,zero,27da8 <__alt_data_end+0xfffe7da8>
   27dc4:	88c00015 	stw	r3,0(r17)
   27dc8:	003ff706 	br	27da8 <__alt_data_end+0xfffe7da8>

00027dcc <__sread>:
   27dcc:	defffe04 	addi	sp,sp,-8
   27dd0:	dc000015 	stw	r16,0(sp)
   27dd4:	2821883a 	mov	r16,r5
   27dd8:	2940038f 	ldh	r5,14(r5)
   27ddc:	dfc00115 	stw	ra,4(sp)
   27de0:	0029de00 	call	29de0 <_read_r>
   27de4:	10000716 	blt	r2,zero,27e04 <__sread+0x38>
   27de8:	80c01417 	ldw	r3,80(r16)
   27dec:	1887883a 	add	r3,r3,r2
   27df0:	80c01415 	stw	r3,80(r16)
   27df4:	dfc00117 	ldw	ra,4(sp)
   27df8:	dc000017 	ldw	r16,0(sp)
   27dfc:	dec00204 	addi	sp,sp,8
   27e00:	f800283a 	ret
   27e04:	80c0030b 	ldhu	r3,12(r16)
   27e08:	18fbffcc 	andi	r3,r3,61439
   27e0c:	80c0030d 	sth	r3,12(r16)
   27e10:	dfc00117 	ldw	ra,4(sp)
   27e14:	dc000017 	ldw	r16,0(sp)
   27e18:	dec00204 	addi	sp,sp,8
   27e1c:	f800283a 	ret

00027e20 <__seofread>:
   27e20:	0005883a 	mov	r2,zero
   27e24:	f800283a 	ret

00027e28 <__swrite>:
   27e28:	2880030b 	ldhu	r2,12(r5)
   27e2c:	defffb04 	addi	sp,sp,-20
   27e30:	dcc00315 	stw	r19,12(sp)
   27e34:	dc800215 	stw	r18,8(sp)
   27e38:	dc400115 	stw	r17,4(sp)
   27e3c:	dc000015 	stw	r16,0(sp)
   27e40:	dfc00415 	stw	ra,16(sp)
   27e44:	10c0400c 	andi	r3,r2,256
   27e48:	2821883a 	mov	r16,r5
   27e4c:	2023883a 	mov	r17,r4
   27e50:	3025883a 	mov	r18,r6
   27e54:	3827883a 	mov	r19,r7
   27e58:	18000526 	beq	r3,zero,27e70 <__swrite+0x48>
   27e5c:	2940038f 	ldh	r5,14(r5)
   27e60:	01c00084 	movi	r7,2
   27e64:	000d883a 	mov	r6,zero
   27e68:	0029d800 	call	29d80 <_lseek_r>
   27e6c:	8080030b 	ldhu	r2,12(r16)
   27e70:	8140038f 	ldh	r5,14(r16)
   27e74:	10bbffcc 	andi	r2,r2,61439
   27e78:	980f883a 	mov	r7,r19
   27e7c:	900d883a 	mov	r6,r18
   27e80:	8809883a 	mov	r4,r17
   27e84:	8080030d 	sth	r2,12(r16)
   27e88:	dfc00417 	ldw	ra,16(sp)
   27e8c:	dcc00317 	ldw	r19,12(sp)
   27e90:	dc800217 	ldw	r18,8(sp)
   27e94:	dc400117 	ldw	r17,4(sp)
   27e98:	dc000017 	ldw	r16,0(sp)
   27e9c:	dec00504 	addi	sp,sp,20
   27ea0:	00298341 	jmpi	29834 <_write_r>

00027ea4 <__sseek>:
   27ea4:	defffe04 	addi	sp,sp,-8
   27ea8:	dc000015 	stw	r16,0(sp)
   27eac:	2821883a 	mov	r16,r5
   27eb0:	2940038f 	ldh	r5,14(r5)
   27eb4:	dfc00115 	stw	ra,4(sp)
   27eb8:	0029d800 	call	29d80 <_lseek_r>
   27ebc:	00ffffc4 	movi	r3,-1
   27ec0:	10c00826 	beq	r2,r3,27ee4 <__sseek+0x40>
   27ec4:	80c0030b 	ldhu	r3,12(r16)
   27ec8:	80801415 	stw	r2,80(r16)
   27ecc:	18c40014 	ori	r3,r3,4096
   27ed0:	80c0030d 	sth	r3,12(r16)
   27ed4:	dfc00117 	ldw	ra,4(sp)
   27ed8:	dc000017 	ldw	r16,0(sp)
   27edc:	dec00204 	addi	sp,sp,8
   27ee0:	f800283a 	ret
   27ee4:	80c0030b 	ldhu	r3,12(r16)
   27ee8:	18fbffcc 	andi	r3,r3,61439
   27eec:	80c0030d 	sth	r3,12(r16)
   27ef0:	dfc00117 	ldw	ra,4(sp)
   27ef4:	dc000017 	ldw	r16,0(sp)
   27ef8:	dec00204 	addi	sp,sp,8
   27efc:	f800283a 	ret

00027f00 <__sclose>:
   27f00:	2940038f 	ldh	r5,14(r5)
   27f04:	00298941 	jmpi	29894 <_close_r>

00027f08 <strcmp>:
   27f08:	2144b03a 	or	r2,r4,r5
   27f0c:	108000cc 	andi	r2,r2,3
   27f10:	1000171e 	bne	r2,zero,27f70 <strcmp+0x68>
   27f14:	20800017 	ldw	r2,0(r4)
   27f18:	28c00017 	ldw	r3,0(r5)
   27f1c:	10c0141e 	bne	r2,r3,27f70 <strcmp+0x68>
   27f20:	027fbff4 	movhi	r9,65279
   27f24:	4a7fbfc4 	addi	r9,r9,-257
   27f28:	0086303a 	nor	r3,zero,r2
   27f2c:	02202074 	movhi	r8,32897
   27f30:	1245883a 	add	r2,r2,r9
   27f34:	42202004 	addi	r8,r8,-32640
   27f38:	10c4703a 	and	r2,r2,r3
   27f3c:	1204703a 	and	r2,r2,r8
   27f40:	10000226 	beq	r2,zero,27f4c <strcmp+0x44>
   27f44:	00002306 	br	27fd4 <strcmp+0xcc>
   27f48:	1000221e 	bne	r2,zero,27fd4 <strcmp+0xcc>
   27f4c:	21000104 	addi	r4,r4,4
   27f50:	20c00017 	ldw	r3,0(r4)
   27f54:	29400104 	addi	r5,r5,4
   27f58:	29800017 	ldw	r6,0(r5)
   27f5c:	1a4f883a 	add	r7,r3,r9
   27f60:	00c4303a 	nor	r2,zero,r3
   27f64:	3884703a 	and	r2,r7,r2
   27f68:	1204703a 	and	r2,r2,r8
   27f6c:	19bff626 	beq	r3,r6,27f48 <__alt_data_end+0xfffe7f48>
   27f70:	20800003 	ldbu	r2,0(r4)
   27f74:	10c03fcc 	andi	r3,r2,255
   27f78:	18c0201c 	xori	r3,r3,128
   27f7c:	18ffe004 	addi	r3,r3,-128
   27f80:	18000c26 	beq	r3,zero,27fb4 <strcmp+0xac>
   27f84:	29800007 	ldb	r6,0(r5)
   27f88:	19800326 	beq	r3,r6,27f98 <strcmp+0x90>
   27f8c:	00001306 	br	27fdc <strcmp+0xd4>
   27f90:	29800007 	ldb	r6,0(r5)
   27f94:	11800b1e 	bne	r2,r6,27fc4 <strcmp+0xbc>
   27f98:	21000044 	addi	r4,r4,1
   27f9c:	20c00003 	ldbu	r3,0(r4)
   27fa0:	29400044 	addi	r5,r5,1
   27fa4:	18803fcc 	andi	r2,r3,255
   27fa8:	1080201c 	xori	r2,r2,128
   27fac:	10bfe004 	addi	r2,r2,-128
   27fb0:	103ff71e 	bne	r2,zero,27f90 <__alt_data_end+0xfffe7f90>
   27fb4:	0007883a 	mov	r3,zero
   27fb8:	28800003 	ldbu	r2,0(r5)
   27fbc:	1885c83a 	sub	r2,r3,r2
   27fc0:	f800283a 	ret
   27fc4:	28800003 	ldbu	r2,0(r5)
   27fc8:	18c03fcc 	andi	r3,r3,255
   27fcc:	1885c83a 	sub	r2,r3,r2
   27fd0:	f800283a 	ret
   27fd4:	0005883a 	mov	r2,zero
   27fd8:	f800283a 	ret
   27fdc:	10c03fcc 	andi	r3,r2,255
   27fe0:	003ff506 	br	27fb8 <__alt_data_end+0xfffe7fb8>

00027fe4 <__sprint_r.part.0>:
   27fe4:	28801917 	ldw	r2,100(r5)
   27fe8:	defff604 	addi	sp,sp,-40
   27fec:	dd400515 	stw	r21,20(sp)
   27ff0:	dfc00915 	stw	ra,36(sp)
   27ff4:	df000815 	stw	fp,32(sp)
   27ff8:	ddc00715 	stw	r23,28(sp)
   27ffc:	dd800615 	stw	r22,24(sp)
   28000:	dd000415 	stw	r20,16(sp)
   28004:	dcc00315 	stw	r19,12(sp)
   28008:	dc800215 	stw	r18,8(sp)
   2800c:	dc400115 	stw	r17,4(sp)
   28010:	dc000015 	stw	r16,0(sp)
   28014:	1088000c 	andi	r2,r2,8192
   28018:	302b883a 	mov	r21,r6
   2801c:	10002e26 	beq	r2,zero,280d8 <__sprint_r.part.0+0xf4>
   28020:	30800217 	ldw	r2,8(r6)
   28024:	35800017 	ldw	r22,0(r6)
   28028:	10002926 	beq	r2,zero,280d0 <__sprint_r.part.0+0xec>
   2802c:	2827883a 	mov	r19,r5
   28030:	2029883a 	mov	r20,r4
   28034:	b5c00104 	addi	r23,r22,4
   28038:	04bfffc4 	movi	r18,-1
   2803c:	bc400017 	ldw	r17,0(r23)
   28040:	b4000017 	ldw	r16,0(r22)
   28044:	0039883a 	mov	fp,zero
   28048:	8822d0ba 	srli	r17,r17,2
   2804c:	8800031e 	bne	r17,zero,2805c <__sprint_r.part.0+0x78>
   28050:	00001806 	br	280b4 <__sprint_r.part.0+0xd0>
   28054:	84000104 	addi	r16,r16,4
   28058:	8f001526 	beq	r17,fp,280b0 <__sprint_r.part.0+0xcc>
   2805c:	81400017 	ldw	r5,0(r16)
   28060:	980d883a 	mov	r6,r19
   28064:	a009883a 	mov	r4,r20
   28068:	0029c2c0 	call	29c2c <_fputwc_r>
   2806c:	e7000044 	addi	fp,fp,1
   28070:	14bff81e 	bne	r2,r18,28054 <__alt_data_end+0xfffe8054>
   28074:	9005883a 	mov	r2,r18
   28078:	a8000215 	stw	zero,8(r21)
   2807c:	a8000115 	stw	zero,4(r21)
   28080:	dfc00917 	ldw	ra,36(sp)
   28084:	df000817 	ldw	fp,32(sp)
   28088:	ddc00717 	ldw	r23,28(sp)
   2808c:	dd800617 	ldw	r22,24(sp)
   28090:	dd400517 	ldw	r21,20(sp)
   28094:	dd000417 	ldw	r20,16(sp)
   28098:	dcc00317 	ldw	r19,12(sp)
   2809c:	dc800217 	ldw	r18,8(sp)
   280a0:	dc400117 	ldw	r17,4(sp)
   280a4:	dc000017 	ldw	r16,0(sp)
   280a8:	dec00a04 	addi	sp,sp,40
   280ac:	f800283a 	ret
   280b0:	a8800217 	ldw	r2,8(r21)
   280b4:	8c63883a 	add	r17,r17,r17
   280b8:	8c63883a 	add	r17,r17,r17
   280bc:	1445c83a 	sub	r2,r2,r17
   280c0:	a8800215 	stw	r2,8(r21)
   280c4:	b5800204 	addi	r22,r22,8
   280c8:	bdc00204 	addi	r23,r23,8
   280cc:	103fdb1e 	bne	r2,zero,2803c <__alt_data_end+0xfffe803c>
   280d0:	0005883a 	mov	r2,zero
   280d4:	003fe806 	br	28078 <__alt_data_end+0xfffe8078>
   280d8:	0024fdc0 	call	24fdc <__sfvwrite_r>
   280dc:	003fe606 	br	28078 <__alt_data_end+0xfffe8078>

000280e0 <__sprint_r>:
   280e0:	30c00217 	ldw	r3,8(r6)
   280e4:	18000126 	beq	r3,zero,280ec <__sprint_r+0xc>
   280e8:	0027fe41 	jmpi	27fe4 <__sprint_r.part.0>
   280ec:	30000115 	stw	zero,4(r6)
   280f0:	0005883a 	mov	r2,zero
   280f4:	f800283a 	ret

000280f8 <___vfiprintf_internal_r>:
   280f8:	deffca04 	addi	sp,sp,-216
   280fc:	dd403115 	stw	r21,196(sp)
   28100:	dfc03515 	stw	ra,212(sp)
   28104:	df003415 	stw	fp,208(sp)
   28108:	ddc03315 	stw	r23,204(sp)
   2810c:	dd803215 	stw	r22,200(sp)
   28110:	dd003015 	stw	r20,192(sp)
   28114:	dcc02f15 	stw	r19,188(sp)
   28118:	dc802e15 	stw	r18,184(sp)
   2811c:	dc402d15 	stw	r17,180(sp)
   28120:	dc002c15 	stw	r16,176(sp)
   28124:	d9002115 	stw	r4,132(sp)
   28128:	d9402015 	stw	r5,128(sp)
   2812c:	d9c02215 	stw	r7,136(sp)
   28130:	302b883a 	mov	r21,r6
   28134:	20000226 	beq	r4,zero,28140 <___vfiprintf_internal_r+0x48>
   28138:	20800e17 	ldw	r2,56(r4)
   2813c:	1000cf26 	beq	r2,zero,2847c <___vfiprintf_internal_r+0x384>
   28140:	d8c02017 	ldw	r3,128(sp)
   28144:	1880030b 	ldhu	r2,12(r3)
   28148:	10c8000c 	andi	r3,r2,8192
   2814c:	1800071e 	bne	r3,zero,2816c <___vfiprintf_internal_r+0x74>
   28150:	d9402017 	ldw	r5,128(sp)
   28154:	00f7ffc4 	movi	r3,-8193
   28158:	10880014 	ori	r2,r2,8192
   2815c:	29001917 	ldw	r4,100(r5)
   28160:	2880030d 	sth	r2,12(r5)
   28164:	20c6703a 	and	r3,r4,r3
   28168:	28c01915 	stw	r3,100(r5)
   2816c:	10c0020c 	andi	r3,r2,8
   28170:	1800a526 	beq	r3,zero,28408 <___vfiprintf_internal_r+0x310>
   28174:	d9002017 	ldw	r4,128(sp)
   28178:	20c00417 	ldw	r3,16(r4)
   2817c:	1800a226 	beq	r3,zero,28408 <___vfiprintf_internal_r+0x310>
   28180:	1080068c 	andi	r2,r2,26
   28184:	00c00284 	movi	r3,10
   28188:	10c0a826 	beq	r2,r3,2842c <___vfiprintf_internal_r+0x334>
   2818c:	d9001a04 	addi	r4,sp,104
   28190:	d94019c4 	addi	r5,sp,103
   28194:	048000f4 	movhi	r18,3
   28198:	2145c83a 	sub	r2,r4,r5
   2819c:	948a0504 	addi	r18,r18,10260
   281a0:	d9001e15 	stw	r4,120(sp)
   281a4:	d9401f15 	stw	r5,124(sp)
   281a8:	dec01a15 	stw	sp,104(sp)
   281ac:	d8001c15 	stw	zero,112(sp)
   281b0:	d8001b15 	stw	zero,108(sp)
   281b4:	d811883a 	mov	r8,sp
   281b8:	d8002615 	stw	zero,152(sp)
   281bc:	d8002415 	stw	zero,144(sp)
   281c0:	d8802815 	stw	r2,160(sp)
   281c4:	a82d883a 	mov	r22,r21
   281c8:	b0800007 	ldb	r2,0(r22)
   281cc:	10040d26 	beq	r2,zero,29204 <___vfiprintf_internal_r+0x110c>
   281d0:	00c00944 	movi	r3,37
   281d4:	b029883a 	mov	r20,r22
   281d8:	10c0021e 	bne	r2,r3,281e4 <___vfiprintf_internal_r+0xec>
   281dc:	00001606 	br	28238 <___vfiprintf_internal_r+0x140>
   281e0:	10c00326 	beq	r2,r3,281f0 <___vfiprintf_internal_r+0xf8>
   281e4:	a5000044 	addi	r20,r20,1
   281e8:	a0800007 	ldb	r2,0(r20)
   281ec:	103ffc1e 	bne	r2,zero,281e0 <__alt_data_end+0xfffe81e0>
   281f0:	a5a1c83a 	sub	r16,r20,r22
   281f4:	80001026 	beq	r16,zero,28238 <___vfiprintf_internal_r+0x140>
   281f8:	d8c01c17 	ldw	r3,112(sp)
   281fc:	d8801b17 	ldw	r2,108(sp)
   28200:	45800015 	stw	r22,0(r8)
   28204:	80c7883a 	add	r3,r16,r3
   28208:	10800044 	addi	r2,r2,1
   2820c:	44000115 	stw	r16,4(r8)
   28210:	d8c01c15 	stw	r3,112(sp)
   28214:	d8801b15 	stw	r2,108(sp)
   28218:	010001c4 	movi	r4,7
   2821c:	2080750e 	bge	r4,r2,283f4 <___vfiprintf_internal_r+0x2fc>
   28220:	1803951e 	bne	r3,zero,29078 <___vfiprintf_internal_r+0xf80>
   28224:	d8c02417 	ldw	r3,144(sp)
   28228:	d8001b15 	stw	zero,108(sp)
   2822c:	d811883a 	mov	r8,sp
   28230:	1c07883a 	add	r3,r3,r16
   28234:	d8c02415 	stw	r3,144(sp)
   28238:	a0800007 	ldb	r2,0(r20)
   2823c:	1002e026 	beq	r2,zero,28dc0 <___vfiprintf_internal_r+0xcc8>
   28240:	a5800044 	addi	r22,r20,1
   28244:	a0c00047 	ldb	r3,1(r20)
   28248:	d8001d85 	stb	zero,118(sp)
   2824c:	0027883a 	mov	r19,zero
   28250:	d8002305 	stb	zero,140(sp)
   28254:	043fffc4 	movi	r16,-1
   28258:	d8002515 	stw	zero,148(sp)
   2825c:	0023883a 	mov	r17,zero
   28260:	05001604 	movi	r20,88
   28264:	05400244 	movi	r21,9
   28268:	402f883a 	mov	r23,r8
   2826c:	b5800044 	addi	r22,r22,1
   28270:	18bff804 	addi	r2,r3,-32
   28274:	a0827736 	bltu	r20,r2,28c54 <___vfiprintf_internal_r+0xb5c>
   28278:	100490ba 	slli	r2,r2,2
   2827c:	010000f4 	movhi	r4,3
   28280:	2120a404 	addi	r4,r4,-32112
   28284:	1105883a 	add	r2,r2,r4
   28288:	10800017 	ldw	r2,0(r2)
   2828c:	1000683a 	jmp	r2
   28290:	00028954 	movui	zero,2597
   28294:	00028c54 	movui	zero,2609
   28298:	00028c54 	movui	zero,2609
   2829c:	00028970 	cmpltui	zero,zero,2597
   282a0:	00028c54 	movui	zero,2609
   282a4:	00028c54 	movui	zero,2609
   282a8:	00028c54 	movui	zero,2609
   282ac:	00028c54 	movui	zero,2609
   282b0:	00028c54 	movui	zero,2609
   282b4:	00028c54 	movui	zero,2609
   282b8:	00028b78 	rdprs	zero,zero,2605
   282bc:	00028b9c 	xori	zero,zero,2606
   282c0:	00028c54 	movui	zero,2609
   282c4:	00028494 	movui	zero,2578
   282c8:	00028bb0 	cmpltui	zero,zero,2606
   282cc:	00028c54 	movui	zero,2609
   282d0:	0002897c 	xorhi	zero,zero,2597
   282d4:	00028988 	cmpgei	zero,zero,2598
   282d8:	00028988 	cmpgei	zero,zero,2598
   282dc:	00028988 	cmpgei	zero,zero,2598
   282e0:	00028988 	cmpgei	zero,zero,2598
   282e4:	00028988 	cmpgei	zero,zero,2598
   282e8:	00028988 	cmpgei	zero,zero,2598
   282ec:	00028988 	cmpgei	zero,zero,2598
   282f0:	00028988 	cmpgei	zero,zero,2598
   282f4:	00028988 	cmpgei	zero,zero,2598
   282f8:	00028c54 	movui	zero,2609
   282fc:	00028c54 	movui	zero,2609
   28300:	00028c54 	movui	zero,2609
   28304:	00028c54 	movui	zero,2609
   28308:	00028c54 	movui	zero,2609
   2830c:	00028c54 	movui	zero,2609
   28310:	00028c54 	movui	zero,2609
   28314:	00028c54 	movui	zero,2609
   28318:	00028c54 	movui	zero,2609
   2831c:	00028c54 	movui	zero,2609
   28320:	000289c8 	cmpgei	zero,zero,2599
   28324:	00028c54 	movui	zero,2609
   28328:	00028c54 	movui	zero,2609
   2832c:	00028c54 	movui	zero,2609
   28330:	00028c54 	movui	zero,2609
   28334:	00028c54 	movui	zero,2609
   28338:	00028c54 	movui	zero,2609
   2833c:	00028c54 	movui	zero,2609
   28340:	00028c54 	movui	zero,2609
   28344:	00028c54 	movui	zero,2609
   28348:	00028c54 	movui	zero,2609
   2834c:	00028a04 	movi	zero,2600
   28350:	00028c54 	movui	zero,2609
   28354:	00028c54 	movui	zero,2609
   28358:	00028c54 	movui	zero,2609
   2835c:	00028c54 	movui	zero,2609
   28360:	00028c54 	movui	zero,2609
   28364:	00028a60 	cmpeqi	zero,zero,2601
   28368:	00028c54 	movui	zero,2609
   2836c:	00028c54 	movui	zero,2609
   28370:	00028ad4 	movui	zero,2603
   28374:	00028c54 	movui	zero,2609
   28378:	00028c54 	movui	zero,2609
   2837c:	00028c54 	movui	zero,2609
   28380:	00028c54 	movui	zero,2609
   28384:	00028c54 	movui	zero,2609
   28388:	00028c54 	movui	zero,2609
   2838c:	00028c54 	movui	zero,2609
   28390:	00028c54 	movui	zero,2609
   28394:	00028c54 	movui	zero,2609
   28398:	00028c54 	movui	zero,2609
   2839c:	0002887c 	xorhi	zero,zero,2593
   283a0:	000288ac 	andhi	zero,zero,2594
   283a4:	00028c54 	movui	zero,2609
   283a8:	00028c54 	movui	zero,2609
   283ac:	00028c54 	movui	zero,2609
   283b0:	00028bfc 	xorhi	zero,zero,2607
   283b4:	000288ac 	andhi	zero,zero,2594
   283b8:	00028c54 	movui	zero,2609
   283bc:	00028c54 	movui	zero,2609
   283c0:	00028754 	movui	zero,2589
   283c4:	00028c54 	movui	zero,2609
   283c8:	00028768 	cmpgeui	zero,zero,2589
   283cc:	000287a0 	cmpeqi	zero,zero,2590
   283d0:	000284a0 	cmpeqi	zero,zero,2578
   283d4:	00028748 	cmpgei	zero,zero,2589
   283d8:	00028c54 	movui	zero,2609
   283dc:	00028b14 	movui	zero,2604
   283e0:	00028c54 	movui	zero,2609
   283e4:	00028b60 	cmpeqi	zero,zero,2605
   283e8:	00028c54 	movui	zero,2609
   283ec:	00028c54 	movui	zero,2609
   283f0:	00028824 	muli	zero,zero,2592
   283f4:	42000204 	addi	r8,r8,8
   283f8:	d8c02417 	ldw	r3,144(sp)
   283fc:	1c07883a 	add	r3,r3,r16
   28400:	d8c02415 	stw	r3,144(sp)
   28404:	003f8c06 	br	28238 <__alt_data_end+0xfffe8238>
   28408:	d9402017 	ldw	r5,128(sp)
   2840c:	d9002117 	ldw	r4,132(sp)
   28410:	0022b4c0 	call	22b4c <__swsetup_r>
   28414:	1003c11e 	bne	r2,zero,2931c <___vfiprintf_internal_r+0x1224>
   28418:	d9402017 	ldw	r5,128(sp)
   2841c:	00c00284 	movi	r3,10
   28420:	2880030b 	ldhu	r2,12(r5)
   28424:	1080068c 	andi	r2,r2,26
   28428:	10ff581e 	bne	r2,r3,2818c <__alt_data_end+0xfffe818c>
   2842c:	d8c02017 	ldw	r3,128(sp)
   28430:	1880038f 	ldh	r2,14(r3)
   28434:	103f5516 	blt	r2,zero,2818c <__alt_data_end+0xfffe818c>
   28438:	d9c02217 	ldw	r7,136(sp)
   2843c:	d9002117 	ldw	r4,132(sp)
   28440:	a80d883a 	mov	r6,r21
   28444:	180b883a 	mov	r5,r3
   28448:	00296200 	call	29620 <__sbprintf>
   2844c:	dfc03517 	ldw	ra,212(sp)
   28450:	df003417 	ldw	fp,208(sp)
   28454:	ddc03317 	ldw	r23,204(sp)
   28458:	dd803217 	ldw	r22,200(sp)
   2845c:	dd403117 	ldw	r21,196(sp)
   28460:	dd003017 	ldw	r20,192(sp)
   28464:	dcc02f17 	ldw	r19,188(sp)
   28468:	dc802e17 	ldw	r18,184(sp)
   2846c:	dc402d17 	ldw	r17,180(sp)
   28470:	dc002c17 	ldw	r16,176(sp)
   28474:	dec03604 	addi	sp,sp,216
   28478:	f800283a 	ret
   2847c:	0024b580 	call	24b58 <__sinit>
   28480:	003f2f06 	br	28140 <__alt_data_end+0xfffe8140>
   28484:	d8c02517 	ldw	r3,148(sp)
   28488:	d8802215 	stw	r2,136(sp)
   2848c:	00c7c83a 	sub	r3,zero,r3
   28490:	d8c02515 	stw	r3,148(sp)
   28494:	8c400114 	ori	r17,r17,4
   28498:	b0c00007 	ldb	r3,0(r22)
   2849c:	003f7306 	br	2826c <__alt_data_end+0xfffe826c>
   284a0:	00800c04 	movi	r2,48
   284a4:	d9402217 	ldw	r5,136(sp)
   284a8:	d8801d05 	stb	r2,116(sp)
   284ac:	00801e04 	movi	r2,120
   284b0:	d8801d45 	stb	r2,117(sp)
   284b4:	d8001d85 	stb	zero,118(sp)
   284b8:	b811883a 	mov	r8,r23
   284bc:	28c00104 	addi	r3,r5,4
   284c0:	2cc00017 	ldw	r19,0(r5)
   284c4:	0029883a 	mov	r20,zero
   284c8:	88800094 	ori	r2,r17,2
   284cc:	80032516 	blt	r16,zero,29164 <___vfiprintf_internal_r+0x106c>
   284d0:	00bfdfc4 	movi	r2,-129
   284d4:	88a2703a 	and	r17,r17,r2
   284d8:	d8c02215 	stw	r3,136(sp)
   284dc:	8c400094 	ori	r17,r17,2
   284e0:	98032a1e 	bne	r19,zero,2918c <___vfiprintf_internal_r+0x1094>
   284e4:	008000f4 	movhi	r2,3
   284e8:	1089a404 	addi	r2,r2,9872
   284ec:	d8802615 	stw	r2,152(sp)
   284f0:	002b883a 	mov	r21,zero
   284f4:	8001741e 	bne	r16,zero,28ac8 <___vfiprintf_internal_r+0x9d0>
   284f8:	0021883a 	mov	r16,zero
   284fc:	0029883a 	mov	r20,zero
   28500:	ddc01a04 	addi	r23,sp,104
   28504:	8027883a 	mov	r19,r16
   28508:	8500010e 	bge	r16,r20,28510 <___vfiprintf_internal_r+0x418>
   2850c:	a027883a 	mov	r19,r20
   28510:	ad403fcc 	andi	r21,r21,255
   28514:	ad40201c 	xori	r21,r21,128
   28518:	ad7fe004 	addi	r21,r21,-128
   2851c:	a8000126 	beq	r21,zero,28524 <___vfiprintf_internal_r+0x42c>
   28520:	9cc00044 	addi	r19,r19,1
   28524:	89c0008c 	andi	r7,r17,2
   28528:	38000126 	beq	r7,zero,28530 <___vfiprintf_internal_r+0x438>
   2852c:	9cc00084 	addi	r19,r19,2
   28530:	88c0210c 	andi	r3,r17,132
   28534:	1801dd1e 	bne	r3,zero,28cac <___vfiprintf_internal_r+0xbb4>
   28538:	d9402517 	ldw	r5,148(sp)
   2853c:	2cebc83a 	sub	r21,r5,r19
   28540:	0541da0e 	bge	zero,r21,28cac <___vfiprintf_internal_r+0xbb4>
   28544:	07000404 	movi	fp,16
   28548:	d8801c17 	ldw	r2,112(sp)
   2854c:	e543be0e 	bge	fp,r21,29448 <___vfiprintf_internal_r+0x1350>
   28550:	014000f4 	movhi	r5,3
   28554:	294a0904 	addi	r5,r5,10276
   28558:	dc002715 	stw	r16,156(sp)
   2855c:	d9801b17 	ldw	r6,108(sp)
   28560:	a821883a 	mov	r16,r21
   28564:	d9402315 	stw	r5,140(sp)
   28568:	028001c4 	movi	r10,7
   2856c:	d9c02915 	stw	r7,164(sp)
   28570:	182b883a 	mov	r21,r3
   28574:	00000506 	br	2858c <___vfiprintf_internal_r+0x494>
   28578:	31000084 	addi	r4,r6,2
   2857c:	42000204 	addi	r8,r8,8
   28580:	180d883a 	mov	r6,r3
   28584:	843ffc04 	addi	r16,r16,-16
   28588:	e4000f0e 	bge	fp,r16,285c8 <___vfiprintf_internal_r+0x4d0>
   2858c:	010000f4 	movhi	r4,3
   28590:	10800404 	addi	r2,r2,16
   28594:	30c00044 	addi	r3,r6,1
   28598:	210a0904 	addi	r4,r4,10276
   2859c:	41000015 	stw	r4,0(r8)
   285a0:	47000115 	stw	fp,4(r8)
   285a4:	d8801c15 	stw	r2,112(sp)
   285a8:	d8c01b15 	stw	r3,108(sp)
   285ac:	50fff20e 	bge	r10,r3,28578 <__alt_data_end+0xfffe8578>
   285b0:	1001b21e 	bne	r2,zero,28c7c <___vfiprintf_internal_r+0xb84>
   285b4:	843ffc04 	addi	r16,r16,-16
   285b8:	000d883a 	mov	r6,zero
   285bc:	01000044 	movi	r4,1
   285c0:	d811883a 	mov	r8,sp
   285c4:	e43ff116 	blt	fp,r16,2858c <__alt_data_end+0xfffe858c>
   285c8:	a807883a 	mov	r3,r21
   285cc:	d9c02917 	ldw	r7,164(sp)
   285d0:	802b883a 	mov	r21,r16
   285d4:	dc002717 	ldw	r16,156(sp)
   285d8:	d9402317 	ldw	r5,140(sp)
   285dc:	a885883a 	add	r2,r21,r2
   285e0:	45400115 	stw	r21,4(r8)
   285e4:	41400015 	stw	r5,0(r8)
   285e8:	d8801c15 	stw	r2,112(sp)
   285ec:	d9001b15 	stw	r4,108(sp)
   285f0:	014001c4 	movi	r5,7
   285f4:	29026216 	blt	r5,r4,28f80 <___vfiprintf_internal_r+0xe88>
   285f8:	d9801d87 	ldb	r6,118(sp)
   285fc:	42000204 	addi	r8,r8,8
   28600:	21400044 	addi	r5,r4,1
   28604:	3001ae1e 	bne	r6,zero,28cc0 <___vfiprintf_internal_r+0xbc8>
   28608:	3801bb26 	beq	r7,zero,28cf8 <___vfiprintf_internal_r+0xc00>
   2860c:	d9001d04 	addi	r4,sp,116
   28610:	10800084 	addi	r2,r2,2
   28614:	41000015 	stw	r4,0(r8)
   28618:	01000084 	movi	r4,2
   2861c:	41000115 	stw	r4,4(r8)
   28620:	d8801c15 	stw	r2,112(sp)
   28624:	d9401b15 	stw	r5,108(sp)
   28628:	010001c4 	movi	r4,7
   2862c:	2142680e 	bge	r4,r5,28fd0 <___vfiprintf_internal_r+0xed8>
   28630:	1002b11e 	bne	r2,zero,290f8 <___vfiprintf_internal_r+0x1000>
   28634:	01802004 	movi	r6,128
   28638:	01400044 	movi	r5,1
   2863c:	0009883a 	mov	r4,zero
   28640:	d811883a 	mov	r8,sp
   28644:	1981ae1e 	bne	r3,r6,28d00 <___vfiprintf_internal_r+0xc08>
   28648:	d8c02517 	ldw	r3,148(sp)
   2864c:	1cf9c83a 	sub	fp,r3,r19
   28650:	0701ab0e 	bge	zero,fp,28d00 <___vfiprintf_internal_r+0xc08>
   28654:	05400404 	movi	r21,16
   28658:	af03a90e 	bge	r21,fp,29500 <___vfiprintf_internal_r+0x1408>
   2865c:	014000f4 	movhi	r5,3
   28660:	294a0504 	addi	r5,r5,10260
   28664:	d9402315 	stw	r5,140(sp)
   28668:	01c001c4 	movi	r7,7
   2866c:	00000506 	br	28684 <___vfiprintf_internal_r+0x58c>
   28670:	21800084 	addi	r6,r4,2
   28674:	42000204 	addi	r8,r8,8
   28678:	1809883a 	mov	r4,r3
   2867c:	e73ffc04 	addi	fp,fp,-16
   28680:	af000d0e 	bge	r21,fp,286b8 <___vfiprintf_internal_r+0x5c0>
   28684:	10800404 	addi	r2,r2,16
   28688:	20c00044 	addi	r3,r4,1
   2868c:	44800015 	stw	r18,0(r8)
   28690:	45400115 	stw	r21,4(r8)
   28694:	d8801c15 	stw	r2,112(sp)
   28698:	d8c01b15 	stw	r3,108(sp)
   2869c:	38fff40e 	bge	r7,r3,28670 <__alt_data_end+0xfffe8670>
   286a0:	10022b1e 	bne	r2,zero,28f50 <___vfiprintf_internal_r+0xe58>
   286a4:	e73ffc04 	addi	fp,fp,-16
   286a8:	01800044 	movi	r6,1
   286ac:	0009883a 	mov	r4,zero
   286b0:	d811883a 	mov	r8,sp
   286b4:	af3ff316 	blt	r21,fp,28684 <__alt_data_end+0xfffe8684>
   286b8:	d8c02317 	ldw	r3,140(sp)
   286bc:	1705883a 	add	r2,r2,fp
   286c0:	47000115 	stw	fp,4(r8)
   286c4:	40c00015 	stw	r3,0(r8)
   286c8:	d8801c15 	stw	r2,112(sp)
   286cc:	d9801b15 	stw	r6,108(sp)
   286d0:	00c001c4 	movi	r3,7
   286d4:	19829416 	blt	r3,r6,29128 <___vfiprintf_internal_r+0x1030>
   286d8:	8521c83a 	sub	r16,r16,r20
   286dc:	42000204 	addi	r8,r8,8
   286e0:	31400044 	addi	r5,r6,1
   286e4:	3009883a 	mov	r4,r6
   286e8:	04018716 	blt	zero,r16,28d08 <___vfiprintf_internal_r+0xc10>
   286ec:	a085883a 	add	r2,r20,r2
   286f0:	45c00015 	stw	r23,0(r8)
   286f4:	45000115 	stw	r20,4(r8)
   286f8:	d8801c15 	stw	r2,112(sp)
   286fc:	d9401b15 	stw	r5,108(sp)
   28700:	00c001c4 	movi	r3,7
   28704:	1941c20e 	bge	r3,r5,28e10 <___vfiprintf_internal_r+0xd18>
   28708:	1002531e 	bne	r2,zero,29058 <___vfiprintf_internal_r+0xf60>
   2870c:	d8001b15 	stw	zero,108(sp)
   28710:	8c40010c 	andi	r17,r17,4
   28714:	88023226 	beq	r17,zero,28fe0 <___vfiprintf_internal_r+0xee8>
   28718:	d9002517 	ldw	r4,148(sp)
   2871c:	24e3c83a 	sub	r17,r4,r19
   28720:	04432916 	blt	zero,r17,293c8 <___vfiprintf_internal_r+0x12d0>
   28724:	d8802517 	ldw	r2,148(sp)
   28728:	14c0010e 	bge	r2,r19,28730 <___vfiprintf_internal_r+0x638>
   2872c:	9805883a 	mov	r2,r19
   28730:	d8c02417 	ldw	r3,144(sp)
   28734:	1887883a 	add	r3,r3,r2
   28738:	d8c02415 	stw	r3,144(sp)
   2873c:	d8001b15 	stw	zero,108(sp)
   28740:	d811883a 	mov	r8,sp
   28744:	003ea006 	br	281c8 <__alt_data_end+0xfffe81c8>
   28748:	8c400814 	ori	r17,r17,32
   2874c:	b0c00007 	ldb	r3,0(r22)
   28750:	003ec606 	br	2826c <__alt_data_end+0xfffe826c>
   28754:	b0c00007 	ldb	r3,0(r22)
   28758:	00801b04 	movi	r2,108
   2875c:	18832026 	beq	r3,r2,293e0 <___vfiprintf_internal_r+0x12e8>
   28760:	8c400414 	ori	r17,r17,16
   28764:	003ec106 	br	2826c <__alt_data_end+0xfffe826c>
   28768:	9cc03fcc 	andi	r19,r19,255
   2876c:	b811883a 	mov	r8,r23
   28770:	9803981e 	bne	r19,zero,295d4 <___vfiprintf_internal_r+0x14dc>
   28774:	8880080c 	andi	r2,r17,32
   28778:	1002be26 	beq	r2,zero,29274 <___vfiprintf_internal_r+0x117c>
   2877c:	d9002217 	ldw	r4,136(sp)
   28780:	d9402417 	ldw	r5,144(sp)
   28784:	20800017 	ldw	r2,0(r4)
   28788:	2807d7fa 	srai	r3,r5,31
   2878c:	21000104 	addi	r4,r4,4
   28790:	d9002215 	stw	r4,136(sp)
   28794:	11400015 	stw	r5,0(r2)
   28798:	10c00115 	stw	r3,4(r2)
   2879c:	003e8a06 	br	281c8 <__alt_data_end+0xfffe81c8>
   287a0:	9cc03fcc 	andi	r19,r19,255
   287a4:	b811883a 	mov	r8,r23
   287a8:	9803871e 	bne	r19,zero,295c8 <___vfiprintf_internal_r+0x14d0>
   287ac:	8880080c 	andi	r2,r17,32
   287b0:	10009a26 	beq	r2,zero,28a1c <___vfiprintf_internal_r+0x924>
   287b4:	d9002217 	ldw	r4,136(sp)
   287b8:	d8001d85 	stb	zero,118(sp)
   287bc:	20800204 	addi	r2,r4,8
   287c0:	24c00017 	ldw	r19,0(r4)
   287c4:	25000117 	ldw	r20,4(r4)
   287c8:	8002a416 	blt	r16,zero,2925c <___vfiprintf_internal_r+0x1164>
   287cc:	013fdfc4 	movi	r4,-129
   287d0:	9d06b03a 	or	r3,r19,r20
   287d4:	d8802215 	stw	r2,136(sp)
   287d8:	8922703a 	and	r17,r17,r4
   287dc:	18009b26 	beq	r3,zero,28a4c <___vfiprintf_internal_r+0x954>
   287e0:	002b883a 	mov	r21,zero
   287e4:	ddc01a04 	addi	r23,sp,104
   287e8:	9806d0fa 	srli	r3,r19,3
   287ec:	a008977a 	slli	r4,r20,29
   287f0:	a028d0fa 	srli	r20,r20,3
   287f4:	9cc001cc 	andi	r19,r19,7
   287f8:	98800c04 	addi	r2,r19,48
   287fc:	bdffffc4 	addi	r23,r23,-1
   28800:	20e6b03a 	or	r19,r4,r3
   28804:	b8800005 	stb	r2,0(r23)
   28808:	9d06b03a 	or	r3,r19,r20
   2880c:	183ff61e 	bne	r3,zero,287e8 <__alt_data_end+0xfffe87e8>
   28810:	88c0004c 	andi	r3,r17,1
   28814:	18021f1e 	bne	r3,zero,29094 <___vfiprintf_internal_r+0xf9c>
   28818:	d9401e17 	ldw	r5,120(sp)
   2881c:	2de9c83a 	sub	r20,r5,r23
   28820:	003f3806 	br	28504 <__alt_data_end+0xfffe8504>
   28824:	9cc03fcc 	andi	r19,r19,255
   28828:	b811883a 	mov	r8,r23
   2882c:	98034f1e 	bne	r19,zero,2956c <___vfiprintf_internal_r+0x1474>
   28830:	008000f4 	movhi	r2,3
   28834:	1089a404 	addi	r2,r2,9872
   28838:	d8802615 	stw	r2,152(sp)
   2883c:	8880080c 	andi	r2,r17,32
   28840:	1000ac26 	beq	r2,zero,28af4 <___vfiprintf_internal_r+0x9fc>
   28844:	d9002217 	ldw	r4,136(sp)
   28848:	24c00017 	ldw	r19,0(r4)
   2884c:	25000117 	ldw	r20,4(r4)
   28850:	21000204 	addi	r4,r4,8
   28854:	d9002215 	stw	r4,136(sp)
   28858:	8880004c 	andi	r2,r17,1
   2885c:	1001e726 	beq	r2,zero,28ffc <___vfiprintf_internal_r+0xf04>
   28860:	9d04b03a 	or	r2,r19,r20
   28864:	10025c1e 	bne	r2,zero,291d8 <___vfiprintf_internal_r+0x10e0>
   28868:	d8001d85 	stb	zero,118(sp)
   2886c:	80024416 	blt	r16,zero,29180 <___vfiprintf_internal_r+0x1088>
   28870:	00bfdfc4 	movi	r2,-129
   28874:	88a2703a 	and	r17,r17,r2
   28878:	003f1d06 	br	284f0 <__alt_data_end+0xfffe84f0>
   2887c:	d8c02217 	ldw	r3,136(sp)
   28880:	04c00044 	movi	r19,1
   28884:	b811883a 	mov	r8,r23
   28888:	18800017 	ldw	r2,0(r3)
   2888c:	18c00104 	addi	r3,r3,4
   28890:	d8001d85 	stb	zero,118(sp)
   28894:	d8801005 	stb	r2,64(sp)
   28898:	d8c02215 	stw	r3,136(sp)
   2889c:	9829883a 	mov	r20,r19
   288a0:	ddc01004 	addi	r23,sp,64
   288a4:	0021883a 	mov	r16,zero
   288a8:	003f1e06 	br	28524 <__alt_data_end+0xfffe8524>
   288ac:	9cc03fcc 	andi	r19,r19,255
   288b0:	b811883a 	mov	r8,r23
   288b4:	9803331e 	bne	r19,zero,29584 <___vfiprintf_internal_r+0x148c>
   288b8:	8880080c 	andi	r2,r17,32
   288bc:	10004826 	beq	r2,zero,289e0 <___vfiprintf_internal_r+0x8e8>
   288c0:	d9002217 	ldw	r4,136(sp)
   288c4:	20800117 	ldw	r2,4(r4)
   288c8:	24c00017 	ldw	r19,0(r4)
   288cc:	21000204 	addi	r4,r4,8
   288d0:	d9002215 	stw	r4,136(sp)
   288d4:	1029883a 	mov	r20,r2
   288d8:	10024c16 	blt	r2,zero,2920c <___vfiprintf_internal_r+0x1114>
   288dc:	dd401d83 	ldbu	r21,118(sp)
   288e0:	80007116 	blt	r16,zero,28aa8 <___vfiprintf_internal_r+0x9b0>
   288e4:	00ffdfc4 	movi	r3,-129
   288e8:	9d04b03a 	or	r2,r19,r20
   288ec:	88e2703a 	and	r17,r17,r3
   288f0:	1000d126 	beq	r2,zero,28c38 <___vfiprintf_internal_r+0xb40>
   288f4:	a0023526 	beq	r20,zero,291cc <___vfiprintf_internal_r+0x10d4>
   288f8:	ddc01a04 	addi	r23,sp,104
   288fc:	4039883a 	mov	fp,r8
   28900:	9809883a 	mov	r4,r19
   28904:	a00b883a 	mov	r5,r20
   28908:	01800284 	movi	r6,10
   2890c:	000f883a 	mov	r7,zero
   28910:	002a6240 	call	2a624 <__umoddi3>
   28914:	10800c04 	addi	r2,r2,48
   28918:	bdffffc4 	addi	r23,r23,-1
   2891c:	9809883a 	mov	r4,r19
   28920:	a00b883a 	mov	r5,r20
   28924:	b8800005 	stb	r2,0(r23)
   28928:	01800284 	movi	r6,10
   2892c:	000f883a 	mov	r7,zero
   28930:	002a0280 	call	2a028 <__udivdi3>
   28934:	1027883a 	mov	r19,r2
   28938:	10c4b03a 	or	r2,r2,r3
   2893c:	1829883a 	mov	r20,r3
   28940:	103fef1e 	bne	r2,zero,28900 <__alt_data_end+0xfffe8900>
   28944:	d9001e17 	ldw	r4,120(sp)
   28948:	e011883a 	mov	r8,fp
   2894c:	25e9c83a 	sub	r20,r4,r23
   28950:	003eec06 	br	28504 <__alt_data_end+0xfffe8504>
   28954:	d8802307 	ldb	r2,140(sp)
   28958:	1002361e 	bne	r2,zero,29234 <___vfiprintf_internal_r+0x113c>
   2895c:	00c00804 	movi	r3,32
   28960:	d8c02305 	stb	r3,140(sp)
   28964:	04c00044 	movi	r19,1
   28968:	b0c00007 	ldb	r3,0(r22)
   2896c:	003e3f06 	br	2826c <__alt_data_end+0xfffe826c>
   28970:	8c400054 	ori	r17,r17,1
   28974:	b0c00007 	ldb	r3,0(r22)
   28978:	003e3c06 	br	2826c <__alt_data_end+0xfffe826c>
   2897c:	8c402014 	ori	r17,r17,128
   28980:	b0c00007 	ldb	r3,0(r22)
   28984:	003e3906 	br	2826c <__alt_data_end+0xfffe826c>
   28988:	dc002715 	stw	r16,156(sp)
   2898c:	d8002515 	stw	zero,148(sp)
   28990:	1f3ff404 	addi	fp,r3,-48
   28994:	0009883a 	mov	r4,zero
   28998:	b021883a 	mov	r16,r22
   2899c:	01400284 	movi	r5,10
   289a0:	002ad9c0 	call	2ad9c <__mulsi3>
   289a4:	80c00007 	ldb	r3,0(r16)
   289a8:	e089883a 	add	r4,fp,r2
   289ac:	b5800044 	addi	r22,r22,1
   289b0:	1f3ff404 	addi	fp,r3,-48
   289b4:	b021883a 	mov	r16,r22
   289b8:	af3ff82e 	bgeu	r21,fp,2899c <__alt_data_end+0xfffe899c>
   289bc:	d9002515 	stw	r4,148(sp)
   289c0:	dc002717 	ldw	r16,156(sp)
   289c4:	003e2a06 	br	28270 <__alt_data_end+0xfffe8270>
   289c8:	9cc03fcc 	andi	r19,r19,255
   289cc:	b811883a 	mov	r8,r23
   289d0:	9802e91e 	bne	r19,zero,29578 <___vfiprintf_internal_r+0x1480>
   289d4:	8c400414 	ori	r17,r17,16
   289d8:	8880080c 	andi	r2,r17,32
   289dc:	103fb81e 	bne	r2,zero,288c0 <__alt_data_end+0xfffe88c0>
   289e0:	8880040c 	andi	r2,r17,16
   289e4:	10022e26 	beq	r2,zero,292a0 <___vfiprintf_internal_r+0x11a8>
   289e8:	d9402217 	ldw	r5,136(sp)
   289ec:	2cc00017 	ldw	r19,0(r5)
   289f0:	29400104 	addi	r5,r5,4
   289f4:	d9402215 	stw	r5,136(sp)
   289f8:	9829d7fa 	srai	r20,r19,31
   289fc:	a005883a 	mov	r2,r20
   28a00:	003fb506 	br	288d8 <__alt_data_end+0xfffe88d8>
   28a04:	9cc03fcc 	andi	r19,r19,255
   28a08:	b811883a 	mov	r8,r23
   28a0c:	9802fa1e 	bne	r19,zero,295f8 <___vfiprintf_internal_r+0x1500>
   28a10:	8c400414 	ori	r17,r17,16
   28a14:	8880080c 	andi	r2,r17,32
   28a18:	103f661e 	bne	r2,zero,287b4 <__alt_data_end+0xfffe87b4>
   28a1c:	8880040c 	andi	r2,r17,16
   28a20:	10020626 	beq	r2,zero,2923c <___vfiprintf_internal_r+0x1144>
   28a24:	d9402217 	ldw	r5,136(sp)
   28a28:	d8001d85 	stb	zero,118(sp)
   28a2c:	0029883a 	mov	r20,zero
   28a30:	28800104 	addi	r2,r5,4
   28a34:	2cc00017 	ldw	r19,0(r5)
   28a38:	80020816 	blt	r16,zero,2925c <___vfiprintf_internal_r+0x1164>
   28a3c:	00ffdfc4 	movi	r3,-129
   28a40:	d8802215 	stw	r2,136(sp)
   28a44:	88e2703a 	and	r17,r17,r3
   28a48:	983f651e 	bne	r19,zero,287e0 <__alt_data_end+0xfffe87e0>
   28a4c:	002b883a 	mov	r21,zero
   28a50:	8002cf26 	beq	r16,zero,29590 <___vfiprintf_internal_r+0x1498>
   28a54:	0027883a 	mov	r19,zero
   28a58:	0029883a 	mov	r20,zero
   28a5c:	003f6106 	br	287e4 <__alt_data_end+0xfffe87e4>
   28a60:	9cc03fcc 	andi	r19,r19,255
   28a64:	b811883a 	mov	r8,r23
   28a68:	9802e01e 	bne	r19,zero,295ec <___vfiprintf_internal_r+0x14f4>
   28a6c:	8c400414 	ori	r17,r17,16
   28a70:	8880080c 	andi	r2,r17,32
   28a74:	1000641e 	bne	r2,zero,28c08 <___vfiprintf_internal_r+0xb10>
   28a78:	8880040c 	andi	r2,r17,16
   28a7c:	1001c81e 	bne	r2,zero,291a0 <___vfiprintf_internal_r+0x10a8>
   28a80:	8880100c 	andi	r2,r17,64
   28a84:	d8001d85 	stb	zero,118(sp)
   28a88:	1002281e 	bne	r2,zero,2932c <___vfiprintf_internal_r+0x1234>
   28a8c:	d9002217 	ldw	r4,136(sp)
   28a90:	0029883a 	mov	r20,zero
   28a94:	20800104 	addi	r2,r4,4
   28a98:	24c00017 	ldw	r19,0(r4)
   28a9c:	8001c60e 	bge	r16,zero,291b8 <___vfiprintf_internal_r+0x10c0>
   28aa0:	d8802215 	stw	r2,136(sp)
   28aa4:	002b883a 	mov	r21,zero
   28aa8:	9d04b03a 	or	r2,r19,r20
   28aac:	103f911e 	bne	r2,zero,288f4 <__alt_data_end+0xfffe88f4>
   28ab0:	00800044 	movi	r2,1
   28ab4:	10803fcc 	andi	r2,r2,255
   28ab8:	00c00044 	movi	r3,1
   28abc:	10c05f26 	beq	r2,r3,28c3c <___vfiprintf_internal_r+0xb44>
   28ac0:	00c00084 	movi	r3,2
   28ac4:	10ffe31e 	bne	r2,r3,28a54 <__alt_data_end+0xfffe8a54>
   28ac8:	0027883a 	mov	r19,zero
   28acc:	0029883a 	mov	r20,zero
   28ad0:	00015106 	br	29018 <___vfiprintf_internal_r+0xf20>
   28ad4:	9cc03fcc 	andi	r19,r19,255
   28ad8:	b811883a 	mov	r8,r23
   28adc:	9802c01e 	bne	r19,zero,295e0 <___vfiprintf_internal_r+0x14e8>
   28ae0:	014000f4 	movhi	r5,3
   28ae4:	29499f04 	addi	r5,r5,9852
   28ae8:	d9402615 	stw	r5,152(sp)
   28aec:	8880080c 	andi	r2,r17,32
   28af0:	103f541e 	bne	r2,zero,28844 <__alt_data_end+0xfffe8844>
   28af4:	8880040c 	andi	r2,r17,16
   28af8:	1001f226 	beq	r2,zero,292c4 <___vfiprintf_internal_r+0x11cc>
   28afc:	d9402217 	ldw	r5,136(sp)
   28b00:	0029883a 	mov	r20,zero
   28b04:	2cc00017 	ldw	r19,0(r5)
   28b08:	29400104 	addi	r5,r5,4
   28b0c:	d9402215 	stw	r5,136(sp)
   28b10:	003f5106 	br	28858 <__alt_data_end+0xfffe8858>
   28b14:	d8c02217 	ldw	r3,136(sp)
   28b18:	b811883a 	mov	r8,r23
   28b1c:	d8001d85 	stb	zero,118(sp)
   28b20:	1dc00017 	ldw	r23,0(r3)
   28b24:	1f000104 	addi	fp,r3,4
   28b28:	b8025926 	beq	r23,zero,29490 <___vfiprintf_internal_r+0x1398>
   28b2c:	80023316 	blt	r16,zero,293fc <___vfiprintf_internal_r+0x1304>
   28b30:	800d883a 	mov	r6,r16
   28b34:	000b883a 	mov	r5,zero
   28b38:	b809883a 	mov	r4,r23
   28b3c:	da002a15 	stw	r8,168(sp)
   28b40:	00260d00 	call	260d0 <memchr>
   28b44:	da002a17 	ldw	r8,168(sp)
   28b48:	10026826 	beq	r2,zero,294ec <___vfiprintf_internal_r+0x13f4>
   28b4c:	15e9c83a 	sub	r20,r2,r23
   28b50:	dd401d83 	ldbu	r21,118(sp)
   28b54:	df002215 	stw	fp,136(sp)
   28b58:	0021883a 	mov	r16,zero
   28b5c:	003e6906 	br	28504 <__alt_data_end+0xfffe8504>
   28b60:	9cc03fcc 	andi	r19,r19,255
   28b64:	b811883a 	mov	r8,r23
   28b68:	983fc126 	beq	r19,zero,28a70 <__alt_data_end+0xfffe8a70>
   28b6c:	d8c02303 	ldbu	r3,140(sp)
   28b70:	d8c01d85 	stb	r3,118(sp)
   28b74:	003fbe06 	br	28a70 <__alt_data_end+0xfffe8a70>
   28b78:	d9002217 	ldw	r4,136(sp)
   28b7c:	d9402217 	ldw	r5,136(sp)
   28b80:	21000017 	ldw	r4,0(r4)
   28b84:	28800104 	addi	r2,r5,4
   28b88:	d9002515 	stw	r4,148(sp)
   28b8c:	203e3d16 	blt	r4,zero,28484 <__alt_data_end+0xfffe8484>
   28b90:	d8802215 	stw	r2,136(sp)
   28b94:	b0c00007 	ldb	r3,0(r22)
   28b98:	003db406 	br	2826c <__alt_data_end+0xfffe826c>
   28b9c:	00c00ac4 	movi	r3,43
   28ba0:	d8c02305 	stb	r3,140(sp)
   28ba4:	04c00044 	movi	r19,1
   28ba8:	b0c00007 	ldb	r3,0(r22)
   28bac:	003daf06 	br	2826c <__alt_data_end+0xfffe826c>
   28bb0:	b0c00007 	ldb	r3,0(r22)
   28bb4:	01000a84 	movi	r4,42
   28bb8:	b4000044 	addi	r16,r22,1
   28bbc:	19025e26 	beq	r3,r4,29538 <___vfiprintf_internal_r+0x1440>
   28bc0:	1f3ff404 	addi	fp,r3,-48
   28bc4:	0009883a 	mov	r4,zero
   28bc8:	af025236 	bltu	r21,fp,29514 <___vfiprintf_internal_r+0x141c>
   28bcc:	01400284 	movi	r5,10
   28bd0:	002ad9c0 	call	2ad9c <__mulsi3>
   28bd4:	80c00007 	ldb	r3,0(r16)
   28bd8:	1709883a 	add	r4,r2,fp
   28bdc:	85800044 	addi	r22,r16,1
   28be0:	1f3ff404 	addi	fp,r3,-48
   28be4:	b021883a 	mov	r16,r22
   28be8:	af3ff82e 	bgeu	r21,fp,28bcc <__alt_data_end+0xfffe8bcc>
   28bec:	2021883a 	mov	r16,r4
   28bf0:	203d9f0e 	bge	r4,zero,28270 <__alt_data_end+0xfffe8270>
   28bf4:	043fffc4 	movi	r16,-1
   28bf8:	003d9d06 	br	28270 <__alt_data_end+0xfffe8270>
   28bfc:	8c401014 	ori	r17,r17,64
   28c00:	b0c00007 	ldb	r3,0(r22)
   28c04:	003d9906 	br	2826c <__alt_data_end+0xfffe826c>
   28c08:	d9002217 	ldw	r4,136(sp)
   28c0c:	d8001d85 	stb	zero,118(sp)
   28c10:	20c00204 	addi	r3,r4,8
   28c14:	24c00017 	ldw	r19,0(r4)
   28c18:	25000117 	ldw	r20,4(r4)
   28c1c:	8001e716 	blt	r16,zero,293bc <___vfiprintf_internal_r+0x12c4>
   28c20:	013fdfc4 	movi	r4,-129
   28c24:	9d04b03a 	or	r2,r19,r20
   28c28:	d8c02215 	stw	r3,136(sp)
   28c2c:	8922703a 	and	r17,r17,r4
   28c30:	002b883a 	mov	r21,zero
   28c34:	103f2f1e 	bne	r2,zero,288f4 <__alt_data_end+0xfffe88f4>
   28c38:	803e2f26 	beq	r16,zero,284f8 <__alt_data_end+0xfffe84f8>
   28c3c:	0027883a 	mov	r19,zero
   28c40:	9cc00c04 	addi	r19,r19,48
   28c44:	dcc019c5 	stb	r19,103(sp)
   28c48:	dd002817 	ldw	r20,160(sp)
   28c4c:	ddc019c4 	addi	r23,sp,103
   28c50:	003e2c06 	br	28504 <__alt_data_end+0xfffe8504>
   28c54:	9cc03fcc 	andi	r19,r19,255
   28c58:	b811883a 	mov	r8,r23
   28c5c:	9802571e 	bne	r19,zero,295bc <___vfiprintf_internal_r+0x14c4>
   28c60:	18005726 	beq	r3,zero,28dc0 <___vfiprintf_internal_r+0xcc8>
   28c64:	04c00044 	movi	r19,1
   28c68:	d8c01005 	stb	r3,64(sp)
   28c6c:	d8001d85 	stb	zero,118(sp)
   28c70:	9829883a 	mov	r20,r19
   28c74:	ddc01004 	addi	r23,sp,64
   28c78:	003f0a06 	br	288a4 <__alt_data_end+0xfffe88a4>
   28c7c:	d9402017 	ldw	r5,128(sp)
   28c80:	d9002117 	ldw	r4,132(sp)
   28c84:	d9801a04 	addi	r6,sp,104
   28c88:	da802a15 	stw	r10,168(sp)
   28c8c:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   28c90:	da802a17 	ldw	r10,168(sp)
   28c94:	1000501e 	bne	r2,zero,28dd8 <___vfiprintf_internal_r+0xce0>
   28c98:	d9801b17 	ldw	r6,108(sp)
   28c9c:	d8801c17 	ldw	r2,112(sp)
   28ca0:	d811883a 	mov	r8,sp
   28ca4:	31000044 	addi	r4,r6,1
   28ca8:	003e3606 	br	28584 <__alt_data_end+0xfffe8584>
   28cac:	d9001b17 	ldw	r4,108(sp)
   28cb0:	d8801c17 	ldw	r2,112(sp)
   28cb4:	21400044 	addi	r5,r4,1
   28cb8:	d9801d87 	ldb	r6,118(sp)
   28cbc:	303e5226 	beq	r6,zero,28608 <__alt_data_end+0xfffe8608>
   28cc0:	01800044 	movi	r6,1
   28cc4:	d9001d84 	addi	r4,sp,118
   28cc8:	1185883a 	add	r2,r2,r6
   28ccc:	41000015 	stw	r4,0(r8)
   28cd0:	41800115 	stw	r6,4(r8)
   28cd4:	d8801c15 	stw	r2,112(sp)
   28cd8:	d9401b15 	stw	r5,108(sp)
   28cdc:	010001c4 	movi	r4,7
   28ce0:	2140b00e 	bge	r4,r5,28fa4 <___vfiprintf_internal_r+0xeac>
   28ce4:	1000f61e 	bne	r2,zero,290c0 <___vfiprintf_internal_r+0xfc8>
   28ce8:	3800b31e 	bne	r7,zero,28fb8 <___vfiprintf_internal_r+0xec0>
   28cec:	0009883a 	mov	r4,zero
   28cf0:	300b883a 	mov	r5,r6
   28cf4:	d811883a 	mov	r8,sp
   28cf8:	01802004 	movi	r6,128
   28cfc:	19be5226 	beq	r3,r6,28648 <__alt_data_end+0xfffe8648>
   28d00:	8521c83a 	sub	r16,r16,r20
   28d04:	043e790e 	bge	zero,r16,286ec <__alt_data_end+0xfffe86ec>
   28d08:	05400404 	movi	r21,16
   28d0c:	ac01b00e 	bge	r21,r16,293d0 <___vfiprintf_internal_r+0x12d8>
   28d10:	014000f4 	movhi	r5,3
   28d14:	294a0504 	addi	r5,r5,10260
   28d18:	d9402315 	stw	r5,140(sp)
   28d1c:	070001c4 	movi	fp,7
   28d20:	00000506 	br	28d38 <___vfiprintf_internal_r+0xc40>
   28d24:	21400084 	addi	r5,r4,2
   28d28:	42000204 	addi	r8,r8,8
   28d2c:	1809883a 	mov	r4,r3
   28d30:	843ffc04 	addi	r16,r16,-16
   28d34:	ac000d0e 	bge	r21,r16,28d6c <___vfiprintf_internal_r+0xc74>
   28d38:	10800404 	addi	r2,r2,16
   28d3c:	20c00044 	addi	r3,r4,1
   28d40:	44800015 	stw	r18,0(r8)
   28d44:	45400115 	stw	r21,4(r8)
   28d48:	d8801c15 	stw	r2,112(sp)
   28d4c:	d8c01b15 	stw	r3,108(sp)
   28d50:	e0fff40e 	bge	fp,r3,28d24 <__alt_data_end+0xfffe8d24>
   28d54:	1000101e 	bne	r2,zero,28d98 <___vfiprintf_internal_r+0xca0>
   28d58:	843ffc04 	addi	r16,r16,-16
   28d5c:	01400044 	movi	r5,1
   28d60:	0009883a 	mov	r4,zero
   28d64:	d811883a 	mov	r8,sp
   28d68:	ac3ff316 	blt	r21,r16,28d38 <__alt_data_end+0xfffe8d38>
   28d6c:	d8c02317 	ldw	r3,140(sp)
   28d70:	1405883a 	add	r2,r2,r16
   28d74:	44000115 	stw	r16,4(r8)
   28d78:	40c00015 	stw	r3,0(r8)
   28d7c:	d8801c15 	stw	r2,112(sp)
   28d80:	d9401b15 	stw	r5,108(sp)
   28d84:	00c001c4 	movi	r3,7
   28d88:	19401916 	blt	r3,r5,28df0 <___vfiprintf_internal_r+0xcf8>
   28d8c:	42000204 	addi	r8,r8,8
   28d90:	29400044 	addi	r5,r5,1
   28d94:	003e5506 	br	286ec <__alt_data_end+0xfffe86ec>
   28d98:	d9402017 	ldw	r5,128(sp)
   28d9c:	d9002117 	ldw	r4,132(sp)
   28da0:	d9801a04 	addi	r6,sp,104
   28da4:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   28da8:	10000b1e 	bne	r2,zero,28dd8 <___vfiprintf_internal_r+0xce0>
   28dac:	d9001b17 	ldw	r4,108(sp)
   28db0:	d8801c17 	ldw	r2,112(sp)
   28db4:	d811883a 	mov	r8,sp
   28db8:	21400044 	addi	r5,r4,1
   28dbc:	003fdc06 	br	28d30 <__alt_data_end+0xfffe8d30>
   28dc0:	d8801c17 	ldw	r2,112(sp)
   28dc4:	10000426 	beq	r2,zero,28dd8 <___vfiprintf_internal_r+0xce0>
   28dc8:	d9402017 	ldw	r5,128(sp)
   28dcc:	d9002117 	ldw	r4,132(sp)
   28dd0:	d9801a04 	addi	r6,sp,104
   28dd4:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   28dd8:	d9402017 	ldw	r5,128(sp)
   28ddc:	2880030b 	ldhu	r2,12(r5)
   28de0:	1080100c 	andi	r2,r2,64
   28de4:	10014d1e 	bne	r2,zero,2931c <___vfiprintf_internal_r+0x1224>
   28de8:	d8802417 	ldw	r2,144(sp)
   28dec:	003d9706 	br	2844c <__alt_data_end+0xfffe844c>
   28df0:	1000d21e 	bne	r2,zero,2913c <___vfiprintf_internal_r+0x1044>
   28df4:	00c00044 	movi	r3,1
   28df8:	a005883a 	mov	r2,r20
   28dfc:	ddc00015 	stw	r23,0(sp)
   28e00:	dd000115 	stw	r20,4(sp)
   28e04:	dd001c15 	stw	r20,112(sp)
   28e08:	d8c01b15 	stw	r3,108(sp)
   28e0c:	d811883a 	mov	r8,sp
   28e10:	42000204 	addi	r8,r8,8
   28e14:	8c40010c 	andi	r17,r17,4
   28e18:	88004026 	beq	r17,zero,28f1c <___vfiprintf_internal_r+0xe24>
   28e1c:	d9002517 	ldw	r4,148(sp)
   28e20:	24e3c83a 	sub	r17,r4,r19
   28e24:	04403d0e 	bge	zero,r17,28f1c <___vfiprintf_internal_r+0xe24>
   28e28:	04000404 	movi	r16,16
   28e2c:	8441a90e 	bge	r16,r17,294d4 <___vfiprintf_internal_r+0x13dc>
   28e30:	00c000f4 	movhi	r3,3
   28e34:	18ca0904 	addi	r3,r3,10276
   28e38:	d9001b17 	ldw	r4,108(sp)
   28e3c:	d8c02315 	stw	r3,140(sp)
   28e40:	050001c4 	movi	r20,7
   28e44:	dd402117 	ldw	r21,132(sp)
   28e48:	ddc02017 	ldw	r23,128(sp)
   28e4c:	00000506 	br	28e64 <___vfiprintf_internal_r+0xd6c>
   28e50:	21400084 	addi	r5,r4,2
   28e54:	42000204 	addi	r8,r8,8
   28e58:	1809883a 	mov	r4,r3
   28e5c:	8c7ffc04 	addi	r17,r17,-16
   28e60:	84400f0e 	bge	r16,r17,28ea0 <___vfiprintf_internal_r+0xda8>
   28e64:	014000f4 	movhi	r5,3
   28e68:	10800404 	addi	r2,r2,16
   28e6c:	20c00044 	addi	r3,r4,1
   28e70:	294a0904 	addi	r5,r5,10276
   28e74:	41400015 	stw	r5,0(r8)
   28e78:	44000115 	stw	r16,4(r8)
   28e7c:	d8801c15 	stw	r2,112(sp)
   28e80:	d8c01b15 	stw	r3,108(sp)
   28e84:	a0fff20e 	bge	r20,r3,28e50 <__alt_data_end+0xfffe8e50>
   28e88:	1000141e 	bne	r2,zero,28edc <___vfiprintf_internal_r+0xde4>
   28e8c:	8c7ffc04 	addi	r17,r17,-16
   28e90:	01400044 	movi	r5,1
   28e94:	0009883a 	mov	r4,zero
   28e98:	d811883a 	mov	r8,sp
   28e9c:	847ff116 	blt	r16,r17,28e64 <__alt_data_end+0xfffe8e64>
   28ea0:	d8c02317 	ldw	r3,140(sp)
   28ea4:	1445883a 	add	r2,r2,r17
   28ea8:	44400115 	stw	r17,4(r8)
   28eac:	40c00015 	stw	r3,0(r8)
   28eb0:	d8801c15 	stw	r2,112(sp)
   28eb4:	d9401b15 	stw	r5,108(sp)
   28eb8:	00c001c4 	movi	r3,7
   28ebc:	1940170e 	bge	r3,r5,28f1c <___vfiprintf_internal_r+0xe24>
   28ec0:	1000101e 	bne	r2,zero,28f04 <___vfiprintf_internal_r+0xe0c>
   28ec4:	d8802517 	ldw	r2,148(sp)
   28ec8:	14c11616 	blt	r2,r19,29324 <___vfiprintf_internal_r+0x122c>
   28ecc:	d9002417 	ldw	r4,144(sp)
   28ed0:	2089883a 	add	r4,r4,r2
   28ed4:	d9002415 	stw	r4,144(sp)
   28ed8:	003e1806 	br	2873c <__alt_data_end+0xfffe873c>
   28edc:	d9801a04 	addi	r6,sp,104
   28ee0:	b80b883a 	mov	r5,r23
   28ee4:	a809883a 	mov	r4,r21
   28ee8:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   28eec:	103fba1e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   28ef0:	d9001b17 	ldw	r4,108(sp)
   28ef4:	d8801c17 	ldw	r2,112(sp)
   28ef8:	d811883a 	mov	r8,sp
   28efc:	21400044 	addi	r5,r4,1
   28f00:	003fd606 	br	28e5c <__alt_data_end+0xfffe8e5c>
   28f04:	d9402017 	ldw	r5,128(sp)
   28f08:	d9002117 	ldw	r4,132(sp)
   28f0c:	d9801a04 	addi	r6,sp,104
   28f10:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   28f14:	103fb01e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   28f18:	d8801c17 	ldw	r2,112(sp)
   28f1c:	d8c02517 	ldw	r3,148(sp)
   28f20:	1cc0010e 	bge	r3,r19,28f28 <___vfiprintf_internal_r+0xe30>
   28f24:	9807883a 	mov	r3,r19
   28f28:	d9002417 	ldw	r4,144(sp)
   28f2c:	20c9883a 	add	r4,r4,r3
   28f30:	d9002415 	stw	r4,144(sp)
   28f34:	103e0126 	beq	r2,zero,2873c <__alt_data_end+0xfffe873c>
   28f38:	d9402017 	ldw	r5,128(sp)
   28f3c:	d9002117 	ldw	r4,132(sp)
   28f40:	d9801a04 	addi	r6,sp,104
   28f44:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   28f48:	103dfc26 	beq	r2,zero,2873c <__alt_data_end+0xfffe873c>
   28f4c:	003fa206 	br	28dd8 <__alt_data_end+0xfffe8dd8>
   28f50:	d9402017 	ldw	r5,128(sp)
   28f54:	d9002117 	ldw	r4,132(sp)
   28f58:	d9801a04 	addi	r6,sp,104
   28f5c:	d9c02b15 	stw	r7,172(sp)
   28f60:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   28f64:	d9c02b17 	ldw	r7,172(sp)
   28f68:	103f9b1e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   28f6c:	d9001b17 	ldw	r4,108(sp)
   28f70:	d8801c17 	ldw	r2,112(sp)
   28f74:	d811883a 	mov	r8,sp
   28f78:	21800044 	addi	r6,r4,1
   28f7c:	003dbf06 	br	2867c <__alt_data_end+0xfffe867c>
   28f80:	1000d81e 	bne	r2,zero,292e4 <___vfiprintf_internal_r+0x11ec>
   28f84:	d9001d87 	ldb	r4,118(sp)
   28f88:	20000a26 	beq	r4,zero,28fb4 <___vfiprintf_internal_r+0xebc>
   28f8c:	00800044 	movi	r2,1
   28f90:	d9001d84 	addi	r4,sp,118
   28f94:	100b883a 	mov	r5,r2
   28f98:	d9000015 	stw	r4,0(sp)
   28f9c:	d8800115 	stw	r2,4(sp)
   28fa0:	d811883a 	mov	r8,sp
   28fa4:	2809883a 	mov	r4,r5
   28fa8:	42000204 	addi	r8,r8,8
   28fac:	29400044 	addi	r5,r5,1
   28fb0:	003d9506 	br	28608 <__alt_data_end+0xfffe8608>
   28fb4:	3800fd26 	beq	r7,zero,293ac <___vfiprintf_internal_r+0x12b4>
   28fb8:	00800084 	movi	r2,2
   28fbc:	d9001d04 	addi	r4,sp,116
   28fc0:	d9000015 	stw	r4,0(sp)
   28fc4:	d8800115 	stw	r2,4(sp)
   28fc8:	01400044 	movi	r5,1
   28fcc:	d811883a 	mov	r8,sp
   28fd0:	2809883a 	mov	r4,r5
   28fd4:	42000204 	addi	r8,r8,8
   28fd8:	29400044 	addi	r5,r5,1
   28fdc:	003f4606 	br	28cf8 <__alt_data_end+0xfffe8cf8>
   28fe0:	d8802517 	ldw	r2,148(sp)
   28fe4:	14c0010e 	bge	r2,r19,28fec <___vfiprintf_internal_r+0xef4>
   28fe8:	9805883a 	mov	r2,r19
   28fec:	d9402417 	ldw	r5,144(sp)
   28ff0:	288b883a 	add	r5,r5,r2
   28ff4:	d9402415 	stw	r5,144(sp)
   28ff8:	003dd006 	br	2873c <__alt_data_end+0xfffe873c>
   28ffc:	d8001d85 	stb	zero,118(sp)
   29000:	80005d16 	blt	r16,zero,29178 <___vfiprintf_internal_r+0x1080>
   29004:	00ffdfc4 	movi	r3,-129
   29008:	9d04b03a 	or	r2,r19,r20
   2900c:	88e2703a 	and	r17,r17,r3
   29010:	103d3726 	beq	r2,zero,284f0 <__alt_data_end+0xfffe84f0>
   29014:	002b883a 	mov	r21,zero
   29018:	d9002617 	ldw	r4,152(sp)
   2901c:	ddc01a04 	addi	r23,sp,104
   29020:	988003cc 	andi	r2,r19,15
   29024:	a006973a 	slli	r3,r20,28
   29028:	2085883a 	add	r2,r4,r2
   2902c:	9826d13a 	srli	r19,r19,4
   29030:	10800003 	ldbu	r2,0(r2)
   29034:	a028d13a 	srli	r20,r20,4
   29038:	bdffffc4 	addi	r23,r23,-1
   2903c:	1ce6b03a 	or	r19,r3,r19
   29040:	b8800005 	stb	r2,0(r23)
   29044:	9d04b03a 	or	r2,r19,r20
   29048:	103ff51e 	bne	r2,zero,29020 <__alt_data_end+0xfffe9020>
   2904c:	d8801e17 	ldw	r2,120(sp)
   29050:	15e9c83a 	sub	r20,r2,r23
   29054:	003d2b06 	br	28504 <__alt_data_end+0xfffe8504>
   29058:	d9402017 	ldw	r5,128(sp)
   2905c:	d9002117 	ldw	r4,132(sp)
   29060:	d9801a04 	addi	r6,sp,104
   29064:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   29068:	103f5b1e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   2906c:	d8801c17 	ldw	r2,112(sp)
   29070:	d811883a 	mov	r8,sp
   29074:	003f6706 	br	28e14 <__alt_data_end+0xfffe8e14>
   29078:	d9402017 	ldw	r5,128(sp)
   2907c:	d9002117 	ldw	r4,132(sp)
   29080:	d9801a04 	addi	r6,sp,104
   29084:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   29088:	103f531e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   2908c:	d811883a 	mov	r8,sp
   29090:	003cd906 	br	283f8 <__alt_data_end+0xfffe83f8>
   29094:	10803fcc 	andi	r2,r2,255
   29098:	1080201c 	xori	r2,r2,128
   2909c:	10bfe004 	addi	r2,r2,-128
   290a0:	00c00c04 	movi	r3,48
   290a4:	10ffe926 	beq	r2,r3,2904c <__alt_data_end+0xfffe904c>
   290a8:	b8ffffc5 	stb	r3,-1(r23)
   290ac:	d8c01e17 	ldw	r3,120(sp)
   290b0:	b8bfffc4 	addi	r2,r23,-1
   290b4:	102f883a 	mov	r23,r2
   290b8:	18a9c83a 	sub	r20,r3,r2
   290bc:	003d1106 	br	28504 <__alt_data_end+0xfffe8504>
   290c0:	d9402017 	ldw	r5,128(sp)
   290c4:	d9002117 	ldw	r4,132(sp)
   290c8:	d9801a04 	addi	r6,sp,104
   290cc:	d8c02a15 	stw	r3,168(sp)
   290d0:	d9c02b15 	stw	r7,172(sp)
   290d4:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   290d8:	d8c02a17 	ldw	r3,168(sp)
   290dc:	d9c02b17 	ldw	r7,172(sp)
   290e0:	103f3d1e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   290e4:	d9001b17 	ldw	r4,108(sp)
   290e8:	d8801c17 	ldw	r2,112(sp)
   290ec:	d811883a 	mov	r8,sp
   290f0:	21400044 	addi	r5,r4,1
   290f4:	003d4406 	br	28608 <__alt_data_end+0xfffe8608>
   290f8:	d9402017 	ldw	r5,128(sp)
   290fc:	d9002117 	ldw	r4,132(sp)
   29100:	d9801a04 	addi	r6,sp,104
   29104:	d8c02a15 	stw	r3,168(sp)
   29108:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   2910c:	d8c02a17 	ldw	r3,168(sp)
   29110:	103f311e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   29114:	d9001b17 	ldw	r4,108(sp)
   29118:	d8801c17 	ldw	r2,112(sp)
   2911c:	d811883a 	mov	r8,sp
   29120:	21400044 	addi	r5,r4,1
   29124:	003ef406 	br	28cf8 <__alt_data_end+0xfffe8cf8>
   29128:	1000bd1e 	bne	r2,zero,29420 <___vfiprintf_internal_r+0x1328>
   2912c:	01400044 	movi	r5,1
   29130:	0009883a 	mov	r4,zero
   29134:	d811883a 	mov	r8,sp
   29138:	003ef106 	br	28d00 <__alt_data_end+0xfffe8d00>
   2913c:	d9402017 	ldw	r5,128(sp)
   29140:	d9002117 	ldw	r4,132(sp)
   29144:	d9801a04 	addi	r6,sp,104
   29148:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   2914c:	103f221e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   29150:	d9401b17 	ldw	r5,108(sp)
   29154:	d8801c17 	ldw	r2,112(sp)
   29158:	d811883a 	mov	r8,sp
   2915c:	29400044 	addi	r5,r5,1
   29160:	003d6206 	br	286ec <__alt_data_end+0xfffe86ec>
   29164:	014000f4 	movhi	r5,3
   29168:	2949a404 	addi	r5,r5,9872
   2916c:	d9402615 	stw	r5,152(sp)
   29170:	d8c02215 	stw	r3,136(sp)
   29174:	1023883a 	mov	r17,r2
   29178:	9d04b03a 	or	r2,r19,r20
   2917c:	103fa51e 	bne	r2,zero,29014 <__alt_data_end+0xfffe9014>
   29180:	002b883a 	mov	r21,zero
   29184:	00800084 	movi	r2,2
   29188:	003e4a06 	br	28ab4 <__alt_data_end+0xfffe8ab4>
   2918c:	014000f4 	movhi	r5,3
   29190:	2949a404 	addi	r5,r5,9872
   29194:	002b883a 	mov	r21,zero
   29198:	d9402615 	stw	r5,152(sp)
   2919c:	003f9e06 	br	29018 <__alt_data_end+0xfffe9018>
   291a0:	d9402217 	ldw	r5,136(sp)
   291a4:	d8001d85 	stb	zero,118(sp)
   291a8:	0029883a 	mov	r20,zero
   291ac:	28800104 	addi	r2,r5,4
   291b0:	2cc00017 	ldw	r19,0(r5)
   291b4:	803e3a16 	blt	r16,zero,28aa0 <__alt_data_end+0xfffe8aa0>
   291b8:	00ffdfc4 	movi	r3,-129
   291bc:	d8802215 	stw	r2,136(sp)
   291c0:	88e2703a 	and	r17,r17,r3
   291c4:	002b883a 	mov	r21,zero
   291c8:	983e9b26 	beq	r19,zero,28c38 <__alt_data_end+0xfffe8c38>
   291cc:	00800244 	movi	r2,9
   291d0:	14fdc936 	bltu	r2,r19,288f8 <__alt_data_end+0xfffe88f8>
   291d4:	003e9a06 	br	28c40 <__alt_data_end+0xfffe8c40>
   291d8:	00800c04 	movi	r2,48
   291dc:	d8c01d45 	stb	r3,117(sp)
   291e0:	d8801d05 	stb	r2,116(sp)
   291e4:	d8001d85 	stb	zero,118(sp)
   291e8:	88c00094 	ori	r3,r17,2
   291ec:	80009c16 	blt	r16,zero,29460 <___vfiprintf_internal_r+0x1368>
   291f0:	00bfdfc4 	movi	r2,-129
   291f4:	88a2703a 	and	r17,r17,r2
   291f8:	8c400094 	ori	r17,r17,2
   291fc:	002b883a 	mov	r21,zero
   29200:	003f8506 	br	29018 <__alt_data_end+0xfffe9018>
   29204:	b029883a 	mov	r20,r22
   29208:	003c0b06 	br	28238 <__alt_data_end+0xfffe8238>
   2920c:	04e7c83a 	sub	r19,zero,r19
   29210:	05400b44 	movi	r21,45
   29214:	9804c03a 	cmpne	r2,r19,zero
   29218:	0529c83a 	sub	r20,zero,r20
   2921c:	dd401d85 	stb	r21,118(sp)
   29220:	a0a9c83a 	sub	r20,r20,r2
   29224:	80009716 	blt	r16,zero,29484 <___vfiprintf_internal_r+0x138c>
   29228:	00bfdfc4 	movi	r2,-129
   2922c:	88a2703a 	and	r17,r17,r2
   29230:	003db006 	br	288f4 <__alt_data_end+0xfffe88f4>
   29234:	b0c00007 	ldb	r3,0(r22)
   29238:	003c0c06 	br	2826c <__alt_data_end+0xfffe826c>
   2923c:	8880100c 	andi	r2,r17,64
   29240:	d8001d85 	stb	zero,118(sp)
   29244:	1000461e 	bne	r2,zero,29360 <___vfiprintf_internal_r+0x1268>
   29248:	d9002217 	ldw	r4,136(sp)
   2924c:	0029883a 	mov	r20,zero
   29250:	20800104 	addi	r2,r4,4
   29254:	24c00017 	ldw	r19,0(r4)
   29258:	803df80e 	bge	r16,zero,28a3c <__alt_data_end+0xfffe8a3c>
   2925c:	9d06b03a 	or	r3,r19,r20
   29260:	d8802215 	stw	r2,136(sp)
   29264:	183d5e1e 	bne	r3,zero,287e0 <__alt_data_end+0xfffe87e0>
   29268:	002b883a 	mov	r21,zero
   2926c:	0005883a 	mov	r2,zero
   29270:	003e1006 	br	28ab4 <__alt_data_end+0xfffe8ab4>
   29274:	8880040c 	andi	r2,r17,16
   29278:	1000321e 	bne	r2,zero,29344 <___vfiprintf_internal_r+0x124c>
   2927c:	8c40100c 	andi	r17,r17,64
   29280:	88008d26 	beq	r17,zero,294b8 <___vfiprintf_internal_r+0x13c0>
   29284:	d9402217 	ldw	r5,136(sp)
   29288:	d8c02417 	ldw	r3,144(sp)
   2928c:	28800017 	ldw	r2,0(r5)
   29290:	29400104 	addi	r5,r5,4
   29294:	d9402215 	stw	r5,136(sp)
   29298:	10c0000d 	sth	r3,0(r2)
   2929c:	003bca06 	br	281c8 <__alt_data_end+0xfffe81c8>
   292a0:	8880100c 	andi	r2,r17,64
   292a4:	10003a26 	beq	r2,zero,29390 <___vfiprintf_internal_r+0x1298>
   292a8:	d8802217 	ldw	r2,136(sp)
   292ac:	14c0000f 	ldh	r19,0(r2)
   292b0:	10800104 	addi	r2,r2,4
   292b4:	d8802215 	stw	r2,136(sp)
   292b8:	9829d7fa 	srai	r20,r19,31
   292bc:	a005883a 	mov	r2,r20
   292c0:	003d8506 	br	288d8 <__alt_data_end+0xfffe88d8>
   292c4:	8880100c 	andi	r2,r17,64
   292c8:	10002b26 	beq	r2,zero,29378 <___vfiprintf_internal_r+0x1280>
   292cc:	d8802217 	ldw	r2,136(sp)
   292d0:	0029883a 	mov	r20,zero
   292d4:	14c0000b 	ldhu	r19,0(r2)
   292d8:	10800104 	addi	r2,r2,4
   292dc:	d8802215 	stw	r2,136(sp)
   292e0:	003d5d06 	br	28858 <__alt_data_end+0xfffe8858>
   292e4:	d9402017 	ldw	r5,128(sp)
   292e8:	d9002117 	ldw	r4,132(sp)
   292ec:	d9801a04 	addi	r6,sp,104
   292f0:	d8c02a15 	stw	r3,168(sp)
   292f4:	d9c02b15 	stw	r7,172(sp)
   292f8:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   292fc:	d8c02a17 	ldw	r3,168(sp)
   29300:	d9c02b17 	ldw	r7,172(sp)
   29304:	103eb41e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   29308:	d9001b17 	ldw	r4,108(sp)
   2930c:	d8801c17 	ldw	r2,112(sp)
   29310:	d811883a 	mov	r8,sp
   29314:	21400044 	addi	r5,r4,1
   29318:	003e6706 	br	28cb8 <__alt_data_end+0xfffe8cb8>
   2931c:	00bfffc4 	movi	r2,-1
   29320:	003c4a06 	br	2844c <__alt_data_end+0xfffe844c>
   29324:	9805883a 	mov	r2,r19
   29328:	003ee806 	br	28ecc <__alt_data_end+0xfffe8ecc>
   2932c:	d8c02217 	ldw	r3,136(sp)
   29330:	0029883a 	mov	r20,zero
   29334:	18800104 	addi	r2,r3,4
   29338:	1cc0000b 	ldhu	r19,0(r3)
   2933c:	803f9e0e 	bge	r16,zero,291b8 <__alt_data_end+0xfffe91b8>
   29340:	003dd706 	br	28aa0 <__alt_data_end+0xfffe8aa0>
   29344:	d8c02217 	ldw	r3,136(sp)
   29348:	d9002417 	ldw	r4,144(sp)
   2934c:	18800017 	ldw	r2,0(r3)
   29350:	18c00104 	addi	r3,r3,4
   29354:	d8c02215 	stw	r3,136(sp)
   29358:	11000015 	stw	r4,0(r2)
   2935c:	003b9a06 	br	281c8 <__alt_data_end+0xfffe81c8>
   29360:	d8c02217 	ldw	r3,136(sp)
   29364:	0029883a 	mov	r20,zero
   29368:	18800104 	addi	r2,r3,4
   2936c:	1cc0000b 	ldhu	r19,0(r3)
   29370:	803db20e 	bge	r16,zero,28a3c <__alt_data_end+0xfffe8a3c>
   29374:	003fb906 	br	2925c <__alt_data_end+0xfffe925c>
   29378:	d9002217 	ldw	r4,136(sp)
   2937c:	0029883a 	mov	r20,zero
   29380:	24c00017 	ldw	r19,0(r4)
   29384:	21000104 	addi	r4,r4,4
   29388:	d9002215 	stw	r4,136(sp)
   2938c:	003d3206 	br	28858 <__alt_data_end+0xfffe8858>
   29390:	d8c02217 	ldw	r3,136(sp)
   29394:	1cc00017 	ldw	r19,0(r3)
   29398:	18c00104 	addi	r3,r3,4
   2939c:	d8c02215 	stw	r3,136(sp)
   293a0:	9829d7fa 	srai	r20,r19,31
   293a4:	a005883a 	mov	r2,r20
   293a8:	003d4b06 	br	288d8 <__alt_data_end+0xfffe88d8>
   293ac:	0009883a 	mov	r4,zero
   293b0:	01400044 	movi	r5,1
   293b4:	d811883a 	mov	r8,sp
   293b8:	003e4f06 	br	28cf8 <__alt_data_end+0xfffe8cf8>
   293bc:	d8c02215 	stw	r3,136(sp)
   293c0:	002b883a 	mov	r21,zero
   293c4:	003db806 	br	28aa8 <__alt_data_end+0xfffe8aa8>
   293c8:	d811883a 	mov	r8,sp
   293cc:	003e9606 	br	28e28 <__alt_data_end+0xfffe8e28>
   293d0:	010000f4 	movhi	r4,3
   293d4:	210a0504 	addi	r4,r4,10260
   293d8:	d9002315 	stw	r4,140(sp)
   293dc:	003e6306 	br	28d6c <__alt_data_end+0xfffe8d6c>
   293e0:	b0c00043 	ldbu	r3,1(r22)
   293e4:	8c400814 	ori	r17,r17,32
   293e8:	b5800044 	addi	r22,r22,1
   293ec:	18c03fcc 	andi	r3,r3,255
   293f0:	18c0201c 	xori	r3,r3,128
   293f4:	18ffe004 	addi	r3,r3,-128
   293f8:	003b9c06 	br	2826c <__alt_data_end+0xfffe826c>
   293fc:	b809883a 	mov	r4,r23
   29400:	da002a15 	stw	r8,168(sp)
   29404:	00207000 	call	20700 <strlen>
   29408:	1029883a 	mov	r20,r2
   2940c:	dd401d83 	ldbu	r21,118(sp)
   29410:	df002215 	stw	fp,136(sp)
   29414:	0021883a 	mov	r16,zero
   29418:	da002a17 	ldw	r8,168(sp)
   2941c:	003c3906 	br	28504 <__alt_data_end+0xfffe8504>
   29420:	d9402017 	ldw	r5,128(sp)
   29424:	d9002117 	ldw	r4,132(sp)
   29428:	d9801a04 	addi	r6,sp,104
   2942c:	0027fe40 	call	27fe4 <__sprint_r.part.0>
   29430:	103e691e 	bne	r2,zero,28dd8 <__alt_data_end+0xfffe8dd8>
   29434:	d9001b17 	ldw	r4,108(sp)
   29438:	d8801c17 	ldw	r2,112(sp)
   2943c:	d811883a 	mov	r8,sp
   29440:	21400044 	addi	r5,r4,1
   29444:	003e2e06 	br	28d00 <__alt_data_end+0xfffe8d00>
   29448:	010000f4 	movhi	r4,3
   2944c:	210a0904 	addi	r4,r4,10276
   29450:	d9002315 	stw	r4,140(sp)
   29454:	d9001b17 	ldw	r4,108(sp)
   29458:	21000044 	addi	r4,r4,1
   2945c:	003c5e06 	br	285d8 <__alt_data_end+0xfffe85d8>
   29460:	002b883a 	mov	r21,zero
   29464:	00800084 	movi	r2,2
   29468:	10803fcc 	andi	r2,r2,255
   2946c:	01000044 	movi	r4,1
   29470:	11002b26 	beq	r2,r4,29520 <___vfiprintf_internal_r+0x1428>
   29474:	01000084 	movi	r4,2
   29478:	11002b1e 	bne	r2,r4,29528 <___vfiprintf_internal_r+0x1430>
   2947c:	1823883a 	mov	r17,r3
   29480:	003ee506 	br	29018 <__alt_data_end+0xfffe9018>
   29484:	8807883a 	mov	r3,r17
   29488:	00800044 	movi	r2,1
   2948c:	003ff606 	br	29468 <__alt_data_end+0xfffe9468>
   29490:	00800184 	movi	r2,6
   29494:	1400012e 	bgeu	r2,r16,2949c <___vfiprintf_internal_r+0x13a4>
   29498:	1021883a 	mov	r16,r2
   2949c:	8029883a 	mov	r20,r16
   294a0:	8027883a 	mov	r19,r16
   294a4:	80002216 	blt	r16,zero,29530 <___vfiprintf_internal_r+0x1438>
   294a8:	05c000f4 	movhi	r23,3
   294ac:	df002215 	stw	fp,136(sp)
   294b0:	bdc9a904 	addi	r23,r23,9892
   294b4:	003cfb06 	br	288a4 <__alt_data_end+0xfffe88a4>
   294b8:	d9002217 	ldw	r4,136(sp)
   294bc:	d9402417 	ldw	r5,144(sp)
   294c0:	20800017 	ldw	r2,0(r4)
   294c4:	21000104 	addi	r4,r4,4
   294c8:	d9002215 	stw	r4,136(sp)
   294cc:	11400015 	stw	r5,0(r2)
   294d0:	003b3d06 	br	281c8 <__alt_data_end+0xfffe81c8>
   294d4:	014000f4 	movhi	r5,3
   294d8:	294a0904 	addi	r5,r5,10276
   294dc:	d9402315 	stw	r5,140(sp)
   294e0:	d9401b17 	ldw	r5,108(sp)
   294e4:	29400044 	addi	r5,r5,1
   294e8:	003e6d06 	br	28ea0 <__alt_data_end+0xfffe8ea0>
   294ec:	8029883a 	mov	r20,r16
   294f0:	dd401d83 	ldbu	r21,118(sp)
   294f4:	df002215 	stw	fp,136(sp)
   294f8:	0021883a 	mov	r16,zero
   294fc:	003c0106 	br	28504 <__alt_data_end+0xfffe8504>
   29500:	00c000f4 	movhi	r3,3
   29504:	18ca0504 	addi	r3,r3,10260
   29508:	d8c02315 	stw	r3,140(sp)
   2950c:	280d883a 	mov	r6,r5
   29510:	003c6906 	br	286b8 <__alt_data_end+0xfffe86b8>
   29514:	802d883a 	mov	r22,r16
   29518:	0021883a 	mov	r16,zero
   2951c:	003b5406 	br	28270 <__alt_data_end+0xfffe8270>
   29520:	1823883a 	mov	r17,r3
   29524:	003cf306 	br	288f4 <__alt_data_end+0xfffe88f4>
   29528:	1823883a 	mov	r17,r3
   2952c:	003cad06 	br	287e4 <__alt_data_end+0xfffe87e4>
   29530:	0027883a 	mov	r19,zero
   29534:	003fdc06 	br	294a8 <__alt_data_end+0xfffe94a8>
   29538:	d9402217 	ldw	r5,136(sp)
   2953c:	8005883a 	mov	r2,r16
   29540:	b0c00043 	ldbu	r3,1(r22)
   29544:	2c000017 	ldw	r16,0(r5)
   29548:	29000104 	addi	r4,r5,4
   2954c:	d9002215 	stw	r4,136(sp)
   29550:	102d883a 	mov	r22,r2
   29554:	803fa50e 	bge	r16,zero,293ec <__alt_data_end+0xfffe93ec>
   29558:	18c03fcc 	andi	r3,r3,255
   2955c:	18c0201c 	xori	r3,r3,128
   29560:	043fffc4 	movi	r16,-1
   29564:	18ffe004 	addi	r3,r3,-128
   29568:	003b4006 	br	2826c <__alt_data_end+0xfffe826c>
   2956c:	d9402303 	ldbu	r5,140(sp)
   29570:	d9401d85 	stb	r5,118(sp)
   29574:	003cae06 	br	28830 <__alt_data_end+0xfffe8830>
   29578:	d8c02303 	ldbu	r3,140(sp)
   2957c:	d8c01d85 	stb	r3,118(sp)
   29580:	003d1406 	br	289d4 <__alt_data_end+0xfffe89d4>
   29584:	d8c02303 	ldbu	r3,140(sp)
   29588:	d8c01d85 	stb	r3,118(sp)
   2958c:	003cca06 	br	288b8 <__alt_data_end+0xfffe88b8>
   29590:	8880004c 	andi	r2,r17,1
   29594:	002b883a 	mov	r21,zero
   29598:	10000526 	beq	r2,zero,295b0 <___vfiprintf_internal_r+0x14b8>
   2959c:	00800c04 	movi	r2,48
   295a0:	d88019c5 	stb	r2,103(sp)
   295a4:	dd002817 	ldw	r20,160(sp)
   295a8:	ddc019c4 	addi	r23,sp,103
   295ac:	003bd506 	br	28504 <__alt_data_end+0xfffe8504>
   295b0:	0029883a 	mov	r20,zero
   295b4:	ddc01a04 	addi	r23,sp,104
   295b8:	003bd206 	br	28504 <__alt_data_end+0xfffe8504>
   295bc:	d9002303 	ldbu	r4,140(sp)
   295c0:	d9001d85 	stb	r4,118(sp)
   295c4:	003da606 	br	28c60 <__alt_data_end+0xfffe8c60>
   295c8:	d8c02303 	ldbu	r3,140(sp)
   295cc:	d8c01d85 	stb	r3,118(sp)
   295d0:	003c7606 	br	287ac <__alt_data_end+0xfffe87ac>
   295d4:	d8c02303 	ldbu	r3,140(sp)
   295d8:	d8c01d85 	stb	r3,118(sp)
   295dc:	003c6506 	br	28774 <__alt_data_end+0xfffe8774>
   295e0:	d9002303 	ldbu	r4,140(sp)
   295e4:	d9001d85 	stb	r4,118(sp)
   295e8:	003d3d06 	br	28ae0 <__alt_data_end+0xfffe8ae0>
   295ec:	d8c02303 	ldbu	r3,140(sp)
   295f0:	d8c01d85 	stb	r3,118(sp)
   295f4:	003d1d06 	br	28a6c <__alt_data_end+0xfffe8a6c>
   295f8:	d8c02303 	ldbu	r3,140(sp)
   295fc:	d8c01d85 	stb	r3,118(sp)
   29600:	003d0306 	br	28a10 <__alt_data_end+0xfffe8a10>

00029604 <__vfiprintf_internal>:
   29604:	008000f4 	movhi	r2,3
   29608:	10914f04 	addi	r2,r2,17724
   2960c:	300f883a 	mov	r7,r6
   29610:	280d883a 	mov	r6,r5
   29614:	200b883a 	mov	r5,r4
   29618:	11000017 	ldw	r4,0(r2)
   2961c:	00280f81 	jmpi	280f8 <___vfiprintf_internal_r>

00029620 <__sbprintf>:
   29620:	2880030b 	ldhu	r2,12(r5)
   29624:	2ac01917 	ldw	r11,100(r5)
   29628:	2a80038b 	ldhu	r10,14(r5)
   2962c:	2a400717 	ldw	r9,28(r5)
   29630:	2a000917 	ldw	r8,36(r5)
   29634:	defee204 	addi	sp,sp,-1144
   29638:	00c10004 	movi	r3,1024
   2963c:	dc011a15 	stw	r16,1128(sp)
   29640:	10bfff4c 	andi	r2,r2,65533
   29644:	2821883a 	mov	r16,r5
   29648:	d8cb883a 	add	r5,sp,r3
   2964c:	dc811c15 	stw	r18,1136(sp)
   29650:	dc411b15 	stw	r17,1132(sp)
   29654:	dfc11d15 	stw	ra,1140(sp)
   29658:	2025883a 	mov	r18,r4
   2965c:	d881030d 	sth	r2,1036(sp)
   29660:	dac11915 	stw	r11,1124(sp)
   29664:	da81038d 	sth	r10,1038(sp)
   29668:	da410715 	stw	r9,1052(sp)
   2966c:	da010915 	stw	r8,1060(sp)
   29670:	dec10015 	stw	sp,1024(sp)
   29674:	dec10415 	stw	sp,1040(sp)
   29678:	d8c10215 	stw	r3,1032(sp)
   2967c:	d8c10515 	stw	r3,1044(sp)
   29680:	d8010615 	stw	zero,1048(sp)
   29684:	00280f80 	call	280f8 <___vfiprintf_internal_r>
   29688:	1023883a 	mov	r17,r2
   2968c:	10000416 	blt	r2,zero,296a0 <__sbprintf+0x80>
   29690:	d9410004 	addi	r5,sp,1024
   29694:	9009883a 	mov	r4,r18
   29698:	002476c0 	call	2476c <_fflush_r>
   2969c:	10000d1e 	bne	r2,zero,296d4 <__sbprintf+0xb4>
   296a0:	d881030b 	ldhu	r2,1036(sp)
   296a4:	1080100c 	andi	r2,r2,64
   296a8:	10000326 	beq	r2,zero,296b8 <__sbprintf+0x98>
   296ac:	8080030b 	ldhu	r2,12(r16)
   296b0:	10801014 	ori	r2,r2,64
   296b4:	8080030d 	sth	r2,12(r16)
   296b8:	8805883a 	mov	r2,r17
   296bc:	dfc11d17 	ldw	ra,1140(sp)
   296c0:	dc811c17 	ldw	r18,1136(sp)
   296c4:	dc411b17 	ldw	r17,1132(sp)
   296c8:	dc011a17 	ldw	r16,1128(sp)
   296cc:	dec11e04 	addi	sp,sp,1144
   296d0:	f800283a 	ret
   296d4:	047fffc4 	movi	r17,-1
   296d8:	003ff106 	br	296a0 <__alt_data_end+0xfffe96a0>

000296dc <__swbuf_r>:
   296dc:	defffb04 	addi	sp,sp,-20
   296e0:	dcc00315 	stw	r19,12(sp)
   296e4:	dc800215 	stw	r18,8(sp)
   296e8:	dc000015 	stw	r16,0(sp)
   296ec:	dfc00415 	stw	ra,16(sp)
   296f0:	dc400115 	stw	r17,4(sp)
   296f4:	2025883a 	mov	r18,r4
   296f8:	2827883a 	mov	r19,r5
   296fc:	3021883a 	mov	r16,r6
   29700:	20000226 	beq	r4,zero,2970c <__swbuf_r+0x30>
   29704:	20800e17 	ldw	r2,56(r4)
   29708:	10004226 	beq	r2,zero,29814 <__swbuf_r+0x138>
   2970c:	80800617 	ldw	r2,24(r16)
   29710:	8100030b 	ldhu	r4,12(r16)
   29714:	80800215 	stw	r2,8(r16)
   29718:	2080020c 	andi	r2,r4,8
   2971c:	10003626 	beq	r2,zero,297f8 <__swbuf_r+0x11c>
   29720:	80c00417 	ldw	r3,16(r16)
   29724:	18003426 	beq	r3,zero,297f8 <__swbuf_r+0x11c>
   29728:	2088000c 	andi	r2,r4,8192
   2972c:	9c403fcc 	andi	r17,r19,255
   29730:	10001a26 	beq	r2,zero,2979c <__swbuf_r+0xc0>
   29734:	80800017 	ldw	r2,0(r16)
   29738:	81000517 	ldw	r4,20(r16)
   2973c:	10c7c83a 	sub	r3,r2,r3
   29740:	1900200e 	bge	r3,r4,297c4 <__swbuf_r+0xe8>
   29744:	18c00044 	addi	r3,r3,1
   29748:	81000217 	ldw	r4,8(r16)
   2974c:	11400044 	addi	r5,r2,1
   29750:	81400015 	stw	r5,0(r16)
   29754:	213fffc4 	addi	r4,r4,-1
   29758:	81000215 	stw	r4,8(r16)
   2975c:	14c00005 	stb	r19,0(r2)
   29760:	80800517 	ldw	r2,20(r16)
   29764:	10c01e26 	beq	r2,r3,297e0 <__swbuf_r+0x104>
   29768:	8080030b 	ldhu	r2,12(r16)
   2976c:	1080004c 	andi	r2,r2,1
   29770:	10000226 	beq	r2,zero,2977c <__swbuf_r+0xa0>
   29774:	00800284 	movi	r2,10
   29778:	88801926 	beq	r17,r2,297e0 <__swbuf_r+0x104>
   2977c:	8805883a 	mov	r2,r17
   29780:	dfc00417 	ldw	ra,16(sp)
   29784:	dcc00317 	ldw	r19,12(sp)
   29788:	dc800217 	ldw	r18,8(sp)
   2978c:	dc400117 	ldw	r17,4(sp)
   29790:	dc000017 	ldw	r16,0(sp)
   29794:	dec00504 	addi	sp,sp,20
   29798:	f800283a 	ret
   2979c:	81401917 	ldw	r5,100(r16)
   297a0:	00b7ffc4 	movi	r2,-8193
   297a4:	21080014 	ori	r4,r4,8192
   297a8:	2884703a 	and	r2,r5,r2
   297ac:	80801915 	stw	r2,100(r16)
   297b0:	80800017 	ldw	r2,0(r16)
   297b4:	8100030d 	sth	r4,12(r16)
   297b8:	81000517 	ldw	r4,20(r16)
   297bc:	10c7c83a 	sub	r3,r2,r3
   297c0:	193fe016 	blt	r3,r4,29744 <__alt_data_end+0xfffe9744>
   297c4:	800b883a 	mov	r5,r16
   297c8:	9009883a 	mov	r4,r18
   297cc:	002476c0 	call	2476c <_fflush_r>
   297d0:	1000071e 	bne	r2,zero,297f0 <__swbuf_r+0x114>
   297d4:	80800017 	ldw	r2,0(r16)
   297d8:	00c00044 	movi	r3,1
   297dc:	003fda06 	br	29748 <__alt_data_end+0xfffe9748>
   297e0:	800b883a 	mov	r5,r16
   297e4:	9009883a 	mov	r4,r18
   297e8:	002476c0 	call	2476c <_fflush_r>
   297ec:	103fe326 	beq	r2,zero,2977c <__alt_data_end+0xfffe977c>
   297f0:	00bfffc4 	movi	r2,-1
   297f4:	003fe206 	br	29780 <__alt_data_end+0xfffe9780>
   297f8:	800b883a 	mov	r5,r16
   297fc:	9009883a 	mov	r4,r18
   29800:	0022b4c0 	call	22b4c <__swsetup_r>
   29804:	103ffa1e 	bne	r2,zero,297f0 <__alt_data_end+0xfffe97f0>
   29808:	8100030b 	ldhu	r4,12(r16)
   2980c:	80c00417 	ldw	r3,16(r16)
   29810:	003fc506 	br	29728 <__alt_data_end+0xfffe9728>
   29814:	0024b580 	call	24b58 <__sinit>
   29818:	003fbc06 	br	2970c <__alt_data_end+0xfffe970c>

0002981c <__swbuf>:
   2981c:	008000f4 	movhi	r2,3
   29820:	10914f04 	addi	r2,r2,17724
   29824:	280d883a 	mov	r6,r5
   29828:	200b883a 	mov	r5,r4
   2982c:	11000017 	ldw	r4,0(r2)
   29830:	00296dc1 	jmpi	296dc <__swbuf_r>

00029834 <_write_r>:
   29834:	defffd04 	addi	sp,sp,-12
   29838:	2805883a 	mov	r2,r5
   2983c:	dc000015 	stw	r16,0(sp)
   29840:	040000f4 	movhi	r16,3
   29844:	dc400115 	stw	r17,4(sp)
   29848:	300b883a 	mov	r5,r6
   2984c:	84186304 	addi	r16,r16,24972
   29850:	2023883a 	mov	r17,r4
   29854:	380d883a 	mov	r6,r7
   29858:	1009883a 	mov	r4,r2
   2985c:	dfc00215 	stw	ra,8(sp)
   29860:	80000015 	stw	zero,0(r16)
   29864:	002df2c0 	call	2df2c <write>
   29868:	00ffffc4 	movi	r3,-1
   2986c:	10c00526 	beq	r2,r3,29884 <_write_r+0x50>
   29870:	dfc00217 	ldw	ra,8(sp)
   29874:	dc400117 	ldw	r17,4(sp)
   29878:	dc000017 	ldw	r16,0(sp)
   2987c:	dec00304 	addi	sp,sp,12
   29880:	f800283a 	ret
   29884:	80c00017 	ldw	r3,0(r16)
   29888:	183ff926 	beq	r3,zero,29870 <__alt_data_end+0xfffe9870>
   2988c:	88c00015 	stw	r3,0(r17)
   29890:	003ff706 	br	29870 <__alt_data_end+0xfffe9870>

00029894 <_close_r>:
   29894:	defffd04 	addi	sp,sp,-12
   29898:	dc000015 	stw	r16,0(sp)
   2989c:	040000f4 	movhi	r16,3
   298a0:	dc400115 	stw	r17,4(sp)
   298a4:	84186304 	addi	r16,r16,24972
   298a8:	2023883a 	mov	r17,r4
   298ac:	2809883a 	mov	r4,r5
   298b0:	dfc00215 	stw	ra,8(sp)
   298b4:	80000015 	stw	zero,0(r16)
   298b8:	002d6a40 	call	2d6a4 <close>
   298bc:	00ffffc4 	movi	r3,-1
   298c0:	10c00526 	beq	r2,r3,298d8 <_close_r+0x44>
   298c4:	dfc00217 	ldw	ra,8(sp)
   298c8:	dc400117 	ldw	r17,4(sp)
   298cc:	dc000017 	ldw	r16,0(sp)
   298d0:	dec00304 	addi	sp,sp,12
   298d4:	f800283a 	ret
   298d8:	80c00017 	ldw	r3,0(r16)
   298dc:	183ff926 	beq	r3,zero,298c4 <__alt_data_end+0xfffe98c4>
   298e0:	88c00015 	stw	r3,0(r17)
   298e4:	003ff706 	br	298c4 <__alt_data_end+0xfffe98c4>

000298e8 <_calloc_r>:
   298e8:	defffe04 	addi	sp,sp,-8
   298ec:	2805883a 	mov	r2,r5
   298f0:	dc000015 	stw	r16,0(sp)
   298f4:	300b883a 	mov	r5,r6
   298f8:	2021883a 	mov	r16,r4
   298fc:	1009883a 	mov	r4,r2
   29900:	dfc00115 	stw	ra,4(sp)
   29904:	002ad9c0 	call	2ad9c <__mulsi3>
   29908:	100b883a 	mov	r5,r2
   2990c:	8009883a 	mov	r4,r16
   29910:	00258c40 	call	258c4 <_malloc_r>
   29914:	10002926 	beq	r2,zero,299bc <_calloc_r+0xd4>
   29918:	11bfff17 	ldw	r6,-4(r2)
   2991c:	1021883a 	mov	r16,r2
   29920:	00bfff04 	movi	r2,-4
   29924:	308c703a 	and	r6,r6,r2
   29928:	00c00904 	movi	r3,36
   2992c:	308d883a 	add	r6,r6,r2
   29930:	19801636 	bltu	r3,r6,2998c <_calloc_r+0xa4>
   29934:	008004c4 	movi	r2,19
   29938:	11800b2e 	bgeu	r2,r6,29968 <_calloc_r+0x80>
   2993c:	80000015 	stw	zero,0(r16)
   29940:	80000115 	stw	zero,4(r16)
   29944:	008006c4 	movi	r2,27
   29948:	11801a2e 	bgeu	r2,r6,299b4 <_calloc_r+0xcc>
   2994c:	80000215 	stw	zero,8(r16)
   29950:	80000315 	stw	zero,12(r16)
   29954:	30c0151e 	bne	r6,r3,299ac <_calloc_r+0xc4>
   29958:	80000415 	stw	zero,16(r16)
   2995c:	80800604 	addi	r2,r16,24
   29960:	80000515 	stw	zero,20(r16)
   29964:	00000106 	br	2996c <_calloc_r+0x84>
   29968:	8005883a 	mov	r2,r16
   2996c:	10000015 	stw	zero,0(r2)
   29970:	10000115 	stw	zero,4(r2)
   29974:	10000215 	stw	zero,8(r2)
   29978:	8005883a 	mov	r2,r16
   2997c:	dfc00117 	ldw	ra,4(sp)
   29980:	dc000017 	ldw	r16,0(sp)
   29984:	dec00204 	addi	sp,sp,8
   29988:	f800283a 	ret
   2998c:	000b883a 	mov	r5,zero
   29990:	8009883a 	mov	r4,r16
   29994:	00264580 	call	26458 <memset>
   29998:	8005883a 	mov	r2,r16
   2999c:	dfc00117 	ldw	ra,4(sp)
   299a0:	dc000017 	ldw	r16,0(sp)
   299a4:	dec00204 	addi	sp,sp,8
   299a8:	f800283a 	ret
   299ac:	80800404 	addi	r2,r16,16
   299b0:	003fee06 	br	2996c <__alt_data_end+0xfffe996c>
   299b4:	80800204 	addi	r2,r16,8
   299b8:	003fec06 	br	2996c <__alt_data_end+0xfffe996c>
   299bc:	0005883a 	mov	r2,zero
   299c0:	003fee06 	br	2997c <__alt_data_end+0xfffe997c>

000299c4 <_fclose_r>:
   299c4:	28003926 	beq	r5,zero,29aac <_fclose_r+0xe8>
   299c8:	defffc04 	addi	sp,sp,-16
   299cc:	dc400115 	stw	r17,4(sp)
   299d0:	dc000015 	stw	r16,0(sp)
   299d4:	dfc00315 	stw	ra,12(sp)
   299d8:	dc800215 	stw	r18,8(sp)
   299dc:	2023883a 	mov	r17,r4
   299e0:	2821883a 	mov	r16,r5
   299e4:	20000226 	beq	r4,zero,299f0 <_fclose_r+0x2c>
   299e8:	20800e17 	ldw	r2,56(r4)
   299ec:	10002726 	beq	r2,zero,29a8c <_fclose_r+0xc8>
   299f0:	8080030f 	ldh	r2,12(r16)
   299f4:	1000071e 	bne	r2,zero,29a14 <_fclose_r+0x50>
   299f8:	0005883a 	mov	r2,zero
   299fc:	dfc00317 	ldw	ra,12(sp)
   29a00:	dc800217 	ldw	r18,8(sp)
   29a04:	dc400117 	ldw	r17,4(sp)
   29a08:	dc000017 	ldw	r16,0(sp)
   29a0c:	dec00404 	addi	sp,sp,16
   29a10:	f800283a 	ret
   29a14:	800b883a 	mov	r5,r16
   29a18:	8809883a 	mov	r4,r17
   29a1c:	00245500 	call	24550 <__sflush_r>
   29a20:	1025883a 	mov	r18,r2
   29a24:	80800b17 	ldw	r2,44(r16)
   29a28:	10000426 	beq	r2,zero,29a3c <_fclose_r+0x78>
   29a2c:	81400717 	ldw	r5,28(r16)
   29a30:	8809883a 	mov	r4,r17
   29a34:	103ee83a 	callr	r2
   29a38:	10001616 	blt	r2,zero,29a94 <_fclose_r+0xd0>
   29a3c:	8080030b 	ldhu	r2,12(r16)
   29a40:	1080200c 	andi	r2,r2,128
   29a44:	1000151e 	bne	r2,zero,29a9c <_fclose_r+0xd8>
   29a48:	81400c17 	ldw	r5,48(r16)
   29a4c:	28000526 	beq	r5,zero,29a64 <_fclose_r+0xa0>
   29a50:	80801004 	addi	r2,r16,64
   29a54:	28800226 	beq	r5,r2,29a60 <_fclose_r+0x9c>
   29a58:	8809883a 	mov	r4,r17
   29a5c:	0024ccc0 	call	24ccc <_free_r>
   29a60:	80000c15 	stw	zero,48(r16)
   29a64:	81401117 	ldw	r5,68(r16)
   29a68:	28000326 	beq	r5,zero,29a78 <_fclose_r+0xb4>
   29a6c:	8809883a 	mov	r4,r17
   29a70:	0024ccc0 	call	24ccc <_free_r>
   29a74:	80001115 	stw	zero,68(r16)
   29a78:	0024b680 	call	24b68 <__sfp_lock_acquire>
   29a7c:	8000030d 	sth	zero,12(r16)
   29a80:	0024b6c0 	call	24b6c <__sfp_lock_release>
   29a84:	9005883a 	mov	r2,r18
   29a88:	003fdc06 	br	299fc <__alt_data_end+0xfffe99fc>
   29a8c:	0024b580 	call	24b58 <__sinit>
   29a90:	003fd706 	br	299f0 <__alt_data_end+0xfffe99f0>
   29a94:	04bfffc4 	movi	r18,-1
   29a98:	003fe806 	br	29a3c <__alt_data_end+0xfffe9a3c>
   29a9c:	81400417 	ldw	r5,16(r16)
   29aa0:	8809883a 	mov	r4,r17
   29aa4:	0024ccc0 	call	24ccc <_free_r>
   29aa8:	003fe706 	br	29a48 <__alt_data_end+0xfffe9a48>
   29aac:	0005883a 	mov	r2,zero
   29ab0:	f800283a 	ret

00029ab4 <fclose>:
   29ab4:	008000f4 	movhi	r2,3
   29ab8:	10914f04 	addi	r2,r2,17724
   29abc:	200b883a 	mov	r5,r4
   29ac0:	11000017 	ldw	r4,0(r2)
   29ac4:	00299c41 	jmpi	299c4 <_fclose_r>

00029ac8 <__fputwc>:
   29ac8:	defff804 	addi	sp,sp,-32
   29acc:	dcc00415 	stw	r19,16(sp)
   29ad0:	dc800315 	stw	r18,12(sp)
   29ad4:	dc000115 	stw	r16,4(sp)
   29ad8:	dfc00715 	stw	ra,28(sp)
   29adc:	dd400615 	stw	r21,24(sp)
   29ae0:	dd000515 	stw	r20,20(sp)
   29ae4:	dc400215 	stw	r17,8(sp)
   29ae8:	2027883a 	mov	r19,r4
   29aec:	2825883a 	mov	r18,r5
   29af0:	3021883a 	mov	r16,r6
   29af4:	00256b40 	call	256b4 <__locale_mb_cur_max>
   29af8:	00c00044 	movi	r3,1
   29afc:	10c03e26 	beq	r2,r3,29bf8 <__fputwc+0x130>
   29b00:	81c01704 	addi	r7,r16,92
   29b04:	900d883a 	mov	r6,r18
   29b08:	d80b883a 	mov	r5,sp
   29b0c:	9809883a 	mov	r4,r19
   29b10:	0029e400 	call	29e40 <_wcrtomb_r>
   29b14:	1029883a 	mov	r20,r2
   29b18:	00bfffc4 	movi	r2,-1
   29b1c:	a0802026 	beq	r20,r2,29ba0 <__fputwc+0xd8>
   29b20:	d9400003 	ldbu	r5,0(sp)
   29b24:	a0001c26 	beq	r20,zero,29b98 <__fputwc+0xd0>
   29b28:	0023883a 	mov	r17,zero
   29b2c:	05400284 	movi	r21,10
   29b30:	00000906 	br	29b58 <__fputwc+0x90>
   29b34:	80800017 	ldw	r2,0(r16)
   29b38:	11400005 	stb	r5,0(r2)
   29b3c:	80c00017 	ldw	r3,0(r16)
   29b40:	18c00044 	addi	r3,r3,1
   29b44:	80c00015 	stw	r3,0(r16)
   29b48:	8c400044 	addi	r17,r17,1
   29b4c:	dc45883a 	add	r2,sp,r17
   29b50:	8d00112e 	bgeu	r17,r20,29b98 <__fputwc+0xd0>
   29b54:	11400003 	ldbu	r5,0(r2)
   29b58:	80c00217 	ldw	r3,8(r16)
   29b5c:	18ffffc4 	addi	r3,r3,-1
   29b60:	80c00215 	stw	r3,8(r16)
   29b64:	183ff30e 	bge	r3,zero,29b34 <__alt_data_end+0xfffe9b34>
   29b68:	80800617 	ldw	r2,24(r16)
   29b6c:	18801916 	blt	r3,r2,29bd4 <__fputwc+0x10c>
   29b70:	80800017 	ldw	r2,0(r16)
   29b74:	11400005 	stb	r5,0(r2)
   29b78:	80800017 	ldw	r2,0(r16)
   29b7c:	10c00003 	ldbu	r3,0(r2)
   29b80:	10800044 	addi	r2,r2,1
   29b84:	1d402326 	beq	r3,r21,29c14 <__fputwc+0x14c>
   29b88:	80800015 	stw	r2,0(r16)
   29b8c:	8c400044 	addi	r17,r17,1
   29b90:	dc45883a 	add	r2,sp,r17
   29b94:	8d3fef36 	bltu	r17,r20,29b54 <__alt_data_end+0xfffe9b54>
   29b98:	9005883a 	mov	r2,r18
   29b9c:	00000406 	br	29bb0 <__fputwc+0xe8>
   29ba0:	80c0030b 	ldhu	r3,12(r16)
   29ba4:	a005883a 	mov	r2,r20
   29ba8:	18c01014 	ori	r3,r3,64
   29bac:	80c0030d 	sth	r3,12(r16)
   29bb0:	dfc00717 	ldw	ra,28(sp)
   29bb4:	dd400617 	ldw	r21,24(sp)
   29bb8:	dd000517 	ldw	r20,20(sp)
   29bbc:	dcc00417 	ldw	r19,16(sp)
   29bc0:	dc800317 	ldw	r18,12(sp)
   29bc4:	dc400217 	ldw	r17,8(sp)
   29bc8:	dc000117 	ldw	r16,4(sp)
   29bcc:	dec00804 	addi	sp,sp,32
   29bd0:	f800283a 	ret
   29bd4:	800d883a 	mov	r6,r16
   29bd8:	29403fcc 	andi	r5,r5,255
   29bdc:	9809883a 	mov	r4,r19
   29be0:	00296dc0 	call	296dc <__swbuf_r>
   29be4:	10bfffe0 	cmpeqi	r2,r2,-1
   29be8:	10803fcc 	andi	r2,r2,255
   29bec:	103fd626 	beq	r2,zero,29b48 <__alt_data_end+0xfffe9b48>
   29bf0:	00bfffc4 	movi	r2,-1
   29bf4:	003fee06 	br	29bb0 <__alt_data_end+0xfffe9bb0>
   29bf8:	90ffffc4 	addi	r3,r18,-1
   29bfc:	01003f84 	movi	r4,254
   29c00:	20ffbf36 	bltu	r4,r3,29b00 <__alt_data_end+0xfffe9b00>
   29c04:	900b883a 	mov	r5,r18
   29c08:	dc800005 	stb	r18,0(sp)
   29c0c:	1029883a 	mov	r20,r2
   29c10:	003fc506 	br	29b28 <__alt_data_end+0xfffe9b28>
   29c14:	800d883a 	mov	r6,r16
   29c18:	a80b883a 	mov	r5,r21
   29c1c:	9809883a 	mov	r4,r19
   29c20:	00296dc0 	call	296dc <__swbuf_r>
   29c24:	10bfffe0 	cmpeqi	r2,r2,-1
   29c28:	003fef06 	br	29be8 <__alt_data_end+0xfffe9be8>

00029c2c <_fputwc_r>:
   29c2c:	3080030b 	ldhu	r2,12(r6)
   29c30:	10c8000c 	andi	r3,r2,8192
   29c34:	1800051e 	bne	r3,zero,29c4c <_fputwc_r+0x20>
   29c38:	30c01917 	ldw	r3,100(r6)
   29c3c:	10880014 	ori	r2,r2,8192
   29c40:	3080030d 	sth	r2,12(r6)
   29c44:	18880014 	ori	r2,r3,8192
   29c48:	30801915 	stw	r2,100(r6)
   29c4c:	0029ac81 	jmpi	29ac8 <__fputwc>

00029c50 <fputwc>:
   29c50:	008000f4 	movhi	r2,3
   29c54:	defffc04 	addi	sp,sp,-16
   29c58:	10914f04 	addi	r2,r2,17724
   29c5c:	dc000115 	stw	r16,4(sp)
   29c60:	14000017 	ldw	r16,0(r2)
   29c64:	dc400215 	stw	r17,8(sp)
   29c68:	dfc00315 	stw	ra,12(sp)
   29c6c:	2023883a 	mov	r17,r4
   29c70:	80000226 	beq	r16,zero,29c7c <fputwc+0x2c>
   29c74:	80800e17 	ldw	r2,56(r16)
   29c78:	10001026 	beq	r2,zero,29cbc <fputwc+0x6c>
   29c7c:	2880030b 	ldhu	r2,12(r5)
   29c80:	10c8000c 	andi	r3,r2,8192
   29c84:	1800051e 	bne	r3,zero,29c9c <fputwc+0x4c>
   29c88:	28c01917 	ldw	r3,100(r5)
   29c8c:	10880014 	ori	r2,r2,8192
   29c90:	2880030d 	sth	r2,12(r5)
   29c94:	18880014 	ori	r2,r3,8192
   29c98:	28801915 	stw	r2,100(r5)
   29c9c:	280d883a 	mov	r6,r5
   29ca0:	8009883a 	mov	r4,r16
   29ca4:	880b883a 	mov	r5,r17
   29ca8:	dfc00317 	ldw	ra,12(sp)
   29cac:	dc400217 	ldw	r17,8(sp)
   29cb0:	dc000117 	ldw	r16,4(sp)
   29cb4:	dec00404 	addi	sp,sp,16
   29cb8:	0029ac81 	jmpi	29ac8 <__fputwc>
   29cbc:	8009883a 	mov	r4,r16
   29cc0:	d9400015 	stw	r5,0(sp)
   29cc4:	0024b580 	call	24b58 <__sinit>
   29cc8:	d9400017 	ldw	r5,0(sp)
   29ccc:	003feb06 	br	29c7c <__alt_data_end+0xfffe9c7c>

00029cd0 <_fstat_r>:
   29cd0:	defffd04 	addi	sp,sp,-12
   29cd4:	2805883a 	mov	r2,r5
   29cd8:	dc000015 	stw	r16,0(sp)
   29cdc:	040000f4 	movhi	r16,3
   29ce0:	dc400115 	stw	r17,4(sp)
   29ce4:	84186304 	addi	r16,r16,24972
   29ce8:	2023883a 	mov	r17,r4
   29cec:	300b883a 	mov	r5,r6
   29cf0:	1009883a 	mov	r4,r2
   29cf4:	dfc00215 	stw	ra,8(sp)
   29cf8:	80000015 	stw	zero,0(r16)
   29cfc:	002d7e40 	call	2d7e4 <fstat>
   29d00:	00ffffc4 	movi	r3,-1
   29d04:	10c00526 	beq	r2,r3,29d1c <_fstat_r+0x4c>
   29d08:	dfc00217 	ldw	ra,8(sp)
   29d0c:	dc400117 	ldw	r17,4(sp)
   29d10:	dc000017 	ldw	r16,0(sp)
   29d14:	dec00304 	addi	sp,sp,12
   29d18:	f800283a 	ret
   29d1c:	80c00017 	ldw	r3,0(r16)
   29d20:	183ff926 	beq	r3,zero,29d08 <__alt_data_end+0xfffe9d08>
   29d24:	88c00015 	stw	r3,0(r17)
   29d28:	003ff706 	br	29d08 <__alt_data_end+0xfffe9d08>

00029d2c <_isatty_r>:
   29d2c:	defffd04 	addi	sp,sp,-12
   29d30:	dc000015 	stw	r16,0(sp)
   29d34:	040000f4 	movhi	r16,3
   29d38:	dc400115 	stw	r17,4(sp)
   29d3c:	84186304 	addi	r16,r16,24972
   29d40:	2023883a 	mov	r17,r4
   29d44:	2809883a 	mov	r4,r5
   29d48:	dfc00215 	stw	ra,8(sp)
   29d4c:	80000015 	stw	zero,0(r16)
   29d50:	002d8d80 	call	2d8d8 <isatty>
   29d54:	00ffffc4 	movi	r3,-1
   29d58:	10c00526 	beq	r2,r3,29d70 <_isatty_r+0x44>
   29d5c:	dfc00217 	ldw	ra,8(sp)
   29d60:	dc400117 	ldw	r17,4(sp)
   29d64:	dc000017 	ldw	r16,0(sp)
   29d68:	dec00304 	addi	sp,sp,12
   29d6c:	f800283a 	ret
   29d70:	80c00017 	ldw	r3,0(r16)
   29d74:	183ff926 	beq	r3,zero,29d5c <__alt_data_end+0xfffe9d5c>
   29d78:	88c00015 	stw	r3,0(r17)
   29d7c:	003ff706 	br	29d5c <__alt_data_end+0xfffe9d5c>

00029d80 <_lseek_r>:
   29d80:	defffd04 	addi	sp,sp,-12
   29d84:	2805883a 	mov	r2,r5
   29d88:	dc000015 	stw	r16,0(sp)
   29d8c:	040000f4 	movhi	r16,3
   29d90:	dc400115 	stw	r17,4(sp)
   29d94:	300b883a 	mov	r5,r6
   29d98:	84186304 	addi	r16,r16,24972
   29d9c:	2023883a 	mov	r17,r4
   29da0:	380d883a 	mov	r6,r7
   29da4:	1009883a 	mov	r4,r2
   29da8:	dfc00215 	stw	ra,8(sp)
   29dac:	80000015 	stw	zero,0(r16)
   29db0:	002daac0 	call	2daac <lseek>
   29db4:	00ffffc4 	movi	r3,-1
   29db8:	10c00526 	beq	r2,r3,29dd0 <_lseek_r+0x50>
   29dbc:	dfc00217 	ldw	ra,8(sp)
   29dc0:	dc400117 	ldw	r17,4(sp)
   29dc4:	dc000017 	ldw	r16,0(sp)
   29dc8:	dec00304 	addi	sp,sp,12
   29dcc:	f800283a 	ret
   29dd0:	80c00017 	ldw	r3,0(r16)
   29dd4:	183ff926 	beq	r3,zero,29dbc <__alt_data_end+0xfffe9dbc>
   29dd8:	88c00015 	stw	r3,0(r17)
   29ddc:	003ff706 	br	29dbc <__alt_data_end+0xfffe9dbc>

00029de0 <_read_r>:
   29de0:	defffd04 	addi	sp,sp,-12
   29de4:	2805883a 	mov	r2,r5
   29de8:	dc000015 	stw	r16,0(sp)
   29dec:	040000f4 	movhi	r16,3
   29df0:	dc400115 	stw	r17,4(sp)
   29df4:	300b883a 	mov	r5,r6
   29df8:	84186304 	addi	r16,r16,24972
   29dfc:	2023883a 	mov	r17,r4
   29e00:	380d883a 	mov	r6,r7
   29e04:	1009883a 	mov	r4,r2
   29e08:	dfc00215 	stw	ra,8(sp)
   29e0c:	80000015 	stw	zero,0(r16)
   29e10:	002dc880 	call	2dc88 <read>
   29e14:	00ffffc4 	movi	r3,-1
   29e18:	10c00526 	beq	r2,r3,29e30 <_read_r+0x50>
   29e1c:	dfc00217 	ldw	ra,8(sp)
   29e20:	dc400117 	ldw	r17,4(sp)
   29e24:	dc000017 	ldw	r16,0(sp)
   29e28:	dec00304 	addi	sp,sp,12
   29e2c:	f800283a 	ret
   29e30:	80c00017 	ldw	r3,0(r16)
   29e34:	183ff926 	beq	r3,zero,29e1c <__alt_data_end+0xfffe9e1c>
   29e38:	88c00015 	stw	r3,0(r17)
   29e3c:	003ff706 	br	29e1c <__alt_data_end+0xfffe9e1c>

00029e40 <_wcrtomb_r>:
   29e40:	defff604 	addi	sp,sp,-40
   29e44:	008000f4 	movhi	r2,3
   29e48:	dc800815 	stw	r18,32(sp)
   29e4c:	dc400715 	stw	r17,28(sp)
   29e50:	dc000615 	stw	r16,24(sp)
   29e54:	10915304 	addi	r2,r2,17740
   29e58:	dfc00915 	stw	ra,36(sp)
   29e5c:	2021883a 	mov	r16,r4
   29e60:	3823883a 	mov	r17,r7
   29e64:	14800017 	ldw	r18,0(r2)
   29e68:	28001426 	beq	r5,zero,29ebc <_wcrtomb_r+0x7c>
   29e6c:	d9400415 	stw	r5,16(sp)
   29e70:	d9800515 	stw	r6,20(sp)
   29e74:	00256a80 	call	256a8 <__locale_charset>
   29e78:	d9800517 	ldw	r6,20(sp)
   29e7c:	d9400417 	ldw	r5,16(sp)
   29e80:	100f883a 	mov	r7,r2
   29e84:	dc400015 	stw	r17,0(sp)
   29e88:	8009883a 	mov	r4,r16
   29e8c:	903ee83a 	callr	r18
   29e90:	00ffffc4 	movi	r3,-1
   29e94:	10c0031e 	bne	r2,r3,29ea4 <_wcrtomb_r+0x64>
   29e98:	88000015 	stw	zero,0(r17)
   29e9c:	00c02284 	movi	r3,138
   29ea0:	80c00015 	stw	r3,0(r16)
   29ea4:	dfc00917 	ldw	ra,36(sp)
   29ea8:	dc800817 	ldw	r18,32(sp)
   29eac:	dc400717 	ldw	r17,28(sp)
   29eb0:	dc000617 	ldw	r16,24(sp)
   29eb4:	dec00a04 	addi	sp,sp,40
   29eb8:	f800283a 	ret
   29ebc:	00256a80 	call	256a8 <__locale_charset>
   29ec0:	100f883a 	mov	r7,r2
   29ec4:	dc400015 	stw	r17,0(sp)
   29ec8:	000d883a 	mov	r6,zero
   29ecc:	d9400104 	addi	r5,sp,4
   29ed0:	8009883a 	mov	r4,r16
   29ed4:	903ee83a 	callr	r18
   29ed8:	003fed06 	br	29e90 <__alt_data_end+0xfffe9e90>

00029edc <wcrtomb>:
   29edc:	defff604 	addi	sp,sp,-40
   29ee0:	008000f4 	movhi	r2,3
   29ee4:	dc800615 	stw	r18,24(sp)
   29ee8:	dc400515 	stw	r17,20(sp)
   29eec:	10914f04 	addi	r2,r2,17724
   29ef0:	dfc00915 	stw	ra,36(sp)
   29ef4:	dd000815 	stw	r20,32(sp)
   29ef8:	dcc00715 	stw	r19,28(sp)
   29efc:	dc000415 	stw	r16,16(sp)
   29f00:	3025883a 	mov	r18,r6
   29f04:	14400017 	ldw	r17,0(r2)
   29f08:	20001926 	beq	r4,zero,29f70 <wcrtomb+0x94>
   29f0c:	008000f4 	movhi	r2,3
   29f10:	10915304 	addi	r2,r2,17740
   29f14:	15000017 	ldw	r20,0(r2)
   29f18:	2021883a 	mov	r16,r4
   29f1c:	2827883a 	mov	r19,r5
   29f20:	00256a80 	call	256a8 <__locale_charset>
   29f24:	100f883a 	mov	r7,r2
   29f28:	dc800015 	stw	r18,0(sp)
   29f2c:	980d883a 	mov	r6,r19
   29f30:	800b883a 	mov	r5,r16
   29f34:	8809883a 	mov	r4,r17
   29f38:	a03ee83a 	callr	r20
   29f3c:	00ffffc4 	movi	r3,-1
   29f40:	10c0031e 	bne	r2,r3,29f50 <wcrtomb+0x74>
   29f44:	90000015 	stw	zero,0(r18)
   29f48:	00c02284 	movi	r3,138
   29f4c:	88c00015 	stw	r3,0(r17)
   29f50:	dfc00917 	ldw	ra,36(sp)
   29f54:	dd000817 	ldw	r20,32(sp)
   29f58:	dcc00717 	ldw	r19,28(sp)
   29f5c:	dc800617 	ldw	r18,24(sp)
   29f60:	dc400517 	ldw	r17,20(sp)
   29f64:	dc000417 	ldw	r16,16(sp)
   29f68:	dec00a04 	addi	sp,sp,40
   29f6c:	f800283a 	ret
   29f70:	008000f4 	movhi	r2,3
   29f74:	10915304 	addi	r2,r2,17740
   29f78:	14000017 	ldw	r16,0(r2)
   29f7c:	00256a80 	call	256a8 <__locale_charset>
   29f80:	100f883a 	mov	r7,r2
   29f84:	dc800015 	stw	r18,0(sp)
   29f88:	000d883a 	mov	r6,zero
   29f8c:	d9400104 	addi	r5,sp,4
   29f90:	8809883a 	mov	r4,r17
   29f94:	803ee83a 	callr	r16
   29f98:	003fe806 	br	29f3c <__alt_data_end+0xfffe9f3c>

00029f9c <__ascii_wctomb>:
   29f9c:	28000526 	beq	r5,zero,29fb4 <__ascii_wctomb+0x18>
   29fa0:	00803fc4 	movi	r2,255
   29fa4:	11800536 	bltu	r2,r6,29fbc <__ascii_wctomb+0x20>
   29fa8:	29800005 	stb	r6,0(r5)
   29fac:	00800044 	movi	r2,1
   29fb0:	f800283a 	ret
   29fb4:	0005883a 	mov	r2,zero
   29fb8:	f800283a 	ret
   29fbc:	00802284 	movi	r2,138
   29fc0:	20800015 	stw	r2,0(r4)
   29fc4:	00bfffc4 	movi	r2,-1
   29fc8:	f800283a 	ret

00029fcc <_wctomb_r>:
   29fcc:	008000f4 	movhi	r2,3
   29fd0:	defff904 	addi	sp,sp,-28
   29fd4:	10915304 	addi	r2,r2,17740
   29fd8:	dfc00615 	stw	ra,24(sp)
   29fdc:	dc400515 	stw	r17,20(sp)
   29fe0:	dc000415 	stw	r16,16(sp)
   29fe4:	3823883a 	mov	r17,r7
   29fe8:	14000017 	ldw	r16,0(r2)
   29fec:	d9000115 	stw	r4,4(sp)
   29ff0:	d9400215 	stw	r5,8(sp)
   29ff4:	d9800315 	stw	r6,12(sp)
   29ff8:	00256a80 	call	256a8 <__locale_charset>
   29ffc:	d9800317 	ldw	r6,12(sp)
   2a000:	d9400217 	ldw	r5,8(sp)
   2a004:	d9000117 	ldw	r4,4(sp)
   2a008:	100f883a 	mov	r7,r2
   2a00c:	dc400015 	stw	r17,0(sp)
   2a010:	803ee83a 	callr	r16
   2a014:	dfc00617 	ldw	ra,24(sp)
   2a018:	dc400517 	ldw	r17,20(sp)
   2a01c:	dc000417 	ldw	r16,16(sp)
   2a020:	dec00704 	addi	sp,sp,28
   2a024:	f800283a 	ret

0002a028 <__udivdi3>:
   2a028:	defff404 	addi	sp,sp,-48
   2a02c:	dcc00515 	stw	r19,20(sp)
   2a030:	dc000215 	stw	r16,8(sp)
   2a034:	dfc00b15 	stw	ra,44(sp)
   2a038:	df000a15 	stw	fp,40(sp)
   2a03c:	ddc00915 	stw	r23,36(sp)
   2a040:	dd800815 	stw	r22,32(sp)
   2a044:	dd400715 	stw	r21,28(sp)
   2a048:	dd000615 	stw	r20,24(sp)
   2a04c:	dc800415 	stw	r18,16(sp)
   2a050:	dc400315 	stw	r17,12(sp)
   2a054:	2027883a 	mov	r19,r4
   2a058:	2821883a 	mov	r16,r5
   2a05c:	3800461e 	bne	r7,zero,2a178 <__udivdi3+0x150>
   2a060:	3023883a 	mov	r17,r6
   2a064:	2025883a 	mov	r18,r4
   2a068:	2980572e 	bgeu	r5,r6,2a1c8 <__udivdi3+0x1a0>
   2a06c:	00bfffd4 	movui	r2,65535
   2a070:	282d883a 	mov	r22,r5
   2a074:	1180b236 	bltu	r2,r6,2a340 <__udivdi3+0x318>
   2a078:	00803fc4 	movi	r2,255
   2a07c:	1185803a 	cmpltu	r2,r2,r6
   2a080:	100490fa 	slli	r2,r2,3
   2a084:	3086d83a 	srl	r3,r6,r2
   2a088:	010000f4 	movhi	r4,3
   2a08c:	210a0d04 	addi	r4,r4,10292
   2a090:	20c7883a 	add	r3,r4,r3
   2a094:	18c00003 	ldbu	r3,0(r3)
   2a098:	1885883a 	add	r2,r3,r2
   2a09c:	00c00804 	movi	r3,32
   2a0a0:	1887c83a 	sub	r3,r3,r2
   2a0a4:	18000526 	beq	r3,zero,2a0bc <__udivdi3+0x94>
   2a0a8:	80e0983a 	sll	r16,r16,r3
   2a0ac:	9884d83a 	srl	r2,r19,r2
   2a0b0:	30e2983a 	sll	r17,r6,r3
   2a0b4:	98e4983a 	sll	r18,r19,r3
   2a0b8:	142cb03a 	or	r22,r2,r16
   2a0bc:	882ad43a 	srli	r21,r17,16
   2a0c0:	b009883a 	mov	r4,r22
   2a0c4:	8d3fffcc 	andi	r20,r17,65535
   2a0c8:	a80b883a 	mov	r5,r21
   2a0cc:	002ad440 	call	2ad44 <__umodsi3>
   2a0d0:	b009883a 	mov	r4,r22
   2a0d4:	a80b883a 	mov	r5,r21
   2a0d8:	1027883a 	mov	r19,r2
   2a0dc:	002ace00 	call	2ace0 <__udivsi3>
   2a0e0:	100b883a 	mov	r5,r2
   2a0e4:	a009883a 	mov	r4,r20
   2a0e8:	102d883a 	mov	r22,r2
   2a0ec:	002ad9c0 	call	2ad9c <__mulsi3>
   2a0f0:	9826943a 	slli	r19,r19,16
   2a0f4:	9006d43a 	srli	r3,r18,16
   2a0f8:	1cc6b03a 	or	r3,r3,r19
   2a0fc:	1880052e 	bgeu	r3,r2,2a114 <__udivdi3+0xec>
   2a100:	1c47883a 	add	r3,r3,r17
   2a104:	b13fffc4 	addi	r4,r22,-1
   2a108:	1c400136 	bltu	r3,r17,2a110 <__udivdi3+0xe8>
   2a10c:	18814236 	bltu	r3,r2,2a618 <__udivdi3+0x5f0>
   2a110:	202d883a 	mov	r22,r4
   2a114:	18a1c83a 	sub	r16,r3,r2
   2a118:	8009883a 	mov	r4,r16
   2a11c:	a80b883a 	mov	r5,r21
   2a120:	002ad440 	call	2ad44 <__umodsi3>
   2a124:	1027883a 	mov	r19,r2
   2a128:	8009883a 	mov	r4,r16
   2a12c:	a80b883a 	mov	r5,r21
   2a130:	9826943a 	slli	r19,r19,16
   2a134:	002ace00 	call	2ace0 <__udivsi3>
   2a138:	100b883a 	mov	r5,r2
   2a13c:	a009883a 	mov	r4,r20
   2a140:	94bfffcc 	andi	r18,r18,65535
   2a144:	1021883a 	mov	r16,r2
   2a148:	94e4b03a 	or	r18,r18,r19
   2a14c:	002ad9c0 	call	2ad9c <__mulsi3>
   2a150:	9080052e 	bgeu	r18,r2,2a168 <__udivdi3+0x140>
   2a154:	8ca5883a 	add	r18,r17,r18
   2a158:	80ffffc4 	addi	r3,r16,-1
   2a15c:	94410c36 	bltu	r18,r17,2a590 <__udivdi3+0x568>
   2a160:	90810b2e 	bgeu	r18,r2,2a590 <__udivdi3+0x568>
   2a164:	843fff84 	addi	r16,r16,-2
   2a168:	b004943a 	slli	r2,r22,16
   2a16c:	0007883a 	mov	r3,zero
   2a170:	1404b03a 	or	r2,r2,r16
   2a174:	00005e06 	br	2a2f0 <__udivdi3+0x2c8>
   2a178:	29c05b36 	bltu	r5,r7,2a2e8 <__udivdi3+0x2c0>
   2a17c:	00bfffd4 	movui	r2,65535
   2a180:	11c0672e 	bgeu	r2,r7,2a320 <__udivdi3+0x2f8>
   2a184:	00804034 	movhi	r2,256
   2a188:	10bfffc4 	addi	r2,r2,-1
   2a18c:	11c10a36 	bltu	r2,r7,2a5b8 <__udivdi3+0x590>
   2a190:	00800404 	movi	r2,16
   2a194:	3886d83a 	srl	r3,r7,r2
   2a198:	010000f4 	movhi	r4,3
   2a19c:	210a0d04 	addi	r4,r4,10292
   2a1a0:	20c7883a 	add	r3,r4,r3
   2a1a4:	18c00003 	ldbu	r3,0(r3)
   2a1a8:	05c00804 	movi	r23,32
   2a1ac:	1885883a 	add	r2,r3,r2
   2a1b0:	b8afc83a 	sub	r23,r23,r2
   2a1b4:	b800671e 	bne	r23,zero,2a354 <__udivdi3+0x32c>
   2a1b8:	3c010536 	bltu	r7,r16,2a5d0 <__udivdi3+0x5a8>
   2a1bc:	9985403a 	cmpgeu	r2,r19,r6
   2a1c0:	0007883a 	mov	r3,zero
   2a1c4:	00004a06 	br	2a2f0 <__udivdi3+0x2c8>
   2a1c8:	3000041e 	bne	r6,zero,2a1dc <__udivdi3+0x1b4>
   2a1cc:	000b883a 	mov	r5,zero
   2a1d0:	01000044 	movi	r4,1
   2a1d4:	002ace00 	call	2ace0 <__udivsi3>
   2a1d8:	1023883a 	mov	r17,r2
   2a1dc:	00bfffd4 	movui	r2,65535
   2a1e0:	1440532e 	bgeu	r2,r17,2a330 <__udivdi3+0x308>
   2a1e4:	00804034 	movhi	r2,256
   2a1e8:	10bfffc4 	addi	r2,r2,-1
   2a1ec:	1440f436 	bltu	r2,r17,2a5c0 <__udivdi3+0x598>
   2a1f0:	00800404 	movi	r2,16
   2a1f4:	8886d83a 	srl	r3,r17,r2
   2a1f8:	010000f4 	movhi	r4,3
   2a1fc:	210a0d04 	addi	r4,r4,10292
   2a200:	20c7883a 	add	r3,r4,r3
   2a204:	18c00003 	ldbu	r3,0(r3)
   2a208:	1885883a 	add	r2,r3,r2
   2a20c:	00c00804 	movi	r3,32
   2a210:	1887c83a 	sub	r3,r3,r2
   2a214:	1800a51e 	bne	r3,zero,2a4ac <__udivdi3+0x484>
   2a218:	882ad43a 	srli	r21,r17,16
   2a21c:	8461c83a 	sub	r16,r16,r17
   2a220:	8d3fffcc 	andi	r20,r17,65535
   2a224:	00c00044 	movi	r3,1
   2a228:	a80b883a 	mov	r5,r21
   2a22c:	8009883a 	mov	r4,r16
   2a230:	d8c00115 	stw	r3,4(sp)
   2a234:	002ad440 	call	2ad44 <__umodsi3>
   2a238:	a80b883a 	mov	r5,r21
   2a23c:	8009883a 	mov	r4,r16
   2a240:	1027883a 	mov	r19,r2
   2a244:	002ace00 	call	2ace0 <__udivsi3>
   2a248:	a00b883a 	mov	r5,r20
   2a24c:	1009883a 	mov	r4,r2
   2a250:	102d883a 	mov	r22,r2
   2a254:	002ad9c0 	call	2ad9c <__mulsi3>
   2a258:	9826943a 	slli	r19,r19,16
   2a25c:	900ed43a 	srli	r7,r18,16
   2a260:	d8c00117 	ldw	r3,4(sp)
   2a264:	3cceb03a 	or	r7,r7,r19
   2a268:	3880052e 	bgeu	r7,r2,2a280 <__udivdi3+0x258>
   2a26c:	3c4f883a 	add	r7,r7,r17
   2a270:	b13fffc4 	addi	r4,r22,-1
   2a274:	3c400136 	bltu	r7,r17,2a27c <__udivdi3+0x254>
   2a278:	3880e436 	bltu	r7,r2,2a60c <__udivdi3+0x5e4>
   2a27c:	202d883a 	mov	r22,r4
   2a280:	38a1c83a 	sub	r16,r7,r2
   2a284:	8009883a 	mov	r4,r16
   2a288:	a80b883a 	mov	r5,r21
   2a28c:	d8c00115 	stw	r3,4(sp)
   2a290:	002ad440 	call	2ad44 <__umodsi3>
   2a294:	1027883a 	mov	r19,r2
   2a298:	8009883a 	mov	r4,r16
   2a29c:	a80b883a 	mov	r5,r21
   2a2a0:	9826943a 	slli	r19,r19,16
   2a2a4:	002ace00 	call	2ace0 <__udivsi3>
   2a2a8:	a00b883a 	mov	r5,r20
   2a2ac:	1009883a 	mov	r4,r2
   2a2b0:	94bfffcc 	andi	r18,r18,65535
   2a2b4:	1021883a 	mov	r16,r2
   2a2b8:	94e4b03a 	or	r18,r18,r19
   2a2bc:	002ad9c0 	call	2ad9c <__mulsi3>
   2a2c0:	d8c00117 	ldw	r3,4(sp)
   2a2c4:	9080052e 	bgeu	r18,r2,2a2dc <__udivdi3+0x2b4>
   2a2c8:	8ca5883a 	add	r18,r17,r18
   2a2cc:	813fffc4 	addi	r4,r16,-1
   2a2d0:	9440ad36 	bltu	r18,r17,2a588 <__udivdi3+0x560>
   2a2d4:	9080ac2e 	bgeu	r18,r2,2a588 <__udivdi3+0x560>
   2a2d8:	843fff84 	addi	r16,r16,-2
   2a2dc:	b004943a 	slli	r2,r22,16
   2a2e0:	1404b03a 	or	r2,r2,r16
   2a2e4:	00000206 	br	2a2f0 <__udivdi3+0x2c8>
   2a2e8:	0007883a 	mov	r3,zero
   2a2ec:	0005883a 	mov	r2,zero
   2a2f0:	dfc00b17 	ldw	ra,44(sp)
   2a2f4:	df000a17 	ldw	fp,40(sp)
   2a2f8:	ddc00917 	ldw	r23,36(sp)
   2a2fc:	dd800817 	ldw	r22,32(sp)
   2a300:	dd400717 	ldw	r21,28(sp)
   2a304:	dd000617 	ldw	r20,24(sp)
   2a308:	dcc00517 	ldw	r19,20(sp)
   2a30c:	dc800417 	ldw	r18,16(sp)
   2a310:	dc400317 	ldw	r17,12(sp)
   2a314:	dc000217 	ldw	r16,8(sp)
   2a318:	dec00c04 	addi	sp,sp,48
   2a31c:	f800283a 	ret
   2a320:	00803fc4 	movi	r2,255
   2a324:	11c5803a 	cmpltu	r2,r2,r7
   2a328:	100490fa 	slli	r2,r2,3
   2a32c:	003f9906 	br	2a194 <__alt_data_end+0xfffea194>
   2a330:	00803fc4 	movi	r2,255
   2a334:	1445803a 	cmpltu	r2,r2,r17
   2a338:	100490fa 	slli	r2,r2,3
   2a33c:	003fad06 	br	2a1f4 <__alt_data_end+0xfffea1f4>
   2a340:	00804034 	movhi	r2,256
   2a344:	10bfffc4 	addi	r2,r2,-1
   2a348:	11809f36 	bltu	r2,r6,2a5c8 <__udivdi3+0x5a0>
   2a34c:	00800404 	movi	r2,16
   2a350:	003f4c06 	br	2a084 <__alt_data_end+0xfffea084>
   2a354:	3dce983a 	sll	r7,r7,r23
   2a358:	30b8d83a 	srl	fp,r6,r2
   2a35c:	80a2d83a 	srl	r17,r16,r2
   2a360:	35cc983a 	sll	r6,r6,r23
   2a364:	3f38b03a 	or	fp,r7,fp
   2a368:	e024d43a 	srli	r18,fp,16
   2a36c:	9884d83a 	srl	r2,r19,r2
   2a370:	85e0983a 	sll	r16,r16,r23
   2a374:	8809883a 	mov	r4,r17
   2a378:	900b883a 	mov	r5,r18
   2a37c:	d9800015 	stw	r6,0(sp)
   2a380:	1420b03a 	or	r16,r2,r16
   2a384:	002ad440 	call	2ad44 <__umodsi3>
   2a388:	900b883a 	mov	r5,r18
   2a38c:	8809883a 	mov	r4,r17
   2a390:	1029883a 	mov	r20,r2
   2a394:	e5bfffcc 	andi	r22,fp,65535
   2a398:	002ace00 	call	2ace0 <__udivsi3>
   2a39c:	100b883a 	mov	r5,r2
   2a3a0:	b009883a 	mov	r4,r22
   2a3a4:	102b883a 	mov	r21,r2
   2a3a8:	002ad9c0 	call	2ad9c <__mulsi3>
   2a3ac:	a028943a 	slli	r20,r20,16
   2a3b0:	8006d43a 	srli	r3,r16,16
   2a3b4:	1d06b03a 	or	r3,r3,r20
   2a3b8:	1880042e 	bgeu	r3,r2,2a3cc <__udivdi3+0x3a4>
   2a3bc:	1f07883a 	add	r3,r3,fp
   2a3c0:	a93fffc4 	addi	r4,r21,-1
   2a3c4:	1f00892e 	bgeu	r3,fp,2a5ec <__udivdi3+0x5c4>
   2a3c8:	202b883a 	mov	r21,r4
   2a3cc:	18a3c83a 	sub	r17,r3,r2
   2a3d0:	8809883a 	mov	r4,r17
   2a3d4:	900b883a 	mov	r5,r18
   2a3d8:	002ad440 	call	2ad44 <__umodsi3>
   2a3dc:	1029883a 	mov	r20,r2
   2a3e0:	8809883a 	mov	r4,r17
   2a3e4:	900b883a 	mov	r5,r18
   2a3e8:	a028943a 	slli	r20,r20,16
   2a3ec:	002ace00 	call	2ace0 <__udivsi3>
   2a3f0:	100b883a 	mov	r5,r2
   2a3f4:	b009883a 	mov	r4,r22
   2a3f8:	843fffcc 	andi	r16,r16,65535
   2a3fc:	1023883a 	mov	r17,r2
   2a400:	8520b03a 	or	r16,r16,r20
   2a404:	002ad9c0 	call	2ad9c <__mulsi3>
   2a408:	8080042e 	bgeu	r16,r2,2a41c <__udivdi3+0x3f4>
   2a40c:	8721883a 	add	r16,r16,fp
   2a410:	88ffffc4 	addi	r3,r17,-1
   2a414:	8700712e 	bgeu	r16,fp,2a5dc <__udivdi3+0x5b4>
   2a418:	1823883a 	mov	r17,r3
   2a41c:	a80e943a 	slli	r7,r21,16
   2a420:	d8c00017 	ldw	r3,0(sp)
   2a424:	80a1c83a 	sub	r16,r16,r2
   2a428:	3c64b03a 	or	r18,r7,r17
   2a42c:	1d3fffcc 	andi	r20,r3,65535
   2a430:	9022d43a 	srli	r17,r18,16
   2a434:	95bfffcc 	andi	r22,r18,65535
   2a438:	a00b883a 	mov	r5,r20
   2a43c:	b009883a 	mov	r4,r22
   2a440:	182ad43a 	srli	r21,r3,16
   2a444:	002ad9c0 	call	2ad9c <__mulsi3>
   2a448:	a00b883a 	mov	r5,r20
   2a44c:	8809883a 	mov	r4,r17
   2a450:	1039883a 	mov	fp,r2
   2a454:	002ad9c0 	call	2ad9c <__mulsi3>
   2a458:	8809883a 	mov	r4,r17
   2a45c:	a80b883a 	mov	r5,r21
   2a460:	1029883a 	mov	r20,r2
   2a464:	002ad9c0 	call	2ad9c <__mulsi3>
   2a468:	a80b883a 	mov	r5,r21
   2a46c:	b009883a 	mov	r4,r22
   2a470:	1023883a 	mov	r17,r2
   2a474:	002ad9c0 	call	2ad9c <__mulsi3>
   2a478:	e006d43a 	srli	r3,fp,16
   2a47c:	1505883a 	add	r2,r2,r20
   2a480:	1887883a 	add	r3,r3,r2
   2a484:	1d00022e 	bgeu	r3,r20,2a490 <__udivdi3+0x468>
   2a488:	00800074 	movhi	r2,1
   2a48c:	88a3883a 	add	r17,r17,r2
   2a490:	1804d43a 	srli	r2,r3,16
   2a494:	1463883a 	add	r17,r2,r17
   2a498:	84404436 	bltu	r16,r17,2a5ac <__udivdi3+0x584>
   2a49c:	84403e26 	beq	r16,r17,2a598 <__udivdi3+0x570>
   2a4a0:	9005883a 	mov	r2,r18
   2a4a4:	0007883a 	mov	r3,zero
   2a4a8:	003f9106 	br	2a2f0 <__alt_data_end+0xfffea2f0>
   2a4ac:	88e2983a 	sll	r17,r17,r3
   2a4b0:	80aed83a 	srl	r23,r16,r2
   2a4b4:	80e0983a 	sll	r16,r16,r3
   2a4b8:	882ad43a 	srli	r21,r17,16
   2a4bc:	9884d83a 	srl	r2,r19,r2
   2a4c0:	b809883a 	mov	r4,r23
   2a4c4:	a80b883a 	mov	r5,r21
   2a4c8:	98e4983a 	sll	r18,r19,r3
   2a4cc:	142cb03a 	or	r22,r2,r16
   2a4d0:	002ad440 	call	2ad44 <__umodsi3>
   2a4d4:	b809883a 	mov	r4,r23
   2a4d8:	a80b883a 	mov	r5,r21
   2a4dc:	1027883a 	mov	r19,r2
   2a4e0:	8d3fffcc 	andi	r20,r17,65535
   2a4e4:	002ace00 	call	2ace0 <__udivsi3>
   2a4e8:	a009883a 	mov	r4,r20
   2a4ec:	100b883a 	mov	r5,r2
   2a4f0:	102f883a 	mov	r23,r2
   2a4f4:	002ad9c0 	call	2ad9c <__mulsi3>
   2a4f8:	9826943a 	slli	r19,r19,16
   2a4fc:	b008d43a 	srli	r4,r22,16
   2a500:	24c8b03a 	or	r4,r4,r19
   2a504:	2080062e 	bgeu	r4,r2,2a520 <__udivdi3+0x4f8>
   2a508:	2449883a 	add	r4,r4,r17
   2a50c:	b8ffffc4 	addi	r3,r23,-1
   2a510:	24403c36 	bltu	r4,r17,2a604 <__udivdi3+0x5dc>
   2a514:	20803b2e 	bgeu	r4,r2,2a604 <__udivdi3+0x5dc>
   2a518:	bdffff84 	addi	r23,r23,-2
   2a51c:	2449883a 	add	r4,r4,r17
   2a520:	20a1c83a 	sub	r16,r4,r2
   2a524:	a80b883a 	mov	r5,r21
   2a528:	8009883a 	mov	r4,r16
   2a52c:	002ad440 	call	2ad44 <__umodsi3>
   2a530:	a80b883a 	mov	r5,r21
   2a534:	8009883a 	mov	r4,r16
   2a538:	1027883a 	mov	r19,r2
   2a53c:	002ace00 	call	2ace0 <__udivsi3>
   2a540:	a009883a 	mov	r4,r20
   2a544:	100b883a 	mov	r5,r2
   2a548:	9826943a 	slli	r19,r19,16
   2a54c:	1039883a 	mov	fp,r2
   2a550:	002ad9c0 	call	2ad9c <__mulsi3>
   2a554:	b13fffcc 	andi	r4,r22,65535
   2a558:	24c8b03a 	or	r4,r4,r19
   2a55c:	2080062e 	bgeu	r4,r2,2a578 <__udivdi3+0x550>
   2a560:	2449883a 	add	r4,r4,r17
   2a564:	e0ffffc4 	addi	r3,fp,-1
   2a568:	24402436 	bltu	r4,r17,2a5fc <__udivdi3+0x5d4>
   2a56c:	2080232e 	bgeu	r4,r2,2a5fc <__udivdi3+0x5d4>
   2a570:	e73fff84 	addi	fp,fp,-2
   2a574:	2449883a 	add	r4,r4,r17
   2a578:	b82e943a 	slli	r23,r23,16
   2a57c:	20a1c83a 	sub	r16,r4,r2
   2a580:	bf06b03a 	or	r3,r23,fp
   2a584:	003f2806 	br	2a228 <__alt_data_end+0xfffea228>
   2a588:	2021883a 	mov	r16,r4
   2a58c:	003f5306 	br	2a2dc <__alt_data_end+0xfffea2dc>
   2a590:	1821883a 	mov	r16,r3
   2a594:	003ef406 	br	2a168 <__alt_data_end+0xfffea168>
   2a598:	1806943a 	slli	r3,r3,16
   2a59c:	9de6983a 	sll	r19,r19,r23
   2a5a0:	e73fffcc 	andi	fp,fp,65535
   2a5a4:	1f07883a 	add	r3,r3,fp
   2a5a8:	98ffbd2e 	bgeu	r19,r3,2a4a0 <__alt_data_end+0xfffea4a0>
   2a5ac:	90bfffc4 	addi	r2,r18,-1
   2a5b0:	0007883a 	mov	r3,zero
   2a5b4:	003f4e06 	br	2a2f0 <__alt_data_end+0xfffea2f0>
   2a5b8:	00800604 	movi	r2,24
   2a5bc:	003ef506 	br	2a194 <__alt_data_end+0xfffea194>
   2a5c0:	00800604 	movi	r2,24
   2a5c4:	003f0b06 	br	2a1f4 <__alt_data_end+0xfffea1f4>
   2a5c8:	00800604 	movi	r2,24
   2a5cc:	003ead06 	br	2a084 <__alt_data_end+0xfffea084>
   2a5d0:	0007883a 	mov	r3,zero
   2a5d4:	00800044 	movi	r2,1
   2a5d8:	003f4506 	br	2a2f0 <__alt_data_end+0xfffea2f0>
   2a5dc:	80bf8e2e 	bgeu	r16,r2,2a418 <__alt_data_end+0xfffea418>
   2a5e0:	8c7fff84 	addi	r17,r17,-2
   2a5e4:	8721883a 	add	r16,r16,fp
   2a5e8:	003f8c06 	br	2a41c <__alt_data_end+0xfffea41c>
   2a5ec:	18bf762e 	bgeu	r3,r2,2a3c8 <__alt_data_end+0xfffea3c8>
   2a5f0:	ad7fff84 	addi	r21,r21,-2
   2a5f4:	1f07883a 	add	r3,r3,fp
   2a5f8:	003f7406 	br	2a3cc <__alt_data_end+0xfffea3cc>
   2a5fc:	1839883a 	mov	fp,r3
   2a600:	003fdd06 	br	2a578 <__alt_data_end+0xfffea578>
   2a604:	182f883a 	mov	r23,r3
   2a608:	003fc506 	br	2a520 <__alt_data_end+0xfffea520>
   2a60c:	b5bfff84 	addi	r22,r22,-2
   2a610:	3c4f883a 	add	r7,r7,r17
   2a614:	003f1a06 	br	2a280 <__alt_data_end+0xfffea280>
   2a618:	b5bfff84 	addi	r22,r22,-2
   2a61c:	1c47883a 	add	r3,r3,r17
   2a620:	003ebc06 	br	2a114 <__alt_data_end+0xfffea114>

0002a624 <__umoddi3>:
   2a624:	defff304 	addi	sp,sp,-52
   2a628:	df000b15 	stw	fp,44(sp)
   2a62c:	dc400415 	stw	r17,16(sp)
   2a630:	dc000315 	stw	r16,12(sp)
   2a634:	dfc00c15 	stw	ra,48(sp)
   2a638:	ddc00a15 	stw	r23,40(sp)
   2a63c:	dd800915 	stw	r22,36(sp)
   2a640:	dd400815 	stw	r21,32(sp)
   2a644:	dd000715 	stw	r20,28(sp)
   2a648:	dcc00615 	stw	r19,24(sp)
   2a64c:	dc800515 	stw	r18,20(sp)
   2a650:	2021883a 	mov	r16,r4
   2a654:	2823883a 	mov	r17,r5
   2a658:	2839883a 	mov	fp,r5
   2a65c:	3800401e 	bne	r7,zero,2a760 <__umoddi3+0x13c>
   2a660:	3027883a 	mov	r19,r6
   2a664:	2029883a 	mov	r20,r4
   2a668:	2980552e 	bgeu	r5,r6,2a7c0 <__umoddi3+0x19c>
   2a66c:	00bfffd4 	movui	r2,65535
   2a670:	1180a236 	bltu	r2,r6,2a8fc <__umoddi3+0x2d8>
   2a674:	01003fc4 	movi	r4,255
   2a678:	2189803a 	cmpltu	r4,r4,r6
   2a67c:	200890fa 	slli	r4,r4,3
   2a680:	3104d83a 	srl	r2,r6,r4
   2a684:	00c000f4 	movhi	r3,3
   2a688:	18ca0d04 	addi	r3,r3,10292
   2a68c:	1885883a 	add	r2,r3,r2
   2a690:	10c00003 	ldbu	r3,0(r2)
   2a694:	00800804 	movi	r2,32
   2a698:	1909883a 	add	r4,r3,r4
   2a69c:	1125c83a 	sub	r18,r2,r4
   2a6a0:	90000526 	beq	r18,zero,2a6b8 <__umoddi3+0x94>
   2a6a4:	8ca2983a 	sll	r17,r17,r18
   2a6a8:	8108d83a 	srl	r4,r16,r4
   2a6ac:	34a6983a 	sll	r19,r6,r18
   2a6b0:	84a8983a 	sll	r20,r16,r18
   2a6b4:	2478b03a 	or	fp,r4,r17
   2a6b8:	982cd43a 	srli	r22,r19,16
   2a6bc:	e009883a 	mov	r4,fp
   2a6c0:	9dffffcc 	andi	r23,r19,65535
   2a6c4:	b00b883a 	mov	r5,r22
   2a6c8:	002ad440 	call	2ad44 <__umodsi3>
   2a6cc:	b00b883a 	mov	r5,r22
   2a6d0:	e009883a 	mov	r4,fp
   2a6d4:	102b883a 	mov	r21,r2
   2a6d8:	002ace00 	call	2ace0 <__udivsi3>
   2a6dc:	100b883a 	mov	r5,r2
   2a6e0:	b809883a 	mov	r4,r23
   2a6e4:	002ad9c0 	call	2ad9c <__mulsi3>
   2a6e8:	a82a943a 	slli	r21,r21,16
   2a6ec:	a006d43a 	srli	r3,r20,16
   2a6f0:	1d46b03a 	or	r3,r3,r21
   2a6f4:	1880032e 	bgeu	r3,r2,2a704 <__umoddi3+0xe0>
   2a6f8:	1cc7883a 	add	r3,r3,r19
   2a6fc:	1cc00136 	bltu	r3,r19,2a704 <__umoddi3+0xe0>
   2a700:	18813136 	bltu	r3,r2,2abc8 <__umoddi3+0x5a4>
   2a704:	18a1c83a 	sub	r16,r3,r2
   2a708:	b00b883a 	mov	r5,r22
   2a70c:	8009883a 	mov	r4,r16
   2a710:	002ad440 	call	2ad44 <__umodsi3>
   2a714:	b00b883a 	mov	r5,r22
   2a718:	8009883a 	mov	r4,r16
   2a71c:	1023883a 	mov	r17,r2
   2a720:	002ace00 	call	2ace0 <__udivsi3>
   2a724:	100b883a 	mov	r5,r2
   2a728:	b809883a 	mov	r4,r23
   2a72c:	8822943a 	slli	r17,r17,16
   2a730:	002ad9c0 	call	2ad9c <__mulsi3>
   2a734:	a0ffffcc 	andi	r3,r20,65535
   2a738:	1c46b03a 	or	r3,r3,r17
   2a73c:	1880042e 	bgeu	r3,r2,2a750 <__umoddi3+0x12c>
   2a740:	1cc7883a 	add	r3,r3,r19
   2a744:	1cc00236 	bltu	r3,r19,2a750 <__umoddi3+0x12c>
   2a748:	1880012e 	bgeu	r3,r2,2a750 <__umoddi3+0x12c>
   2a74c:	1cc7883a 	add	r3,r3,r19
   2a750:	1885c83a 	sub	r2,r3,r2
   2a754:	1484d83a 	srl	r2,r2,r18
   2a758:	0007883a 	mov	r3,zero
   2a75c:	00005306 	br	2a8ac <__umoddi3+0x288>
   2a760:	29c05036 	bltu	r5,r7,2a8a4 <__umoddi3+0x280>
   2a764:	00bfffd4 	movui	r2,65535
   2a768:	11c05c2e 	bgeu	r2,r7,2a8dc <__umoddi3+0x2b8>
   2a76c:	00804034 	movhi	r2,256
   2a770:	10bfffc4 	addi	r2,r2,-1
   2a774:	11c10636 	bltu	r2,r7,2ab90 <__umoddi3+0x56c>
   2a778:	01000404 	movi	r4,16
   2a77c:	3904d83a 	srl	r2,r7,r4
   2a780:	00c000f4 	movhi	r3,3
   2a784:	18ca0d04 	addi	r3,r3,10292
   2a788:	1885883a 	add	r2,r3,r2
   2a78c:	14c00003 	ldbu	r19,0(r2)
   2a790:	00c00804 	movi	r3,32
   2a794:	9927883a 	add	r19,r19,r4
   2a798:	1ce9c83a 	sub	r20,r3,r19
   2a79c:	a0005c1e 	bne	r20,zero,2a910 <__umoddi3+0x2ec>
   2a7a0:	3c400136 	bltu	r7,r17,2a7a8 <__umoddi3+0x184>
   2a7a4:	81810a36 	bltu	r16,r6,2abd0 <__umoddi3+0x5ac>
   2a7a8:	8185c83a 	sub	r2,r16,r6
   2a7ac:	89e3c83a 	sub	r17,r17,r7
   2a7b0:	8089803a 	cmpltu	r4,r16,r2
   2a7b4:	8939c83a 	sub	fp,r17,r4
   2a7b8:	e007883a 	mov	r3,fp
   2a7bc:	00003b06 	br	2a8ac <__umoddi3+0x288>
   2a7c0:	3000041e 	bne	r6,zero,2a7d4 <__umoddi3+0x1b0>
   2a7c4:	000b883a 	mov	r5,zero
   2a7c8:	01000044 	movi	r4,1
   2a7cc:	002ace00 	call	2ace0 <__udivsi3>
   2a7d0:	1027883a 	mov	r19,r2
   2a7d4:	00bfffd4 	movui	r2,65535
   2a7d8:	14c0442e 	bgeu	r2,r19,2a8ec <__umoddi3+0x2c8>
   2a7dc:	00804034 	movhi	r2,256
   2a7e0:	10bfffc4 	addi	r2,r2,-1
   2a7e4:	14c0ec36 	bltu	r2,r19,2ab98 <__umoddi3+0x574>
   2a7e8:	00800404 	movi	r2,16
   2a7ec:	9886d83a 	srl	r3,r19,r2
   2a7f0:	010000f4 	movhi	r4,3
   2a7f4:	210a0d04 	addi	r4,r4,10292
   2a7f8:	20c7883a 	add	r3,r4,r3
   2a7fc:	18c00003 	ldbu	r3,0(r3)
   2a800:	1887883a 	add	r3,r3,r2
   2a804:	00800804 	movi	r2,32
   2a808:	10e5c83a 	sub	r18,r2,r3
   2a80c:	9000ab1e 	bne	r18,zero,2aabc <__umoddi3+0x498>
   2a810:	982cd43a 	srli	r22,r19,16
   2a814:	8ce3c83a 	sub	r17,r17,r19
   2a818:	9dffffcc 	andi	r23,r19,65535
   2a81c:	b00b883a 	mov	r5,r22
   2a820:	8809883a 	mov	r4,r17
   2a824:	002ad440 	call	2ad44 <__umodsi3>
   2a828:	b00b883a 	mov	r5,r22
   2a82c:	8809883a 	mov	r4,r17
   2a830:	102b883a 	mov	r21,r2
   2a834:	002ace00 	call	2ace0 <__udivsi3>
   2a838:	b80b883a 	mov	r5,r23
   2a83c:	1009883a 	mov	r4,r2
   2a840:	002ad9c0 	call	2ad9c <__mulsi3>
   2a844:	a82a943a 	slli	r21,r21,16
   2a848:	a006d43a 	srli	r3,r20,16
   2a84c:	1d46b03a 	or	r3,r3,r21
   2a850:	1880042e 	bgeu	r3,r2,2a864 <__umoddi3+0x240>
   2a854:	1cc7883a 	add	r3,r3,r19
   2a858:	1cc00236 	bltu	r3,r19,2a864 <__umoddi3+0x240>
   2a85c:	1880012e 	bgeu	r3,r2,2a864 <__umoddi3+0x240>
   2a860:	1cc7883a 	add	r3,r3,r19
   2a864:	18a1c83a 	sub	r16,r3,r2
   2a868:	b00b883a 	mov	r5,r22
   2a86c:	8009883a 	mov	r4,r16
   2a870:	002ad440 	call	2ad44 <__umodsi3>
   2a874:	1023883a 	mov	r17,r2
   2a878:	b00b883a 	mov	r5,r22
   2a87c:	8009883a 	mov	r4,r16
   2a880:	002ace00 	call	2ace0 <__udivsi3>
   2a884:	8822943a 	slli	r17,r17,16
   2a888:	b80b883a 	mov	r5,r23
   2a88c:	1009883a 	mov	r4,r2
   2a890:	002ad9c0 	call	2ad9c <__mulsi3>
   2a894:	a53fffcc 	andi	r20,r20,65535
   2a898:	a446b03a 	or	r3,r20,r17
   2a89c:	18bfac2e 	bgeu	r3,r2,2a750 <__alt_data_end+0xfffea750>
   2a8a0:	003fa706 	br	2a740 <__alt_data_end+0xfffea740>
   2a8a4:	2005883a 	mov	r2,r4
   2a8a8:	2807883a 	mov	r3,r5
   2a8ac:	dfc00c17 	ldw	ra,48(sp)
   2a8b0:	df000b17 	ldw	fp,44(sp)
   2a8b4:	ddc00a17 	ldw	r23,40(sp)
   2a8b8:	dd800917 	ldw	r22,36(sp)
   2a8bc:	dd400817 	ldw	r21,32(sp)
   2a8c0:	dd000717 	ldw	r20,28(sp)
   2a8c4:	dcc00617 	ldw	r19,24(sp)
   2a8c8:	dc800517 	ldw	r18,20(sp)
   2a8cc:	dc400417 	ldw	r17,16(sp)
   2a8d0:	dc000317 	ldw	r16,12(sp)
   2a8d4:	dec00d04 	addi	sp,sp,52
   2a8d8:	f800283a 	ret
   2a8dc:	04c03fc4 	movi	r19,255
   2a8e0:	99c9803a 	cmpltu	r4,r19,r7
   2a8e4:	200890fa 	slli	r4,r4,3
   2a8e8:	003fa406 	br	2a77c <__alt_data_end+0xfffea77c>
   2a8ec:	00803fc4 	movi	r2,255
   2a8f0:	14c5803a 	cmpltu	r2,r2,r19
   2a8f4:	100490fa 	slli	r2,r2,3
   2a8f8:	003fbc06 	br	2a7ec <__alt_data_end+0xfffea7ec>
   2a8fc:	00804034 	movhi	r2,256
   2a900:	10bfffc4 	addi	r2,r2,-1
   2a904:	1180a636 	bltu	r2,r6,2aba0 <__umoddi3+0x57c>
   2a908:	01000404 	movi	r4,16
   2a90c:	003f5c06 	br	2a680 <__alt_data_end+0xfffea680>
   2a910:	3d0e983a 	sll	r7,r7,r20
   2a914:	34ead83a 	srl	r21,r6,r19
   2a918:	8cc6d83a 	srl	r3,r17,r19
   2a91c:	8d10983a 	sll	r8,r17,r20
   2a920:	3d6ab03a 	or	r21,r7,r21
   2a924:	a82cd43a 	srli	r22,r21,16
   2a928:	84e2d83a 	srl	r17,r16,r19
   2a92c:	1809883a 	mov	r4,r3
   2a930:	b00b883a 	mov	r5,r22
   2a934:	8a22b03a 	or	r17,r17,r8
   2a938:	3524983a 	sll	r18,r6,r20
   2a93c:	dc400015 	stw	r17,0(sp)
   2a940:	d8c00115 	stw	r3,4(sp)
   2a944:	002ad440 	call	2ad44 <__umodsi3>
   2a948:	d8c00117 	ldw	r3,4(sp)
   2a94c:	b00b883a 	mov	r5,r22
   2a950:	1039883a 	mov	fp,r2
   2a954:	1809883a 	mov	r4,r3
   2a958:	002ace00 	call	2ace0 <__udivsi3>
   2a95c:	adffffcc 	andi	r23,r21,65535
   2a960:	100b883a 	mov	r5,r2
   2a964:	b809883a 	mov	r4,r23
   2a968:	1023883a 	mov	r17,r2
   2a96c:	002ad9c0 	call	2ad9c <__mulsi3>
   2a970:	d9400017 	ldw	r5,0(sp)
   2a974:	e008943a 	slli	r4,fp,16
   2a978:	8520983a 	sll	r16,r16,r20
   2a97c:	2806d43a 	srli	r3,r5,16
   2a980:	1906b03a 	or	r3,r3,r4
   2a984:	1880042e 	bgeu	r3,r2,2a998 <__umoddi3+0x374>
   2a988:	1d47883a 	add	r3,r3,r21
   2a98c:	893fffc4 	addi	r4,r17,-1
   2a990:	1d40892e 	bgeu	r3,r21,2abb8 <__umoddi3+0x594>
   2a994:	2023883a 	mov	r17,r4
   2a998:	18b9c83a 	sub	fp,r3,r2
   2a99c:	b00b883a 	mov	r5,r22
   2a9a0:	e009883a 	mov	r4,fp
   2a9a4:	002ad440 	call	2ad44 <__umodsi3>
   2a9a8:	b00b883a 	mov	r5,r22
   2a9ac:	e009883a 	mov	r4,fp
   2a9b0:	d8800215 	stw	r2,8(sp)
   2a9b4:	002ace00 	call	2ace0 <__udivsi3>
   2a9b8:	100b883a 	mov	r5,r2
   2a9bc:	b809883a 	mov	r4,r23
   2a9c0:	102d883a 	mov	r22,r2
   2a9c4:	002ad9c0 	call	2ad9c <__mulsi3>
   2a9c8:	d9800217 	ldw	r6,8(sp)
   2a9cc:	d8c00017 	ldw	r3,0(sp)
   2a9d0:	300c943a 	slli	r6,r6,16
   2a9d4:	1a3fffcc 	andi	r8,r3,65535
   2a9d8:	4190b03a 	or	r8,r8,r6
   2a9dc:	4080042e 	bgeu	r8,r2,2a9f0 <__umoddi3+0x3cc>
   2a9e0:	4551883a 	add	r8,r8,r21
   2a9e4:	b0ffffc4 	addi	r3,r22,-1
   2a9e8:	45406f2e 	bgeu	r8,r21,2aba8 <__umoddi3+0x584>
   2a9ec:	182d883a 	mov	r22,r3
   2a9f0:	880e943a 	slli	r7,r17,16
   2a9f4:	9006d43a 	srli	r3,r18,16
   2a9f8:	91bfffcc 	andi	r6,r18,65535
   2a9fc:	3dacb03a 	or	r22,r7,r22
   2aa00:	b02ed43a 	srli	r23,r22,16
   2aa04:	b5bfffcc 	andi	r22,r22,65535
   2aa08:	300b883a 	mov	r5,r6
   2aa0c:	b009883a 	mov	r4,r22
   2aa10:	40a3c83a 	sub	r17,r8,r2
   2aa14:	d8c00115 	stw	r3,4(sp)
   2aa18:	d9800215 	stw	r6,8(sp)
   2aa1c:	002ad9c0 	call	2ad9c <__mulsi3>
   2aa20:	d9800217 	ldw	r6,8(sp)
   2aa24:	b809883a 	mov	r4,r23
   2aa28:	1039883a 	mov	fp,r2
   2aa2c:	300b883a 	mov	r5,r6
   2aa30:	002ad9c0 	call	2ad9c <__mulsi3>
   2aa34:	d8c00117 	ldw	r3,4(sp)
   2aa38:	b809883a 	mov	r4,r23
   2aa3c:	d8800215 	stw	r2,8(sp)
   2aa40:	180b883a 	mov	r5,r3
   2aa44:	002ad9c0 	call	2ad9c <__mulsi3>
   2aa48:	d8c00117 	ldw	r3,4(sp)
   2aa4c:	b009883a 	mov	r4,r22
   2aa50:	102f883a 	mov	r23,r2
   2aa54:	180b883a 	mov	r5,r3
   2aa58:	002ad9c0 	call	2ad9c <__mulsi3>
   2aa5c:	d9800217 	ldw	r6,8(sp)
   2aa60:	e006d43a 	srli	r3,fp,16
   2aa64:	1185883a 	add	r2,r2,r6
   2aa68:	1885883a 	add	r2,r3,r2
   2aa6c:	1180022e 	bgeu	r2,r6,2aa78 <__umoddi3+0x454>
   2aa70:	00c00074 	movhi	r3,1
   2aa74:	b8ef883a 	add	r23,r23,r3
   2aa78:	1006d43a 	srli	r3,r2,16
   2aa7c:	1004943a 	slli	r2,r2,16
   2aa80:	e73fffcc 	andi	fp,fp,65535
   2aa84:	1dc7883a 	add	r3,r3,r23
   2aa88:	1739883a 	add	fp,r2,fp
   2aa8c:	88c03a36 	bltu	r17,r3,2ab78 <__umoddi3+0x554>
   2aa90:	88c05126 	beq	r17,r3,2abd8 <__umoddi3+0x5b4>
   2aa94:	88c9c83a 	sub	r4,r17,r3
   2aa98:	e00f883a 	mov	r7,fp
   2aa9c:	81cfc83a 	sub	r7,r16,r7
   2aaa0:	81c7803a 	cmpltu	r3,r16,r7
   2aaa4:	20c7c83a 	sub	r3,r4,r3
   2aaa8:	1cc4983a 	sll	r2,r3,r19
   2aaac:	3d0ed83a 	srl	r7,r7,r20
   2aab0:	1d06d83a 	srl	r3,r3,r20
   2aab4:	11c4b03a 	or	r2,r2,r7
   2aab8:	003f7c06 	br	2a8ac <__alt_data_end+0xfffea8ac>
   2aabc:	9ca6983a 	sll	r19,r19,r18
   2aac0:	88f8d83a 	srl	fp,r17,r3
   2aac4:	80c4d83a 	srl	r2,r16,r3
   2aac8:	982cd43a 	srli	r22,r19,16
   2aacc:	8ca2983a 	sll	r17,r17,r18
   2aad0:	e009883a 	mov	r4,fp
   2aad4:	b00b883a 	mov	r5,r22
   2aad8:	146ab03a 	or	r21,r2,r17
   2aadc:	002ad440 	call	2ad44 <__umodsi3>
   2aae0:	b00b883a 	mov	r5,r22
   2aae4:	e009883a 	mov	r4,fp
   2aae8:	1029883a 	mov	r20,r2
   2aaec:	9dffffcc 	andi	r23,r19,65535
   2aaf0:	002ace00 	call	2ace0 <__udivsi3>
   2aaf4:	b809883a 	mov	r4,r23
   2aaf8:	100b883a 	mov	r5,r2
   2aafc:	002ad9c0 	call	2ad9c <__mulsi3>
   2ab00:	a008943a 	slli	r4,r20,16
   2ab04:	a806d43a 	srli	r3,r21,16
   2ab08:	84a8983a 	sll	r20,r16,r18
   2ab0c:	1906b03a 	or	r3,r3,r4
   2ab10:	1880042e 	bgeu	r3,r2,2ab24 <__umoddi3+0x500>
   2ab14:	1cc7883a 	add	r3,r3,r19
   2ab18:	1cc00236 	bltu	r3,r19,2ab24 <__umoddi3+0x500>
   2ab1c:	1880012e 	bgeu	r3,r2,2ab24 <__umoddi3+0x500>
   2ab20:	1cc7883a 	add	r3,r3,r19
   2ab24:	18a3c83a 	sub	r17,r3,r2
   2ab28:	b00b883a 	mov	r5,r22
   2ab2c:	8809883a 	mov	r4,r17
   2ab30:	002ad440 	call	2ad44 <__umodsi3>
   2ab34:	b00b883a 	mov	r5,r22
   2ab38:	8809883a 	mov	r4,r17
   2ab3c:	1021883a 	mov	r16,r2
   2ab40:	002ace00 	call	2ace0 <__udivsi3>
   2ab44:	100b883a 	mov	r5,r2
   2ab48:	b809883a 	mov	r4,r23
   2ab4c:	8020943a 	slli	r16,r16,16
   2ab50:	002ad9c0 	call	2ad9c <__mulsi3>
   2ab54:	a8ffffcc 	andi	r3,r21,65535
   2ab58:	1c06b03a 	or	r3,r3,r16
   2ab5c:	1880042e 	bgeu	r3,r2,2ab70 <__umoddi3+0x54c>
   2ab60:	1cc7883a 	add	r3,r3,r19
   2ab64:	1cc00236 	bltu	r3,r19,2ab70 <__umoddi3+0x54c>
   2ab68:	1880012e 	bgeu	r3,r2,2ab70 <__umoddi3+0x54c>
   2ab6c:	1cc7883a 	add	r3,r3,r19
   2ab70:	18a3c83a 	sub	r17,r3,r2
   2ab74:	003f2906 	br	2a81c <__alt_data_end+0xfffea81c>
   2ab78:	e48fc83a 	sub	r7,fp,r18
   2ab7c:	1d49c83a 	sub	r4,r3,r21
   2ab80:	e1f9803a 	cmpltu	fp,fp,r7
   2ab84:	2739c83a 	sub	fp,r4,fp
   2ab88:	8f09c83a 	sub	r4,r17,fp
   2ab8c:	003fc306 	br	2aa9c <__alt_data_end+0xfffeaa9c>
   2ab90:	01000604 	movi	r4,24
   2ab94:	003ef906 	br	2a77c <__alt_data_end+0xfffea77c>
   2ab98:	00800604 	movi	r2,24
   2ab9c:	003f1306 	br	2a7ec <__alt_data_end+0xfffea7ec>
   2aba0:	01000604 	movi	r4,24
   2aba4:	003eb606 	br	2a680 <__alt_data_end+0xfffea680>
   2aba8:	40bf902e 	bgeu	r8,r2,2a9ec <__alt_data_end+0xfffea9ec>
   2abac:	b5bfff84 	addi	r22,r22,-2
   2abb0:	4551883a 	add	r8,r8,r21
   2abb4:	003f8e06 	br	2a9f0 <__alt_data_end+0xfffea9f0>
   2abb8:	18bf762e 	bgeu	r3,r2,2a994 <__alt_data_end+0xfffea994>
   2abbc:	8c7fff84 	addi	r17,r17,-2
   2abc0:	1d47883a 	add	r3,r3,r21
   2abc4:	003f7406 	br	2a998 <__alt_data_end+0xfffea998>
   2abc8:	1cc7883a 	add	r3,r3,r19
   2abcc:	003ecd06 	br	2a704 <__alt_data_end+0xfffea704>
   2abd0:	8005883a 	mov	r2,r16
   2abd4:	003ef806 	br	2a7b8 <__alt_data_end+0xfffea7b8>
   2abd8:	873fe736 	bltu	r16,fp,2ab78 <__alt_data_end+0xfffeab78>
   2abdc:	e00f883a 	mov	r7,fp
   2abe0:	0009883a 	mov	r4,zero
   2abe4:	003fad06 	br	2aa9c <__alt_data_end+0xfffeaa9c>

0002abe8 <__divsi3>:
   2abe8:	20001b16 	blt	r4,zero,2ac58 <__divsi3+0x70>
   2abec:	000f883a 	mov	r7,zero
   2abf0:	28001616 	blt	r5,zero,2ac4c <__divsi3+0x64>
   2abf4:	200d883a 	mov	r6,r4
   2abf8:	29001a2e 	bgeu	r5,r4,2ac64 <__divsi3+0x7c>
   2abfc:	00800804 	movi	r2,32
   2ac00:	00c00044 	movi	r3,1
   2ac04:	00000106 	br	2ac0c <__divsi3+0x24>
   2ac08:	10000d26 	beq	r2,zero,2ac40 <__divsi3+0x58>
   2ac0c:	294b883a 	add	r5,r5,r5
   2ac10:	10bfffc4 	addi	r2,r2,-1
   2ac14:	18c7883a 	add	r3,r3,r3
   2ac18:	293ffb36 	bltu	r5,r4,2ac08 <__alt_data_end+0xfffeac08>
   2ac1c:	0005883a 	mov	r2,zero
   2ac20:	18000726 	beq	r3,zero,2ac40 <__divsi3+0x58>
   2ac24:	0005883a 	mov	r2,zero
   2ac28:	31400236 	bltu	r6,r5,2ac34 <__divsi3+0x4c>
   2ac2c:	314dc83a 	sub	r6,r6,r5
   2ac30:	10c4b03a 	or	r2,r2,r3
   2ac34:	1806d07a 	srli	r3,r3,1
   2ac38:	280ad07a 	srli	r5,r5,1
   2ac3c:	183ffa1e 	bne	r3,zero,2ac28 <__alt_data_end+0xfffeac28>
   2ac40:	38000126 	beq	r7,zero,2ac48 <__divsi3+0x60>
   2ac44:	0085c83a 	sub	r2,zero,r2
   2ac48:	f800283a 	ret
   2ac4c:	014bc83a 	sub	r5,zero,r5
   2ac50:	39c0005c 	xori	r7,r7,1
   2ac54:	003fe706 	br	2abf4 <__alt_data_end+0xfffeabf4>
   2ac58:	0109c83a 	sub	r4,zero,r4
   2ac5c:	01c00044 	movi	r7,1
   2ac60:	003fe306 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2ac64:	00c00044 	movi	r3,1
   2ac68:	003fee06 	br	2ac24 <__alt_data_end+0xfffeac24>

0002ac6c <__modsi3>:
   2ac6c:	20001716 	blt	r4,zero,2accc <__modsi3+0x60>
   2ac70:	000f883a 	mov	r7,zero
   2ac74:	2005883a 	mov	r2,r4
   2ac78:	28001216 	blt	r5,zero,2acc4 <__modsi3+0x58>
   2ac7c:	2900162e 	bgeu	r5,r4,2acd8 <__modsi3+0x6c>
   2ac80:	01800804 	movi	r6,32
   2ac84:	00c00044 	movi	r3,1
   2ac88:	00000106 	br	2ac90 <__modsi3+0x24>
   2ac8c:	30000a26 	beq	r6,zero,2acb8 <__modsi3+0x4c>
   2ac90:	294b883a 	add	r5,r5,r5
   2ac94:	31bfffc4 	addi	r6,r6,-1
   2ac98:	18c7883a 	add	r3,r3,r3
   2ac9c:	293ffb36 	bltu	r5,r4,2ac8c <__alt_data_end+0xfffeac8c>
   2aca0:	18000526 	beq	r3,zero,2acb8 <__modsi3+0x4c>
   2aca4:	1806d07a 	srli	r3,r3,1
   2aca8:	11400136 	bltu	r2,r5,2acb0 <__modsi3+0x44>
   2acac:	1145c83a 	sub	r2,r2,r5
   2acb0:	280ad07a 	srli	r5,r5,1
   2acb4:	183ffb1e 	bne	r3,zero,2aca4 <__alt_data_end+0xfffeaca4>
   2acb8:	38000126 	beq	r7,zero,2acc0 <__modsi3+0x54>
   2acbc:	0085c83a 	sub	r2,zero,r2
   2acc0:	f800283a 	ret
   2acc4:	014bc83a 	sub	r5,zero,r5
   2acc8:	003fec06 	br	2ac7c <__alt_data_end+0xfffeac7c>
   2accc:	0109c83a 	sub	r4,zero,r4
   2acd0:	01c00044 	movi	r7,1
   2acd4:	003fe706 	br	2ac74 <__alt_data_end+0xfffeac74>
   2acd8:	00c00044 	movi	r3,1
   2acdc:	003ff106 	br	2aca4 <__alt_data_end+0xfffeaca4>

0002ace0 <__udivsi3>:
   2ace0:	200d883a 	mov	r6,r4
   2ace4:	2900152e 	bgeu	r5,r4,2ad3c <__udivsi3+0x5c>
   2ace8:	28001416 	blt	r5,zero,2ad3c <__udivsi3+0x5c>
   2acec:	00800804 	movi	r2,32
   2acf0:	00c00044 	movi	r3,1
   2acf4:	00000206 	br	2ad00 <__udivsi3+0x20>
   2acf8:	10000e26 	beq	r2,zero,2ad34 <__udivsi3+0x54>
   2acfc:	28000516 	blt	r5,zero,2ad14 <__udivsi3+0x34>
   2ad00:	294b883a 	add	r5,r5,r5
   2ad04:	10bfffc4 	addi	r2,r2,-1
   2ad08:	18c7883a 	add	r3,r3,r3
   2ad0c:	293ffa36 	bltu	r5,r4,2acf8 <__alt_data_end+0xfffeacf8>
   2ad10:	18000826 	beq	r3,zero,2ad34 <__udivsi3+0x54>
   2ad14:	0005883a 	mov	r2,zero
   2ad18:	31400236 	bltu	r6,r5,2ad24 <__udivsi3+0x44>
   2ad1c:	314dc83a 	sub	r6,r6,r5
   2ad20:	10c4b03a 	or	r2,r2,r3
   2ad24:	1806d07a 	srli	r3,r3,1
   2ad28:	280ad07a 	srli	r5,r5,1
   2ad2c:	183ffa1e 	bne	r3,zero,2ad18 <__alt_data_end+0xfffead18>
   2ad30:	f800283a 	ret
   2ad34:	0005883a 	mov	r2,zero
   2ad38:	f800283a 	ret
   2ad3c:	00c00044 	movi	r3,1
   2ad40:	003ff406 	br	2ad14 <__alt_data_end+0xfffead14>

0002ad44 <__umodsi3>:
   2ad44:	2005883a 	mov	r2,r4
   2ad48:	2900122e 	bgeu	r5,r4,2ad94 <__umodsi3+0x50>
   2ad4c:	28001116 	blt	r5,zero,2ad94 <__umodsi3+0x50>
   2ad50:	01800804 	movi	r6,32
   2ad54:	00c00044 	movi	r3,1
   2ad58:	00000206 	br	2ad64 <__umodsi3+0x20>
   2ad5c:	30000c26 	beq	r6,zero,2ad90 <__umodsi3+0x4c>
   2ad60:	28000516 	blt	r5,zero,2ad78 <__umodsi3+0x34>
   2ad64:	294b883a 	add	r5,r5,r5
   2ad68:	31bfffc4 	addi	r6,r6,-1
   2ad6c:	18c7883a 	add	r3,r3,r3
   2ad70:	293ffa36 	bltu	r5,r4,2ad5c <__alt_data_end+0xfffead5c>
   2ad74:	18000626 	beq	r3,zero,2ad90 <__umodsi3+0x4c>
   2ad78:	1806d07a 	srli	r3,r3,1
   2ad7c:	11400136 	bltu	r2,r5,2ad84 <__umodsi3+0x40>
   2ad80:	1145c83a 	sub	r2,r2,r5
   2ad84:	280ad07a 	srli	r5,r5,1
   2ad88:	183ffb1e 	bne	r3,zero,2ad78 <__alt_data_end+0xfffead78>
   2ad8c:	f800283a 	ret
   2ad90:	f800283a 	ret
   2ad94:	00c00044 	movi	r3,1
   2ad98:	003ff706 	br	2ad78 <__alt_data_end+0xfffead78>

0002ad9c <__mulsi3>:
   2ad9c:	0005883a 	mov	r2,zero
   2ada0:	20000726 	beq	r4,zero,2adc0 <__mulsi3+0x24>
   2ada4:	20c0004c 	andi	r3,r4,1
   2ada8:	2008d07a 	srli	r4,r4,1
   2adac:	18000126 	beq	r3,zero,2adb4 <__mulsi3+0x18>
   2adb0:	1145883a 	add	r2,r2,r5
   2adb4:	294b883a 	add	r5,r5,r5
   2adb8:	203ffa1e 	bne	r4,zero,2ada4 <__alt_data_end+0xfffeada4>
   2adbc:	f800283a 	ret
   2adc0:	f800283a 	ret

0002adc4 <__adddf3>:
   2adc4:	02c00434 	movhi	r11,16
   2adc8:	5affffc4 	addi	r11,r11,-1
   2adcc:	2806d7fa 	srli	r3,r5,31
   2add0:	2ad4703a 	and	r10,r5,r11
   2add4:	3ad2703a 	and	r9,r7,r11
   2add8:	3804d53a 	srli	r2,r7,20
   2addc:	3018d77a 	srli	r12,r6,29
   2ade0:	280ad53a 	srli	r5,r5,20
   2ade4:	501490fa 	slli	r10,r10,3
   2ade8:	2010d77a 	srli	r8,r4,29
   2adec:	481290fa 	slli	r9,r9,3
   2adf0:	380ed7fa 	srli	r7,r7,31
   2adf4:	defffb04 	addi	sp,sp,-20
   2adf8:	dc800215 	stw	r18,8(sp)
   2adfc:	dc400115 	stw	r17,4(sp)
   2ae00:	dc000015 	stw	r16,0(sp)
   2ae04:	dfc00415 	stw	ra,16(sp)
   2ae08:	dcc00315 	stw	r19,12(sp)
   2ae0c:	1c803fcc 	andi	r18,r3,255
   2ae10:	2c01ffcc 	andi	r16,r5,2047
   2ae14:	5210b03a 	or	r8,r10,r8
   2ae18:	202290fa 	slli	r17,r4,3
   2ae1c:	1081ffcc 	andi	r2,r2,2047
   2ae20:	4b12b03a 	or	r9,r9,r12
   2ae24:	300c90fa 	slli	r6,r6,3
   2ae28:	91c07526 	beq	r18,r7,2b000 <__adddf3+0x23c>
   2ae2c:	8087c83a 	sub	r3,r16,r2
   2ae30:	00c0ab0e 	bge	zero,r3,2b0e0 <__adddf3+0x31c>
   2ae34:	10002a1e 	bne	r2,zero,2aee0 <__adddf3+0x11c>
   2ae38:	4984b03a 	or	r2,r9,r6
   2ae3c:	1000961e 	bne	r2,zero,2b098 <__adddf3+0x2d4>
   2ae40:	888001cc 	andi	r2,r17,7
   2ae44:	10000726 	beq	r2,zero,2ae64 <__adddf3+0xa0>
   2ae48:	888003cc 	andi	r2,r17,15
   2ae4c:	00c00104 	movi	r3,4
   2ae50:	10c00426 	beq	r2,r3,2ae64 <__adddf3+0xa0>
   2ae54:	88c7883a 	add	r3,r17,r3
   2ae58:	1c63803a 	cmpltu	r17,r3,r17
   2ae5c:	4451883a 	add	r8,r8,r17
   2ae60:	1823883a 	mov	r17,r3
   2ae64:	4080202c 	andhi	r2,r8,128
   2ae68:	10005926 	beq	r2,zero,2afd0 <__adddf3+0x20c>
   2ae6c:	84000044 	addi	r16,r16,1
   2ae70:	0081ffc4 	movi	r2,2047
   2ae74:	8080ba26 	beq	r16,r2,2b160 <__adddf3+0x39c>
   2ae78:	00bfe034 	movhi	r2,65408
   2ae7c:	10bfffc4 	addi	r2,r2,-1
   2ae80:	4090703a 	and	r8,r8,r2
   2ae84:	4004977a 	slli	r2,r8,29
   2ae88:	4010927a 	slli	r8,r8,9
   2ae8c:	8822d0fa 	srli	r17,r17,3
   2ae90:	8401ffcc 	andi	r16,r16,2047
   2ae94:	4010d33a 	srli	r8,r8,12
   2ae98:	9007883a 	mov	r3,r18
   2ae9c:	1444b03a 	or	r2,r2,r17
   2aea0:	8401ffcc 	andi	r16,r16,2047
   2aea4:	8020953a 	slli	r16,r16,20
   2aea8:	18c03fcc 	andi	r3,r3,255
   2aeac:	01000434 	movhi	r4,16
   2aeb0:	213fffc4 	addi	r4,r4,-1
   2aeb4:	180697fa 	slli	r3,r3,31
   2aeb8:	4110703a 	and	r8,r8,r4
   2aebc:	4410b03a 	or	r8,r8,r16
   2aec0:	40c6b03a 	or	r3,r8,r3
   2aec4:	dfc00417 	ldw	ra,16(sp)
   2aec8:	dcc00317 	ldw	r19,12(sp)
   2aecc:	dc800217 	ldw	r18,8(sp)
   2aed0:	dc400117 	ldw	r17,4(sp)
   2aed4:	dc000017 	ldw	r16,0(sp)
   2aed8:	dec00504 	addi	sp,sp,20
   2aedc:	f800283a 	ret
   2aee0:	0081ffc4 	movi	r2,2047
   2aee4:	80bfd626 	beq	r16,r2,2ae40 <__alt_data_end+0xfffeae40>
   2aee8:	4a402034 	orhi	r9,r9,128
   2aeec:	00800e04 	movi	r2,56
   2aef0:	10c09f16 	blt	r2,r3,2b170 <__adddf3+0x3ac>
   2aef4:	008007c4 	movi	r2,31
   2aef8:	10c0c216 	blt	r2,r3,2b204 <__adddf3+0x440>
   2aefc:	00800804 	movi	r2,32
   2af00:	10c5c83a 	sub	r2,r2,r3
   2af04:	488a983a 	sll	r5,r9,r2
   2af08:	30c8d83a 	srl	r4,r6,r3
   2af0c:	3084983a 	sll	r2,r6,r2
   2af10:	48c6d83a 	srl	r3,r9,r3
   2af14:	290cb03a 	or	r6,r5,r4
   2af18:	1004c03a 	cmpne	r2,r2,zero
   2af1c:	308cb03a 	or	r6,r6,r2
   2af20:	898dc83a 	sub	r6,r17,r6
   2af24:	89a3803a 	cmpltu	r17,r17,r6
   2af28:	40d1c83a 	sub	r8,r8,r3
   2af2c:	4451c83a 	sub	r8,r8,r17
   2af30:	3023883a 	mov	r17,r6
   2af34:	4080202c 	andhi	r2,r8,128
   2af38:	10002326 	beq	r2,zero,2afc8 <__adddf3+0x204>
   2af3c:	04c02034 	movhi	r19,128
   2af40:	9cffffc4 	addi	r19,r19,-1
   2af44:	44e6703a 	and	r19,r8,r19
   2af48:	98007626 	beq	r19,zero,2b124 <__adddf3+0x360>
   2af4c:	9809883a 	mov	r4,r19
   2af50:	002d6040 	call	2d604 <__clzsi2>
   2af54:	10fffe04 	addi	r3,r2,-8
   2af58:	010007c4 	movi	r4,31
   2af5c:	20c07716 	blt	r4,r3,2b13c <__adddf3+0x378>
   2af60:	00800804 	movi	r2,32
   2af64:	10c5c83a 	sub	r2,r2,r3
   2af68:	8884d83a 	srl	r2,r17,r2
   2af6c:	98d0983a 	sll	r8,r19,r3
   2af70:	88e2983a 	sll	r17,r17,r3
   2af74:	1204b03a 	or	r2,r2,r8
   2af78:	1c007416 	blt	r3,r16,2b14c <__adddf3+0x388>
   2af7c:	1c21c83a 	sub	r16,r3,r16
   2af80:	82000044 	addi	r8,r16,1
   2af84:	00c007c4 	movi	r3,31
   2af88:	1a009116 	blt	r3,r8,2b1d0 <__adddf3+0x40c>
   2af8c:	00c00804 	movi	r3,32
   2af90:	1a07c83a 	sub	r3,r3,r8
   2af94:	8a08d83a 	srl	r4,r17,r8
   2af98:	88e2983a 	sll	r17,r17,r3
   2af9c:	10c6983a 	sll	r3,r2,r3
   2afa0:	1210d83a 	srl	r8,r2,r8
   2afa4:	8804c03a 	cmpne	r2,r17,zero
   2afa8:	1906b03a 	or	r3,r3,r4
   2afac:	18a2b03a 	or	r17,r3,r2
   2afb0:	0021883a 	mov	r16,zero
   2afb4:	003fa206 	br	2ae40 <__alt_data_end+0xfffeae40>
   2afb8:	1890b03a 	or	r8,r3,r2
   2afbc:	40017d26 	beq	r8,zero,2b5b4 <__adddf3+0x7f0>
   2afc0:	1011883a 	mov	r8,r2
   2afc4:	1823883a 	mov	r17,r3
   2afc8:	888001cc 	andi	r2,r17,7
   2afcc:	103f9e1e 	bne	r2,zero,2ae48 <__alt_data_end+0xfffeae48>
   2afd0:	4004977a 	slli	r2,r8,29
   2afd4:	8822d0fa 	srli	r17,r17,3
   2afd8:	4010d0fa 	srli	r8,r8,3
   2afdc:	9007883a 	mov	r3,r18
   2afe0:	1444b03a 	or	r2,r2,r17
   2afe4:	0101ffc4 	movi	r4,2047
   2afe8:	81002426 	beq	r16,r4,2b07c <__adddf3+0x2b8>
   2afec:	8120703a 	and	r16,r16,r4
   2aff0:	01000434 	movhi	r4,16
   2aff4:	213fffc4 	addi	r4,r4,-1
   2aff8:	4110703a 	and	r8,r8,r4
   2affc:	003fa806 	br	2aea0 <__alt_data_end+0xfffeaea0>
   2b000:	8089c83a 	sub	r4,r16,r2
   2b004:	01005e0e 	bge	zero,r4,2b180 <__adddf3+0x3bc>
   2b008:	10002b26 	beq	r2,zero,2b0b8 <__adddf3+0x2f4>
   2b00c:	0081ffc4 	movi	r2,2047
   2b010:	80bf8b26 	beq	r16,r2,2ae40 <__alt_data_end+0xfffeae40>
   2b014:	4a402034 	orhi	r9,r9,128
   2b018:	00800e04 	movi	r2,56
   2b01c:	1100a40e 	bge	r2,r4,2b2b0 <__adddf3+0x4ec>
   2b020:	498cb03a 	or	r6,r9,r6
   2b024:	300ac03a 	cmpne	r5,r6,zero
   2b028:	0013883a 	mov	r9,zero
   2b02c:	2c4b883a 	add	r5,r5,r17
   2b030:	2c63803a 	cmpltu	r17,r5,r17
   2b034:	4a11883a 	add	r8,r9,r8
   2b038:	8a11883a 	add	r8,r17,r8
   2b03c:	2823883a 	mov	r17,r5
   2b040:	4080202c 	andhi	r2,r8,128
   2b044:	103fe026 	beq	r2,zero,2afc8 <__alt_data_end+0xfffeafc8>
   2b048:	84000044 	addi	r16,r16,1
   2b04c:	0081ffc4 	movi	r2,2047
   2b050:	8080d226 	beq	r16,r2,2b39c <__adddf3+0x5d8>
   2b054:	00bfe034 	movhi	r2,65408
   2b058:	10bfffc4 	addi	r2,r2,-1
   2b05c:	4090703a 	and	r8,r8,r2
   2b060:	880ad07a 	srli	r5,r17,1
   2b064:	400897fa 	slli	r4,r8,31
   2b068:	88c0004c 	andi	r3,r17,1
   2b06c:	28e2b03a 	or	r17,r5,r3
   2b070:	4010d07a 	srli	r8,r8,1
   2b074:	2462b03a 	or	r17,r4,r17
   2b078:	003f7106 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b07c:	4088b03a 	or	r4,r8,r2
   2b080:	20014526 	beq	r4,zero,2b598 <__adddf3+0x7d4>
   2b084:	01000434 	movhi	r4,16
   2b088:	42000234 	orhi	r8,r8,8
   2b08c:	213fffc4 	addi	r4,r4,-1
   2b090:	4110703a 	and	r8,r8,r4
   2b094:	003f8206 	br	2aea0 <__alt_data_end+0xfffeaea0>
   2b098:	18ffffc4 	addi	r3,r3,-1
   2b09c:	1800491e 	bne	r3,zero,2b1c4 <__adddf3+0x400>
   2b0a0:	898bc83a 	sub	r5,r17,r6
   2b0a4:	8963803a 	cmpltu	r17,r17,r5
   2b0a8:	4251c83a 	sub	r8,r8,r9
   2b0ac:	4451c83a 	sub	r8,r8,r17
   2b0b0:	2823883a 	mov	r17,r5
   2b0b4:	003f9f06 	br	2af34 <__alt_data_end+0xfffeaf34>
   2b0b8:	4984b03a 	or	r2,r9,r6
   2b0bc:	103f6026 	beq	r2,zero,2ae40 <__alt_data_end+0xfffeae40>
   2b0c0:	213fffc4 	addi	r4,r4,-1
   2b0c4:	2000931e 	bne	r4,zero,2b314 <__adddf3+0x550>
   2b0c8:	898d883a 	add	r6,r17,r6
   2b0cc:	3463803a 	cmpltu	r17,r6,r17
   2b0d0:	4251883a 	add	r8,r8,r9
   2b0d4:	8a11883a 	add	r8,r17,r8
   2b0d8:	3023883a 	mov	r17,r6
   2b0dc:	003fd806 	br	2b040 <__alt_data_end+0xfffeb040>
   2b0e0:	1800541e 	bne	r3,zero,2b234 <__adddf3+0x470>
   2b0e4:	80800044 	addi	r2,r16,1
   2b0e8:	1081ffcc 	andi	r2,r2,2047
   2b0ec:	00c00044 	movi	r3,1
   2b0f0:	1880a00e 	bge	r3,r2,2b374 <__adddf3+0x5b0>
   2b0f4:	8989c83a 	sub	r4,r17,r6
   2b0f8:	8905803a 	cmpltu	r2,r17,r4
   2b0fc:	4267c83a 	sub	r19,r8,r9
   2b100:	98a7c83a 	sub	r19,r19,r2
   2b104:	9880202c 	andhi	r2,r19,128
   2b108:	10006326 	beq	r2,zero,2b298 <__adddf3+0x4d4>
   2b10c:	3463c83a 	sub	r17,r6,r17
   2b110:	4a07c83a 	sub	r3,r9,r8
   2b114:	344d803a 	cmpltu	r6,r6,r17
   2b118:	19a7c83a 	sub	r19,r3,r6
   2b11c:	3825883a 	mov	r18,r7
   2b120:	983f8a1e 	bne	r19,zero,2af4c <__alt_data_end+0xfffeaf4c>
   2b124:	8809883a 	mov	r4,r17
   2b128:	002d6040 	call	2d604 <__clzsi2>
   2b12c:	10800804 	addi	r2,r2,32
   2b130:	10fffe04 	addi	r3,r2,-8
   2b134:	010007c4 	movi	r4,31
   2b138:	20ff890e 	bge	r4,r3,2af60 <__alt_data_end+0xfffeaf60>
   2b13c:	10bff604 	addi	r2,r2,-40
   2b140:	8884983a 	sll	r2,r17,r2
   2b144:	0023883a 	mov	r17,zero
   2b148:	1c3f8c0e 	bge	r3,r16,2af7c <__alt_data_end+0xfffeaf7c>
   2b14c:	023fe034 	movhi	r8,65408
   2b150:	423fffc4 	addi	r8,r8,-1
   2b154:	80e1c83a 	sub	r16,r16,r3
   2b158:	1210703a 	and	r8,r2,r8
   2b15c:	003f3806 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b160:	9007883a 	mov	r3,r18
   2b164:	0011883a 	mov	r8,zero
   2b168:	0005883a 	mov	r2,zero
   2b16c:	003f4c06 	br	2aea0 <__alt_data_end+0xfffeaea0>
   2b170:	498cb03a 	or	r6,r9,r6
   2b174:	300cc03a 	cmpne	r6,r6,zero
   2b178:	0007883a 	mov	r3,zero
   2b17c:	003f6806 	br	2af20 <__alt_data_end+0xfffeaf20>
   2b180:	20009c1e 	bne	r4,zero,2b3f4 <__adddf3+0x630>
   2b184:	80800044 	addi	r2,r16,1
   2b188:	1141ffcc 	andi	r5,r2,2047
   2b18c:	01000044 	movi	r4,1
   2b190:	2140670e 	bge	r4,r5,2b330 <__adddf3+0x56c>
   2b194:	0101ffc4 	movi	r4,2047
   2b198:	11007f26 	beq	r2,r4,2b398 <__adddf3+0x5d4>
   2b19c:	898d883a 	add	r6,r17,r6
   2b1a0:	4247883a 	add	r3,r8,r9
   2b1a4:	3451803a 	cmpltu	r8,r6,r17
   2b1a8:	40d1883a 	add	r8,r8,r3
   2b1ac:	402297fa 	slli	r17,r8,31
   2b1b0:	300cd07a 	srli	r6,r6,1
   2b1b4:	4010d07a 	srli	r8,r8,1
   2b1b8:	1021883a 	mov	r16,r2
   2b1bc:	89a2b03a 	or	r17,r17,r6
   2b1c0:	003f1f06 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b1c4:	0081ffc4 	movi	r2,2047
   2b1c8:	80bf481e 	bne	r16,r2,2aeec <__alt_data_end+0xfffeaeec>
   2b1cc:	003f1c06 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b1d0:	843ff844 	addi	r16,r16,-31
   2b1d4:	01000804 	movi	r4,32
   2b1d8:	1406d83a 	srl	r3,r2,r16
   2b1dc:	41005026 	beq	r8,r4,2b320 <__adddf3+0x55c>
   2b1e0:	01001004 	movi	r4,64
   2b1e4:	2211c83a 	sub	r8,r4,r8
   2b1e8:	1204983a 	sll	r2,r2,r8
   2b1ec:	88a2b03a 	or	r17,r17,r2
   2b1f0:	8822c03a 	cmpne	r17,r17,zero
   2b1f4:	1c62b03a 	or	r17,r3,r17
   2b1f8:	0011883a 	mov	r8,zero
   2b1fc:	0021883a 	mov	r16,zero
   2b200:	003f7106 	br	2afc8 <__alt_data_end+0xfffeafc8>
   2b204:	193ff804 	addi	r4,r3,-32
   2b208:	00800804 	movi	r2,32
   2b20c:	4908d83a 	srl	r4,r9,r4
   2b210:	18804526 	beq	r3,r2,2b328 <__adddf3+0x564>
   2b214:	00801004 	movi	r2,64
   2b218:	10c5c83a 	sub	r2,r2,r3
   2b21c:	4886983a 	sll	r3,r9,r2
   2b220:	198cb03a 	or	r6,r3,r6
   2b224:	300cc03a 	cmpne	r6,r6,zero
   2b228:	218cb03a 	or	r6,r4,r6
   2b22c:	0007883a 	mov	r3,zero
   2b230:	003f3b06 	br	2af20 <__alt_data_end+0xfffeaf20>
   2b234:	80002a26 	beq	r16,zero,2b2e0 <__adddf3+0x51c>
   2b238:	0101ffc4 	movi	r4,2047
   2b23c:	11006826 	beq	r2,r4,2b3e0 <__adddf3+0x61c>
   2b240:	00c7c83a 	sub	r3,zero,r3
   2b244:	42002034 	orhi	r8,r8,128
   2b248:	01000e04 	movi	r4,56
   2b24c:	20c07c16 	blt	r4,r3,2b440 <__adddf3+0x67c>
   2b250:	010007c4 	movi	r4,31
   2b254:	20c0da16 	blt	r4,r3,2b5c0 <__adddf3+0x7fc>
   2b258:	01000804 	movi	r4,32
   2b25c:	20c9c83a 	sub	r4,r4,r3
   2b260:	4114983a 	sll	r10,r8,r4
   2b264:	88cad83a 	srl	r5,r17,r3
   2b268:	8908983a 	sll	r4,r17,r4
   2b26c:	40c6d83a 	srl	r3,r8,r3
   2b270:	5162b03a 	or	r17,r10,r5
   2b274:	2008c03a 	cmpne	r4,r4,zero
   2b278:	8922b03a 	or	r17,r17,r4
   2b27c:	3463c83a 	sub	r17,r6,r17
   2b280:	48c7c83a 	sub	r3,r9,r3
   2b284:	344d803a 	cmpltu	r6,r6,r17
   2b288:	1991c83a 	sub	r8,r3,r6
   2b28c:	1021883a 	mov	r16,r2
   2b290:	3825883a 	mov	r18,r7
   2b294:	003f2706 	br	2af34 <__alt_data_end+0xfffeaf34>
   2b298:	24d0b03a 	or	r8,r4,r19
   2b29c:	40001b1e 	bne	r8,zero,2b30c <__adddf3+0x548>
   2b2a0:	0005883a 	mov	r2,zero
   2b2a4:	0007883a 	mov	r3,zero
   2b2a8:	0021883a 	mov	r16,zero
   2b2ac:	003f4d06 	br	2afe4 <__alt_data_end+0xfffeafe4>
   2b2b0:	008007c4 	movi	r2,31
   2b2b4:	11003c16 	blt	r2,r4,2b3a8 <__adddf3+0x5e4>
   2b2b8:	00800804 	movi	r2,32
   2b2bc:	1105c83a 	sub	r2,r2,r4
   2b2c0:	488e983a 	sll	r7,r9,r2
   2b2c4:	310ad83a 	srl	r5,r6,r4
   2b2c8:	3084983a 	sll	r2,r6,r2
   2b2cc:	4912d83a 	srl	r9,r9,r4
   2b2d0:	394ab03a 	or	r5,r7,r5
   2b2d4:	1004c03a 	cmpne	r2,r2,zero
   2b2d8:	288ab03a 	or	r5,r5,r2
   2b2dc:	003f5306 	br	2b02c <__alt_data_end+0xfffeb02c>
   2b2e0:	4448b03a 	or	r4,r8,r17
   2b2e4:	20003e26 	beq	r4,zero,2b3e0 <__adddf3+0x61c>
   2b2e8:	00c6303a 	nor	r3,zero,r3
   2b2ec:	18003a1e 	bne	r3,zero,2b3d8 <__adddf3+0x614>
   2b2f0:	3463c83a 	sub	r17,r6,r17
   2b2f4:	4a07c83a 	sub	r3,r9,r8
   2b2f8:	344d803a 	cmpltu	r6,r6,r17
   2b2fc:	1991c83a 	sub	r8,r3,r6
   2b300:	1021883a 	mov	r16,r2
   2b304:	3825883a 	mov	r18,r7
   2b308:	003f0a06 	br	2af34 <__alt_data_end+0xfffeaf34>
   2b30c:	2023883a 	mov	r17,r4
   2b310:	003f0d06 	br	2af48 <__alt_data_end+0xfffeaf48>
   2b314:	0081ffc4 	movi	r2,2047
   2b318:	80bf3f1e 	bne	r16,r2,2b018 <__alt_data_end+0xfffeb018>
   2b31c:	003ec806 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b320:	0005883a 	mov	r2,zero
   2b324:	003fb106 	br	2b1ec <__alt_data_end+0xfffeb1ec>
   2b328:	0007883a 	mov	r3,zero
   2b32c:	003fbc06 	br	2b220 <__alt_data_end+0xfffeb220>
   2b330:	4444b03a 	or	r2,r8,r17
   2b334:	8000871e 	bne	r16,zero,2b554 <__adddf3+0x790>
   2b338:	1000ba26 	beq	r2,zero,2b624 <__adddf3+0x860>
   2b33c:	4984b03a 	or	r2,r9,r6
   2b340:	103ebf26 	beq	r2,zero,2ae40 <__alt_data_end+0xfffeae40>
   2b344:	8985883a 	add	r2,r17,r6
   2b348:	4247883a 	add	r3,r8,r9
   2b34c:	1451803a 	cmpltu	r8,r2,r17
   2b350:	40d1883a 	add	r8,r8,r3
   2b354:	40c0202c 	andhi	r3,r8,128
   2b358:	1023883a 	mov	r17,r2
   2b35c:	183f1a26 	beq	r3,zero,2afc8 <__alt_data_end+0xfffeafc8>
   2b360:	00bfe034 	movhi	r2,65408
   2b364:	10bfffc4 	addi	r2,r2,-1
   2b368:	2021883a 	mov	r16,r4
   2b36c:	4090703a 	and	r8,r8,r2
   2b370:	003eb306 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b374:	4444b03a 	or	r2,r8,r17
   2b378:	8000291e 	bne	r16,zero,2b420 <__adddf3+0x65c>
   2b37c:	10004b1e 	bne	r2,zero,2b4ac <__adddf3+0x6e8>
   2b380:	4990b03a 	or	r8,r9,r6
   2b384:	40008b26 	beq	r8,zero,2b5b4 <__adddf3+0x7f0>
   2b388:	4811883a 	mov	r8,r9
   2b38c:	3023883a 	mov	r17,r6
   2b390:	3825883a 	mov	r18,r7
   2b394:	003eaa06 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b398:	1021883a 	mov	r16,r2
   2b39c:	0011883a 	mov	r8,zero
   2b3a0:	0005883a 	mov	r2,zero
   2b3a4:	003f0f06 	br	2afe4 <__alt_data_end+0xfffeafe4>
   2b3a8:	217ff804 	addi	r5,r4,-32
   2b3ac:	00800804 	movi	r2,32
   2b3b0:	494ad83a 	srl	r5,r9,r5
   2b3b4:	20807d26 	beq	r4,r2,2b5ac <__adddf3+0x7e8>
   2b3b8:	00801004 	movi	r2,64
   2b3bc:	1109c83a 	sub	r4,r2,r4
   2b3c0:	4912983a 	sll	r9,r9,r4
   2b3c4:	498cb03a 	or	r6,r9,r6
   2b3c8:	300cc03a 	cmpne	r6,r6,zero
   2b3cc:	298ab03a 	or	r5,r5,r6
   2b3d0:	0013883a 	mov	r9,zero
   2b3d4:	003f1506 	br	2b02c <__alt_data_end+0xfffeb02c>
   2b3d8:	0101ffc4 	movi	r4,2047
   2b3dc:	113f9a1e 	bne	r2,r4,2b248 <__alt_data_end+0xfffeb248>
   2b3e0:	4811883a 	mov	r8,r9
   2b3e4:	3023883a 	mov	r17,r6
   2b3e8:	1021883a 	mov	r16,r2
   2b3ec:	3825883a 	mov	r18,r7
   2b3f0:	003e9306 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b3f4:	8000161e 	bne	r16,zero,2b450 <__adddf3+0x68c>
   2b3f8:	444ab03a 	or	r5,r8,r17
   2b3fc:	28005126 	beq	r5,zero,2b544 <__adddf3+0x780>
   2b400:	0108303a 	nor	r4,zero,r4
   2b404:	20004d1e 	bne	r4,zero,2b53c <__adddf3+0x778>
   2b408:	89a3883a 	add	r17,r17,r6
   2b40c:	4253883a 	add	r9,r8,r9
   2b410:	898d803a 	cmpltu	r6,r17,r6
   2b414:	3251883a 	add	r8,r6,r9
   2b418:	1021883a 	mov	r16,r2
   2b41c:	003f0806 	br	2b040 <__alt_data_end+0xfffeb040>
   2b420:	1000301e 	bne	r2,zero,2b4e4 <__adddf3+0x720>
   2b424:	4984b03a 	or	r2,r9,r6
   2b428:	10007126 	beq	r2,zero,2b5f0 <__adddf3+0x82c>
   2b42c:	4811883a 	mov	r8,r9
   2b430:	3023883a 	mov	r17,r6
   2b434:	3825883a 	mov	r18,r7
   2b438:	0401ffc4 	movi	r16,2047
   2b43c:	003e8006 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b440:	4462b03a 	or	r17,r8,r17
   2b444:	8822c03a 	cmpne	r17,r17,zero
   2b448:	0007883a 	mov	r3,zero
   2b44c:	003f8b06 	br	2b27c <__alt_data_end+0xfffeb27c>
   2b450:	0141ffc4 	movi	r5,2047
   2b454:	11403b26 	beq	r2,r5,2b544 <__adddf3+0x780>
   2b458:	0109c83a 	sub	r4,zero,r4
   2b45c:	42002034 	orhi	r8,r8,128
   2b460:	01400e04 	movi	r5,56
   2b464:	29006716 	blt	r5,r4,2b604 <__adddf3+0x840>
   2b468:	014007c4 	movi	r5,31
   2b46c:	29007016 	blt	r5,r4,2b630 <__adddf3+0x86c>
   2b470:	01400804 	movi	r5,32
   2b474:	290bc83a 	sub	r5,r5,r4
   2b478:	4154983a 	sll	r10,r8,r5
   2b47c:	890ed83a 	srl	r7,r17,r4
   2b480:	894a983a 	sll	r5,r17,r5
   2b484:	4108d83a 	srl	r4,r8,r4
   2b488:	51e2b03a 	or	r17,r10,r7
   2b48c:	280ac03a 	cmpne	r5,r5,zero
   2b490:	8962b03a 	or	r17,r17,r5
   2b494:	89a3883a 	add	r17,r17,r6
   2b498:	2253883a 	add	r9,r4,r9
   2b49c:	898d803a 	cmpltu	r6,r17,r6
   2b4a0:	3251883a 	add	r8,r6,r9
   2b4a4:	1021883a 	mov	r16,r2
   2b4a8:	003ee506 	br	2b040 <__alt_data_end+0xfffeb040>
   2b4ac:	4984b03a 	or	r2,r9,r6
   2b4b0:	103e6326 	beq	r2,zero,2ae40 <__alt_data_end+0xfffeae40>
   2b4b4:	8987c83a 	sub	r3,r17,r6
   2b4b8:	88c9803a 	cmpltu	r4,r17,r3
   2b4bc:	4245c83a 	sub	r2,r8,r9
   2b4c0:	1105c83a 	sub	r2,r2,r4
   2b4c4:	1100202c 	andhi	r4,r2,128
   2b4c8:	203ebb26 	beq	r4,zero,2afb8 <__alt_data_end+0xfffeafb8>
   2b4cc:	3463c83a 	sub	r17,r6,r17
   2b4d0:	4a07c83a 	sub	r3,r9,r8
   2b4d4:	344d803a 	cmpltu	r6,r6,r17
   2b4d8:	1991c83a 	sub	r8,r3,r6
   2b4dc:	3825883a 	mov	r18,r7
   2b4e0:	003e5706 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b4e4:	4984b03a 	or	r2,r9,r6
   2b4e8:	10002e26 	beq	r2,zero,2b5a4 <__adddf3+0x7e0>
   2b4ec:	4004d0fa 	srli	r2,r8,3
   2b4f0:	8822d0fa 	srli	r17,r17,3
   2b4f4:	4010977a 	slli	r8,r8,29
   2b4f8:	10c0022c 	andhi	r3,r2,8
   2b4fc:	4462b03a 	or	r17,r8,r17
   2b500:	18000826 	beq	r3,zero,2b524 <__adddf3+0x760>
   2b504:	4808d0fa 	srli	r4,r9,3
   2b508:	20c0022c 	andhi	r3,r4,8
   2b50c:	1800051e 	bne	r3,zero,2b524 <__adddf3+0x760>
   2b510:	300cd0fa 	srli	r6,r6,3
   2b514:	4806977a 	slli	r3,r9,29
   2b518:	2005883a 	mov	r2,r4
   2b51c:	3825883a 	mov	r18,r7
   2b520:	19a2b03a 	or	r17,r3,r6
   2b524:	8810d77a 	srli	r8,r17,29
   2b528:	100490fa 	slli	r2,r2,3
   2b52c:	882290fa 	slli	r17,r17,3
   2b530:	0401ffc4 	movi	r16,2047
   2b534:	4090b03a 	or	r8,r8,r2
   2b538:	003e4106 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b53c:	0141ffc4 	movi	r5,2047
   2b540:	117fc71e 	bne	r2,r5,2b460 <__alt_data_end+0xfffeb460>
   2b544:	4811883a 	mov	r8,r9
   2b548:	3023883a 	mov	r17,r6
   2b54c:	1021883a 	mov	r16,r2
   2b550:	003e3b06 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b554:	10002f26 	beq	r2,zero,2b614 <__adddf3+0x850>
   2b558:	4984b03a 	or	r2,r9,r6
   2b55c:	10001126 	beq	r2,zero,2b5a4 <__adddf3+0x7e0>
   2b560:	4004d0fa 	srli	r2,r8,3
   2b564:	8822d0fa 	srli	r17,r17,3
   2b568:	4010977a 	slli	r8,r8,29
   2b56c:	10c0022c 	andhi	r3,r2,8
   2b570:	4462b03a 	or	r17,r8,r17
   2b574:	183feb26 	beq	r3,zero,2b524 <__alt_data_end+0xfffeb524>
   2b578:	4808d0fa 	srli	r4,r9,3
   2b57c:	20c0022c 	andhi	r3,r4,8
   2b580:	183fe81e 	bne	r3,zero,2b524 <__alt_data_end+0xfffeb524>
   2b584:	300cd0fa 	srli	r6,r6,3
   2b588:	4806977a 	slli	r3,r9,29
   2b58c:	2005883a 	mov	r2,r4
   2b590:	19a2b03a 	or	r17,r3,r6
   2b594:	003fe306 	br	2b524 <__alt_data_end+0xfffeb524>
   2b598:	0011883a 	mov	r8,zero
   2b59c:	0005883a 	mov	r2,zero
   2b5a0:	003e3f06 	br	2aea0 <__alt_data_end+0xfffeaea0>
   2b5a4:	0401ffc4 	movi	r16,2047
   2b5a8:	003e2506 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b5ac:	0013883a 	mov	r9,zero
   2b5b0:	003f8406 	br	2b3c4 <__alt_data_end+0xfffeb3c4>
   2b5b4:	0005883a 	mov	r2,zero
   2b5b8:	0007883a 	mov	r3,zero
   2b5bc:	003e8906 	br	2afe4 <__alt_data_end+0xfffeafe4>
   2b5c0:	197ff804 	addi	r5,r3,-32
   2b5c4:	01000804 	movi	r4,32
   2b5c8:	414ad83a 	srl	r5,r8,r5
   2b5cc:	19002426 	beq	r3,r4,2b660 <__adddf3+0x89c>
   2b5d0:	01001004 	movi	r4,64
   2b5d4:	20c7c83a 	sub	r3,r4,r3
   2b5d8:	40c6983a 	sll	r3,r8,r3
   2b5dc:	1c46b03a 	or	r3,r3,r17
   2b5e0:	1806c03a 	cmpne	r3,r3,zero
   2b5e4:	28e2b03a 	or	r17,r5,r3
   2b5e8:	0007883a 	mov	r3,zero
   2b5ec:	003f2306 	br	2b27c <__alt_data_end+0xfffeb27c>
   2b5f0:	0007883a 	mov	r3,zero
   2b5f4:	5811883a 	mov	r8,r11
   2b5f8:	00bfffc4 	movi	r2,-1
   2b5fc:	0401ffc4 	movi	r16,2047
   2b600:	003e7806 	br	2afe4 <__alt_data_end+0xfffeafe4>
   2b604:	4462b03a 	or	r17,r8,r17
   2b608:	8822c03a 	cmpne	r17,r17,zero
   2b60c:	0009883a 	mov	r4,zero
   2b610:	003fa006 	br	2b494 <__alt_data_end+0xfffeb494>
   2b614:	4811883a 	mov	r8,r9
   2b618:	3023883a 	mov	r17,r6
   2b61c:	0401ffc4 	movi	r16,2047
   2b620:	003e0706 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b624:	4811883a 	mov	r8,r9
   2b628:	3023883a 	mov	r17,r6
   2b62c:	003e0406 	br	2ae40 <__alt_data_end+0xfffeae40>
   2b630:	21fff804 	addi	r7,r4,-32
   2b634:	01400804 	movi	r5,32
   2b638:	41ced83a 	srl	r7,r8,r7
   2b63c:	21400a26 	beq	r4,r5,2b668 <__adddf3+0x8a4>
   2b640:	01401004 	movi	r5,64
   2b644:	2909c83a 	sub	r4,r5,r4
   2b648:	4108983a 	sll	r4,r8,r4
   2b64c:	2448b03a 	or	r4,r4,r17
   2b650:	2008c03a 	cmpne	r4,r4,zero
   2b654:	3922b03a 	or	r17,r7,r4
   2b658:	0009883a 	mov	r4,zero
   2b65c:	003f8d06 	br	2b494 <__alt_data_end+0xfffeb494>
   2b660:	0007883a 	mov	r3,zero
   2b664:	003fdd06 	br	2b5dc <__alt_data_end+0xfffeb5dc>
   2b668:	0009883a 	mov	r4,zero
   2b66c:	003ff706 	br	2b64c <__alt_data_end+0xfffeb64c>

0002b670 <__divdf3>:
   2b670:	defff004 	addi	sp,sp,-64
   2b674:	dc800815 	stw	r18,32(sp)
   2b678:	2824d53a 	srli	r18,r5,20
   2b67c:	dd800c15 	stw	r22,48(sp)
   2b680:	282cd7fa 	srli	r22,r5,31
   2b684:	dc000615 	stw	r16,24(sp)
   2b688:	04000434 	movhi	r16,16
   2b68c:	843fffc4 	addi	r16,r16,-1
   2b690:	dfc00f15 	stw	ra,60(sp)
   2b694:	df000e15 	stw	fp,56(sp)
   2b698:	ddc00d15 	stw	r23,52(sp)
   2b69c:	dd400b15 	stw	r21,44(sp)
   2b6a0:	dd000a15 	stw	r20,40(sp)
   2b6a4:	dcc00915 	stw	r19,36(sp)
   2b6a8:	dc400715 	stw	r17,28(sp)
   2b6ac:	9481ffcc 	andi	r18,r18,2047
   2b6b0:	2c20703a 	and	r16,r5,r16
   2b6b4:	b2003fcc 	andi	r8,r22,255
   2b6b8:	90006126 	beq	r18,zero,2b840 <__divdf3+0x1d0>
   2b6bc:	0081ffc4 	movi	r2,2047
   2b6c0:	202b883a 	mov	r21,r4
   2b6c4:	90803726 	beq	r18,r2,2b7a4 <__divdf3+0x134>
   2b6c8:	80800434 	orhi	r2,r16,16
   2b6cc:	100490fa 	slli	r2,r2,3
   2b6d0:	2020d77a 	srli	r16,r4,29
   2b6d4:	202a90fa 	slli	r21,r4,3
   2b6d8:	94bf0044 	addi	r18,r18,-1023
   2b6dc:	80a0b03a 	or	r16,r16,r2
   2b6e0:	0013883a 	mov	r9,zero
   2b6e4:	000b883a 	mov	r5,zero
   2b6e8:	3806d53a 	srli	r3,r7,20
   2b6ec:	382ed7fa 	srli	r23,r7,31
   2b6f0:	04400434 	movhi	r17,16
   2b6f4:	8c7fffc4 	addi	r17,r17,-1
   2b6f8:	18c1ffcc 	andi	r3,r3,2047
   2b6fc:	3029883a 	mov	r20,r6
   2b700:	3c62703a 	and	r17,r7,r17
   2b704:	bf003fcc 	andi	fp,r23,255
   2b708:	18006e26 	beq	r3,zero,2b8c4 <__divdf3+0x254>
   2b70c:	0081ffc4 	movi	r2,2047
   2b710:	18806626 	beq	r3,r2,2b8ac <__divdf3+0x23c>
   2b714:	88800434 	orhi	r2,r17,16
   2b718:	100490fa 	slli	r2,r2,3
   2b71c:	3022d77a 	srli	r17,r6,29
   2b720:	302890fa 	slli	r20,r6,3
   2b724:	18ff0044 	addi	r3,r3,-1023
   2b728:	88a2b03a 	or	r17,r17,r2
   2b72c:	000f883a 	mov	r7,zero
   2b730:	b5e6f03a 	xor	r19,r22,r23
   2b734:	3a4cb03a 	or	r6,r7,r9
   2b738:	008003c4 	movi	r2,15
   2b73c:	9809883a 	mov	r4,r19
   2b740:	90c7c83a 	sub	r3,r18,r3
   2b744:	9cc03fcc 	andi	r19,r19,255
   2b748:	11809636 	bltu	r2,r6,2b9a4 <__divdf3+0x334>
   2b74c:	300c90ba 	slli	r6,r6,2
   2b750:	008000f4 	movhi	r2,3
   2b754:	10add904 	addi	r2,r2,-18588
   2b758:	308d883a 	add	r6,r6,r2
   2b75c:	30800017 	ldw	r2,0(r6)
   2b760:	1000683a 	jmp	r2
   2b764:	0002b9a4 	muli	zero,zero,2790
   2b768:	0002b7dc 	xori	zero,zero,2783
   2b76c:	0002b994 	movui	zero,2790
   2b770:	0002b7d0 	cmplti	zero,zero,2783
   2b774:	0002b994 	movui	zero,2790
   2b778:	0002b968 	cmpgeui	zero,zero,2789
   2b77c:	0002b994 	movui	zero,2790
   2b780:	0002b7d0 	cmplti	zero,zero,2783
   2b784:	0002b7dc 	xori	zero,zero,2783
   2b788:	0002b7dc 	xori	zero,zero,2783
   2b78c:	0002b968 	cmpgeui	zero,zero,2789
   2b790:	0002b7d0 	cmplti	zero,zero,2783
   2b794:	0002b7c0 	call	2b7c <__reset-0x1d484>
   2b798:	0002b7c0 	call	2b7c <__reset-0x1d484>
   2b79c:	0002b7c0 	call	2b7c <__reset-0x1d484>
   2b7a0:	0002bd2c 	andhi	zero,zero,2804
   2b7a4:	2404b03a 	or	r2,r4,r16
   2b7a8:	10006c1e 	bne	r2,zero,2b95c <__divdf3+0x2ec>
   2b7ac:	02400204 	movi	r9,8
   2b7b0:	0021883a 	mov	r16,zero
   2b7b4:	002b883a 	mov	r21,zero
   2b7b8:	01400084 	movi	r5,2
   2b7bc:	003fca06 	br	2b6e8 <__alt_data_end+0xfffeb6e8>
   2b7c0:	8023883a 	mov	r17,r16
   2b7c4:	a829883a 	mov	r20,r21
   2b7c8:	4039883a 	mov	fp,r8
   2b7cc:	280f883a 	mov	r7,r5
   2b7d0:	00800084 	movi	r2,2
   2b7d4:	3881601e 	bne	r7,r2,2bd58 <__divdf3+0x6e8>
   2b7d8:	e027883a 	mov	r19,fp
   2b7dc:	9900004c 	andi	r4,r19,1
   2b7e0:	0081ffc4 	movi	r2,2047
   2b7e4:	0021883a 	mov	r16,zero
   2b7e8:	002b883a 	mov	r21,zero
   2b7ec:	1004953a 	slli	r2,r2,20
   2b7f0:	20c03fcc 	andi	r3,r4,255
   2b7f4:	01400434 	movhi	r5,16
   2b7f8:	297fffc4 	addi	r5,r5,-1
   2b7fc:	180697fa 	slli	r3,r3,31
   2b800:	8160703a 	and	r16,r16,r5
   2b804:	80a0b03a 	or	r16,r16,r2
   2b808:	80c6b03a 	or	r3,r16,r3
   2b80c:	a805883a 	mov	r2,r21
   2b810:	dfc00f17 	ldw	ra,60(sp)
   2b814:	df000e17 	ldw	fp,56(sp)
   2b818:	ddc00d17 	ldw	r23,52(sp)
   2b81c:	dd800c17 	ldw	r22,48(sp)
   2b820:	dd400b17 	ldw	r21,44(sp)
   2b824:	dd000a17 	ldw	r20,40(sp)
   2b828:	dcc00917 	ldw	r19,36(sp)
   2b82c:	dc800817 	ldw	r18,32(sp)
   2b830:	dc400717 	ldw	r17,28(sp)
   2b834:	dc000617 	ldw	r16,24(sp)
   2b838:	dec01004 	addi	sp,sp,64
   2b83c:	f800283a 	ret
   2b840:	2404b03a 	or	r2,r4,r16
   2b844:	2023883a 	mov	r17,r4
   2b848:	10003f26 	beq	r2,zero,2b948 <__divdf3+0x2d8>
   2b84c:	80015e26 	beq	r16,zero,2bdc8 <__divdf3+0x758>
   2b850:	8009883a 	mov	r4,r16
   2b854:	d9800215 	stw	r6,8(sp)
   2b858:	d9c00515 	stw	r7,20(sp)
   2b85c:	da000415 	stw	r8,16(sp)
   2b860:	002d6040 	call	2d604 <__clzsi2>
   2b864:	d9800217 	ldw	r6,8(sp)
   2b868:	d9c00517 	ldw	r7,20(sp)
   2b86c:	da000417 	ldw	r8,16(sp)
   2b870:	113ffd44 	addi	r4,r2,-11
   2b874:	00c00704 	movi	r3,28
   2b878:	19014f16 	blt	r3,r4,2bdb8 <__divdf3+0x748>
   2b87c:	00c00744 	movi	r3,29
   2b880:	157ffe04 	addi	r21,r2,-8
   2b884:	1907c83a 	sub	r3,r3,r4
   2b888:	8560983a 	sll	r16,r16,r21
   2b88c:	88c6d83a 	srl	r3,r17,r3
   2b890:	8d6a983a 	sll	r21,r17,r21
   2b894:	1c20b03a 	or	r16,r3,r16
   2b898:	1080fcc4 	addi	r2,r2,1011
   2b89c:	00a5c83a 	sub	r18,zero,r2
   2b8a0:	0013883a 	mov	r9,zero
   2b8a4:	000b883a 	mov	r5,zero
   2b8a8:	003f8f06 	br	2b6e8 <__alt_data_end+0xfffeb6e8>
   2b8ac:	3444b03a 	or	r2,r6,r17
   2b8b0:	1000231e 	bne	r2,zero,2b940 <__divdf3+0x2d0>
   2b8b4:	0023883a 	mov	r17,zero
   2b8b8:	0029883a 	mov	r20,zero
   2b8bc:	01c00084 	movi	r7,2
   2b8c0:	003f9b06 	br	2b730 <__alt_data_end+0xfffeb730>
   2b8c4:	3444b03a 	or	r2,r6,r17
   2b8c8:	10001926 	beq	r2,zero,2b930 <__divdf3+0x2c0>
   2b8cc:	88014b26 	beq	r17,zero,2bdfc <__divdf3+0x78c>
   2b8d0:	8809883a 	mov	r4,r17
   2b8d4:	d9400115 	stw	r5,4(sp)
   2b8d8:	d9800215 	stw	r6,8(sp)
   2b8dc:	da000415 	stw	r8,16(sp)
   2b8e0:	da400315 	stw	r9,12(sp)
   2b8e4:	002d6040 	call	2d604 <__clzsi2>
   2b8e8:	d9400117 	ldw	r5,4(sp)
   2b8ec:	d9800217 	ldw	r6,8(sp)
   2b8f0:	da000417 	ldw	r8,16(sp)
   2b8f4:	da400317 	ldw	r9,12(sp)
   2b8f8:	113ffd44 	addi	r4,r2,-11
   2b8fc:	00c00704 	movi	r3,28
   2b900:	19013a16 	blt	r3,r4,2bdec <__divdf3+0x77c>
   2b904:	00c00744 	movi	r3,29
   2b908:	153ffe04 	addi	r20,r2,-8
   2b90c:	1907c83a 	sub	r3,r3,r4
   2b910:	8d22983a 	sll	r17,r17,r20
   2b914:	30c6d83a 	srl	r3,r6,r3
   2b918:	3528983a 	sll	r20,r6,r20
   2b91c:	1c62b03a 	or	r17,r3,r17
   2b920:	1080fcc4 	addi	r2,r2,1011
   2b924:	0087c83a 	sub	r3,zero,r2
   2b928:	000f883a 	mov	r7,zero
   2b92c:	003f8006 	br	2b730 <__alt_data_end+0xfffeb730>
   2b930:	0023883a 	mov	r17,zero
   2b934:	0029883a 	mov	r20,zero
   2b938:	01c00044 	movi	r7,1
   2b93c:	003f7c06 	br	2b730 <__alt_data_end+0xfffeb730>
   2b940:	01c000c4 	movi	r7,3
   2b944:	003f7a06 	br	2b730 <__alt_data_end+0xfffeb730>
   2b948:	02400104 	movi	r9,4
   2b94c:	0021883a 	mov	r16,zero
   2b950:	002b883a 	mov	r21,zero
   2b954:	01400044 	movi	r5,1
   2b958:	003f6306 	br	2b6e8 <__alt_data_end+0xfffeb6e8>
   2b95c:	02400304 	movi	r9,12
   2b960:	014000c4 	movi	r5,3
   2b964:	003f6006 	br	2b6e8 <__alt_data_end+0xfffeb6e8>
   2b968:	04000434 	movhi	r16,16
   2b96c:	0009883a 	mov	r4,zero
   2b970:	843fffc4 	addi	r16,r16,-1
   2b974:	057fffc4 	movi	r21,-1
   2b978:	0081ffc4 	movi	r2,2047
   2b97c:	003f9b06 	br	2b7ec <__alt_data_end+0xfffeb7ec>
   2b980:	00c00044 	movi	r3,1
   2b984:	1887c83a 	sub	r3,r3,r2
   2b988:	01000e04 	movi	r4,56
   2b98c:	20c1530e 	bge	r4,r3,2bedc <__divdf3+0x86c>
   2b990:	9900004c 	andi	r4,r19,1
   2b994:	0005883a 	mov	r2,zero
   2b998:	0021883a 	mov	r16,zero
   2b99c:	002b883a 	mov	r21,zero
   2b9a0:	003f9206 	br	2b7ec <__alt_data_end+0xfffeb7ec>
   2b9a4:	8c012e36 	bltu	r17,r16,2be60 <__divdf3+0x7f0>
   2b9a8:	84412c26 	beq	r16,r17,2be5c <__divdf3+0x7ec>
   2b9ac:	a82f883a 	mov	r23,r21
   2b9b0:	18ffffc4 	addi	r3,r3,-1
   2b9b4:	002b883a 	mov	r21,zero
   2b9b8:	a004d63a 	srli	r2,r20,24
   2b9bc:	8822923a 	slli	r17,r17,8
   2b9c0:	a028923a 	slli	r20,r20,8
   2b9c4:	8009883a 	mov	r4,r16
   2b9c8:	88acb03a 	or	r22,r17,r2
   2b9cc:	dd000015 	stw	r20,0(sp)
   2b9d0:	b028d43a 	srli	r20,r22,16
   2b9d4:	d8c00215 	stw	r3,8(sp)
   2b9d8:	b4bfffcc 	andi	r18,r22,65535
   2b9dc:	a00b883a 	mov	r5,r20
   2b9e0:	002ace00 	call	2ace0 <__udivsi3>
   2b9e4:	100b883a 	mov	r5,r2
   2b9e8:	9009883a 	mov	r4,r18
   2b9ec:	1023883a 	mov	r17,r2
   2b9f0:	002ad9c0 	call	2ad9c <__mulsi3>
   2b9f4:	8009883a 	mov	r4,r16
   2b9f8:	a00b883a 	mov	r5,r20
   2b9fc:	1039883a 	mov	fp,r2
   2ba00:	002ad440 	call	2ad44 <__umodsi3>
   2ba04:	1004943a 	slli	r2,r2,16
   2ba08:	b808d43a 	srli	r4,r23,16
   2ba0c:	d8c00217 	ldw	r3,8(sp)
   2ba10:	2084b03a 	or	r2,r4,r2
   2ba14:	1700062e 	bgeu	r2,fp,2ba30 <__divdf3+0x3c0>
   2ba18:	1585883a 	add	r2,r2,r22
   2ba1c:	893fffc4 	addi	r4,r17,-1
   2ba20:	15811d36 	bltu	r2,r22,2be98 <__divdf3+0x828>
   2ba24:	17011c2e 	bgeu	r2,fp,2be98 <__divdf3+0x828>
   2ba28:	8c7fff84 	addi	r17,r17,-2
   2ba2c:	1585883a 	add	r2,r2,r22
   2ba30:	1739c83a 	sub	fp,r2,fp
   2ba34:	a00b883a 	mov	r5,r20
   2ba38:	e009883a 	mov	r4,fp
   2ba3c:	d8c00215 	stw	r3,8(sp)
   2ba40:	002ace00 	call	2ace0 <__udivsi3>
   2ba44:	100b883a 	mov	r5,r2
   2ba48:	9009883a 	mov	r4,r18
   2ba4c:	1021883a 	mov	r16,r2
   2ba50:	002ad9c0 	call	2ad9c <__mulsi3>
   2ba54:	a00b883a 	mov	r5,r20
   2ba58:	e009883a 	mov	r4,fp
   2ba5c:	d8800415 	stw	r2,16(sp)
   2ba60:	002ad440 	call	2ad44 <__umodsi3>
   2ba64:	1004943a 	slli	r2,r2,16
   2ba68:	da000417 	ldw	r8,16(sp)
   2ba6c:	bdffffcc 	andi	r23,r23,65535
   2ba70:	b884b03a 	or	r2,r23,r2
   2ba74:	d8c00217 	ldw	r3,8(sp)
   2ba78:	1200062e 	bgeu	r2,r8,2ba94 <__divdf3+0x424>
   2ba7c:	1585883a 	add	r2,r2,r22
   2ba80:	813fffc4 	addi	r4,r16,-1
   2ba84:	15810236 	bltu	r2,r22,2be90 <__divdf3+0x820>
   2ba88:	1201012e 	bgeu	r2,r8,2be90 <__divdf3+0x820>
   2ba8c:	843fff84 	addi	r16,r16,-2
   2ba90:	1585883a 	add	r2,r2,r22
   2ba94:	8822943a 	slli	r17,r17,16
   2ba98:	d9800017 	ldw	r6,0(sp)
   2ba9c:	1211c83a 	sub	r8,r2,r8
   2baa0:	8c22b03a 	or	r17,r17,r16
   2baa4:	373fffcc 	andi	fp,r6,65535
   2baa8:	8abfffcc 	andi	r10,r17,65535
   2baac:	8820d43a 	srli	r16,r17,16
   2bab0:	5009883a 	mov	r4,r10
   2bab4:	e00b883a 	mov	r5,fp
   2bab8:	302ed43a 	srli	r23,r6,16
   2babc:	d8c00215 	stw	r3,8(sp)
   2bac0:	da000415 	stw	r8,16(sp)
   2bac4:	da800115 	stw	r10,4(sp)
   2bac8:	002ad9c0 	call	2ad9c <__mulsi3>
   2bacc:	800b883a 	mov	r5,r16
   2bad0:	e009883a 	mov	r4,fp
   2bad4:	d8800515 	stw	r2,20(sp)
   2bad8:	002ad9c0 	call	2ad9c <__mulsi3>
   2badc:	8009883a 	mov	r4,r16
   2bae0:	b80b883a 	mov	r5,r23
   2bae4:	d8800315 	stw	r2,12(sp)
   2bae8:	002ad9c0 	call	2ad9c <__mulsi3>
   2baec:	da800117 	ldw	r10,4(sp)
   2baf0:	b80b883a 	mov	r5,r23
   2baf4:	1021883a 	mov	r16,r2
   2baf8:	5009883a 	mov	r4,r10
   2bafc:	002ad9c0 	call	2ad9c <__mulsi3>
   2bb00:	d9c00517 	ldw	r7,20(sp)
   2bb04:	da400317 	ldw	r9,12(sp)
   2bb08:	d8c00217 	ldw	r3,8(sp)
   2bb0c:	3808d43a 	srli	r4,r7,16
   2bb10:	1245883a 	add	r2,r2,r9
   2bb14:	da000417 	ldw	r8,16(sp)
   2bb18:	2085883a 	add	r2,r4,r2
   2bb1c:	1240022e 	bgeu	r2,r9,2bb28 <__divdf3+0x4b8>
   2bb20:	01000074 	movhi	r4,1
   2bb24:	8121883a 	add	r16,r16,r4
   2bb28:	1008d43a 	srli	r4,r2,16
   2bb2c:	1004943a 	slli	r2,r2,16
   2bb30:	39ffffcc 	andi	r7,r7,65535
   2bb34:	2409883a 	add	r4,r4,r16
   2bb38:	11c5883a 	add	r2,r2,r7
   2bb3c:	4100bb36 	bltu	r8,r4,2be2c <__divdf3+0x7bc>
   2bb40:	4100d726 	beq	r8,r4,2bea0 <__divdf3+0x830>
   2bb44:	4109c83a 	sub	r4,r8,r4
   2bb48:	a8a1c83a 	sub	r16,r21,r2
   2bb4c:	ac2b803a 	cmpltu	r21,r21,r16
   2bb50:	256bc83a 	sub	r21,r4,r21
   2bb54:	b540d926 	beq	r22,r21,2bebc <__divdf3+0x84c>
   2bb58:	a00b883a 	mov	r5,r20
   2bb5c:	a809883a 	mov	r4,r21
   2bb60:	d8c00215 	stw	r3,8(sp)
   2bb64:	002ace00 	call	2ace0 <__udivsi3>
   2bb68:	100b883a 	mov	r5,r2
   2bb6c:	9009883a 	mov	r4,r18
   2bb70:	d8800515 	stw	r2,20(sp)
   2bb74:	002ad9c0 	call	2ad9c <__mulsi3>
   2bb78:	a809883a 	mov	r4,r21
   2bb7c:	a00b883a 	mov	r5,r20
   2bb80:	d8800415 	stw	r2,16(sp)
   2bb84:	002ad440 	call	2ad44 <__umodsi3>
   2bb88:	1004943a 	slli	r2,r2,16
   2bb8c:	8008d43a 	srli	r4,r16,16
   2bb90:	da000417 	ldw	r8,16(sp)
   2bb94:	d8c00217 	ldw	r3,8(sp)
   2bb98:	2084b03a 	or	r2,r4,r2
   2bb9c:	d9c00517 	ldw	r7,20(sp)
   2bba0:	1200062e 	bgeu	r2,r8,2bbbc <__divdf3+0x54c>
   2bba4:	1585883a 	add	r2,r2,r22
   2bba8:	393fffc4 	addi	r4,r7,-1
   2bbac:	1580c536 	bltu	r2,r22,2bec4 <__divdf3+0x854>
   2bbb0:	1200c42e 	bgeu	r2,r8,2bec4 <__divdf3+0x854>
   2bbb4:	39ffff84 	addi	r7,r7,-2
   2bbb8:	1585883a 	add	r2,r2,r22
   2bbbc:	122bc83a 	sub	r21,r2,r8
   2bbc0:	a00b883a 	mov	r5,r20
   2bbc4:	a809883a 	mov	r4,r21
   2bbc8:	d8c00215 	stw	r3,8(sp)
   2bbcc:	d9c00515 	stw	r7,20(sp)
   2bbd0:	002ace00 	call	2ace0 <__udivsi3>
   2bbd4:	9009883a 	mov	r4,r18
   2bbd8:	100b883a 	mov	r5,r2
   2bbdc:	d8800415 	stw	r2,16(sp)
   2bbe0:	002ad9c0 	call	2ad9c <__mulsi3>
   2bbe4:	a809883a 	mov	r4,r21
   2bbe8:	a00b883a 	mov	r5,r20
   2bbec:	1025883a 	mov	r18,r2
   2bbf0:	002ad440 	call	2ad44 <__umodsi3>
   2bbf4:	1004943a 	slli	r2,r2,16
   2bbf8:	813fffcc 	andi	r4,r16,65535
   2bbfc:	d8c00217 	ldw	r3,8(sp)
   2bc00:	20a0b03a 	or	r16,r4,r2
   2bc04:	d9c00517 	ldw	r7,20(sp)
   2bc08:	da000417 	ldw	r8,16(sp)
   2bc0c:	8480062e 	bgeu	r16,r18,2bc28 <__divdf3+0x5b8>
   2bc10:	85a1883a 	add	r16,r16,r22
   2bc14:	40bfffc4 	addi	r2,r8,-1
   2bc18:	8580ac36 	bltu	r16,r22,2becc <__divdf3+0x85c>
   2bc1c:	8480ab2e 	bgeu	r16,r18,2becc <__divdf3+0x85c>
   2bc20:	423fff84 	addi	r8,r8,-2
   2bc24:	85a1883a 	add	r16,r16,r22
   2bc28:	3804943a 	slli	r2,r7,16
   2bc2c:	84a1c83a 	sub	r16,r16,r18
   2bc30:	e009883a 	mov	r4,fp
   2bc34:	1228b03a 	or	r20,r2,r8
   2bc38:	a1ffffcc 	andi	r7,r20,65535
   2bc3c:	a024d43a 	srli	r18,r20,16
   2bc40:	380b883a 	mov	r5,r7
   2bc44:	d8c00215 	stw	r3,8(sp)
   2bc48:	d9c00515 	stw	r7,20(sp)
   2bc4c:	002ad9c0 	call	2ad9c <__mulsi3>
   2bc50:	900b883a 	mov	r5,r18
   2bc54:	e009883a 	mov	r4,fp
   2bc58:	102b883a 	mov	r21,r2
   2bc5c:	002ad9c0 	call	2ad9c <__mulsi3>
   2bc60:	900b883a 	mov	r5,r18
   2bc64:	b809883a 	mov	r4,r23
   2bc68:	1039883a 	mov	fp,r2
   2bc6c:	002ad9c0 	call	2ad9c <__mulsi3>
   2bc70:	d9c00517 	ldw	r7,20(sp)
   2bc74:	b80b883a 	mov	r5,r23
   2bc78:	1025883a 	mov	r18,r2
   2bc7c:	3809883a 	mov	r4,r7
   2bc80:	002ad9c0 	call	2ad9c <__mulsi3>
   2bc84:	a808d43a 	srli	r4,r21,16
   2bc88:	1705883a 	add	r2,r2,fp
   2bc8c:	d8c00217 	ldw	r3,8(sp)
   2bc90:	2085883a 	add	r2,r4,r2
   2bc94:	1700022e 	bgeu	r2,fp,2bca0 <__divdf3+0x630>
   2bc98:	01000074 	movhi	r4,1
   2bc9c:	9125883a 	add	r18,r18,r4
   2bca0:	1008d43a 	srli	r4,r2,16
   2bca4:	1004943a 	slli	r2,r2,16
   2bca8:	ad7fffcc 	andi	r21,r21,65535
   2bcac:	2489883a 	add	r4,r4,r18
   2bcb0:	1545883a 	add	r2,r2,r21
   2bcb4:	81003836 	bltu	r16,r4,2bd98 <__divdf3+0x728>
   2bcb8:	81003626 	beq	r16,r4,2bd94 <__divdf3+0x724>
   2bcbc:	a5000054 	ori	r20,r20,1
   2bcc0:	1880ffc4 	addi	r2,r3,1023
   2bcc4:	00bf2e0e 	bge	zero,r2,2b980 <__alt_data_end+0xfffeb980>
   2bcc8:	a10001cc 	andi	r4,r20,7
   2bccc:	20000726 	beq	r4,zero,2bcec <__divdf3+0x67c>
   2bcd0:	a10003cc 	andi	r4,r20,15
   2bcd4:	01400104 	movi	r5,4
   2bcd8:	21400426 	beq	r4,r5,2bcec <__divdf3+0x67c>
   2bcdc:	a149883a 	add	r4,r20,r5
   2bce0:	2529803a 	cmpltu	r20,r4,r20
   2bce4:	8d23883a 	add	r17,r17,r20
   2bce8:	2029883a 	mov	r20,r4
   2bcec:	8900402c 	andhi	r4,r17,256
   2bcf0:	20000426 	beq	r4,zero,2bd04 <__divdf3+0x694>
   2bcf4:	18810004 	addi	r2,r3,1024
   2bcf8:	00ffc034 	movhi	r3,65280
   2bcfc:	18ffffc4 	addi	r3,r3,-1
   2bd00:	88e2703a 	and	r17,r17,r3
   2bd04:	00c1ff84 	movi	r3,2046
   2bd08:	18beb416 	blt	r3,r2,2b7dc <__alt_data_end+0xfffeb7dc>
   2bd0c:	a028d0fa 	srli	r20,r20,3
   2bd10:	882a977a 	slli	r21,r17,29
   2bd14:	8820927a 	slli	r16,r17,9
   2bd18:	1081ffcc 	andi	r2,r2,2047
   2bd1c:	ad2ab03a 	or	r21,r21,r20
   2bd20:	8020d33a 	srli	r16,r16,12
   2bd24:	9900004c 	andi	r4,r19,1
   2bd28:	003eb006 	br	2b7ec <__alt_data_end+0xfffeb7ec>
   2bd2c:	8080022c 	andhi	r2,r16,8
   2bd30:	10001226 	beq	r2,zero,2bd7c <__divdf3+0x70c>
   2bd34:	8880022c 	andhi	r2,r17,8
   2bd38:	1000101e 	bne	r2,zero,2bd7c <__divdf3+0x70c>
   2bd3c:	00800434 	movhi	r2,16
   2bd40:	8c000234 	orhi	r16,r17,8
   2bd44:	10bfffc4 	addi	r2,r2,-1
   2bd48:	b809883a 	mov	r4,r23
   2bd4c:	80a0703a 	and	r16,r16,r2
   2bd50:	a02b883a 	mov	r21,r20
   2bd54:	003f0806 	br	2b978 <__alt_data_end+0xfffeb978>
   2bd58:	008000c4 	movi	r2,3
   2bd5c:	3880b126 	beq	r7,r2,2c024 <__divdf3+0x9b4>
   2bd60:	00800044 	movi	r2,1
   2bd64:	38805b1e 	bne	r7,r2,2bed4 <__divdf3+0x864>
   2bd68:	e009883a 	mov	r4,fp
   2bd6c:	0005883a 	mov	r2,zero
   2bd70:	0021883a 	mov	r16,zero
   2bd74:	002b883a 	mov	r21,zero
   2bd78:	003e9c06 	br	2b7ec <__alt_data_end+0xfffeb7ec>
   2bd7c:	00800434 	movhi	r2,16
   2bd80:	84000234 	orhi	r16,r16,8
   2bd84:	10bfffc4 	addi	r2,r2,-1
   2bd88:	b009883a 	mov	r4,r22
   2bd8c:	80a0703a 	and	r16,r16,r2
   2bd90:	003ef906 	br	2b978 <__alt_data_end+0xfffeb978>
   2bd94:	103fca26 	beq	r2,zero,2bcc0 <__alt_data_end+0xfffebcc0>
   2bd98:	b421883a 	add	r16,r22,r16
   2bd9c:	a17fffc4 	addi	r5,r20,-1
   2bda0:	8580422e 	bgeu	r16,r22,2beac <__divdf3+0x83c>
   2bda4:	2829883a 	mov	r20,r5
   2bda8:	813fc41e 	bne	r16,r4,2bcbc <__alt_data_end+0xfffebcbc>
   2bdac:	d9800017 	ldw	r6,0(sp)
   2bdb0:	30bfc21e 	bne	r6,r2,2bcbc <__alt_data_end+0xfffebcbc>
   2bdb4:	003fc206 	br	2bcc0 <__alt_data_end+0xfffebcc0>
   2bdb8:	143ff604 	addi	r16,r2,-40
   2bdbc:	8c20983a 	sll	r16,r17,r16
   2bdc0:	002b883a 	mov	r21,zero
   2bdc4:	003eb406 	br	2b898 <__alt_data_end+0xfffeb898>
   2bdc8:	d9800215 	stw	r6,8(sp)
   2bdcc:	d9c00515 	stw	r7,20(sp)
   2bdd0:	da000415 	stw	r8,16(sp)
   2bdd4:	002d6040 	call	2d604 <__clzsi2>
   2bdd8:	10800804 	addi	r2,r2,32
   2bddc:	da000417 	ldw	r8,16(sp)
   2bde0:	d9c00517 	ldw	r7,20(sp)
   2bde4:	d9800217 	ldw	r6,8(sp)
   2bde8:	003ea106 	br	2b870 <__alt_data_end+0xfffeb870>
   2bdec:	147ff604 	addi	r17,r2,-40
   2bdf0:	3462983a 	sll	r17,r6,r17
   2bdf4:	0029883a 	mov	r20,zero
   2bdf8:	003ec906 	br	2b920 <__alt_data_end+0xfffeb920>
   2bdfc:	3009883a 	mov	r4,r6
   2be00:	d9400115 	stw	r5,4(sp)
   2be04:	d9800215 	stw	r6,8(sp)
   2be08:	da000415 	stw	r8,16(sp)
   2be0c:	da400315 	stw	r9,12(sp)
   2be10:	002d6040 	call	2d604 <__clzsi2>
   2be14:	10800804 	addi	r2,r2,32
   2be18:	da400317 	ldw	r9,12(sp)
   2be1c:	da000417 	ldw	r8,16(sp)
   2be20:	d9800217 	ldw	r6,8(sp)
   2be24:	d9400117 	ldw	r5,4(sp)
   2be28:	003eb306 	br	2b8f8 <__alt_data_end+0xfffeb8f8>
   2be2c:	d9800017 	ldw	r6,0(sp)
   2be30:	a9ab883a 	add	r21,r21,r6
   2be34:	a98b803a 	cmpltu	r5,r21,r6
   2be38:	2d8b883a 	add	r5,r5,r22
   2be3c:	2a11883a 	add	r8,r5,r8
   2be40:	897fffc4 	addi	r5,r17,-1
   2be44:	b2000c2e 	bgeu	r22,r8,2be78 <__divdf3+0x808>
   2be48:	41003f36 	bltu	r8,r4,2bf48 <__divdf3+0x8d8>
   2be4c:	22006c26 	beq	r4,r8,2c000 <__divdf3+0x990>
   2be50:	4109c83a 	sub	r4,r8,r4
   2be54:	2823883a 	mov	r17,r5
   2be58:	003f3b06 	br	2bb48 <__alt_data_end+0xfffebb48>
   2be5c:	ad3ed336 	bltu	r21,r20,2b9ac <__alt_data_end+0xfffeb9ac>
   2be60:	a804d07a 	srli	r2,r21,1
   2be64:	802e97fa 	slli	r23,r16,31
   2be68:	a82a97fa 	slli	r21,r21,31
   2be6c:	8020d07a 	srli	r16,r16,1
   2be70:	b8aeb03a 	or	r23,r23,r2
   2be74:	003ed006 	br	2b9b8 <__alt_data_end+0xfffeb9b8>
   2be78:	b23ff51e 	bne	r22,r8,2be50 <__alt_data_end+0xfffebe50>
   2be7c:	d9800017 	ldw	r6,0(sp)
   2be80:	a9bff12e 	bgeu	r21,r6,2be48 <__alt_data_end+0xfffebe48>
   2be84:	b109c83a 	sub	r4,r22,r4
   2be88:	2823883a 	mov	r17,r5
   2be8c:	003f2e06 	br	2bb48 <__alt_data_end+0xfffebb48>
   2be90:	2021883a 	mov	r16,r4
   2be94:	003eff06 	br	2ba94 <__alt_data_end+0xfffeba94>
   2be98:	2023883a 	mov	r17,r4
   2be9c:	003ee406 	br	2ba30 <__alt_data_end+0xfffeba30>
   2bea0:	a8bfe236 	bltu	r21,r2,2be2c <__alt_data_end+0xfffebe2c>
   2bea4:	0009883a 	mov	r4,zero
   2bea8:	003f2706 	br	2bb48 <__alt_data_end+0xfffebb48>
   2beac:	81002d36 	bltu	r16,r4,2bf64 <__divdf3+0x8f4>
   2beb0:	24005626 	beq	r4,r16,2c00c <__divdf3+0x99c>
   2beb4:	2829883a 	mov	r20,r5
   2beb8:	003f8006 	br	2bcbc <__alt_data_end+0xfffebcbc>
   2bebc:	053fffc4 	movi	r20,-1
   2bec0:	003f7f06 	br	2bcc0 <__alt_data_end+0xfffebcc0>
   2bec4:	200f883a 	mov	r7,r4
   2bec8:	003f3c06 	br	2bbbc <__alt_data_end+0xfffebbbc>
   2becc:	1011883a 	mov	r8,r2
   2bed0:	003f5506 	br	2bc28 <__alt_data_end+0xfffebc28>
   2bed4:	e027883a 	mov	r19,fp
   2bed8:	003f7906 	br	2bcc0 <__alt_data_end+0xfffebcc0>
   2bedc:	010007c4 	movi	r4,31
   2bee0:	20c02816 	blt	r4,r3,2bf84 <__divdf3+0x914>
   2bee4:	00800804 	movi	r2,32
   2bee8:	10c5c83a 	sub	r2,r2,r3
   2beec:	888a983a 	sll	r5,r17,r2
   2bef0:	a0c8d83a 	srl	r4,r20,r3
   2bef4:	a084983a 	sll	r2,r20,r2
   2bef8:	88e2d83a 	srl	r17,r17,r3
   2befc:	2906b03a 	or	r3,r5,r4
   2bf00:	1004c03a 	cmpne	r2,r2,zero
   2bf04:	1886b03a 	or	r3,r3,r2
   2bf08:	188001cc 	andi	r2,r3,7
   2bf0c:	10000726 	beq	r2,zero,2bf2c <__divdf3+0x8bc>
   2bf10:	188003cc 	andi	r2,r3,15
   2bf14:	01000104 	movi	r4,4
   2bf18:	11000426 	beq	r2,r4,2bf2c <__divdf3+0x8bc>
   2bf1c:	1805883a 	mov	r2,r3
   2bf20:	10c00104 	addi	r3,r2,4
   2bf24:	1885803a 	cmpltu	r2,r3,r2
   2bf28:	88a3883a 	add	r17,r17,r2
   2bf2c:	8880202c 	andhi	r2,r17,128
   2bf30:	10002926 	beq	r2,zero,2bfd8 <__divdf3+0x968>
   2bf34:	9900004c 	andi	r4,r19,1
   2bf38:	00800044 	movi	r2,1
   2bf3c:	0021883a 	mov	r16,zero
   2bf40:	002b883a 	mov	r21,zero
   2bf44:	003e2906 	br	2b7ec <__alt_data_end+0xfffeb7ec>
   2bf48:	d9800017 	ldw	r6,0(sp)
   2bf4c:	8c7fff84 	addi	r17,r17,-2
   2bf50:	a9ab883a 	add	r21,r21,r6
   2bf54:	a98b803a 	cmpltu	r5,r21,r6
   2bf58:	2d8b883a 	add	r5,r5,r22
   2bf5c:	2a11883a 	add	r8,r5,r8
   2bf60:	003ef806 	br	2bb44 <__alt_data_end+0xfffebb44>
   2bf64:	d9800017 	ldw	r6,0(sp)
   2bf68:	318f883a 	add	r7,r6,r6
   2bf6c:	398b803a 	cmpltu	r5,r7,r6
   2bf70:	2d8d883a 	add	r6,r5,r22
   2bf74:	81a1883a 	add	r16,r16,r6
   2bf78:	a17fff84 	addi	r5,r20,-2
   2bf7c:	d9c00015 	stw	r7,0(sp)
   2bf80:	003f8806 	br	2bda4 <__alt_data_end+0xfffebda4>
   2bf84:	013ff844 	movi	r4,-31
   2bf88:	2085c83a 	sub	r2,r4,r2
   2bf8c:	8888d83a 	srl	r4,r17,r2
   2bf90:	00800804 	movi	r2,32
   2bf94:	18802126 	beq	r3,r2,2c01c <__divdf3+0x9ac>
   2bf98:	04001004 	movi	r16,64
   2bf9c:	80c7c83a 	sub	r3,r16,r3
   2bfa0:	88e0983a 	sll	r16,r17,r3
   2bfa4:	8504b03a 	or	r2,r16,r20
   2bfa8:	1004c03a 	cmpne	r2,r2,zero
   2bfac:	2084b03a 	or	r2,r4,r2
   2bfb0:	144001cc 	andi	r17,r2,7
   2bfb4:	88000d1e 	bne	r17,zero,2bfec <__divdf3+0x97c>
   2bfb8:	0021883a 	mov	r16,zero
   2bfbc:	102ad0fa 	srli	r21,r2,3
   2bfc0:	9900004c 	andi	r4,r19,1
   2bfc4:	0005883a 	mov	r2,zero
   2bfc8:	ac6ab03a 	or	r21,r21,r17
   2bfcc:	003e0706 	br	2b7ec <__alt_data_end+0xfffeb7ec>
   2bfd0:	1007883a 	mov	r3,r2
   2bfd4:	0023883a 	mov	r17,zero
   2bfd8:	8820927a 	slli	r16,r17,9
   2bfdc:	1805883a 	mov	r2,r3
   2bfe0:	8822977a 	slli	r17,r17,29
   2bfe4:	8020d33a 	srli	r16,r16,12
   2bfe8:	003ff406 	br	2bfbc <__alt_data_end+0xfffebfbc>
   2bfec:	10c003cc 	andi	r3,r2,15
   2bff0:	01000104 	movi	r4,4
   2bff4:	193ff626 	beq	r3,r4,2bfd0 <__alt_data_end+0xfffebfd0>
   2bff8:	0023883a 	mov	r17,zero
   2bffc:	003fc806 	br	2bf20 <__alt_data_end+0xfffebf20>
   2c000:	a8bfd136 	bltu	r21,r2,2bf48 <__alt_data_end+0xfffebf48>
   2c004:	2823883a 	mov	r17,r5
   2c008:	003fa606 	br	2bea4 <__alt_data_end+0xfffebea4>
   2c00c:	d9800017 	ldw	r6,0(sp)
   2c010:	30bfd436 	bltu	r6,r2,2bf64 <__alt_data_end+0xfffebf64>
   2c014:	2829883a 	mov	r20,r5
   2c018:	003f6406 	br	2bdac <__alt_data_end+0xfffebdac>
   2c01c:	0021883a 	mov	r16,zero
   2c020:	003fe006 	br	2bfa4 <__alt_data_end+0xfffebfa4>
   2c024:	00800434 	movhi	r2,16
   2c028:	8c000234 	orhi	r16,r17,8
   2c02c:	10bfffc4 	addi	r2,r2,-1
   2c030:	e009883a 	mov	r4,fp
   2c034:	80a0703a 	and	r16,r16,r2
   2c038:	a02b883a 	mov	r21,r20
   2c03c:	003e4e06 	br	2b978 <__alt_data_end+0xfffeb978>

0002c040 <__eqdf2>:
   2c040:	2804d53a 	srli	r2,r5,20
   2c044:	3806d53a 	srli	r3,r7,20
   2c048:	02000434 	movhi	r8,16
   2c04c:	423fffc4 	addi	r8,r8,-1
   2c050:	1081ffcc 	andi	r2,r2,2047
   2c054:	0281ffc4 	movi	r10,2047
   2c058:	2a12703a 	and	r9,r5,r8
   2c05c:	18c1ffcc 	andi	r3,r3,2047
   2c060:	3a10703a 	and	r8,r7,r8
   2c064:	280ad7fa 	srli	r5,r5,31
   2c068:	380ed7fa 	srli	r7,r7,31
   2c06c:	12801026 	beq	r2,r10,2c0b0 <__eqdf2+0x70>
   2c070:	0281ffc4 	movi	r10,2047
   2c074:	1a800a26 	beq	r3,r10,2c0a0 <__eqdf2+0x60>
   2c078:	10c00226 	beq	r2,r3,2c084 <__eqdf2+0x44>
   2c07c:	00800044 	movi	r2,1
   2c080:	f800283a 	ret
   2c084:	4a3ffd1e 	bne	r9,r8,2c07c <__alt_data_end+0xfffec07c>
   2c088:	21bffc1e 	bne	r4,r6,2c07c <__alt_data_end+0xfffec07c>
   2c08c:	29c00c26 	beq	r5,r7,2c0c0 <__eqdf2+0x80>
   2c090:	103ffa1e 	bne	r2,zero,2c07c <__alt_data_end+0xfffec07c>
   2c094:	2244b03a 	or	r2,r4,r9
   2c098:	1004c03a 	cmpne	r2,r2,zero
   2c09c:	f800283a 	ret
   2c0a0:	3214b03a 	or	r10,r6,r8
   2c0a4:	503ff426 	beq	r10,zero,2c078 <__alt_data_end+0xfffec078>
   2c0a8:	00800044 	movi	r2,1
   2c0ac:	f800283a 	ret
   2c0b0:	2254b03a 	or	r10,r4,r9
   2c0b4:	503fee26 	beq	r10,zero,2c070 <__alt_data_end+0xfffec070>
   2c0b8:	00800044 	movi	r2,1
   2c0bc:	f800283a 	ret
   2c0c0:	0005883a 	mov	r2,zero
   2c0c4:	f800283a 	ret

0002c0c8 <__gedf2>:
   2c0c8:	2804d53a 	srli	r2,r5,20
   2c0cc:	3806d53a 	srli	r3,r7,20
   2c0d0:	02000434 	movhi	r8,16
   2c0d4:	423fffc4 	addi	r8,r8,-1
   2c0d8:	1081ffcc 	andi	r2,r2,2047
   2c0dc:	0241ffc4 	movi	r9,2047
   2c0e0:	2a14703a 	and	r10,r5,r8
   2c0e4:	18c1ffcc 	andi	r3,r3,2047
   2c0e8:	3a10703a 	and	r8,r7,r8
   2c0ec:	280ad7fa 	srli	r5,r5,31
   2c0f0:	380ed7fa 	srli	r7,r7,31
   2c0f4:	12401d26 	beq	r2,r9,2c16c <__gedf2+0xa4>
   2c0f8:	0241ffc4 	movi	r9,2047
   2c0fc:	1a401226 	beq	r3,r9,2c148 <__gedf2+0x80>
   2c100:	1000081e 	bne	r2,zero,2c124 <__gedf2+0x5c>
   2c104:	2296b03a 	or	r11,r4,r10
   2c108:	5813003a 	cmpeq	r9,r11,zero
   2c10c:	1800091e 	bne	r3,zero,2c134 <__gedf2+0x6c>
   2c110:	3218b03a 	or	r12,r6,r8
   2c114:	6000071e 	bne	r12,zero,2c134 <__gedf2+0x6c>
   2c118:	0005883a 	mov	r2,zero
   2c11c:	5800101e 	bne	r11,zero,2c160 <__gedf2+0x98>
   2c120:	f800283a 	ret
   2c124:	18000c1e 	bne	r3,zero,2c158 <__gedf2+0x90>
   2c128:	3212b03a 	or	r9,r6,r8
   2c12c:	48000c26 	beq	r9,zero,2c160 <__gedf2+0x98>
   2c130:	0013883a 	mov	r9,zero
   2c134:	39c03fcc 	andi	r7,r7,255
   2c138:	48000826 	beq	r9,zero,2c15c <__gedf2+0x94>
   2c13c:	38000926 	beq	r7,zero,2c164 <__gedf2+0x9c>
   2c140:	00800044 	movi	r2,1
   2c144:	f800283a 	ret
   2c148:	3212b03a 	or	r9,r6,r8
   2c14c:	483fec26 	beq	r9,zero,2c100 <__alt_data_end+0xfffec100>
   2c150:	00bfff84 	movi	r2,-2
   2c154:	f800283a 	ret
   2c158:	39c03fcc 	andi	r7,r7,255
   2c15c:	29c00626 	beq	r5,r7,2c178 <__gedf2+0xb0>
   2c160:	283ff726 	beq	r5,zero,2c140 <__alt_data_end+0xfffec140>
   2c164:	00bfffc4 	movi	r2,-1
   2c168:	f800283a 	ret
   2c16c:	2292b03a 	or	r9,r4,r10
   2c170:	483fe126 	beq	r9,zero,2c0f8 <__alt_data_end+0xfffec0f8>
   2c174:	003ff606 	br	2c150 <__alt_data_end+0xfffec150>
   2c178:	18bff916 	blt	r3,r2,2c160 <__alt_data_end+0xfffec160>
   2c17c:	10c00316 	blt	r2,r3,2c18c <__gedf2+0xc4>
   2c180:	42bff736 	bltu	r8,r10,2c160 <__alt_data_end+0xfffec160>
   2c184:	52000326 	beq	r10,r8,2c194 <__gedf2+0xcc>
   2c188:	5200042e 	bgeu	r10,r8,2c19c <__gedf2+0xd4>
   2c18c:	283fec1e 	bne	r5,zero,2c140 <__alt_data_end+0xfffec140>
   2c190:	003ff406 	br	2c164 <__alt_data_end+0xfffec164>
   2c194:	313ff236 	bltu	r6,r4,2c160 <__alt_data_end+0xfffec160>
   2c198:	21bffc36 	bltu	r4,r6,2c18c <__alt_data_end+0xfffec18c>
   2c19c:	0005883a 	mov	r2,zero
   2c1a0:	f800283a 	ret

0002c1a4 <__ledf2>:
   2c1a4:	2804d53a 	srli	r2,r5,20
   2c1a8:	3810d53a 	srli	r8,r7,20
   2c1ac:	00c00434 	movhi	r3,16
   2c1b0:	18ffffc4 	addi	r3,r3,-1
   2c1b4:	1081ffcc 	andi	r2,r2,2047
   2c1b8:	0241ffc4 	movi	r9,2047
   2c1bc:	28d4703a 	and	r10,r5,r3
   2c1c0:	4201ffcc 	andi	r8,r8,2047
   2c1c4:	38c6703a 	and	r3,r7,r3
   2c1c8:	280ad7fa 	srli	r5,r5,31
   2c1cc:	380ed7fa 	srli	r7,r7,31
   2c1d0:	12401f26 	beq	r2,r9,2c250 <__ledf2+0xac>
   2c1d4:	0241ffc4 	movi	r9,2047
   2c1d8:	42401426 	beq	r8,r9,2c22c <__ledf2+0x88>
   2c1dc:	1000091e 	bne	r2,zero,2c204 <__ledf2+0x60>
   2c1e0:	2296b03a 	or	r11,r4,r10
   2c1e4:	5813003a 	cmpeq	r9,r11,zero
   2c1e8:	29403fcc 	andi	r5,r5,255
   2c1ec:	40000a1e 	bne	r8,zero,2c218 <__ledf2+0x74>
   2c1f0:	30d8b03a 	or	r12,r6,r3
   2c1f4:	6000081e 	bne	r12,zero,2c218 <__ledf2+0x74>
   2c1f8:	0005883a 	mov	r2,zero
   2c1fc:	5800111e 	bne	r11,zero,2c244 <__ledf2+0xa0>
   2c200:	f800283a 	ret
   2c204:	29403fcc 	andi	r5,r5,255
   2c208:	40000c1e 	bne	r8,zero,2c23c <__ledf2+0x98>
   2c20c:	30d2b03a 	or	r9,r6,r3
   2c210:	48000c26 	beq	r9,zero,2c244 <__ledf2+0xa0>
   2c214:	0013883a 	mov	r9,zero
   2c218:	39c03fcc 	andi	r7,r7,255
   2c21c:	48000826 	beq	r9,zero,2c240 <__ledf2+0x9c>
   2c220:	38001126 	beq	r7,zero,2c268 <__ledf2+0xc4>
   2c224:	00800044 	movi	r2,1
   2c228:	f800283a 	ret
   2c22c:	30d2b03a 	or	r9,r6,r3
   2c230:	483fea26 	beq	r9,zero,2c1dc <__alt_data_end+0xfffec1dc>
   2c234:	00800084 	movi	r2,2
   2c238:	f800283a 	ret
   2c23c:	39c03fcc 	andi	r7,r7,255
   2c240:	39400726 	beq	r7,r5,2c260 <__ledf2+0xbc>
   2c244:	2800081e 	bne	r5,zero,2c268 <__ledf2+0xc4>
   2c248:	00800044 	movi	r2,1
   2c24c:	f800283a 	ret
   2c250:	2292b03a 	or	r9,r4,r10
   2c254:	483fdf26 	beq	r9,zero,2c1d4 <__alt_data_end+0xfffec1d4>
   2c258:	00800084 	movi	r2,2
   2c25c:	f800283a 	ret
   2c260:	4080030e 	bge	r8,r2,2c270 <__ledf2+0xcc>
   2c264:	383fef26 	beq	r7,zero,2c224 <__alt_data_end+0xfffec224>
   2c268:	00bfffc4 	movi	r2,-1
   2c26c:	f800283a 	ret
   2c270:	123feb16 	blt	r2,r8,2c220 <__alt_data_end+0xfffec220>
   2c274:	1abff336 	bltu	r3,r10,2c244 <__alt_data_end+0xfffec244>
   2c278:	50c00326 	beq	r10,r3,2c288 <__ledf2+0xe4>
   2c27c:	50c0042e 	bgeu	r10,r3,2c290 <__ledf2+0xec>
   2c280:	283fe81e 	bne	r5,zero,2c224 <__alt_data_end+0xfffec224>
   2c284:	003ff806 	br	2c268 <__alt_data_end+0xfffec268>
   2c288:	313fee36 	bltu	r6,r4,2c244 <__alt_data_end+0xfffec244>
   2c28c:	21bffc36 	bltu	r4,r6,2c280 <__alt_data_end+0xfffec280>
   2c290:	0005883a 	mov	r2,zero
   2c294:	f800283a 	ret

0002c298 <__muldf3>:
   2c298:	deffee04 	addi	sp,sp,-72
   2c29c:	dd000c15 	stw	r20,48(sp)
   2c2a0:	2828d53a 	srli	r20,r5,20
   2c2a4:	ddc00f15 	stw	r23,60(sp)
   2c2a8:	282ed7fa 	srli	r23,r5,31
   2c2ac:	dc000815 	stw	r16,32(sp)
   2c2b0:	04000434 	movhi	r16,16
   2c2b4:	dcc00b15 	stw	r19,44(sp)
   2c2b8:	843fffc4 	addi	r16,r16,-1
   2c2bc:	dfc01115 	stw	ra,68(sp)
   2c2c0:	df001015 	stw	fp,64(sp)
   2c2c4:	dd800e15 	stw	r22,56(sp)
   2c2c8:	dd400d15 	stw	r21,52(sp)
   2c2cc:	dc800a15 	stw	r18,40(sp)
   2c2d0:	dc400915 	stw	r17,36(sp)
   2c2d4:	a501ffcc 	andi	r20,r20,2047
   2c2d8:	2c20703a 	and	r16,r5,r16
   2c2dc:	b827883a 	mov	r19,r23
   2c2e0:	ba403fcc 	andi	r9,r23,255
   2c2e4:	a0006026 	beq	r20,zero,2c468 <__muldf3+0x1d0>
   2c2e8:	0081ffc4 	movi	r2,2047
   2c2ec:	202d883a 	mov	r22,r4
   2c2f0:	a0803626 	beq	r20,r2,2c3cc <__muldf3+0x134>
   2c2f4:	84000434 	orhi	r16,r16,16
   2c2f8:	200ad77a 	srli	r5,r4,29
   2c2fc:	800490fa 	slli	r2,r16,3
   2c300:	202c90fa 	slli	r22,r4,3
   2c304:	a53f0044 	addi	r20,r20,-1023
   2c308:	28a0b03a 	or	r16,r5,r2
   2c30c:	002b883a 	mov	r21,zero
   2c310:	000b883a 	mov	r5,zero
   2c314:	3804d53a 	srli	r2,r7,20
   2c318:	3838d7fa 	srli	fp,r7,31
   2c31c:	04400434 	movhi	r17,16
   2c320:	8c7fffc4 	addi	r17,r17,-1
   2c324:	1081ffcc 	andi	r2,r2,2047
   2c328:	3025883a 	mov	r18,r6
   2c32c:	3c62703a 	and	r17,r7,r17
   2c330:	e2803fcc 	andi	r10,fp,255
   2c334:	10006d26 	beq	r2,zero,2c4ec <__muldf3+0x254>
   2c338:	00c1ffc4 	movi	r3,2047
   2c33c:	10c06526 	beq	r2,r3,2c4d4 <__muldf3+0x23c>
   2c340:	8c400434 	orhi	r17,r17,16
   2c344:	300ed77a 	srli	r7,r6,29
   2c348:	880690fa 	slli	r3,r17,3
   2c34c:	302490fa 	slli	r18,r6,3
   2c350:	10bf0044 	addi	r2,r2,-1023
   2c354:	38e2b03a 	or	r17,r7,r3
   2c358:	000f883a 	mov	r7,zero
   2c35c:	a087883a 	add	r3,r20,r2
   2c360:	010003c4 	movi	r4,15
   2c364:	3d44b03a 	or	r2,r7,r21
   2c368:	e5ccf03a 	xor	r6,fp,r23
   2c36c:	1a000044 	addi	r8,r3,1
   2c370:	20809b36 	bltu	r4,r2,2c5e0 <__muldf3+0x348>
   2c374:	100490ba 	slli	r2,r2,2
   2c378:	010000f4 	movhi	r4,3
   2c37c:	2130e304 	addi	r4,r4,-15476
   2c380:	1105883a 	add	r2,r2,r4
   2c384:	10800017 	ldw	r2,0(r2)
   2c388:	1000683a 	jmp	r2
   2c38c:	0002c5e0 	cmpeqi	zero,zero,2839
   2c390:	0002c3ec 	andhi	zero,zero,2831
   2c394:	0002c3ec 	andhi	zero,zero,2831
   2c398:	0002c3e8 	cmpgeui	zero,zero,2831
   2c39c:	0002c5bc 	xorhi	zero,zero,2838
   2c3a0:	0002c5bc 	xorhi	zero,zero,2838
   2c3a4:	0002c5a4 	muli	zero,zero,2838
   2c3a8:	0002c3e8 	cmpgeui	zero,zero,2831
   2c3ac:	0002c5bc 	xorhi	zero,zero,2838
   2c3b0:	0002c5a4 	muli	zero,zero,2838
   2c3b4:	0002c5bc 	xorhi	zero,zero,2838
   2c3b8:	0002c3e8 	cmpgeui	zero,zero,2831
   2c3bc:	0002c5cc 	andi	zero,zero,2839
   2c3c0:	0002c5cc 	andi	zero,zero,2839
   2c3c4:	0002c5cc 	andi	zero,zero,2839
   2c3c8:	0002c92c 	andhi	zero,zero,2852
   2c3cc:	2404b03a 	or	r2,r4,r16
   2c3d0:	1000711e 	bne	r2,zero,2c598 <__muldf3+0x300>
   2c3d4:	05400204 	movi	r21,8
   2c3d8:	0021883a 	mov	r16,zero
   2c3dc:	002d883a 	mov	r22,zero
   2c3e0:	01400084 	movi	r5,2
   2c3e4:	003fcb06 	br	2c314 <__alt_data_end+0xfffec314>
   2c3e8:	500d883a 	mov	r6,r10
   2c3ec:	00800084 	movi	r2,2
   2c3f0:	38805926 	beq	r7,r2,2c558 <__muldf3+0x2c0>
   2c3f4:	008000c4 	movi	r2,3
   2c3f8:	3881bb26 	beq	r7,r2,2cae8 <__muldf3+0x850>
   2c3fc:	00800044 	movi	r2,1
   2c400:	3881961e 	bne	r7,r2,2ca5c <__muldf3+0x7c4>
   2c404:	3027883a 	mov	r19,r6
   2c408:	0005883a 	mov	r2,zero
   2c40c:	0021883a 	mov	r16,zero
   2c410:	002d883a 	mov	r22,zero
   2c414:	1004953a 	slli	r2,r2,20
   2c418:	98c03fcc 	andi	r3,r19,255
   2c41c:	04400434 	movhi	r17,16
   2c420:	8c7fffc4 	addi	r17,r17,-1
   2c424:	180697fa 	slli	r3,r3,31
   2c428:	8460703a 	and	r16,r16,r17
   2c42c:	80a0b03a 	or	r16,r16,r2
   2c430:	80c6b03a 	or	r3,r16,r3
   2c434:	b005883a 	mov	r2,r22
   2c438:	dfc01117 	ldw	ra,68(sp)
   2c43c:	df001017 	ldw	fp,64(sp)
   2c440:	ddc00f17 	ldw	r23,60(sp)
   2c444:	dd800e17 	ldw	r22,56(sp)
   2c448:	dd400d17 	ldw	r21,52(sp)
   2c44c:	dd000c17 	ldw	r20,48(sp)
   2c450:	dcc00b17 	ldw	r19,44(sp)
   2c454:	dc800a17 	ldw	r18,40(sp)
   2c458:	dc400917 	ldw	r17,36(sp)
   2c45c:	dc000817 	ldw	r16,32(sp)
   2c460:	dec01204 	addi	sp,sp,72
   2c464:	f800283a 	ret
   2c468:	2404b03a 	or	r2,r4,r16
   2c46c:	202b883a 	mov	r21,r4
   2c470:	10004426 	beq	r2,zero,2c584 <__muldf3+0x2ec>
   2c474:	80015126 	beq	r16,zero,2c9bc <__muldf3+0x724>
   2c478:	8009883a 	mov	r4,r16
   2c47c:	d9800715 	stw	r6,28(sp)
   2c480:	d9c00215 	stw	r7,8(sp)
   2c484:	da400415 	stw	r9,16(sp)
   2c488:	002d6040 	call	2d604 <__clzsi2>
   2c48c:	d9800717 	ldw	r6,28(sp)
   2c490:	d9c00217 	ldw	r7,8(sp)
   2c494:	da400417 	ldw	r9,16(sp)
   2c498:	113ffd44 	addi	r4,r2,-11
   2c49c:	00c00704 	movi	r3,28
   2c4a0:	19014216 	blt	r3,r4,2c9ac <__muldf3+0x714>
   2c4a4:	00c00744 	movi	r3,29
   2c4a8:	15bffe04 	addi	r22,r2,-8
   2c4ac:	1907c83a 	sub	r3,r3,r4
   2c4b0:	85a0983a 	sll	r16,r16,r22
   2c4b4:	a8c6d83a 	srl	r3,r21,r3
   2c4b8:	adac983a 	sll	r22,r21,r22
   2c4bc:	1c20b03a 	or	r16,r3,r16
   2c4c0:	1080fcc4 	addi	r2,r2,1011
   2c4c4:	00a9c83a 	sub	r20,zero,r2
   2c4c8:	002b883a 	mov	r21,zero
   2c4cc:	000b883a 	mov	r5,zero
   2c4d0:	003f9006 	br	2c314 <__alt_data_end+0xfffec314>
   2c4d4:	3446b03a 	or	r3,r6,r17
   2c4d8:	1800281e 	bne	r3,zero,2c57c <__muldf3+0x2e4>
   2c4dc:	0023883a 	mov	r17,zero
   2c4e0:	0025883a 	mov	r18,zero
   2c4e4:	01c00084 	movi	r7,2
   2c4e8:	003f9c06 	br	2c35c <__alt_data_end+0xfffec35c>
   2c4ec:	3446b03a 	or	r3,r6,r17
   2c4f0:	18001e26 	beq	r3,zero,2c56c <__muldf3+0x2d4>
   2c4f4:	88012126 	beq	r17,zero,2c97c <__muldf3+0x6e4>
   2c4f8:	8809883a 	mov	r4,r17
   2c4fc:	d9400215 	stw	r5,8(sp)
   2c500:	d9800715 	stw	r6,28(sp)
   2c504:	da400415 	stw	r9,16(sp)
   2c508:	da800315 	stw	r10,12(sp)
   2c50c:	002d6040 	call	2d604 <__clzsi2>
   2c510:	d9400217 	ldw	r5,8(sp)
   2c514:	d9800717 	ldw	r6,28(sp)
   2c518:	da400417 	ldw	r9,16(sp)
   2c51c:	da800317 	ldw	r10,12(sp)
   2c520:	113ffd44 	addi	r4,r2,-11
   2c524:	00c00704 	movi	r3,28
   2c528:	19011016 	blt	r3,r4,2c96c <__muldf3+0x6d4>
   2c52c:	00c00744 	movi	r3,29
   2c530:	14bffe04 	addi	r18,r2,-8
   2c534:	1907c83a 	sub	r3,r3,r4
   2c538:	8ca2983a 	sll	r17,r17,r18
   2c53c:	30c6d83a 	srl	r3,r6,r3
   2c540:	34a4983a 	sll	r18,r6,r18
   2c544:	1c62b03a 	or	r17,r3,r17
   2c548:	1080fcc4 	addi	r2,r2,1011
   2c54c:	0085c83a 	sub	r2,zero,r2
   2c550:	000f883a 	mov	r7,zero
   2c554:	003f8106 	br	2c35c <__alt_data_end+0xfffec35c>
   2c558:	3027883a 	mov	r19,r6
   2c55c:	0081ffc4 	movi	r2,2047
   2c560:	0021883a 	mov	r16,zero
   2c564:	002d883a 	mov	r22,zero
   2c568:	003faa06 	br	2c414 <__alt_data_end+0xfffec414>
   2c56c:	0023883a 	mov	r17,zero
   2c570:	0025883a 	mov	r18,zero
   2c574:	01c00044 	movi	r7,1
   2c578:	003f7806 	br	2c35c <__alt_data_end+0xfffec35c>
   2c57c:	01c000c4 	movi	r7,3
   2c580:	003f7606 	br	2c35c <__alt_data_end+0xfffec35c>
   2c584:	05400104 	movi	r21,4
   2c588:	0021883a 	mov	r16,zero
   2c58c:	002d883a 	mov	r22,zero
   2c590:	01400044 	movi	r5,1
   2c594:	003f5f06 	br	2c314 <__alt_data_end+0xfffec314>
   2c598:	05400304 	movi	r21,12
   2c59c:	014000c4 	movi	r5,3
   2c5a0:	003f5c06 	br	2c314 <__alt_data_end+0xfffec314>
   2c5a4:	04000434 	movhi	r16,16
   2c5a8:	0027883a 	mov	r19,zero
   2c5ac:	843fffc4 	addi	r16,r16,-1
   2c5b0:	05bfffc4 	movi	r22,-1
   2c5b4:	0081ffc4 	movi	r2,2047
   2c5b8:	003f9606 	br	2c414 <__alt_data_end+0xfffec414>
   2c5bc:	8023883a 	mov	r17,r16
   2c5c0:	b025883a 	mov	r18,r22
   2c5c4:	280f883a 	mov	r7,r5
   2c5c8:	003f8806 	br	2c3ec <__alt_data_end+0xfffec3ec>
   2c5cc:	8023883a 	mov	r17,r16
   2c5d0:	b025883a 	mov	r18,r22
   2c5d4:	480d883a 	mov	r6,r9
   2c5d8:	280f883a 	mov	r7,r5
   2c5dc:	003f8306 	br	2c3ec <__alt_data_end+0xfffec3ec>
   2c5e0:	b026d43a 	srli	r19,r22,16
   2c5e4:	902ed43a 	srli	r23,r18,16
   2c5e8:	b5bfffcc 	andi	r22,r22,65535
   2c5ec:	94bfffcc 	andi	r18,r18,65535
   2c5f0:	b00b883a 	mov	r5,r22
   2c5f4:	9009883a 	mov	r4,r18
   2c5f8:	d8c00515 	stw	r3,20(sp)
   2c5fc:	d9800715 	stw	r6,28(sp)
   2c600:	da000615 	stw	r8,24(sp)
   2c604:	002ad9c0 	call	2ad9c <__mulsi3>
   2c608:	980b883a 	mov	r5,r19
   2c60c:	9009883a 	mov	r4,r18
   2c610:	1029883a 	mov	r20,r2
   2c614:	002ad9c0 	call	2ad9c <__mulsi3>
   2c618:	b80b883a 	mov	r5,r23
   2c61c:	9809883a 	mov	r4,r19
   2c620:	102b883a 	mov	r21,r2
   2c624:	002ad9c0 	call	2ad9c <__mulsi3>
   2c628:	b809883a 	mov	r4,r23
   2c62c:	b00b883a 	mov	r5,r22
   2c630:	1039883a 	mov	fp,r2
   2c634:	002ad9c0 	call	2ad9c <__mulsi3>
   2c638:	a008d43a 	srli	r4,r20,16
   2c63c:	1545883a 	add	r2,r2,r21
   2c640:	d8c00517 	ldw	r3,20(sp)
   2c644:	2085883a 	add	r2,r4,r2
   2c648:	d9800717 	ldw	r6,28(sp)
   2c64c:	da000617 	ldw	r8,24(sp)
   2c650:	1540022e 	bgeu	r2,r21,2c65c <__muldf3+0x3c4>
   2c654:	01000074 	movhi	r4,1
   2c658:	e139883a 	add	fp,fp,r4
   2c65c:	100e943a 	slli	r7,r2,16
   2c660:	1004d43a 	srli	r2,r2,16
   2c664:	882ad43a 	srli	r21,r17,16
   2c668:	a53fffcc 	andi	r20,r20,65535
   2c66c:	8c7fffcc 	andi	r17,r17,65535
   2c670:	3d29883a 	add	r20,r7,r20
   2c674:	b00b883a 	mov	r5,r22
   2c678:	8809883a 	mov	r4,r17
   2c67c:	d8c00515 	stw	r3,20(sp)
   2c680:	d9800715 	stw	r6,28(sp)
   2c684:	da000615 	stw	r8,24(sp)
   2c688:	dd000115 	stw	r20,4(sp)
   2c68c:	d8800015 	stw	r2,0(sp)
   2c690:	002ad9c0 	call	2ad9c <__mulsi3>
   2c694:	980b883a 	mov	r5,r19
   2c698:	8809883a 	mov	r4,r17
   2c69c:	d8800215 	stw	r2,8(sp)
   2c6a0:	002ad9c0 	call	2ad9c <__mulsi3>
   2c6a4:	9809883a 	mov	r4,r19
   2c6a8:	a80b883a 	mov	r5,r21
   2c6ac:	1029883a 	mov	r20,r2
   2c6b0:	002ad9c0 	call	2ad9c <__mulsi3>
   2c6b4:	b00b883a 	mov	r5,r22
   2c6b8:	a809883a 	mov	r4,r21
   2c6bc:	d8800415 	stw	r2,16(sp)
   2c6c0:	002ad9c0 	call	2ad9c <__mulsi3>
   2c6c4:	d9c00217 	ldw	r7,8(sp)
   2c6c8:	1505883a 	add	r2,r2,r20
   2c6cc:	d8c00517 	ldw	r3,20(sp)
   2c6d0:	3826d43a 	srli	r19,r7,16
   2c6d4:	d9800717 	ldw	r6,28(sp)
   2c6d8:	da000617 	ldw	r8,24(sp)
   2c6dc:	9885883a 	add	r2,r19,r2
   2c6e0:	da400417 	ldw	r9,16(sp)
   2c6e4:	1500022e 	bgeu	r2,r20,2c6f0 <__muldf3+0x458>
   2c6e8:	01000074 	movhi	r4,1
   2c6ec:	4913883a 	add	r9,r9,r4
   2c6f0:	1028d43a 	srli	r20,r2,16
   2c6f4:	1004943a 	slli	r2,r2,16
   2c6f8:	802cd43a 	srli	r22,r16,16
   2c6fc:	843fffcc 	andi	r16,r16,65535
   2c700:	3cffffcc 	andi	r19,r7,65535
   2c704:	9009883a 	mov	r4,r18
   2c708:	800b883a 	mov	r5,r16
   2c70c:	a269883a 	add	r20,r20,r9
   2c710:	d8c00515 	stw	r3,20(sp)
   2c714:	d9800715 	stw	r6,28(sp)
   2c718:	da000615 	stw	r8,24(sp)
   2c71c:	14e7883a 	add	r19,r2,r19
   2c720:	002ad9c0 	call	2ad9c <__mulsi3>
   2c724:	9009883a 	mov	r4,r18
   2c728:	b00b883a 	mov	r5,r22
   2c72c:	d8800315 	stw	r2,12(sp)
   2c730:	002ad9c0 	call	2ad9c <__mulsi3>
   2c734:	b809883a 	mov	r4,r23
   2c738:	b00b883a 	mov	r5,r22
   2c73c:	d8800215 	stw	r2,8(sp)
   2c740:	002ad9c0 	call	2ad9c <__mulsi3>
   2c744:	b80b883a 	mov	r5,r23
   2c748:	8009883a 	mov	r4,r16
   2c74c:	d8800415 	stw	r2,16(sp)
   2c750:	002ad9c0 	call	2ad9c <__mulsi3>
   2c754:	da800317 	ldw	r10,12(sp)
   2c758:	d9c00217 	ldw	r7,8(sp)
   2c75c:	d9000017 	ldw	r4,0(sp)
   2c760:	502ed43a 	srli	r23,r10,16
   2c764:	11c5883a 	add	r2,r2,r7
   2c768:	24e5883a 	add	r18,r4,r19
   2c76c:	b885883a 	add	r2,r23,r2
   2c770:	d8c00517 	ldw	r3,20(sp)
   2c774:	d9800717 	ldw	r6,28(sp)
   2c778:	da000617 	ldw	r8,24(sp)
   2c77c:	da400417 	ldw	r9,16(sp)
   2c780:	11c0022e 	bgeu	r2,r7,2c78c <__muldf3+0x4f4>
   2c784:	01000074 	movhi	r4,1
   2c788:	4913883a 	add	r9,r9,r4
   2c78c:	100ed43a 	srli	r7,r2,16
   2c790:	1004943a 	slli	r2,r2,16
   2c794:	55ffffcc 	andi	r23,r10,65535
   2c798:	3a53883a 	add	r9,r7,r9
   2c79c:	8809883a 	mov	r4,r17
   2c7a0:	800b883a 	mov	r5,r16
   2c7a4:	d8c00515 	stw	r3,20(sp)
   2c7a8:	d9800715 	stw	r6,28(sp)
   2c7ac:	da000615 	stw	r8,24(sp)
   2c7b0:	da400415 	stw	r9,16(sp)
   2c7b4:	15ef883a 	add	r23,r2,r23
   2c7b8:	002ad9c0 	call	2ad9c <__mulsi3>
   2c7bc:	8809883a 	mov	r4,r17
   2c7c0:	b00b883a 	mov	r5,r22
   2c7c4:	d8800215 	stw	r2,8(sp)
   2c7c8:	002ad9c0 	call	2ad9c <__mulsi3>
   2c7cc:	b00b883a 	mov	r5,r22
   2c7d0:	a809883a 	mov	r4,r21
   2c7d4:	d8800315 	stw	r2,12(sp)
   2c7d8:	002ad9c0 	call	2ad9c <__mulsi3>
   2c7dc:	8009883a 	mov	r4,r16
   2c7e0:	a80b883a 	mov	r5,r21
   2c7e4:	1023883a 	mov	r17,r2
   2c7e8:	002ad9c0 	call	2ad9c <__mulsi3>
   2c7ec:	d9c00217 	ldw	r7,8(sp)
   2c7f0:	da800317 	ldw	r10,12(sp)
   2c7f4:	d8c00517 	ldw	r3,20(sp)
   2c7f8:	3808d43a 	srli	r4,r7,16
   2c7fc:	1285883a 	add	r2,r2,r10
   2c800:	d9800717 	ldw	r6,28(sp)
   2c804:	2085883a 	add	r2,r4,r2
   2c808:	da000617 	ldw	r8,24(sp)
   2c80c:	da400417 	ldw	r9,16(sp)
   2c810:	1280022e 	bgeu	r2,r10,2c81c <__muldf3+0x584>
   2c814:	01000074 	movhi	r4,1
   2c818:	8923883a 	add	r17,r17,r4
   2c81c:	1008943a 	slli	r4,r2,16
   2c820:	39ffffcc 	andi	r7,r7,65535
   2c824:	e4b9883a 	add	fp,fp,r18
   2c828:	21cf883a 	add	r7,r4,r7
   2c82c:	e4e7803a 	cmpltu	r19,fp,r19
   2c830:	3d0f883a 	add	r7,r7,r20
   2c834:	bf39883a 	add	fp,r23,fp
   2c838:	99c9883a 	add	r4,r19,r7
   2c83c:	e5ef803a 	cmpltu	r23,fp,r23
   2c840:	490b883a 	add	r5,r9,r4
   2c844:	1004d43a 	srli	r2,r2,16
   2c848:	b965883a 	add	r18,r23,r5
   2c84c:	24c9803a 	cmpltu	r4,r4,r19
   2c850:	3d29803a 	cmpltu	r20,r7,r20
   2c854:	a128b03a 	or	r20,r20,r4
   2c858:	95ef803a 	cmpltu	r23,r18,r23
   2c85c:	2a53803a 	cmpltu	r9,r5,r9
   2c860:	a0a9883a 	add	r20,r20,r2
   2c864:	4deeb03a 	or	r23,r9,r23
   2c868:	a5ef883a 	add	r23,r20,r23
   2c86c:	bc63883a 	add	r17,r23,r17
   2c870:	e004927a 	slli	r2,fp,9
   2c874:	d9000117 	ldw	r4,4(sp)
   2c878:	882e927a 	slli	r23,r17,9
   2c87c:	9022d5fa 	srli	r17,r18,23
   2c880:	e038d5fa 	srli	fp,fp,23
   2c884:	1104b03a 	or	r2,r2,r4
   2c888:	9024927a 	slli	r18,r18,9
   2c88c:	1004c03a 	cmpne	r2,r2,zero
   2c890:	bc62b03a 	or	r17,r23,r17
   2c894:	1738b03a 	or	fp,r2,fp
   2c898:	8880402c 	andhi	r2,r17,256
   2c89c:	e4a4b03a 	or	r18,fp,r18
   2c8a0:	10000726 	beq	r2,zero,2c8c0 <__muldf3+0x628>
   2c8a4:	9006d07a 	srli	r3,r18,1
   2c8a8:	880497fa 	slli	r2,r17,31
   2c8ac:	9480004c 	andi	r18,r18,1
   2c8b0:	8822d07a 	srli	r17,r17,1
   2c8b4:	1ca4b03a 	or	r18,r3,r18
   2c8b8:	14a4b03a 	or	r18,r2,r18
   2c8bc:	4007883a 	mov	r3,r8
   2c8c0:	1880ffc4 	addi	r2,r3,1023
   2c8c4:	0080460e 	bge	zero,r2,2c9e0 <__muldf3+0x748>
   2c8c8:	910001cc 	andi	r4,r18,7
   2c8cc:	20000726 	beq	r4,zero,2c8ec <__muldf3+0x654>
   2c8d0:	910003cc 	andi	r4,r18,15
   2c8d4:	01400104 	movi	r5,4
   2c8d8:	21400426 	beq	r4,r5,2c8ec <__muldf3+0x654>
   2c8dc:	9149883a 	add	r4,r18,r5
   2c8e0:	24a5803a 	cmpltu	r18,r4,r18
   2c8e4:	8ca3883a 	add	r17,r17,r18
   2c8e8:	2025883a 	mov	r18,r4
   2c8ec:	8900402c 	andhi	r4,r17,256
   2c8f0:	20000426 	beq	r4,zero,2c904 <__muldf3+0x66c>
   2c8f4:	18810004 	addi	r2,r3,1024
   2c8f8:	00ffc034 	movhi	r3,65280
   2c8fc:	18ffffc4 	addi	r3,r3,-1
   2c900:	88e2703a 	and	r17,r17,r3
   2c904:	00c1ff84 	movi	r3,2046
   2c908:	18bf1316 	blt	r3,r2,2c558 <__alt_data_end+0xfffec558>
   2c90c:	882c977a 	slli	r22,r17,29
   2c910:	9024d0fa 	srli	r18,r18,3
   2c914:	8822927a 	slli	r17,r17,9
   2c918:	1081ffcc 	andi	r2,r2,2047
   2c91c:	b4acb03a 	or	r22,r22,r18
   2c920:	8820d33a 	srli	r16,r17,12
   2c924:	3027883a 	mov	r19,r6
   2c928:	003eba06 	br	2c414 <__alt_data_end+0xfffec414>
   2c92c:	8080022c 	andhi	r2,r16,8
   2c930:	10000926 	beq	r2,zero,2c958 <__muldf3+0x6c0>
   2c934:	8880022c 	andhi	r2,r17,8
   2c938:	1000071e 	bne	r2,zero,2c958 <__muldf3+0x6c0>
   2c93c:	00800434 	movhi	r2,16
   2c940:	8c000234 	orhi	r16,r17,8
   2c944:	10bfffc4 	addi	r2,r2,-1
   2c948:	e027883a 	mov	r19,fp
   2c94c:	80a0703a 	and	r16,r16,r2
   2c950:	902d883a 	mov	r22,r18
   2c954:	003f1706 	br	2c5b4 <__alt_data_end+0xfffec5b4>
   2c958:	00800434 	movhi	r2,16
   2c95c:	84000234 	orhi	r16,r16,8
   2c960:	10bfffc4 	addi	r2,r2,-1
   2c964:	80a0703a 	and	r16,r16,r2
   2c968:	003f1206 	br	2c5b4 <__alt_data_end+0xfffec5b4>
   2c96c:	147ff604 	addi	r17,r2,-40
   2c970:	3462983a 	sll	r17,r6,r17
   2c974:	0025883a 	mov	r18,zero
   2c978:	003ef306 	br	2c548 <__alt_data_end+0xfffec548>
   2c97c:	3009883a 	mov	r4,r6
   2c980:	d9400215 	stw	r5,8(sp)
   2c984:	d9800715 	stw	r6,28(sp)
   2c988:	da400415 	stw	r9,16(sp)
   2c98c:	da800315 	stw	r10,12(sp)
   2c990:	002d6040 	call	2d604 <__clzsi2>
   2c994:	10800804 	addi	r2,r2,32
   2c998:	da800317 	ldw	r10,12(sp)
   2c99c:	da400417 	ldw	r9,16(sp)
   2c9a0:	d9800717 	ldw	r6,28(sp)
   2c9a4:	d9400217 	ldw	r5,8(sp)
   2c9a8:	003edd06 	br	2c520 <__alt_data_end+0xfffec520>
   2c9ac:	143ff604 	addi	r16,r2,-40
   2c9b0:	ac20983a 	sll	r16,r21,r16
   2c9b4:	002d883a 	mov	r22,zero
   2c9b8:	003ec106 	br	2c4c0 <__alt_data_end+0xfffec4c0>
   2c9bc:	d9800715 	stw	r6,28(sp)
   2c9c0:	d9c00215 	stw	r7,8(sp)
   2c9c4:	da400415 	stw	r9,16(sp)
   2c9c8:	002d6040 	call	2d604 <__clzsi2>
   2c9cc:	10800804 	addi	r2,r2,32
   2c9d0:	da400417 	ldw	r9,16(sp)
   2c9d4:	d9c00217 	ldw	r7,8(sp)
   2c9d8:	d9800717 	ldw	r6,28(sp)
   2c9dc:	003eae06 	br	2c498 <__alt_data_end+0xfffec498>
   2c9e0:	00c00044 	movi	r3,1
   2c9e4:	1887c83a 	sub	r3,r3,r2
   2c9e8:	01000e04 	movi	r4,56
   2c9ec:	20fe8516 	blt	r4,r3,2c404 <__alt_data_end+0xfffec404>
   2c9f0:	010007c4 	movi	r4,31
   2c9f4:	20c01b16 	blt	r4,r3,2ca64 <__muldf3+0x7cc>
   2c9f8:	00800804 	movi	r2,32
   2c9fc:	10c5c83a 	sub	r2,r2,r3
   2ca00:	888a983a 	sll	r5,r17,r2
   2ca04:	90c8d83a 	srl	r4,r18,r3
   2ca08:	9084983a 	sll	r2,r18,r2
   2ca0c:	88e2d83a 	srl	r17,r17,r3
   2ca10:	2906b03a 	or	r3,r5,r4
   2ca14:	1004c03a 	cmpne	r2,r2,zero
   2ca18:	1886b03a 	or	r3,r3,r2
   2ca1c:	188001cc 	andi	r2,r3,7
   2ca20:	10000726 	beq	r2,zero,2ca40 <__muldf3+0x7a8>
   2ca24:	188003cc 	andi	r2,r3,15
   2ca28:	01000104 	movi	r4,4
   2ca2c:	11000426 	beq	r2,r4,2ca40 <__muldf3+0x7a8>
   2ca30:	1805883a 	mov	r2,r3
   2ca34:	10c00104 	addi	r3,r2,4
   2ca38:	1885803a 	cmpltu	r2,r3,r2
   2ca3c:	88a3883a 	add	r17,r17,r2
   2ca40:	8880202c 	andhi	r2,r17,128
   2ca44:	10001c26 	beq	r2,zero,2cab8 <__muldf3+0x820>
   2ca48:	3027883a 	mov	r19,r6
   2ca4c:	00800044 	movi	r2,1
   2ca50:	0021883a 	mov	r16,zero
   2ca54:	002d883a 	mov	r22,zero
   2ca58:	003e6e06 	br	2c414 <__alt_data_end+0xfffec414>
   2ca5c:	4007883a 	mov	r3,r8
   2ca60:	003f9706 	br	2c8c0 <__alt_data_end+0xfffec8c0>
   2ca64:	017ff844 	movi	r5,-31
   2ca68:	2885c83a 	sub	r2,r5,r2
   2ca6c:	888ad83a 	srl	r5,r17,r2
   2ca70:	00800804 	movi	r2,32
   2ca74:	18801a26 	beq	r3,r2,2cae0 <__muldf3+0x848>
   2ca78:	01001004 	movi	r4,64
   2ca7c:	20c7c83a 	sub	r3,r4,r3
   2ca80:	88e2983a 	sll	r17,r17,r3
   2ca84:	8ca4b03a 	or	r18,r17,r18
   2ca88:	9004c03a 	cmpne	r2,r18,zero
   2ca8c:	2884b03a 	or	r2,r5,r2
   2ca90:	144001cc 	andi	r17,r2,7
   2ca94:	88000d1e 	bne	r17,zero,2cacc <__muldf3+0x834>
   2ca98:	0021883a 	mov	r16,zero
   2ca9c:	102cd0fa 	srli	r22,r2,3
   2caa0:	3027883a 	mov	r19,r6
   2caa4:	0005883a 	mov	r2,zero
   2caa8:	b46cb03a 	or	r22,r22,r17
   2caac:	003e5906 	br	2c414 <__alt_data_end+0xfffec414>
   2cab0:	1007883a 	mov	r3,r2
   2cab4:	0023883a 	mov	r17,zero
   2cab8:	8820927a 	slli	r16,r17,9
   2cabc:	1805883a 	mov	r2,r3
   2cac0:	8822977a 	slli	r17,r17,29
   2cac4:	8020d33a 	srli	r16,r16,12
   2cac8:	003ff406 	br	2ca9c <__alt_data_end+0xfffeca9c>
   2cacc:	10c003cc 	andi	r3,r2,15
   2cad0:	01000104 	movi	r4,4
   2cad4:	193ff626 	beq	r3,r4,2cab0 <__alt_data_end+0xfffecab0>
   2cad8:	0023883a 	mov	r17,zero
   2cadc:	003fd506 	br	2ca34 <__alt_data_end+0xfffeca34>
   2cae0:	0023883a 	mov	r17,zero
   2cae4:	003fe706 	br	2ca84 <__alt_data_end+0xfffeca84>
   2cae8:	00800434 	movhi	r2,16
   2caec:	8c000234 	orhi	r16,r17,8
   2caf0:	10bfffc4 	addi	r2,r2,-1
   2caf4:	3027883a 	mov	r19,r6
   2caf8:	80a0703a 	and	r16,r16,r2
   2cafc:	902d883a 	mov	r22,r18
   2cb00:	003eac06 	br	2c5b4 <__alt_data_end+0xfffec5b4>

0002cb04 <__subdf3>:
   2cb04:	02000434 	movhi	r8,16
   2cb08:	423fffc4 	addi	r8,r8,-1
   2cb0c:	defffb04 	addi	sp,sp,-20
   2cb10:	2a14703a 	and	r10,r5,r8
   2cb14:	3812d53a 	srli	r9,r7,20
   2cb18:	3a10703a 	and	r8,r7,r8
   2cb1c:	2006d77a 	srli	r3,r4,29
   2cb20:	3004d77a 	srli	r2,r6,29
   2cb24:	dc000015 	stw	r16,0(sp)
   2cb28:	501490fa 	slli	r10,r10,3
   2cb2c:	2820d53a 	srli	r16,r5,20
   2cb30:	401090fa 	slli	r8,r8,3
   2cb34:	dc800215 	stw	r18,8(sp)
   2cb38:	dc400115 	stw	r17,4(sp)
   2cb3c:	dfc00415 	stw	ra,16(sp)
   2cb40:	202290fa 	slli	r17,r4,3
   2cb44:	dcc00315 	stw	r19,12(sp)
   2cb48:	4a41ffcc 	andi	r9,r9,2047
   2cb4c:	0101ffc4 	movi	r4,2047
   2cb50:	2824d7fa 	srli	r18,r5,31
   2cb54:	8401ffcc 	andi	r16,r16,2047
   2cb58:	50c6b03a 	or	r3,r10,r3
   2cb5c:	380ed7fa 	srli	r7,r7,31
   2cb60:	408ab03a 	or	r5,r8,r2
   2cb64:	300c90fa 	slli	r6,r6,3
   2cb68:	49009626 	beq	r9,r4,2cdc4 <__subdf3+0x2c0>
   2cb6c:	39c0005c 	xori	r7,r7,1
   2cb70:	8245c83a 	sub	r2,r16,r9
   2cb74:	3c807426 	beq	r7,r18,2cd48 <__subdf3+0x244>
   2cb78:	0080af0e 	bge	zero,r2,2ce38 <__subdf3+0x334>
   2cb7c:	48002a1e 	bne	r9,zero,2cc28 <__subdf3+0x124>
   2cb80:	2988b03a 	or	r4,r5,r6
   2cb84:	20009a1e 	bne	r4,zero,2cdf0 <__subdf3+0x2ec>
   2cb88:	888001cc 	andi	r2,r17,7
   2cb8c:	10000726 	beq	r2,zero,2cbac <__subdf3+0xa8>
   2cb90:	888003cc 	andi	r2,r17,15
   2cb94:	01000104 	movi	r4,4
   2cb98:	11000426 	beq	r2,r4,2cbac <__subdf3+0xa8>
   2cb9c:	890b883a 	add	r5,r17,r4
   2cba0:	2c63803a 	cmpltu	r17,r5,r17
   2cba4:	1c47883a 	add	r3,r3,r17
   2cba8:	2823883a 	mov	r17,r5
   2cbac:	1880202c 	andhi	r2,r3,128
   2cbb0:	10005926 	beq	r2,zero,2cd18 <__subdf3+0x214>
   2cbb4:	84000044 	addi	r16,r16,1
   2cbb8:	0081ffc4 	movi	r2,2047
   2cbbc:	8080be26 	beq	r16,r2,2ceb8 <__subdf3+0x3b4>
   2cbc0:	017fe034 	movhi	r5,65408
   2cbc4:	297fffc4 	addi	r5,r5,-1
   2cbc8:	1946703a 	and	r3,r3,r5
   2cbcc:	1804977a 	slli	r2,r3,29
   2cbd0:	1806927a 	slli	r3,r3,9
   2cbd4:	8822d0fa 	srli	r17,r17,3
   2cbd8:	8401ffcc 	andi	r16,r16,2047
   2cbdc:	180ad33a 	srli	r5,r3,12
   2cbe0:	9100004c 	andi	r4,r18,1
   2cbe4:	1444b03a 	or	r2,r2,r17
   2cbe8:	80c1ffcc 	andi	r3,r16,2047
   2cbec:	1820953a 	slli	r16,r3,20
   2cbf0:	20c03fcc 	andi	r3,r4,255
   2cbf4:	180897fa 	slli	r4,r3,31
   2cbf8:	00c00434 	movhi	r3,16
   2cbfc:	18ffffc4 	addi	r3,r3,-1
   2cc00:	28c6703a 	and	r3,r5,r3
   2cc04:	1c06b03a 	or	r3,r3,r16
   2cc08:	1906b03a 	or	r3,r3,r4
   2cc0c:	dfc00417 	ldw	ra,16(sp)
   2cc10:	dcc00317 	ldw	r19,12(sp)
   2cc14:	dc800217 	ldw	r18,8(sp)
   2cc18:	dc400117 	ldw	r17,4(sp)
   2cc1c:	dc000017 	ldw	r16,0(sp)
   2cc20:	dec00504 	addi	sp,sp,20
   2cc24:	f800283a 	ret
   2cc28:	0101ffc4 	movi	r4,2047
   2cc2c:	813fd626 	beq	r16,r4,2cb88 <__alt_data_end+0xfffecb88>
   2cc30:	29402034 	orhi	r5,r5,128
   2cc34:	01000e04 	movi	r4,56
   2cc38:	2080a316 	blt	r4,r2,2cec8 <__subdf3+0x3c4>
   2cc3c:	010007c4 	movi	r4,31
   2cc40:	2080c616 	blt	r4,r2,2cf5c <__subdf3+0x458>
   2cc44:	01000804 	movi	r4,32
   2cc48:	2089c83a 	sub	r4,r4,r2
   2cc4c:	2910983a 	sll	r8,r5,r4
   2cc50:	308ed83a 	srl	r7,r6,r2
   2cc54:	3108983a 	sll	r4,r6,r4
   2cc58:	2884d83a 	srl	r2,r5,r2
   2cc5c:	41ccb03a 	or	r6,r8,r7
   2cc60:	2008c03a 	cmpne	r4,r4,zero
   2cc64:	310cb03a 	or	r6,r6,r4
   2cc68:	898dc83a 	sub	r6,r17,r6
   2cc6c:	89a3803a 	cmpltu	r17,r17,r6
   2cc70:	1887c83a 	sub	r3,r3,r2
   2cc74:	1c47c83a 	sub	r3,r3,r17
   2cc78:	3023883a 	mov	r17,r6
   2cc7c:	1880202c 	andhi	r2,r3,128
   2cc80:	10002326 	beq	r2,zero,2cd10 <__subdf3+0x20c>
   2cc84:	04c02034 	movhi	r19,128
   2cc88:	9cffffc4 	addi	r19,r19,-1
   2cc8c:	1ce6703a 	and	r19,r3,r19
   2cc90:	98007a26 	beq	r19,zero,2ce7c <__subdf3+0x378>
   2cc94:	9809883a 	mov	r4,r19
   2cc98:	002d6040 	call	2d604 <__clzsi2>
   2cc9c:	113ffe04 	addi	r4,r2,-8
   2cca0:	00c007c4 	movi	r3,31
   2cca4:	19007b16 	blt	r3,r4,2ce94 <__subdf3+0x390>
   2cca8:	00800804 	movi	r2,32
   2ccac:	1105c83a 	sub	r2,r2,r4
   2ccb0:	8884d83a 	srl	r2,r17,r2
   2ccb4:	9906983a 	sll	r3,r19,r4
   2ccb8:	8922983a 	sll	r17,r17,r4
   2ccbc:	10c4b03a 	or	r2,r2,r3
   2ccc0:	24007816 	blt	r4,r16,2cea4 <__subdf3+0x3a0>
   2ccc4:	2421c83a 	sub	r16,r4,r16
   2ccc8:	80c00044 	addi	r3,r16,1
   2cccc:	010007c4 	movi	r4,31
   2ccd0:	20c09516 	blt	r4,r3,2cf28 <__subdf3+0x424>
   2ccd4:	01400804 	movi	r5,32
   2ccd8:	28cbc83a 	sub	r5,r5,r3
   2ccdc:	88c8d83a 	srl	r4,r17,r3
   2cce0:	8962983a 	sll	r17,r17,r5
   2cce4:	114a983a 	sll	r5,r2,r5
   2cce8:	10c6d83a 	srl	r3,r2,r3
   2ccec:	8804c03a 	cmpne	r2,r17,zero
   2ccf0:	290ab03a 	or	r5,r5,r4
   2ccf4:	28a2b03a 	or	r17,r5,r2
   2ccf8:	0021883a 	mov	r16,zero
   2ccfc:	003fa206 	br	2cb88 <__alt_data_end+0xfffecb88>
   2cd00:	2090b03a 	or	r8,r4,r2
   2cd04:	40018e26 	beq	r8,zero,2d340 <__subdf3+0x83c>
   2cd08:	1007883a 	mov	r3,r2
   2cd0c:	2023883a 	mov	r17,r4
   2cd10:	888001cc 	andi	r2,r17,7
   2cd14:	103f9e1e 	bne	r2,zero,2cb90 <__alt_data_end+0xfffecb90>
   2cd18:	1804977a 	slli	r2,r3,29
   2cd1c:	8822d0fa 	srli	r17,r17,3
   2cd20:	1810d0fa 	srli	r8,r3,3
   2cd24:	9100004c 	andi	r4,r18,1
   2cd28:	1444b03a 	or	r2,r2,r17
   2cd2c:	00c1ffc4 	movi	r3,2047
   2cd30:	80c02826 	beq	r16,r3,2cdd4 <__subdf3+0x2d0>
   2cd34:	01400434 	movhi	r5,16
   2cd38:	297fffc4 	addi	r5,r5,-1
   2cd3c:	80e0703a 	and	r16,r16,r3
   2cd40:	414a703a 	and	r5,r8,r5
   2cd44:	003fa806 	br	2cbe8 <__alt_data_end+0xfffecbe8>
   2cd48:	0080630e 	bge	zero,r2,2ced8 <__subdf3+0x3d4>
   2cd4c:	48003026 	beq	r9,zero,2ce10 <__subdf3+0x30c>
   2cd50:	0101ffc4 	movi	r4,2047
   2cd54:	813f8c26 	beq	r16,r4,2cb88 <__alt_data_end+0xfffecb88>
   2cd58:	29402034 	orhi	r5,r5,128
   2cd5c:	01000e04 	movi	r4,56
   2cd60:	2080a90e 	bge	r4,r2,2d008 <__subdf3+0x504>
   2cd64:	298cb03a 	or	r6,r5,r6
   2cd68:	3012c03a 	cmpne	r9,r6,zero
   2cd6c:	0005883a 	mov	r2,zero
   2cd70:	4c53883a 	add	r9,r9,r17
   2cd74:	4c63803a 	cmpltu	r17,r9,r17
   2cd78:	10c7883a 	add	r3,r2,r3
   2cd7c:	88c7883a 	add	r3,r17,r3
   2cd80:	4823883a 	mov	r17,r9
   2cd84:	1880202c 	andhi	r2,r3,128
   2cd88:	1000d026 	beq	r2,zero,2d0cc <__subdf3+0x5c8>
   2cd8c:	84000044 	addi	r16,r16,1
   2cd90:	0081ffc4 	movi	r2,2047
   2cd94:	8080fe26 	beq	r16,r2,2d190 <__subdf3+0x68c>
   2cd98:	00bfe034 	movhi	r2,65408
   2cd9c:	10bfffc4 	addi	r2,r2,-1
   2cda0:	1886703a 	and	r3,r3,r2
   2cda4:	880ad07a 	srli	r5,r17,1
   2cda8:	180497fa 	slli	r2,r3,31
   2cdac:	8900004c 	andi	r4,r17,1
   2cdb0:	2922b03a 	or	r17,r5,r4
   2cdb4:	1806d07a 	srli	r3,r3,1
   2cdb8:	1462b03a 	or	r17,r2,r17
   2cdbc:	3825883a 	mov	r18,r7
   2cdc0:	003f7106 	br	2cb88 <__alt_data_end+0xfffecb88>
   2cdc4:	2984b03a 	or	r2,r5,r6
   2cdc8:	103f6826 	beq	r2,zero,2cb6c <__alt_data_end+0xfffecb6c>
   2cdcc:	39c03fcc 	andi	r7,r7,255
   2cdd0:	003f6706 	br	2cb70 <__alt_data_end+0xfffecb70>
   2cdd4:	4086b03a 	or	r3,r8,r2
   2cdd8:	18015226 	beq	r3,zero,2d324 <__subdf3+0x820>
   2cddc:	00c00434 	movhi	r3,16
   2cde0:	41400234 	orhi	r5,r8,8
   2cde4:	18ffffc4 	addi	r3,r3,-1
   2cde8:	28ca703a 	and	r5,r5,r3
   2cdec:	003f7e06 	br	2cbe8 <__alt_data_end+0xfffecbe8>
   2cdf0:	10bfffc4 	addi	r2,r2,-1
   2cdf4:	1000491e 	bne	r2,zero,2cf1c <__subdf3+0x418>
   2cdf8:	898fc83a 	sub	r7,r17,r6
   2cdfc:	89e3803a 	cmpltu	r17,r17,r7
   2ce00:	1947c83a 	sub	r3,r3,r5
   2ce04:	1c47c83a 	sub	r3,r3,r17
   2ce08:	3823883a 	mov	r17,r7
   2ce0c:	003f9b06 	br	2cc7c <__alt_data_end+0xfffecc7c>
   2ce10:	2988b03a 	or	r4,r5,r6
   2ce14:	203f5c26 	beq	r4,zero,2cb88 <__alt_data_end+0xfffecb88>
   2ce18:	10bfffc4 	addi	r2,r2,-1
   2ce1c:	1000931e 	bne	r2,zero,2d06c <__subdf3+0x568>
   2ce20:	898d883a 	add	r6,r17,r6
   2ce24:	3463803a 	cmpltu	r17,r6,r17
   2ce28:	1947883a 	add	r3,r3,r5
   2ce2c:	88c7883a 	add	r3,r17,r3
   2ce30:	3023883a 	mov	r17,r6
   2ce34:	003fd306 	br	2cd84 <__alt_data_end+0xfffecd84>
   2ce38:	1000541e 	bne	r2,zero,2cf8c <__subdf3+0x488>
   2ce3c:	80800044 	addi	r2,r16,1
   2ce40:	1081ffcc 	andi	r2,r2,2047
   2ce44:	01000044 	movi	r4,1
   2ce48:	2080a20e 	bge	r4,r2,2d0d4 <__subdf3+0x5d0>
   2ce4c:	8989c83a 	sub	r4,r17,r6
   2ce50:	8905803a 	cmpltu	r2,r17,r4
   2ce54:	1967c83a 	sub	r19,r3,r5
   2ce58:	98a7c83a 	sub	r19,r19,r2
   2ce5c:	9880202c 	andhi	r2,r19,128
   2ce60:	10006326 	beq	r2,zero,2cff0 <__subdf3+0x4ec>
   2ce64:	3463c83a 	sub	r17,r6,r17
   2ce68:	28c7c83a 	sub	r3,r5,r3
   2ce6c:	344d803a 	cmpltu	r6,r6,r17
   2ce70:	19a7c83a 	sub	r19,r3,r6
   2ce74:	3825883a 	mov	r18,r7
   2ce78:	983f861e 	bne	r19,zero,2cc94 <__alt_data_end+0xfffecc94>
   2ce7c:	8809883a 	mov	r4,r17
   2ce80:	002d6040 	call	2d604 <__clzsi2>
   2ce84:	10800804 	addi	r2,r2,32
   2ce88:	113ffe04 	addi	r4,r2,-8
   2ce8c:	00c007c4 	movi	r3,31
   2ce90:	193f850e 	bge	r3,r4,2cca8 <__alt_data_end+0xfffecca8>
   2ce94:	10bff604 	addi	r2,r2,-40
   2ce98:	8884983a 	sll	r2,r17,r2
   2ce9c:	0023883a 	mov	r17,zero
   2cea0:	243f880e 	bge	r4,r16,2ccc4 <__alt_data_end+0xfffeccc4>
   2cea4:	00ffe034 	movhi	r3,65408
   2cea8:	18ffffc4 	addi	r3,r3,-1
   2ceac:	8121c83a 	sub	r16,r16,r4
   2ceb0:	10c6703a 	and	r3,r2,r3
   2ceb4:	003f3406 	br	2cb88 <__alt_data_end+0xfffecb88>
   2ceb8:	9100004c 	andi	r4,r18,1
   2cebc:	000b883a 	mov	r5,zero
   2cec0:	0005883a 	mov	r2,zero
   2cec4:	003f4806 	br	2cbe8 <__alt_data_end+0xfffecbe8>
   2cec8:	298cb03a 	or	r6,r5,r6
   2cecc:	300cc03a 	cmpne	r6,r6,zero
   2ced0:	0005883a 	mov	r2,zero
   2ced4:	003f6406 	br	2cc68 <__alt_data_end+0xfffecc68>
   2ced8:	10009a1e 	bne	r2,zero,2d144 <__subdf3+0x640>
   2cedc:	82400044 	addi	r9,r16,1
   2cee0:	4881ffcc 	andi	r2,r9,2047
   2cee4:	02800044 	movi	r10,1
   2cee8:	5080670e 	bge	r10,r2,2d088 <__subdf3+0x584>
   2ceec:	0081ffc4 	movi	r2,2047
   2cef0:	4880af26 	beq	r9,r2,2d1b0 <__subdf3+0x6ac>
   2cef4:	898d883a 	add	r6,r17,r6
   2cef8:	1945883a 	add	r2,r3,r5
   2cefc:	3447803a 	cmpltu	r3,r6,r17
   2cf00:	1887883a 	add	r3,r3,r2
   2cf04:	182297fa 	slli	r17,r3,31
   2cf08:	300cd07a 	srli	r6,r6,1
   2cf0c:	1806d07a 	srli	r3,r3,1
   2cf10:	4821883a 	mov	r16,r9
   2cf14:	89a2b03a 	or	r17,r17,r6
   2cf18:	003f1b06 	br	2cb88 <__alt_data_end+0xfffecb88>
   2cf1c:	0101ffc4 	movi	r4,2047
   2cf20:	813f441e 	bne	r16,r4,2cc34 <__alt_data_end+0xfffecc34>
   2cf24:	003f1806 	br	2cb88 <__alt_data_end+0xfffecb88>
   2cf28:	843ff844 	addi	r16,r16,-31
   2cf2c:	01400804 	movi	r5,32
   2cf30:	1408d83a 	srl	r4,r2,r16
   2cf34:	19405026 	beq	r3,r5,2d078 <__subdf3+0x574>
   2cf38:	01401004 	movi	r5,64
   2cf3c:	28c7c83a 	sub	r3,r5,r3
   2cf40:	10c4983a 	sll	r2,r2,r3
   2cf44:	88a2b03a 	or	r17,r17,r2
   2cf48:	8822c03a 	cmpne	r17,r17,zero
   2cf4c:	2462b03a 	or	r17,r4,r17
   2cf50:	0007883a 	mov	r3,zero
   2cf54:	0021883a 	mov	r16,zero
   2cf58:	003f6d06 	br	2cd10 <__alt_data_end+0xfffecd10>
   2cf5c:	11fff804 	addi	r7,r2,-32
   2cf60:	01000804 	movi	r4,32
   2cf64:	29ced83a 	srl	r7,r5,r7
   2cf68:	11004526 	beq	r2,r4,2d080 <__subdf3+0x57c>
   2cf6c:	01001004 	movi	r4,64
   2cf70:	2089c83a 	sub	r4,r4,r2
   2cf74:	2904983a 	sll	r2,r5,r4
   2cf78:	118cb03a 	or	r6,r2,r6
   2cf7c:	300cc03a 	cmpne	r6,r6,zero
   2cf80:	398cb03a 	or	r6,r7,r6
   2cf84:	0005883a 	mov	r2,zero
   2cf88:	003f3706 	br	2cc68 <__alt_data_end+0xfffecc68>
   2cf8c:	80002a26 	beq	r16,zero,2d038 <__subdf3+0x534>
   2cf90:	0101ffc4 	movi	r4,2047
   2cf94:	49006626 	beq	r9,r4,2d130 <__subdf3+0x62c>
   2cf98:	0085c83a 	sub	r2,zero,r2
   2cf9c:	18c02034 	orhi	r3,r3,128
   2cfa0:	01000e04 	movi	r4,56
   2cfa4:	20807e16 	blt	r4,r2,2d1a0 <__subdf3+0x69c>
   2cfa8:	010007c4 	movi	r4,31
   2cfac:	2080e716 	blt	r4,r2,2d34c <__subdf3+0x848>
   2cfb0:	01000804 	movi	r4,32
   2cfb4:	2089c83a 	sub	r4,r4,r2
   2cfb8:	1914983a 	sll	r10,r3,r4
   2cfbc:	8890d83a 	srl	r8,r17,r2
   2cfc0:	8908983a 	sll	r4,r17,r4
   2cfc4:	1884d83a 	srl	r2,r3,r2
   2cfc8:	5222b03a 	or	r17,r10,r8
   2cfcc:	2006c03a 	cmpne	r3,r4,zero
   2cfd0:	88e2b03a 	or	r17,r17,r3
   2cfd4:	3463c83a 	sub	r17,r6,r17
   2cfd8:	2885c83a 	sub	r2,r5,r2
   2cfdc:	344d803a 	cmpltu	r6,r6,r17
   2cfe0:	1187c83a 	sub	r3,r2,r6
   2cfe4:	4821883a 	mov	r16,r9
   2cfe8:	3825883a 	mov	r18,r7
   2cfec:	003f2306 	br	2cc7c <__alt_data_end+0xfffecc7c>
   2cff0:	24d0b03a 	or	r8,r4,r19
   2cff4:	40001b1e 	bne	r8,zero,2d064 <__subdf3+0x560>
   2cff8:	0005883a 	mov	r2,zero
   2cffc:	0009883a 	mov	r4,zero
   2d000:	0021883a 	mov	r16,zero
   2d004:	003f4906 	br	2cd2c <__alt_data_end+0xfffecd2c>
   2d008:	010007c4 	movi	r4,31
   2d00c:	20803a16 	blt	r4,r2,2d0f8 <__subdf3+0x5f4>
   2d010:	01000804 	movi	r4,32
   2d014:	2089c83a 	sub	r4,r4,r2
   2d018:	2912983a 	sll	r9,r5,r4
   2d01c:	3090d83a 	srl	r8,r6,r2
   2d020:	3108983a 	sll	r4,r6,r4
   2d024:	2884d83a 	srl	r2,r5,r2
   2d028:	4a12b03a 	or	r9,r9,r8
   2d02c:	2008c03a 	cmpne	r4,r4,zero
   2d030:	4912b03a 	or	r9,r9,r4
   2d034:	003f4e06 	br	2cd70 <__alt_data_end+0xfffecd70>
   2d038:	1c48b03a 	or	r4,r3,r17
   2d03c:	20003c26 	beq	r4,zero,2d130 <__subdf3+0x62c>
   2d040:	0084303a 	nor	r2,zero,r2
   2d044:	1000381e 	bne	r2,zero,2d128 <__subdf3+0x624>
   2d048:	3463c83a 	sub	r17,r6,r17
   2d04c:	28c5c83a 	sub	r2,r5,r3
   2d050:	344d803a 	cmpltu	r6,r6,r17
   2d054:	1187c83a 	sub	r3,r2,r6
   2d058:	4821883a 	mov	r16,r9
   2d05c:	3825883a 	mov	r18,r7
   2d060:	003f0606 	br	2cc7c <__alt_data_end+0xfffecc7c>
   2d064:	2023883a 	mov	r17,r4
   2d068:	003f0906 	br	2cc90 <__alt_data_end+0xfffecc90>
   2d06c:	0101ffc4 	movi	r4,2047
   2d070:	813f3a1e 	bne	r16,r4,2cd5c <__alt_data_end+0xfffecd5c>
   2d074:	003ec406 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d078:	0005883a 	mov	r2,zero
   2d07c:	003fb106 	br	2cf44 <__alt_data_end+0xfffecf44>
   2d080:	0005883a 	mov	r2,zero
   2d084:	003fbc06 	br	2cf78 <__alt_data_end+0xfffecf78>
   2d088:	1c44b03a 	or	r2,r3,r17
   2d08c:	80008e1e 	bne	r16,zero,2d2c8 <__subdf3+0x7c4>
   2d090:	1000c826 	beq	r2,zero,2d3b4 <__subdf3+0x8b0>
   2d094:	2984b03a 	or	r2,r5,r6
   2d098:	103ebb26 	beq	r2,zero,2cb88 <__alt_data_end+0xfffecb88>
   2d09c:	8989883a 	add	r4,r17,r6
   2d0a0:	1945883a 	add	r2,r3,r5
   2d0a4:	2447803a 	cmpltu	r3,r4,r17
   2d0a8:	1887883a 	add	r3,r3,r2
   2d0ac:	1880202c 	andhi	r2,r3,128
   2d0b0:	2023883a 	mov	r17,r4
   2d0b4:	103f1626 	beq	r2,zero,2cd10 <__alt_data_end+0xfffecd10>
   2d0b8:	00bfe034 	movhi	r2,65408
   2d0bc:	10bfffc4 	addi	r2,r2,-1
   2d0c0:	5021883a 	mov	r16,r10
   2d0c4:	1886703a 	and	r3,r3,r2
   2d0c8:	003eaf06 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d0cc:	3825883a 	mov	r18,r7
   2d0d0:	003f0f06 	br	2cd10 <__alt_data_end+0xfffecd10>
   2d0d4:	1c44b03a 	or	r2,r3,r17
   2d0d8:	8000251e 	bne	r16,zero,2d170 <__subdf3+0x66c>
   2d0dc:	1000661e 	bne	r2,zero,2d278 <__subdf3+0x774>
   2d0e0:	2990b03a 	or	r8,r5,r6
   2d0e4:	40009626 	beq	r8,zero,2d340 <__subdf3+0x83c>
   2d0e8:	2807883a 	mov	r3,r5
   2d0ec:	3023883a 	mov	r17,r6
   2d0f0:	3825883a 	mov	r18,r7
   2d0f4:	003ea406 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d0f8:	127ff804 	addi	r9,r2,-32
   2d0fc:	01000804 	movi	r4,32
   2d100:	2a52d83a 	srl	r9,r5,r9
   2d104:	11008c26 	beq	r2,r4,2d338 <__subdf3+0x834>
   2d108:	01001004 	movi	r4,64
   2d10c:	2085c83a 	sub	r2,r4,r2
   2d110:	2884983a 	sll	r2,r5,r2
   2d114:	118cb03a 	or	r6,r2,r6
   2d118:	300cc03a 	cmpne	r6,r6,zero
   2d11c:	4992b03a 	or	r9,r9,r6
   2d120:	0005883a 	mov	r2,zero
   2d124:	003f1206 	br	2cd70 <__alt_data_end+0xfffecd70>
   2d128:	0101ffc4 	movi	r4,2047
   2d12c:	493f9c1e 	bne	r9,r4,2cfa0 <__alt_data_end+0xfffecfa0>
   2d130:	2807883a 	mov	r3,r5
   2d134:	3023883a 	mov	r17,r6
   2d138:	4821883a 	mov	r16,r9
   2d13c:	3825883a 	mov	r18,r7
   2d140:	003e9106 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d144:	80001f1e 	bne	r16,zero,2d1c4 <__subdf3+0x6c0>
   2d148:	1c48b03a 	or	r4,r3,r17
   2d14c:	20005a26 	beq	r4,zero,2d2b8 <__subdf3+0x7b4>
   2d150:	0084303a 	nor	r2,zero,r2
   2d154:	1000561e 	bne	r2,zero,2d2b0 <__subdf3+0x7ac>
   2d158:	89a3883a 	add	r17,r17,r6
   2d15c:	1945883a 	add	r2,r3,r5
   2d160:	898d803a 	cmpltu	r6,r17,r6
   2d164:	3087883a 	add	r3,r6,r2
   2d168:	4821883a 	mov	r16,r9
   2d16c:	003f0506 	br	2cd84 <__alt_data_end+0xfffecd84>
   2d170:	10002b1e 	bne	r2,zero,2d220 <__subdf3+0x71c>
   2d174:	2984b03a 	or	r2,r5,r6
   2d178:	10008026 	beq	r2,zero,2d37c <__subdf3+0x878>
   2d17c:	2807883a 	mov	r3,r5
   2d180:	3023883a 	mov	r17,r6
   2d184:	3825883a 	mov	r18,r7
   2d188:	0401ffc4 	movi	r16,2047
   2d18c:	003e7e06 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d190:	3809883a 	mov	r4,r7
   2d194:	0011883a 	mov	r8,zero
   2d198:	0005883a 	mov	r2,zero
   2d19c:	003ee306 	br	2cd2c <__alt_data_end+0xfffecd2c>
   2d1a0:	1c62b03a 	or	r17,r3,r17
   2d1a4:	8822c03a 	cmpne	r17,r17,zero
   2d1a8:	0005883a 	mov	r2,zero
   2d1ac:	003f8906 	br	2cfd4 <__alt_data_end+0xfffecfd4>
   2d1b0:	3809883a 	mov	r4,r7
   2d1b4:	4821883a 	mov	r16,r9
   2d1b8:	0011883a 	mov	r8,zero
   2d1bc:	0005883a 	mov	r2,zero
   2d1c0:	003eda06 	br	2cd2c <__alt_data_end+0xfffecd2c>
   2d1c4:	0101ffc4 	movi	r4,2047
   2d1c8:	49003b26 	beq	r9,r4,2d2b8 <__subdf3+0x7b4>
   2d1cc:	0085c83a 	sub	r2,zero,r2
   2d1d0:	18c02034 	orhi	r3,r3,128
   2d1d4:	01000e04 	movi	r4,56
   2d1d8:	20806e16 	blt	r4,r2,2d394 <__subdf3+0x890>
   2d1dc:	010007c4 	movi	r4,31
   2d1e0:	20807716 	blt	r4,r2,2d3c0 <__subdf3+0x8bc>
   2d1e4:	01000804 	movi	r4,32
   2d1e8:	2089c83a 	sub	r4,r4,r2
   2d1ec:	1914983a 	sll	r10,r3,r4
   2d1f0:	8890d83a 	srl	r8,r17,r2
   2d1f4:	8908983a 	sll	r4,r17,r4
   2d1f8:	1884d83a 	srl	r2,r3,r2
   2d1fc:	5222b03a 	or	r17,r10,r8
   2d200:	2006c03a 	cmpne	r3,r4,zero
   2d204:	88e2b03a 	or	r17,r17,r3
   2d208:	89a3883a 	add	r17,r17,r6
   2d20c:	1145883a 	add	r2,r2,r5
   2d210:	898d803a 	cmpltu	r6,r17,r6
   2d214:	3087883a 	add	r3,r6,r2
   2d218:	4821883a 	mov	r16,r9
   2d21c:	003ed906 	br	2cd84 <__alt_data_end+0xfffecd84>
   2d220:	2984b03a 	or	r2,r5,r6
   2d224:	10004226 	beq	r2,zero,2d330 <__subdf3+0x82c>
   2d228:	1808d0fa 	srli	r4,r3,3
   2d22c:	8822d0fa 	srli	r17,r17,3
   2d230:	1806977a 	slli	r3,r3,29
   2d234:	2080022c 	andhi	r2,r4,8
   2d238:	1c62b03a 	or	r17,r3,r17
   2d23c:	10000826 	beq	r2,zero,2d260 <__subdf3+0x75c>
   2d240:	2812d0fa 	srli	r9,r5,3
   2d244:	4880022c 	andhi	r2,r9,8
   2d248:	1000051e 	bne	r2,zero,2d260 <__subdf3+0x75c>
   2d24c:	300cd0fa 	srli	r6,r6,3
   2d250:	2804977a 	slli	r2,r5,29
   2d254:	4809883a 	mov	r4,r9
   2d258:	3825883a 	mov	r18,r7
   2d25c:	11a2b03a 	or	r17,r2,r6
   2d260:	8806d77a 	srli	r3,r17,29
   2d264:	200890fa 	slli	r4,r4,3
   2d268:	882290fa 	slli	r17,r17,3
   2d26c:	0401ffc4 	movi	r16,2047
   2d270:	1906b03a 	or	r3,r3,r4
   2d274:	003e4406 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d278:	2984b03a 	or	r2,r5,r6
   2d27c:	103e4226 	beq	r2,zero,2cb88 <__alt_data_end+0xfffecb88>
   2d280:	8989c83a 	sub	r4,r17,r6
   2d284:	8911803a 	cmpltu	r8,r17,r4
   2d288:	1945c83a 	sub	r2,r3,r5
   2d28c:	1205c83a 	sub	r2,r2,r8
   2d290:	1200202c 	andhi	r8,r2,128
   2d294:	403e9a26 	beq	r8,zero,2cd00 <__alt_data_end+0xfffecd00>
   2d298:	3463c83a 	sub	r17,r6,r17
   2d29c:	28c5c83a 	sub	r2,r5,r3
   2d2a0:	344d803a 	cmpltu	r6,r6,r17
   2d2a4:	1187c83a 	sub	r3,r2,r6
   2d2a8:	3825883a 	mov	r18,r7
   2d2ac:	003e3606 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d2b0:	0101ffc4 	movi	r4,2047
   2d2b4:	493fc71e 	bne	r9,r4,2d1d4 <__alt_data_end+0xfffed1d4>
   2d2b8:	2807883a 	mov	r3,r5
   2d2bc:	3023883a 	mov	r17,r6
   2d2c0:	4821883a 	mov	r16,r9
   2d2c4:	003e3006 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d2c8:	10003626 	beq	r2,zero,2d3a4 <__subdf3+0x8a0>
   2d2cc:	2984b03a 	or	r2,r5,r6
   2d2d0:	10001726 	beq	r2,zero,2d330 <__subdf3+0x82c>
   2d2d4:	1808d0fa 	srli	r4,r3,3
   2d2d8:	8822d0fa 	srli	r17,r17,3
   2d2dc:	1806977a 	slli	r3,r3,29
   2d2e0:	2080022c 	andhi	r2,r4,8
   2d2e4:	1c62b03a 	or	r17,r3,r17
   2d2e8:	10000726 	beq	r2,zero,2d308 <__subdf3+0x804>
   2d2ec:	2812d0fa 	srli	r9,r5,3
   2d2f0:	4880022c 	andhi	r2,r9,8
   2d2f4:	1000041e 	bne	r2,zero,2d308 <__subdf3+0x804>
   2d2f8:	300cd0fa 	srli	r6,r6,3
   2d2fc:	2804977a 	slli	r2,r5,29
   2d300:	4809883a 	mov	r4,r9
   2d304:	11a2b03a 	or	r17,r2,r6
   2d308:	8806d77a 	srli	r3,r17,29
   2d30c:	200890fa 	slli	r4,r4,3
   2d310:	882290fa 	slli	r17,r17,3
   2d314:	3825883a 	mov	r18,r7
   2d318:	1906b03a 	or	r3,r3,r4
   2d31c:	0401ffc4 	movi	r16,2047
   2d320:	003e1906 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d324:	000b883a 	mov	r5,zero
   2d328:	0005883a 	mov	r2,zero
   2d32c:	003e2e06 	br	2cbe8 <__alt_data_end+0xfffecbe8>
   2d330:	0401ffc4 	movi	r16,2047
   2d334:	003e1406 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d338:	0005883a 	mov	r2,zero
   2d33c:	003f7506 	br	2d114 <__alt_data_end+0xfffed114>
   2d340:	0005883a 	mov	r2,zero
   2d344:	0009883a 	mov	r4,zero
   2d348:	003e7806 	br	2cd2c <__alt_data_end+0xfffecd2c>
   2d34c:	123ff804 	addi	r8,r2,-32
   2d350:	01000804 	movi	r4,32
   2d354:	1a10d83a 	srl	r8,r3,r8
   2d358:	11002526 	beq	r2,r4,2d3f0 <__subdf3+0x8ec>
   2d35c:	01001004 	movi	r4,64
   2d360:	2085c83a 	sub	r2,r4,r2
   2d364:	1884983a 	sll	r2,r3,r2
   2d368:	1444b03a 	or	r2,r2,r17
   2d36c:	1004c03a 	cmpne	r2,r2,zero
   2d370:	40a2b03a 	or	r17,r8,r2
   2d374:	0005883a 	mov	r2,zero
   2d378:	003f1606 	br	2cfd4 <__alt_data_end+0xfffecfd4>
   2d37c:	02000434 	movhi	r8,16
   2d380:	0009883a 	mov	r4,zero
   2d384:	423fffc4 	addi	r8,r8,-1
   2d388:	00bfffc4 	movi	r2,-1
   2d38c:	0401ffc4 	movi	r16,2047
   2d390:	003e6606 	br	2cd2c <__alt_data_end+0xfffecd2c>
   2d394:	1c62b03a 	or	r17,r3,r17
   2d398:	8822c03a 	cmpne	r17,r17,zero
   2d39c:	0005883a 	mov	r2,zero
   2d3a0:	003f9906 	br	2d208 <__alt_data_end+0xfffed208>
   2d3a4:	2807883a 	mov	r3,r5
   2d3a8:	3023883a 	mov	r17,r6
   2d3ac:	0401ffc4 	movi	r16,2047
   2d3b0:	003df506 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d3b4:	2807883a 	mov	r3,r5
   2d3b8:	3023883a 	mov	r17,r6
   2d3bc:	003df206 	br	2cb88 <__alt_data_end+0xfffecb88>
   2d3c0:	123ff804 	addi	r8,r2,-32
   2d3c4:	01000804 	movi	r4,32
   2d3c8:	1a10d83a 	srl	r8,r3,r8
   2d3cc:	11000a26 	beq	r2,r4,2d3f8 <__subdf3+0x8f4>
   2d3d0:	01001004 	movi	r4,64
   2d3d4:	2085c83a 	sub	r2,r4,r2
   2d3d8:	1884983a 	sll	r2,r3,r2
   2d3dc:	1444b03a 	or	r2,r2,r17
   2d3e0:	1004c03a 	cmpne	r2,r2,zero
   2d3e4:	40a2b03a 	or	r17,r8,r2
   2d3e8:	0005883a 	mov	r2,zero
   2d3ec:	003f8606 	br	2d208 <__alt_data_end+0xfffed208>
   2d3f0:	0005883a 	mov	r2,zero
   2d3f4:	003fdc06 	br	2d368 <__alt_data_end+0xfffed368>
   2d3f8:	0005883a 	mov	r2,zero
   2d3fc:	003ff706 	br	2d3dc <__alt_data_end+0xfffed3dc>

0002d400 <__fixdfsi>:
   2d400:	280cd53a 	srli	r6,r5,20
   2d404:	00c00434 	movhi	r3,16
   2d408:	18ffffc4 	addi	r3,r3,-1
   2d40c:	3181ffcc 	andi	r6,r6,2047
   2d410:	01c0ff84 	movi	r7,1022
   2d414:	28c6703a 	and	r3,r5,r3
   2d418:	280ad7fa 	srli	r5,r5,31
   2d41c:	3980120e 	bge	r7,r6,2d468 <__fixdfsi+0x68>
   2d420:	00810744 	movi	r2,1053
   2d424:	11800c16 	blt	r2,r6,2d458 <__fixdfsi+0x58>
   2d428:	00810cc4 	movi	r2,1075
   2d42c:	1185c83a 	sub	r2,r2,r6
   2d430:	01c007c4 	movi	r7,31
   2d434:	18c00434 	orhi	r3,r3,16
   2d438:	38800d16 	blt	r7,r2,2d470 <__fixdfsi+0x70>
   2d43c:	31befb44 	addi	r6,r6,-1043
   2d440:	2084d83a 	srl	r2,r4,r2
   2d444:	1986983a 	sll	r3,r3,r6
   2d448:	1884b03a 	or	r2,r3,r2
   2d44c:	28000726 	beq	r5,zero,2d46c <__fixdfsi+0x6c>
   2d450:	0085c83a 	sub	r2,zero,r2
   2d454:	f800283a 	ret
   2d458:	00a00034 	movhi	r2,32768
   2d45c:	10bfffc4 	addi	r2,r2,-1
   2d460:	2885883a 	add	r2,r5,r2
   2d464:	f800283a 	ret
   2d468:	0005883a 	mov	r2,zero
   2d46c:	f800283a 	ret
   2d470:	008104c4 	movi	r2,1043
   2d474:	1185c83a 	sub	r2,r2,r6
   2d478:	1884d83a 	srl	r2,r3,r2
   2d47c:	003ff306 	br	2d44c <__alt_data_end+0xfffed44c>

0002d480 <__floatsidf>:
   2d480:	defffd04 	addi	sp,sp,-12
   2d484:	dfc00215 	stw	ra,8(sp)
   2d488:	dc400115 	stw	r17,4(sp)
   2d48c:	dc000015 	stw	r16,0(sp)
   2d490:	20002b26 	beq	r4,zero,2d540 <__floatsidf+0xc0>
   2d494:	2023883a 	mov	r17,r4
   2d498:	2020d7fa 	srli	r16,r4,31
   2d49c:	20002d16 	blt	r4,zero,2d554 <__floatsidf+0xd4>
   2d4a0:	8809883a 	mov	r4,r17
   2d4a4:	002d6040 	call	2d604 <__clzsi2>
   2d4a8:	01410784 	movi	r5,1054
   2d4ac:	288bc83a 	sub	r5,r5,r2
   2d4b0:	01010cc4 	movi	r4,1075
   2d4b4:	2149c83a 	sub	r4,r4,r5
   2d4b8:	00c007c4 	movi	r3,31
   2d4bc:	1900160e 	bge	r3,r4,2d518 <__floatsidf+0x98>
   2d4c0:	00c104c4 	movi	r3,1043
   2d4c4:	1947c83a 	sub	r3,r3,r5
   2d4c8:	88c6983a 	sll	r3,r17,r3
   2d4cc:	00800434 	movhi	r2,16
   2d4d0:	10bfffc4 	addi	r2,r2,-1
   2d4d4:	1886703a 	and	r3,r3,r2
   2d4d8:	2941ffcc 	andi	r5,r5,2047
   2d4dc:	800d883a 	mov	r6,r16
   2d4e0:	0005883a 	mov	r2,zero
   2d4e4:	280a953a 	slli	r5,r5,20
   2d4e8:	31803fcc 	andi	r6,r6,255
   2d4ec:	01000434 	movhi	r4,16
   2d4f0:	300c97fa 	slli	r6,r6,31
   2d4f4:	213fffc4 	addi	r4,r4,-1
   2d4f8:	1906703a 	and	r3,r3,r4
   2d4fc:	1946b03a 	or	r3,r3,r5
   2d500:	1986b03a 	or	r3,r3,r6
   2d504:	dfc00217 	ldw	ra,8(sp)
   2d508:	dc400117 	ldw	r17,4(sp)
   2d50c:	dc000017 	ldw	r16,0(sp)
   2d510:	dec00304 	addi	sp,sp,12
   2d514:	f800283a 	ret
   2d518:	00c002c4 	movi	r3,11
   2d51c:	1887c83a 	sub	r3,r3,r2
   2d520:	88c6d83a 	srl	r3,r17,r3
   2d524:	8904983a 	sll	r2,r17,r4
   2d528:	01000434 	movhi	r4,16
   2d52c:	213fffc4 	addi	r4,r4,-1
   2d530:	2941ffcc 	andi	r5,r5,2047
   2d534:	1906703a 	and	r3,r3,r4
   2d538:	800d883a 	mov	r6,r16
   2d53c:	003fe906 	br	2d4e4 <__alt_data_end+0xfffed4e4>
   2d540:	000d883a 	mov	r6,zero
   2d544:	000b883a 	mov	r5,zero
   2d548:	0007883a 	mov	r3,zero
   2d54c:	0005883a 	mov	r2,zero
   2d550:	003fe406 	br	2d4e4 <__alt_data_end+0xfffed4e4>
   2d554:	0123c83a 	sub	r17,zero,r4
   2d558:	003fd106 	br	2d4a0 <__alt_data_end+0xfffed4a0>

0002d55c <__floatunsidf>:
   2d55c:	defffe04 	addi	sp,sp,-8
   2d560:	dc000015 	stw	r16,0(sp)
   2d564:	dfc00115 	stw	ra,4(sp)
   2d568:	2021883a 	mov	r16,r4
   2d56c:	20002226 	beq	r4,zero,2d5f8 <__floatunsidf+0x9c>
   2d570:	002d6040 	call	2d604 <__clzsi2>
   2d574:	01010784 	movi	r4,1054
   2d578:	2089c83a 	sub	r4,r4,r2
   2d57c:	01810cc4 	movi	r6,1075
   2d580:	310dc83a 	sub	r6,r6,r4
   2d584:	00c007c4 	movi	r3,31
   2d588:	1980120e 	bge	r3,r6,2d5d4 <__floatunsidf+0x78>
   2d58c:	00c104c4 	movi	r3,1043
   2d590:	1907c83a 	sub	r3,r3,r4
   2d594:	80ca983a 	sll	r5,r16,r3
   2d598:	00800434 	movhi	r2,16
   2d59c:	10bfffc4 	addi	r2,r2,-1
   2d5a0:	2101ffcc 	andi	r4,r4,2047
   2d5a4:	0021883a 	mov	r16,zero
   2d5a8:	288a703a 	and	r5,r5,r2
   2d5ac:	2008953a 	slli	r4,r4,20
   2d5b0:	00c00434 	movhi	r3,16
   2d5b4:	18ffffc4 	addi	r3,r3,-1
   2d5b8:	28c6703a 	and	r3,r5,r3
   2d5bc:	8005883a 	mov	r2,r16
   2d5c0:	1906b03a 	or	r3,r3,r4
   2d5c4:	dfc00117 	ldw	ra,4(sp)
   2d5c8:	dc000017 	ldw	r16,0(sp)
   2d5cc:	dec00204 	addi	sp,sp,8
   2d5d0:	f800283a 	ret
   2d5d4:	00c002c4 	movi	r3,11
   2d5d8:	188bc83a 	sub	r5,r3,r2
   2d5dc:	814ad83a 	srl	r5,r16,r5
   2d5e0:	00c00434 	movhi	r3,16
   2d5e4:	18ffffc4 	addi	r3,r3,-1
   2d5e8:	81a0983a 	sll	r16,r16,r6
   2d5ec:	2101ffcc 	andi	r4,r4,2047
   2d5f0:	28ca703a 	and	r5,r5,r3
   2d5f4:	003fed06 	br	2d5ac <__alt_data_end+0xfffed5ac>
   2d5f8:	0009883a 	mov	r4,zero
   2d5fc:	000b883a 	mov	r5,zero
   2d600:	003fea06 	br	2d5ac <__alt_data_end+0xfffed5ac>

0002d604 <__clzsi2>:
   2d604:	00bfffd4 	movui	r2,65535
   2d608:	11000536 	bltu	r2,r4,2d620 <__clzsi2+0x1c>
   2d60c:	00803fc4 	movi	r2,255
   2d610:	11000f36 	bltu	r2,r4,2d650 <__clzsi2+0x4c>
   2d614:	00800804 	movi	r2,32
   2d618:	0007883a 	mov	r3,zero
   2d61c:	00000506 	br	2d634 <__clzsi2+0x30>
   2d620:	00804034 	movhi	r2,256
   2d624:	10bfffc4 	addi	r2,r2,-1
   2d628:	11000c2e 	bgeu	r2,r4,2d65c <__clzsi2+0x58>
   2d62c:	00800204 	movi	r2,8
   2d630:	00c00604 	movi	r3,24
   2d634:	20c8d83a 	srl	r4,r4,r3
   2d638:	00c000f4 	movhi	r3,3
   2d63c:	18ca0d04 	addi	r3,r3,10292
   2d640:	1909883a 	add	r4,r3,r4
   2d644:	20c00003 	ldbu	r3,0(r4)
   2d648:	10c5c83a 	sub	r2,r2,r3
   2d64c:	f800283a 	ret
   2d650:	00800604 	movi	r2,24
   2d654:	00c00204 	movi	r3,8
   2d658:	003ff606 	br	2d634 <__alt_data_end+0xfffed634>
   2d65c:	00800404 	movi	r2,16
   2d660:	1007883a 	mov	r3,r2
   2d664:	003ff306 	br	2d634 <__alt_data_end+0xfffed634>

0002d668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d668:	defffe04 	addi	sp,sp,-8
   2d66c:	dfc00115 	stw	ra,4(sp)
   2d670:	df000015 	stw	fp,0(sp)
   2d674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d678:	d0a00b17 	ldw	r2,-32724(gp)
   2d67c:	10000326 	beq	r2,zero,2d68c <alt_get_errno+0x24>
   2d680:	d0a00b17 	ldw	r2,-32724(gp)
   2d684:	103ee83a 	callr	r2
   2d688:	00000106 	br	2d690 <alt_get_errno+0x28>
   2d68c:	d0a71504 	addi	r2,gp,-25516
}
   2d690:	e037883a 	mov	sp,fp
   2d694:	dfc00117 	ldw	ra,4(sp)
   2d698:	df000017 	ldw	fp,0(sp)
   2d69c:	dec00204 	addi	sp,sp,8
   2d6a0:	f800283a 	ret

0002d6a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d6a4:	defffb04 	addi	sp,sp,-20
   2d6a8:	dfc00415 	stw	ra,16(sp)
   2d6ac:	df000315 	stw	fp,12(sp)
   2d6b0:	df000304 	addi	fp,sp,12
   2d6b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d6b8:	e0bfff17 	ldw	r2,-4(fp)
   2d6bc:	10000816 	blt	r2,zero,2d6e0 <close+0x3c>
   2d6c0:	01400304 	movi	r5,12
   2d6c4:	e13fff17 	ldw	r4,-4(fp)
   2d6c8:	002ad9c0 	call	2ad9c <__mulsi3>
   2d6cc:	1007883a 	mov	r3,r2
   2d6d0:	008000f4 	movhi	r2,3
   2d6d4:	108c9704 	addi	r2,r2,12892
   2d6d8:	1885883a 	add	r2,r3,r2
   2d6dc:	00000106 	br	2d6e4 <close+0x40>
   2d6e0:	0005883a 	mov	r2,zero
   2d6e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d6e8:	e0bffd17 	ldw	r2,-12(fp)
   2d6ec:	10001926 	beq	r2,zero,2d754 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d6f0:	e0bffd17 	ldw	r2,-12(fp)
   2d6f4:	10800017 	ldw	r2,0(r2)
   2d6f8:	10800417 	ldw	r2,16(r2)
   2d6fc:	10000626 	beq	r2,zero,2d718 <close+0x74>
   2d700:	e0bffd17 	ldw	r2,-12(fp)
   2d704:	10800017 	ldw	r2,0(r2)
   2d708:	10800417 	ldw	r2,16(r2)
   2d70c:	e13ffd17 	ldw	r4,-12(fp)
   2d710:	103ee83a 	callr	r2
   2d714:	00000106 	br	2d71c <close+0x78>
   2d718:	0005883a 	mov	r2,zero
   2d71c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d720:	e13fff17 	ldw	r4,-4(fp)
   2d724:	002dd8c0 	call	2dd8c <alt_release_fd>
    if (rval < 0)
   2d728:	e0bffe17 	ldw	r2,-8(fp)
   2d72c:	1000070e 	bge	r2,zero,2d74c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2d730:	002d6680 	call	2d668 <alt_get_errno>
   2d734:	1007883a 	mov	r3,r2
   2d738:	e0bffe17 	ldw	r2,-8(fp)
   2d73c:	0085c83a 	sub	r2,zero,r2
   2d740:	18800015 	stw	r2,0(r3)
      return -1;
   2d744:	00bfffc4 	movi	r2,-1
   2d748:	00000706 	br	2d768 <close+0xc4>
    }
    return 0;
   2d74c:	0005883a 	mov	r2,zero
   2d750:	00000506 	br	2d768 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d754:	002d6680 	call	2d668 <alt_get_errno>
   2d758:	1007883a 	mov	r3,r2
   2d75c:	00801444 	movi	r2,81
   2d760:	18800015 	stw	r2,0(r3)
    return -1;
   2d764:	00bfffc4 	movi	r2,-1
  }
}
   2d768:	e037883a 	mov	sp,fp
   2d76c:	dfc00117 	ldw	ra,4(sp)
   2d770:	df000017 	ldw	fp,0(sp)
   2d774:	dec00204 	addi	sp,sp,8
   2d778:	f800283a 	ret

0002d77c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d77c:	defffc04 	addi	sp,sp,-16
   2d780:	df000315 	stw	fp,12(sp)
   2d784:	df000304 	addi	fp,sp,12
   2d788:	e13ffd15 	stw	r4,-12(fp)
   2d78c:	e17ffe15 	stw	r5,-8(fp)
   2d790:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d794:	e0bfff17 	ldw	r2,-4(fp)
}
   2d798:	e037883a 	mov	sp,fp
   2d79c:	df000017 	ldw	fp,0(sp)
   2d7a0:	dec00104 	addi	sp,sp,4
   2d7a4:	f800283a 	ret

0002d7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d7a8:	defffe04 	addi	sp,sp,-8
   2d7ac:	dfc00115 	stw	ra,4(sp)
   2d7b0:	df000015 	stw	fp,0(sp)
   2d7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d7b8:	d0a00b17 	ldw	r2,-32724(gp)
   2d7bc:	10000326 	beq	r2,zero,2d7cc <alt_get_errno+0x24>
   2d7c0:	d0a00b17 	ldw	r2,-32724(gp)
   2d7c4:	103ee83a 	callr	r2
   2d7c8:	00000106 	br	2d7d0 <alt_get_errno+0x28>
   2d7cc:	d0a71504 	addi	r2,gp,-25516
}
   2d7d0:	e037883a 	mov	sp,fp
   2d7d4:	dfc00117 	ldw	ra,4(sp)
   2d7d8:	df000017 	ldw	fp,0(sp)
   2d7dc:	dec00204 	addi	sp,sp,8
   2d7e0:	f800283a 	ret

0002d7e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d7e4:	defffb04 	addi	sp,sp,-20
   2d7e8:	dfc00415 	stw	ra,16(sp)
   2d7ec:	df000315 	stw	fp,12(sp)
   2d7f0:	df000304 	addi	fp,sp,12
   2d7f4:	e13ffe15 	stw	r4,-8(fp)
   2d7f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d7fc:	e0bffe17 	ldw	r2,-8(fp)
   2d800:	10000816 	blt	r2,zero,2d824 <fstat+0x40>
   2d804:	01400304 	movi	r5,12
   2d808:	e13ffe17 	ldw	r4,-8(fp)
   2d80c:	002ad9c0 	call	2ad9c <__mulsi3>
   2d810:	1007883a 	mov	r3,r2
   2d814:	008000f4 	movhi	r2,3
   2d818:	108c9704 	addi	r2,r2,12892
   2d81c:	1885883a 	add	r2,r3,r2
   2d820:	00000106 	br	2d828 <fstat+0x44>
   2d824:	0005883a 	mov	r2,zero
   2d828:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d82c:	e0bffd17 	ldw	r2,-12(fp)
   2d830:	10001026 	beq	r2,zero,2d874 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d834:	e0bffd17 	ldw	r2,-12(fp)
   2d838:	10800017 	ldw	r2,0(r2)
   2d83c:	10800817 	ldw	r2,32(r2)
   2d840:	10000726 	beq	r2,zero,2d860 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   2d844:	e0bffd17 	ldw	r2,-12(fp)
   2d848:	10800017 	ldw	r2,0(r2)
   2d84c:	10800817 	ldw	r2,32(r2)
   2d850:	e17fff17 	ldw	r5,-4(fp)
   2d854:	e13ffd17 	ldw	r4,-12(fp)
   2d858:	103ee83a 	callr	r2
   2d85c:	00000a06 	br	2d888 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d860:	e0bfff17 	ldw	r2,-4(fp)
   2d864:	00c80004 	movi	r3,8192
   2d868:	10c00115 	stw	r3,4(r2)
      return 0;
   2d86c:	0005883a 	mov	r2,zero
   2d870:	00000506 	br	2d888 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d874:	002d7a80 	call	2d7a8 <alt_get_errno>
   2d878:	1007883a 	mov	r3,r2
   2d87c:	00801444 	movi	r2,81
   2d880:	18800015 	stw	r2,0(r3)
    return -1;
   2d884:	00bfffc4 	movi	r2,-1
  }
}
   2d888:	e037883a 	mov	sp,fp
   2d88c:	dfc00117 	ldw	ra,4(sp)
   2d890:	df000017 	ldw	fp,0(sp)
   2d894:	dec00204 	addi	sp,sp,8
   2d898:	f800283a 	ret

0002d89c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d89c:	defffe04 	addi	sp,sp,-8
   2d8a0:	dfc00115 	stw	ra,4(sp)
   2d8a4:	df000015 	stw	fp,0(sp)
   2d8a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d8ac:	d0a00b17 	ldw	r2,-32724(gp)
   2d8b0:	10000326 	beq	r2,zero,2d8c0 <alt_get_errno+0x24>
   2d8b4:	d0a00b17 	ldw	r2,-32724(gp)
   2d8b8:	103ee83a 	callr	r2
   2d8bc:	00000106 	br	2d8c4 <alt_get_errno+0x28>
   2d8c0:	d0a71504 	addi	r2,gp,-25516
}
   2d8c4:	e037883a 	mov	sp,fp
   2d8c8:	dfc00117 	ldw	ra,4(sp)
   2d8cc:	df000017 	ldw	fp,0(sp)
   2d8d0:	dec00204 	addi	sp,sp,8
   2d8d4:	f800283a 	ret

0002d8d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d8d8:	deffed04 	addi	sp,sp,-76
   2d8dc:	dfc01215 	stw	ra,72(sp)
   2d8e0:	df001115 	stw	fp,68(sp)
   2d8e4:	df001104 	addi	fp,sp,68
   2d8e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d8ec:	e0bfff17 	ldw	r2,-4(fp)
   2d8f0:	10000816 	blt	r2,zero,2d914 <isatty+0x3c>
   2d8f4:	01400304 	movi	r5,12
   2d8f8:	e13fff17 	ldw	r4,-4(fp)
   2d8fc:	002ad9c0 	call	2ad9c <__mulsi3>
   2d900:	1007883a 	mov	r3,r2
   2d904:	008000f4 	movhi	r2,3
   2d908:	108c9704 	addi	r2,r2,12892
   2d90c:	1885883a 	add	r2,r3,r2
   2d910:	00000106 	br	2d918 <isatty+0x40>
   2d914:	0005883a 	mov	r2,zero
   2d918:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d91c:	e0bfef17 	ldw	r2,-68(fp)
   2d920:	10000e26 	beq	r2,zero,2d95c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d924:	e0bfef17 	ldw	r2,-68(fp)
   2d928:	10800017 	ldw	r2,0(r2)
   2d92c:	10800817 	ldw	r2,32(r2)
   2d930:	1000021e 	bne	r2,zero,2d93c <isatty+0x64>
    {
      return 1;
   2d934:	00800044 	movi	r2,1
   2d938:	00000d06 	br	2d970 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d93c:	e0bff004 	addi	r2,fp,-64
   2d940:	100b883a 	mov	r5,r2
   2d944:	e13fff17 	ldw	r4,-4(fp)
   2d948:	002d7e40 	call	2d7e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d94c:	e0bff117 	ldw	r2,-60(fp)
   2d950:	10880020 	cmpeqi	r2,r2,8192
   2d954:	10803fcc 	andi	r2,r2,255
   2d958:	00000506 	br	2d970 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d95c:	002d89c0 	call	2d89c <alt_get_errno>
   2d960:	1007883a 	mov	r3,r2
   2d964:	00801444 	movi	r2,81
   2d968:	18800015 	stw	r2,0(r3)
    return 0;
   2d96c:	0005883a 	mov	r2,zero
  }
}
   2d970:	e037883a 	mov	sp,fp
   2d974:	dfc00117 	ldw	ra,4(sp)
   2d978:	df000017 	ldw	fp,0(sp)
   2d97c:	dec00204 	addi	sp,sp,8
   2d980:	f800283a 	ret

0002d984 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d984:	defffc04 	addi	sp,sp,-16
   2d988:	df000315 	stw	fp,12(sp)
   2d98c:	df000304 	addi	fp,sp,12
   2d990:	e13ffd15 	stw	r4,-12(fp)
   2d994:	e17ffe15 	stw	r5,-8(fp)
   2d998:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d99c:	e0fffe17 	ldw	r3,-8(fp)
   2d9a0:	e0bffd17 	ldw	r2,-12(fp)
   2d9a4:	18800c26 	beq	r3,r2,2d9d8 <alt_load_section+0x54>
  {
    while( to != end )
   2d9a8:	00000806 	br	2d9cc <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d9ac:	e0bffe17 	ldw	r2,-8(fp)
   2d9b0:	10c00104 	addi	r3,r2,4
   2d9b4:	e0fffe15 	stw	r3,-8(fp)
   2d9b8:	e0fffd17 	ldw	r3,-12(fp)
   2d9bc:	19000104 	addi	r4,r3,4
   2d9c0:	e13ffd15 	stw	r4,-12(fp)
   2d9c4:	18c00017 	ldw	r3,0(r3)
   2d9c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d9cc:	e0fffe17 	ldw	r3,-8(fp)
   2d9d0:	e0bfff17 	ldw	r2,-4(fp)
   2d9d4:	18bff51e 	bne	r3,r2,2d9ac <__alt_data_end+0xfffed9ac>
    {
      *to++ = *from++;
    }
  }
}
   2d9d8:	0001883a 	nop
   2d9dc:	e037883a 	mov	sp,fp
   2d9e0:	df000017 	ldw	fp,0(sp)
   2d9e4:	dec00104 	addi	sp,sp,4
   2d9e8:	f800283a 	ret

0002d9ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d9ec:	defffe04 	addi	sp,sp,-8
   2d9f0:	dfc00115 	stw	ra,4(sp)
   2d9f4:	df000015 	stw	fp,0(sp)
   2d9f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d9fc:	018000f4 	movhi	r6,3
   2da00:	31916004 	addi	r6,r6,17792
   2da04:	014000f4 	movhi	r5,3
   2da08:	294a6404 	addi	r5,r5,10640
   2da0c:	010000f4 	movhi	r4,3
   2da10:	21116004 	addi	r4,r4,17792
   2da14:	002d9840 	call	2d984 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2da18:	018000b4 	movhi	r6,2
   2da1c:	31808c04 	addi	r6,r6,560
   2da20:	014000b4 	movhi	r5,2
   2da24:	29400804 	addi	r5,r5,32
   2da28:	010000b4 	movhi	r4,2
   2da2c:	21000804 	addi	r4,r4,32
   2da30:	002d9840 	call	2d984 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2da34:	018000f4 	movhi	r6,3
   2da38:	318a6404 	addi	r6,r6,10640
   2da3c:	014000f4 	movhi	r5,3
   2da40:	29498304 	addi	r5,r5,9740
   2da44:	010000f4 	movhi	r4,3
   2da48:	21098304 	addi	r4,r4,9740
   2da4c:	002d9840 	call	2d984 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2da50:	00312ec0 	call	312ec <alt_dcache_flush_all>
  alt_icache_flush_all();
   2da54:	003153c0 	call	3153c <alt_icache_flush_all>
}
   2da58:	0001883a 	nop
   2da5c:	e037883a 	mov	sp,fp
   2da60:	dfc00117 	ldw	ra,4(sp)
   2da64:	df000017 	ldw	fp,0(sp)
   2da68:	dec00204 	addi	sp,sp,8
   2da6c:	f800283a 	ret

0002da70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2da70:	defffe04 	addi	sp,sp,-8
   2da74:	dfc00115 	stw	ra,4(sp)
   2da78:	df000015 	stw	fp,0(sp)
   2da7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2da80:	d0a00b17 	ldw	r2,-32724(gp)
   2da84:	10000326 	beq	r2,zero,2da94 <alt_get_errno+0x24>
   2da88:	d0a00b17 	ldw	r2,-32724(gp)
   2da8c:	103ee83a 	callr	r2
   2da90:	00000106 	br	2da98 <alt_get_errno+0x28>
   2da94:	d0a71504 	addi	r2,gp,-25516
}
   2da98:	e037883a 	mov	sp,fp
   2da9c:	dfc00117 	ldw	ra,4(sp)
   2daa0:	df000017 	ldw	fp,0(sp)
   2daa4:	dec00204 	addi	sp,sp,8
   2daa8:	f800283a 	ret

0002daac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2daac:	defff904 	addi	sp,sp,-28
   2dab0:	dfc00615 	stw	ra,24(sp)
   2dab4:	df000515 	stw	fp,20(sp)
   2dab8:	df000504 	addi	fp,sp,20
   2dabc:	e13ffd15 	stw	r4,-12(fp)
   2dac0:	e17ffe15 	stw	r5,-8(fp)
   2dac4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2dac8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dacc:	e0bffd17 	ldw	r2,-12(fp)
   2dad0:	10000816 	blt	r2,zero,2daf4 <lseek+0x48>
   2dad4:	01400304 	movi	r5,12
   2dad8:	e13ffd17 	ldw	r4,-12(fp)
   2dadc:	002ad9c0 	call	2ad9c <__mulsi3>
   2dae0:	1007883a 	mov	r3,r2
   2dae4:	008000f4 	movhi	r2,3
   2dae8:	108c9704 	addi	r2,r2,12892
   2daec:	1885883a 	add	r2,r3,r2
   2daf0:	00000106 	br	2daf8 <lseek+0x4c>
   2daf4:	0005883a 	mov	r2,zero
   2daf8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2dafc:	e0bffc17 	ldw	r2,-16(fp)
   2db00:	10001026 	beq	r2,zero,2db44 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2db04:	e0bffc17 	ldw	r2,-16(fp)
   2db08:	10800017 	ldw	r2,0(r2)
   2db0c:	10800717 	ldw	r2,28(r2)
   2db10:	10000926 	beq	r2,zero,2db38 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2db14:	e0bffc17 	ldw	r2,-16(fp)
   2db18:	10800017 	ldw	r2,0(r2)
   2db1c:	10800717 	ldw	r2,28(r2)
   2db20:	e1bfff17 	ldw	r6,-4(fp)
   2db24:	e17ffe17 	ldw	r5,-8(fp)
   2db28:	e13ffc17 	ldw	r4,-16(fp)
   2db2c:	103ee83a 	callr	r2
   2db30:	e0bffb15 	stw	r2,-20(fp)
   2db34:	00000506 	br	2db4c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2db38:	00bfde84 	movi	r2,-134
   2db3c:	e0bffb15 	stw	r2,-20(fp)
   2db40:	00000206 	br	2db4c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2db44:	00bfebc4 	movi	r2,-81
   2db48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2db4c:	e0bffb17 	ldw	r2,-20(fp)
   2db50:	1000070e 	bge	r2,zero,2db70 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2db54:	002da700 	call	2da70 <alt_get_errno>
   2db58:	1007883a 	mov	r3,r2
   2db5c:	e0bffb17 	ldw	r2,-20(fp)
   2db60:	0085c83a 	sub	r2,zero,r2
   2db64:	18800015 	stw	r2,0(r3)
    rc = -1;
   2db68:	00bfffc4 	movi	r2,-1
   2db6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2db70:	e0bffb17 	ldw	r2,-20(fp)
}
   2db74:	e037883a 	mov	sp,fp
   2db78:	dfc00117 	ldw	ra,4(sp)
   2db7c:	df000017 	ldw	fp,0(sp)
   2db80:	dec00204 	addi	sp,sp,8
   2db84:	f800283a 	ret

0002db88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2db88:	defffd04 	addi	sp,sp,-12
   2db8c:	dfc00215 	stw	ra,8(sp)
   2db90:	df000115 	stw	fp,4(sp)
   2db94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2db98:	0009883a 	mov	r4,zero
   2db9c:	002e0600 	call	2e060 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2dba0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2dba4:	002e0980 	call	2e098 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2dba8:	018000f4 	movhi	r6,3
   2dbac:	318a5004 	addi	r6,r6,10560
   2dbb0:	014000f4 	movhi	r5,3
   2dbb4:	294a5004 	addi	r5,r5,10560
   2dbb8:	010000f4 	movhi	r4,3
   2dbbc:	210a5004 	addi	r4,r4,10560
   2dbc0:	00318e00 	call	318e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2dbc4:	00313ec0 	call	313ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2dbc8:	010000f4 	movhi	r4,3
   2dbcc:	21051304 	addi	r4,r4,5196
   2dbd0:	00322780 	call	32278 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2dbd4:	d0a71617 	ldw	r2,-25512(gp)
   2dbd8:	d0e71717 	ldw	r3,-25508(gp)
   2dbdc:	d1271817 	ldw	r4,-25504(gp)
   2dbe0:	200d883a 	mov	r6,r4
   2dbe4:	180b883a 	mov	r5,r3
   2dbe8:	1009883a 	mov	r4,r2
   2dbec:	00205380 	call	20538 <main>
   2dbf0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2dbf4:	01000044 	movi	r4,1
   2dbf8:	002d6a40 	call	2d6a4 <close>
  exit (result);
   2dbfc:	e13fff17 	ldw	r4,-4(fp)
   2dc00:	003228c0 	call	3228c <exit>

0002dc04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2dc04:	defffe04 	addi	sp,sp,-8
   2dc08:	df000115 	stw	fp,4(sp)
   2dc0c:	df000104 	addi	fp,sp,4
   2dc10:	e13fff15 	stw	r4,-4(fp)
}
   2dc14:	0001883a 	nop
   2dc18:	e037883a 	mov	sp,fp
   2dc1c:	df000017 	ldw	fp,0(sp)
   2dc20:	dec00104 	addi	sp,sp,4
   2dc24:	f800283a 	ret

0002dc28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2dc28:	defffe04 	addi	sp,sp,-8
   2dc2c:	df000115 	stw	fp,4(sp)
   2dc30:	df000104 	addi	fp,sp,4
   2dc34:	e13fff15 	stw	r4,-4(fp)
}
   2dc38:	0001883a 	nop
   2dc3c:	e037883a 	mov	sp,fp
   2dc40:	df000017 	ldw	fp,0(sp)
   2dc44:	dec00104 	addi	sp,sp,4
   2dc48:	f800283a 	ret

0002dc4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dc4c:	defffe04 	addi	sp,sp,-8
   2dc50:	dfc00115 	stw	ra,4(sp)
   2dc54:	df000015 	stw	fp,0(sp)
   2dc58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dc5c:	d0a00b17 	ldw	r2,-32724(gp)
   2dc60:	10000326 	beq	r2,zero,2dc70 <alt_get_errno+0x24>
   2dc64:	d0a00b17 	ldw	r2,-32724(gp)
   2dc68:	103ee83a 	callr	r2
   2dc6c:	00000106 	br	2dc74 <alt_get_errno+0x28>
   2dc70:	d0a71504 	addi	r2,gp,-25516
}
   2dc74:	e037883a 	mov	sp,fp
   2dc78:	dfc00117 	ldw	ra,4(sp)
   2dc7c:	df000017 	ldw	fp,0(sp)
   2dc80:	dec00204 	addi	sp,sp,8
   2dc84:	f800283a 	ret

0002dc88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2dc88:	defff904 	addi	sp,sp,-28
   2dc8c:	dfc00615 	stw	ra,24(sp)
   2dc90:	df000515 	stw	fp,20(sp)
   2dc94:	df000504 	addi	fp,sp,20
   2dc98:	e13ffd15 	stw	r4,-12(fp)
   2dc9c:	e17ffe15 	stw	r5,-8(fp)
   2dca0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dca4:	e0bffd17 	ldw	r2,-12(fp)
   2dca8:	10000816 	blt	r2,zero,2dccc <read+0x44>
   2dcac:	01400304 	movi	r5,12
   2dcb0:	e13ffd17 	ldw	r4,-12(fp)
   2dcb4:	002ad9c0 	call	2ad9c <__mulsi3>
   2dcb8:	1007883a 	mov	r3,r2
   2dcbc:	008000f4 	movhi	r2,3
   2dcc0:	108c9704 	addi	r2,r2,12892
   2dcc4:	1885883a 	add	r2,r3,r2
   2dcc8:	00000106 	br	2dcd0 <read+0x48>
   2dccc:	0005883a 	mov	r2,zero
   2dcd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2dcd4:	e0bffb17 	ldw	r2,-20(fp)
   2dcd8:	10002226 	beq	r2,zero,2dd64 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dcdc:	e0bffb17 	ldw	r2,-20(fp)
   2dce0:	10800217 	ldw	r2,8(r2)
   2dce4:	108000cc 	andi	r2,r2,3
   2dce8:	10800060 	cmpeqi	r2,r2,1
   2dcec:	1000181e 	bne	r2,zero,2dd50 <read+0xc8>
        (fd->dev->read))
   2dcf0:	e0bffb17 	ldw	r2,-20(fp)
   2dcf4:	10800017 	ldw	r2,0(r2)
   2dcf8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dcfc:	10001426 	beq	r2,zero,2dd50 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2dd00:	e0bffb17 	ldw	r2,-20(fp)
   2dd04:	10800017 	ldw	r2,0(r2)
   2dd08:	10800517 	ldw	r2,20(r2)
   2dd0c:	e0ffff17 	ldw	r3,-4(fp)
   2dd10:	180d883a 	mov	r6,r3
   2dd14:	e17ffe17 	ldw	r5,-8(fp)
   2dd18:	e13ffb17 	ldw	r4,-20(fp)
   2dd1c:	103ee83a 	callr	r2
   2dd20:	e0bffc15 	stw	r2,-16(fp)
   2dd24:	e0bffc17 	ldw	r2,-16(fp)
   2dd28:	1000070e 	bge	r2,zero,2dd48 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   2dd2c:	002dc4c0 	call	2dc4c <alt_get_errno>
   2dd30:	1007883a 	mov	r3,r2
   2dd34:	e0bffc17 	ldw	r2,-16(fp)
   2dd38:	0085c83a 	sub	r2,zero,r2
   2dd3c:	18800015 	stw	r2,0(r3)
          return -1;
   2dd40:	00bfffc4 	movi	r2,-1
   2dd44:	00000c06 	br	2dd78 <read+0xf0>
        }
        return rval;
   2dd48:	e0bffc17 	ldw	r2,-16(fp)
   2dd4c:	00000a06 	br	2dd78 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2dd50:	002dc4c0 	call	2dc4c <alt_get_errno>
   2dd54:	1007883a 	mov	r3,r2
   2dd58:	00800344 	movi	r2,13
   2dd5c:	18800015 	stw	r2,0(r3)
   2dd60:	00000406 	br	2dd74 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2dd64:	002dc4c0 	call	2dc4c <alt_get_errno>
   2dd68:	1007883a 	mov	r3,r2
   2dd6c:	00801444 	movi	r2,81
   2dd70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2dd74:	00bfffc4 	movi	r2,-1
}
   2dd78:	e037883a 	mov	sp,fp
   2dd7c:	dfc00117 	ldw	ra,4(sp)
   2dd80:	df000017 	ldw	fp,0(sp)
   2dd84:	dec00204 	addi	sp,sp,8
   2dd88:	f800283a 	ret

0002dd8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2dd8c:	defffc04 	addi	sp,sp,-16
   2dd90:	dfc00315 	stw	ra,12(sp)
   2dd94:	df000215 	stw	fp,8(sp)
   2dd98:	dc000115 	stw	r16,4(sp)
   2dd9c:	df000204 	addi	fp,sp,8
   2dda0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2dda4:	e0bffe17 	ldw	r2,-8(fp)
   2dda8:	108000d0 	cmplti	r2,r2,3
   2ddac:	1000111e 	bne	r2,zero,2ddf4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2ddb0:	040000f4 	movhi	r16,3
   2ddb4:	840c9704 	addi	r16,r16,12892
   2ddb8:	e0bffe17 	ldw	r2,-8(fp)
   2ddbc:	01400304 	movi	r5,12
   2ddc0:	1009883a 	mov	r4,r2
   2ddc4:	002ad9c0 	call	2ad9c <__mulsi3>
   2ddc8:	8085883a 	add	r2,r16,r2
   2ddcc:	10800204 	addi	r2,r2,8
   2ddd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2ddd4:	040000f4 	movhi	r16,3
   2ddd8:	840c9704 	addi	r16,r16,12892
   2dddc:	e0bffe17 	ldw	r2,-8(fp)
   2dde0:	01400304 	movi	r5,12
   2dde4:	1009883a 	mov	r4,r2
   2dde8:	002ad9c0 	call	2ad9c <__mulsi3>
   2ddec:	8085883a 	add	r2,r16,r2
   2ddf0:	10000015 	stw	zero,0(r2)
  }
}
   2ddf4:	0001883a 	nop
   2ddf8:	e6ffff04 	addi	sp,fp,-4
   2ddfc:	dfc00217 	ldw	ra,8(sp)
   2de00:	df000117 	ldw	fp,4(sp)
   2de04:	dc000017 	ldw	r16,0(sp)
   2de08:	dec00304 	addi	sp,sp,12
   2de0c:	f800283a 	ret

0002de10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2de10:	defff904 	addi	sp,sp,-28
   2de14:	df000615 	stw	fp,24(sp)
   2de18:	df000604 	addi	fp,sp,24
   2de1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2de20:	0005303a 	rdctl	r2,status
   2de24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2de28:	e0fffe17 	ldw	r3,-8(fp)
   2de2c:	00bfff84 	movi	r2,-2
   2de30:	1884703a 	and	r2,r3,r2
   2de34:	1001703a 	wrctl	status,r2
  
  return context;
   2de38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2de3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2de40:	d0a00c17 	ldw	r2,-32720(gp)
   2de44:	10c000c4 	addi	r3,r2,3
   2de48:	00bfff04 	movi	r2,-4
   2de4c:	1884703a 	and	r2,r3,r2
   2de50:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2de54:	d0e00c17 	ldw	r3,-32720(gp)
   2de58:	e0bfff17 	ldw	r2,-4(fp)
   2de5c:	1887883a 	add	r3,r3,r2
   2de60:	00800134 	movhi	r2,4
   2de64:	10800004 	addi	r2,r2,0
   2de68:	10c0062e 	bgeu	r2,r3,2de84 <sbrk+0x74>
   2de6c:	e0bffb17 	ldw	r2,-20(fp)
   2de70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2de74:	e0bffa17 	ldw	r2,-24(fp)
   2de78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2de7c:	00bfffc4 	movi	r2,-1
   2de80:	00000b06 	br	2deb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2de84:	d0a00c17 	ldw	r2,-32720(gp)
   2de88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2de8c:	d0e00c17 	ldw	r3,-32720(gp)
   2de90:	e0bfff17 	ldw	r2,-4(fp)
   2de94:	1885883a 	add	r2,r3,r2
   2de98:	d0a00c15 	stw	r2,-32720(gp)
   2de9c:	e0bffb17 	ldw	r2,-20(fp)
   2dea0:	e0bffc15 	stw	r2,-16(fp)
   2dea4:	e0bffc17 	ldw	r2,-16(fp)
   2dea8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2deac:	e0bffd17 	ldw	r2,-12(fp)
} 
   2deb0:	e037883a 	mov	sp,fp
   2deb4:	df000017 	ldw	fp,0(sp)
   2deb8:	dec00104 	addi	sp,sp,4
   2debc:	f800283a 	ret

0002dec0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2dec0:	defffd04 	addi	sp,sp,-12
   2dec4:	dfc00215 	stw	ra,8(sp)
   2dec8:	df000115 	stw	fp,4(sp)
   2decc:	df000104 	addi	fp,sp,4
   2ded0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2ded4:	e13fff17 	ldw	r4,-4(fp)
   2ded8:	00311940 	call	31194 <alt_busy_sleep>
}
   2dedc:	e037883a 	mov	sp,fp
   2dee0:	dfc00117 	ldw	ra,4(sp)
   2dee4:	df000017 	ldw	fp,0(sp)
   2dee8:	dec00204 	addi	sp,sp,8
   2deec:	f800283a 	ret

0002def0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2def0:	defffe04 	addi	sp,sp,-8
   2def4:	dfc00115 	stw	ra,4(sp)
   2def8:	df000015 	stw	fp,0(sp)
   2defc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2df00:	d0a00b17 	ldw	r2,-32724(gp)
   2df04:	10000326 	beq	r2,zero,2df14 <alt_get_errno+0x24>
   2df08:	d0a00b17 	ldw	r2,-32724(gp)
   2df0c:	103ee83a 	callr	r2
   2df10:	00000106 	br	2df18 <alt_get_errno+0x28>
   2df14:	d0a71504 	addi	r2,gp,-25516
}
   2df18:	e037883a 	mov	sp,fp
   2df1c:	dfc00117 	ldw	ra,4(sp)
   2df20:	df000017 	ldw	fp,0(sp)
   2df24:	dec00204 	addi	sp,sp,8
   2df28:	f800283a 	ret

0002df2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2df2c:	defff904 	addi	sp,sp,-28
   2df30:	dfc00615 	stw	ra,24(sp)
   2df34:	df000515 	stw	fp,20(sp)
   2df38:	df000504 	addi	fp,sp,20
   2df3c:	e13ffd15 	stw	r4,-12(fp)
   2df40:	e17ffe15 	stw	r5,-8(fp)
   2df44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2df48:	e0bffd17 	ldw	r2,-12(fp)
   2df4c:	10000816 	blt	r2,zero,2df70 <write+0x44>
   2df50:	01400304 	movi	r5,12
   2df54:	e13ffd17 	ldw	r4,-12(fp)
   2df58:	002ad9c0 	call	2ad9c <__mulsi3>
   2df5c:	1007883a 	mov	r3,r2
   2df60:	008000f4 	movhi	r2,3
   2df64:	108c9704 	addi	r2,r2,12892
   2df68:	1885883a 	add	r2,r3,r2
   2df6c:	00000106 	br	2df74 <write+0x48>
   2df70:	0005883a 	mov	r2,zero
   2df74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2df78:	e0bffb17 	ldw	r2,-20(fp)
   2df7c:	10002126 	beq	r2,zero,2e004 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2df80:	e0bffb17 	ldw	r2,-20(fp)
   2df84:	10800217 	ldw	r2,8(r2)
   2df88:	108000cc 	andi	r2,r2,3
   2df8c:	10001826 	beq	r2,zero,2dff0 <write+0xc4>
   2df90:	e0bffb17 	ldw	r2,-20(fp)
   2df94:	10800017 	ldw	r2,0(r2)
   2df98:	10800617 	ldw	r2,24(r2)
   2df9c:	10001426 	beq	r2,zero,2dff0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2dfa0:	e0bffb17 	ldw	r2,-20(fp)
   2dfa4:	10800017 	ldw	r2,0(r2)
   2dfa8:	10800617 	ldw	r2,24(r2)
   2dfac:	e0ffff17 	ldw	r3,-4(fp)
   2dfb0:	180d883a 	mov	r6,r3
   2dfb4:	e17ffe17 	ldw	r5,-8(fp)
   2dfb8:	e13ffb17 	ldw	r4,-20(fp)
   2dfbc:	103ee83a 	callr	r2
   2dfc0:	e0bffc15 	stw	r2,-16(fp)
   2dfc4:	e0bffc17 	ldw	r2,-16(fp)
   2dfc8:	1000070e 	bge	r2,zero,2dfe8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   2dfcc:	002def00 	call	2def0 <alt_get_errno>
   2dfd0:	1007883a 	mov	r3,r2
   2dfd4:	e0bffc17 	ldw	r2,-16(fp)
   2dfd8:	0085c83a 	sub	r2,zero,r2
   2dfdc:	18800015 	stw	r2,0(r3)
        return -1;
   2dfe0:	00bfffc4 	movi	r2,-1
   2dfe4:	00000c06 	br	2e018 <write+0xec>
      }
      return rval;
   2dfe8:	e0bffc17 	ldw	r2,-16(fp)
   2dfec:	00000a06 	br	2e018 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2dff0:	002def00 	call	2def0 <alt_get_errno>
   2dff4:	1007883a 	mov	r3,r2
   2dff8:	00800344 	movi	r2,13
   2dffc:	18800015 	stw	r2,0(r3)
   2e000:	00000406 	br	2e014 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e004:	002def00 	call	2def0 <alt_get_errno>
   2e008:	1007883a 	mov	r3,r2
   2e00c:	00801444 	movi	r2,81
   2e010:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e014:	00bfffc4 	movi	r2,-1
}
   2e018:	e037883a 	mov	sp,fp
   2e01c:	dfc00117 	ldw	ra,4(sp)
   2e020:	df000017 	ldw	fp,0(sp)
   2e024:	dec00204 	addi	sp,sp,8
   2e028:	f800283a 	ret

0002e02c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e02c:	defffd04 	addi	sp,sp,-12
   2e030:	dfc00215 	stw	ra,8(sp)
   2e034:	df000115 	stw	fp,4(sp)
   2e038:	df000104 	addi	fp,sp,4
   2e03c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e040:	d1600804 	addi	r5,gp,-32736
   2e044:	e13fff17 	ldw	r4,-4(fp)
   2e048:	00313480 	call	31348 <alt_dev_llist_insert>
}
   2e04c:	e037883a 	mov	sp,fp
   2e050:	dfc00117 	ldw	ra,4(sp)
   2e054:	df000017 	ldw	fp,0(sp)
   2e058:	dec00204 	addi	sp,sp,8
   2e05c:	f800283a 	ret

0002e060 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e060:	defffd04 	addi	sp,sp,-12
   2e064:	dfc00215 	stw	ra,8(sp)
   2e068:	df000115 	stw	fp,4(sp)
   2e06c:	df000104 	addi	fp,sp,4
   2e070:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII, NIOSII);
   2e074:	0031fec0 	call	31fec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e078:	00800044 	movi	r2,1
   2e07c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e080:	0001883a 	nop
   2e084:	e037883a 	mov	sp,fp
   2e088:	dfc00117 	ldw	ra,4(sp)
   2e08c:	df000017 	ldw	fp,0(sp)
   2e090:	dec00204 	addi	sp,sp,8
   2e094:	f800283a 	ret

0002e098 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e098:	defffe04 	addi	sp,sp,-8
   2e09c:	dfc00115 	stw	ra,4(sp)
   2e0a0:	df000015 	stw	fp,0(sp)
   2e0a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C, I2C);
   2e0a8:	010000f4 	movhi	r4,3
   2e0ac:	210cf704 	addi	r4,r4,13276
   2e0b0:	002e3600 	call	2e360 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
   2e0b4:	000d883a 	mov	r6,zero
   2e0b8:	000b883a 	mov	r5,zero
   2e0bc:	010000f4 	movhi	r4,3
   2e0c0:	210d0f04 	addi	r4,r4,13372
   2e0c4:	002fe8c0 	call	2fe8c <altera_avalon_jtag_uart_init>
   2e0c8:	010000f4 	movhi	r4,3
   2e0cc:	210d0504 	addi	r4,r4,13332
   2e0d0:	002e02c0 	call	2e02c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( ID, ID);
   2e0d4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART1, UART1);
   2e0d8:	01800084 	movi	r6,2
   2e0dc:	000b883a 	mov	r5,zero
   2e0e0:	010000f4 	movhi	r4,3
   2e0e4:	21112704 	addi	r4,r4,17564
   2e0e8:	00308a00 	call	308a0 <altera_avalon_uart_init>
   2e0ec:	010000f4 	movhi	r4,3
   2e0f0:	21111d04 	addi	r4,r4,17524
   2e0f4:	002e02c0 	call	2e02c <alt_dev_reg>
}
   2e0f8:	0001883a 	nop
   2e0fc:	e037883a 	mov	sp,fp
   2e100:	dfc00117 	ldw	ra,4(sp)
   2e104:	df000017 	ldw	fp,0(sp)
   2e108:	dec00204 	addi	sp,sp,8
   2e10c:	f800283a 	ret

0002e110 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   2e110:	defff904 	addi	sp,sp,-28
   2e114:	dfc00615 	stw	ra,24(sp)
   2e118:	df000515 	stw	fp,20(sp)
   2e11c:	df000504 	addi	fp,sp,20
   2e120:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   2e124:	008000b4 	movhi	r2,2
   2e128:	10a1a804 	addi	r2,r2,-31072
   2e12c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   2e130:	e0bfff17 	ldw	r2,-4(fp)
   2e134:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   2e138:	e0bffc17 	ldw	r2,-16(fp)
   2e13c:	10800717 	ldw	r2,28(r2)
   2e140:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   2e144:	e0bffd17 	ldw	r2,-12(fp)
   2e148:	10800217 	ldw	r2,8(r2)
   2e14c:	10800098 	cmpnei	r2,r2,2
   2e150:	1000251e 	bne	r2,zero,2e1e8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   2e154:	e0bffd17 	ldw	r2,-12(fp)
   2e158:	10c00017 	ldw	r3,0(r2)
   2e15c:	e0bffd17 	ldw	r2,-12(fp)
   2e160:	10800117 	ldw	r2,4(r2)
   2e164:	e13ffe04 	addi	r4,fp,-8
   2e168:	200f883a 	mov	r7,r4
   2e16c:	100d883a 	mov	r6,r2
   2e170:	180b883a 	mov	r5,r3
   2e174:	e13ffc17 	ldw	r4,-16(fp)
   2e178:	002e8c00 	call	2e8c0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   2e17c:	e0bffd17 	ldw	r2,-12(fp)
   2e180:	10c00117 	ldw	r3,4(r2)
   2e184:	e0bffe17 	ldw	r2,-8(fp)
   2e188:	1887c83a 	sub	r3,r3,r2
   2e18c:	e0bffd17 	ldw	r2,-12(fp)
   2e190:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   2e194:	e0bffd17 	ldw	r2,-12(fp)
   2e198:	10c00017 	ldw	r3,0(r2)
   2e19c:	e0bffe17 	ldw	r2,-8(fp)
   2e1a0:	1887883a 	add	r3,r3,r2
   2e1a4:	e0bffd17 	ldw	r2,-12(fp)
   2e1a8:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   2e1ac:	e0bffd17 	ldw	r2,-12(fp)
   2e1b0:	10800117 	ldw	r2,4(r2)
   2e1b4:	10000c26 	beq	r2,zero,2e1e8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e1b8:	01400704 	movi	r5,28
   2e1bc:	e13ffc17 	ldw	r4,-16(fp)
   2e1c0:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2e1c4:	01400084 	movi	r5,2
   2e1c8:	e13ffc17 	ldw	r4,-16(fp)
   2e1cc:	002fb1c0 	call	2fb1c <alt_avalon_i2c_int_enable>
   2e1d0:	00000e06 	br	2e20c <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   2e1d4:	e0bffb17 	ldw	r2,-20(fp)
   2e1d8:	10bfffc4 	addi	r2,r2,-1
   2e1dc:	e0bffb15 	stw	r2,-20(fp)
   2e1e0:	e0bffb17 	ldw	r2,-20(fp)
   2e1e4:	10000426 	beq	r2,zero,2e1f8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   2e1e8:	e13ffc17 	ldw	r4,-16(fp)
   2e1ec:	002e87c0 	call	2e87c <alt_avalon_i2c_is_busy>
   2e1f0:	103ff81e 	bne	r2,zero,2e1d4 <__alt_data_end+0xfffee1d4>
   2e1f4:	00000106 	br	2e1fc <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   2e1f8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   2e1fc:	e13ffc17 	ldw	r4,-16(fp)
   2e200:	002e5240 	call	2e524 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   2e204:	e0bffd17 	ldw	r2,-12(fp)
   2e208:	10000215 	stw	zero,8(r2)
}
   2e20c:	e037883a 	mov	sp,fp
   2e210:	dfc00117 	ldw	ra,4(sp)
   2e214:	df000017 	ldw	fp,0(sp)
   2e218:	dec00204 	addi	sp,sp,8
   2e21c:	f800283a 	ret

0002e220 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   2e220:	defffc04 	addi	sp,sp,-16
   2e224:	dfc00315 	stw	ra,12(sp)
   2e228:	df000215 	stw	fp,8(sp)
   2e22c:	df000204 	addi	fp,sp,8
   2e230:	e13ffe15 	stw	r4,-8(fp)
   2e234:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   2e238:	e0bfff17 	ldw	r2,-4(fp)
   2e23c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   2e240:	e1ffff17 	ldw	r7,-4(fp)
   2e244:	000d883a 	mov	r6,zero
   2e248:	014000f4 	movhi	r5,3
   2e24c:	29784404 	addi	r5,r5,-7920
   2e250:	e13ffe17 	ldw	r4,-8(fp)
   2e254:	002e30c0 	call	2e30c <alt_avalon_i2c_register_callback>
}
   2e258:	0001883a 	nop
   2e25c:	e037883a 	mov	sp,fp
   2e260:	dfc00117 	ldw	ra,4(sp)
   2e264:	df000017 	ldw	fp,0(sp)
   2e268:	dec00204 	addi	sp,sp,8
   2e26c:	f800283a 	ret

0002e270 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   2e270:	defff904 	addi	sp,sp,-28
   2e274:	dfc00615 	stw	ra,24(sp)
   2e278:	df000515 	stw	fp,20(sp)
   2e27c:	df000504 	addi	fp,sp,20
   2e280:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   2e284:	e0bfff17 	ldw	r2,-4(fp)
   2e288:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2e28c:	014007c4 	movi	r5,31
   2e290:	e13ffb17 	ldw	r4,-20(fp)
   2e294:	002fab40 	call	2fab4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e298:	01400704 	movi	r5,28
   2e29c:	e13ffb17 	ldw	r4,-20(fp)
   2e2a0:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   2e2a4:	e0bffb17 	ldw	r2,-20(fp)
   2e2a8:	10800617 	ldw	r2,24(r2)
   2e2ac:	10001126 	beq	r2,zero,2e2f4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e2b0:	0005303a 	rdctl	r2,status
   2e2b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e2b8:	e0fffd17 	ldw	r3,-12(fp)
   2e2bc:	00bfff84 	movi	r2,-2
   2e2c0:	1884703a 	and	r2,r3,r2
   2e2c4:	1001703a 	wrctl	status,r2
  
  return context;
   2e2c8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2e2cc:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   2e2d0:	e0bffb17 	ldw	r2,-20(fp)
   2e2d4:	10800617 	ldw	r2,24(r2)
   2e2d8:	e13ffb17 	ldw	r4,-20(fp)
   2e2dc:	103ee83a 	callr	r2
   2e2e0:	e0bffc17 	ldw	r2,-16(fp)
   2e2e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e2e8:	e0bffe17 	ldw	r2,-8(fp)
   2e2ec:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   2e2f0:	0001883a 	nop
   2e2f4:	0001883a 	nop
}
   2e2f8:	e037883a 	mov	sp,fp
   2e2fc:	dfc00117 	ldw	ra,4(sp)
   2e300:	df000017 	ldw	fp,0(sp)
   2e304:	dec00204 	addi	sp,sp,8
   2e308:	f800283a 	ret

0002e30c <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   2e30c:	defffb04 	addi	sp,sp,-20
   2e310:	df000415 	stw	fp,16(sp)
   2e314:	df000404 	addi	fp,sp,16
   2e318:	e13ffc15 	stw	r4,-16(fp)
   2e31c:	e17ffd15 	stw	r5,-12(fp)
   2e320:	e1bffe15 	stw	r6,-8(fp)
   2e324:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   2e328:	e0bffc17 	ldw	r2,-16(fp)
   2e32c:	e0fffd17 	ldw	r3,-12(fp)
   2e330:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   2e334:	e0bffc17 	ldw	r2,-16(fp)
   2e338:	e0ffff17 	ldw	r3,-4(fp)
   2e33c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   2e340:	e0bffc17 	ldw	r2,-16(fp)
   2e344:	e0fffe17 	ldw	r3,-8(fp)
   2e348:	10c00815 	stw	r3,32(r2)

    return ;
   2e34c:	0001883a 	nop
}
   2e350:	e037883a 	mov	sp,fp
   2e354:	df000017 	ldw	fp,0(sp)
   2e358:	dec00104 	addi	sp,sp,4
   2e35c:	f800283a 	ret

0002e360 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   2e360:	defff704 	addi	sp,sp,-36
   2e364:	dfc00815 	stw	ra,32(sp)
   2e368:	df000715 	stw	fp,28(sp)
   2e36c:	df000704 	addi	fp,sp,28
   2e370:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   2e374:	e13fff17 	ldw	r4,-4(fp)
   2e378:	002e5240 	call	2e524 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2e37c:	014007c4 	movi	r5,31
   2e380:	e13fff17 	ldw	r4,-4(fp)
   2e384:	002fab40 	call	2fab4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e388:	01400704 	movi	r5,28
   2e38c:	e13fff17 	ldw	r4,-4(fp)
   2e390:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   2e394:	014000c4 	movi	r5,3
   2e398:	e13fff17 	ldw	r4,-4(fp)
   2e39c:	002fcc00 	call	2fcc0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   2e3a0:	014000c4 	movi	r5,3
   2e3a4:	e13fff17 	ldw	r4,-4(fp)
   2e3a8:	002fc100 	call	2fc10 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   2e3ac:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   2e3b0:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   2e3b4:	e0bffb04 	addi	r2,fp,-20
   2e3b8:	018000b4 	movhi	r6,2
   2e3bc:	31a1a804 	addi	r6,r6,-31072
   2e3c0:	100b883a 	mov	r5,r2
   2e3c4:	e13fff17 	ldw	r4,-4(fp)
   2e3c8:	002e7800 	call	2e780 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   2e3cc:	e0bffb04 	addi	r2,fp,-20
   2e3d0:	100b883a 	mov	r5,r2
   2e3d4:	e13fff17 	ldw	r4,-4(fp)
   2e3d8:	002e6200 	call	2e620 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   2e3dc:	d1600d04 	addi	r5,gp,-32716
   2e3e0:	e13fff17 	ldw	r4,-4(fp)
   2e3e4:	00313480 	call	31348 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2e3e8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   2e3ec:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   2e3f0:	e0bffa17 	ldw	r2,-24(fp)
   2e3f4:	10000c1e 	bne	r2,zero,2e428 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   2e3f8:	e0bfff17 	ldw	r2,-4(fp)
   2e3fc:	10c00417 	ldw	r3,16(r2)
   2e400:	e0bfff17 	ldw	r2,-4(fp)
   2e404:	10800517 	ldw	r2,20(r2)
   2e408:	d8000015 	stw	zero,0(sp)
   2e40c:	e1ffff17 	ldw	r7,-4(fp)
   2e410:	018000f4 	movhi	r6,3
   2e414:	31b89c04 	addi	r6,r6,-7568
   2e418:	100b883a 	mov	r5,r2
   2e41c:	1809883a 	mov	r4,r3
   2e420:	003155c0 	call	3155c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   2e424:	00000406 	br	2e438 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   2e428:	010000f4 	movhi	r4,3
   2e42c:	210a5c04 	addi	r4,r4,10608
   2e430:	0031be00 	call	31be0 <alt_printf>
    }

    return;
   2e434:	0001883a 	nop

}
   2e438:	e037883a 	mov	sp,fp
   2e43c:	dfc00117 	ldw	ra,4(sp)
   2e440:	df000017 	ldw	fp,0(sp)
   2e444:	dec00204 	addi	sp,sp,8
   2e448:	f800283a 	ret

0002e44c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   2e44c:	defffc04 	addi	sp,sp,-16
   2e450:	dfc00315 	stw	ra,12(sp)
   2e454:	df000215 	stw	fp,8(sp)
   2e458:	df000204 	addi	fp,sp,8
   2e45c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   2e460:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   2e464:	d1600d04 	addi	r5,gp,-32716
   2e468:	e13fff17 	ldw	r4,-4(fp)
   2e46c:	00314ac0 	call	314ac <alt_find_dev>
   2e470:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   2e474:	e0bffe17 	ldw	r2,-8(fp)
}
   2e478:	e037883a 	mov	sp,fp
   2e47c:	dfc00117 	ldw	ra,4(sp)
   2e480:	df000017 	ldw	fp,0(sp)
   2e484:	dec00204 	addi	sp,sp,8
   2e488:	f800283a 	ret

0002e48c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e48c:	defffc04 	addi	sp,sp,-16
   2e490:	df000315 	stw	fp,12(sp)
   2e494:	df000304 	addi	fp,sp,12
   2e498:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   2e49c:	e0bfff17 	ldw	r2,-4(fp)
   2e4a0:	10800717 	ldw	r2,28(r2)
   2e4a4:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   2e4a8:	e0bfff17 	ldw	r2,-4(fp)
   2e4ac:	10800317 	ldw	r2,12(r2)
   2e4b0:	10800204 	addi	r2,r2,8
   2e4b4:	10800037 	ldwio	r2,0(r2)
   2e4b8:	1080004c 	andi	r2,r2,1
   2e4bc:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   2e4c0:	e0bffe17 	ldw	r2,-8(fp)
   2e4c4:	10000226 	beq	r2,zero,2e4d0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   2e4c8:	00bffe44 	movi	r2,-7
   2e4cc:	00001106 	br	2e514 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   2e4d0:	e0bfff17 	ldw	r2,-4(fp)
   2e4d4:	10c00617 	ldw	r3,24(r2)
   2e4d8:	008000f4 	movhi	r2,3
   2e4dc:	10b84404 	addi	r2,r2,-7920
   2e4e0:	1880021e 	bne	r3,r2,2e4ec <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   2e4e4:	e0bffd17 	ldw	r2,-12(fp)
   2e4e8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   2e4ec:	e0bfff17 	ldw	r2,-4(fp)
   2e4f0:	10800317 	ldw	r2,12(r2)
   2e4f4:	10800204 	addi	r2,r2,8
   2e4f8:	e0ffff17 	ldw	r3,-4(fp)
   2e4fc:	18c00317 	ldw	r3,12(r3)
   2e500:	18c00204 	addi	r3,r3,8
   2e504:	18c00037 	ldwio	r3,0(r3)
   2e508:	18c00054 	ori	r3,r3,1
   2e50c:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   2e510:	0005883a 	mov	r2,zero
}
   2e514:	e037883a 	mov	sp,fp
   2e518:	df000017 	ldw	fp,0(sp)
   2e51c:	dec00104 	addi	sp,sp,4
   2e520:	f800283a 	ret

0002e524 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e524:	defffe04 	addi	sp,sp,-8
   2e528:	df000115 	stw	fp,4(sp)
   2e52c:	df000104 	addi	fp,sp,4
   2e530:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   2e534:	e0bfff17 	ldw	r2,-4(fp)
   2e538:	10800317 	ldw	r2,12(r2)
   2e53c:	10800204 	addi	r2,r2,8
   2e540:	e0ffff17 	ldw	r3,-4(fp)
   2e544:	18c00317 	ldw	r3,12(r3)
   2e548:	18c00204 	addi	r3,r3,8
   2e54c:	19000037 	ldwio	r4,0(r3)
   2e550:	00ffff84 	movi	r3,-2
   2e554:	20c6703a 	and	r3,r4,r3
   2e558:	10c00035 	stwio	r3,0(r2)

}
   2e55c:	0001883a 	nop
   2e560:	e037883a 	mov	sp,fp
   2e564:	df000017 	ldw	fp,0(sp)
   2e568:	dec00104 	addi	sp,sp,4
   2e56c:	f800283a 	ret

0002e570 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2e570:	defffd04 	addi	sp,sp,-12
   2e574:	df000215 	stw	fp,8(sp)
   2e578:	df000204 	addi	fp,sp,8
   2e57c:	e13ffe15 	stw	r4,-8(fp)
   2e580:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   2e584:	e0bffe17 	ldw	r2,-8(fp)
   2e588:	10c00d17 	ldw	r3,52(r2)
   2e58c:	e0bfff17 	ldw	r2,-4(fp)
   2e590:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   2e594:	e0bffe17 	ldw	r2,-8(fp)
   2e598:	10800317 	ldw	r2,12(r2)
   2e59c:	10800204 	addi	r2,r2,8
   2e5a0:	10800037 	ldwio	r2,0(r2)
   2e5a4:	1080008c 	andi	r2,r2,2
   2e5a8:	1005d07a 	srai	r2,r2,1
   2e5ac:	1007883a 	mov	r3,r2
   2e5b0:	e0bfff17 	ldw	r2,-4(fp)
   2e5b4:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   2e5b8:	e0bffe17 	ldw	r2,-8(fp)
   2e5bc:	10800317 	ldw	r2,12(r2)
   2e5c0:	10800904 	addi	r2,r2,36
   2e5c4:	10800037 	ldwio	r2,0(r2)
   2e5c8:	1007883a 	mov	r3,r2
   2e5cc:	e0bfff17 	ldw	r2,-4(fp)
   2e5d0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   2e5d4:	e0bffe17 	ldw	r2,-8(fp)
   2e5d8:	10800317 	ldw	r2,12(r2)
   2e5dc:	10800804 	addi	r2,r2,32
   2e5e0:	10800037 	ldwio	r2,0(r2)
   2e5e4:	1007883a 	mov	r3,r2
   2e5e8:	e0bfff17 	ldw	r2,-4(fp)
   2e5ec:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   2e5f0:	e0bffe17 	ldw	r2,-8(fp)
   2e5f4:	10800317 	ldw	r2,12(r2)
   2e5f8:	10800a04 	addi	r2,r2,40
   2e5fc:	10800037 	ldwio	r2,0(r2)
   2e600:	1007883a 	mov	r3,r2
   2e604:	e0bfff17 	ldw	r2,-4(fp)
   2e608:	10c0030d 	sth	r3,12(r2)
}
   2e60c:	0001883a 	nop
   2e610:	e037883a 	mov	sp,fp
   2e614:	df000017 	ldw	fp,0(sp)
   2e618:	dec00104 	addi	sp,sp,4
   2e61c:	f800283a 	ret

0002e620 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2e620:	defffd04 	addi	sp,sp,-12
   2e624:	df000215 	stw	fp,8(sp)
   2e628:	df000204 	addi	fp,sp,8
   2e62c:	e13ffe15 	stw	r4,-8(fp)
   2e630:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   2e634:	e0bfff17 	ldw	r2,-4(fp)
   2e638:	10c00017 	ldw	r3,0(r2)
   2e63c:	e0bffe17 	ldw	r2,-8(fp)
   2e640:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   2e644:	e0bffe17 	ldw	r2,-8(fp)
   2e648:	10800317 	ldw	r2,12(r2)
   2e64c:	10c00204 	addi	r3,r2,8
   2e650:	e0bffe17 	ldw	r2,-8(fp)
   2e654:	10800317 	ldw	r2,12(r2)
   2e658:	10800204 	addi	r2,r2,8
   2e65c:	10800037 	ldwio	r2,0(r2)
   2e660:	1009883a 	mov	r4,r2
   2e664:	00bfff44 	movi	r2,-3
   2e668:	2088703a 	and	r4,r4,r2
   2e66c:	e0bfff17 	ldw	r2,-4(fp)
   2e670:	10800117 	ldw	r2,4(r2)
   2e674:	1085883a 	add	r2,r2,r2
   2e678:	1080008c 	andi	r2,r2,2
   2e67c:	2084b03a 	or	r2,r4,r2
   2e680:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   2e684:	e0bffe17 	ldw	r2,-8(fp)
   2e688:	10800317 	ldw	r2,12(r2)
   2e68c:	10800904 	addi	r2,r2,36
   2e690:	e0ffff17 	ldw	r3,-4(fp)
   2e694:	18c0020b 	ldhu	r3,8(r3)
   2e698:	18ffffcc 	andi	r3,r3,65535
   2e69c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   2e6a0:	e0bffe17 	ldw	r2,-8(fp)
   2e6a4:	10800317 	ldw	r2,12(r2)
   2e6a8:	10800804 	addi	r2,r2,32
   2e6ac:	e0ffff17 	ldw	r3,-4(fp)
   2e6b0:	18c0028b 	ldhu	r3,10(r3)
   2e6b4:	18ffffcc 	andi	r3,r3,65535
   2e6b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   2e6bc:	e0bffe17 	ldw	r2,-8(fp)
   2e6c0:	10800317 	ldw	r2,12(r2)
   2e6c4:	10800a04 	addi	r2,r2,40
   2e6c8:	e0ffff17 	ldw	r3,-4(fp)
   2e6cc:	18c0030b 	ldhu	r3,12(r3)
   2e6d0:	18ffffcc 	andi	r3,r3,65535
   2e6d4:	10c00035 	stwio	r3,0(r2)
}
   2e6d8:	0001883a 	nop
   2e6dc:	e037883a 	mov	sp,fp
   2e6e0:	df000017 	ldw	fp,0(sp)
   2e6e4:	dec00104 	addi	sp,sp,4
   2e6e8:	f800283a 	ret

0002e6ec <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   2e6ec:	defffb04 	addi	sp,sp,-20
   2e6f0:	dfc00415 	stw	ra,16(sp)
   2e6f4:	df000315 	stw	fp,12(sp)
   2e6f8:	df000304 	addi	fp,sp,12
   2e6fc:	e13ffd15 	stw	r4,-12(fp)
   2e700:	e17ffe15 	stw	r5,-8(fp)
   2e704:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   2e708:	e0bffe17 	ldw	r2,-8(fp)
   2e70c:	1080028b 	ldhu	r2,10(r2)
   2e710:	10bfffcc 	andi	r2,r2,65535
   2e714:	10000426 	beq	r2,zero,2e728 <alt_avalon_i2c_master_config_speed_get+0x3c>
   2e718:	e0bffe17 	ldw	r2,-8(fp)
   2e71c:	1080020b 	ldhu	r2,8(r2)
   2e720:	10bfffcc 	andi	r2,r2,65535
   2e724:	1000021e 	bne	r2,zero,2e730 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   2e728:	00bfff44 	movi	r2,-3
   2e72c:	00000f06 	br	2e76c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   2e730:	e0bffd17 	ldw	r2,-12(fp)
   2e734:	11000c17 	ldw	r4,48(r2)
   2e738:	e0bffe17 	ldw	r2,-8(fp)
   2e73c:	1080028b 	ldhu	r2,10(r2)
   2e740:	10ffffcc 	andi	r3,r2,65535
   2e744:	e0bffe17 	ldw	r2,-8(fp)
   2e748:	1080020b 	ldhu	r2,8(r2)
   2e74c:	10bfffcc 	andi	r2,r2,65535
   2e750:	1885883a 	add	r2,r3,r2
   2e754:	100b883a 	mov	r5,r2
   2e758:	002ace00 	call	2ace0 <__udivsi3>
   2e75c:	1007883a 	mov	r3,r2
   2e760:	e0bfff17 	ldw	r2,-4(fp)
   2e764:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   2e768:	0005883a 	mov	r2,zero
}
   2e76c:	e037883a 	mov	sp,fp
   2e770:	dfc00117 	ldw	ra,4(sp)
   2e774:	df000017 	ldw	fp,0(sp)
   2e778:	dec00204 	addi	sp,sp,8
   2e77c:	f800283a 	ret

0002e780 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   2e780:	defff904 	addi	sp,sp,-28
   2e784:	dfc00615 	stw	ra,24(sp)
   2e788:	df000515 	stw	fp,20(sp)
   2e78c:	df000504 	addi	fp,sp,20
   2e790:	e13ffd15 	stw	r4,-12(fp)
   2e794:	e17ffe15 	stw	r5,-8(fp)
   2e798:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   2e79c:	e0ffff17 	ldw	r3,-4(fp)
   2e7a0:	008001b4 	movhi	r2,6
   2e7a4:	1086a004 	addi	r2,r2,6784
   2e7a8:	10c00436 	bltu	r2,r3,2e7bc <alt_avalon_i2c_master_config_speed_set+0x3c>
   2e7ac:	e0bfff17 	ldw	r2,-4(fp)
   2e7b0:	10000226 	beq	r2,zero,2e7bc <alt_avalon_i2c_master_config_speed_set+0x3c>
   2e7b4:	e0bfff17 	ldw	r2,-4(fp)
   2e7b8:	1000021e 	bne	r2,zero,2e7c4 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   2e7bc:	00bfff04 	movi	r2,-4
   2e7c0:	00002906 	br	2e868 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   2e7c4:	e0bffd17 	ldw	r2,-12(fp)
   2e7c8:	10c00c17 	ldw	r3,48(r2)
   2e7cc:	e0bfff17 	ldw	r2,-4(fp)
   2e7d0:	1085883a 	add	r2,r2,r2
   2e7d4:	100b883a 	mov	r5,r2
   2e7d8:	1809883a 	mov	r4,r3
   2e7dc:	002ace00 	call	2ace0 <__udivsi3>
   2e7e0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2e7e4:	e0bffb17 	ldw	r2,-20(fp)
   2e7e8:	10800f04 	addi	r2,r2,60
   2e7ec:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2e7f0:	e0bffb17 	ldw	r2,-20(fp)
   2e7f4:	10bff104 	addi	r2,r2,-60
   2e7f8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   2e7fc:	e0ffff17 	ldw	r3,-4(fp)
   2e800:	008000b4 	movhi	r2,2
   2e804:	10a1a804 	addi	r2,r2,-31072
   2e808:	10c0042e 	bgeu	r2,r3,2e81c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   2e80c:	e0bffe17 	ldw	r2,-8(fp)
   2e810:	00c00044 	movi	r3,1
   2e814:	10c00115 	stw	r3,4(r2)
   2e818:	00000206 	br	2e824 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   2e81c:	e0bffe17 	ldw	r2,-8(fp)
   2e820:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   2e824:	e0bffb17 	ldw	r2,-20(fp)
   2e828:	1007883a 	mov	r3,r2
   2e82c:	e0bffe17 	ldw	r2,-8(fp)
   2e830:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   2e834:	e0bffc17 	ldw	r2,-16(fp)
   2e838:	1007883a 	mov	r3,r2
   2e83c:	e0bffe17 	ldw	r2,-8(fp)
   2e840:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   2e844:	e0bffb17 	ldw	r2,-20(fp)
   2e848:	1007883a 	mov	r3,r2
   2e84c:	e0bffb17 	ldw	r2,-20(fp)
   2e850:	1004d07a 	srli	r2,r2,1
   2e854:	1885c83a 	sub	r2,r3,r2
   2e858:	1007883a 	mov	r3,r2
   2e85c:	e0bffe17 	ldw	r2,-8(fp)
   2e860:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   2e864:	0005883a 	mov	r2,zero

}
   2e868:	e037883a 	mov	sp,fp
   2e86c:	dfc00117 	ldw	ra,4(sp)
   2e870:	df000017 	ldw	fp,0(sp)
   2e874:	dec00204 	addi	sp,sp,8
   2e878:	f800283a 	ret

0002e87c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e87c:	defffe04 	addi	sp,sp,-8
   2e880:	df000115 	stw	fp,4(sp)
   2e884:	df000104 	addi	fp,sp,4
   2e888:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   2e88c:	e0bfff17 	ldw	r2,-4(fp)
   2e890:	10800317 	ldw	r2,12(r2)
   2e894:	10800504 	addi	r2,r2,20
   2e898:	10800037 	ldwio	r2,0(r2)
   2e89c:	1080004c 	andi	r2,r2,1
   2e8a0:	10000226 	beq	r2,zero,2e8ac <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   2e8a4:	00800044 	movi	r2,1
   2e8a8:	00000106 	br	2e8b0 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   2e8ac:	0005883a 	mov	r2,zero
}
   2e8b0:	e037883a 	mov	sp,fp
   2e8b4:	df000017 	ldw	fp,0(sp)
   2e8b8:	dec00104 	addi	sp,sp,4
   2e8bc:	f800283a 	ret

0002e8c0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   2e8c0:	defffb04 	addi	sp,sp,-20
   2e8c4:	df000415 	stw	fp,16(sp)
   2e8c8:	df000404 	addi	fp,sp,16
   2e8cc:	e13ffc15 	stw	r4,-16(fp)
   2e8d0:	e17ffd15 	stw	r5,-12(fp)
   2e8d4:	e1bffe15 	stw	r6,-8(fp)
   2e8d8:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   2e8dc:	e0bfff17 	ldw	r2,-4(fp)
   2e8e0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2e8e4:	00001406 	br	2e938 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2e8e8:	e0bfff17 	ldw	r2,-4(fp)
   2e8ec:	10800017 	ldw	r2,0(r2)
   2e8f0:	e0fffd17 	ldw	r3,-12(fp)
   2e8f4:	1885883a 	add	r2,r3,r2
   2e8f8:	e0fffc17 	ldw	r3,-16(fp)
   2e8fc:	18c00317 	ldw	r3,12(r3)
   2e900:	18c00104 	addi	r3,r3,4
   2e904:	18c00037 	ldwio	r3,0(r3)
   2e908:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   2e90c:	e0bfff17 	ldw	r2,-4(fp)
   2e910:	10800017 	ldw	r2,0(r2)
   2e914:	10c00044 	addi	r3,r2,1
   2e918:	e0bfff17 	ldw	r2,-4(fp)
   2e91c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2e920:	e0bfff17 	ldw	r2,-4(fp)
   2e924:	10c00017 	ldw	r3,0(r2)
   2e928:	e0bffe17 	ldw	r2,-8(fp)
   2e92c:	1880021e 	bne	r3,r2,2e938 <alt_avalon_i2c_rx_read_available+0x78>
   2e930:	e0bffe17 	ldw	r2,-8(fp)
   2e934:	1000061e 	bne	r2,zero,2e950 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2e938:	e0bffc17 	ldw	r2,-16(fp)
   2e93c:	10800317 	ldw	r2,12(r2)
   2e940:	10800704 	addi	r2,r2,28
   2e944:	10800037 	ldwio	r2,0(r2)
   2e948:	103fe71e 	bne	r2,zero,2e8e8 <__alt_data_end+0xfffee8e8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   2e94c:	00000106 	br	2e954 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2e950:	0001883a 	nop
    }
}
   2e954:	0001883a 	nop
   2e958:	e037883a 	mov	sp,fp
   2e95c:	df000017 	ldw	fp,0(sp)
   2e960:	dec00104 	addi	sp,sp,4
   2e964:	f800283a 	ret

0002e968 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   2e968:	defffa04 	addi	sp,sp,-24
   2e96c:	dfc00515 	stw	ra,20(sp)
   2e970:	df000415 	stw	fp,16(sp)
   2e974:	df000404 	addi	fp,sp,16
   2e978:	e13ffe15 	stw	r4,-8(fp)
   2e97c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   2e980:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   2e984:	008000b4 	movhi	r2,2
   2e988:	10a1a804 	addi	r2,r2,-31072
   2e98c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2e990:	00000d06 	br	2e9c8 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   2e994:	e0bffd17 	ldw	r2,-12(fp)
   2e998:	108002a8 	cmpgeui	r2,r2,10
   2e99c:	1000021e 	bne	r2,zero,2e9a8 <alt_avalon_i2c_rx_read+0x40>
   2e9a0:	0109c404 	movi	r4,10000
   2e9a4:	00311940 	call	31194 <alt_busy_sleep>
      if (--timeout == 0)
   2e9a8:	e0bffd17 	ldw	r2,-12(fp)
   2e9ac:	10bfffc4 	addi	r2,r2,-1
   2e9b0:	e0bffd15 	stw	r2,-12(fp)
   2e9b4:	e0bffd17 	ldw	r2,-12(fp)
   2e9b8:	1000031e 	bne	r2,zero,2e9c8 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   2e9bc:	00bfff84 	movi	r2,-2
   2e9c0:	e0bffc15 	stw	r2,-16(fp)
        break;
   2e9c4:	00000506 	br	2e9dc <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2e9c8:	e0bffe17 	ldw	r2,-8(fp)
   2e9cc:	10800317 	ldw	r2,12(r2)
   2e9d0:	10800704 	addi	r2,r2,28
   2e9d4:	10800037 	ldwio	r2,0(r2)
   2e9d8:	103fee26 	beq	r2,zero,2e994 <__alt_data_end+0xfffee994>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2e9dc:	e0bffe17 	ldw	r2,-8(fp)
   2e9e0:	10800317 	ldw	r2,12(r2)
   2e9e4:	10800104 	addi	r2,r2,4
   2e9e8:	10800037 	ldwio	r2,0(r2)
   2e9ec:	1007883a 	mov	r3,r2
   2e9f0:	e0bfff17 	ldw	r2,-4(fp)
   2e9f4:	10c00005 	stb	r3,0(r2)
        
    return status;
   2e9f8:	e0bffc17 	ldw	r2,-16(fp)
}
   2e9fc:	e037883a 	mov	sp,fp
   2ea00:	dfc00117 	ldw	ra,4(sp)
   2ea04:	df000017 	ldw	fp,0(sp)
   2ea08:	dec00204 	addi	sp,sp,8
   2ea0c:	f800283a 	ret

0002ea10 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   2ea10:	defff804 	addi	sp,sp,-32
   2ea14:	dfc00715 	stw	ra,28(sp)
   2ea18:	df000615 	stw	fp,24(sp)
   2ea1c:	df000604 	addi	fp,sp,24
   2ea20:	e13ffc15 	stw	r4,-16(fp)
   2ea24:	2809883a 	mov	r4,r5
   2ea28:	3007883a 	mov	r3,r6
   2ea2c:	3805883a 	mov	r2,r7
   2ea30:	e13ffd05 	stb	r4,-12(fp)
   2ea34:	e0fffe05 	stb	r3,-8(fp)
   2ea38:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   2ea3c:	0089c404 	movi	r2,10000
   2ea40:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2ea44:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2ea48:	00000c06 	br	2ea7c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   2ea4c:	e0bffa17 	ldw	r2,-24(fp)
   2ea50:	108002a8 	cmpgeui	r2,r2,10
   2ea54:	1000021e 	bne	r2,zero,2ea60 <alt_avalon_i2c_cmd_write+0x50>
   2ea58:	0109c404 	movi	r4,10000
   2ea5c:	00311940 	call	31194 <alt_busy_sleep>
      if (--timeout == 0)
   2ea60:	e0bffa17 	ldw	r2,-24(fp)
   2ea64:	10bfffc4 	addi	r2,r2,-1
   2ea68:	e0bffa15 	stw	r2,-24(fp)
   2ea6c:	e0bffa17 	ldw	r2,-24(fp)
   2ea70:	1000021e 	bne	r2,zero,2ea7c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   2ea74:	00bfff84 	movi	r2,-2
   2ea78:	00001906 	br	2eae0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2ea7c:	e0bffc17 	ldw	r2,-16(fp)
   2ea80:	10800317 	ldw	r2,12(r2)
   2ea84:	10800404 	addi	r2,r2,16
   2ea88:	10800037 	ldwio	r2,0(r2)
   2ea8c:	1080004c 	andi	r2,r2,1
   2ea90:	103fee26 	beq	r2,zero,2ea4c <__alt_data_end+0xfffeea4c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   2ea94:	e0bffc17 	ldw	r2,-16(fp)
   2ea98:	10800317 	ldw	r2,12(r2)
   2ea9c:	e13ffd03 	ldbu	r4,-12(fp)
   2eaa0:	e0fffe03 	ldbu	r3,-8(fp)
   2eaa4:	1806927a 	slli	r3,r3,9
   2eaa8:	20c8b03a 	or	r4,r4,r3
   2eaac:	e0ffff03 	ldbu	r3,-4(fp)
   2eab0:	1806923a 	slli	r3,r3,8
   2eab4:	20c6b03a 	or	r3,r4,r3
   2eab8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2eabc:	e0bffb04 	addi	r2,fp,-20
   2eac0:	100b883a 	mov	r5,r2
   2eac4:	e13ffc17 	ldw	r4,-16(fp)
   2eac8:	002ec500 	call	2ec50 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   2eacc:	e0bffb04 	addi	r2,fp,-20
   2ead0:	100b883a 	mov	r5,r2
   2ead4:	e13ffc17 	ldw	r4,-16(fp)
   2ead8:	002ec9c0 	call	2ec9c <alt_avalon_i2c_check_arblost>
    
    return status;
   2eadc:	e0bffb17 	ldw	r2,-20(fp)
}
   2eae0:	e037883a 	mov	sp,fp
   2eae4:	dfc00117 	ldw	ra,4(sp)
   2eae8:	df000017 	ldw	fp,0(sp)
   2eaec:	dec00204 	addi	sp,sp,8
   2eaf0:	f800283a 	ret

0002eaf4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   2eaf4:	defffa04 	addi	sp,sp,-24
   2eaf8:	dfc00515 	stw	ra,20(sp)
   2eafc:	df000415 	stw	fp,16(sp)
   2eb00:	df000404 	addi	fp,sp,16
   2eb04:	e13ffd15 	stw	r4,-12(fp)
   2eb08:	e17ffe15 	stw	r5,-8(fp)
   2eb0c:	3005883a 	mov	r2,r6
   2eb10:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2eb14:	e0bffd17 	ldw	r2,-12(fp)
   2eb18:	10800d17 	ldw	r2,52(r2)
   2eb1c:	10800058 	cmpnei	r2,r2,1
   2eb20:	10001c1e 	bne	r2,zero,2eb94 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2eb24:	e0bffd17 	ldw	r2,-12(fp)
   2eb28:	10800917 	ldw	r2,36(r2)
   2eb2c:	109e0014 	ori	r2,r2,30720
   2eb30:	1004d1fa 	srli	r2,r2,7
   2eb34:	1007883a 	mov	r3,r2
   2eb38:	00bfff84 	movi	r2,-2
   2eb3c:	1884703a 	and	r2,r3,r2
   2eb40:	1007883a 	mov	r3,r2
   2eb44:	e0bffe17 	ldw	r2,-8(fp)
   2eb48:	1884b03a 	or	r2,r3,r2
   2eb4c:	10803fcc 	andi	r2,r2,255
   2eb50:	e0ffff03 	ldbu	r3,-4(fp)
   2eb54:	000f883a 	mov	r7,zero
   2eb58:	180d883a 	mov	r6,r3
   2eb5c:	100b883a 	mov	r5,r2
   2eb60:	e13ffd17 	ldw	r4,-12(fp)
   2eb64:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2eb68:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   2eb6c:	e0bffd17 	ldw	r2,-12(fp)
   2eb70:	10800917 	ldw	r2,36(r2)
   2eb74:	10803fcc 	andi	r2,r2,255
   2eb78:	000f883a 	mov	r7,zero
   2eb7c:	000d883a 	mov	r6,zero
   2eb80:	100b883a 	mov	r5,r2
   2eb84:	e13ffd17 	ldw	r4,-12(fp)
   2eb88:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2eb8c:	e0bffc15 	stw	r2,-16(fp)
   2eb90:	00000e06 	br	2ebcc <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2eb94:	e0bffd17 	ldw	r2,-12(fp)
   2eb98:	10800917 	ldw	r2,36(r2)
   2eb9c:	1085883a 	add	r2,r2,r2
   2eba0:	1007883a 	mov	r3,r2
   2eba4:	e0bffe17 	ldw	r2,-8(fp)
   2eba8:	1884b03a 	or	r2,r3,r2
   2ebac:	10803fcc 	andi	r2,r2,255
   2ebb0:	e0ffff03 	ldbu	r3,-4(fp)
   2ebb4:	000f883a 	mov	r7,zero
   2ebb8:	180d883a 	mov	r6,r3
   2ebbc:	100b883a 	mov	r5,r2
   2ebc0:	e13ffd17 	ldw	r4,-12(fp)
   2ebc4:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2ebc8:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   2ebcc:	e0bffc17 	ldw	r2,-16(fp)
}
   2ebd0:	e037883a 	mov	sp,fp
   2ebd4:	dfc00117 	ldw	ra,4(sp)
   2ebd8:	df000017 	ldw	fp,0(sp)
   2ebdc:	dec00204 	addi	sp,sp,8
   2ebe0:	f800283a 	ret

0002ebe4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   2ebe4:	defffd04 	addi	sp,sp,-12
   2ebe8:	df000215 	stw	fp,8(sp)
   2ebec:	df000204 	addi	fp,sp,8
   2ebf0:	e13ffe15 	stw	r4,-8(fp)
   2ebf4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   2ebf8:	e0bffe17 	ldw	r2,-8(fp)
   2ebfc:	10c00917 	ldw	r3,36(r2)
   2ec00:	e0bfff17 	ldw	r2,-4(fp)
   2ec04:	10c00015 	stw	r3,0(r2)
}
   2ec08:	0001883a 	nop
   2ec0c:	e037883a 	mov	sp,fp
   2ec10:	df000017 	ldw	fp,0(sp)
   2ec14:	dec00104 	addi	sp,sp,4
   2ec18:	f800283a 	ret

0002ec1c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   2ec1c:	defffd04 	addi	sp,sp,-12
   2ec20:	df000215 	stw	fp,8(sp)
   2ec24:	df000204 	addi	fp,sp,8
   2ec28:	e13ffe15 	stw	r4,-8(fp)
   2ec2c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   2ec30:	e0bffe17 	ldw	r2,-8(fp)
   2ec34:	e0ffff17 	ldw	r3,-4(fp)
   2ec38:	10c00915 	stw	r3,36(r2)
}
   2ec3c:	0001883a 	nop
   2ec40:	e037883a 	mov	sp,fp
   2ec44:	df000017 	ldw	fp,0(sp)
   2ec48:	dec00104 	addi	sp,sp,4
   2ec4c:	f800283a 	ret

0002ec50 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   2ec50:	defffd04 	addi	sp,sp,-12
   2ec54:	df000215 	stw	fp,8(sp)
   2ec58:	df000204 	addi	fp,sp,8
   2ec5c:	e13ffe15 	stw	r4,-8(fp)
   2ec60:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   2ec64:	e0bffe17 	ldw	r2,-8(fp)
   2ec68:	10800317 	ldw	r2,12(r2)
   2ec6c:	10800404 	addi	r2,r2,16
   2ec70:	10800037 	ldwio	r2,0(r2)
   2ec74:	1080010c 	andi	r2,r2,4
   2ec78:	10000326 	beq	r2,zero,2ec88 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   2ec7c:	e0bfff17 	ldw	r2,-4(fp)
   2ec80:	00fffec4 	movi	r3,-5
   2ec84:	10c00015 	stw	r3,0(r2)
    }
}
   2ec88:	0001883a 	nop
   2ec8c:	e037883a 	mov	sp,fp
   2ec90:	df000017 	ldw	fp,0(sp)
   2ec94:	dec00104 	addi	sp,sp,4
   2ec98:	f800283a 	ret

0002ec9c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   2ec9c:	defffd04 	addi	sp,sp,-12
   2eca0:	df000215 	stw	fp,8(sp)
   2eca4:	df000204 	addi	fp,sp,8
   2eca8:	e13ffe15 	stw	r4,-8(fp)
   2ecac:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   2ecb0:	e0bffe17 	ldw	r2,-8(fp)
   2ecb4:	10800317 	ldw	r2,12(r2)
   2ecb8:	10800404 	addi	r2,r2,16
   2ecbc:	10800037 	ldwio	r2,0(r2)
   2ecc0:	1080020c 	andi	r2,r2,8
   2ecc4:	10000326 	beq	r2,zero,2ecd4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   2ecc8:	e0bfff17 	ldw	r2,-4(fp)
   2eccc:	00fffe84 	movi	r3,-6
   2ecd0:	10c00015 	stw	r3,0(r2)
    }
}
   2ecd4:	0001883a 	nop
   2ecd8:	e037883a 	mov	sp,fp
   2ecdc:	df000017 	ldw	fp,0(sp)
   2ece0:	dec00104 	addi	sp,sp,4
   2ece4:	f800283a 	ret

0002ece8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2ece8:	defff804 	addi	sp,sp,-32
   2ecec:	dfc00715 	stw	ra,28(sp)
   2ecf0:	df000615 	stw	fp,24(sp)
   2ecf4:	df000604 	addi	fp,sp,24
   2ecf8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2ecfc:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   2ed00:	e0bfff17 	ldw	r2,-4(fp)
   2ed04:	10800717 	ldw	r2,28(r2)
   2ed08:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   2ed0c:	e0bffb17 	ldw	r2,-20(fp)
   2ed10:	10800117 	ldw	r2,4(r2)
   2ed14:	10800044 	addi	r2,r2,1
   2ed18:	0149c404 	movi	r5,10000
   2ed1c:	1009883a 	mov	r4,r2
   2ed20:	002ad9c0 	call	2ad9c <__mulsi3>
   2ed24:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   2ed28:	e0bffd04 	addi	r2,fp,-12
   2ed2c:	100b883a 	mov	r5,r2
   2ed30:	e13fff17 	ldw	r4,-4(fp)
   2ed34:	002fb800 	call	2fb80 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   2ed38:	e0bffd17 	ldw	r2,-12(fp)
   2ed3c:	100b883a 	mov	r5,r2
   2ed40:	e13fff17 	ldw	r4,-4(fp)
   2ed44:	002fab40 	call	2fab4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2ed48:	e0bffc04 	addi	r2,fp,-16
   2ed4c:	100b883a 	mov	r5,r2
   2ed50:	e13fff17 	ldw	r4,-4(fp)
   2ed54:	002ec500 	call	2ec50 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   2ed58:	e0bffc17 	ldw	r2,-16(fp)
   2ed5c:	10002226 	beq	r2,zero,2ede8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   2ed60:	e0bffb17 	ldw	r2,-20(fp)
   2ed64:	10800217 	ldw	r2,8(r2)
   2ed68:	10001d26 	beq	r2,zero,2ede0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2ed6c:	00000d06 	br	2eda4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   2ed70:	e0bffa17 	ldw	r2,-24(fp)
   2ed74:	108002a8 	cmpgeui	r2,r2,10
   2ed78:	1000021e 	bne	r2,zero,2ed84 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   2ed7c:	0109c404 	movi	r4,10000
   2ed80:	00311940 	call	31194 <alt_busy_sleep>
              if (--timeout == 0)
   2ed84:	e0bffa17 	ldw	r2,-24(fp)
   2ed88:	10bfffc4 	addi	r2,r2,-1
   2ed8c:	e0bffa15 	stw	r2,-24(fp)
   2ed90:	e0bffa17 	ldw	r2,-24(fp)
   2ed94:	1000031e 	bne	r2,zero,2eda4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   2ed98:	00bfff84 	movi	r2,-2
   2ed9c:	e0bffc15 	stw	r2,-16(fp)
                 break;
   2eda0:	00000306 	br	2edb0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2eda4:	e13fff17 	ldw	r4,-4(fp)
   2eda8:	002e87c0 	call	2e87c <alt_avalon_i2c_is_busy>
   2edac:	103ff01e 	bne	r2,zero,2ed70 <__alt_data_end+0xfffeed70>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   2edb0:	e0bffb17 	ldw	r2,-20(fp)
   2edb4:	10800017 	ldw	r2,0(r2)
   2edb8:	e0fffe04 	addi	r3,fp,-8
   2edbc:	180f883a 	mov	r7,r3
   2edc0:	000d883a 	mov	r6,zero
   2edc4:	100b883a 	mov	r5,r2
   2edc8:	e13fff17 	ldw	r4,-4(fp)
   2edcc:	002e8c00 	call	2e8c0 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   2edd0:	e13fff17 	ldw	r4,-4(fp)
   2edd4:	002e5240 	call	2e524 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   2edd8:	e0bffb17 	ldw	r2,-20(fp)
   2eddc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   2ede0:	e0bffc17 	ldw	r2,-16(fp)
   2ede4:	00000a06 	br	2ee10 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   2ede8:	e0bffb17 	ldw	r2,-20(fp)
   2edec:	10800217 	ldw	r2,8(r2)
   2edf0:	10000626 	beq	r2,zero,2ee0c <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   2edf4:	e0bffd17 	ldw	r2,-12(fp)
   2edf8:	100b883a 	mov	r5,r2
   2edfc:	e13fff17 	ldw	r4,-4(fp)
   2ee00:	002fb1c0 	call	2fb1c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   2ee04:	00bffe44 	movi	r2,-7
   2ee08:	00000106 	br	2ee10 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   2ee0c:	0005883a 	mov	r2,zero
}
   2ee10:	e037883a 	mov	sp,fp
   2ee14:	dfc00117 	ldw	ra,4(sp)
   2ee18:	df000017 	ldw	fp,0(sp)
   2ee1c:	dec00204 	addi	sp,sp,8
   2ee20:	f800283a 	ret

0002ee24 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2ee24:	defff704 	addi	sp,sp,-36
   2ee28:	dfc00815 	stw	ra,32(sp)
   2ee2c:	df000715 	stw	fp,28(sp)
   2ee30:	df000704 	addi	fp,sp,28
   2ee34:	e13ffc15 	stw	r4,-16(fp)
   2ee38:	e17ffd15 	stw	r5,-12(fp)
   2ee3c:	e1bffe15 	stw	r6,-8(fp)
   2ee40:	3805883a 	mov	r2,r7
   2ee44:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2ee48:	0089c404 	movi	r2,10000
   2ee4c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   2ee50:	00002206 	br	2eedc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   2ee54:	e0bffb17 	ldw	r2,-20(fp)
   2ee58:	108002a8 	cmpgeui	r2,r2,10
   2ee5c:	1000021e 	bne	r2,zero,2ee68 <alt_avalon_i2c_master_tx+0x44>
   2ee60:	0109c404 	movi	r4,10000
   2ee64:	00311940 	call	31194 <alt_busy_sleep>
      if (use_interrupts)
   2ee68:	e0bfff03 	ldbu	r2,-4(fp)
   2ee6c:	10000926 	beq	r2,zero,2ee94 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   2ee70:	00800044 	movi	r2,1
   2ee74:	d8800015 	stw	r2,0(sp)
   2ee78:	000f883a 	mov	r7,zero
   2ee7c:	e1bffe17 	ldw	r6,-8(fp)
   2ee80:	e17ffd17 	ldw	r5,-12(fp)
   2ee84:	e13ffc17 	ldw	r4,-16(fp)
   2ee88:	002f3d00 	call	2f3d0 <alt_avalon_i2c_master_transmit_using_interrupts>
   2ee8c:	e0bffa15 	stw	r2,-24(fp)
   2ee90:	00000806 	br	2eeb4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   2ee94:	00800044 	movi	r2,1
   2ee98:	d8800015 	stw	r2,0(sp)
   2ee9c:	000f883a 	mov	r7,zero
   2eea0:	e1bffe17 	ldw	r6,-8(fp)
   2eea4:	e17ffd17 	ldw	r5,-12(fp)
   2eea8:	e13ffc17 	ldw	r4,-16(fp)
   2eeac:	002f2100 	call	2f210 <alt_avalon_i2c_master_transmit>
   2eeb0:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2eeb4:	e0bffa17 	ldw	r2,-24(fp)
   2eeb8:	10bffea0 	cmpeqi	r2,r2,-6
   2eebc:	1000061e 	bne	r2,zero,2eed8 <alt_avalon_i2c_master_tx+0xb4>
   2eec0:	e0bffa17 	ldw	r2,-24(fp)
   2eec4:	10bffee0 	cmpeqi	r2,r2,-5
   2eec8:	1000031e 	bne	r2,zero,2eed8 <alt_avalon_i2c_master_tx+0xb4>
   2eecc:	e0bffa17 	ldw	r2,-24(fp)
   2eed0:	10bffe58 	cmpnei	r2,r2,-7
   2eed4:	1000061e 	bne	r2,zero,2eef0 <alt_avalon_i2c_master_tx+0xcc>
   2eed8:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   2eedc:	e0bffb17 	ldw	r2,-20(fp)
   2eee0:	10ffffc4 	addi	r3,r2,-1
   2eee4:	e0fffb15 	stw	r3,-20(fp)
   2eee8:	103fda1e 	bne	r2,zero,2ee54 <__alt_data_end+0xfffeee54>
   2eeec:	00000106 	br	2eef4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   2eef0:	0001883a 	nop
    }

    return status;
   2eef4:	e0bffa17 	ldw	r2,-24(fp)
}        
   2eef8:	e037883a 	mov	sp,fp
   2eefc:	dfc00117 	ldw	ra,4(sp)
   2ef00:	df000017 	ldw	fp,0(sp)
   2ef04:	dec00204 	addi	sp,sp,8
   2ef08:	f800283a 	ret

0002ef0c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2ef0c:	defff704 	addi	sp,sp,-36
   2ef10:	dfc00815 	stw	ra,32(sp)
   2ef14:	df000715 	stw	fp,28(sp)
   2ef18:	df000704 	addi	fp,sp,28
   2ef1c:	e13ffc15 	stw	r4,-16(fp)
   2ef20:	e17ffd15 	stw	r5,-12(fp)
   2ef24:	e1bffe15 	stw	r6,-8(fp)
   2ef28:	3805883a 	mov	r2,r7
   2ef2c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2ef30:	0089c404 	movi	r2,10000
   2ef34:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   2ef38:	e0bfff03 	ldbu	r2,-4(fp)
   2ef3c:	10003426 	beq	r2,zero,2f010 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   2ef40:	00001706 	br	2efa0 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   2ef44:	e0bffb17 	ldw	r2,-20(fp)
   2ef48:	108002a8 	cmpgeui	r2,r2,10
   2ef4c:	1000021e 	bne	r2,zero,2ef58 <alt_avalon_i2c_master_rx+0x4c>
   2ef50:	0109c404 	movi	r4,10000
   2ef54:	00311940 	call	31194 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   2ef58:	00800044 	movi	r2,1
   2ef5c:	d8800015 	stw	r2,0(sp)
   2ef60:	000f883a 	mov	r7,zero
   2ef64:	e1bffe17 	ldw	r6,-8(fp)
   2ef68:	e17ffd17 	ldw	r5,-12(fp)
   2ef6c:	e13ffc17 	ldw	r4,-16(fp)
   2ef70:	002f7ec0 	call	2f7ec <alt_avalon_i2c_master_receive_using_interrupts>
   2ef74:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2ef78:	e0bffa17 	ldw	r2,-24(fp)
   2ef7c:	10bffea0 	cmpeqi	r2,r2,-6
   2ef80:	1000061e 	bne	r2,zero,2ef9c <alt_avalon_i2c_master_rx+0x90>
   2ef84:	e0bffa17 	ldw	r2,-24(fp)
   2ef88:	10bffee0 	cmpeqi	r2,r2,-5
   2ef8c:	1000031e 	bne	r2,zero,2ef9c <alt_avalon_i2c_master_rx+0x90>
   2ef90:	e0bffa17 	ldw	r2,-24(fp)
   2ef94:	10bffe58 	cmpnei	r2,r2,-7
   2ef98:	1000221e 	bne	r2,zero,2f024 <alt_avalon_i2c_master_rx+0x118>
   2ef9c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   2efa0:	e0bffb17 	ldw	r2,-20(fp)
   2efa4:	10ffffc4 	addi	r3,r2,-1
   2efa8:	e0fffb15 	stw	r3,-20(fp)
   2efac:	103fe51e 	bne	r2,zero,2ef44 <__alt_data_end+0xfffeef44>
   2efb0:	00001f06 	br	2f030 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   2efb4:	e0bffb17 	ldw	r2,-20(fp)
   2efb8:	108002a8 	cmpgeui	r2,r2,10
   2efbc:	1000021e 	bne	r2,zero,2efc8 <alt_avalon_i2c_master_rx+0xbc>
   2efc0:	0109c404 	movi	r4,10000
   2efc4:	00311940 	call	31194 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   2efc8:	00800044 	movi	r2,1
   2efcc:	d8800015 	stw	r2,0(sp)
   2efd0:	000f883a 	mov	r7,zero
   2efd4:	e1bffe17 	ldw	r6,-8(fp)
   2efd8:	e17ffd17 	ldw	r5,-12(fp)
   2efdc:	e13ffc17 	ldw	r4,-16(fp)
   2efe0:	002f5dc0 	call	2f5dc <alt_avalon_i2c_master_receive>
   2efe4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2efe8:	e0bffa17 	ldw	r2,-24(fp)
   2efec:	10bffea0 	cmpeqi	r2,r2,-6
   2eff0:	1000061e 	bne	r2,zero,2f00c <alt_avalon_i2c_master_rx+0x100>
   2eff4:	e0bffa17 	ldw	r2,-24(fp)
   2eff8:	10bffee0 	cmpeqi	r2,r2,-5
   2effc:	1000031e 	bne	r2,zero,2f00c <alt_avalon_i2c_master_rx+0x100>
   2f000:	e0bffa17 	ldw	r2,-24(fp)
   2f004:	10bffe58 	cmpnei	r2,r2,-7
   2f008:	1000081e 	bne	r2,zero,2f02c <alt_avalon_i2c_master_rx+0x120>
   2f00c:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   2f010:	e0bffb17 	ldw	r2,-20(fp)
   2f014:	10ffffc4 	addi	r3,r2,-1
   2f018:	e0fffb15 	stw	r3,-20(fp)
   2f01c:	103fe51e 	bne	r2,zero,2efb4 <__alt_data_end+0xfffeefb4>
   2f020:	00000306 	br	2f030 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   2f024:	0001883a 	nop
   2f028:	00000106 	br	2f030 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   2f02c:	0001883a 	nop
      }
    }
    
    return status;
   2f030:	e0bffa17 	ldw	r2,-24(fp)
}        
   2f034:	e037883a 	mov	sp,fp
   2f038:	dfc00117 	ldw	ra,4(sp)
   2f03c:	df000017 	ldw	fp,0(sp)
   2f040:	dec00204 	addi	sp,sp,8
   2f044:	f800283a 	ret

0002f048 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   2f048:	defff604 	addi	sp,sp,-40
   2f04c:	dfc00915 	stw	ra,36(sp)
   2f050:	df000815 	stw	fp,32(sp)
   2f054:	df000804 	addi	fp,sp,32
   2f058:	e13ffb15 	stw	r4,-20(fp)
   2f05c:	e17ffc15 	stw	r5,-16(fp)
   2f060:	e1bffd15 	stw	r6,-12(fp)
   2f064:	e1fffe15 	stw	r7,-8(fp)
   2f068:	e0800317 	ldw	r2,12(fp)
   2f06c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2f070:	0089c404 	movi	r2,10000
   2f074:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   2f078:	e0bfff03 	ldbu	r2,-4(fp)
   2f07c:	10005626 	beq	r2,zero,2f1d8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   2f080:	00002806 	br	2f124 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f084:	e0bffa17 	ldw	r2,-24(fp)
   2f088:	108002a8 	cmpgeui	r2,r2,10
   2f08c:	1000021e 	bne	r2,zero,2f098 <alt_avalon_i2c_master_tx_rx+0x50>
   2f090:	0109c404 	movi	r4,10000
   2f094:	00311940 	call	31194 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2f098:	d8000015 	stw	zero,0(sp)
   2f09c:	000f883a 	mov	r7,zero
   2f0a0:	e1bffd17 	ldw	r6,-12(fp)
   2f0a4:	e17ffc17 	ldw	r5,-16(fp)
   2f0a8:	e13ffb17 	ldw	r4,-20(fp)
   2f0ac:	002f3d00 	call	2f3d0 <alt_avalon_i2c_master_transmit_using_interrupts>
   2f0b0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f0b4:	e0bff917 	ldw	r2,-28(fp)
   2f0b8:	10bffea0 	cmpeqi	r2,r2,-6
   2f0bc:	1000191e 	bne	r2,zero,2f124 <alt_avalon_i2c_master_tx_rx+0xdc>
   2f0c0:	e0bff917 	ldw	r2,-28(fp)
   2f0c4:	10bffee0 	cmpeqi	r2,r2,-5
   2f0c8:	1000161e 	bne	r2,zero,2f124 <alt_avalon_i2c_master_tx_rx+0xdc>
   2f0cc:	e0bff917 	ldw	r2,-28(fp)
   2f0d0:	10bffe58 	cmpnei	r2,r2,-7
   2f0d4:	1000011e 	bne	r2,zero,2f0dc <alt_avalon_i2c_master_tx_rx+0x94>
   2f0d8:	00001206 	br	2f124 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2f0dc:	00800044 	movi	r2,1
   2f0e0:	d8800015 	stw	r2,0(sp)
   2f0e4:	01c00044 	movi	r7,1
   2f0e8:	e1800217 	ldw	r6,8(fp)
   2f0ec:	e17ffe17 	ldw	r5,-8(fp)
   2f0f0:	e13ffb17 	ldw	r4,-20(fp)
   2f0f4:	002f7ec0 	call	2f7ec <alt_avalon_i2c_master_receive_using_interrupts>
   2f0f8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f0fc:	e0bff917 	ldw	r2,-28(fp)
   2f100:	10bffea0 	cmpeqi	r2,r2,-6
   2f104:	1000061e 	bne	r2,zero,2f120 <alt_avalon_i2c_master_tx_rx+0xd8>
   2f108:	e0bff917 	ldw	r2,-28(fp)
   2f10c:	10bffee0 	cmpeqi	r2,r2,-5
   2f110:	1000031e 	bne	r2,zero,2f120 <alt_avalon_i2c_master_tx_rx+0xd8>
   2f114:	e0bff917 	ldw	r2,-28(fp)
   2f118:	10bffe58 	cmpnei	r2,r2,-7
   2f11c:	1000331e 	bne	r2,zero,2f1ec <alt_avalon_i2c_master_tx_rx+0x1a4>
   2f120:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   2f124:	e0bffa17 	ldw	r2,-24(fp)
   2f128:	10ffffc4 	addi	r3,r2,-1
   2f12c:	e0fffa15 	stw	r3,-24(fp)
   2f130:	103fd41e 	bne	r2,zero,2f084 <__alt_data_end+0xfffef084>
   2f134:	00003006 	br	2f1f8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f138:	e0bffa17 	ldw	r2,-24(fp)
   2f13c:	108002a8 	cmpgeui	r2,r2,10
   2f140:	1000021e 	bne	r2,zero,2f14c <alt_avalon_i2c_master_tx_rx+0x104>
   2f144:	0109c404 	movi	r4,10000
   2f148:	00311940 	call	31194 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2f14c:	d8000015 	stw	zero,0(sp)
   2f150:	000f883a 	mov	r7,zero
   2f154:	e1bffd17 	ldw	r6,-12(fp)
   2f158:	e17ffc17 	ldw	r5,-16(fp)
   2f15c:	e13ffb17 	ldw	r4,-20(fp)
   2f160:	002f2100 	call	2f210 <alt_avalon_i2c_master_transmit>
   2f164:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f168:	e0bff917 	ldw	r2,-28(fp)
   2f16c:	10bffea0 	cmpeqi	r2,r2,-6
   2f170:	1000191e 	bne	r2,zero,2f1d8 <alt_avalon_i2c_master_tx_rx+0x190>
   2f174:	e0bff917 	ldw	r2,-28(fp)
   2f178:	10bffee0 	cmpeqi	r2,r2,-5
   2f17c:	1000161e 	bne	r2,zero,2f1d8 <alt_avalon_i2c_master_tx_rx+0x190>
   2f180:	e0bff917 	ldw	r2,-28(fp)
   2f184:	10bffe58 	cmpnei	r2,r2,-7
   2f188:	1000011e 	bne	r2,zero,2f190 <alt_avalon_i2c_master_tx_rx+0x148>
   2f18c:	00001206 	br	2f1d8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2f190:	00800044 	movi	r2,1
   2f194:	d8800015 	stw	r2,0(sp)
   2f198:	01c00044 	movi	r7,1
   2f19c:	e1800217 	ldw	r6,8(fp)
   2f1a0:	e17ffe17 	ldw	r5,-8(fp)
   2f1a4:	e13ffb17 	ldw	r4,-20(fp)
   2f1a8:	002f5dc0 	call	2f5dc <alt_avalon_i2c_master_receive>
   2f1ac:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f1b0:	e0bff917 	ldw	r2,-28(fp)
   2f1b4:	10bffea0 	cmpeqi	r2,r2,-6
   2f1b8:	1000061e 	bne	r2,zero,2f1d4 <alt_avalon_i2c_master_tx_rx+0x18c>
   2f1bc:	e0bff917 	ldw	r2,-28(fp)
   2f1c0:	10bffee0 	cmpeqi	r2,r2,-5
   2f1c4:	1000031e 	bne	r2,zero,2f1d4 <alt_avalon_i2c_master_tx_rx+0x18c>
   2f1c8:	e0bff917 	ldw	r2,-28(fp)
   2f1cc:	10bffe58 	cmpnei	r2,r2,-7
   2f1d0:	1000081e 	bne	r2,zero,2f1f4 <alt_avalon_i2c_master_tx_rx+0x1ac>
   2f1d4:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   2f1d8:	e0bffa17 	ldw	r2,-24(fp)
   2f1dc:	10ffffc4 	addi	r3,r2,-1
   2f1e0:	e0fffa15 	stw	r3,-24(fp)
   2f1e4:	103fd41e 	bne	r2,zero,2f138 <__alt_data_end+0xfffef138>
   2f1e8:	00000306 	br	2f1f8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   2f1ec:	0001883a 	nop
   2f1f0:	00000106 	br	2f1f8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   2f1f4:	0001883a 	nop
      }
    }
    
    return status;
   2f1f8:	e0bff917 	ldw	r2,-28(fp)
}                                       
   2f1fc:	e037883a 	mov	sp,fp
   2f200:	dfc00117 	ldw	ra,4(sp)
   2f204:	df000017 	ldw	fp,0(sp)
   2f208:	dec00204 	addi	sp,sp,8
   2f20c:	f800283a 	ret

0002f210 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   2f210:	defff704 	addi	sp,sp,-36
   2f214:	dfc00815 	stw	ra,32(sp)
   2f218:	df000715 	stw	fp,28(sp)
   2f21c:	df000704 	addi	fp,sp,28
   2f220:	e13ffb15 	stw	r4,-20(fp)
   2f224:	e17ffc15 	stw	r5,-16(fp)
   2f228:	e1bffd15 	stw	r6,-12(fp)
   2f22c:	3807883a 	mov	r3,r7
   2f230:	e0800217 	ldw	r2,8(fp)
   2f234:	e0fffe05 	stb	r3,-8(fp)
   2f238:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f23c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   2f240:	0149c404 	movi	r5,10000
   2f244:	e13ffd17 	ldw	r4,-12(fp)
   2f248:	002ad9c0 	call	2ad9c <__mulsi3>
   2f24c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   2f250:	e0bffd17 	ldw	r2,-12(fp)
   2f254:	1000021e 	bne	r2,zero,2f260 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f258:	0005883a 	mov	r2,zero
   2f25c:	00005706 	br	2f3bc <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f260:	e0bffe03 	ldbu	r2,-8(fp)
   2f264:	10000a1e 	bne	r2,zero,2f290 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f268:	e13ffb17 	ldw	r4,-20(fp)
   2f26c:	002e48c0 	call	2e48c <alt_avalon_i2c_enable>
   2f270:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f274:	e0bffa17 	ldw	r2,-24(fp)
   2f278:	10000226 	beq	r2,zero,2f284 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   2f27c:	e0bffa17 	ldw	r2,-24(fp)
   2f280:	00004e06 	br	2f3bc <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f284:	01400704 	movi	r5,28
   2f288:	e13ffb17 	ldw	r4,-20(fp)
   2f28c:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2f290:	e0bffe03 	ldbu	r2,-8(fp)
   2f294:	100d883a 	mov	r6,r2
   2f298:	000b883a 	mov	r5,zero
   2f29c:	e13ffb17 	ldw	r4,-20(fp)
   2f2a0:	002eaf40 	call	2eaf4 <alt_avalon_i2c_send_address>
   2f2a4:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   2f2a8:	e0bffa17 	ldw	r2,-24(fp)
   2f2ac:	1000271e 	bne	r2,zero,2f34c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f2b0:	00000f06 	br	2f2f0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f2b4:	e0bffc17 	ldw	r2,-16(fp)
   2f2b8:	10800003 	ldbu	r2,0(r2)
   2f2bc:	10803fcc 	andi	r2,r2,255
   2f2c0:	000f883a 	mov	r7,zero
   2f2c4:	000d883a 	mov	r6,zero
   2f2c8:	100b883a 	mov	r5,r2
   2f2cc:	e13ffb17 	ldw	r4,-20(fp)
   2f2d0:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f2d4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   2f2d8:	e0bffc17 	ldw	r2,-16(fp)
   2f2dc:	10800044 	addi	r2,r2,1
   2f2e0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f2e4:	e0bffd17 	ldw	r2,-12(fp)
   2f2e8:	10bfffc4 	addi	r2,r2,-1
   2f2ec:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f2f0:	e0bffd17 	ldw	r2,-12(fp)
   2f2f4:	108000b0 	cmpltui	r2,r2,2
   2f2f8:	1000021e 	bne	r2,zero,2f304 <alt_avalon_i2c_master_transmit+0xf4>
   2f2fc:	e0bffa17 	ldw	r2,-24(fp)
   2f300:	103fec26 	beq	r2,zero,2f2b4 <__alt_data_end+0xfffef2b4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f304:	e0bffa17 	ldw	r2,-24(fp)
   2f308:	1000101e 	bne	r2,zero,2f34c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f30c:	e0bffc17 	ldw	r2,-16(fp)
   2f310:	10800003 	ldbu	r2,0(r2)
   2f314:	10803fcc 	andi	r2,r2,255
   2f318:	e0ffff03 	ldbu	r3,-4(fp)
   2f31c:	180f883a 	mov	r7,r3
   2f320:	000d883a 	mov	r6,zero
   2f324:	100b883a 	mov	r5,r2
   2f328:	e13ffb17 	ldw	r4,-20(fp)
   2f32c:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f330:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   2f334:	e0bffc17 	ldw	r2,-16(fp)
   2f338:	10800044 	addi	r2,r2,1
   2f33c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f340:	e0bffd17 	ldw	r2,-12(fp)
   2f344:	10bfffc4 	addi	r2,r2,-1
   2f348:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2f34c:	e0bfff03 	ldbu	r2,-4(fp)
   2f350:	1000101e 	bne	r2,zero,2f394 <alt_avalon_i2c_master_transmit+0x184>
   2f354:	e0bffa17 	ldw	r2,-24(fp)
   2f358:	10001726 	beq	r2,zero,2f3b8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f35c:	00000d06 	br	2f394 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f360:	e0bff917 	ldw	r2,-28(fp)
   2f364:	108002a8 	cmpgeui	r2,r2,10
   2f368:	1000021e 	bne	r2,zero,2f374 <alt_avalon_i2c_master_transmit+0x164>
   2f36c:	0109c404 	movi	r4,10000
   2f370:	00311940 	call	31194 <alt_busy_sleep>
            if (--timeout == 0)
   2f374:	e0bff917 	ldw	r2,-28(fp)
   2f378:	10bfffc4 	addi	r2,r2,-1
   2f37c:	e0bff915 	stw	r2,-28(fp)
   2f380:	e0bff917 	ldw	r2,-28(fp)
   2f384:	1000031e 	bne	r2,zero,2f394 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f388:	00bfff84 	movi	r2,-2
   2f38c:	e0bffa15 	stw	r2,-24(fp)
               break;
   2f390:	00000306 	br	2f3a0 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f394:	e13ffb17 	ldw	r4,-20(fp)
   2f398:	002e87c0 	call	2e87c <alt_avalon_i2c_is_busy>
   2f39c:	103ff01e 	bne	r2,zero,2f360 <__alt_data_end+0xfffef360>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   2f3a0:	e0bffa04 	addi	r2,fp,-24
   2f3a4:	100b883a 	mov	r5,r2
   2f3a8:	e13ffb17 	ldw	r4,-20(fp)
   2f3ac:	002ec500 	call	2ec50 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f3b0:	e13ffb17 	ldw	r4,-20(fp)
   2f3b4:	002e5240 	call	2e524 <alt_avalon_i2c_disable>
    }


    return status;
   2f3b8:	e0bffa17 	ldw	r2,-24(fp)
}
   2f3bc:	e037883a 	mov	sp,fp
   2f3c0:	dfc00117 	ldw	ra,4(sp)
   2f3c4:	df000017 	ldw	fp,0(sp)
   2f3c8:	dec00204 	addi	sp,sp,8
   2f3cc:	f800283a 	ret

0002f3d0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   2f3d0:	defff604 	addi	sp,sp,-40
   2f3d4:	dfc00915 	stw	ra,36(sp)
   2f3d8:	df000815 	stw	fp,32(sp)
   2f3dc:	df000804 	addi	fp,sp,32
   2f3e0:	e13ffb15 	stw	r4,-20(fp)
   2f3e4:	e17ffc15 	stw	r5,-16(fp)
   2f3e8:	e1bffd15 	stw	r6,-12(fp)
   2f3ec:	3807883a 	mov	r3,r7
   2f3f0:	e0800217 	ldw	r2,8(fp)
   2f3f4:	e0fffe05 	stb	r3,-8(fp)
   2f3f8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f3fc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   2f400:	0149c404 	movi	r5,10000
   2f404:	e13ffd17 	ldw	r4,-12(fp)
   2f408:	002ad9c0 	call	2ad9c <__mulsi3>
   2f40c:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   2f410:	e0bffb17 	ldw	r2,-20(fp)
   2f414:	10800717 	ldw	r2,28(r2)
   2f418:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   2f41c:	e0bffd17 	ldw	r2,-12(fp)
   2f420:	1000021e 	bne	r2,zero,2f42c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f424:	0005883a 	mov	r2,zero
   2f428:	00006706 	br	2f5c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2f42c:	e0bffb17 	ldw	r2,-20(fp)
   2f430:	10c00617 	ldw	r3,24(r2)
   2f434:	008000f4 	movhi	r2,3
   2f438:	10b84404 	addi	r2,r2,-7920
   2f43c:	18800226 	beq	r3,r2,2f448 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2f440:	00bfff44 	movi	r2,-3
   2f444:	00006006 	br	2f5c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f448:	e0bffe03 	ldbu	r2,-8(fp)
   2f44c:	10000a1e 	bne	r2,zero,2f478 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f450:	e13ffb17 	ldw	r4,-20(fp)
   2f454:	002e48c0 	call	2e48c <alt_avalon_i2c_enable>
   2f458:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f45c:	e0bff817 	ldw	r2,-32(fp)
   2f460:	10000226 	beq	r2,zero,2f46c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   2f464:	e0bff817 	ldw	r2,-32(fp)
   2f468:	00005706 	br	2f5c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f46c:	01400704 	movi	r5,28
   2f470:	e13ffb17 	ldw	r4,-20(fp)
   2f474:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2f478:	e0bffe03 	ldbu	r2,-8(fp)
   2f47c:	100d883a 	mov	r6,r2
   2f480:	000b883a 	mov	r5,zero
   2f484:	e13ffb17 	ldw	r4,-20(fp)
   2f488:	002eaf40 	call	2eaf4 <alt_avalon_i2c_send_address>
   2f48c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   2f490:	e0bff817 	ldw	r2,-32(fp)
   2f494:	1000271e 	bne	r2,zero,2f534 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f498:	00000f06 	br	2f4d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f49c:	e0bffc17 	ldw	r2,-16(fp)
   2f4a0:	10800003 	ldbu	r2,0(r2)
   2f4a4:	10803fcc 	andi	r2,r2,255
   2f4a8:	000f883a 	mov	r7,zero
   2f4ac:	000d883a 	mov	r6,zero
   2f4b0:	100b883a 	mov	r5,r2
   2f4b4:	e13ffb17 	ldw	r4,-20(fp)
   2f4b8:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f4bc:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   2f4c0:	e0bffc17 	ldw	r2,-16(fp)
   2f4c4:	10800044 	addi	r2,r2,1
   2f4c8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f4cc:	e0bffd17 	ldw	r2,-12(fp)
   2f4d0:	10bfffc4 	addi	r2,r2,-1
   2f4d4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f4d8:	e0bffd17 	ldw	r2,-12(fp)
   2f4dc:	108000b0 	cmpltui	r2,r2,2
   2f4e0:	1000021e 	bne	r2,zero,2f4ec <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   2f4e4:	e0bff817 	ldw	r2,-32(fp)
   2f4e8:	103fec26 	beq	r2,zero,2f49c <__alt_data_end+0xfffef49c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f4ec:	e0bff817 	ldw	r2,-32(fp)
   2f4f0:	1000101e 	bne	r2,zero,2f534 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f4f4:	e0bffc17 	ldw	r2,-16(fp)
   2f4f8:	10800003 	ldbu	r2,0(r2)
   2f4fc:	10803fcc 	andi	r2,r2,255
   2f500:	e0ffff03 	ldbu	r3,-4(fp)
   2f504:	180f883a 	mov	r7,r3
   2f508:	000d883a 	mov	r6,zero
   2f50c:	100b883a 	mov	r5,r2
   2f510:	e13ffb17 	ldw	r4,-20(fp)
   2f514:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f518:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   2f51c:	e0bffc17 	ldw	r2,-16(fp)
   2f520:	10800044 	addi	r2,r2,1
   2f524:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f528:	e0bffd17 	ldw	r2,-12(fp)
   2f52c:	10bfffc4 	addi	r2,r2,-1
   2f530:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2f534:	e0bff817 	ldw	r2,-32(fp)
   2f538:	10001426 	beq	r2,zero,2f58c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f53c:	00000d06 	br	2f574 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   2f540:	e0bff917 	ldw	r2,-28(fp)
   2f544:	108002a8 	cmpgeui	r2,r2,10
   2f548:	1000021e 	bne	r2,zero,2f554 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   2f54c:	0109c404 	movi	r4,10000
   2f550:	00311940 	call	31194 <alt_busy_sleep>
            if (--timeout == 0)
   2f554:	e0bff917 	ldw	r2,-28(fp)
   2f558:	10bfffc4 	addi	r2,r2,-1
   2f55c:	e0bff915 	stw	r2,-28(fp)
   2f560:	e0bff917 	ldw	r2,-28(fp)
   2f564:	1000031e 	bne	r2,zero,2f574 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f568:	00bfff84 	movi	r2,-2
   2f56c:	e0bff815 	stw	r2,-32(fp)
               break;
   2f570:	00000306 	br	2f580 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f574:	e13ffb17 	ldw	r4,-20(fp)
   2f578:	002e87c0 	call	2e87c <alt_avalon_i2c_is_busy>
   2f57c:	103ff01e 	bne	r2,zero,2f540 <__alt_data_end+0xfffef540>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f580:	e13ffb17 	ldw	r4,-20(fp)
   2f584:	002e5240 	call	2e524 <alt_avalon_i2c_disable>
   2f588:	00000e06 	br	2f5c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   2f58c:	e0bfff03 	ldbu	r2,-4(fp)
   2f590:	10000c26 	beq	r2,zero,2f5c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f594:	01400704 	movi	r5,28
   2f598:	e13ffb17 	ldw	r4,-20(fp)
   2f59c:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   2f5a0:	000b883a 	mov	r5,zero
   2f5a4:	e13ffb17 	ldw	r4,-20(fp)
   2f5a8:	002fcc00 	call	2fcc0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   2f5ac:	e0bffa17 	ldw	r2,-24(fp)
   2f5b0:	00c00044 	movi	r3,1
   2f5b4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   2f5b8:	01400044 	movi	r5,1
   2f5bc:	e13ffb17 	ldw	r4,-20(fp)
   2f5c0:	002fb1c0 	call	2fb1c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   2f5c4:	e0bff817 	ldw	r2,-32(fp)
}
   2f5c8:	e037883a 	mov	sp,fp
   2f5cc:	dfc00117 	ldw	ra,4(sp)
   2f5d0:	df000017 	ldw	fp,0(sp)
   2f5d4:	dec00204 	addi	sp,sp,8
   2f5d8:	f800283a 	ret

0002f5dc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   2f5dc:	defff404 	addi	sp,sp,-48
   2f5e0:	dfc00b15 	stw	ra,44(sp)
   2f5e4:	df000a15 	stw	fp,40(sp)
   2f5e8:	df000a04 	addi	fp,sp,40
   2f5ec:	e13ffb15 	stw	r4,-20(fp)
   2f5f0:	e17ffc15 	stw	r5,-16(fp)
   2f5f4:	e1bffd15 	stw	r6,-12(fp)
   2f5f8:	3807883a 	mov	r3,r7
   2f5fc:	e0800217 	ldw	r2,8(fp)
   2f600:	e0fffe05 	stb	r3,-8(fp)
   2f604:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f608:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   2f60c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   2f610:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   2f614:	e0bffd17 	ldw	r2,-12(fp)
   2f618:	1000021e 	bne	r2,zero,2f624 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f61c:	0005883a 	mov	r2,zero
   2f620:	00006d06 	br	2f7d8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f624:	e0bffe03 	ldbu	r2,-8(fp)
   2f628:	10000a1e 	bne	r2,zero,2f654 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f62c:	e13ffb17 	ldw	r4,-20(fp)
   2f630:	002e48c0 	call	2e48c <alt_avalon_i2c_enable>
   2f634:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f638:	e0bff917 	ldw	r2,-28(fp)
   2f63c:	10000226 	beq	r2,zero,2f648 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   2f640:	e0bff917 	ldw	r2,-28(fp)
   2f644:	00006406 	br	2f7d8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f648:	01400704 	movi	r5,28
   2f64c:	e13ffb17 	ldw	r4,-20(fp)
   2f650:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2f654:	e0bffe03 	ldbu	r2,-8(fp)
   2f658:	100d883a 	mov	r6,r2
   2f65c:	01400044 	movi	r5,1
   2f660:	e13ffb17 	ldw	r4,-20(fp)
   2f664:	002eaf40 	call	2eaf4 <alt_avalon_i2c_send_address>
   2f668:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2f66c:	e0bff917 	ldw	r2,-28(fp)
   2f670:	1000341e 	bne	r2,zero,2f744 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f674:	00001906 	br	2f6dc <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f678:	000f883a 	mov	r7,zero
   2f67c:	000d883a 	mov	r6,zero
   2f680:	000b883a 	mov	r5,zero
   2f684:	e13ffb17 	ldw	r4,-20(fp)
   2f688:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f68c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   2f690:	e0bff817 	ldw	r2,-32(fp)
   2f694:	10800044 	addi	r2,r2,1
   2f698:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   2f69c:	e0bff917 	ldw	r2,-28(fp)
   2f6a0:	10000e1e 	bne	r2,zero,2f6dc <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2f6a4:	e0bffa04 	addi	r2,fp,-24
   2f6a8:	100f883a 	mov	r7,r2
   2f6ac:	000d883a 	mov	r6,zero
   2f6b0:	e17ffc17 	ldw	r5,-16(fp)
   2f6b4:	e13ffb17 	ldw	r4,-20(fp)
   2f6b8:	002e8c00 	call	2e8c0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   2f6bc:	e0bffa17 	ldw	r2,-24(fp)
   2f6c0:	e0fffc17 	ldw	r3,-16(fp)
   2f6c4:	1885883a 	add	r2,r3,r2
   2f6c8:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   2f6cc:	e0bffa17 	ldw	r2,-24(fp)
   2f6d0:	e0fff717 	ldw	r3,-36(fp)
   2f6d4:	1885883a 	add	r2,r3,r2
   2f6d8:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f6dc:	e0bffd17 	ldw	r2,-12(fp)
   2f6e0:	10bfffc4 	addi	r2,r2,-1
   2f6e4:	e0fff817 	ldw	r3,-32(fp)
   2f6e8:	1880022e 	bgeu	r3,r2,2f6f4 <alt_avalon_i2c_master_receive+0x118>
   2f6ec:	e0bff917 	ldw	r2,-28(fp)
   2f6f0:	103fe126 	beq	r2,zero,2f678 <__alt_data_end+0xfffef678>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f6f4:	e0bff917 	ldw	r2,-28(fp)
   2f6f8:	1000121e 	bne	r2,zero,2f744 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f6fc:	e0bfff03 	ldbu	r2,-4(fp)
   2f700:	100f883a 	mov	r7,r2
   2f704:	000d883a 	mov	r6,zero
   2f708:	000b883a 	mov	r5,zero
   2f70c:	e13ffb17 	ldw	r4,-20(fp)
   2f710:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f714:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2f718:	00000a06 	br	2f744 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   2f71c:	e17ffc17 	ldw	r5,-16(fp)
   2f720:	e13ffb17 	ldw	r4,-20(fp)
   2f724:	002e9680 	call	2e968 <alt_avalon_i2c_rx_read>
   2f728:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   2f72c:	e0bffc17 	ldw	r2,-16(fp)
   2f730:	10800044 	addi	r2,r2,1
   2f734:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   2f738:	e0bff717 	ldw	r2,-36(fp)
   2f73c:	10800044 	addi	r2,r2,1
   2f740:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2f744:	e0fff717 	ldw	r3,-36(fp)
   2f748:	e0bffd17 	ldw	r2,-12(fp)
   2f74c:	1880022e 	bgeu	r3,r2,2f758 <alt_avalon_i2c_master_receive+0x17c>
   2f750:	e0bff917 	ldw	r2,-28(fp)
   2f754:	103ff126 	beq	r2,zero,2f71c <__alt_data_end+0xfffef71c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2f758:	e0bfff03 	ldbu	r2,-4(fp)
   2f75c:	1000021e 	bne	r2,zero,2f768 <alt_avalon_i2c_master_receive+0x18c>
   2f760:	e0bff917 	ldw	r2,-28(fp)
   2f764:	10001b26 	beq	r2,zero,2f7d4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   2f768:	0149c404 	movi	r5,10000
   2f76c:	e13ffd17 	ldw	r4,-12(fp)
   2f770:	002ad9c0 	call	2ad9c <__mulsi3>
   2f774:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f778:	00000d06 	br	2f7b0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f77c:	e0bff617 	ldw	r2,-40(fp)
   2f780:	108002a8 	cmpgeui	r2,r2,10
   2f784:	1000021e 	bne	r2,zero,2f790 <alt_avalon_i2c_master_receive+0x1b4>
   2f788:	0109c404 	movi	r4,10000
   2f78c:	00311940 	call	31194 <alt_busy_sleep>
            if (--timeout == 0)
   2f790:	e0bff617 	ldw	r2,-40(fp)
   2f794:	10bfffc4 	addi	r2,r2,-1
   2f798:	e0bff615 	stw	r2,-40(fp)
   2f79c:	e0bff617 	ldw	r2,-40(fp)
   2f7a0:	1000031e 	bne	r2,zero,2f7b0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f7a4:	00bfff84 	movi	r2,-2
   2f7a8:	e0bff915 	stw	r2,-28(fp)
               break;
   2f7ac:	00000306 	br	2f7bc <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f7b0:	e13ffb17 	ldw	r4,-20(fp)
   2f7b4:	002e87c0 	call	2e87c <alt_avalon_i2c_is_busy>
   2f7b8:	103ff01e 	bne	r2,zero,2f77c <__alt_data_end+0xfffef77c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   2f7bc:	e0bff904 	addi	r2,fp,-28
   2f7c0:	100b883a 	mov	r5,r2
   2f7c4:	e13ffb17 	ldw	r4,-20(fp)
   2f7c8:	002ec500 	call	2ec50 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f7cc:	e13ffb17 	ldw	r4,-20(fp)
   2f7d0:	002e5240 	call	2e524 <alt_avalon_i2c_disable>
    }

    return status;
   2f7d4:	e0bff917 	ldw	r2,-28(fp)
}
   2f7d8:	e037883a 	mov	sp,fp
   2f7dc:	dfc00117 	ldw	ra,4(sp)
   2f7e0:	df000017 	ldw	fp,0(sp)
   2f7e4:	dec00204 	addi	sp,sp,8
   2f7e8:	f800283a 	ret

0002f7ec <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   2f7ec:	defff504 	addi	sp,sp,-44
   2f7f0:	dfc00a15 	stw	ra,40(sp)
   2f7f4:	df000915 	stw	fp,36(sp)
   2f7f8:	df000904 	addi	fp,sp,36
   2f7fc:	e13ffb15 	stw	r4,-20(fp)
   2f800:	e17ffc15 	stw	r5,-16(fp)
   2f804:	e1bffd15 	stw	r6,-12(fp)
   2f808:	3807883a 	mov	r3,r7
   2f80c:	e0800217 	ldw	r2,8(fp)
   2f810:	e0fffe05 	stb	r3,-8(fp)
   2f814:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f818:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   2f81c:	e0bffb17 	ldw	r2,-20(fp)
   2f820:	10800717 	ldw	r2,28(r2)
   2f824:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   2f828:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   2f82c:	e0bffd17 	ldw	r2,-12(fp)
   2f830:	1000021e 	bne	r2,zero,2f83c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f834:	0005883a 	mov	r2,zero
   2f838:	00006306 	br	2f9c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2f83c:	e0bffb17 	ldw	r2,-20(fp)
   2f840:	10c00617 	ldw	r3,24(r2)
   2f844:	008000f4 	movhi	r2,3
   2f848:	10b84404 	addi	r2,r2,-7920
   2f84c:	18800226 	beq	r3,r2,2f858 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2f850:	00bfff44 	movi	r2,-3
   2f854:	00005c06 	br	2f9c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f858:	e0bffe03 	ldbu	r2,-8(fp)
   2f85c:	10000a1e 	bne	r2,zero,2f888 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f860:	e13ffb17 	ldw	r4,-20(fp)
   2f864:	002e48c0 	call	2e48c <alt_avalon_i2c_enable>
   2f868:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f86c:	e0bff717 	ldw	r2,-36(fp)
   2f870:	10000226 	beq	r2,zero,2f87c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   2f874:	e0bff717 	ldw	r2,-36(fp)
   2f878:	00005306 	br	2f9c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f87c:	01400704 	movi	r5,28
   2f880:	e13ffb17 	ldw	r4,-20(fp)
   2f884:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2f888:	e0bffe03 	ldbu	r2,-8(fp)
   2f88c:	100d883a 	mov	r6,r2
   2f890:	01400044 	movi	r5,1
   2f894:	e13ffb17 	ldw	r4,-20(fp)
   2f898:	002eaf40 	call	2eaf4 <alt_avalon_i2c_send_address>
   2f89c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2f8a0:	e0bff717 	ldw	r2,-36(fp)
   2f8a4:	1000191e 	bne	r2,zero,2f90c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f8a8:	00000906 	br	2f8d0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f8ac:	000f883a 	mov	r7,zero
   2f8b0:	000d883a 	mov	r6,zero
   2f8b4:	000b883a 	mov	r5,zero
   2f8b8:	e13ffb17 	ldw	r4,-20(fp)
   2f8bc:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f8c0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   2f8c4:	e0bff917 	ldw	r2,-28(fp)
   2f8c8:	10800044 	addi	r2,r2,1
   2f8cc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f8d0:	e0bffd17 	ldw	r2,-12(fp)
   2f8d4:	10bfffc4 	addi	r2,r2,-1
   2f8d8:	e0fff917 	ldw	r3,-28(fp)
   2f8dc:	1880022e 	bgeu	r3,r2,2f8e8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   2f8e0:	e0bff717 	ldw	r2,-36(fp)
   2f8e4:	103ff126 	beq	r2,zero,2f8ac <__alt_data_end+0xfffef8ac>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f8e8:	e0bff717 	ldw	r2,-36(fp)
   2f8ec:	1000071e 	bne	r2,zero,2f90c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f8f0:	e0bfff03 	ldbu	r2,-4(fp)
   2f8f4:	100f883a 	mov	r7,r2
   2f8f8:	000d883a 	mov	r6,zero
   2f8fc:	000b883a 	mov	r5,zero
   2f900:	e13ffb17 	ldw	r4,-20(fp)
   2f904:	002ea100 	call	2ea10 <alt_avalon_i2c_cmd_write>
   2f908:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2f90c:	e0bff717 	ldw	r2,-36(fp)
   2f910:	10001826 	beq	r2,zero,2f974 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   2f914:	0149c404 	movi	r5,10000
   2f918:	e13ffd17 	ldw	r4,-12(fp)
   2f91c:	002ad9c0 	call	2ad9c <__mulsi3>
   2f920:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f924:	00000d06 	br	2f95c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f928:	e0bff817 	ldw	r2,-32(fp)
   2f92c:	108002a8 	cmpgeui	r2,r2,10
   2f930:	1000021e 	bne	r2,zero,2f93c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   2f934:	0109c404 	movi	r4,10000
   2f938:	00311940 	call	31194 <alt_busy_sleep>
            if (--timeout == 0)
   2f93c:	e0bff817 	ldw	r2,-32(fp)
   2f940:	10bfffc4 	addi	r2,r2,-1
   2f944:	e0bff815 	stw	r2,-32(fp)
   2f948:	e0bff817 	ldw	r2,-32(fp)
   2f94c:	1000031e 	bne	r2,zero,2f95c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f950:	00bfff84 	movi	r2,-2
   2f954:	e0bff715 	stw	r2,-36(fp)
               break;
   2f958:	00000306 	br	2f968 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f95c:	e13ffb17 	ldw	r4,-20(fp)
   2f960:	002e87c0 	call	2e87c <alt_avalon_i2c_is_busy>
   2f964:	103ff01e 	bne	r2,zero,2f928 <__alt_data_end+0xfffef928>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f968:	e13ffb17 	ldw	r4,-20(fp)
   2f96c:	002e5240 	call	2e524 <alt_avalon_i2c_disable>
   2f970:	00001406 	br	2f9c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   2f974:	e0bfff03 	ldbu	r2,-4(fp)
   2f978:	10001226 	beq	r2,zero,2f9c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f97c:	01400704 	movi	r5,28
   2f980:	e13ffb17 	ldw	r4,-20(fp)
   2f984:	002fa780 	call	2fa78 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   2f988:	000b883a 	mov	r5,zero
   2f98c:	e13ffb17 	ldw	r4,-20(fp)
   2f990:	002fc100 	call	2fc10 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   2f994:	e0bffa17 	ldw	r2,-24(fp)
   2f998:	00c00084 	movi	r3,2
   2f99c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   2f9a0:	e0bffa17 	ldw	r2,-24(fp)
   2f9a4:	e0fffc17 	ldw	r3,-16(fp)
   2f9a8:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   2f9ac:	e0bffa17 	ldw	r2,-24(fp)
   2f9b0:	e0fffd17 	ldw	r3,-12(fp)
   2f9b4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2f9b8:	01400084 	movi	r5,2
   2f9bc:	e13ffb17 	ldw	r4,-20(fp)
   2f9c0:	002fb1c0 	call	2fb1c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   2f9c4:	e0bff717 	ldw	r2,-36(fp)
}
   2f9c8:	e037883a 	mov	sp,fp
   2f9cc:	dfc00117 	ldw	ra,4(sp)
   2f9d0:	df000017 	ldw	fp,0(sp)
   2f9d4:	dec00204 	addi	sp,sp,8
   2f9d8:	f800283a 	ret

0002f9dc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   2f9dc:	defffd04 	addi	sp,sp,-12
   2f9e0:	df000215 	stw	fp,8(sp)
   2f9e4:	df000204 	addi	fp,sp,8
   2f9e8:	e13ffe15 	stw	r4,-8(fp)
   2f9ec:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   2f9f0:	e0bffe17 	ldw	r2,-8(fp)
   2f9f4:	10800317 	ldw	r2,12(r2)
   2f9f8:	10800404 	addi	r2,r2,16
   2f9fc:	10c00037 	ldwio	r3,0(r2)
   2fa00:	e0bffe17 	ldw	r2,-8(fp)
   2fa04:	10800317 	ldw	r2,12(r2)
   2fa08:	10800304 	addi	r2,r2,12
   2fa0c:	10800037 	ldwio	r2,0(r2)
   2fa10:	1884703a 	and	r2,r3,r2
   2fa14:	1007883a 	mov	r3,r2
   2fa18:	e0bfff17 	ldw	r2,-4(fp)
   2fa1c:	10c00015 	stw	r3,0(r2)
}
   2fa20:	0001883a 	nop
   2fa24:	e037883a 	mov	sp,fp
   2fa28:	df000017 	ldw	fp,0(sp)
   2fa2c:	dec00104 	addi	sp,sp,4
   2fa30:	f800283a 	ret

0002fa34 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   2fa34:	defffd04 	addi	sp,sp,-12
   2fa38:	df000215 	stw	fp,8(sp)
   2fa3c:	df000204 	addi	fp,sp,8
   2fa40:	e13ffe15 	stw	r4,-8(fp)
   2fa44:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   2fa48:	e0bffe17 	ldw	r2,-8(fp)
   2fa4c:	10800317 	ldw	r2,12(r2)
   2fa50:	10800404 	addi	r2,r2,16
   2fa54:	10800037 	ldwio	r2,0(r2)
   2fa58:	1007883a 	mov	r3,r2
   2fa5c:	e0bfff17 	ldw	r2,-4(fp)
   2fa60:	10c00015 	stw	r3,0(r2)
}
   2fa64:	0001883a 	nop
   2fa68:	e037883a 	mov	sp,fp
   2fa6c:	df000017 	ldw	fp,0(sp)
   2fa70:	dec00104 	addi	sp,sp,4
   2fa74:	f800283a 	ret

0002fa78 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fa78:	defffd04 	addi	sp,sp,-12
   2fa7c:	df000215 	stw	fp,8(sp)
   2fa80:	df000204 	addi	fp,sp,8
   2fa84:	e13ffe15 	stw	r4,-8(fp)
   2fa88:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2fa8c:	e0bffe17 	ldw	r2,-8(fp)
   2fa90:	10800317 	ldw	r2,12(r2)
   2fa94:	10800404 	addi	r2,r2,16
   2fa98:	e0ffff17 	ldw	r3,-4(fp)
   2fa9c:	10c00035 	stwio	r3,0(r2)
}
   2faa0:	0001883a 	nop
   2faa4:	e037883a 	mov	sp,fp
   2faa8:	df000017 	ldw	fp,0(sp)
   2faac:	dec00104 	addi	sp,sp,4
   2fab0:	f800283a 	ret

0002fab4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fab4:	defffb04 	addi	sp,sp,-20
   2fab8:	dfc00415 	stw	ra,16(sp)
   2fabc:	df000315 	stw	fp,12(sp)
   2fac0:	df000304 	addi	fp,sp,12
   2fac4:	e13ffe15 	stw	r4,-8(fp)
   2fac8:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2facc:	e17ffd04 	addi	r5,fp,-12
   2fad0:	e13ffe17 	ldw	r4,-8(fp)
   2fad4:	002fb800 	call	2fb80 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   2fad8:	e0bfff17 	ldw	r2,-4(fp)
   2fadc:	0086303a 	nor	r3,zero,r2
   2fae0:	e0bffd17 	ldw	r2,-12(fp)
   2fae4:	1884703a 	and	r2,r3,r2
   2fae8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2faec:	e0bffe17 	ldw	r2,-8(fp)
   2faf0:	10800317 	ldw	r2,12(r2)
   2faf4:	10800304 	addi	r2,r2,12
   2faf8:	e0fffd17 	ldw	r3,-12(fp)
   2fafc:	18c007cc 	andi	r3,r3,31
   2fb00:	10c00035 	stwio	r3,0(r2)
}
   2fb04:	0001883a 	nop
   2fb08:	e037883a 	mov	sp,fp
   2fb0c:	dfc00117 	ldw	ra,4(sp)
   2fb10:	df000017 	ldw	fp,0(sp)
   2fb14:	dec00204 	addi	sp,sp,8
   2fb18:	f800283a 	ret

0002fb1c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fb1c:	defffb04 	addi	sp,sp,-20
   2fb20:	dfc00415 	stw	ra,16(sp)
   2fb24:	df000315 	stw	fp,12(sp)
   2fb28:	df000304 	addi	fp,sp,12
   2fb2c:	e13ffe15 	stw	r4,-8(fp)
   2fb30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2fb34:	e17ffd04 	addi	r5,fp,-12
   2fb38:	e13ffe17 	ldw	r4,-8(fp)
   2fb3c:	002fb800 	call	2fb80 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   2fb40:	e0fffd17 	ldw	r3,-12(fp)
   2fb44:	e0bfff17 	ldw	r2,-4(fp)
   2fb48:	1884b03a 	or	r2,r3,r2
   2fb4c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2fb50:	e0bffe17 	ldw	r2,-8(fp)
   2fb54:	10800317 	ldw	r2,12(r2)
   2fb58:	10800304 	addi	r2,r2,12
   2fb5c:	e0fffd17 	ldw	r3,-12(fp)
   2fb60:	18c007cc 	andi	r3,r3,31
   2fb64:	10c00035 	stwio	r3,0(r2)
}
   2fb68:	0001883a 	nop
   2fb6c:	e037883a 	mov	sp,fp
   2fb70:	dfc00117 	ldw	ra,4(sp)
   2fb74:	df000017 	ldw	fp,0(sp)
   2fb78:	dec00204 	addi	sp,sp,8
   2fb7c:	f800283a 	ret

0002fb80 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   2fb80:	defffd04 	addi	sp,sp,-12
   2fb84:	df000215 	stw	fp,8(sp)
   2fb88:	df000204 	addi	fp,sp,8
   2fb8c:	e13ffe15 	stw	r4,-8(fp)
   2fb90:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   2fb94:	e0bffe17 	ldw	r2,-8(fp)
   2fb98:	10800317 	ldw	r2,12(r2)
   2fb9c:	10800304 	addi	r2,r2,12
   2fba0:	10800037 	ldwio	r2,0(r2)
   2fba4:	10c007cc 	andi	r3,r2,31
   2fba8:	e0bfff17 	ldw	r2,-4(fp)
   2fbac:	10c00015 	stw	r3,0(r2)
}
   2fbb0:	0001883a 	nop
   2fbb4:	e037883a 	mov	sp,fp
   2fbb8:	df000017 	ldw	fp,0(sp)
   2fbbc:	dec00104 	addi	sp,sp,4
   2fbc0:	f800283a 	ret

0002fbc4 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   2fbc4:	defffd04 	addi	sp,sp,-12
   2fbc8:	df000215 	stw	fp,8(sp)
   2fbcc:	df000204 	addi	fp,sp,8
   2fbd0:	e13ffe15 	stw	r4,-8(fp)
   2fbd4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   2fbd8:	e0bffe17 	ldw	r2,-8(fp)
   2fbdc:	10800317 	ldw	r2,12(r2)
   2fbe0:	10800204 	addi	r2,r2,8
   2fbe4:	10800037 	ldwio	r2,0(r2)
   2fbe8:	10800c0c 	andi	r2,r2,48
   2fbec:	1005d13a 	srai	r2,r2,4
   2fbf0:	1007883a 	mov	r3,r2
   2fbf4:	e0bfff17 	ldw	r2,-4(fp)
   2fbf8:	10c00015 	stw	r3,0(r2)
}
   2fbfc:	0001883a 	nop
   2fc00:	e037883a 	mov	sp,fp
   2fc04:	df000017 	ldw	fp,0(sp)
   2fc08:	dec00104 	addi	sp,sp,4
   2fc0c:	f800283a 	ret

0002fc10 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   2fc10:	defffd04 	addi	sp,sp,-12
   2fc14:	df000215 	stw	fp,8(sp)
   2fc18:	df000204 	addi	fp,sp,8
   2fc1c:	e13ffe15 	stw	r4,-8(fp)
   2fc20:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   2fc24:	e0bffe17 	ldw	r2,-8(fp)
   2fc28:	10800317 	ldw	r2,12(r2)
   2fc2c:	10800204 	addi	r2,r2,8
   2fc30:	e0fffe17 	ldw	r3,-8(fp)
   2fc34:	18c00317 	ldw	r3,12(r3)
   2fc38:	18c00204 	addi	r3,r3,8
   2fc3c:	18c00037 	ldwio	r3,0(r3)
   2fc40:	1809883a 	mov	r4,r3
   2fc44:	00fff3c4 	movi	r3,-49
   2fc48:	20c8703a 	and	r4,r4,r3
   2fc4c:	e0ffff17 	ldw	r3,-4(fp)
   2fc50:	1806913a 	slli	r3,r3,4
   2fc54:	18c00c0c 	andi	r3,r3,48
   2fc58:	20c6b03a 	or	r3,r4,r3
   2fc5c:	10c00035 	stwio	r3,0(r2)
}
   2fc60:	0001883a 	nop
   2fc64:	e037883a 	mov	sp,fp
   2fc68:	df000017 	ldw	fp,0(sp)
   2fc6c:	dec00104 	addi	sp,sp,4
   2fc70:	f800283a 	ret

0002fc74 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   2fc74:	defffd04 	addi	sp,sp,-12
   2fc78:	df000215 	stw	fp,8(sp)
   2fc7c:	df000204 	addi	fp,sp,8
   2fc80:	e13ffe15 	stw	r4,-8(fp)
   2fc84:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   2fc88:	e0bffe17 	ldw	r2,-8(fp)
   2fc8c:	10800317 	ldw	r2,12(r2)
   2fc90:	10800204 	addi	r2,r2,8
   2fc94:	10800037 	ldwio	r2,0(r2)
   2fc98:	1080030c 	andi	r2,r2,12
   2fc9c:	1005d0ba 	srai	r2,r2,2
   2fca0:	1007883a 	mov	r3,r2
   2fca4:	e0bfff17 	ldw	r2,-4(fp)
   2fca8:	10c00015 	stw	r3,0(r2)
}
   2fcac:	0001883a 	nop
   2fcb0:	e037883a 	mov	sp,fp
   2fcb4:	df000017 	ldw	fp,0(sp)
   2fcb8:	dec00104 	addi	sp,sp,4
   2fcbc:	f800283a 	ret

0002fcc0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   2fcc0:	defffd04 	addi	sp,sp,-12
   2fcc4:	df000215 	stw	fp,8(sp)
   2fcc8:	df000204 	addi	fp,sp,8
   2fccc:	e13ffe15 	stw	r4,-8(fp)
   2fcd0:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   2fcd4:	e0bffe17 	ldw	r2,-8(fp)
   2fcd8:	10800317 	ldw	r2,12(r2)
   2fcdc:	10c00204 	addi	r3,r2,8
   2fce0:	e0bffe17 	ldw	r2,-8(fp)
   2fce4:	10800317 	ldw	r2,12(r2)
   2fce8:	10800204 	addi	r2,r2,8
   2fcec:	10800037 	ldwio	r2,0(r2)
   2fcf0:	1009883a 	mov	r4,r2
   2fcf4:	00bffcc4 	movi	r2,-13
   2fcf8:	2088703a 	and	r4,r4,r2
   2fcfc:	e0bfff17 	ldw	r2,-4(fp)
   2fd00:	1085883a 	add	r2,r2,r2
   2fd04:	1085883a 	add	r2,r2,r2
   2fd08:	1080030c 	andi	r2,r2,12
   2fd0c:	2084b03a 	or	r2,r4,r2
   2fd10:	18800035 	stwio	r2,0(r3)
}
   2fd14:	0001883a 	nop
   2fd18:	e037883a 	mov	sp,fp
   2fd1c:	df000017 	ldw	fp,0(sp)
   2fd20:	dec00104 	addi	sp,sp,4
   2fd24:	f800283a 	ret

0002fd28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2fd28:	defffa04 	addi	sp,sp,-24
   2fd2c:	dfc00515 	stw	ra,20(sp)
   2fd30:	df000415 	stw	fp,16(sp)
   2fd34:	df000404 	addi	fp,sp,16
   2fd38:	e13ffd15 	stw	r4,-12(fp)
   2fd3c:	e17ffe15 	stw	r5,-8(fp)
   2fd40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2fd44:	e0bffd17 	ldw	r2,-12(fp)
   2fd48:	10800017 	ldw	r2,0(r2)
   2fd4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2fd50:	e0bffc17 	ldw	r2,-16(fp)
   2fd54:	10c00a04 	addi	r3,r2,40
   2fd58:	e0bffd17 	ldw	r2,-12(fp)
   2fd5c:	10800217 	ldw	r2,8(r2)
   2fd60:	100f883a 	mov	r7,r2
   2fd64:	e1bfff17 	ldw	r6,-4(fp)
   2fd68:	e17ffe17 	ldw	r5,-8(fp)
   2fd6c:	1809883a 	mov	r4,r3
   2fd70:	00303500 	call	30350 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2fd74:	e037883a 	mov	sp,fp
   2fd78:	dfc00117 	ldw	ra,4(sp)
   2fd7c:	df000017 	ldw	fp,0(sp)
   2fd80:	dec00204 	addi	sp,sp,8
   2fd84:	f800283a 	ret

0002fd88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2fd88:	defffa04 	addi	sp,sp,-24
   2fd8c:	dfc00515 	stw	ra,20(sp)
   2fd90:	df000415 	stw	fp,16(sp)
   2fd94:	df000404 	addi	fp,sp,16
   2fd98:	e13ffd15 	stw	r4,-12(fp)
   2fd9c:	e17ffe15 	stw	r5,-8(fp)
   2fda0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2fda4:	e0bffd17 	ldw	r2,-12(fp)
   2fda8:	10800017 	ldw	r2,0(r2)
   2fdac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2fdb0:	e0bffc17 	ldw	r2,-16(fp)
   2fdb4:	10c00a04 	addi	r3,r2,40
   2fdb8:	e0bffd17 	ldw	r2,-12(fp)
   2fdbc:	10800217 	ldw	r2,8(r2)
   2fdc0:	100f883a 	mov	r7,r2
   2fdc4:	e1bfff17 	ldw	r6,-4(fp)
   2fdc8:	e17ffe17 	ldw	r5,-8(fp)
   2fdcc:	1809883a 	mov	r4,r3
   2fdd0:	003056c0 	call	3056c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2fdd4:	e037883a 	mov	sp,fp
   2fdd8:	dfc00117 	ldw	ra,4(sp)
   2fddc:	df000017 	ldw	fp,0(sp)
   2fde0:	dec00204 	addi	sp,sp,8
   2fde4:	f800283a 	ret

0002fde8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2fde8:	defffc04 	addi	sp,sp,-16
   2fdec:	dfc00315 	stw	ra,12(sp)
   2fdf0:	df000215 	stw	fp,8(sp)
   2fdf4:	df000204 	addi	fp,sp,8
   2fdf8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2fdfc:	e0bfff17 	ldw	r2,-4(fp)
   2fe00:	10800017 	ldw	r2,0(r2)
   2fe04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2fe08:	e0bffe17 	ldw	r2,-8(fp)
   2fe0c:	10c00a04 	addi	r3,r2,40
   2fe10:	e0bfff17 	ldw	r2,-4(fp)
   2fe14:	10800217 	ldw	r2,8(r2)
   2fe18:	100b883a 	mov	r5,r2
   2fe1c:	1809883a 	mov	r4,r3
   2fe20:	00301f80 	call	301f8 <altera_avalon_jtag_uart_close>
}
   2fe24:	e037883a 	mov	sp,fp
   2fe28:	dfc00117 	ldw	ra,4(sp)
   2fe2c:	df000017 	ldw	fp,0(sp)
   2fe30:	dec00204 	addi	sp,sp,8
   2fe34:	f800283a 	ret

0002fe38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2fe38:	defffa04 	addi	sp,sp,-24
   2fe3c:	dfc00515 	stw	ra,20(sp)
   2fe40:	df000415 	stw	fp,16(sp)
   2fe44:	df000404 	addi	fp,sp,16
   2fe48:	e13ffd15 	stw	r4,-12(fp)
   2fe4c:	e17ffe15 	stw	r5,-8(fp)
   2fe50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2fe54:	e0bffd17 	ldw	r2,-12(fp)
   2fe58:	10800017 	ldw	r2,0(r2)
   2fe5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2fe60:	e0bffc17 	ldw	r2,-16(fp)
   2fe64:	10800a04 	addi	r2,r2,40
   2fe68:	e1bfff17 	ldw	r6,-4(fp)
   2fe6c:	e17ffe17 	ldw	r5,-8(fp)
   2fe70:	1009883a 	mov	r4,r2
   2fe74:	00302600 	call	30260 <altera_avalon_jtag_uart_ioctl>
}
   2fe78:	e037883a 	mov	sp,fp
   2fe7c:	dfc00117 	ldw	ra,4(sp)
   2fe80:	df000017 	ldw	fp,0(sp)
   2fe84:	dec00204 	addi	sp,sp,8
   2fe88:	f800283a 	ret

0002fe8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2fe8c:	defffa04 	addi	sp,sp,-24
   2fe90:	dfc00515 	stw	ra,20(sp)
   2fe94:	df000415 	stw	fp,16(sp)
   2fe98:	df000404 	addi	fp,sp,16
   2fe9c:	e13ffd15 	stw	r4,-12(fp)
   2fea0:	e17ffe15 	stw	r5,-8(fp)
   2fea4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2fea8:	e0bffd17 	ldw	r2,-12(fp)
   2feac:	00c00044 	movi	r3,1
   2feb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2feb4:	e0bffd17 	ldw	r2,-12(fp)
   2feb8:	10800017 	ldw	r2,0(r2)
   2febc:	10800104 	addi	r2,r2,4
   2fec0:	1007883a 	mov	r3,r2
   2fec4:	e0bffd17 	ldw	r2,-12(fp)
   2fec8:	10800817 	ldw	r2,32(r2)
   2fecc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2fed0:	e0bffe17 	ldw	r2,-8(fp)
   2fed4:	e0ffff17 	ldw	r3,-4(fp)
   2fed8:	d8000015 	stw	zero,0(sp)
   2fedc:	e1fffd17 	ldw	r7,-12(fp)
   2fee0:	018000f4 	movhi	r6,3
   2fee4:	31bfd304 	addi	r6,r6,-180
   2fee8:	180b883a 	mov	r5,r3
   2feec:	1009883a 	mov	r4,r2
   2fef0:	003155c0 	call	3155c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2fef4:	e0bffd17 	ldw	r2,-12(fp)
   2fef8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2fefc:	e0bffd17 	ldw	r2,-12(fp)
   2ff00:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2ff04:	d0e71a17 	ldw	r3,-25496(gp)
   2ff08:	e1fffd17 	ldw	r7,-12(fp)
   2ff0c:	018000f4 	movhi	r6,3
   2ff10:	31805604 	addi	r6,r6,344
   2ff14:	180b883a 	mov	r5,r3
   2ff18:	1009883a 	mov	r4,r2
   2ff1c:	00310680 	call	31068 <alt_alarm_start>
   2ff20:	1000040e 	bge	r2,zero,2ff34 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2ff24:	e0fffd17 	ldw	r3,-12(fp)
   2ff28:	00a00034 	movhi	r2,32768
   2ff2c:	10bfffc4 	addi	r2,r2,-1
   2ff30:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2ff34:	0001883a 	nop
   2ff38:	e037883a 	mov	sp,fp
   2ff3c:	dfc00117 	ldw	ra,4(sp)
   2ff40:	df000017 	ldw	fp,0(sp)
   2ff44:	dec00204 	addi	sp,sp,8
   2ff48:	f800283a 	ret

0002ff4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2ff4c:	defff804 	addi	sp,sp,-32
   2ff50:	df000715 	stw	fp,28(sp)
   2ff54:	df000704 	addi	fp,sp,28
   2ff58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2ff5c:	e0bfff17 	ldw	r2,-4(fp)
   2ff60:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2ff64:	e0bffb17 	ldw	r2,-20(fp)
   2ff68:	10800017 	ldw	r2,0(r2)
   2ff6c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ff70:	e0bffc17 	ldw	r2,-16(fp)
   2ff74:	10800104 	addi	r2,r2,4
   2ff78:	10800037 	ldwio	r2,0(r2)
   2ff7c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2ff80:	e0bffd17 	ldw	r2,-12(fp)
   2ff84:	1080c00c 	andi	r2,r2,768
   2ff88:	10006d26 	beq	r2,zero,30140 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2ff8c:	e0bffd17 	ldw	r2,-12(fp)
   2ff90:	1080400c 	andi	r2,r2,256
   2ff94:	10003526 	beq	r2,zero,3006c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2ff98:	00800074 	movhi	r2,1
   2ff9c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ffa0:	e0bffb17 	ldw	r2,-20(fp)
   2ffa4:	10800a17 	ldw	r2,40(r2)
   2ffa8:	10800044 	addi	r2,r2,1
   2ffac:	1081ffcc 	andi	r2,r2,2047
   2ffb0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2ffb4:	e0bffb17 	ldw	r2,-20(fp)
   2ffb8:	10c00b17 	ldw	r3,44(r2)
   2ffbc:	e0bffe17 	ldw	r2,-8(fp)
   2ffc0:	18801526 	beq	r3,r2,30018 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2ffc4:	e0bffc17 	ldw	r2,-16(fp)
   2ffc8:	10800037 	ldwio	r2,0(r2)
   2ffcc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2ffd0:	e0bff917 	ldw	r2,-28(fp)
   2ffd4:	10a0000c 	andi	r2,r2,32768
   2ffd8:	10001126 	beq	r2,zero,30020 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2ffdc:	e0bffb17 	ldw	r2,-20(fp)
   2ffe0:	10800a17 	ldw	r2,40(r2)
   2ffe4:	e0fff917 	ldw	r3,-28(fp)
   2ffe8:	1809883a 	mov	r4,r3
   2ffec:	e0fffb17 	ldw	r3,-20(fp)
   2fff0:	1885883a 	add	r2,r3,r2
   2fff4:	10800e04 	addi	r2,r2,56
   2fff8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2fffc:	e0bffb17 	ldw	r2,-20(fp)
   30000:	10800a17 	ldw	r2,40(r2)
   30004:	10800044 	addi	r2,r2,1
   30008:	10c1ffcc 	andi	r3,r2,2047
   3000c:	e0bffb17 	ldw	r2,-20(fp)
   30010:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   30014:	003fe206 	br	2ffa0 <__alt_data_end+0xfffeffa0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   30018:	0001883a 	nop
   3001c:	00000106 	br	30024 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   30020:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   30024:	e0bff917 	ldw	r2,-28(fp)
   30028:	10bfffec 	andhi	r2,r2,65535
   3002c:	10000f26 	beq	r2,zero,3006c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   30030:	e0bffb17 	ldw	r2,-20(fp)
   30034:	10c00817 	ldw	r3,32(r2)
   30038:	00bfff84 	movi	r2,-2
   3003c:	1886703a 	and	r3,r3,r2
   30040:	e0bffb17 	ldw	r2,-20(fp)
   30044:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   30048:	e0bffc17 	ldw	r2,-16(fp)
   3004c:	10800104 	addi	r2,r2,4
   30050:	1007883a 	mov	r3,r2
   30054:	e0bffb17 	ldw	r2,-20(fp)
   30058:	10800817 	ldw	r2,32(r2)
   3005c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30060:	e0bffc17 	ldw	r2,-16(fp)
   30064:	10800104 	addi	r2,r2,4
   30068:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   3006c:	e0bffd17 	ldw	r2,-12(fp)
   30070:	1080800c 	andi	r2,r2,512
   30074:	103fbe26 	beq	r2,zero,2ff70 <__alt_data_end+0xfffeff70>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   30078:	e0bffd17 	ldw	r2,-12(fp)
   3007c:	1004d43a 	srli	r2,r2,16
   30080:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   30084:	00001406 	br	300d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   30088:	e0bffc17 	ldw	r2,-16(fp)
   3008c:	e0fffb17 	ldw	r3,-20(fp)
   30090:	18c00d17 	ldw	r3,52(r3)
   30094:	e13ffb17 	ldw	r4,-20(fp)
   30098:	20c7883a 	add	r3,r4,r3
   3009c:	18c20e04 	addi	r3,r3,2104
   300a0:	18c00003 	ldbu	r3,0(r3)
   300a4:	18c03fcc 	andi	r3,r3,255
   300a8:	18c0201c 	xori	r3,r3,128
   300ac:	18ffe004 	addi	r3,r3,-128
   300b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   300b4:	e0bffb17 	ldw	r2,-20(fp)
   300b8:	10800d17 	ldw	r2,52(r2)
   300bc:	10800044 	addi	r2,r2,1
   300c0:	10c1ffcc 	andi	r3,r2,2047
   300c4:	e0bffb17 	ldw	r2,-20(fp)
   300c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   300cc:	e0bffa17 	ldw	r2,-24(fp)
   300d0:	10bfffc4 	addi	r2,r2,-1
   300d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   300d8:	e0bffa17 	ldw	r2,-24(fp)
   300dc:	10000526 	beq	r2,zero,300f4 <altera_avalon_jtag_uart_irq+0x1a8>
   300e0:	e0bffb17 	ldw	r2,-20(fp)
   300e4:	10c00d17 	ldw	r3,52(r2)
   300e8:	e0bffb17 	ldw	r2,-20(fp)
   300ec:	10800c17 	ldw	r2,48(r2)
   300f0:	18bfe51e 	bne	r3,r2,30088 <__alt_data_end+0xffff0088>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   300f4:	e0bffa17 	ldw	r2,-24(fp)
   300f8:	103f9d26 	beq	r2,zero,2ff70 <__alt_data_end+0xfffeff70>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   300fc:	e0bffb17 	ldw	r2,-20(fp)
   30100:	10c00817 	ldw	r3,32(r2)
   30104:	00bfff44 	movi	r2,-3
   30108:	1886703a 	and	r3,r3,r2
   3010c:	e0bffb17 	ldw	r2,-20(fp)
   30110:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30114:	e0bffb17 	ldw	r2,-20(fp)
   30118:	10800017 	ldw	r2,0(r2)
   3011c:	10800104 	addi	r2,r2,4
   30120:	1007883a 	mov	r3,r2
   30124:	e0bffb17 	ldw	r2,-20(fp)
   30128:	10800817 	ldw	r2,32(r2)
   3012c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30130:	e0bffc17 	ldw	r2,-16(fp)
   30134:	10800104 	addi	r2,r2,4
   30138:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   3013c:	003f8c06 	br	2ff70 <__alt_data_end+0xfffeff70>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   30140:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   30144:	0001883a 	nop
   30148:	e037883a 	mov	sp,fp
   3014c:	df000017 	ldw	fp,0(sp)
   30150:	dec00104 	addi	sp,sp,4
   30154:	f800283a 	ret

00030158 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   30158:	defff804 	addi	sp,sp,-32
   3015c:	df000715 	stw	fp,28(sp)
   30160:	df000704 	addi	fp,sp,28
   30164:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   30168:	e0bffb17 	ldw	r2,-20(fp)
   3016c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   30170:	e0bff917 	ldw	r2,-28(fp)
   30174:	10800017 	ldw	r2,0(r2)
   30178:	10800104 	addi	r2,r2,4
   3017c:	10800037 	ldwio	r2,0(r2)
   30180:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   30184:	e0bffa17 	ldw	r2,-24(fp)
   30188:	1081000c 	andi	r2,r2,1024
   3018c:	10000b26 	beq	r2,zero,301bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   30190:	e0bff917 	ldw	r2,-28(fp)
   30194:	10800017 	ldw	r2,0(r2)
   30198:	10800104 	addi	r2,r2,4
   3019c:	1007883a 	mov	r3,r2
   301a0:	e0bff917 	ldw	r2,-28(fp)
   301a4:	10800817 	ldw	r2,32(r2)
   301a8:	10810014 	ori	r2,r2,1024
   301ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   301b0:	e0bff917 	ldw	r2,-28(fp)
   301b4:	10000915 	stw	zero,36(r2)
   301b8:	00000a06 	br	301e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   301bc:	e0bff917 	ldw	r2,-28(fp)
   301c0:	10c00917 	ldw	r3,36(r2)
   301c4:	00a00034 	movhi	r2,32768
   301c8:	10bfff04 	addi	r2,r2,-4
   301cc:	10c00536 	bltu	r2,r3,301e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   301d0:	e0bff917 	ldw	r2,-28(fp)
   301d4:	10800917 	ldw	r2,36(r2)
   301d8:	10c00044 	addi	r3,r2,1
   301dc:	e0bff917 	ldw	r2,-28(fp)
   301e0:	10c00915 	stw	r3,36(r2)
   301e4:	d0a71a17 	ldw	r2,-25496(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   301e8:	e037883a 	mov	sp,fp
   301ec:	df000017 	ldw	fp,0(sp)
   301f0:	dec00104 	addi	sp,sp,4
   301f4:	f800283a 	ret

000301f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   301f8:	defffd04 	addi	sp,sp,-12
   301fc:	df000215 	stw	fp,8(sp)
   30200:	df000204 	addi	fp,sp,8
   30204:	e13ffe15 	stw	r4,-8(fp)
   30208:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3020c:	00000506 	br	30224 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   30210:	e0bfff17 	ldw	r2,-4(fp)
   30214:	1090000c 	andi	r2,r2,16384
   30218:	10000226 	beq	r2,zero,30224 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3021c:	00bffd44 	movi	r2,-11
   30220:	00000b06 	br	30250 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30224:	e0bffe17 	ldw	r2,-8(fp)
   30228:	10c00d17 	ldw	r3,52(r2)
   3022c:	e0bffe17 	ldw	r2,-8(fp)
   30230:	10800c17 	ldw	r2,48(r2)
   30234:	18800526 	beq	r3,r2,3024c <altera_avalon_jtag_uart_close+0x54>
   30238:	e0bffe17 	ldw	r2,-8(fp)
   3023c:	10c00917 	ldw	r3,36(r2)
   30240:	e0bffe17 	ldw	r2,-8(fp)
   30244:	10800117 	ldw	r2,4(r2)
   30248:	18bff136 	bltu	r3,r2,30210 <__alt_data_end+0xffff0210>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3024c:	0005883a 	mov	r2,zero
}
   30250:	e037883a 	mov	sp,fp
   30254:	df000017 	ldw	fp,0(sp)
   30258:	dec00104 	addi	sp,sp,4
   3025c:	f800283a 	ret

00030260 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   30260:	defffa04 	addi	sp,sp,-24
   30264:	df000515 	stw	fp,20(sp)
   30268:	df000504 	addi	fp,sp,20
   3026c:	e13ffd15 	stw	r4,-12(fp)
   30270:	e17ffe15 	stw	r5,-8(fp)
   30274:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   30278:	00bff9c4 	movi	r2,-25
   3027c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   30280:	e0bffe17 	ldw	r2,-8(fp)
   30284:	10da8060 	cmpeqi	r3,r2,27137
   30288:	1800031e 	bne	r3,zero,30298 <altera_avalon_jtag_uart_ioctl+0x38>
   3028c:	109a80a0 	cmpeqi	r2,r2,27138
   30290:	1000181e 	bne	r2,zero,302f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   30294:	00002906 	br	3033c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   30298:	e0bffd17 	ldw	r2,-12(fp)
   3029c:	10c00117 	ldw	r3,4(r2)
   302a0:	00a00034 	movhi	r2,32768
   302a4:	10bfffc4 	addi	r2,r2,-1
   302a8:	18802126 	beq	r3,r2,30330 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   302ac:	e0bfff17 	ldw	r2,-4(fp)
   302b0:	10800017 	ldw	r2,0(r2)
   302b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   302b8:	e0bffc17 	ldw	r2,-16(fp)
   302bc:	10800090 	cmplti	r2,r2,2
   302c0:	1000061e 	bne	r2,zero,302dc <altera_avalon_jtag_uart_ioctl+0x7c>
   302c4:	e0fffc17 	ldw	r3,-16(fp)
   302c8:	00a00034 	movhi	r2,32768
   302cc:	10bfffc4 	addi	r2,r2,-1
   302d0:	18800226 	beq	r3,r2,302dc <altera_avalon_jtag_uart_ioctl+0x7c>
   302d4:	e0bffc17 	ldw	r2,-16(fp)
   302d8:	00000206 	br	302e4 <altera_avalon_jtag_uart_ioctl+0x84>
   302dc:	00a00034 	movhi	r2,32768
   302e0:	10bfff84 	addi	r2,r2,-2
   302e4:	e0fffd17 	ldw	r3,-12(fp)
   302e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   302ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   302f0:	00000f06 	br	30330 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   302f4:	e0bffd17 	ldw	r2,-12(fp)
   302f8:	10c00117 	ldw	r3,4(r2)
   302fc:	00a00034 	movhi	r2,32768
   30300:	10bfffc4 	addi	r2,r2,-1
   30304:	18800c26 	beq	r3,r2,30338 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   30308:	e0bffd17 	ldw	r2,-12(fp)
   3030c:	10c00917 	ldw	r3,36(r2)
   30310:	e0bffd17 	ldw	r2,-12(fp)
   30314:	10800117 	ldw	r2,4(r2)
   30318:	1885803a 	cmpltu	r2,r3,r2
   3031c:	10c03fcc 	andi	r3,r2,255
   30320:	e0bfff17 	ldw	r2,-4(fp)
   30324:	10c00015 	stw	r3,0(r2)
      rc = 0;
   30328:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3032c:	00000206 	br	30338 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   30330:	0001883a 	nop
   30334:	00000106 	br	3033c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   30338:	0001883a 	nop

  default:
    break;
  }

  return rc;
   3033c:	e0bffb17 	ldw	r2,-20(fp)
}
   30340:	e037883a 	mov	sp,fp
   30344:	df000017 	ldw	fp,0(sp)
   30348:	dec00104 	addi	sp,sp,4
   3034c:	f800283a 	ret

00030350 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   30350:	defff304 	addi	sp,sp,-52
   30354:	dfc00c15 	stw	ra,48(sp)
   30358:	df000b15 	stw	fp,44(sp)
   3035c:	df000b04 	addi	fp,sp,44
   30360:	e13ffc15 	stw	r4,-16(fp)
   30364:	e17ffd15 	stw	r5,-12(fp)
   30368:	e1bffe15 	stw	r6,-8(fp)
   3036c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   30370:	e0bffd17 	ldw	r2,-12(fp)
   30374:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   30378:	00004706 	br	30498 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   3037c:	e0bffc17 	ldw	r2,-16(fp)
   30380:	10800a17 	ldw	r2,40(r2)
   30384:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   30388:	e0bffc17 	ldw	r2,-16(fp)
   3038c:	10800b17 	ldw	r2,44(r2)
   30390:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   30394:	e0fff717 	ldw	r3,-36(fp)
   30398:	e0bff817 	ldw	r2,-32(fp)
   3039c:	18800536 	bltu	r3,r2,303b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   303a0:	e0fff717 	ldw	r3,-36(fp)
   303a4:	e0bff817 	ldw	r2,-32(fp)
   303a8:	1885c83a 	sub	r2,r3,r2
   303ac:	e0bff615 	stw	r2,-40(fp)
   303b0:	00000406 	br	303c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   303b4:	00c20004 	movi	r3,2048
   303b8:	e0bff817 	ldw	r2,-32(fp)
   303bc:	1885c83a 	sub	r2,r3,r2
   303c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   303c4:	e0bff617 	ldw	r2,-40(fp)
   303c8:	10001e26 	beq	r2,zero,30444 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   303cc:	e0fffe17 	ldw	r3,-8(fp)
   303d0:	e0bff617 	ldw	r2,-40(fp)
   303d4:	1880022e 	bgeu	r3,r2,303e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   303d8:	e0bffe17 	ldw	r2,-8(fp)
   303dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   303e0:	e0bffc17 	ldw	r2,-16(fp)
   303e4:	10c00e04 	addi	r3,r2,56
   303e8:	e0bff817 	ldw	r2,-32(fp)
   303ec:	1885883a 	add	r2,r3,r2
   303f0:	e1bff617 	ldw	r6,-40(fp)
   303f4:	100b883a 	mov	r5,r2
   303f8:	e13ff517 	ldw	r4,-44(fp)
   303fc:	00261b40 	call	261b4 <memcpy>
      ptr   += n;
   30400:	e0fff517 	ldw	r3,-44(fp)
   30404:	e0bff617 	ldw	r2,-40(fp)
   30408:	1885883a 	add	r2,r3,r2
   3040c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   30410:	e0fffe17 	ldw	r3,-8(fp)
   30414:	e0bff617 	ldw	r2,-40(fp)
   30418:	1885c83a 	sub	r2,r3,r2
   3041c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30420:	e0fff817 	ldw	r3,-32(fp)
   30424:	e0bff617 	ldw	r2,-40(fp)
   30428:	1885883a 	add	r2,r3,r2
   3042c:	10c1ffcc 	andi	r3,r2,2047
   30430:	e0bffc17 	ldw	r2,-16(fp)
   30434:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   30438:	e0bffe17 	ldw	r2,-8(fp)
   3043c:	00bfcf16 	blt	zero,r2,3037c <__alt_data_end+0xffff037c>
   30440:	00000106 	br	30448 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   30444:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   30448:	e0fff517 	ldw	r3,-44(fp)
   3044c:	e0bffd17 	ldw	r2,-12(fp)
   30450:	1880141e 	bne	r3,r2,304a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   30454:	e0bfff17 	ldw	r2,-4(fp)
   30458:	1090000c 	andi	r2,r2,16384
   3045c:	1000131e 	bne	r2,zero,304ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   30460:	0001883a 	nop
   30464:	e0bffc17 	ldw	r2,-16(fp)
   30468:	10c00a17 	ldw	r3,40(r2)
   3046c:	e0bff717 	ldw	r2,-36(fp)
   30470:	1880051e 	bne	r3,r2,30488 <altera_avalon_jtag_uart_read+0x138>
   30474:	e0bffc17 	ldw	r2,-16(fp)
   30478:	10c00917 	ldw	r3,36(r2)
   3047c:	e0bffc17 	ldw	r2,-16(fp)
   30480:	10800117 	ldw	r2,4(r2)
   30484:	18bff736 	bltu	r3,r2,30464 <__alt_data_end+0xffff0464>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   30488:	e0bffc17 	ldw	r2,-16(fp)
   3048c:	10c00a17 	ldw	r3,40(r2)
   30490:	e0bff717 	ldw	r2,-36(fp)
   30494:	18800726 	beq	r3,r2,304b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   30498:	e0bffe17 	ldw	r2,-8(fp)
   3049c:	00bfb716 	blt	zero,r2,3037c <__alt_data_end+0xffff037c>
   304a0:	00000506 	br	304b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   304a4:	0001883a 	nop
   304a8:	00000306 	br	304b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   304ac:	0001883a 	nop
   304b0:	00000106 	br	304b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   304b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   304b8:	e0fff517 	ldw	r3,-44(fp)
   304bc:	e0bffd17 	ldw	r2,-12(fp)
   304c0:	18801826 	beq	r3,r2,30524 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   304c4:	0005303a 	rdctl	r2,status
   304c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   304cc:	e0fffb17 	ldw	r3,-20(fp)
   304d0:	00bfff84 	movi	r2,-2
   304d4:	1884703a 	and	r2,r3,r2
   304d8:	1001703a 	wrctl	status,r2
  
  return context;
   304dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   304e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   304e4:	e0bffc17 	ldw	r2,-16(fp)
   304e8:	10800817 	ldw	r2,32(r2)
   304ec:	10c00054 	ori	r3,r2,1
   304f0:	e0bffc17 	ldw	r2,-16(fp)
   304f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   304f8:	e0bffc17 	ldw	r2,-16(fp)
   304fc:	10800017 	ldw	r2,0(r2)
   30500:	10800104 	addi	r2,r2,4
   30504:	1007883a 	mov	r3,r2
   30508:	e0bffc17 	ldw	r2,-16(fp)
   3050c:	10800817 	ldw	r2,32(r2)
   30510:	18800035 	stwio	r2,0(r3)
   30514:	e0bffa17 	ldw	r2,-24(fp)
   30518:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3051c:	e0bff917 	ldw	r2,-28(fp)
   30520:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   30524:	e0fff517 	ldw	r3,-44(fp)
   30528:	e0bffd17 	ldw	r2,-12(fp)
   3052c:	18800426 	beq	r3,r2,30540 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   30530:	e0fff517 	ldw	r3,-44(fp)
   30534:	e0bffd17 	ldw	r2,-12(fp)
   30538:	1885c83a 	sub	r2,r3,r2
   3053c:	00000606 	br	30558 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   30540:	e0bfff17 	ldw	r2,-4(fp)
   30544:	1090000c 	andi	r2,r2,16384
   30548:	10000226 	beq	r2,zero,30554 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   3054c:	00bffd44 	movi	r2,-11
   30550:	00000106 	br	30558 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   30554:	00bffec4 	movi	r2,-5
}
   30558:	e037883a 	mov	sp,fp
   3055c:	dfc00117 	ldw	ra,4(sp)
   30560:	df000017 	ldw	fp,0(sp)
   30564:	dec00204 	addi	sp,sp,8
   30568:	f800283a 	ret

0003056c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   3056c:	defff304 	addi	sp,sp,-52
   30570:	dfc00c15 	stw	ra,48(sp)
   30574:	df000b15 	stw	fp,44(sp)
   30578:	df000b04 	addi	fp,sp,44
   3057c:	e13ffc15 	stw	r4,-16(fp)
   30580:	e17ffd15 	stw	r5,-12(fp)
   30584:	e1bffe15 	stw	r6,-8(fp)
   30588:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   3058c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   30590:	e0bffd17 	ldw	r2,-12(fp)
   30594:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   30598:	00003706 	br	30678 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   3059c:	e0bffc17 	ldw	r2,-16(fp)
   305a0:	10800c17 	ldw	r2,48(r2)
   305a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   305a8:	e0bffc17 	ldw	r2,-16(fp)
   305ac:	10800d17 	ldw	r2,52(r2)
   305b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   305b4:	e0fff917 	ldw	r3,-28(fp)
   305b8:	e0bff517 	ldw	r2,-44(fp)
   305bc:	1880062e 	bgeu	r3,r2,305d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   305c0:	e0fff517 	ldw	r3,-44(fp)
   305c4:	e0bff917 	ldw	r2,-28(fp)
   305c8:	1885c83a 	sub	r2,r3,r2
   305cc:	10bfffc4 	addi	r2,r2,-1
   305d0:	e0bff615 	stw	r2,-40(fp)
   305d4:	00000b06 	br	30604 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   305d8:	e0bff517 	ldw	r2,-44(fp)
   305dc:	10000526 	beq	r2,zero,305f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   305e0:	00c20004 	movi	r3,2048
   305e4:	e0bff917 	ldw	r2,-28(fp)
   305e8:	1885c83a 	sub	r2,r3,r2
   305ec:	e0bff615 	stw	r2,-40(fp)
   305f0:	00000406 	br	30604 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   305f4:	00c1ffc4 	movi	r3,2047
   305f8:	e0bff917 	ldw	r2,-28(fp)
   305fc:	1885c83a 	sub	r2,r3,r2
   30600:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   30604:	e0bff617 	ldw	r2,-40(fp)
   30608:	10001e26 	beq	r2,zero,30684 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   3060c:	e0fffe17 	ldw	r3,-8(fp)
   30610:	e0bff617 	ldw	r2,-40(fp)
   30614:	1880022e 	bgeu	r3,r2,30620 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   30618:	e0bffe17 	ldw	r2,-8(fp)
   3061c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   30620:	e0bffc17 	ldw	r2,-16(fp)
   30624:	10c20e04 	addi	r3,r2,2104
   30628:	e0bff917 	ldw	r2,-28(fp)
   3062c:	1885883a 	add	r2,r3,r2
   30630:	e1bff617 	ldw	r6,-40(fp)
   30634:	e17ffd17 	ldw	r5,-12(fp)
   30638:	1009883a 	mov	r4,r2
   3063c:	00261b40 	call	261b4 <memcpy>
      ptr   += n;
   30640:	e0fffd17 	ldw	r3,-12(fp)
   30644:	e0bff617 	ldw	r2,-40(fp)
   30648:	1885883a 	add	r2,r3,r2
   3064c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   30650:	e0fffe17 	ldw	r3,-8(fp)
   30654:	e0bff617 	ldw	r2,-40(fp)
   30658:	1885c83a 	sub	r2,r3,r2
   3065c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30660:	e0fff917 	ldw	r3,-28(fp)
   30664:	e0bff617 	ldw	r2,-40(fp)
   30668:	1885883a 	add	r2,r3,r2
   3066c:	10c1ffcc 	andi	r3,r2,2047
   30670:	e0bffc17 	ldw	r2,-16(fp)
   30674:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   30678:	e0bffe17 	ldw	r2,-8(fp)
   3067c:	00bfc716 	blt	zero,r2,3059c <__alt_data_end+0xffff059c>
   30680:	00000106 	br	30688 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   30684:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30688:	0005303a 	rdctl	r2,status
   3068c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30690:	e0fffb17 	ldw	r3,-20(fp)
   30694:	00bfff84 	movi	r2,-2
   30698:	1884703a 	and	r2,r3,r2
   3069c:	1001703a 	wrctl	status,r2
  
  return context;
   306a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   306a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   306a8:	e0bffc17 	ldw	r2,-16(fp)
   306ac:	10800817 	ldw	r2,32(r2)
   306b0:	10c00094 	ori	r3,r2,2
   306b4:	e0bffc17 	ldw	r2,-16(fp)
   306b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   306bc:	e0bffc17 	ldw	r2,-16(fp)
   306c0:	10800017 	ldw	r2,0(r2)
   306c4:	10800104 	addi	r2,r2,4
   306c8:	1007883a 	mov	r3,r2
   306cc:	e0bffc17 	ldw	r2,-16(fp)
   306d0:	10800817 	ldw	r2,32(r2)
   306d4:	18800035 	stwio	r2,0(r3)
   306d8:	e0bffa17 	ldw	r2,-24(fp)
   306dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   306e0:	e0bff817 	ldw	r2,-32(fp)
   306e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   306e8:	e0bffe17 	ldw	r2,-8(fp)
   306ec:	0080100e 	bge	zero,r2,30730 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   306f0:	e0bfff17 	ldw	r2,-4(fp)
   306f4:	1090000c 	andi	r2,r2,16384
   306f8:	1000101e 	bne	r2,zero,3073c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   306fc:	0001883a 	nop
   30700:	e0bffc17 	ldw	r2,-16(fp)
   30704:	10c00d17 	ldw	r3,52(r2)
   30708:	e0bff517 	ldw	r2,-44(fp)
   3070c:	1880051e 	bne	r3,r2,30724 <altera_avalon_jtag_uart_write+0x1b8>
   30710:	e0bffc17 	ldw	r2,-16(fp)
   30714:	10c00917 	ldw	r3,36(r2)
   30718:	e0bffc17 	ldw	r2,-16(fp)
   3071c:	10800117 	ldw	r2,4(r2)
   30720:	18bff736 	bltu	r3,r2,30700 <__alt_data_end+0xffff0700>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   30724:	e0bffc17 	ldw	r2,-16(fp)
   30728:	10800917 	ldw	r2,36(r2)
   3072c:	1000051e 	bne	r2,zero,30744 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   30730:	e0bffe17 	ldw	r2,-8(fp)
   30734:	00bfd016 	blt	zero,r2,30678 <__alt_data_end+0xffff0678>
   30738:	00000306 	br	30748 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   3073c:	0001883a 	nop
   30740:	00000106 	br	30748 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   30744:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   30748:	e0fffd17 	ldw	r3,-12(fp)
   3074c:	e0bff717 	ldw	r2,-36(fp)
   30750:	18800426 	beq	r3,r2,30764 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   30754:	e0fffd17 	ldw	r3,-12(fp)
   30758:	e0bff717 	ldw	r2,-36(fp)
   3075c:	1885c83a 	sub	r2,r3,r2
   30760:	00000606 	br	3077c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   30764:	e0bfff17 	ldw	r2,-4(fp)
   30768:	1090000c 	andi	r2,r2,16384
   3076c:	10000226 	beq	r2,zero,30778 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   30770:	00bffd44 	movi	r2,-11
   30774:	00000106 	br	3077c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   30778:	00bffec4 	movi	r2,-5
}
   3077c:	e037883a 	mov	sp,fp
   30780:	dfc00117 	ldw	ra,4(sp)
   30784:	df000017 	ldw	fp,0(sp)
   30788:	dec00204 	addi	sp,sp,8
   3078c:	f800283a 	ret

00030790 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   30790:	defffa04 	addi	sp,sp,-24
   30794:	dfc00515 	stw	ra,20(sp)
   30798:	df000415 	stw	fp,16(sp)
   3079c:	df000404 	addi	fp,sp,16
   307a0:	e13ffd15 	stw	r4,-12(fp)
   307a4:	e17ffe15 	stw	r5,-8(fp)
   307a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   307ac:	e0bffd17 	ldw	r2,-12(fp)
   307b0:	10800017 	ldw	r2,0(r2)
   307b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   307b8:	e0bffc17 	ldw	r2,-16(fp)
   307bc:	10c00a04 	addi	r3,r2,40
   307c0:	e0bffd17 	ldw	r2,-12(fp)
   307c4:	10800217 	ldw	r2,8(r2)
   307c8:	100f883a 	mov	r7,r2
   307cc:	e1bfff17 	ldw	r6,-4(fp)
   307d0:	e17ffe17 	ldw	r5,-8(fp)
   307d4:	1809883a 	mov	r4,r3
   307d8:	0030ca40 	call	30ca4 <altera_avalon_uart_read>
      fd->fd_flags);
}
   307dc:	e037883a 	mov	sp,fp
   307e0:	dfc00117 	ldw	ra,4(sp)
   307e4:	df000017 	ldw	fp,0(sp)
   307e8:	dec00204 	addi	sp,sp,8
   307ec:	f800283a 	ret

000307f0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   307f0:	defffa04 	addi	sp,sp,-24
   307f4:	dfc00515 	stw	ra,20(sp)
   307f8:	df000415 	stw	fp,16(sp)
   307fc:	df000404 	addi	fp,sp,16
   30800:	e13ffd15 	stw	r4,-12(fp)
   30804:	e17ffe15 	stw	r5,-8(fp)
   30808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   3080c:	e0bffd17 	ldw	r2,-12(fp)
   30810:	10800017 	ldw	r2,0(r2)
   30814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   30818:	e0bffc17 	ldw	r2,-16(fp)
   3081c:	10c00a04 	addi	r3,r2,40
   30820:	e0bffd17 	ldw	r2,-12(fp)
   30824:	10800217 	ldw	r2,8(r2)
   30828:	100f883a 	mov	r7,r2
   3082c:	e1bfff17 	ldw	r6,-4(fp)
   30830:	e17ffe17 	ldw	r5,-8(fp)
   30834:	1809883a 	mov	r4,r3
   30838:	0030ebc0 	call	30ebc <altera_avalon_uart_write>
      fd->fd_flags);
}
   3083c:	e037883a 	mov	sp,fp
   30840:	dfc00117 	ldw	ra,4(sp)
   30844:	df000017 	ldw	fp,0(sp)
   30848:	dec00204 	addi	sp,sp,8
   3084c:	f800283a 	ret

00030850 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   30850:	defffc04 	addi	sp,sp,-16
   30854:	dfc00315 	stw	ra,12(sp)
   30858:	df000215 	stw	fp,8(sp)
   3085c:	df000204 	addi	fp,sp,8
   30860:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30864:	e0bfff17 	ldw	r2,-4(fp)
   30868:	10800017 	ldw	r2,0(r2)
   3086c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   30870:	e0bffe17 	ldw	r2,-8(fp)
   30874:	10c00a04 	addi	r3,r2,40
   30878:	e0bfff17 	ldw	r2,-4(fp)
   3087c:	10800217 	ldw	r2,8(r2)
   30880:	100b883a 	mov	r5,r2
   30884:	1809883a 	mov	r4,r3
   30888:	0030c140 	call	30c14 <altera_avalon_uart_close>
}
   3088c:	e037883a 	mov	sp,fp
   30890:	dfc00117 	ldw	ra,4(sp)
   30894:	df000017 	ldw	fp,0(sp)
   30898:	dec00204 	addi	sp,sp,8
   3089c:	f800283a 	ret

000308a0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   308a0:	defff804 	addi	sp,sp,-32
   308a4:	dfc00715 	stw	ra,28(sp)
   308a8:	df000615 	stw	fp,24(sp)
   308ac:	df000604 	addi	fp,sp,24
   308b0:	e13ffd15 	stw	r4,-12(fp)
   308b4:	e17ffe15 	stw	r5,-8(fp)
   308b8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   308bc:	e0bffd17 	ldw	r2,-12(fp)
   308c0:	10800017 	ldw	r2,0(r2)
   308c4:	e0bffb15 	stw	r2,-20(fp)
   308c8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   308cc:	1000041e 	bne	r2,zero,308e0 <altera_avalon_uart_init+0x40>
   308d0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   308d4:	1000021e 	bne	r2,zero,308e0 <altera_avalon_uart_init+0x40>
   308d8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   308dc:	10000226 	beq	r2,zero,308e8 <altera_avalon_uart_init+0x48>
   308e0:	00800044 	movi	r2,1
   308e4:	00000106 	br	308ec <altera_avalon_uart_init+0x4c>
   308e8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   308ec:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   308f0:	e0bffc17 	ldw	r2,-16(fp)
   308f4:	10000f1e 	bne	r2,zero,30934 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   308f8:	e0bffd17 	ldw	r2,-12(fp)
   308fc:	00c32004 	movi	r3,3200
   30900:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   30904:	e0bffb17 	ldw	r2,-20(fp)
   30908:	10800304 	addi	r2,r2,12
   3090c:	e0fffd17 	ldw	r3,-12(fp)
   30910:	18c00117 	ldw	r3,4(r3)
   30914:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   30918:	d8000015 	stw	zero,0(sp)
   3091c:	e1fffd17 	ldw	r7,-12(fp)
   30920:	018000f4 	movhi	r6,3
   30924:	31825304 	addi	r6,r6,2380
   30928:	e17fff17 	ldw	r5,-4(fp)
   3092c:	e13ffe17 	ldw	r4,-8(fp)
   30930:	003155c0 	call	3155c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   30934:	0001883a 	nop
   30938:	e037883a 	mov	sp,fp
   3093c:	dfc00117 	ldw	ra,4(sp)
   30940:	df000017 	ldw	fp,0(sp)
   30944:	dec00204 	addi	sp,sp,8
   30948:	f800283a 	ret

0003094c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   3094c:	defffa04 	addi	sp,sp,-24
   30950:	dfc00515 	stw	ra,20(sp)
   30954:	df000415 	stw	fp,16(sp)
   30958:	df000404 	addi	fp,sp,16
   3095c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   30960:	e0bfff17 	ldw	r2,-4(fp)
   30964:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   30968:	e0bffc17 	ldw	r2,-16(fp)
   3096c:	10800017 	ldw	r2,0(r2)
   30970:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   30974:	e0bffd17 	ldw	r2,-12(fp)
   30978:	10800204 	addi	r2,r2,8
   3097c:	10800037 	ldwio	r2,0(r2)
   30980:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   30984:	e0bffd17 	ldw	r2,-12(fp)
   30988:	10800204 	addi	r2,r2,8
   3098c:	0007883a 	mov	r3,zero
   30990:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   30994:	e0bffd17 	ldw	r2,-12(fp)
   30998:	10800204 	addi	r2,r2,8
   3099c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   309a0:	e0bffe17 	ldw	r2,-8(fp)
   309a4:	1080200c 	andi	r2,r2,128
   309a8:	10000326 	beq	r2,zero,309b8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   309ac:	e17ffe17 	ldw	r5,-8(fp)
   309b0:	e13ffc17 	ldw	r4,-16(fp)
   309b4:	00309e80 	call	309e8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   309b8:	e0bffe17 	ldw	r2,-8(fp)
   309bc:	1081100c 	andi	r2,r2,1088
   309c0:	10000326 	beq	r2,zero,309d0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   309c4:	e17ffe17 	ldw	r5,-8(fp)
   309c8:	e13ffc17 	ldw	r4,-16(fp)
   309cc:	0030acc0 	call	30acc <altera_avalon_uart_txirq>
  }
  

}
   309d0:	0001883a 	nop
   309d4:	e037883a 	mov	sp,fp
   309d8:	dfc00117 	ldw	ra,4(sp)
   309dc:	df000017 	ldw	fp,0(sp)
   309e0:	dec00204 	addi	sp,sp,8
   309e4:	f800283a 	ret

000309e8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   309e8:	defffc04 	addi	sp,sp,-16
   309ec:	df000315 	stw	fp,12(sp)
   309f0:	df000304 	addi	fp,sp,12
   309f4:	e13ffe15 	stw	r4,-8(fp)
   309f8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   309fc:	e0bfff17 	ldw	r2,-4(fp)
   30a00:	108000cc 	andi	r2,r2,3
   30a04:	10002c1e 	bne	r2,zero,30ab8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   30a08:	e0bffe17 	ldw	r2,-8(fp)
   30a0c:	10800317 	ldw	r2,12(r2)
   30a10:	e0bffe17 	ldw	r2,-8(fp)
   30a14:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30a18:	e0bffe17 	ldw	r2,-8(fp)
   30a1c:	10800317 	ldw	r2,12(r2)
   30a20:	10800044 	addi	r2,r2,1
   30a24:	10800fcc 	andi	r2,r2,63
   30a28:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   30a2c:	e0bffe17 	ldw	r2,-8(fp)
   30a30:	10800317 	ldw	r2,12(r2)
   30a34:	e0fffe17 	ldw	r3,-8(fp)
   30a38:	18c00017 	ldw	r3,0(r3)
   30a3c:	18c00037 	ldwio	r3,0(r3)
   30a40:	1809883a 	mov	r4,r3
   30a44:	e0fffe17 	ldw	r3,-8(fp)
   30a48:	1885883a 	add	r2,r3,r2
   30a4c:	10800704 	addi	r2,r2,28
   30a50:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   30a54:	e0bffe17 	ldw	r2,-8(fp)
   30a58:	e0fffd17 	ldw	r3,-12(fp)
   30a5c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30a60:	e0bffe17 	ldw	r2,-8(fp)
   30a64:	10800317 	ldw	r2,12(r2)
   30a68:	10800044 	addi	r2,r2,1
   30a6c:	10800fcc 	andi	r2,r2,63
   30a70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   30a74:	e0bffe17 	ldw	r2,-8(fp)
   30a78:	10c00217 	ldw	r3,8(r2)
   30a7c:	e0bffd17 	ldw	r2,-12(fp)
   30a80:	18800e1e 	bne	r3,r2,30abc <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30a84:	e0bffe17 	ldw	r2,-8(fp)
   30a88:	10c00117 	ldw	r3,4(r2)
   30a8c:	00bfdfc4 	movi	r2,-129
   30a90:	1886703a 	and	r3,r3,r2
   30a94:	e0bffe17 	ldw	r2,-8(fp)
   30a98:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   30a9c:	e0bffe17 	ldw	r2,-8(fp)
   30aa0:	10800017 	ldw	r2,0(r2)
   30aa4:	10800304 	addi	r2,r2,12
   30aa8:	e0fffe17 	ldw	r3,-8(fp)
   30aac:	18c00117 	ldw	r3,4(r3)
   30ab0:	10c00035 	stwio	r3,0(r2)
   30ab4:	00000106 	br	30abc <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   30ab8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   30abc:	e037883a 	mov	sp,fp
   30ac0:	df000017 	ldw	fp,0(sp)
   30ac4:	dec00104 	addi	sp,sp,4
   30ac8:	f800283a 	ret

00030acc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   30acc:	defffb04 	addi	sp,sp,-20
   30ad0:	df000415 	stw	fp,16(sp)
   30ad4:	df000404 	addi	fp,sp,16
   30ad8:	e13ffc15 	stw	r4,-16(fp)
   30adc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   30ae0:	e0bffc17 	ldw	r2,-16(fp)
   30ae4:	10c00417 	ldw	r3,16(r2)
   30ae8:	e0bffc17 	ldw	r2,-16(fp)
   30aec:	10800517 	ldw	r2,20(r2)
   30af0:	18803226 	beq	r3,r2,30bbc <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   30af4:	e0bffc17 	ldw	r2,-16(fp)
   30af8:	10800617 	ldw	r2,24(r2)
   30afc:	1080008c 	andi	r2,r2,2
   30b00:	10000326 	beq	r2,zero,30b10 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   30b04:	e0bffd17 	ldw	r2,-12(fp)
   30b08:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   30b0c:	10001d26 	beq	r2,zero,30b84 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   30b10:	e0bffc17 	ldw	r2,-16(fp)
   30b14:	10800417 	ldw	r2,16(r2)
   30b18:	e0bffc17 	ldw	r2,-16(fp)
   30b1c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   30b20:	e0bffc17 	ldw	r2,-16(fp)
   30b24:	10800017 	ldw	r2,0(r2)
   30b28:	10800104 	addi	r2,r2,4
   30b2c:	e0fffc17 	ldw	r3,-16(fp)
   30b30:	18c00417 	ldw	r3,16(r3)
   30b34:	e13ffc17 	ldw	r4,-16(fp)
   30b38:	20c7883a 	add	r3,r4,r3
   30b3c:	18c01704 	addi	r3,r3,92
   30b40:	18c00003 	ldbu	r3,0(r3)
   30b44:	18c03fcc 	andi	r3,r3,255
   30b48:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   30b4c:	e0bffc17 	ldw	r2,-16(fp)
   30b50:	10800417 	ldw	r2,16(r2)
   30b54:	10800044 	addi	r2,r2,1
   30b58:	e0fffc17 	ldw	r3,-16(fp)
   30b5c:	18800415 	stw	r2,16(r3)
   30b60:	10c00fcc 	andi	r3,r2,63
   30b64:	e0bffc17 	ldw	r2,-16(fp)
   30b68:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30b6c:	e0bffc17 	ldw	r2,-16(fp)
   30b70:	10800117 	ldw	r2,4(r2)
   30b74:	10c01014 	ori	r3,r2,64
   30b78:	e0bffc17 	ldw	r2,-16(fp)
   30b7c:	10c00115 	stw	r3,4(r2)
   30b80:	00000e06 	br	30bbc <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   30b84:	e0bffc17 	ldw	r2,-16(fp)
   30b88:	10800017 	ldw	r2,0(r2)
   30b8c:	10800204 	addi	r2,r2,8
   30b90:	10800037 	ldwio	r2,0(r2)
   30b94:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   30b98:	e0bffd17 	ldw	r2,-12(fp)
   30b9c:	1082000c 	andi	r2,r2,2048
   30ba0:	1000061e 	bne	r2,zero,30bbc <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30ba4:	e0bffc17 	ldw	r2,-16(fp)
   30ba8:	10c00117 	ldw	r3,4(r2)
   30bac:	00bfefc4 	movi	r2,-65
   30bb0:	1886703a 	and	r3,r3,r2
   30bb4:	e0bffc17 	ldw	r2,-16(fp)
   30bb8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   30bbc:	e0bffc17 	ldw	r2,-16(fp)
   30bc0:	10c00417 	ldw	r3,16(r2)
   30bc4:	e0bffc17 	ldw	r2,-16(fp)
   30bc8:	10800517 	ldw	r2,20(r2)
   30bcc:	1880061e 	bne	r3,r2,30be8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30bd0:	e0bffc17 	ldw	r2,-16(fp)
   30bd4:	10c00117 	ldw	r3,4(r2)
   30bd8:	00beefc4 	movi	r2,-1089
   30bdc:	1886703a 	and	r3,r3,r2
   30be0:	e0bffc17 	ldw	r2,-16(fp)
   30be4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30be8:	e0bffc17 	ldw	r2,-16(fp)
   30bec:	10800017 	ldw	r2,0(r2)
   30bf0:	10800304 	addi	r2,r2,12
   30bf4:	e0fffc17 	ldw	r3,-16(fp)
   30bf8:	18c00117 	ldw	r3,4(r3)
   30bfc:	10c00035 	stwio	r3,0(r2)
}
   30c00:	0001883a 	nop
   30c04:	e037883a 	mov	sp,fp
   30c08:	df000017 	ldw	fp,0(sp)
   30c0c:	dec00104 	addi	sp,sp,4
   30c10:	f800283a 	ret

00030c14 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   30c14:	defffd04 	addi	sp,sp,-12
   30c18:	df000215 	stw	fp,8(sp)
   30c1c:	df000204 	addi	fp,sp,8
   30c20:	e13ffe15 	stw	r4,-8(fp)
   30c24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30c28:	00000506 	br	30c40 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   30c2c:	e0bfff17 	ldw	r2,-4(fp)
   30c30:	1090000c 	andi	r2,r2,16384
   30c34:	10000226 	beq	r2,zero,30c40 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   30c38:	00bffd44 	movi	r2,-11
   30c3c:	00000606 	br	30c58 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30c40:	e0bffe17 	ldw	r2,-8(fp)
   30c44:	10c00417 	ldw	r3,16(r2)
   30c48:	e0bffe17 	ldw	r2,-8(fp)
   30c4c:	10800517 	ldw	r2,20(r2)
   30c50:	18bff61e 	bne	r3,r2,30c2c <__alt_data_end+0xffff0c2c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30c54:	0005883a 	mov	r2,zero
}
   30c58:	e037883a 	mov	sp,fp
   30c5c:	df000017 	ldw	fp,0(sp)
   30c60:	dec00104 	addi	sp,sp,4
   30c64:	f800283a 	ret

00030c68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30c68:	defffe04 	addi	sp,sp,-8
   30c6c:	dfc00115 	stw	ra,4(sp)
   30c70:	df000015 	stw	fp,0(sp)
   30c74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30c78:	d0a00b17 	ldw	r2,-32724(gp)
   30c7c:	10000326 	beq	r2,zero,30c8c <alt_get_errno+0x24>
   30c80:	d0a00b17 	ldw	r2,-32724(gp)
   30c84:	103ee83a 	callr	r2
   30c88:	00000106 	br	30c90 <alt_get_errno+0x28>
   30c8c:	d0a71504 	addi	r2,gp,-25516
}
   30c90:	e037883a 	mov	sp,fp
   30c94:	dfc00117 	ldw	ra,4(sp)
   30c98:	df000017 	ldw	fp,0(sp)
   30c9c:	dec00204 	addi	sp,sp,8
   30ca0:	f800283a 	ret

00030ca4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   30ca4:	defff204 	addi	sp,sp,-56
   30ca8:	dfc00d15 	stw	ra,52(sp)
   30cac:	df000c15 	stw	fp,48(sp)
   30cb0:	df000c04 	addi	fp,sp,48
   30cb4:	e13ffc15 	stw	r4,-16(fp)
   30cb8:	e17ffd15 	stw	r5,-12(fp)
   30cbc:	e1bffe15 	stw	r6,-8(fp)
   30cc0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   30cc4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   30cc8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   30ccc:	e0bfff17 	ldw	r2,-4(fp)
   30cd0:	1090000c 	andi	r2,r2,16384
   30cd4:	1005003a 	cmpeq	r2,r2,zero
   30cd8:	10803fcc 	andi	r2,r2,255
   30cdc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30ce0:	00001306 	br	30d30 <altera_avalon_uart_read+0x8c>
    {
      count++;
   30ce4:	e0bff517 	ldw	r2,-44(fp)
   30ce8:	10800044 	addi	r2,r2,1
   30cec:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   30cf0:	e0bffd17 	ldw	r2,-12(fp)
   30cf4:	10c00044 	addi	r3,r2,1
   30cf8:	e0fffd15 	stw	r3,-12(fp)
   30cfc:	e0fffc17 	ldw	r3,-16(fp)
   30d00:	18c00217 	ldw	r3,8(r3)
   30d04:	e13ffc17 	ldw	r4,-16(fp)
   30d08:	20c7883a 	add	r3,r4,r3
   30d0c:	18c00704 	addi	r3,r3,28
   30d10:	18c00003 	ldbu	r3,0(r3)
   30d14:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   30d18:	e0bffc17 	ldw	r2,-16(fp)
   30d1c:	10800217 	ldw	r2,8(r2)
   30d20:	10800044 	addi	r2,r2,1
   30d24:	10c00fcc 	andi	r3,r2,63
   30d28:	e0bffc17 	ldw	r2,-16(fp)
   30d2c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30d30:	e0fff517 	ldw	r3,-44(fp)
   30d34:	e0bffe17 	ldw	r2,-8(fp)
   30d38:	1880050e 	bge	r3,r2,30d50 <altera_avalon_uart_read+0xac>
   30d3c:	e0bffc17 	ldw	r2,-16(fp)
   30d40:	10c00217 	ldw	r3,8(r2)
   30d44:	e0bffc17 	ldw	r2,-16(fp)
   30d48:	10800317 	ldw	r2,12(r2)
   30d4c:	18bfe51e 	bne	r3,r2,30ce4 <__alt_data_end+0xffff0ce4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   30d50:	e0bff517 	ldw	r2,-44(fp)
   30d54:	1000251e 	bne	r2,zero,30dec <altera_avalon_uart_read+0x148>
   30d58:	e0bffc17 	ldw	r2,-16(fp)
   30d5c:	10c00217 	ldw	r3,8(r2)
   30d60:	e0bffc17 	ldw	r2,-16(fp)
   30d64:	10800317 	ldw	r2,12(r2)
   30d68:	1880201e 	bne	r3,r2,30dec <altera_avalon_uart_read+0x148>
    {
      if (!block)
   30d6c:	e0bff617 	ldw	r2,-40(fp)
   30d70:	1000071e 	bne	r2,zero,30d90 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   30d74:	0030c680 	call	30c68 <alt_get_errno>
   30d78:	1007883a 	mov	r3,r2
   30d7c:	008002c4 	movi	r2,11
   30d80:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   30d84:	00800044 	movi	r2,1
   30d88:	e0bff405 	stb	r2,-48(fp)
        break;
   30d8c:	00001b06 	br	30dfc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30d90:	0005303a 	rdctl	r2,status
   30d94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30d98:	e0fff917 	ldw	r3,-28(fp)
   30d9c:	00bfff84 	movi	r2,-2
   30da0:	1884703a 	and	r2,r3,r2
   30da4:	1001703a 	wrctl	status,r2
  
  return context;
   30da8:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   30dac:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30db0:	e0bffc17 	ldw	r2,-16(fp)
   30db4:	10800117 	ldw	r2,4(r2)
   30db8:	10c02014 	ori	r3,r2,128
   30dbc:	e0bffc17 	ldw	r2,-16(fp)
   30dc0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30dc4:	e0bffc17 	ldw	r2,-16(fp)
   30dc8:	10800017 	ldw	r2,0(r2)
   30dcc:	10800304 	addi	r2,r2,12
   30dd0:	e0fffc17 	ldw	r3,-16(fp)
   30dd4:	18c00117 	ldw	r3,4(r3)
   30dd8:	10c00035 	stwio	r3,0(r2)
   30ddc:	e0bff817 	ldw	r2,-32(fp)
   30de0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30de4:	e0bffa17 	ldw	r2,-24(fp)
   30de8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   30dec:	e0bff517 	ldw	r2,-44(fp)
   30df0:	1000021e 	bne	r2,zero,30dfc <altera_avalon_uart_read+0x158>
   30df4:	e0bffe17 	ldw	r2,-8(fp)
   30df8:	103fcd1e 	bne	r2,zero,30d30 <__alt_data_end+0xffff0d30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30dfc:	0005303a 	rdctl	r2,status
   30e00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30e04:	e0fffb17 	ldw	r3,-20(fp)
   30e08:	00bfff84 	movi	r2,-2
   30e0c:	1884703a 	and	r2,r3,r2
   30e10:	1001703a 	wrctl	status,r2
  
  return context;
   30e14:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   30e18:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30e1c:	e0bffc17 	ldw	r2,-16(fp)
   30e20:	10800117 	ldw	r2,4(r2)
   30e24:	10c02014 	ori	r3,r2,128
   30e28:	e0bffc17 	ldw	r2,-16(fp)
   30e2c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30e30:	e0bffc17 	ldw	r2,-16(fp)
   30e34:	10800017 	ldw	r2,0(r2)
   30e38:	10800304 	addi	r2,r2,12
   30e3c:	e0fffc17 	ldw	r3,-16(fp)
   30e40:	18c00117 	ldw	r3,4(r3)
   30e44:	10c00035 	stwio	r3,0(r2)
   30e48:	e0bff817 	ldw	r2,-32(fp)
   30e4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30e50:	e0bff717 	ldw	r2,-36(fp)
   30e54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   30e58:	e0bff403 	ldbu	r2,-48(fp)
   30e5c:	10000226 	beq	r2,zero,30e68 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   30e60:	00bffd44 	movi	r2,-11
   30e64:	00000106 	br	30e6c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   30e68:	e0bff517 	ldw	r2,-44(fp)
  }
}
   30e6c:	e037883a 	mov	sp,fp
   30e70:	dfc00117 	ldw	ra,4(sp)
   30e74:	df000017 	ldw	fp,0(sp)
   30e78:	dec00204 	addi	sp,sp,8
   30e7c:	f800283a 	ret

00030e80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30e80:	defffe04 	addi	sp,sp,-8
   30e84:	dfc00115 	stw	ra,4(sp)
   30e88:	df000015 	stw	fp,0(sp)
   30e8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30e90:	d0a00b17 	ldw	r2,-32724(gp)
   30e94:	10000326 	beq	r2,zero,30ea4 <alt_get_errno+0x24>
   30e98:	d0a00b17 	ldw	r2,-32724(gp)
   30e9c:	103ee83a 	callr	r2
   30ea0:	00000106 	br	30ea8 <alt_get_errno+0x28>
   30ea4:	d0a71504 	addi	r2,gp,-25516
}
   30ea8:	e037883a 	mov	sp,fp
   30eac:	dfc00117 	ldw	ra,4(sp)
   30eb0:	df000017 	ldw	fp,0(sp)
   30eb4:	dec00204 	addi	sp,sp,8
   30eb8:	f800283a 	ret

00030ebc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   30ebc:	defff204 	addi	sp,sp,-56
   30ec0:	dfc00d15 	stw	ra,52(sp)
   30ec4:	df000c15 	stw	fp,48(sp)
   30ec8:	df000c04 	addi	fp,sp,48
   30ecc:	e13ffc15 	stw	r4,-16(fp)
   30ed0:	e17ffd15 	stw	r5,-12(fp)
   30ed4:	e1bffe15 	stw	r6,-8(fp)
   30ed8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   30edc:	e0bffe17 	ldw	r2,-8(fp)
   30ee0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   30ee4:	e0bfff17 	ldw	r2,-4(fp)
   30ee8:	1090000c 	andi	r2,r2,16384
   30eec:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   30ef0:	00003c06 	br	30fe4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30ef4:	e0bffc17 	ldw	r2,-16(fp)
   30ef8:	10800517 	ldw	r2,20(r2)
   30efc:	10800044 	addi	r2,r2,1
   30f00:	10800fcc 	andi	r2,r2,63
   30f04:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   30f08:	e0bffc17 	ldw	r2,-16(fp)
   30f0c:	10c00417 	ldw	r3,16(r2)
   30f10:	e0bff717 	ldw	r2,-36(fp)
   30f14:	1880221e 	bne	r3,r2,30fa0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   30f18:	e0bff517 	ldw	r2,-44(fp)
   30f1c:	10000526 	beq	r2,zero,30f34 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   30f20:	0030e800 	call	30e80 <alt_get_errno>
   30f24:	1007883a 	mov	r3,r2
   30f28:	008002c4 	movi	r2,11
   30f2c:	18800015 	stw	r2,0(r3)
        break;
   30f30:	00002e06 	br	30fec <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30f34:	0005303a 	rdctl	r2,status
   30f38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30f3c:	e0fff917 	ldw	r3,-28(fp)
   30f40:	00bfff84 	movi	r2,-2
   30f44:	1884703a 	and	r2,r3,r2
   30f48:	1001703a 	wrctl	status,r2
  
  return context;
   30f4c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   30f50:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30f54:	e0bffc17 	ldw	r2,-16(fp)
   30f58:	10800117 	ldw	r2,4(r2)
   30f5c:	10c11014 	ori	r3,r2,1088
   30f60:	e0bffc17 	ldw	r2,-16(fp)
   30f64:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30f68:	e0bffc17 	ldw	r2,-16(fp)
   30f6c:	10800017 	ldw	r2,0(r2)
   30f70:	10800304 	addi	r2,r2,12
   30f74:	e0fffc17 	ldw	r3,-16(fp)
   30f78:	18c00117 	ldw	r3,4(r3)
   30f7c:	10c00035 	stwio	r3,0(r2)
   30f80:	e0bff817 	ldw	r2,-32(fp)
   30f84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30f88:	e0bff617 	ldw	r2,-40(fp)
   30f8c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   30f90:	e0bffc17 	ldw	r2,-16(fp)
   30f94:	10c00417 	ldw	r3,16(r2)
   30f98:	e0bff717 	ldw	r2,-36(fp)
   30f9c:	18bffc26 	beq	r3,r2,30f90 <__alt_data_end+0xffff0f90>
      }
    }

    count--;
   30fa0:	e0bff417 	ldw	r2,-48(fp)
   30fa4:	10bfffc4 	addi	r2,r2,-1
   30fa8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   30fac:	e0bffc17 	ldw	r2,-16(fp)
   30fb0:	10c00517 	ldw	r3,20(r2)
   30fb4:	e0bffd17 	ldw	r2,-12(fp)
   30fb8:	11000044 	addi	r4,r2,1
   30fbc:	e13ffd15 	stw	r4,-12(fp)
   30fc0:	10800003 	ldbu	r2,0(r2)
   30fc4:	1009883a 	mov	r4,r2
   30fc8:	e0bffc17 	ldw	r2,-16(fp)
   30fcc:	10c5883a 	add	r2,r2,r3
   30fd0:	10801704 	addi	r2,r2,92
   30fd4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   30fd8:	e0bffc17 	ldw	r2,-16(fp)
   30fdc:	e0fff717 	ldw	r3,-36(fp)
   30fe0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   30fe4:	e0bff417 	ldw	r2,-48(fp)
   30fe8:	103fc21e 	bne	r2,zero,30ef4 <__alt_data_end+0xffff0ef4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30fec:	0005303a 	rdctl	r2,status
   30ff0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30ff4:	e0fffb17 	ldw	r3,-20(fp)
   30ff8:	00bfff84 	movi	r2,-2
   30ffc:	1884703a 	and	r2,r3,r2
   31000:	1001703a 	wrctl	status,r2
  
  return context;
   31004:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   31008:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   3100c:	e0bffc17 	ldw	r2,-16(fp)
   31010:	10800117 	ldw	r2,4(r2)
   31014:	10c11014 	ori	r3,r2,1088
   31018:	e0bffc17 	ldw	r2,-16(fp)
   3101c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31020:	e0bffc17 	ldw	r2,-16(fp)
   31024:	10800017 	ldw	r2,0(r2)
   31028:	10800304 	addi	r2,r2,12
   3102c:	e0fffc17 	ldw	r3,-16(fp)
   31030:	18c00117 	ldw	r3,4(r3)
   31034:	10c00035 	stwio	r3,0(r2)
   31038:	e0bff817 	ldw	r2,-32(fp)
   3103c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31040:	e0bffa17 	ldw	r2,-24(fp)
   31044:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   31048:	e0fffe17 	ldw	r3,-8(fp)
   3104c:	e0bff417 	ldw	r2,-48(fp)
   31050:	1885c83a 	sub	r2,r3,r2
}
   31054:	e037883a 	mov	sp,fp
   31058:	dfc00117 	ldw	ra,4(sp)
   3105c:	df000017 	ldw	fp,0(sp)
   31060:	dec00204 	addi	sp,sp,8
   31064:	f800283a 	ret

00031068 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   31068:	defff504 	addi	sp,sp,-44
   3106c:	df000a15 	stw	fp,40(sp)
   31070:	df000a04 	addi	fp,sp,40
   31074:	e13ffc15 	stw	r4,-16(fp)
   31078:	e17ffd15 	stw	r5,-12(fp)
   3107c:	e1bffe15 	stw	r6,-8(fp)
   31080:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   31084:	e03ff615 	stw	zero,-40(fp)
   31088:	d0a71a17 	ldw	r2,-25496(gp)
  
  if (alt_ticks_per_second ())
   3108c:	10003c26 	beq	r2,zero,31180 <alt_alarm_start+0x118>
  {
    if (alarm)
   31090:	e0bffc17 	ldw	r2,-16(fp)
   31094:	10003826 	beq	r2,zero,31178 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   31098:	e0bffc17 	ldw	r2,-16(fp)
   3109c:	e0fffe17 	ldw	r3,-8(fp)
   310a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   310a4:	e0bffc17 	ldw	r2,-16(fp)
   310a8:	e0ffff17 	ldw	r3,-4(fp)
   310ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   310b0:	0005303a 	rdctl	r2,status
   310b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   310b8:	e0fff917 	ldw	r3,-28(fp)
   310bc:	00bfff84 	movi	r2,-2
   310c0:	1884703a 	and	r2,r3,r2
   310c4:	1001703a 	wrctl	status,r2
  
  return context;
   310c8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   310cc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   310d0:	d0a71b17 	ldw	r2,-25492(gp)
      
      current_nticks = alt_nticks();
   310d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   310d8:	e0fffd17 	ldw	r3,-12(fp)
   310dc:	e0bff617 	ldw	r2,-40(fp)
   310e0:	1885883a 	add	r2,r3,r2
   310e4:	10c00044 	addi	r3,r2,1
   310e8:	e0bffc17 	ldw	r2,-16(fp)
   310ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   310f0:	e0bffc17 	ldw	r2,-16(fp)
   310f4:	10c00217 	ldw	r3,8(r2)
   310f8:	e0bff617 	ldw	r2,-40(fp)
   310fc:	1880042e 	bgeu	r3,r2,31110 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   31100:	e0bffc17 	ldw	r2,-16(fp)
   31104:	00c00044 	movi	r3,1
   31108:	10c00405 	stb	r3,16(r2)
   3110c:	00000206 	br	31118 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   31110:	e0bffc17 	ldw	r2,-16(fp)
   31114:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   31118:	e0bffc17 	ldw	r2,-16(fp)
   3111c:	d0e01004 	addi	r3,gp,-32704
   31120:	e0fffa15 	stw	r3,-24(fp)
   31124:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   31128:	e0bffb17 	ldw	r2,-20(fp)
   3112c:	e0fffa17 	ldw	r3,-24(fp)
   31130:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   31134:	e0bffa17 	ldw	r2,-24(fp)
   31138:	10c00017 	ldw	r3,0(r2)
   3113c:	e0bffb17 	ldw	r2,-20(fp)
   31140:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   31144:	e0bffa17 	ldw	r2,-24(fp)
   31148:	10800017 	ldw	r2,0(r2)
   3114c:	e0fffb17 	ldw	r3,-20(fp)
   31150:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   31154:	e0bffa17 	ldw	r2,-24(fp)
   31158:	e0fffb17 	ldw	r3,-20(fp)
   3115c:	10c00015 	stw	r3,0(r2)
   31160:	e0bff817 	ldw	r2,-32(fp)
   31164:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31168:	e0bff717 	ldw	r2,-36(fp)
   3116c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   31170:	0005883a 	mov	r2,zero
   31174:	00000306 	br	31184 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   31178:	00bffa84 	movi	r2,-22
   3117c:	00000106 	br	31184 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   31180:	00bfde84 	movi	r2,-134
  }
}
   31184:	e037883a 	mov	sp,fp
   31188:	df000017 	ldw	fp,0(sp)
   3118c:	dec00104 	addi	sp,sp,4
   31190:	f800283a 	ret

00031194 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   31194:	defffa04 	addi	sp,sp,-24
   31198:	dfc00515 	stw	ra,20(sp)
   3119c:	df000415 	stw	fp,16(sp)
   311a0:	df000404 	addi	fp,sp,16
   311a4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   311a8:	00800244 	movi	r2,9
   311ac:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   311b0:	014003f4 	movhi	r5,15
   311b4:	29509004 	addi	r5,r5,16960
   311b8:	e13ffd17 	ldw	r4,-12(fp)
   311bc:	002ad9c0 	call	2ad9c <__mulsi3>
   311c0:	100b883a 	mov	r5,r2
   311c4:	0100bef4 	movhi	r4,763
   311c8:	213c2004 	addi	r4,r4,-3968
   311cc:	002ace00 	call	2ace0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   311d0:	100b883a 	mov	r5,r2
   311d4:	01200034 	movhi	r4,32768
   311d8:	213fffc4 	addi	r4,r4,-1
   311dc:	002ace00 	call	2ace0 <__udivsi3>
   311e0:	100b883a 	mov	r5,r2
   311e4:	e13fff17 	ldw	r4,-4(fp)
   311e8:	002ace00 	call	2ace0 <__udivsi3>
   311ec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   311f0:	e0bffe17 	ldw	r2,-8(fp)
   311f4:	10002a26 	beq	r2,zero,312a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   311f8:	e03ffc15 	stw	zero,-16(fp)
   311fc:	00001706 	br	3125c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   31200:	00a00034 	movhi	r2,32768
   31204:	10bfffc4 	addi	r2,r2,-1
   31208:	10bfffc4 	addi	r2,r2,-1
   3120c:	103ffe1e 	bne	r2,zero,31208 <__alt_data_end+0xffff1208>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   31210:	014003f4 	movhi	r5,15
   31214:	29509004 	addi	r5,r5,16960
   31218:	e13ffd17 	ldw	r4,-12(fp)
   3121c:	002ad9c0 	call	2ad9c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   31220:	100b883a 	mov	r5,r2
   31224:	0100bef4 	movhi	r4,763
   31228:	213c2004 	addi	r4,r4,-3968
   3122c:	002ace00 	call	2ace0 <__udivsi3>
   31230:	100b883a 	mov	r5,r2
   31234:	01200034 	movhi	r4,32768
   31238:	213fffc4 	addi	r4,r4,-1
   3123c:	002ace00 	call	2ace0 <__udivsi3>
   31240:	1007883a 	mov	r3,r2
   31244:	e0bfff17 	ldw	r2,-4(fp)
   31248:	10c5c83a 	sub	r2,r2,r3
   3124c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   31250:	e0bffc17 	ldw	r2,-16(fp)
   31254:	10800044 	addi	r2,r2,1
   31258:	e0bffc15 	stw	r2,-16(fp)
   3125c:	e0fffc17 	ldw	r3,-16(fp)
   31260:	e0bffe17 	ldw	r2,-8(fp)
   31264:	18bfe616 	blt	r3,r2,31200 <__alt_data_end+0xffff1200>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   31268:	014003f4 	movhi	r5,15
   3126c:	29509004 	addi	r5,r5,16960
   31270:	e13ffd17 	ldw	r4,-12(fp)
   31274:	002ad9c0 	call	2ad9c <__mulsi3>
   31278:	100b883a 	mov	r5,r2
   3127c:	0100bef4 	movhi	r4,763
   31280:	213c2004 	addi	r4,r4,-3968
   31284:	002ace00 	call	2ace0 <__udivsi3>
   31288:	e17fff17 	ldw	r5,-4(fp)
   3128c:	1009883a 	mov	r4,r2
   31290:	002ad9c0 	call	2ad9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   31294:	10bfffc4 	addi	r2,r2,-1
   31298:	103ffe1e 	bne	r2,zero,31294 <__alt_data_end+0xffff1294>
   3129c:	00000d06 	br	312d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   312a0:	014003f4 	movhi	r5,15
   312a4:	29509004 	addi	r5,r5,16960
   312a8:	e13ffd17 	ldw	r4,-12(fp)
   312ac:	002ad9c0 	call	2ad9c <__mulsi3>
   312b0:	100b883a 	mov	r5,r2
   312b4:	0100bef4 	movhi	r4,763
   312b8:	213c2004 	addi	r4,r4,-3968
   312bc:	002ace00 	call	2ace0 <__udivsi3>
   312c0:	e17fff17 	ldw	r5,-4(fp)
   312c4:	1009883a 	mov	r4,r2
   312c8:	002ad9c0 	call	2ad9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   312cc:	10bfffc4 	addi	r2,r2,-1
   312d0:	00bffe16 	blt	zero,r2,312cc <__alt_data_end+0xffff12cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   312d4:	0005883a 	mov	r2,zero
}
   312d8:	e037883a 	mov	sp,fp
   312dc:	dfc00117 	ldw	ra,4(sp)
   312e0:	df000017 	ldw	fp,0(sp)
   312e4:	dec00204 	addi	sp,sp,8
   312e8:	f800283a 	ret

000312ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   312ec:	deffff04 	addi	sp,sp,-4
   312f0:	df000015 	stw	fp,0(sp)
   312f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   312f8:	0001883a 	nop
   312fc:	e037883a 	mov	sp,fp
   31300:	df000017 	ldw	fp,0(sp)
   31304:	dec00104 	addi	sp,sp,4
   31308:	f800283a 	ret

0003130c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3130c:	defffe04 	addi	sp,sp,-8
   31310:	dfc00115 	stw	ra,4(sp)
   31314:	df000015 	stw	fp,0(sp)
   31318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3131c:	d0a00b17 	ldw	r2,-32724(gp)
   31320:	10000326 	beq	r2,zero,31330 <alt_get_errno+0x24>
   31324:	d0a00b17 	ldw	r2,-32724(gp)
   31328:	103ee83a 	callr	r2
   3132c:	00000106 	br	31334 <alt_get_errno+0x28>
   31330:	d0a71504 	addi	r2,gp,-25516
}
   31334:	e037883a 	mov	sp,fp
   31338:	dfc00117 	ldw	ra,4(sp)
   3133c:	df000017 	ldw	fp,0(sp)
   31340:	dec00204 	addi	sp,sp,8
   31344:	f800283a 	ret

00031348 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   31348:	defffa04 	addi	sp,sp,-24
   3134c:	dfc00515 	stw	ra,20(sp)
   31350:	df000415 	stw	fp,16(sp)
   31354:	df000404 	addi	fp,sp,16
   31358:	e13ffe15 	stw	r4,-8(fp)
   3135c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   31360:	e0bffe17 	ldw	r2,-8(fp)
   31364:	10000326 	beq	r2,zero,31374 <alt_dev_llist_insert+0x2c>
   31368:	e0bffe17 	ldw	r2,-8(fp)
   3136c:	10800217 	ldw	r2,8(r2)
   31370:	1000061e 	bne	r2,zero,3138c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   31374:	003130c0 	call	3130c <alt_get_errno>
   31378:	1007883a 	mov	r3,r2
   3137c:	00800584 	movi	r2,22
   31380:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   31384:	00bffa84 	movi	r2,-22
   31388:	00001306 	br	313d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   3138c:	e0bffe17 	ldw	r2,-8(fp)
   31390:	e0ffff17 	ldw	r3,-4(fp)
   31394:	e0fffc15 	stw	r3,-16(fp)
   31398:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3139c:	e0bffd17 	ldw	r2,-12(fp)
   313a0:	e0fffc17 	ldw	r3,-16(fp)
   313a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   313a8:	e0bffc17 	ldw	r2,-16(fp)
   313ac:	10c00017 	ldw	r3,0(r2)
   313b0:	e0bffd17 	ldw	r2,-12(fp)
   313b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   313b8:	e0bffc17 	ldw	r2,-16(fp)
   313bc:	10800017 	ldw	r2,0(r2)
   313c0:	e0fffd17 	ldw	r3,-12(fp)
   313c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   313c8:	e0bffc17 	ldw	r2,-16(fp)
   313cc:	e0fffd17 	ldw	r3,-12(fp)
   313d0:	10c00015 	stw	r3,0(r2)

  return 0;  
   313d4:	0005883a 	mov	r2,zero
}
   313d8:	e037883a 	mov	sp,fp
   313dc:	dfc00117 	ldw	ra,4(sp)
   313e0:	df000017 	ldw	fp,0(sp)
   313e4:	dec00204 	addi	sp,sp,8
   313e8:	f800283a 	ret

000313ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   313ec:	defffd04 	addi	sp,sp,-12
   313f0:	dfc00215 	stw	ra,8(sp)
   313f4:	df000115 	stw	fp,4(sp)
   313f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   313fc:	008000f4 	movhi	r2,3
   31400:	10898204 	addi	r2,r2,9736
   31404:	e0bfff15 	stw	r2,-4(fp)
   31408:	00000606 	br	31424 <_do_ctors+0x38>
        (*ctor) (); 
   3140c:	e0bfff17 	ldw	r2,-4(fp)
   31410:	10800017 	ldw	r2,0(r2)
   31414:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31418:	e0bfff17 	ldw	r2,-4(fp)
   3141c:	10bfff04 	addi	r2,r2,-4
   31420:	e0bfff15 	stw	r2,-4(fp)
   31424:	e0ffff17 	ldw	r3,-4(fp)
   31428:	008000f4 	movhi	r2,3
   3142c:	10898304 	addi	r2,r2,9740
   31430:	18bff62e 	bgeu	r3,r2,3140c <__alt_data_end+0xffff140c>
        (*ctor) (); 
}
   31434:	0001883a 	nop
   31438:	e037883a 	mov	sp,fp
   3143c:	dfc00117 	ldw	ra,4(sp)
   31440:	df000017 	ldw	fp,0(sp)
   31444:	dec00204 	addi	sp,sp,8
   31448:	f800283a 	ret

0003144c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3144c:	defffd04 	addi	sp,sp,-12
   31450:	dfc00215 	stw	ra,8(sp)
   31454:	df000115 	stw	fp,4(sp)
   31458:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3145c:	008000f4 	movhi	r2,3
   31460:	10898204 	addi	r2,r2,9736
   31464:	e0bfff15 	stw	r2,-4(fp)
   31468:	00000606 	br	31484 <_do_dtors+0x38>
        (*dtor) (); 
   3146c:	e0bfff17 	ldw	r2,-4(fp)
   31470:	10800017 	ldw	r2,0(r2)
   31474:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31478:	e0bfff17 	ldw	r2,-4(fp)
   3147c:	10bfff04 	addi	r2,r2,-4
   31480:	e0bfff15 	stw	r2,-4(fp)
   31484:	e0ffff17 	ldw	r3,-4(fp)
   31488:	008000f4 	movhi	r2,3
   3148c:	10898304 	addi	r2,r2,9740
   31490:	18bff62e 	bgeu	r3,r2,3146c <__alt_data_end+0xffff146c>
        (*dtor) (); 
}
   31494:	0001883a 	nop
   31498:	e037883a 	mov	sp,fp
   3149c:	dfc00117 	ldw	ra,4(sp)
   314a0:	df000017 	ldw	fp,0(sp)
   314a4:	dec00204 	addi	sp,sp,8
   314a8:	f800283a 	ret

000314ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   314ac:	defffa04 	addi	sp,sp,-24
   314b0:	dfc00515 	stw	ra,20(sp)
   314b4:	df000415 	stw	fp,16(sp)
   314b8:	df000404 	addi	fp,sp,16
   314bc:	e13ffe15 	stw	r4,-8(fp)
   314c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   314c4:	e0bfff17 	ldw	r2,-4(fp)
   314c8:	10800017 	ldw	r2,0(r2)
   314cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   314d0:	e13ffe17 	ldw	r4,-8(fp)
   314d4:	00207000 	call	20700 <strlen>
   314d8:	10800044 	addi	r2,r2,1
   314dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   314e0:	00000d06 	br	31518 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   314e4:	e0bffc17 	ldw	r2,-16(fp)
   314e8:	10800217 	ldw	r2,8(r2)
   314ec:	e0fffd17 	ldw	r3,-12(fp)
   314f0:	180d883a 	mov	r6,r3
   314f4:	e17ffe17 	ldw	r5,-8(fp)
   314f8:	1009883a 	mov	r4,r2
   314fc:	00322c40 	call	322c4 <memcmp>
   31500:	1000021e 	bne	r2,zero,3150c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   31504:	e0bffc17 	ldw	r2,-16(fp)
   31508:	00000706 	br	31528 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   3150c:	e0bffc17 	ldw	r2,-16(fp)
   31510:	10800017 	ldw	r2,0(r2)
   31514:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   31518:	e0fffc17 	ldw	r3,-16(fp)
   3151c:	e0bfff17 	ldw	r2,-4(fp)
   31520:	18bff01e 	bne	r3,r2,314e4 <__alt_data_end+0xffff14e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   31524:	0005883a 	mov	r2,zero
}
   31528:	e037883a 	mov	sp,fp
   3152c:	dfc00117 	ldw	ra,4(sp)
   31530:	df000017 	ldw	fp,0(sp)
   31534:	dec00204 	addi	sp,sp,8
   31538:	f800283a 	ret

0003153c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   3153c:	deffff04 	addi	sp,sp,-4
   31540:	df000015 	stw	fp,0(sp)
   31544:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   31548:	0001883a 	nop
   3154c:	e037883a 	mov	sp,fp
   31550:	df000017 	ldw	fp,0(sp)
   31554:	dec00104 	addi	sp,sp,4
   31558:	f800283a 	ret

0003155c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3155c:	defff904 	addi	sp,sp,-28
   31560:	dfc00615 	stw	ra,24(sp)
   31564:	df000515 	stw	fp,20(sp)
   31568:	df000504 	addi	fp,sp,20
   3156c:	e13ffc15 	stw	r4,-16(fp)
   31570:	e17ffd15 	stw	r5,-12(fp)
   31574:	e1bffe15 	stw	r6,-8(fp)
   31578:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   3157c:	e0800217 	ldw	r2,8(fp)
   31580:	d8800015 	stw	r2,0(sp)
   31584:	e1ffff17 	ldw	r7,-4(fp)
   31588:	e1bffe17 	ldw	r6,-8(fp)
   3158c:	e17ffd17 	ldw	r5,-12(fp)
   31590:	e13ffc17 	ldw	r4,-16(fp)
   31594:	003170c0 	call	3170c <alt_iic_isr_register>
}  
   31598:	e037883a 	mov	sp,fp
   3159c:	dfc00117 	ldw	ra,4(sp)
   315a0:	df000017 	ldw	fp,0(sp)
   315a4:	dec00204 	addi	sp,sp,8
   315a8:	f800283a 	ret

000315ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   315ac:	defff904 	addi	sp,sp,-28
   315b0:	df000615 	stw	fp,24(sp)
   315b4:	df000604 	addi	fp,sp,24
   315b8:	e13ffe15 	stw	r4,-8(fp)
   315bc:	e17fff15 	stw	r5,-4(fp)
   315c0:	e0bfff17 	ldw	r2,-4(fp)
   315c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   315c8:	0005303a 	rdctl	r2,status
   315cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   315d0:	e0fffb17 	ldw	r3,-20(fp)
   315d4:	00bfff84 	movi	r2,-2
   315d8:	1884703a 	and	r2,r3,r2
   315dc:	1001703a 	wrctl	status,r2
  
  return context;
   315e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   315e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   315e8:	00c00044 	movi	r3,1
   315ec:	e0bffa17 	ldw	r2,-24(fp)
   315f0:	1884983a 	sll	r2,r3,r2
   315f4:	1007883a 	mov	r3,r2
   315f8:	d0a71917 	ldw	r2,-25500(gp)
   315fc:	1884b03a 	or	r2,r3,r2
   31600:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   31604:	d0a71917 	ldw	r2,-25500(gp)
   31608:	100170fa 	wrctl	ienable,r2
   3160c:	e0bffc17 	ldw	r2,-16(fp)
   31610:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31614:	e0bffd17 	ldw	r2,-12(fp)
   31618:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3161c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   31620:	0001883a 	nop
}
   31624:	e037883a 	mov	sp,fp
   31628:	df000017 	ldw	fp,0(sp)
   3162c:	dec00104 	addi	sp,sp,4
   31630:	f800283a 	ret

00031634 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   31634:	defff904 	addi	sp,sp,-28
   31638:	df000615 	stw	fp,24(sp)
   3163c:	df000604 	addi	fp,sp,24
   31640:	e13ffe15 	stw	r4,-8(fp)
   31644:	e17fff15 	stw	r5,-4(fp)
   31648:	e0bfff17 	ldw	r2,-4(fp)
   3164c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31650:	0005303a 	rdctl	r2,status
   31654:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31658:	e0fffb17 	ldw	r3,-20(fp)
   3165c:	00bfff84 	movi	r2,-2
   31660:	1884703a 	and	r2,r3,r2
   31664:	1001703a 	wrctl	status,r2
  
  return context;
   31668:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   3166c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   31670:	00c00044 	movi	r3,1
   31674:	e0bffa17 	ldw	r2,-24(fp)
   31678:	1884983a 	sll	r2,r3,r2
   3167c:	0084303a 	nor	r2,zero,r2
   31680:	1007883a 	mov	r3,r2
   31684:	d0a71917 	ldw	r2,-25500(gp)
   31688:	1884703a 	and	r2,r3,r2
   3168c:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   31690:	d0a71917 	ldw	r2,-25500(gp)
   31694:	100170fa 	wrctl	ienable,r2
   31698:	e0bffc17 	ldw	r2,-16(fp)
   3169c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   316a0:	e0bffd17 	ldw	r2,-12(fp)
   316a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   316a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   316ac:	0001883a 	nop
}
   316b0:	e037883a 	mov	sp,fp
   316b4:	df000017 	ldw	fp,0(sp)
   316b8:	dec00104 	addi	sp,sp,4
   316bc:	f800283a 	ret

000316c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   316c0:	defffc04 	addi	sp,sp,-16
   316c4:	df000315 	stw	fp,12(sp)
   316c8:	df000304 	addi	fp,sp,12
   316cc:	e13ffe15 	stw	r4,-8(fp)
   316d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   316d4:	000530fa 	rdctl	r2,ienable
   316d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   316dc:	00c00044 	movi	r3,1
   316e0:	e0bfff17 	ldw	r2,-4(fp)
   316e4:	1884983a 	sll	r2,r3,r2
   316e8:	1007883a 	mov	r3,r2
   316ec:	e0bffd17 	ldw	r2,-12(fp)
   316f0:	1884703a 	and	r2,r3,r2
   316f4:	1004c03a 	cmpne	r2,r2,zero
   316f8:	10803fcc 	andi	r2,r2,255
}
   316fc:	e037883a 	mov	sp,fp
   31700:	df000017 	ldw	fp,0(sp)
   31704:	dec00104 	addi	sp,sp,4
   31708:	f800283a 	ret

0003170c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   3170c:	defff504 	addi	sp,sp,-44
   31710:	dfc00a15 	stw	ra,40(sp)
   31714:	df000915 	stw	fp,36(sp)
   31718:	df000904 	addi	fp,sp,36
   3171c:	e13ffc15 	stw	r4,-16(fp)
   31720:	e17ffd15 	stw	r5,-12(fp)
   31724:	e1bffe15 	stw	r6,-8(fp)
   31728:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   3172c:	00bffa84 	movi	r2,-22
   31730:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   31734:	e0bffd17 	ldw	r2,-12(fp)
   31738:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   3173c:	e0bff817 	ldw	r2,-32(fp)
   31740:	10800808 	cmpgei	r2,r2,32
   31744:	1000271e 	bne	r2,zero,317e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31748:	0005303a 	rdctl	r2,status
   3174c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31750:	e0fffb17 	ldw	r3,-20(fp)
   31754:	00bfff84 	movi	r2,-2
   31758:	1884703a 	and	r2,r3,r2
   3175c:	1001703a 	wrctl	status,r2
  
  return context;
   31760:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   31764:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   31768:	008000f4 	movhi	r2,3
   3176c:	10987504 	addi	r2,r2,25044
   31770:	e0fff817 	ldw	r3,-32(fp)
   31774:	180690fa 	slli	r3,r3,3
   31778:	10c5883a 	add	r2,r2,r3
   3177c:	e0fffe17 	ldw	r3,-8(fp)
   31780:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   31784:	008000f4 	movhi	r2,3
   31788:	10987504 	addi	r2,r2,25044
   3178c:	e0fff817 	ldw	r3,-32(fp)
   31790:	180690fa 	slli	r3,r3,3
   31794:	10c5883a 	add	r2,r2,r3
   31798:	10800104 	addi	r2,r2,4
   3179c:	e0ffff17 	ldw	r3,-4(fp)
   317a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   317a4:	e0bffe17 	ldw	r2,-8(fp)
   317a8:	10000526 	beq	r2,zero,317c0 <alt_iic_isr_register+0xb4>
   317ac:	e0bff817 	ldw	r2,-32(fp)
   317b0:	100b883a 	mov	r5,r2
   317b4:	e13ffc17 	ldw	r4,-16(fp)
   317b8:	00315ac0 	call	315ac <alt_ic_irq_enable>
   317bc:	00000406 	br	317d0 <alt_iic_isr_register+0xc4>
   317c0:	e0bff817 	ldw	r2,-32(fp)
   317c4:	100b883a 	mov	r5,r2
   317c8:	e13ffc17 	ldw	r4,-16(fp)
   317cc:	00316340 	call	31634 <alt_ic_irq_disable>
   317d0:	e0bff715 	stw	r2,-36(fp)
   317d4:	e0bffa17 	ldw	r2,-24(fp)
   317d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   317dc:	e0bff917 	ldw	r2,-28(fp)
   317e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   317e4:	e0bff717 	ldw	r2,-36(fp)
}
   317e8:	e037883a 	mov	sp,fp
   317ec:	dfc00117 	ldw	ra,4(sp)
   317f0:	df000017 	ldw	fp,0(sp)
   317f4:	dec00204 	addi	sp,sp,8
   317f8:	f800283a 	ret

000317fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   317fc:	defff804 	addi	sp,sp,-32
   31800:	dfc00715 	stw	ra,28(sp)
   31804:	df000615 	stw	fp,24(sp)
   31808:	dc000515 	stw	r16,20(sp)
   3180c:	df000604 	addi	fp,sp,24
   31810:	e13ffb15 	stw	r4,-20(fp)
   31814:	e17ffc15 	stw	r5,-16(fp)
   31818:	e1bffd15 	stw	r6,-12(fp)
   3181c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   31820:	e1bffe17 	ldw	r6,-8(fp)
   31824:	e17ffd17 	ldw	r5,-12(fp)
   31828:	e13ffc17 	ldw	r4,-16(fp)
   3182c:	0031a840 	call	31a84 <open>
   31830:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   31834:	e0bffa17 	ldw	r2,-24(fp)
   31838:	10002216 	blt	r2,zero,318c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   3183c:	040000f4 	movhi	r16,3
   31840:	840c9704 	addi	r16,r16,12892
   31844:	e0bffa17 	ldw	r2,-24(fp)
   31848:	01400304 	movi	r5,12
   3184c:	1009883a 	mov	r4,r2
   31850:	002ad9c0 	call	2ad9c <__mulsi3>
   31854:	8085883a 	add	r2,r16,r2
   31858:	10c00017 	ldw	r3,0(r2)
   3185c:	e0bffb17 	ldw	r2,-20(fp)
   31860:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   31864:	040000f4 	movhi	r16,3
   31868:	840c9704 	addi	r16,r16,12892
   3186c:	e0bffa17 	ldw	r2,-24(fp)
   31870:	01400304 	movi	r5,12
   31874:	1009883a 	mov	r4,r2
   31878:	002ad9c0 	call	2ad9c <__mulsi3>
   3187c:	8085883a 	add	r2,r16,r2
   31880:	10800104 	addi	r2,r2,4
   31884:	10c00017 	ldw	r3,0(r2)
   31888:	e0bffb17 	ldw	r2,-20(fp)
   3188c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31890:	040000f4 	movhi	r16,3
   31894:	840c9704 	addi	r16,r16,12892
   31898:	e0bffa17 	ldw	r2,-24(fp)
   3189c:	01400304 	movi	r5,12
   318a0:	1009883a 	mov	r4,r2
   318a4:	002ad9c0 	call	2ad9c <__mulsi3>
   318a8:	8085883a 	add	r2,r16,r2
   318ac:	10800204 	addi	r2,r2,8
   318b0:	10c00017 	ldw	r3,0(r2)
   318b4:	e0bffb17 	ldw	r2,-20(fp)
   318b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   318bc:	e13ffa17 	ldw	r4,-24(fp)
   318c0:	002dd8c0 	call	2dd8c <alt_release_fd>
  }
} 
   318c4:	0001883a 	nop
   318c8:	e6ffff04 	addi	sp,fp,-4
   318cc:	dfc00217 	ldw	ra,8(sp)
   318d0:	df000117 	ldw	fp,4(sp)
   318d4:	dc000017 	ldw	r16,0(sp)
   318d8:	dec00304 	addi	sp,sp,12
   318dc:	f800283a 	ret

000318e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   318e0:	defffb04 	addi	sp,sp,-20
   318e4:	dfc00415 	stw	ra,16(sp)
   318e8:	df000315 	stw	fp,12(sp)
   318ec:	df000304 	addi	fp,sp,12
   318f0:	e13ffd15 	stw	r4,-12(fp)
   318f4:	e17ffe15 	stw	r5,-8(fp)
   318f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   318fc:	01c07fc4 	movi	r7,511
   31900:	01800044 	movi	r6,1
   31904:	e17ffd17 	ldw	r5,-12(fp)
   31908:	010000f4 	movhi	r4,3
   3190c:	210c9a04 	addi	r4,r4,12904
   31910:	00317fc0 	call	317fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   31914:	01c07fc4 	movi	r7,511
   31918:	000d883a 	mov	r6,zero
   3191c:	e17ffe17 	ldw	r5,-8(fp)
   31920:	010000f4 	movhi	r4,3
   31924:	210c9704 	addi	r4,r4,12892
   31928:	00317fc0 	call	317fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   3192c:	01c07fc4 	movi	r7,511
   31930:	01800044 	movi	r6,1
   31934:	e17fff17 	ldw	r5,-4(fp)
   31938:	010000f4 	movhi	r4,3
   3193c:	210c9d04 	addi	r4,r4,12916
   31940:	00317fc0 	call	317fc <alt_open_fd>
}  
   31944:	0001883a 	nop
   31948:	e037883a 	mov	sp,fp
   3194c:	dfc00117 	ldw	ra,4(sp)
   31950:	df000017 	ldw	fp,0(sp)
   31954:	dec00204 	addi	sp,sp,8
   31958:	f800283a 	ret

0003195c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3195c:	defffe04 	addi	sp,sp,-8
   31960:	dfc00115 	stw	ra,4(sp)
   31964:	df000015 	stw	fp,0(sp)
   31968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3196c:	d0a00b17 	ldw	r2,-32724(gp)
   31970:	10000326 	beq	r2,zero,31980 <alt_get_errno+0x24>
   31974:	d0a00b17 	ldw	r2,-32724(gp)
   31978:	103ee83a 	callr	r2
   3197c:	00000106 	br	31984 <alt_get_errno+0x28>
   31980:	d0a71504 	addi	r2,gp,-25516
}
   31984:	e037883a 	mov	sp,fp
   31988:	dfc00117 	ldw	ra,4(sp)
   3198c:	df000017 	ldw	fp,0(sp)
   31990:	dec00204 	addi	sp,sp,8
   31994:	f800283a 	ret

00031998 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   31998:	defffb04 	addi	sp,sp,-20
   3199c:	dfc00415 	stw	ra,16(sp)
   319a0:	df000315 	stw	fp,12(sp)
   319a4:	dc000215 	stw	r16,8(sp)
   319a8:	df000304 	addi	fp,sp,12
   319ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   319b0:	e0bffe17 	ldw	r2,-8(fp)
   319b4:	10800217 	ldw	r2,8(r2)
   319b8:	10d00034 	orhi	r3,r2,16384
   319bc:	e0bffe17 	ldw	r2,-8(fp)
   319c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   319c4:	e03ffd15 	stw	zero,-12(fp)
   319c8:	00002306 	br	31a58 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   319cc:	040000f4 	movhi	r16,3
   319d0:	840c9704 	addi	r16,r16,12892
   319d4:	e0bffd17 	ldw	r2,-12(fp)
   319d8:	01400304 	movi	r5,12
   319dc:	1009883a 	mov	r4,r2
   319e0:	002ad9c0 	call	2ad9c <__mulsi3>
   319e4:	8085883a 	add	r2,r16,r2
   319e8:	10c00017 	ldw	r3,0(r2)
   319ec:	e0bffe17 	ldw	r2,-8(fp)
   319f0:	10800017 	ldw	r2,0(r2)
   319f4:	1880151e 	bne	r3,r2,31a4c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   319f8:	040000f4 	movhi	r16,3
   319fc:	840c9704 	addi	r16,r16,12892
   31a00:	e0bffd17 	ldw	r2,-12(fp)
   31a04:	01400304 	movi	r5,12
   31a08:	1009883a 	mov	r4,r2
   31a0c:	002ad9c0 	call	2ad9c <__mulsi3>
   31a10:	8085883a 	add	r2,r16,r2
   31a14:	10800204 	addi	r2,r2,8
   31a18:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31a1c:	10000b0e 	bge	r2,zero,31a4c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   31a20:	01400304 	movi	r5,12
   31a24:	e13ffd17 	ldw	r4,-12(fp)
   31a28:	002ad9c0 	call	2ad9c <__mulsi3>
   31a2c:	1007883a 	mov	r3,r2
   31a30:	008000f4 	movhi	r2,3
   31a34:	108c9704 	addi	r2,r2,12892
   31a38:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31a3c:	e0bffe17 	ldw	r2,-8(fp)
   31a40:	18800226 	beq	r3,r2,31a4c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   31a44:	00bffcc4 	movi	r2,-13
   31a48:	00000806 	br	31a6c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   31a4c:	e0bffd17 	ldw	r2,-12(fp)
   31a50:	10800044 	addi	r2,r2,1
   31a54:	e0bffd15 	stw	r2,-12(fp)
   31a58:	d0a00a17 	ldw	r2,-32728(gp)
   31a5c:	1007883a 	mov	r3,r2
   31a60:	e0bffd17 	ldw	r2,-12(fp)
   31a64:	18bfd92e 	bgeu	r3,r2,319cc <__alt_data_end+0xffff19cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   31a68:	0005883a 	mov	r2,zero
}
   31a6c:	e6ffff04 	addi	sp,fp,-4
   31a70:	dfc00217 	ldw	ra,8(sp)
   31a74:	df000117 	ldw	fp,4(sp)
   31a78:	dc000017 	ldw	r16,0(sp)
   31a7c:	dec00304 	addi	sp,sp,12
   31a80:	f800283a 	ret

00031a84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   31a84:	defff604 	addi	sp,sp,-40
   31a88:	dfc00915 	stw	ra,36(sp)
   31a8c:	df000815 	stw	fp,32(sp)
   31a90:	df000804 	addi	fp,sp,32
   31a94:	e13ffd15 	stw	r4,-12(fp)
   31a98:	e17ffe15 	stw	r5,-8(fp)
   31a9c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   31aa0:	00bfffc4 	movi	r2,-1
   31aa4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   31aa8:	00bffb44 	movi	r2,-19
   31aac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   31ab0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   31ab4:	d1600804 	addi	r5,gp,-32736
   31ab8:	e13ffd17 	ldw	r4,-12(fp)
   31abc:	00314ac0 	call	314ac <alt_find_dev>
   31ac0:	e0bff815 	stw	r2,-32(fp)
   31ac4:	e0bff817 	ldw	r2,-32(fp)
   31ac8:	1000051e 	bne	r2,zero,31ae0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   31acc:	e13ffd17 	ldw	r4,-12(fp)
   31ad0:	00320100 	call	32010 <alt_find_file>
   31ad4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   31ad8:	00800044 	movi	r2,1
   31adc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   31ae0:	e0bff817 	ldw	r2,-32(fp)
   31ae4:	10002b26 	beq	r2,zero,31b94 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   31ae8:	e13ff817 	ldw	r4,-32(fp)
   31aec:	00321180 	call	32118 <alt_get_fd>
   31af0:	e0bff915 	stw	r2,-28(fp)
   31af4:	e0bff917 	ldw	r2,-28(fp)
   31af8:	1000030e 	bge	r2,zero,31b08 <open+0x84>
    {
      status = index;
   31afc:	e0bff917 	ldw	r2,-28(fp)
   31b00:	e0bffa15 	stw	r2,-24(fp)
   31b04:	00002506 	br	31b9c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   31b08:	01400304 	movi	r5,12
   31b0c:	e13ff917 	ldw	r4,-28(fp)
   31b10:	002ad9c0 	call	2ad9c <__mulsi3>
   31b14:	1007883a 	mov	r3,r2
   31b18:	008000f4 	movhi	r2,3
   31b1c:	108c9704 	addi	r2,r2,12892
   31b20:	1885883a 	add	r2,r3,r2
   31b24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   31b28:	e0fffe17 	ldw	r3,-8(fp)
   31b2c:	00900034 	movhi	r2,16384
   31b30:	10bfffc4 	addi	r2,r2,-1
   31b34:	1886703a 	and	r3,r3,r2
   31b38:	e0bffc17 	ldw	r2,-16(fp)
   31b3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   31b40:	e0bffb17 	ldw	r2,-20(fp)
   31b44:	1000051e 	bne	r2,zero,31b5c <open+0xd8>
   31b48:	e13ffc17 	ldw	r4,-16(fp)
   31b4c:	00319980 	call	31998 <alt_file_locked>
   31b50:	e0bffa15 	stw	r2,-24(fp)
   31b54:	e0bffa17 	ldw	r2,-24(fp)
   31b58:	10001016 	blt	r2,zero,31b9c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   31b5c:	e0bff817 	ldw	r2,-32(fp)
   31b60:	10800317 	ldw	r2,12(r2)
   31b64:	10000826 	beq	r2,zero,31b88 <open+0x104>
   31b68:	e0bff817 	ldw	r2,-32(fp)
   31b6c:	10800317 	ldw	r2,12(r2)
   31b70:	e1ffff17 	ldw	r7,-4(fp)
   31b74:	e1bffe17 	ldw	r6,-8(fp)
   31b78:	e17ffd17 	ldw	r5,-12(fp)
   31b7c:	e13ffc17 	ldw	r4,-16(fp)
   31b80:	103ee83a 	callr	r2
   31b84:	00000106 	br	31b8c <open+0x108>
   31b88:	0005883a 	mov	r2,zero
   31b8c:	e0bffa15 	stw	r2,-24(fp)
   31b90:	00000206 	br	31b9c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   31b94:	00bffb44 	movi	r2,-19
   31b98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   31b9c:	e0bffa17 	ldw	r2,-24(fp)
   31ba0:	1000090e 	bge	r2,zero,31bc8 <open+0x144>
  {
    alt_release_fd (index);  
   31ba4:	e13ff917 	ldw	r4,-28(fp)
   31ba8:	002dd8c0 	call	2dd8c <alt_release_fd>
    ALT_ERRNO = -status;
   31bac:	003195c0 	call	3195c <alt_get_errno>
   31bb0:	1007883a 	mov	r3,r2
   31bb4:	e0bffa17 	ldw	r2,-24(fp)
   31bb8:	0085c83a 	sub	r2,zero,r2
   31bbc:	18800015 	stw	r2,0(r3)
    return -1;
   31bc0:	00bfffc4 	movi	r2,-1
   31bc4:	00000106 	br	31bcc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   31bc8:	e0bff917 	ldw	r2,-28(fp)
}
   31bcc:	e037883a 	mov	sp,fp
   31bd0:	dfc00117 	ldw	ra,4(sp)
   31bd4:	df000017 	ldw	fp,0(sp)
   31bd8:	dec00204 	addi	sp,sp,8
   31bdc:	f800283a 	ret

00031be0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   31be0:	defff204 	addi	sp,sp,-56
   31be4:	dfc00a15 	stw	ra,40(sp)
   31be8:	df000915 	stw	fp,36(sp)
   31bec:	df000904 	addi	fp,sp,36
   31bf0:	e13fff15 	stw	r4,-4(fp)
   31bf4:	e1400215 	stw	r5,8(fp)
   31bf8:	e1800315 	stw	r6,12(fp)
   31bfc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   31c00:	e0800204 	addi	r2,fp,8
   31c04:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   31c08:	e0bfff17 	ldw	r2,-4(fp)
   31c0c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   31c10:	00006f06 	br	31dd0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   31c14:	e0bff807 	ldb	r2,-32(fp)
   31c18:	10800960 	cmpeqi	r2,r2,37
   31c1c:	1000041e 	bne	r2,zero,31c30 <alt_printf+0x50>
        {
            alt_putchar(c);
   31c20:	e0bff807 	ldb	r2,-32(fp)
   31c24:	1009883a 	mov	r4,r2
   31c28:	0031e0c0 	call	31e0c <alt_putchar>
   31c2c:	00006806 	br	31dd0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   31c30:	e0bff717 	ldw	r2,-36(fp)
   31c34:	10c00044 	addi	r3,r2,1
   31c38:	e0fff715 	stw	r3,-36(fp)
   31c3c:	10800003 	ldbu	r2,0(r2)
   31c40:	e0bff805 	stb	r2,-32(fp)
   31c44:	e0bff807 	ldb	r2,-32(fp)
   31c48:	10006926 	beq	r2,zero,31df0 <alt_printf+0x210>
            {
                if (c == '%')
   31c4c:	e0bff807 	ldb	r2,-32(fp)
   31c50:	10800958 	cmpnei	r2,r2,37
   31c54:	1000041e 	bne	r2,zero,31c68 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   31c58:	e0bff807 	ldb	r2,-32(fp)
   31c5c:	1009883a 	mov	r4,r2
   31c60:	0031e0c0 	call	31e0c <alt_putchar>
   31c64:	00005a06 	br	31dd0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   31c68:	e0bff807 	ldb	r2,-32(fp)
   31c6c:	108018d8 	cmpnei	r2,r2,99
   31c70:	1000081e 	bne	r2,zero,31c94 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   31c74:	e0bffe17 	ldw	r2,-8(fp)
   31c78:	10c00104 	addi	r3,r2,4
   31c7c:	e0fffe15 	stw	r3,-8(fp)
   31c80:	10800017 	ldw	r2,0(r2)
   31c84:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   31c88:	e13ffd17 	ldw	r4,-12(fp)
   31c8c:	0031e0c0 	call	31e0c <alt_putchar>
   31c90:	00004f06 	br	31dd0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   31c94:	e0bff807 	ldb	r2,-32(fp)
   31c98:	10801e18 	cmpnei	r2,r2,120
   31c9c:	1000341e 	bne	r2,zero,31d70 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   31ca0:	e0bffe17 	ldw	r2,-8(fp)
   31ca4:	10c00104 	addi	r3,r2,4
   31ca8:	e0fffe15 	stw	r3,-8(fp)
   31cac:	10800017 	ldw	r2,0(r2)
   31cb0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   31cb4:	e0bffb17 	ldw	r2,-20(fp)
   31cb8:	1000031e 	bne	r2,zero,31cc8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   31cbc:	01000c04 	movi	r4,48
   31cc0:	0031e0c0 	call	31e0c <alt_putchar>
                        continue;
   31cc4:	00004206 	br	31dd0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   31cc8:	00800704 	movi	r2,28
   31ccc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   31cd0:	00000306 	br	31ce0 <alt_printf+0x100>
                        digit_shift -= 4;
   31cd4:	e0bff917 	ldw	r2,-28(fp)
   31cd8:	10bfff04 	addi	r2,r2,-4
   31cdc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   31ce0:	00c003c4 	movi	r3,15
   31ce4:	e0bff917 	ldw	r2,-28(fp)
   31ce8:	1884983a 	sll	r2,r3,r2
   31cec:	1007883a 	mov	r3,r2
   31cf0:	e0bffb17 	ldw	r2,-20(fp)
   31cf4:	1884703a 	and	r2,r3,r2
   31cf8:	103ff626 	beq	r2,zero,31cd4 <__alt_data_end+0xffff1cd4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   31cfc:	00001906 	br	31d64 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   31d00:	00c003c4 	movi	r3,15
   31d04:	e0bff917 	ldw	r2,-28(fp)
   31d08:	1884983a 	sll	r2,r3,r2
   31d0c:	1007883a 	mov	r3,r2
   31d10:	e0bffb17 	ldw	r2,-20(fp)
   31d14:	1886703a 	and	r3,r3,r2
   31d18:	e0bff917 	ldw	r2,-28(fp)
   31d1c:	1884d83a 	srl	r2,r3,r2
   31d20:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   31d24:	e0bffc17 	ldw	r2,-16(fp)
   31d28:	108002a8 	cmpgeui	r2,r2,10
   31d2c:	1000041e 	bne	r2,zero,31d40 <alt_printf+0x160>
                            c = '0' + digit;
   31d30:	e0bffc17 	ldw	r2,-16(fp)
   31d34:	10800c04 	addi	r2,r2,48
   31d38:	e0bff805 	stb	r2,-32(fp)
   31d3c:	00000306 	br	31d4c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   31d40:	e0bffc17 	ldw	r2,-16(fp)
   31d44:	108015c4 	addi	r2,r2,87
   31d48:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   31d4c:	e0bff807 	ldb	r2,-32(fp)
   31d50:	1009883a 	mov	r4,r2
   31d54:	0031e0c0 	call	31e0c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   31d58:	e0bff917 	ldw	r2,-28(fp)
   31d5c:	10bfff04 	addi	r2,r2,-4
   31d60:	e0bff915 	stw	r2,-28(fp)
   31d64:	e0bff917 	ldw	r2,-28(fp)
   31d68:	103fe50e 	bge	r2,zero,31d00 <__alt_data_end+0xffff1d00>
   31d6c:	00001806 	br	31dd0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   31d70:	e0bff807 	ldb	r2,-32(fp)
   31d74:	10801cd8 	cmpnei	r2,r2,115
   31d78:	1000151e 	bne	r2,zero,31dd0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   31d7c:	e0bffe17 	ldw	r2,-8(fp)
   31d80:	10c00104 	addi	r3,r2,4
   31d84:	e0fffe15 	stw	r3,-8(fp)
   31d88:	10800017 	ldw	r2,0(r2)
   31d8c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   31d90:	00000906 	br	31db8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   31d94:	e0bffa17 	ldw	r2,-24(fp)
   31d98:	10c00044 	addi	r3,r2,1
   31d9c:	e0fffa15 	stw	r3,-24(fp)
   31da0:	10800003 	ldbu	r2,0(r2)
   31da4:	10803fcc 	andi	r2,r2,255
   31da8:	1080201c 	xori	r2,r2,128
   31dac:	10bfe004 	addi	r2,r2,-128
   31db0:	1009883a 	mov	r4,r2
   31db4:	0031e0c0 	call	31e0c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   31db8:	e0bffa17 	ldw	r2,-24(fp)
   31dbc:	10800003 	ldbu	r2,0(r2)
   31dc0:	10803fcc 	andi	r2,r2,255
   31dc4:	1080201c 	xori	r2,r2,128
   31dc8:	10bfe004 	addi	r2,r2,-128
   31dcc:	103ff11e 	bne	r2,zero,31d94 <__alt_data_end+0xffff1d94>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   31dd0:	e0bff717 	ldw	r2,-36(fp)
   31dd4:	10c00044 	addi	r3,r2,1
   31dd8:	e0fff715 	stw	r3,-36(fp)
   31ddc:	10800003 	ldbu	r2,0(r2)
   31de0:	e0bff805 	stb	r2,-32(fp)
   31de4:	e0bff807 	ldb	r2,-32(fp)
   31de8:	103f8a1e 	bne	r2,zero,31c14 <__alt_data_end+0xffff1c14>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   31dec:	00000106 	br	31df4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   31df0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   31df4:	0001883a 	nop
   31df8:	e037883a 	mov	sp,fp
   31dfc:	dfc00117 	ldw	ra,4(sp)
   31e00:	df000017 	ldw	fp,0(sp)
   31e04:	dec00504 	addi	sp,sp,20
   31e08:	f800283a 	ret

00031e0c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   31e0c:	defffd04 	addi	sp,sp,-12
   31e10:	dfc00215 	stw	ra,8(sp)
   31e14:	df000115 	stw	fp,4(sp)
   31e18:	df000104 	addi	fp,sp,4
   31e1c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   31e20:	d0a00117 	ldw	r2,-32764(gp)
   31e24:	10800217 	ldw	r2,8(r2)
   31e28:	100b883a 	mov	r5,r2
   31e2c:	e13fff17 	ldw	r4,-4(fp)
   31e30:	00276d80 	call	276d8 <putc>
#endif
#endif
}
   31e34:	e037883a 	mov	sp,fp
   31e38:	dfc00117 	ldw	ra,4(sp)
   31e3c:	df000017 	ldw	fp,0(sp)
   31e40:	dec00204 	addi	sp,sp,8
   31e44:	f800283a 	ret

00031e48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   31e48:	defffa04 	addi	sp,sp,-24
   31e4c:	df000515 	stw	fp,20(sp)
   31e50:	df000504 	addi	fp,sp,20
   31e54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31e58:	0005303a 	rdctl	r2,status
   31e5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31e60:	e0fffc17 	ldw	r3,-16(fp)
   31e64:	00bfff84 	movi	r2,-2
   31e68:	1884703a 	and	r2,r3,r2
   31e6c:	1001703a 	wrctl	status,r2
  
  return context;
   31e70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   31e74:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   31e78:	e0bfff17 	ldw	r2,-4(fp)
   31e7c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   31e80:	e0bffd17 	ldw	r2,-12(fp)
   31e84:	10800017 	ldw	r2,0(r2)
   31e88:	e0fffd17 	ldw	r3,-12(fp)
   31e8c:	18c00117 	ldw	r3,4(r3)
   31e90:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   31e94:	e0bffd17 	ldw	r2,-12(fp)
   31e98:	10800117 	ldw	r2,4(r2)
   31e9c:	e0fffd17 	ldw	r3,-12(fp)
   31ea0:	18c00017 	ldw	r3,0(r3)
   31ea4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   31ea8:	e0bffd17 	ldw	r2,-12(fp)
   31eac:	e0fffd17 	ldw	r3,-12(fp)
   31eb0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   31eb4:	e0bffd17 	ldw	r2,-12(fp)
   31eb8:	e0fffd17 	ldw	r3,-12(fp)
   31ebc:	10c00015 	stw	r3,0(r2)
   31ec0:	e0bffb17 	ldw	r2,-20(fp)
   31ec4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31ec8:	e0bffe17 	ldw	r2,-8(fp)
   31ecc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   31ed0:	0001883a 	nop
   31ed4:	e037883a 	mov	sp,fp
   31ed8:	df000017 	ldw	fp,0(sp)
   31edc:	dec00104 	addi	sp,sp,4
   31ee0:	f800283a 	ret

00031ee4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   31ee4:	defffb04 	addi	sp,sp,-20
   31ee8:	dfc00415 	stw	ra,16(sp)
   31eec:	df000315 	stw	fp,12(sp)
   31ef0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   31ef4:	d0a01017 	ldw	r2,-32704(gp)
   31ef8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   31efc:	d0a71b17 	ldw	r2,-25492(gp)
   31f00:	10800044 	addi	r2,r2,1
   31f04:	d0a71b15 	stw	r2,-25492(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31f08:	00002e06 	br	31fc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   31f0c:	e0bffd17 	ldw	r2,-12(fp)
   31f10:	10800017 	ldw	r2,0(r2)
   31f14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   31f18:	e0bffd17 	ldw	r2,-12(fp)
   31f1c:	10800403 	ldbu	r2,16(r2)
   31f20:	10803fcc 	andi	r2,r2,255
   31f24:	10000426 	beq	r2,zero,31f38 <alt_tick+0x54>
   31f28:	d0a71b17 	ldw	r2,-25492(gp)
   31f2c:	1000021e 	bne	r2,zero,31f38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   31f30:	e0bffd17 	ldw	r2,-12(fp)
   31f34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   31f38:	e0bffd17 	ldw	r2,-12(fp)
   31f3c:	10800217 	ldw	r2,8(r2)
   31f40:	d0e71b17 	ldw	r3,-25492(gp)
   31f44:	18801d36 	bltu	r3,r2,31fbc <alt_tick+0xd8>
   31f48:	e0bffd17 	ldw	r2,-12(fp)
   31f4c:	10800403 	ldbu	r2,16(r2)
   31f50:	10803fcc 	andi	r2,r2,255
   31f54:	1000191e 	bne	r2,zero,31fbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   31f58:	e0bffd17 	ldw	r2,-12(fp)
   31f5c:	10800317 	ldw	r2,12(r2)
   31f60:	e0fffd17 	ldw	r3,-12(fp)
   31f64:	18c00517 	ldw	r3,20(r3)
   31f68:	1809883a 	mov	r4,r3
   31f6c:	103ee83a 	callr	r2
   31f70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   31f74:	e0bfff17 	ldw	r2,-4(fp)
   31f78:	1000031e 	bne	r2,zero,31f88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   31f7c:	e13ffd17 	ldw	r4,-12(fp)
   31f80:	0031e480 	call	31e48 <alt_alarm_stop>
   31f84:	00000d06 	br	31fbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   31f88:	e0bffd17 	ldw	r2,-12(fp)
   31f8c:	10c00217 	ldw	r3,8(r2)
   31f90:	e0bfff17 	ldw	r2,-4(fp)
   31f94:	1887883a 	add	r3,r3,r2
   31f98:	e0bffd17 	ldw	r2,-12(fp)
   31f9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   31fa0:	e0bffd17 	ldw	r2,-12(fp)
   31fa4:	10c00217 	ldw	r3,8(r2)
   31fa8:	d0a71b17 	ldw	r2,-25492(gp)
   31fac:	1880032e 	bgeu	r3,r2,31fbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   31fb0:	e0bffd17 	ldw	r2,-12(fp)
   31fb4:	00c00044 	movi	r3,1
   31fb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   31fbc:	e0bffe17 	ldw	r2,-8(fp)
   31fc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   31fc4:	e0fffd17 	ldw	r3,-12(fp)
   31fc8:	d0a01004 	addi	r2,gp,-32704
   31fcc:	18bfcf1e 	bne	r3,r2,31f0c <__alt_data_end+0xffff1f0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   31fd0:	0001883a 	nop
}
   31fd4:	0001883a 	nop
   31fd8:	e037883a 	mov	sp,fp
   31fdc:	dfc00117 	ldw	ra,4(sp)
   31fe0:	df000017 	ldw	fp,0(sp)
   31fe4:	dec00204 	addi	sp,sp,8
   31fe8:	f800283a 	ret

00031fec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   31fec:	deffff04 	addi	sp,sp,-4
   31ff0:	df000015 	stw	fp,0(sp)
   31ff4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   31ff8:	000170fa 	wrctl	ienable,zero
}
   31ffc:	0001883a 	nop
   32000:	e037883a 	mov	sp,fp
   32004:	df000017 	ldw	fp,0(sp)
   32008:	dec00104 	addi	sp,sp,4
   3200c:	f800283a 	ret

00032010 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   32010:	defffb04 	addi	sp,sp,-20
   32014:	dfc00415 	stw	ra,16(sp)
   32018:	df000315 	stw	fp,12(sp)
   3201c:	df000304 	addi	fp,sp,12
   32020:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   32024:	d0a00617 	ldw	r2,-32744(gp)
   32028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3202c:	00003106 	br	320f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   32030:	e0bffd17 	ldw	r2,-12(fp)
   32034:	10800217 	ldw	r2,8(r2)
   32038:	1009883a 	mov	r4,r2
   3203c:	00207000 	call	20700 <strlen>
   32040:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   32044:	e0bffd17 	ldw	r2,-12(fp)
   32048:	10c00217 	ldw	r3,8(r2)
   3204c:	e0bffe17 	ldw	r2,-8(fp)
   32050:	10bfffc4 	addi	r2,r2,-1
   32054:	1885883a 	add	r2,r3,r2
   32058:	10800003 	ldbu	r2,0(r2)
   3205c:	10803fcc 	andi	r2,r2,255
   32060:	1080201c 	xori	r2,r2,128
   32064:	10bfe004 	addi	r2,r2,-128
   32068:	10800bd8 	cmpnei	r2,r2,47
   3206c:	1000031e 	bne	r2,zero,3207c <alt_find_file+0x6c>
    {
      len -= 1;
   32070:	e0bffe17 	ldw	r2,-8(fp)
   32074:	10bfffc4 	addi	r2,r2,-1
   32078:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3207c:	e0bffe17 	ldw	r2,-8(fp)
   32080:	e0ffff17 	ldw	r3,-4(fp)
   32084:	1885883a 	add	r2,r3,r2
   32088:	10800003 	ldbu	r2,0(r2)
   3208c:	10803fcc 	andi	r2,r2,255
   32090:	1080201c 	xori	r2,r2,128
   32094:	10bfe004 	addi	r2,r2,-128
   32098:	10800be0 	cmpeqi	r2,r2,47
   3209c:	1000081e 	bne	r2,zero,320c0 <alt_find_file+0xb0>
   320a0:	e0bffe17 	ldw	r2,-8(fp)
   320a4:	e0ffff17 	ldw	r3,-4(fp)
   320a8:	1885883a 	add	r2,r3,r2
   320ac:	10800003 	ldbu	r2,0(r2)
   320b0:	10803fcc 	andi	r2,r2,255
   320b4:	1080201c 	xori	r2,r2,128
   320b8:	10bfe004 	addi	r2,r2,-128
   320bc:	10000a1e 	bne	r2,zero,320e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   320c0:	e0bffd17 	ldw	r2,-12(fp)
   320c4:	10800217 	ldw	r2,8(r2)
   320c8:	e0fffe17 	ldw	r3,-8(fp)
   320cc:	180d883a 	mov	r6,r3
   320d0:	e17fff17 	ldw	r5,-4(fp)
   320d4:	1009883a 	mov	r4,r2
   320d8:	00322c40 	call	322c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   320dc:	1000021e 	bne	r2,zero,320e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   320e0:	e0bffd17 	ldw	r2,-12(fp)
   320e4:	00000706 	br	32104 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   320e8:	e0bffd17 	ldw	r2,-12(fp)
   320ec:	10800017 	ldw	r2,0(r2)
   320f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   320f4:	e0fffd17 	ldw	r3,-12(fp)
   320f8:	d0a00604 	addi	r2,gp,-32744
   320fc:	18bfcc1e 	bne	r3,r2,32030 <__alt_data_end+0xffff2030>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   32100:	0005883a 	mov	r2,zero
}
   32104:	e037883a 	mov	sp,fp
   32108:	dfc00117 	ldw	ra,4(sp)
   3210c:	df000017 	ldw	fp,0(sp)
   32110:	dec00204 	addi	sp,sp,8
   32114:	f800283a 	ret

00032118 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   32118:	defffa04 	addi	sp,sp,-24
   3211c:	dfc00515 	stw	ra,20(sp)
   32120:	df000415 	stw	fp,16(sp)
   32124:	dc000315 	stw	r16,12(sp)
   32128:	df000404 	addi	fp,sp,16
   3212c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   32130:	00bffa04 	movi	r2,-24
   32134:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   32138:	e03ffc15 	stw	zero,-16(fp)
   3213c:	00001d06 	br	321b4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   32140:	040000f4 	movhi	r16,3
   32144:	840c9704 	addi	r16,r16,12892
   32148:	e0bffc17 	ldw	r2,-16(fp)
   3214c:	01400304 	movi	r5,12
   32150:	1009883a 	mov	r4,r2
   32154:	002ad9c0 	call	2ad9c <__mulsi3>
   32158:	8085883a 	add	r2,r16,r2
   3215c:	10800017 	ldw	r2,0(r2)
   32160:	1000111e 	bne	r2,zero,321a8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   32164:	040000f4 	movhi	r16,3
   32168:	840c9704 	addi	r16,r16,12892
   3216c:	e0bffc17 	ldw	r2,-16(fp)
   32170:	01400304 	movi	r5,12
   32174:	1009883a 	mov	r4,r2
   32178:	002ad9c0 	call	2ad9c <__mulsi3>
   3217c:	8085883a 	add	r2,r16,r2
   32180:	e0fffe17 	ldw	r3,-8(fp)
   32184:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   32188:	d0e00a17 	ldw	r3,-32728(gp)
   3218c:	e0bffc17 	ldw	r2,-16(fp)
   32190:	1880020e 	bge	r3,r2,3219c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   32194:	e0bffc17 	ldw	r2,-16(fp)
   32198:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   3219c:	e0bffc17 	ldw	r2,-16(fp)
   321a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   321a4:	00000606 	br	321c0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   321a8:	e0bffc17 	ldw	r2,-16(fp)
   321ac:	10800044 	addi	r2,r2,1
   321b0:	e0bffc15 	stw	r2,-16(fp)
   321b4:	e0bffc17 	ldw	r2,-16(fp)
   321b8:	10800810 	cmplti	r2,r2,32
   321bc:	103fe01e 	bne	r2,zero,32140 <__alt_data_end+0xffff2140>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   321c0:	e0bffd17 	ldw	r2,-12(fp)
}
   321c4:	e6ffff04 	addi	sp,fp,-4
   321c8:	dfc00217 	ldw	ra,8(sp)
   321cc:	df000117 	ldw	fp,4(sp)
   321d0:	dc000017 	ldw	r16,0(sp)
   321d4:	dec00304 	addi	sp,sp,12
   321d8:	f800283a 	ret

000321dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   321dc:	defffe04 	addi	sp,sp,-8
   321e0:	df000115 	stw	fp,4(sp)
   321e4:	df000104 	addi	fp,sp,4
   321e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   321ec:	e0bfff17 	ldw	r2,-4(fp)
   321f0:	10bffe84 	addi	r2,r2,-6
   321f4:	10c00428 	cmpgeui	r3,r2,16
   321f8:	18001a1e 	bne	r3,zero,32264 <alt_exception_cause_generated_bad_addr+0x88>
   321fc:	100690ba 	slli	r3,r2,2
   32200:	008000f4 	movhi	r2,3
   32204:	10888504 	addi	r2,r2,8724
   32208:	1885883a 	add	r2,r3,r2
   3220c:	10800017 	ldw	r2,0(r2)
   32210:	1000683a 	jmp	r2
   32214:	00032254 	movui	zero,3209
   32218:	00032254 	movui	zero,3209
   3221c:	00032264 	muli	zero,zero,3209
   32220:	00032264 	muli	zero,zero,3209
   32224:	00032264 	muli	zero,zero,3209
   32228:	00032254 	movui	zero,3209
   3222c:	0003225c 	xori	zero,zero,3209
   32230:	00032264 	muli	zero,zero,3209
   32234:	00032254 	movui	zero,3209
   32238:	00032254 	movui	zero,3209
   3223c:	00032264 	muli	zero,zero,3209
   32240:	00032254 	movui	zero,3209
   32244:	0003225c 	xori	zero,zero,3209
   32248:	00032264 	muli	zero,zero,3209
   3224c:	00032264 	muli	zero,zero,3209
   32250:	00032254 	movui	zero,3209
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   32254:	00800044 	movi	r2,1
   32258:	00000306 	br	32268 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   3225c:	0005883a 	mov	r2,zero
   32260:	00000106 	br	32268 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   32264:	0005883a 	mov	r2,zero
  }
}
   32268:	e037883a 	mov	sp,fp
   3226c:	df000017 	ldw	fp,0(sp)
   32270:	dec00104 	addi	sp,sp,4
   32274:	f800283a 	ret

00032278 <atexit>:
   32278:	200b883a 	mov	r5,r4
   3227c:	000f883a 	mov	r7,zero
   32280:	000d883a 	mov	r6,zero
   32284:	0009883a 	mov	r4,zero
   32288:	00323401 	jmpi	32340 <__register_exitproc>

0003228c <exit>:
   3228c:	defffe04 	addi	sp,sp,-8
   32290:	000b883a 	mov	r5,zero
   32294:	dc000015 	stw	r16,0(sp)
   32298:	dfc00115 	stw	ra,4(sp)
   3229c:	2021883a 	mov	r16,r4
   322a0:	00324580 	call	32458 <__call_exitprocs>
   322a4:	008000f4 	movhi	r2,3
   322a8:	10914e04 	addi	r2,r2,17720
   322ac:	11000017 	ldw	r4,0(r2)
   322b0:	20800f17 	ldw	r2,60(r4)
   322b4:	10000126 	beq	r2,zero,322bc <exit+0x30>
   322b8:	103ee83a 	callr	r2
   322bc:	8009883a 	mov	r4,r16
   322c0:	00325d80 	call	325d8 <_exit>

000322c4 <memcmp>:
   322c4:	01c000c4 	movi	r7,3
   322c8:	3980192e 	bgeu	r7,r6,32330 <memcmp+0x6c>
   322cc:	2144b03a 	or	r2,r4,r5
   322d0:	11c4703a 	and	r2,r2,r7
   322d4:	10000f26 	beq	r2,zero,32314 <memcmp+0x50>
   322d8:	20800003 	ldbu	r2,0(r4)
   322dc:	28c00003 	ldbu	r3,0(r5)
   322e0:	10c0151e 	bne	r2,r3,32338 <memcmp+0x74>
   322e4:	31bfff84 	addi	r6,r6,-2
   322e8:	01ffffc4 	movi	r7,-1
   322ec:	00000406 	br	32300 <memcmp+0x3c>
   322f0:	20800003 	ldbu	r2,0(r4)
   322f4:	28c00003 	ldbu	r3,0(r5)
   322f8:	31bfffc4 	addi	r6,r6,-1
   322fc:	10c00e1e 	bne	r2,r3,32338 <memcmp+0x74>
   32300:	21000044 	addi	r4,r4,1
   32304:	29400044 	addi	r5,r5,1
   32308:	31fff91e 	bne	r6,r7,322f0 <__alt_data_end+0xffff22f0>
   3230c:	0005883a 	mov	r2,zero
   32310:	f800283a 	ret
   32314:	20c00017 	ldw	r3,0(r4)
   32318:	28800017 	ldw	r2,0(r5)
   3231c:	18bfee1e 	bne	r3,r2,322d8 <__alt_data_end+0xffff22d8>
   32320:	31bfff04 	addi	r6,r6,-4
   32324:	21000104 	addi	r4,r4,4
   32328:	29400104 	addi	r5,r5,4
   3232c:	39bff936 	bltu	r7,r6,32314 <__alt_data_end+0xffff2314>
   32330:	303fe91e 	bne	r6,zero,322d8 <__alt_data_end+0xffff22d8>
   32334:	003ff506 	br	3230c <__alt_data_end+0xffff230c>
   32338:	10c5c83a 	sub	r2,r2,r3
   3233c:	f800283a 	ret

00032340 <__register_exitproc>:
   32340:	defffa04 	addi	sp,sp,-24
   32344:	dc000315 	stw	r16,12(sp)
   32348:	040000f4 	movhi	r16,3
   3234c:	84114e04 	addi	r16,r16,17720
   32350:	80c00017 	ldw	r3,0(r16)
   32354:	dc400415 	stw	r17,16(sp)
   32358:	dfc00515 	stw	ra,20(sp)
   3235c:	18805217 	ldw	r2,328(r3)
   32360:	2023883a 	mov	r17,r4
   32364:	10003726 	beq	r2,zero,32444 <__register_exitproc+0x104>
   32368:	10c00117 	ldw	r3,4(r2)
   3236c:	010007c4 	movi	r4,31
   32370:	20c00e16 	blt	r4,r3,323ac <__register_exitproc+0x6c>
   32374:	1a000044 	addi	r8,r3,1
   32378:	8800221e 	bne	r17,zero,32404 <__register_exitproc+0xc4>
   3237c:	18c00084 	addi	r3,r3,2
   32380:	18c7883a 	add	r3,r3,r3
   32384:	18c7883a 	add	r3,r3,r3
   32388:	12000115 	stw	r8,4(r2)
   3238c:	10c7883a 	add	r3,r2,r3
   32390:	19400015 	stw	r5,0(r3)
   32394:	0005883a 	mov	r2,zero
   32398:	dfc00517 	ldw	ra,20(sp)
   3239c:	dc400417 	ldw	r17,16(sp)
   323a0:	dc000317 	ldw	r16,12(sp)
   323a4:	dec00604 	addi	sp,sp,24
   323a8:	f800283a 	ret
   323ac:	00800034 	movhi	r2,0
   323b0:	10800004 	addi	r2,r2,0
   323b4:	10002626 	beq	r2,zero,32450 <__register_exitproc+0x110>
   323b8:	01006404 	movi	r4,400
   323bc:	d9400015 	stw	r5,0(sp)
   323c0:	d9800115 	stw	r6,4(sp)
   323c4:	d9c00215 	stw	r7,8(sp)
   323c8:	00000000 	call	0 <__reset-0x20000>
   323cc:	d9400017 	ldw	r5,0(sp)
   323d0:	d9800117 	ldw	r6,4(sp)
   323d4:	d9c00217 	ldw	r7,8(sp)
   323d8:	10001d26 	beq	r2,zero,32450 <__register_exitproc+0x110>
   323dc:	81000017 	ldw	r4,0(r16)
   323e0:	10000115 	stw	zero,4(r2)
   323e4:	02000044 	movi	r8,1
   323e8:	22405217 	ldw	r9,328(r4)
   323ec:	0007883a 	mov	r3,zero
   323f0:	12400015 	stw	r9,0(r2)
   323f4:	20805215 	stw	r2,328(r4)
   323f8:	10006215 	stw	zero,392(r2)
   323fc:	10006315 	stw	zero,396(r2)
   32400:	883fde26 	beq	r17,zero,3237c <__alt_data_end+0xffff237c>
   32404:	18c9883a 	add	r4,r3,r3
   32408:	2109883a 	add	r4,r4,r4
   3240c:	1109883a 	add	r4,r2,r4
   32410:	21802215 	stw	r6,136(r4)
   32414:	01800044 	movi	r6,1
   32418:	12406217 	ldw	r9,392(r2)
   3241c:	30cc983a 	sll	r6,r6,r3
   32420:	4992b03a 	or	r9,r9,r6
   32424:	12406215 	stw	r9,392(r2)
   32428:	21c04215 	stw	r7,264(r4)
   3242c:	01000084 	movi	r4,2
   32430:	893fd21e 	bne	r17,r4,3237c <__alt_data_end+0xffff237c>
   32434:	11006317 	ldw	r4,396(r2)
   32438:	218cb03a 	or	r6,r4,r6
   3243c:	11806315 	stw	r6,396(r2)
   32440:	003fce06 	br	3237c <__alt_data_end+0xffff237c>
   32444:	18805304 	addi	r2,r3,332
   32448:	18805215 	stw	r2,328(r3)
   3244c:	003fc606 	br	32368 <__alt_data_end+0xffff2368>
   32450:	00bfffc4 	movi	r2,-1
   32454:	003fd006 	br	32398 <__alt_data_end+0xffff2398>

00032458 <__call_exitprocs>:
   32458:	defff504 	addi	sp,sp,-44
   3245c:	df000915 	stw	fp,36(sp)
   32460:	dd400615 	stw	r21,24(sp)
   32464:	dc800315 	stw	r18,12(sp)
   32468:	dfc00a15 	stw	ra,40(sp)
   3246c:	ddc00815 	stw	r23,32(sp)
   32470:	dd800715 	stw	r22,28(sp)
   32474:	dd000515 	stw	r20,20(sp)
   32478:	dcc00415 	stw	r19,16(sp)
   3247c:	dc400215 	stw	r17,8(sp)
   32480:	dc000115 	stw	r16,4(sp)
   32484:	d9000015 	stw	r4,0(sp)
   32488:	2839883a 	mov	fp,r5
   3248c:	04800044 	movi	r18,1
   32490:	057fffc4 	movi	r21,-1
   32494:	008000f4 	movhi	r2,3
   32498:	10914e04 	addi	r2,r2,17720
   3249c:	12000017 	ldw	r8,0(r2)
   324a0:	45005217 	ldw	r20,328(r8)
   324a4:	44c05204 	addi	r19,r8,328
   324a8:	a0001c26 	beq	r20,zero,3251c <__call_exitprocs+0xc4>
   324ac:	a0800117 	ldw	r2,4(r20)
   324b0:	15ffffc4 	addi	r23,r2,-1
   324b4:	b8000d16 	blt	r23,zero,324ec <__call_exitprocs+0x94>
   324b8:	14000044 	addi	r16,r2,1
   324bc:	8421883a 	add	r16,r16,r16
   324c0:	8421883a 	add	r16,r16,r16
   324c4:	84402004 	addi	r17,r16,128
   324c8:	a463883a 	add	r17,r20,r17
   324cc:	a421883a 	add	r16,r20,r16
   324d0:	e0001e26 	beq	fp,zero,3254c <__call_exitprocs+0xf4>
   324d4:	80804017 	ldw	r2,256(r16)
   324d8:	e0801c26 	beq	fp,r2,3254c <__call_exitprocs+0xf4>
   324dc:	bdffffc4 	addi	r23,r23,-1
   324e0:	843fff04 	addi	r16,r16,-4
   324e4:	8c7fff04 	addi	r17,r17,-4
   324e8:	bd7ff91e 	bne	r23,r21,324d0 <__alt_data_end+0xffff24d0>
   324ec:	00800034 	movhi	r2,0
   324f0:	10800004 	addi	r2,r2,0
   324f4:	10000926 	beq	r2,zero,3251c <__call_exitprocs+0xc4>
   324f8:	a0800117 	ldw	r2,4(r20)
   324fc:	1000301e 	bne	r2,zero,325c0 <__call_exitprocs+0x168>
   32500:	a0800017 	ldw	r2,0(r20)
   32504:	10003226 	beq	r2,zero,325d0 <__call_exitprocs+0x178>
   32508:	a009883a 	mov	r4,r20
   3250c:	98800015 	stw	r2,0(r19)
   32510:	00000000 	call	0 <__reset-0x20000>
   32514:	9d000017 	ldw	r20,0(r19)
   32518:	a03fe41e 	bne	r20,zero,324ac <__alt_data_end+0xffff24ac>
   3251c:	dfc00a17 	ldw	ra,40(sp)
   32520:	df000917 	ldw	fp,36(sp)
   32524:	ddc00817 	ldw	r23,32(sp)
   32528:	dd800717 	ldw	r22,28(sp)
   3252c:	dd400617 	ldw	r21,24(sp)
   32530:	dd000517 	ldw	r20,20(sp)
   32534:	dcc00417 	ldw	r19,16(sp)
   32538:	dc800317 	ldw	r18,12(sp)
   3253c:	dc400217 	ldw	r17,8(sp)
   32540:	dc000117 	ldw	r16,4(sp)
   32544:	dec00b04 	addi	sp,sp,44
   32548:	f800283a 	ret
   3254c:	a0800117 	ldw	r2,4(r20)
   32550:	80c00017 	ldw	r3,0(r16)
   32554:	10bfffc4 	addi	r2,r2,-1
   32558:	15c01426 	beq	r2,r23,325ac <__call_exitprocs+0x154>
   3255c:	80000015 	stw	zero,0(r16)
   32560:	183fde26 	beq	r3,zero,324dc <__alt_data_end+0xffff24dc>
   32564:	95c8983a 	sll	r4,r18,r23
   32568:	a0806217 	ldw	r2,392(r20)
   3256c:	a5800117 	ldw	r22,4(r20)
   32570:	2084703a 	and	r2,r4,r2
   32574:	10000b26 	beq	r2,zero,325a4 <__call_exitprocs+0x14c>
   32578:	a0806317 	ldw	r2,396(r20)
   3257c:	2088703a 	and	r4,r4,r2
   32580:	20000c1e 	bne	r4,zero,325b4 <__call_exitprocs+0x15c>
   32584:	89400017 	ldw	r5,0(r17)
   32588:	d9000017 	ldw	r4,0(sp)
   3258c:	183ee83a 	callr	r3
   32590:	a0800117 	ldw	r2,4(r20)
   32594:	15bfbf1e 	bne	r2,r22,32494 <__alt_data_end+0xffff2494>
   32598:	98800017 	ldw	r2,0(r19)
   3259c:	153fcf26 	beq	r2,r20,324dc <__alt_data_end+0xffff24dc>
   325a0:	003fbc06 	br	32494 <__alt_data_end+0xffff2494>
   325a4:	183ee83a 	callr	r3
   325a8:	003ff906 	br	32590 <__alt_data_end+0xffff2590>
   325ac:	a5c00115 	stw	r23,4(r20)
   325b0:	003feb06 	br	32560 <__alt_data_end+0xffff2560>
   325b4:	89000017 	ldw	r4,0(r17)
   325b8:	183ee83a 	callr	r3
   325bc:	003ff406 	br	32590 <__alt_data_end+0xffff2590>
   325c0:	a0800017 	ldw	r2,0(r20)
   325c4:	a027883a 	mov	r19,r20
   325c8:	1029883a 	mov	r20,r2
   325cc:	003fb606 	br	324a8 <__alt_data_end+0xffff24a8>
   325d0:	0005883a 	mov	r2,zero
   325d4:	003ffb06 	br	325c4 <__alt_data_end+0xffff25c4>

000325d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   325d8:	defffd04 	addi	sp,sp,-12
   325dc:	df000215 	stw	fp,8(sp)
   325e0:	df000204 	addi	fp,sp,8
   325e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   325e8:	0001883a 	nop
   325ec:	e0bfff17 	ldw	r2,-4(fp)
   325f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   325f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   325f8:	10000226 	beq	r2,zero,32604 <_exit+0x2c>
    ALT_SIM_FAIL();
   325fc:	002af070 	cmpltui	zero,zero,43969
   32600:	00000106 	br	32608 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   32604:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   32608:	003fff06 	br	32608 <__alt_data_end+0xffff2608>
