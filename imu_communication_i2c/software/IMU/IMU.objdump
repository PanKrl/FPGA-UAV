
IMU.elf:     file format elf32-littlenios2
IMU.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000899c memsz 0x0000899c flags r-x
    LOAD off    0x000099bc vaddr 0x000289bc paddr 0x0002a52c align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags rw-
    LOAD off    0x0000c09c vaddr 0x0002c09c paddr 0x0002c09c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008688  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000104  000288b8  000288b8  000098b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b70  000289bc  0002a52c  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0002c09c  0002c09c  0000c09c  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  0002c1f0  0002c1f0  0000b52c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000b52c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ba0  00000000  00000000  0000b550  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a6ff  00000000  00000000  0000c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007146  00000000  00000000  000267ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007df8  00000000  00000000  0002d935  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002040  00000000  00000000  00035730  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000367b  00000000  00000000  00037770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004eb0  00000000  00000000  0003adeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0003fc9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006f8  00000000  00000000  0003fce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004356a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0004356d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00043573  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00043574  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00043575  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00043579  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004357d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00043581  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00043585  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00043589  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0004358d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  0004359a  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c22  00000000  00000000  000435bf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006681e  00000000  00000000  000481e1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
000288b8 l    d  .rodata	00000000 .rodata
000289bc l    d  .rwdata	00000000 .rwdata
0002c09c l    d  .bss	00000000 .bss
0002c1f0 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../IMU_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 bno055.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 imu_i2c.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020b90 l     F .text	00000008 __fp_unlock
00020ba4 l     F .text	0000019c __sinit.part.1
00020d40 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000289bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
00023654 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023768 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023794 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00023888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023970 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023a5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023c38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002a514 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023edc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00024018 l     F .text	00000034 alt_dev_reg
00029390 l     O .rwdata	00000038 I2C
000293c8 l     O .rwdata	00001060 JTAG
0002a428 l     O .rwdata	000000c4 UART1
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
000240fc l     F .text	00000110 optional_irq_callback
0002425c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00025f38 l     F .text	0000020c altera_avalon_jtag_uart_irq
00026144 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00026938 l     F .text	0000009c altera_avalon_uart_irq
000269d4 l     F .text	000000e4 altera_avalon_uart_rxirq
00026ab8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00026c54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00026e6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000272f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000277e8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00027948 l     F .text	0000003c alt_get_errno
00027984 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002c0c4 g     O .bss	00000004 alt_instruction_exception_handler
00023600 g     F .text	00000054 _isatty_r
00023b74 g     F .text	0000007c alt_main
00020a24 g     F .text	000000c0 _puts_r
0002c0f0 g     O .bss	00000100 alt_irq
00023328 g     F .text	00000060 _lseek_r
0002a52c g       *ABS*	00000000 __flash_rwdata_start
0002c1f0 g       *ABS*	00000000 __alt_heap_start
000228dc g     F .text	0000005c __sseek
00020ef0 g     F .text	00000010 __sinit
00028494 g     F .text	00000140 __swbuf_r
00020d48 g     F .text	00000078 __sfmoreglue
00024954 g     F .text	000000a8 alt_avalon_i2c_rx_read
00023c14 g     F .text	00000024 __malloc_unlock
00025b6c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
000246d8 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00021fc8 g     F .text	0000015c memmove
00020ed8 g     F .text	00000018 _cleanup
000253bc g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00027fd8 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000235a4 g     F .text	0000005c _fstat_r
0002c0a8 g     O .bss	00000004 errno
00022858 g     F .text	00000008 __seofread
0002c0b0 g     O .bss	00000004 alt_argv
000324ec g       *ABS*	00000000 _gp
00023eac g     F .text	00000030 usleep
00025bb0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00024868 g     F .text	00000044 alt_avalon_i2c_is_busy
00029210 g     O .rwdata	00000180 alt_fd_list
0002460c g     F .text	000000cc alt_avalon_i2c_master_config_set
00027498 g     F .text	00000090 alt_find_dev
00021e80 g     F .text	00000148 memcpy
00020b98 g     F .text	0000000c _cleanup_r
000278cc g     F .text	0000007c alt_io_redirect
000288b8 g       *ABS*	00000000 __DTOR_END__
000251fc g     F .text	000001c0 alt_avalon_i2c_master_transmit
00020ae4 g     F .text	00000014 puts
000281c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002633c g     F .text	0000021c altera_avalon_jtag_uart_read
00020940 g     F .text	00000064 .hidden __udivsi3
000238c4 g     F .text	000000ac isatty
00024478 g     F .text	00000098 alt_avalon_i2c_enable
0002c0a4 g     O .bss	00000004 __malloc_top_pad
00025aa0 g     F .text	00000068 alt_avalon_i2c_int_disable
00020f40 g     F .text	000004c8 __sfvwrite_r
000227b0 g     F .text	00000054 _sbrk_r
00023544 g     F .text	00000060 _read_r
0002a50c g     O .rwdata	00000004 alt_max_fd
00022b48 g     F .text	000000f0 _fclose_r
00022ec4 g     F .text	00000030 fflush
0002c0a0 g     O .bss	00000004 __malloc_max_sbrked_mem
000255c8 g     F .text	00000210 alt_avalon_i2c_master_receive
00023a98 g     F .text	000000dc lseek
00025b08 g     F .text	00000064 alt_avalon_i2c_int_enable
0002a4ec g     O .rwdata	00000004 _global_impure_ptr
0002224c g     F .text	00000564 _realloc_r
0002c1f0 g       *ABS*	00000000 __bss_end
000276f8 g     F .text	000000f0 alt_iic_isr_register
00027ed0 g     F .text	00000108 alt_tick
000259c8 g     F .text	00000058 alt_avalon_i2c_int_status_get
0002688c g     F .text	000000ac altera_avalon_uart_init
00020f10 g     F .text	00000018 __fp_lock_all
000276ac g     F .text	0000004c alt_ic_irq_enabled
00027e34 g     F .text	0000009c alt_alarm_stop
000242f8 g     F .text	00000054 alt_avalon_i2c_register_callback
0002c0b8 g     O .bss	00000004 alt_irq_active
0002434c g     F .text	000000ec alt_avalon_i2c_init
000200fc g     F .exceptions	000000d4 alt_irq_handler
000291e8 g     O .rwdata	00000028 alt_dev_null
000272d8 g     F .text	00000020 alt_dcache_flush_all
0002a52c g       *ABS*	00000000 __ram_rwdata_end
0002a504 g     O .rwdata	00000008 alt_dev_list
00023f18 g     F .text	00000100 write
0002832c g     F .text	000000a0 _putc_r
00024c88 g     F .text	0000004c alt_avalon_i2c_check_arblost
00025a64 g     F .text	0000003c alt_avalon_i2c_int_clear
000289bc g       *ABS*	00000000 __ram_rodata_end
000237d0 g     F .text	000000b8 fstat
0002a518 g     O .rwdata	00000008 alt_avalon_i2c_list
000209a4 g     F .text	00000058 .hidden __umodsi3
0002c1f0 g       *ABS*	00000000 end
00026ea8 g     F .text	000001ac altera_avalon_uart_write
00025e78 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00024438 g     F .text	00000040 alt_avalon_i2c_open
00020714 g     F .text	000000cc IMU_init
000288b8 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00024e10 g     F .text	000000e8 alt_avalon_i2c_master_tx
000267dc g     F .text	00000060 altera_avalon_uart_write_fd
0002683c g     F .text	00000050 altera_avalon_uart_close_fd
00026558 g     F .text	00000224 altera_avalon_jtag_uart_write
00020f00 g     F .text	00000004 __sfp_lock_acquire
00021d9c g     F .text	000000e4 memchr
00023018 g     F .text	00000310 _free_r
00027bcc g     F .text	0000022c alt_printf
00028704 g     F .text	00000180 __call_exitprocs
0002026c g     F .text	00000080 bno055_init
0002420c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0002a4f4 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
0002c0bc g     O .bss	00000004 _alt_tick_rate
000257d8 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00025bfc g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0002c0c0 g     O .bss	00000004 _alt_nticks
00023c74 g     F .text	00000104 read
00024084 g     F .text	00000078 alt_sys_init
000285ec g     F .text	00000118 __register_exitproc
00025034 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000261e4 g     F .text	00000068 altera_avalon_jtag_uart_close
000209fc g     F .text	00000028 .hidden __mulsi3
000289bc g       *ABS*	00000000 __ram_rwdata_start
000288b8 g       *ABS*	00000000 __ram_rodata_start
0002c0c8 g     O .bss	00000028 __malloc_current_mallinfo
00020510 g     F .text	000000ec bno055_i2c_read
00025d14 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00028104 g     F .text	000000c4 alt_get_fd
00027180 g     F .text	00000158 alt_busy_sleep
00022af4 g     F .text	00000054 _close_r
000206d4 g     F .text	00000040 bno055_delay_ms
000282b0 g     F .text	0000007c memcmp
000248ac g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00025dd4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002c1f0 g       *ABS*	00000000 __alt_stack_base
00025e24 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000229a0 g     F .text	00000154 __swsetup_r
00020dc0 g     F .text	00000118 __sfp
00028de0 g     O .rwdata	00000408 __malloc_av_
00020f0c g     F .text	00000004 __sinit_lock_release
00022804 g     F .text	00000054 __sread
00027ffc g     F .text	00000108 alt_find_file
00027334 g     F .text	000000a4 alt_dev_llist_insert
00023bf0 g     F .text	00000024 __malloc_lock
00023dfc g     F .text	000000b0 sbrk
00024cd4 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00024c3c g     F .text	0000004c alt_avalon_i2c_check_nack
00022e68 g     F .text	0000005c _fflush_r
0002c09c g       *ABS*	00000000 __bss_start
00022124 g     F .text	00000128 memset
000207e0 g     F .text	00000068 main
00020000 g       *ABS*	00000000 __alt_mem_RAM
00024c08 g     F .text	00000034 alt_avalon_i2c_master_target_set
0002c0b4 g     O .bss	00000004 alt_envp
0002c09c g     O .bss	00000004 __malloc_max_total_mem
00025d74 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000285d4 g     F .text	00000018 __swbuf
00025a20 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00022938 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022c38 g     F .text	00000014 fclose
00021590 g     F .text	0000080c _malloc_r
0002a510 g     O .rwdata	00000004 alt_errno
00021408 g     F .text	000000c4 _fwalk
000283cc g     F .text	000000c8 putc
00020848 g     F .text	00000084 .hidden __divsi3
00022ef4 g     F .text	00000124 _malloc_trim_r
000288b8 g       *ABS*	00000000 __CTOR_END__
000288b8 g       *ABS*	00000000 __flash_rodata_start
000288b8 g       *ABS*	00000000 __DTOR_LIST__
0002404c g     F .text	00000038 alt_irq_init
000202ec g     F .text	00000100 bno055_read_quaternion_wxyz
00023d78 g     F .text	00000084 alt_release_fd
00028264 g     F .text	00000014 atexit
00022940 g     F .text	00000060 _write_r
0002a4f0 g     O .rwdata	00000004 _impure_ptr
0002c0ac g     O .bss	00000004 alt_argc
00022c4c g     F .text	0000021c __sflush_r
000204a0 g     F .text	00000070 TFR_CMD
00027438 g     F .text	00000060 _do_dtors
00024bd0 g     F .text	00000038 alt_avalon_i2c_master_target_get
00024ae0 g     F .text	000000f0 alt_avalon_i2c_send_address
00020020 g       .exceptions	00000000 alt_irq_entry
00020f28 g     F .text	00000018 __fp_unlock_all
0002a4fc g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025cac g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00027548 g     F .text	00000050 alt_ic_isr_register
00024510 g     F .text	0000004c alt_avalon_i2c_disable
0002a52c g       *ABS*	00000000 _edata
0002677c g     F .text	00000060 altera_avalon_uart_read_fd
0002c1f0 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
0002624c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002455c g     F .text	000000b0 alt_avalon_i2c_master_config_get
00027620 g     F .text	0000008c alt_ic_irq_disable
00022860 g     F .text	0000007c __swrite
0002a4f8 g     O .rwdata	00000004 __malloc_trim_threshold
00028278 g     F .text	00000038 exit
000214cc g     F .text	000000c4 _fwalk_reent
000208cc g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020f04 g     F .text	00000004 __sfp_lock_release
0002476c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
000249fc g     F .text	000000e4 alt_avalon_i2c_cmd_write
00026c00 g     F .text	00000054 altera_avalon_uart_close
00028884 g     F .text	00000034 _exit
00027054 g     F .text	0000012c alt_alarm_start
00023388 g     F .text	000001bc __smakebuf_r
00020af8 g     F .text	00000098 strlen
00027a70 g     F .text	0000015c open
00027df8 g     F .text	0000003c alt_putchar
00027528 g     F .text	00000020 alt_icache_flush_all
000205fc g     F .text	000000d8 bno055_i2c_write
0002a520 g     O .rwdata	00000004 alt_priority_mask
00027598 g     F .text	00000088 alt_ic_irq_enable
00026c90 g     F .text	000001dc altera_avalon_uart_read
00020468 g     F .text	00000038 checkI2CReady
0002a524 g     O .rwdata	00000008 alt_alarm_list
000273d8 g     F .text	00000060 _do_ctors
00023690 g     F .text	000000d8 close
000203ec g     F .text	0000007c setI2CClock
00025c60 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
000239d8 g     F .text	00000084 alt_load
00024ef8 g     F .text	0000013c alt_avalon_i2c_master_rx
00020f08 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10b03c04 	addi	r2,r2,-16144
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10b03c04 	addi	r2,r2,-16144
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a6f617 	ldw	r2,-25640(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a6f617 	ldw	r2,-25640(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   2023c:	d6893b14 	ori	gp,gp,9452
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	10b02714 	ori	r2,r2,49308

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18f07c14 	ori	r3,r3,49648

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00239d80 	call	239d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	0023b740 	call	23b74 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xfffe0268>

0002026c <bno055_init>:
 *      Author: ironb
 */

#include "bno055.h"

int8_t bno055_init(struct bno055_t *bno055) {
   2026c:	defffc04 	addi	sp,sp,-16
   20270:	dfc00315 	stw	ra,12(sp)
   20274:	df000215 	stw	fp,8(sp)
   20278:	df000204 	addi	fp,sp,8
   2027c:	e13fff15 	stw	r4,-4(fp)
    uint8_t data = 0;
   20280:	e03ffe05 	stb	zero,-8(fp)
    bno055->bus_read(bno055->dev_addr, BNO055_CHIP_ID_REG, &data, BNO055_GEN_READ_WRITE_LENGTH);
   20284:	e0bfff17 	ldw	r2,-4(fp)
   20288:	10800217 	ldw	r2,8(r2)
   2028c:	e0ffff17 	ldw	r3,-4(fp)
   20290:	18c00043 	ldbu	r3,1(r3)
   20294:	18c03fcc 	andi	r3,r3,255
   20298:	01c00044 	movi	r7,1
   2029c:	e1bffe04 	addi	r6,fp,-8
   202a0:	000b883a 	mov	r5,zero
   202a4:	1809883a 	mov	r4,r3
   202a8:	103ee83a 	callr	r2
    bno055->chip_id = data;
   202ac:	e0fffe03 	ldbu	r3,-8(fp)
   202b0:	e0bfff17 	ldw	r2,-4(fp)
   202b4:	10c00005 	stb	r3,0(r2)

    if (bno055->chip_id != BNO055_CHIP_ID) {
   202b8:	e0bfff17 	ldw	r2,-4(fp)
   202bc:	10800003 	ldbu	r2,0(r2)
   202c0:	10803fcc 	andi	r2,r2,255
   202c4:	10802820 	cmpeqi	r2,r2,160
   202c8:	1000021e 	bne	r2,zero,202d4 <bno055_init+0x68>
        return BNO055_ERROR;
   202cc:	00bfffc4 	movi	r2,-1
   202d0:	00000106 	br	202d8 <bno055_init+0x6c>
    }

    // Additional initialization steps can be added here

    return BNO055_SUCCESS;
   202d4:	0005883a 	mov	r2,zero
}
   202d8:	e037883a 	mov	sp,fp
   202dc:	dfc00117 	ldw	ra,4(sp)
   202e0:	df000017 	ldw	fp,0(sp)
   202e4:	dec00204 	addi	sp,sp,8
   202e8:	f800283a 	ret

000202ec <bno055_read_quaternion_wxyz>:

int8_t bno055_read_quaternion_wxyz(struct bno055_t *bno055, int16_t *w, int16_t *x, int16_t *y, int16_t *z) {
   202ec:	defff804 	addi	sp,sp,-32
   202f0:	dfc00715 	stw	ra,28(sp)
   202f4:	df000615 	stw	fp,24(sp)
   202f8:	df000604 	addi	fp,sp,24
   202fc:	e13ffc15 	stw	r4,-16(fp)
   20300:	e17ffd15 	stw	r5,-12(fp)
   20304:	e1bffe15 	stw	r6,-8(fp)
   20308:	e1ffff15 	stw	r7,-4(fp)
    uint8_t data[8];
    bno055->bus_read(bno055->dev_addr, BNO055_QUA_DATA_W_LSB_REG, data, 8);
   2030c:	e0bffc17 	ldw	r2,-16(fp)
   20310:	10800217 	ldw	r2,8(r2)
   20314:	e0fffc17 	ldw	r3,-16(fp)
   20318:	18c00043 	ldbu	r3,1(r3)
   2031c:	18c03fcc 	andi	r3,r3,255
   20320:	01c00204 	movi	r7,8
   20324:	e1bffa04 	addi	r6,fp,-24
   20328:	01400804 	movi	r5,32
   2032c:	1809883a 	mov	r4,r3
   20330:	103ee83a 	callr	r2

    *w = (int16_t)((data[1] << 8) | data[0]);
   20334:	e0bffa43 	ldbu	r2,-23(fp)
   20338:	10803fcc 	andi	r2,r2,255
   2033c:	1004923a 	slli	r2,r2,8
   20340:	1007883a 	mov	r3,r2
   20344:	e0bffa03 	ldbu	r2,-24(fp)
   20348:	10803fcc 	andi	r2,r2,255
   2034c:	1884b03a 	or	r2,r3,r2
   20350:	1007883a 	mov	r3,r2
   20354:	e0bffd17 	ldw	r2,-12(fp)
   20358:	10c0000d 	sth	r3,0(r2)
    *x = (int16_t)((data[3] << 8) | data[2]);
   2035c:	e0bffac3 	ldbu	r2,-21(fp)
   20360:	10803fcc 	andi	r2,r2,255
   20364:	1004923a 	slli	r2,r2,8
   20368:	1007883a 	mov	r3,r2
   2036c:	e0bffa83 	ldbu	r2,-22(fp)
   20370:	10803fcc 	andi	r2,r2,255
   20374:	1884b03a 	or	r2,r3,r2
   20378:	1007883a 	mov	r3,r2
   2037c:	e0bffe17 	ldw	r2,-8(fp)
   20380:	10c0000d 	sth	r3,0(r2)
    *y = (int16_t)((data[5] << 8) | data[4]);
   20384:	e0bffb43 	ldbu	r2,-19(fp)
   20388:	10803fcc 	andi	r2,r2,255
   2038c:	1004923a 	slli	r2,r2,8
   20390:	1007883a 	mov	r3,r2
   20394:	e0bffb03 	ldbu	r2,-20(fp)
   20398:	10803fcc 	andi	r2,r2,255
   2039c:	1884b03a 	or	r2,r3,r2
   203a0:	1007883a 	mov	r3,r2
   203a4:	e0bfff17 	ldw	r2,-4(fp)
   203a8:	10c0000d 	sth	r3,0(r2)
    *z = (int16_t)((data[7] << 8) | data[6]);
   203ac:	e0bffbc3 	ldbu	r2,-17(fp)
   203b0:	10803fcc 	andi	r2,r2,255
   203b4:	1004923a 	slli	r2,r2,8
   203b8:	1007883a 	mov	r3,r2
   203bc:	e0bffb83 	ldbu	r2,-18(fp)
   203c0:	10803fcc 	andi	r2,r2,255
   203c4:	1884b03a 	or	r2,r3,r2
   203c8:	1007883a 	mov	r3,r2
   203cc:	e0800217 	ldw	r2,8(fp)
   203d0:	10c0000d 	sth	r3,0(r2)

    return BNO055_SUCCESS;
   203d4:	0005883a 	mov	r2,zero
}
   203d8:	e037883a 	mov	sp,fp
   203dc:	dfc00117 	ldw	ra,4(sp)
   203e0:	df000017 	ldw	fp,0(sp)
   203e4:	dec00204 	addi	sp,sp,8
   203e8:	f800283a 	ret

000203ec <setI2CClock>:
#define DEBUG_PRINT(fmt, ...) printf(fmt "\n", ##__VA_ARGS__)
#else
#define DEBUG_PRINT(fmt, ...)
#endif

void setI2CClock(uint32_t frequency) {
   203ec:	defffa04 	addi	sp,sp,-24
   203f0:	dfc00515 	stw	ra,20(sp)
   203f4:	df000415 	stw	fp,16(sp)
   203f8:	df000404 	addi	fp,sp,16
   203fc:	e13fff15 	stw	r4,-4(fp)
    uint32_t scl_period = I2C_SYSTEM_CLOCK / frequency;
   20400:	e17fff17 	ldw	r5,-4(fp)
   20404:	0100bef4 	movhi	r4,763
   20408:	213c2004 	addi	r4,r4,-3968
   2040c:	00209400 	call	20940 <__udivsi3>
   20410:	e0bffc15 	stw	r2,-16(fp)
    uint32_t scl_high = scl_period / 2;
   20414:	e0bffc17 	ldw	r2,-16(fp)
   20418:	1004d07a 	srli	r2,r2,1
   2041c:	e0bffd15 	stw	r2,-12(fp)
    uint32_t scl_low = scl_period - scl_high;
   20420:	e0fffc17 	ldw	r3,-16(fp)
   20424:	e0bffd17 	ldw	r2,-12(fp)
   20428:	1885c83a 	sub	r2,r3,r2
   2042c:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(I2C_BASE, scl_high);
   20430:	e0fffd17 	ldw	r3,-12(fp)
   20434:	00800134 	movhi	r2,4
   20438:	10841904 	addi	r2,r2,4196
   2043c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(I2C_BASE, scl_low);
   20440:	e0fffe17 	ldw	r3,-8(fp)
   20444:	00800134 	movhi	r2,4
   20448:	10841804 	addi	r2,r2,4192
   2044c:	10c00035 	stwio	r3,0(r2)
}
   20450:	0001883a 	nop
   20454:	e037883a 	mov	sp,fp
   20458:	dfc00117 	ldw	ra,4(sp)
   2045c:	df000017 	ldw	fp,0(sp)
   20460:	dec00204 	addi	sp,sp,8
   20464:	f800283a 	ret

00020468 <checkI2CReady>:

bool checkI2CReady(void) {
   20468:	defffe04 	addi	sp,sp,-8
   2046c:	df000115 	stw	fp,4(sp)
   20470:	df000104 	addi	fp,sp,4
    uint32_t status = IORD_ALT_AVALON_I2C_STATUS(I2C_BASE);
   20474:	00800134 	movhi	r2,4
   20478:	10841504 	addi	r2,r2,4180
   2047c:	10800037 	ldwio	r2,0(r2)
   20480:	e0bfff15 	stw	r2,-4(fp)
    return (status & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK) != 0;
   20484:	e0bfff17 	ldw	r2,-4(fp)
   20488:	1080004c 	andi	r2,r2,1
   2048c:	1004c03a 	cmpne	r2,r2,zero
}
   20490:	e037883a 	mov	sp,fp
   20494:	df000017 	ldw	fp,0(sp)
   20498:	dec00104 	addi	sp,sp,4
   2049c:	f800283a 	ret

000204a0 <TFR_CMD>:

u8 TFR_CMD(u8 STA, u8 STO, u8 AD, u8 RW_D) {
   204a0:	defffb04 	addi	sp,sp,-20
   204a4:	df000415 	stw	fp,16(sp)
   204a8:	df000404 	addi	fp,sp,16
   204ac:	2011883a 	mov	r8,r4
   204b0:	2809883a 	mov	r4,r5
   204b4:	3007883a 	mov	r3,r6
   204b8:	3805883a 	mov	r2,r7
   204bc:	e23ffc05 	stb	r8,-16(fp)
   204c0:	e13ffd05 	stb	r4,-12(fp)
   204c4:	e0fffe05 	stb	r3,-8(fp)
   204c8:	e0bfff05 	stb	r2,-4(fp)
    return (STA << 9) | (STO << 8) | (AD << 1) | RW_D;
   204cc:	e0bffc03 	ldbu	r2,-16(fp)
   204d0:	1004927a 	slli	r2,r2,9
   204d4:	1007883a 	mov	r3,r2
   204d8:	e0bffd03 	ldbu	r2,-12(fp)
   204dc:	1004923a 	slli	r2,r2,8
   204e0:	1884b03a 	or	r2,r3,r2
   204e4:	1007883a 	mov	r3,r2
   204e8:	e0bffe03 	ldbu	r2,-8(fp)
   204ec:	1085883a 	add	r2,r2,r2
   204f0:	1884b03a 	or	r2,r3,r2
   204f4:	1007883a 	mov	r3,r2
   204f8:	e0bfff03 	ldbu	r2,-4(fp)
   204fc:	1884b03a 	or	r2,r3,r2
}
   20500:	e037883a 	mov	sp,fp
   20504:	df000017 	ldw	fp,0(sp)
   20508:	dec00104 	addi	sp,sp,4
   2050c:	f800283a 	ret

00020510 <bno055_i2c_read>:

int8_t bno055_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length) {
   20510:	defff904 	addi	sp,sp,-28
   20514:	dfc00615 	stw	ra,24(sp)
   20518:	df000515 	stw	fp,20(sp)
   2051c:	df000504 	addi	fp,sp,20
   20520:	2807883a 	mov	r3,r5
   20524:	e1bffe15 	stw	r6,-8(fp)
   20528:	3805883a 	mov	r2,r7
   2052c:	e13ffc05 	stb	r4,-16(fp)
   20530:	e0fffd05 	stb	r3,-12(fp)
   20534:	e0bfff0d 	sth	r2,-4(fp)
    int32_t i;
    for (i = 0; i < length; i++) {
   20538:	e03ffb15 	stw	zero,-20(fp)
   2053c:	00002606 	br	205d8 <bno055_i2c_read+0xc8>
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 0, dev_id, 0));
   20540:	e0bffc03 	ldbu	r2,-16(fp)
   20544:	000f883a 	mov	r7,zero
   20548:	100d883a 	mov	r6,r2
   2054c:	000b883a 	mov	r5,zero
   20550:	01000044 	movi	r4,1
   20554:	00204a00 	call	204a0 <TFR_CMD>
   20558:	10c03fcc 	andi	r3,r2,255
   2055c:	00800134 	movhi	r2,4
   20560:	10841004 	addi	r2,r2,4160
   20564:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, reg_addr + i);
   20568:	e0fffd03 	ldbu	r3,-12(fp)
   2056c:	e0bffb17 	ldw	r2,-20(fp)
   20570:	1887883a 	add	r3,r3,r2
   20574:	00800134 	movhi	r2,4
   20578:	10841004 	addi	r2,r2,4160
   2057c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 1, dev_id, 1));
   20580:	e0bffc03 	ldbu	r2,-16(fp)
   20584:	01c00044 	movi	r7,1
   20588:	100d883a 	mov	r6,r2
   2058c:	01400044 	movi	r5,1
   20590:	01000044 	movi	r4,1
   20594:	00204a00 	call	204a0 <TFR_CMD>
   20598:	10c03fcc 	andi	r3,r2,255
   2059c:	00800134 	movhi	r2,4
   205a0:	10841004 	addi	r2,r2,4160
   205a4:	10c00035 	stwio	r3,0(r2)
        reg_data[i] = IORD_ALT_AVALON_I2C_RX_DATA(I2C_BASE);
   205a8:	e0bffb17 	ldw	r2,-20(fp)
   205ac:	e0fffe17 	ldw	r3,-8(fp)
   205b0:	1887883a 	add	r3,r3,r2
   205b4:	00800134 	movhi	r2,4
   205b8:	10841104 	addi	r2,r2,4164
   205bc:	10800037 	ldwio	r2,0(r2)
   205c0:	18800005 	stb	r2,0(r3)
        usleep(1000);
   205c4:	0100fa04 	movi	r4,1000
   205c8:	0023eac0 	call	23eac <usleep>
    return (STA << 9) | (STO << 8) | (AD << 1) | RW_D;
}

int8_t bno055_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length) {
    int32_t i;
    for (i = 0; i < length; i++) {
   205cc:	e0bffb17 	ldw	r2,-20(fp)
   205d0:	10800044 	addi	r2,r2,1
   205d4:	e0bffb15 	stw	r2,-20(fp)
   205d8:	e0bfff0b 	ldhu	r2,-4(fp)
   205dc:	e0fffb17 	ldw	r3,-20(fp)
   205e0:	18bfd716 	blt	r3,r2,20540 <__alt_data_end+0xfffe0540>
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, reg_addr + i);
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 1, dev_id, 1));
        reg_data[i] = IORD_ALT_AVALON_I2C_RX_DATA(I2C_BASE);
        usleep(1000);
    }
    return 0;
   205e4:	0005883a 	mov	r2,zero
}
   205e8:	e037883a 	mov	sp,fp
   205ec:	dfc00117 	ldw	ra,4(sp)
   205f0:	df000017 	ldw	fp,0(sp)
   205f4:	dec00204 	addi	sp,sp,8
   205f8:	f800283a 	ret

000205fc <bno055_i2c_write>:

int8_t bno055_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length) {
   205fc:	defff904 	addi	sp,sp,-28
   20600:	dfc00615 	stw	ra,24(sp)
   20604:	df000515 	stw	fp,20(sp)
   20608:	df000504 	addi	fp,sp,20
   2060c:	2807883a 	mov	r3,r5
   20610:	e1bffe15 	stw	r6,-8(fp)
   20614:	3805883a 	mov	r2,r7
   20618:	e13ffc05 	stb	r4,-16(fp)
   2061c:	e0fffd05 	stb	r3,-12(fp)
   20620:	e0bfff0d 	sth	r2,-4(fp)
    int32_t i;
    for (i = 0; i < length; i++) {
   20624:	e03ffb15 	stw	zero,-20(fp)
   20628:	00002106 	br	206b0 <bno055_i2c_write+0xb4>
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, TFR_CMD(1, 0, dev_id, 0));
   2062c:	e0bffc03 	ldbu	r2,-16(fp)
   20630:	000f883a 	mov	r7,zero
   20634:	100d883a 	mov	r6,r2
   20638:	000b883a 	mov	r5,zero
   2063c:	01000044 	movi	r4,1
   20640:	00204a00 	call	204a0 <TFR_CMD>
   20644:	10c03fcc 	andi	r3,r2,255
   20648:	00800134 	movhi	r2,4
   2064c:	10841004 	addi	r2,r2,4160
   20650:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, reg_addr + i);
   20654:	e0fffd03 	ldbu	r3,-12(fp)
   20658:	e0bffb17 	ldw	r2,-20(fp)
   2065c:	1887883a 	add	r3,r3,r2
   20660:	00800134 	movhi	r2,4
   20664:	10841004 	addi	r2,r2,4160
   20668:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_AVALON_I2C_TX_DATA(I2C_BASE, reg_data[i]);
   2066c:	e0bffb17 	ldw	r2,-20(fp)
   20670:	e0fffe17 	ldw	r3,-8(fp)
   20674:	1885883a 	add	r2,r3,r2
   20678:	10800003 	ldbu	r2,0(r2)
   2067c:	10c03fcc 	andi	r3,r2,255
   20680:	00800134 	movhi	r2,4
   20684:	10841004 	addi	r2,r2,4160
   20688:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, STOP_BIT);
   2068c:	00c04004 	movi	r3,256
   20690:	00800134 	movhi	r2,4
   20694:	10841004 	addi	r2,r2,4160
   20698:	10c00035 	stwio	r3,0(r2)
        usleep(1000);
   2069c:	0100fa04 	movi	r4,1000
   206a0:	0023eac0 	call	23eac <usleep>
    return 0;
}

int8_t bno055_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length) {
    int32_t i;
    for (i = 0; i < length; i++) {
   206a4:	e0bffb17 	ldw	r2,-20(fp)
   206a8:	10800044 	addi	r2,r2,1
   206ac:	e0bffb15 	stw	r2,-20(fp)
   206b0:	e0bfff0b 	ldhu	r2,-4(fp)
   206b4:	e0fffb17 	ldw	r3,-20(fp)
   206b8:	18bfdc16 	blt	r3,r2,2062c <__alt_data_end+0xfffe062c>
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, reg_addr + i);
        IOWR_ALT_AVALON_I2C_TX_DATA(I2C_BASE, reg_data[i]);
        IOWR_ALT_AVALON_I2C_TFR_CMD(I2C_BASE, STOP_BIT);
        usleep(1000);
    }
    return 0;
   206bc:	0005883a 	mov	r2,zero
}
   206c0:	e037883a 	mov	sp,fp
   206c4:	dfc00117 	ldw	ra,4(sp)
   206c8:	df000017 	ldw	fp,0(sp)
   206cc:	dec00204 	addi	sp,sp,8
   206d0:	f800283a 	ret

000206d4 <bno055_delay_ms>:

void bno055_delay_ms(uint32_t period) {
   206d4:	defffd04 	addi	sp,sp,-12
   206d8:	dfc00215 	stw	ra,8(sp)
   206dc:	df000115 	stw	fp,4(sp)
   206e0:	df000104 	addi	fp,sp,4
   206e4:	e13fff15 	stw	r4,-4(fp)
    usleep(period * 1000);
   206e8:	0140fa04 	movi	r5,1000
   206ec:	e13fff17 	ldw	r4,-4(fp)
   206f0:	00209fc0 	call	209fc <__mulsi3>
   206f4:	1009883a 	mov	r4,r2
   206f8:	0023eac0 	call	23eac <usleep>
}
   206fc:	0001883a 	nop
   20700:	e037883a 	mov	sp,fp
   20704:	dfc00117 	ldw	ra,4(sp)
   20708:	df000017 	ldw	fp,0(sp)
   2070c:	dec00204 	addi	sp,sp,8
   20710:	f800283a 	ret

00020714 <IMU_init>:


// Function to initialize the IMU device
int8_t IMU_init(void) {
   20714:	defff904 	addi	sp,sp,-28
   20718:	dfc00615 	stw	ra,24(sp)
   2071c:	df000515 	stw	fp,20(sp)
   20720:	df000504 	addi	fp,sp,20
    int8_t rslt;
    struct bno055_t bno055;
    bno055.bus_read = bno055_i2c_read;
   20724:	008000b4 	movhi	r2,2
   20728:	10814404 	addi	r2,r2,1296
   2072c:	e0bffe15 	stw	r2,-8(fp)
    bno055.bus_write = bno055_i2c_write;
   20730:	008000b4 	movhi	r2,2
   20734:	10817f04 	addi	r2,r2,1532
   20738:	e0bffd15 	stw	r2,-12(fp)
    bno055.delay_msec = bno055_delay_ms;
   2073c:	008000b4 	movhi	r2,2
   20740:	1081b504 	addi	r2,r2,1748
   20744:	e0bfff15 	stw	r2,-4(fp)
    bno055.dev_addr = BNO055_ADDR;
   20748:	00800a04 	movi	r2,40
   2074c:	e0bffc45 	stb	r2,-15(fp)

    DEBUG_PRINT("Initializing I2C bus...");
   20750:	010000f4 	movhi	r4,3
   20754:	21222e04 	addi	r4,r4,-30536
   20758:	0020ae40 	call	20ae4 <puts>

    // Set I2C clock frequency
    setI2CClock(400000);  // Set to 400 kHz as per BNO055 spec
   2075c:	010001b4 	movhi	r4,6
   20760:	2106a004 	addi	r4,r4,6784
   20764:	00203ec0 	call	203ec <setI2CClock>

    // Wait until I2C is ready
    while (!checkI2CReady()) {
   20768:	00000206 	br	20774 <IMU_init+0x60>
        usleep(1000);  // Sleep for 1 ms
   2076c:	0100fa04 	movi	r4,1000
   20770:	0023eac0 	call	23eac <usleep>

    // Set I2C clock frequency
    setI2CClock(400000);  // Set to 400 kHz as per BNO055 spec

    // Wait until I2C is ready
    while (!checkI2CReady()) {
   20774:	00204680 	call	20468 <checkI2CReady>
   20778:	1080005c 	xori	r2,r2,1
   2077c:	10803fcc 	andi	r2,r2,255
   20780:	103ffa1e 	bne	r2,zero,2076c <__alt_data_end+0xfffe076c>
        usleep(1000);  // Sleep for 1 ms
    }

    DEBUG_PRINT("I2C bus is ready.");
   20784:	010000f4 	movhi	r4,3
   20788:	21223404 	addi	r4,r4,-30512
   2078c:	0020ae40 	call	20ae4 <puts>

    rslt = bno055_init(&bno055);
   20790:	e0bffc04 	addi	r2,fp,-16
   20794:	1009883a 	mov	r4,r2
   20798:	002026c0 	call	2026c <bno055_init>
   2079c:	e0bffb05 	stb	r2,-20(fp)
    if (rslt != BNO055_SUCCESS) {
   207a0:	e0bffb07 	ldb	r2,-20(fp)
   207a4:	10000526 	beq	r2,zero,207bc <IMU_init+0xa8>
        DEBUG_PRINT("Failed to initialize IMU.");
   207a8:	010000f4 	movhi	r4,3
   207ac:	21223904 	addi	r4,r4,-30492
   207b0:	0020ae40 	call	20ae4 <puts>
        return rslt;
   207b4:	e0bffb03 	ldbu	r2,-20(fp)
   207b8:	00000406 	br	207cc <IMU_init+0xb8>
    }

    DEBUG_PRINT("IMU initialization successful.");
   207bc:	010000f4 	movhi	r4,3
   207c0:	21224004 	addi	r4,r4,-30464
   207c4:	0020ae40 	call	20ae4 <puts>
    return BNO055_SUCCESS;
   207c8:	0005883a 	mov	r2,zero
}
   207cc:	e037883a 	mov	sp,fp
   207d0:	dfc00117 	ldw	ra,4(sp)
   207d4:	df000017 	ldw	fp,0(sp)
   207d8:	dec00204 	addi	sp,sp,8
   207dc:	f800283a 	ret

000207e0 <main>:

int main() {
   207e0:	defffe04 	addi	sp,sp,-8
   207e4:	dfc00115 	stw	ra,4(sp)
   207e8:	df000015 	stw	fp,0(sp)
   207ec:	d839883a 	mov	fp,sp
    if (IMU_init() != BNO055_SUCCESS) {
   207f0:	00207140 	call	20714 <IMU_init>
   207f4:	10803fcc 	andi	r2,r2,255
   207f8:	1080201c 	xori	r2,r2,128
   207fc:	10bfe004 	addi	r2,r2,-128
   20800:	10000526 	beq	r2,zero,20818 <main+0x38>
        DEBUG_PRINT("Failed to initialize IMU.");
   20804:	010000f4 	movhi	r4,3
   20808:	21223904 	addi	r4,r4,-30492
   2080c:	0020ae40 	call	20ae4 <puts>
        return -1;
   20810:	00bfffc4 	movi	r2,-1
   20814:	00000706 	br	20834 <main+0x54>
    }

    // Device is initialized, perform further operations
    DEBUG_PRINT("Device initialized and ready for further operations.");
   20818:	010000f4 	movhi	r4,3
   2081c:	21224804 	addi	r4,r4,-30432
   20820:	0020ae40 	call	20ae4 <puts>

    // Implement further device operations, like continuous data reading
    while (1) {
        // Placeholder for reading data continuously or handling commands
        usleep(100000);  // Sleep to simulate periodic data read
   20824:	010000b4 	movhi	r4,2
   20828:	2121a804 	addi	r4,r4,-31072
   2082c:	0023eac0 	call	23eac <usleep>
    }
   20830:	003ffc06 	br	20824 <__alt_data_end+0xfffe0824>

    return 0;
}
   20834:	e037883a 	mov	sp,fp
   20838:	dfc00117 	ldw	ra,4(sp)
   2083c:	df000017 	ldw	fp,0(sp)
   20840:	dec00204 	addi	sp,sp,8
   20844:	f800283a 	ret

00020848 <__divsi3>:
   20848:	20001b16 	blt	r4,zero,208b8 <__divsi3+0x70>
   2084c:	000f883a 	mov	r7,zero
   20850:	28001616 	blt	r5,zero,208ac <__divsi3+0x64>
   20854:	200d883a 	mov	r6,r4
   20858:	29001a2e 	bgeu	r5,r4,208c4 <__divsi3+0x7c>
   2085c:	00800804 	movi	r2,32
   20860:	00c00044 	movi	r3,1
   20864:	00000106 	br	2086c <__divsi3+0x24>
   20868:	10000d26 	beq	r2,zero,208a0 <__divsi3+0x58>
   2086c:	294b883a 	add	r5,r5,r5
   20870:	10bfffc4 	addi	r2,r2,-1
   20874:	18c7883a 	add	r3,r3,r3
   20878:	293ffb36 	bltu	r5,r4,20868 <__alt_data_end+0xfffe0868>
   2087c:	0005883a 	mov	r2,zero
   20880:	18000726 	beq	r3,zero,208a0 <__divsi3+0x58>
   20884:	0005883a 	mov	r2,zero
   20888:	31400236 	bltu	r6,r5,20894 <__divsi3+0x4c>
   2088c:	314dc83a 	sub	r6,r6,r5
   20890:	10c4b03a 	or	r2,r2,r3
   20894:	1806d07a 	srli	r3,r3,1
   20898:	280ad07a 	srli	r5,r5,1
   2089c:	183ffa1e 	bne	r3,zero,20888 <__alt_data_end+0xfffe0888>
   208a0:	38000126 	beq	r7,zero,208a8 <__divsi3+0x60>
   208a4:	0085c83a 	sub	r2,zero,r2
   208a8:	f800283a 	ret
   208ac:	014bc83a 	sub	r5,zero,r5
   208b0:	39c0005c 	xori	r7,r7,1
   208b4:	003fe706 	br	20854 <__alt_data_end+0xfffe0854>
   208b8:	0109c83a 	sub	r4,zero,r4
   208bc:	01c00044 	movi	r7,1
   208c0:	003fe306 	br	20850 <__alt_data_end+0xfffe0850>
   208c4:	00c00044 	movi	r3,1
   208c8:	003fee06 	br	20884 <__alt_data_end+0xfffe0884>

000208cc <__modsi3>:
   208cc:	20001716 	blt	r4,zero,2092c <__modsi3+0x60>
   208d0:	000f883a 	mov	r7,zero
   208d4:	2005883a 	mov	r2,r4
   208d8:	28001216 	blt	r5,zero,20924 <__modsi3+0x58>
   208dc:	2900162e 	bgeu	r5,r4,20938 <__modsi3+0x6c>
   208e0:	01800804 	movi	r6,32
   208e4:	00c00044 	movi	r3,1
   208e8:	00000106 	br	208f0 <__modsi3+0x24>
   208ec:	30000a26 	beq	r6,zero,20918 <__modsi3+0x4c>
   208f0:	294b883a 	add	r5,r5,r5
   208f4:	31bfffc4 	addi	r6,r6,-1
   208f8:	18c7883a 	add	r3,r3,r3
   208fc:	293ffb36 	bltu	r5,r4,208ec <__alt_data_end+0xfffe08ec>
   20900:	18000526 	beq	r3,zero,20918 <__modsi3+0x4c>
   20904:	1806d07a 	srli	r3,r3,1
   20908:	11400136 	bltu	r2,r5,20910 <__modsi3+0x44>
   2090c:	1145c83a 	sub	r2,r2,r5
   20910:	280ad07a 	srli	r5,r5,1
   20914:	183ffb1e 	bne	r3,zero,20904 <__alt_data_end+0xfffe0904>
   20918:	38000126 	beq	r7,zero,20920 <__modsi3+0x54>
   2091c:	0085c83a 	sub	r2,zero,r2
   20920:	f800283a 	ret
   20924:	014bc83a 	sub	r5,zero,r5
   20928:	003fec06 	br	208dc <__alt_data_end+0xfffe08dc>
   2092c:	0109c83a 	sub	r4,zero,r4
   20930:	01c00044 	movi	r7,1
   20934:	003fe706 	br	208d4 <__alt_data_end+0xfffe08d4>
   20938:	00c00044 	movi	r3,1
   2093c:	003ff106 	br	20904 <__alt_data_end+0xfffe0904>

00020940 <__udivsi3>:
   20940:	200d883a 	mov	r6,r4
   20944:	2900152e 	bgeu	r5,r4,2099c <__udivsi3+0x5c>
   20948:	28001416 	blt	r5,zero,2099c <__udivsi3+0x5c>
   2094c:	00800804 	movi	r2,32
   20950:	00c00044 	movi	r3,1
   20954:	00000206 	br	20960 <__udivsi3+0x20>
   20958:	10000e26 	beq	r2,zero,20994 <__udivsi3+0x54>
   2095c:	28000516 	blt	r5,zero,20974 <__udivsi3+0x34>
   20960:	294b883a 	add	r5,r5,r5
   20964:	10bfffc4 	addi	r2,r2,-1
   20968:	18c7883a 	add	r3,r3,r3
   2096c:	293ffa36 	bltu	r5,r4,20958 <__alt_data_end+0xfffe0958>
   20970:	18000826 	beq	r3,zero,20994 <__udivsi3+0x54>
   20974:	0005883a 	mov	r2,zero
   20978:	31400236 	bltu	r6,r5,20984 <__udivsi3+0x44>
   2097c:	314dc83a 	sub	r6,r6,r5
   20980:	10c4b03a 	or	r2,r2,r3
   20984:	1806d07a 	srli	r3,r3,1
   20988:	280ad07a 	srli	r5,r5,1
   2098c:	183ffa1e 	bne	r3,zero,20978 <__alt_data_end+0xfffe0978>
   20990:	f800283a 	ret
   20994:	0005883a 	mov	r2,zero
   20998:	f800283a 	ret
   2099c:	00c00044 	movi	r3,1
   209a0:	003ff406 	br	20974 <__alt_data_end+0xfffe0974>

000209a4 <__umodsi3>:
   209a4:	2005883a 	mov	r2,r4
   209a8:	2900122e 	bgeu	r5,r4,209f4 <__umodsi3+0x50>
   209ac:	28001116 	blt	r5,zero,209f4 <__umodsi3+0x50>
   209b0:	01800804 	movi	r6,32
   209b4:	00c00044 	movi	r3,1
   209b8:	00000206 	br	209c4 <__umodsi3+0x20>
   209bc:	30000c26 	beq	r6,zero,209f0 <__umodsi3+0x4c>
   209c0:	28000516 	blt	r5,zero,209d8 <__umodsi3+0x34>
   209c4:	294b883a 	add	r5,r5,r5
   209c8:	31bfffc4 	addi	r6,r6,-1
   209cc:	18c7883a 	add	r3,r3,r3
   209d0:	293ffa36 	bltu	r5,r4,209bc <__alt_data_end+0xfffe09bc>
   209d4:	18000626 	beq	r3,zero,209f0 <__umodsi3+0x4c>
   209d8:	1806d07a 	srli	r3,r3,1
   209dc:	11400136 	bltu	r2,r5,209e4 <__umodsi3+0x40>
   209e0:	1145c83a 	sub	r2,r2,r5
   209e4:	280ad07a 	srli	r5,r5,1
   209e8:	183ffb1e 	bne	r3,zero,209d8 <__alt_data_end+0xfffe09d8>
   209ec:	f800283a 	ret
   209f0:	f800283a 	ret
   209f4:	00c00044 	movi	r3,1
   209f8:	003ff706 	br	209d8 <__alt_data_end+0xfffe09d8>

000209fc <__mulsi3>:
   209fc:	0005883a 	mov	r2,zero
   20a00:	20000726 	beq	r4,zero,20a20 <__mulsi3+0x24>
   20a04:	20c0004c 	andi	r3,r4,1
   20a08:	2008d07a 	srli	r4,r4,1
   20a0c:	18000126 	beq	r3,zero,20a14 <__mulsi3+0x18>
   20a10:	1145883a 	add	r2,r2,r5
   20a14:	294b883a 	add	r5,r5,r5
   20a18:	203ffa1e 	bne	r4,zero,20a04 <__alt_data_end+0xfffe0a04>
   20a1c:	f800283a 	ret
   20a20:	f800283a 	ret

00020a24 <_puts_r>:
   20a24:	defff604 	addi	sp,sp,-40
   20a28:	dc000715 	stw	r16,28(sp)
   20a2c:	2021883a 	mov	r16,r4
   20a30:	2809883a 	mov	r4,r5
   20a34:	dc400815 	stw	r17,32(sp)
   20a38:	dfc00915 	stw	ra,36(sp)
   20a3c:	2823883a 	mov	r17,r5
   20a40:	0020af80 	call	20af8 <strlen>
   20a44:	10c00044 	addi	r3,r2,1
   20a48:	d8800115 	stw	r2,4(sp)
   20a4c:	008000f4 	movhi	r2,3
   20a50:	10a25604 	addi	r2,r2,-30376
   20a54:	d8800215 	stw	r2,8(sp)
   20a58:	00800044 	movi	r2,1
   20a5c:	d8800315 	stw	r2,12(sp)
   20a60:	00800084 	movi	r2,2
   20a64:	dc400015 	stw	r17,0(sp)
   20a68:	d8c00615 	stw	r3,24(sp)
   20a6c:	dec00415 	stw	sp,16(sp)
   20a70:	d8800515 	stw	r2,20(sp)
   20a74:	80000226 	beq	r16,zero,20a80 <_puts_r+0x5c>
   20a78:	80800e17 	ldw	r2,56(r16)
   20a7c:	10001426 	beq	r2,zero,20ad0 <_puts_r+0xac>
   20a80:	81400217 	ldw	r5,8(r16)
   20a84:	2880030b 	ldhu	r2,12(r5)
   20a88:	10c8000c 	andi	r3,r2,8192
   20a8c:	1800061e 	bne	r3,zero,20aa8 <_puts_r+0x84>
   20a90:	29001917 	ldw	r4,100(r5)
   20a94:	00f7ffc4 	movi	r3,-8193
   20a98:	10880014 	ori	r2,r2,8192
   20a9c:	20c6703a 	and	r3,r4,r3
   20aa0:	2880030d 	sth	r2,12(r5)
   20aa4:	28c01915 	stw	r3,100(r5)
   20aa8:	d9800404 	addi	r6,sp,16
   20aac:	8009883a 	mov	r4,r16
   20ab0:	0020f400 	call	20f40 <__sfvwrite_r>
   20ab4:	1000091e 	bne	r2,zero,20adc <_puts_r+0xb8>
   20ab8:	00800284 	movi	r2,10
   20abc:	dfc00917 	ldw	ra,36(sp)
   20ac0:	dc400817 	ldw	r17,32(sp)
   20ac4:	dc000717 	ldw	r16,28(sp)
   20ac8:	dec00a04 	addi	sp,sp,40
   20acc:	f800283a 	ret
   20ad0:	8009883a 	mov	r4,r16
   20ad4:	0020ef00 	call	20ef0 <__sinit>
   20ad8:	003fe906 	br	20a80 <__alt_data_end+0xfffe0a80>
   20adc:	00bfffc4 	movi	r2,-1
   20ae0:	003ff606 	br	20abc <__alt_data_end+0xfffe0abc>

00020ae4 <puts>:
   20ae4:	008000f4 	movhi	r2,3
   20ae8:	10a93c04 	addi	r2,r2,-23312
   20aec:	200b883a 	mov	r5,r4
   20af0:	11000017 	ldw	r4,0(r2)
   20af4:	0020a241 	jmpi	20a24 <_puts_r>

00020af8 <strlen>:
   20af8:	208000cc 	andi	r2,r4,3
   20afc:	10002026 	beq	r2,zero,20b80 <strlen+0x88>
   20b00:	20800007 	ldb	r2,0(r4)
   20b04:	10002026 	beq	r2,zero,20b88 <strlen+0x90>
   20b08:	2005883a 	mov	r2,r4
   20b0c:	00000206 	br	20b18 <strlen+0x20>
   20b10:	10c00007 	ldb	r3,0(r2)
   20b14:	18001826 	beq	r3,zero,20b78 <strlen+0x80>
   20b18:	10800044 	addi	r2,r2,1
   20b1c:	10c000cc 	andi	r3,r2,3
   20b20:	183ffb1e 	bne	r3,zero,20b10 <__alt_data_end+0xfffe0b10>
   20b24:	10c00017 	ldw	r3,0(r2)
   20b28:	01ffbff4 	movhi	r7,65279
   20b2c:	39ffbfc4 	addi	r7,r7,-257
   20b30:	00ca303a 	nor	r5,zero,r3
   20b34:	01a02074 	movhi	r6,32897
   20b38:	19c7883a 	add	r3,r3,r7
   20b3c:	31a02004 	addi	r6,r6,-32640
   20b40:	1946703a 	and	r3,r3,r5
   20b44:	1986703a 	and	r3,r3,r6
   20b48:	1800091e 	bne	r3,zero,20b70 <strlen+0x78>
   20b4c:	10800104 	addi	r2,r2,4
   20b50:	10c00017 	ldw	r3,0(r2)
   20b54:	19cb883a 	add	r5,r3,r7
   20b58:	00c6303a 	nor	r3,zero,r3
   20b5c:	28c6703a 	and	r3,r5,r3
   20b60:	1986703a 	and	r3,r3,r6
   20b64:	183ff926 	beq	r3,zero,20b4c <__alt_data_end+0xfffe0b4c>
   20b68:	00000106 	br	20b70 <strlen+0x78>
   20b6c:	10800044 	addi	r2,r2,1
   20b70:	10c00007 	ldb	r3,0(r2)
   20b74:	183ffd1e 	bne	r3,zero,20b6c <__alt_data_end+0xfffe0b6c>
   20b78:	1105c83a 	sub	r2,r2,r4
   20b7c:	f800283a 	ret
   20b80:	2005883a 	mov	r2,r4
   20b84:	003fe706 	br	20b24 <__alt_data_end+0xfffe0b24>
   20b88:	0005883a 	mov	r2,zero
   20b8c:	f800283a 	ret

00020b90 <__fp_unlock>:
   20b90:	0005883a 	mov	r2,zero
   20b94:	f800283a 	ret

00020b98 <_cleanup_r>:
   20b98:	014000b4 	movhi	r5,2
   20b9c:	294ad204 	addi	r5,r5,11080
   20ba0:	00214cc1 	jmpi	214cc <_fwalk_reent>

00020ba4 <__sinit.part.1>:
   20ba4:	defff704 	addi	sp,sp,-36
   20ba8:	00c000b4 	movhi	r3,2
   20bac:	dfc00815 	stw	ra,32(sp)
   20bb0:	ddc00715 	stw	r23,28(sp)
   20bb4:	dd800615 	stw	r22,24(sp)
   20bb8:	dd400515 	stw	r21,20(sp)
   20bbc:	dd000415 	stw	r20,16(sp)
   20bc0:	dcc00315 	stw	r19,12(sp)
   20bc4:	dc800215 	stw	r18,8(sp)
   20bc8:	dc400115 	stw	r17,4(sp)
   20bcc:	dc000015 	stw	r16,0(sp)
   20bd0:	18c2e604 	addi	r3,r3,2968
   20bd4:	24000117 	ldw	r16,4(r4)
   20bd8:	20c00f15 	stw	r3,60(r4)
   20bdc:	2080bb04 	addi	r2,r4,748
   20be0:	00c000c4 	movi	r3,3
   20be4:	20c0b915 	stw	r3,740(r4)
   20be8:	2080ba15 	stw	r2,744(r4)
   20bec:	2000b815 	stw	zero,736(r4)
   20bf0:	05c00204 	movi	r23,8
   20bf4:	00800104 	movi	r2,4
   20bf8:	2025883a 	mov	r18,r4
   20bfc:	b80d883a 	mov	r6,r23
   20c00:	81001704 	addi	r4,r16,92
   20c04:	000b883a 	mov	r5,zero
   20c08:	80000015 	stw	zero,0(r16)
   20c0c:	80000115 	stw	zero,4(r16)
   20c10:	80000215 	stw	zero,8(r16)
   20c14:	8080030d 	sth	r2,12(r16)
   20c18:	80001915 	stw	zero,100(r16)
   20c1c:	8000038d 	sth	zero,14(r16)
   20c20:	80000415 	stw	zero,16(r16)
   20c24:	80000515 	stw	zero,20(r16)
   20c28:	80000615 	stw	zero,24(r16)
   20c2c:	00221240 	call	22124 <memset>
   20c30:	058000b4 	movhi	r22,2
   20c34:	94400217 	ldw	r17,8(r18)
   20c38:	054000b4 	movhi	r21,2
   20c3c:	050000b4 	movhi	r20,2
   20c40:	04c000b4 	movhi	r19,2
   20c44:	b58a0104 	addi	r22,r22,10244
   20c48:	ad4a1804 	addi	r21,r21,10336
   20c4c:	a50a3704 	addi	r20,r20,10460
   20c50:	9cca4e04 	addi	r19,r19,10552
   20c54:	85800815 	stw	r22,32(r16)
   20c58:	85400915 	stw	r21,36(r16)
   20c5c:	85000a15 	stw	r20,40(r16)
   20c60:	84c00b15 	stw	r19,44(r16)
   20c64:	84000715 	stw	r16,28(r16)
   20c68:	00800284 	movi	r2,10
   20c6c:	8880030d 	sth	r2,12(r17)
   20c70:	00800044 	movi	r2,1
   20c74:	b80d883a 	mov	r6,r23
   20c78:	89001704 	addi	r4,r17,92
   20c7c:	000b883a 	mov	r5,zero
   20c80:	88000015 	stw	zero,0(r17)
   20c84:	88000115 	stw	zero,4(r17)
   20c88:	88000215 	stw	zero,8(r17)
   20c8c:	88001915 	stw	zero,100(r17)
   20c90:	8880038d 	sth	r2,14(r17)
   20c94:	88000415 	stw	zero,16(r17)
   20c98:	88000515 	stw	zero,20(r17)
   20c9c:	88000615 	stw	zero,24(r17)
   20ca0:	00221240 	call	22124 <memset>
   20ca4:	94000317 	ldw	r16,12(r18)
   20ca8:	00800484 	movi	r2,18
   20cac:	8c400715 	stw	r17,28(r17)
   20cb0:	8d800815 	stw	r22,32(r17)
   20cb4:	8d400915 	stw	r21,36(r17)
   20cb8:	8d000a15 	stw	r20,40(r17)
   20cbc:	8cc00b15 	stw	r19,44(r17)
   20cc0:	8080030d 	sth	r2,12(r16)
   20cc4:	00800084 	movi	r2,2
   20cc8:	80000015 	stw	zero,0(r16)
   20ccc:	80000115 	stw	zero,4(r16)
   20cd0:	80000215 	stw	zero,8(r16)
   20cd4:	80001915 	stw	zero,100(r16)
   20cd8:	8080038d 	sth	r2,14(r16)
   20cdc:	80000415 	stw	zero,16(r16)
   20ce0:	80000515 	stw	zero,20(r16)
   20ce4:	80000615 	stw	zero,24(r16)
   20ce8:	b80d883a 	mov	r6,r23
   20cec:	000b883a 	mov	r5,zero
   20cf0:	81001704 	addi	r4,r16,92
   20cf4:	00221240 	call	22124 <memset>
   20cf8:	00800044 	movi	r2,1
   20cfc:	84000715 	stw	r16,28(r16)
   20d00:	85800815 	stw	r22,32(r16)
   20d04:	85400915 	stw	r21,36(r16)
   20d08:	85000a15 	stw	r20,40(r16)
   20d0c:	84c00b15 	stw	r19,44(r16)
   20d10:	90800e15 	stw	r2,56(r18)
   20d14:	dfc00817 	ldw	ra,32(sp)
   20d18:	ddc00717 	ldw	r23,28(sp)
   20d1c:	dd800617 	ldw	r22,24(sp)
   20d20:	dd400517 	ldw	r21,20(sp)
   20d24:	dd000417 	ldw	r20,16(sp)
   20d28:	dcc00317 	ldw	r19,12(sp)
   20d2c:	dc800217 	ldw	r18,8(sp)
   20d30:	dc400117 	ldw	r17,4(sp)
   20d34:	dc000017 	ldw	r16,0(sp)
   20d38:	dec00904 	addi	sp,sp,36
   20d3c:	f800283a 	ret

00020d40 <__fp_lock>:
   20d40:	0005883a 	mov	r2,zero
   20d44:	f800283a 	ret

00020d48 <__sfmoreglue>:
   20d48:	defffc04 	addi	sp,sp,-16
   20d4c:	dc800215 	stw	r18,8(sp)
   20d50:	2825883a 	mov	r18,r5
   20d54:	dc000015 	stw	r16,0(sp)
   20d58:	01401a04 	movi	r5,104
   20d5c:	2021883a 	mov	r16,r4
   20d60:	913fffc4 	addi	r4,r18,-1
   20d64:	dfc00315 	stw	ra,12(sp)
   20d68:	dc400115 	stw	r17,4(sp)
   20d6c:	00209fc0 	call	209fc <__mulsi3>
   20d70:	8009883a 	mov	r4,r16
   20d74:	11401d04 	addi	r5,r2,116
   20d78:	1023883a 	mov	r17,r2
   20d7c:	00215900 	call	21590 <_malloc_r>
   20d80:	1021883a 	mov	r16,r2
   20d84:	10000726 	beq	r2,zero,20da4 <__sfmoreglue+0x5c>
   20d88:	11000304 	addi	r4,r2,12
   20d8c:	10000015 	stw	zero,0(r2)
   20d90:	14800115 	stw	r18,4(r2)
   20d94:	11000215 	stw	r4,8(r2)
   20d98:	89801a04 	addi	r6,r17,104
   20d9c:	000b883a 	mov	r5,zero
   20da0:	00221240 	call	22124 <memset>
   20da4:	8005883a 	mov	r2,r16
   20da8:	dfc00317 	ldw	ra,12(sp)
   20dac:	dc800217 	ldw	r18,8(sp)
   20db0:	dc400117 	ldw	r17,4(sp)
   20db4:	dc000017 	ldw	r16,0(sp)
   20db8:	dec00404 	addi	sp,sp,16
   20dbc:	f800283a 	ret

00020dc0 <__sfp>:
   20dc0:	defffb04 	addi	sp,sp,-20
   20dc4:	dc000015 	stw	r16,0(sp)
   20dc8:	040000f4 	movhi	r16,3
   20dcc:	84293b04 	addi	r16,r16,-23316
   20dd0:	dcc00315 	stw	r19,12(sp)
   20dd4:	2027883a 	mov	r19,r4
   20dd8:	81000017 	ldw	r4,0(r16)
   20ddc:	dfc00415 	stw	ra,16(sp)
   20de0:	dc800215 	stw	r18,8(sp)
   20de4:	20800e17 	ldw	r2,56(r4)
   20de8:	dc400115 	stw	r17,4(sp)
   20dec:	1000021e 	bne	r2,zero,20df8 <__sfp+0x38>
   20df0:	0020ba40 	call	20ba4 <__sinit.part.1>
   20df4:	81000017 	ldw	r4,0(r16)
   20df8:	2480b804 	addi	r18,r4,736
   20dfc:	047fffc4 	movi	r17,-1
   20e00:	91000117 	ldw	r4,4(r18)
   20e04:	94000217 	ldw	r16,8(r18)
   20e08:	213fffc4 	addi	r4,r4,-1
   20e0c:	20000a16 	blt	r4,zero,20e38 <__sfp+0x78>
   20e10:	8080030f 	ldh	r2,12(r16)
   20e14:	10000c26 	beq	r2,zero,20e48 <__sfp+0x88>
   20e18:	80c01d04 	addi	r3,r16,116
   20e1c:	00000206 	br	20e28 <__sfp+0x68>
   20e20:	18bfe60f 	ldh	r2,-104(r3)
   20e24:	10000826 	beq	r2,zero,20e48 <__sfp+0x88>
   20e28:	213fffc4 	addi	r4,r4,-1
   20e2c:	1c3ffd04 	addi	r16,r3,-12
   20e30:	18c01a04 	addi	r3,r3,104
   20e34:	247ffa1e 	bne	r4,r17,20e20 <__alt_data_end+0xfffe0e20>
   20e38:	90800017 	ldw	r2,0(r18)
   20e3c:	10001d26 	beq	r2,zero,20eb4 <__sfp+0xf4>
   20e40:	1025883a 	mov	r18,r2
   20e44:	003fee06 	br	20e00 <__alt_data_end+0xfffe0e00>
   20e48:	00bfffc4 	movi	r2,-1
   20e4c:	8080038d 	sth	r2,14(r16)
   20e50:	00800044 	movi	r2,1
   20e54:	8080030d 	sth	r2,12(r16)
   20e58:	80001915 	stw	zero,100(r16)
   20e5c:	80000015 	stw	zero,0(r16)
   20e60:	80000215 	stw	zero,8(r16)
   20e64:	80000115 	stw	zero,4(r16)
   20e68:	80000415 	stw	zero,16(r16)
   20e6c:	80000515 	stw	zero,20(r16)
   20e70:	80000615 	stw	zero,24(r16)
   20e74:	01800204 	movi	r6,8
   20e78:	000b883a 	mov	r5,zero
   20e7c:	81001704 	addi	r4,r16,92
   20e80:	00221240 	call	22124 <memset>
   20e84:	8005883a 	mov	r2,r16
   20e88:	80000c15 	stw	zero,48(r16)
   20e8c:	80000d15 	stw	zero,52(r16)
   20e90:	80001115 	stw	zero,68(r16)
   20e94:	80001215 	stw	zero,72(r16)
   20e98:	dfc00417 	ldw	ra,16(sp)
   20e9c:	dcc00317 	ldw	r19,12(sp)
   20ea0:	dc800217 	ldw	r18,8(sp)
   20ea4:	dc400117 	ldw	r17,4(sp)
   20ea8:	dc000017 	ldw	r16,0(sp)
   20eac:	dec00504 	addi	sp,sp,20
   20eb0:	f800283a 	ret
   20eb4:	01400104 	movi	r5,4
   20eb8:	9809883a 	mov	r4,r19
   20ebc:	0020d480 	call	20d48 <__sfmoreglue>
   20ec0:	90800015 	stw	r2,0(r18)
   20ec4:	103fde1e 	bne	r2,zero,20e40 <__alt_data_end+0xfffe0e40>
   20ec8:	00800304 	movi	r2,12
   20ecc:	98800015 	stw	r2,0(r19)
   20ed0:	0005883a 	mov	r2,zero
   20ed4:	003ff006 	br	20e98 <__alt_data_end+0xfffe0e98>

00020ed8 <_cleanup>:
   20ed8:	008000f4 	movhi	r2,3
   20edc:	10a93b04 	addi	r2,r2,-23316
   20ee0:	11000017 	ldw	r4,0(r2)
   20ee4:	014000b4 	movhi	r5,2
   20ee8:	294ad204 	addi	r5,r5,11080
   20eec:	00214cc1 	jmpi	214cc <_fwalk_reent>

00020ef0 <__sinit>:
   20ef0:	20800e17 	ldw	r2,56(r4)
   20ef4:	10000126 	beq	r2,zero,20efc <__sinit+0xc>
   20ef8:	f800283a 	ret
   20efc:	0020ba41 	jmpi	20ba4 <__sinit.part.1>

00020f00 <__sfp_lock_acquire>:
   20f00:	f800283a 	ret

00020f04 <__sfp_lock_release>:
   20f04:	f800283a 	ret

00020f08 <__sinit_lock_acquire>:
   20f08:	f800283a 	ret

00020f0c <__sinit_lock_release>:
   20f0c:	f800283a 	ret

00020f10 <__fp_lock_all>:
   20f10:	008000f4 	movhi	r2,3
   20f14:	10a93c04 	addi	r2,r2,-23312
   20f18:	11000017 	ldw	r4,0(r2)
   20f1c:	014000b4 	movhi	r5,2
   20f20:	29435004 	addi	r5,r5,3392
   20f24:	00214081 	jmpi	21408 <_fwalk>

00020f28 <__fp_unlock_all>:
   20f28:	008000f4 	movhi	r2,3
   20f2c:	10a93c04 	addi	r2,r2,-23312
   20f30:	11000017 	ldw	r4,0(r2)
   20f34:	014000b4 	movhi	r5,2
   20f38:	2942e404 	addi	r5,r5,2960
   20f3c:	00214081 	jmpi	21408 <_fwalk>

00020f40 <__sfvwrite_r>:
   20f40:	30800217 	ldw	r2,8(r6)
   20f44:	10006726 	beq	r2,zero,210e4 <__sfvwrite_r+0x1a4>
   20f48:	28c0030b 	ldhu	r3,12(r5)
   20f4c:	defff404 	addi	sp,sp,-48
   20f50:	dd400715 	stw	r21,28(sp)
   20f54:	dd000615 	stw	r20,24(sp)
   20f58:	dc000215 	stw	r16,8(sp)
   20f5c:	dfc00b15 	stw	ra,44(sp)
   20f60:	df000a15 	stw	fp,40(sp)
   20f64:	ddc00915 	stw	r23,36(sp)
   20f68:	dd800815 	stw	r22,32(sp)
   20f6c:	dcc00515 	stw	r19,20(sp)
   20f70:	dc800415 	stw	r18,16(sp)
   20f74:	dc400315 	stw	r17,12(sp)
   20f78:	1880020c 	andi	r2,r3,8
   20f7c:	2821883a 	mov	r16,r5
   20f80:	202b883a 	mov	r21,r4
   20f84:	3029883a 	mov	r20,r6
   20f88:	10002726 	beq	r2,zero,21028 <__sfvwrite_r+0xe8>
   20f8c:	28800417 	ldw	r2,16(r5)
   20f90:	10002526 	beq	r2,zero,21028 <__sfvwrite_r+0xe8>
   20f94:	1880008c 	andi	r2,r3,2
   20f98:	a4400017 	ldw	r17,0(r20)
   20f9c:	10002a26 	beq	r2,zero,21048 <__sfvwrite_r+0x108>
   20fa0:	05a00034 	movhi	r22,32768
   20fa4:	0027883a 	mov	r19,zero
   20fa8:	0025883a 	mov	r18,zero
   20fac:	b5bf0004 	addi	r22,r22,-1024
   20fb0:	980d883a 	mov	r6,r19
   20fb4:	a809883a 	mov	r4,r21
   20fb8:	90004626 	beq	r18,zero,210d4 <__sfvwrite_r+0x194>
   20fbc:	900f883a 	mov	r7,r18
   20fc0:	b480022e 	bgeu	r22,r18,20fcc <__sfvwrite_r+0x8c>
   20fc4:	01e00034 	movhi	r7,32768
   20fc8:	39ff0004 	addi	r7,r7,-1024
   20fcc:	80800917 	ldw	r2,36(r16)
   20fd0:	81400717 	ldw	r5,28(r16)
   20fd4:	103ee83a 	callr	r2
   20fd8:	00805a0e 	bge	zero,r2,21144 <__sfvwrite_r+0x204>
   20fdc:	a0c00217 	ldw	r3,8(r20)
   20fe0:	98a7883a 	add	r19,r19,r2
   20fe4:	90a5c83a 	sub	r18,r18,r2
   20fe8:	1885c83a 	sub	r2,r3,r2
   20fec:	a0800215 	stw	r2,8(r20)
   20ff0:	103fef1e 	bne	r2,zero,20fb0 <__alt_data_end+0xfffe0fb0>
   20ff4:	0005883a 	mov	r2,zero
   20ff8:	dfc00b17 	ldw	ra,44(sp)
   20ffc:	df000a17 	ldw	fp,40(sp)
   21000:	ddc00917 	ldw	r23,36(sp)
   21004:	dd800817 	ldw	r22,32(sp)
   21008:	dd400717 	ldw	r21,28(sp)
   2100c:	dd000617 	ldw	r20,24(sp)
   21010:	dcc00517 	ldw	r19,20(sp)
   21014:	dc800417 	ldw	r18,16(sp)
   21018:	dc400317 	ldw	r17,12(sp)
   2101c:	dc000217 	ldw	r16,8(sp)
   21020:	dec00c04 	addi	sp,sp,48
   21024:	f800283a 	ret
   21028:	800b883a 	mov	r5,r16
   2102c:	a809883a 	mov	r4,r21
   21030:	00229a00 	call	229a0 <__swsetup_r>
   21034:	1000ee1e 	bne	r2,zero,213f0 <__sfvwrite_r+0x4b0>
   21038:	80c0030b 	ldhu	r3,12(r16)
   2103c:	a4400017 	ldw	r17,0(r20)
   21040:	1880008c 	andi	r2,r3,2
   21044:	103fd61e 	bne	r2,zero,20fa0 <__alt_data_end+0xfffe0fa0>
   21048:	1880004c 	andi	r2,r3,1
   2104c:	1000421e 	bne	r2,zero,21158 <__sfvwrite_r+0x218>
   21050:	0039883a 	mov	fp,zero
   21054:	0025883a 	mov	r18,zero
   21058:	90001a26 	beq	r18,zero,210c4 <__sfvwrite_r+0x184>
   2105c:	1880800c 	andi	r2,r3,512
   21060:	84c00217 	ldw	r19,8(r16)
   21064:	10002126 	beq	r2,zero,210ec <__sfvwrite_r+0x1ac>
   21068:	982f883a 	mov	r23,r19
   2106c:	94c09636 	bltu	r18,r19,212c8 <__sfvwrite_r+0x388>
   21070:	1881200c 	andi	r2,r3,1152
   21074:	1000a11e 	bne	r2,zero,212fc <__sfvwrite_r+0x3bc>
   21078:	81000017 	ldw	r4,0(r16)
   2107c:	b80d883a 	mov	r6,r23
   21080:	e00b883a 	mov	r5,fp
   21084:	0021fc80 	call	21fc8 <memmove>
   21088:	80c00217 	ldw	r3,8(r16)
   2108c:	81000017 	ldw	r4,0(r16)
   21090:	9005883a 	mov	r2,r18
   21094:	1ce7c83a 	sub	r19,r3,r19
   21098:	25cf883a 	add	r7,r4,r23
   2109c:	84c00215 	stw	r19,8(r16)
   210a0:	81c00015 	stw	r7,0(r16)
   210a4:	a0c00217 	ldw	r3,8(r20)
   210a8:	e0b9883a 	add	fp,fp,r2
   210ac:	90a5c83a 	sub	r18,r18,r2
   210b0:	18a7c83a 	sub	r19,r3,r2
   210b4:	a4c00215 	stw	r19,8(r20)
   210b8:	983fce26 	beq	r19,zero,20ff4 <__alt_data_end+0xfffe0ff4>
   210bc:	80c0030b 	ldhu	r3,12(r16)
   210c0:	903fe61e 	bne	r18,zero,2105c <__alt_data_end+0xfffe105c>
   210c4:	8f000017 	ldw	fp,0(r17)
   210c8:	8c800117 	ldw	r18,4(r17)
   210cc:	8c400204 	addi	r17,r17,8
   210d0:	003fe106 	br	21058 <__alt_data_end+0xfffe1058>
   210d4:	8cc00017 	ldw	r19,0(r17)
   210d8:	8c800117 	ldw	r18,4(r17)
   210dc:	8c400204 	addi	r17,r17,8
   210e0:	003fb306 	br	20fb0 <__alt_data_end+0xfffe0fb0>
   210e4:	0005883a 	mov	r2,zero
   210e8:	f800283a 	ret
   210ec:	81000017 	ldw	r4,0(r16)
   210f0:	80800417 	ldw	r2,16(r16)
   210f4:	11005a36 	bltu	r2,r4,21260 <__sfvwrite_r+0x320>
   210f8:	85c00517 	ldw	r23,20(r16)
   210fc:	95c05836 	bltu	r18,r23,21260 <__sfvwrite_r+0x320>
   21100:	00a00034 	movhi	r2,32768
   21104:	10bfffc4 	addi	r2,r2,-1
   21108:	9009883a 	mov	r4,r18
   2110c:	1480012e 	bgeu	r2,r18,21114 <__sfvwrite_r+0x1d4>
   21110:	1009883a 	mov	r4,r2
   21114:	b80b883a 	mov	r5,r23
   21118:	00208480 	call	20848 <__divsi3>
   2111c:	b80b883a 	mov	r5,r23
   21120:	1009883a 	mov	r4,r2
   21124:	00209fc0 	call	209fc <__mulsi3>
   21128:	81400717 	ldw	r5,28(r16)
   2112c:	80c00917 	ldw	r3,36(r16)
   21130:	100f883a 	mov	r7,r2
   21134:	e00d883a 	mov	r6,fp
   21138:	a809883a 	mov	r4,r21
   2113c:	183ee83a 	callr	r3
   21140:	00bfd816 	blt	zero,r2,210a4 <__alt_data_end+0xfffe10a4>
   21144:	8080030b 	ldhu	r2,12(r16)
   21148:	10801014 	ori	r2,r2,64
   2114c:	8080030d 	sth	r2,12(r16)
   21150:	00bfffc4 	movi	r2,-1
   21154:	003fa806 	br	20ff8 <__alt_data_end+0xfffe0ff8>
   21158:	0027883a 	mov	r19,zero
   2115c:	0011883a 	mov	r8,zero
   21160:	0039883a 	mov	fp,zero
   21164:	0025883a 	mov	r18,zero
   21168:	90001f26 	beq	r18,zero,211e8 <__sfvwrite_r+0x2a8>
   2116c:	40005a26 	beq	r8,zero,212d8 <__sfvwrite_r+0x398>
   21170:	982d883a 	mov	r22,r19
   21174:	94c0012e 	bgeu	r18,r19,2117c <__sfvwrite_r+0x23c>
   21178:	902d883a 	mov	r22,r18
   2117c:	81000017 	ldw	r4,0(r16)
   21180:	80800417 	ldw	r2,16(r16)
   21184:	b02f883a 	mov	r23,r22
   21188:	81c00517 	ldw	r7,20(r16)
   2118c:	1100032e 	bgeu	r2,r4,2119c <__sfvwrite_r+0x25c>
   21190:	80c00217 	ldw	r3,8(r16)
   21194:	38c7883a 	add	r3,r7,r3
   21198:	1d801816 	blt	r3,r22,211fc <__sfvwrite_r+0x2bc>
   2119c:	b1c03e16 	blt	r22,r7,21298 <__sfvwrite_r+0x358>
   211a0:	80800917 	ldw	r2,36(r16)
   211a4:	81400717 	ldw	r5,28(r16)
   211a8:	e00d883a 	mov	r6,fp
   211ac:	da000115 	stw	r8,4(sp)
   211b0:	a809883a 	mov	r4,r21
   211b4:	103ee83a 	callr	r2
   211b8:	102f883a 	mov	r23,r2
   211bc:	da000117 	ldw	r8,4(sp)
   211c0:	00bfe00e 	bge	zero,r2,21144 <__alt_data_end+0xfffe1144>
   211c4:	9de7c83a 	sub	r19,r19,r23
   211c8:	98001f26 	beq	r19,zero,21248 <__sfvwrite_r+0x308>
   211cc:	a0800217 	ldw	r2,8(r20)
   211d0:	e5f9883a 	add	fp,fp,r23
   211d4:	95e5c83a 	sub	r18,r18,r23
   211d8:	15efc83a 	sub	r23,r2,r23
   211dc:	a5c00215 	stw	r23,8(r20)
   211e0:	b83f8426 	beq	r23,zero,20ff4 <__alt_data_end+0xfffe0ff4>
   211e4:	903fe11e 	bne	r18,zero,2116c <__alt_data_end+0xfffe116c>
   211e8:	8f000017 	ldw	fp,0(r17)
   211ec:	8c800117 	ldw	r18,4(r17)
   211f0:	0011883a 	mov	r8,zero
   211f4:	8c400204 	addi	r17,r17,8
   211f8:	003fdb06 	br	21168 <__alt_data_end+0xfffe1168>
   211fc:	180d883a 	mov	r6,r3
   21200:	e00b883a 	mov	r5,fp
   21204:	da000115 	stw	r8,4(sp)
   21208:	d8c00015 	stw	r3,0(sp)
   2120c:	0021fc80 	call	21fc8 <memmove>
   21210:	d8c00017 	ldw	r3,0(sp)
   21214:	80800017 	ldw	r2,0(r16)
   21218:	800b883a 	mov	r5,r16
   2121c:	a809883a 	mov	r4,r21
   21220:	10c5883a 	add	r2,r2,r3
   21224:	80800015 	stw	r2,0(r16)
   21228:	d8c00015 	stw	r3,0(sp)
   2122c:	0022e680 	call	22e68 <_fflush_r>
   21230:	d8c00017 	ldw	r3,0(sp)
   21234:	da000117 	ldw	r8,4(sp)
   21238:	103fc21e 	bne	r2,zero,21144 <__alt_data_end+0xfffe1144>
   2123c:	182f883a 	mov	r23,r3
   21240:	9de7c83a 	sub	r19,r19,r23
   21244:	983fe11e 	bne	r19,zero,211cc <__alt_data_end+0xfffe11cc>
   21248:	800b883a 	mov	r5,r16
   2124c:	a809883a 	mov	r4,r21
   21250:	0022e680 	call	22e68 <_fflush_r>
   21254:	103fbb1e 	bne	r2,zero,21144 <__alt_data_end+0xfffe1144>
   21258:	0011883a 	mov	r8,zero
   2125c:	003fdb06 	br	211cc <__alt_data_end+0xfffe11cc>
   21260:	94c0012e 	bgeu	r18,r19,21268 <__sfvwrite_r+0x328>
   21264:	9027883a 	mov	r19,r18
   21268:	980d883a 	mov	r6,r19
   2126c:	e00b883a 	mov	r5,fp
   21270:	0021fc80 	call	21fc8 <memmove>
   21274:	80800217 	ldw	r2,8(r16)
   21278:	80c00017 	ldw	r3,0(r16)
   2127c:	14c5c83a 	sub	r2,r2,r19
   21280:	1cc7883a 	add	r3,r3,r19
   21284:	80800215 	stw	r2,8(r16)
   21288:	80c00015 	stw	r3,0(r16)
   2128c:	10004326 	beq	r2,zero,2139c <__sfvwrite_r+0x45c>
   21290:	9805883a 	mov	r2,r19
   21294:	003f8306 	br	210a4 <__alt_data_end+0xfffe10a4>
   21298:	b00d883a 	mov	r6,r22
   2129c:	e00b883a 	mov	r5,fp
   212a0:	da000115 	stw	r8,4(sp)
   212a4:	0021fc80 	call	21fc8 <memmove>
   212a8:	80800217 	ldw	r2,8(r16)
   212ac:	80c00017 	ldw	r3,0(r16)
   212b0:	da000117 	ldw	r8,4(sp)
   212b4:	1585c83a 	sub	r2,r2,r22
   212b8:	1dad883a 	add	r22,r3,r22
   212bc:	80800215 	stw	r2,8(r16)
   212c0:	85800015 	stw	r22,0(r16)
   212c4:	003fbf06 	br	211c4 <__alt_data_end+0xfffe11c4>
   212c8:	81000017 	ldw	r4,0(r16)
   212cc:	9027883a 	mov	r19,r18
   212d0:	902f883a 	mov	r23,r18
   212d4:	003f6906 	br	2107c <__alt_data_end+0xfffe107c>
   212d8:	900d883a 	mov	r6,r18
   212dc:	01400284 	movi	r5,10
   212e0:	e009883a 	mov	r4,fp
   212e4:	0021d9c0 	call	21d9c <memchr>
   212e8:	10003e26 	beq	r2,zero,213e4 <__sfvwrite_r+0x4a4>
   212ec:	10800044 	addi	r2,r2,1
   212f0:	1727c83a 	sub	r19,r2,fp
   212f4:	02000044 	movi	r8,1
   212f8:	003f9d06 	br	21170 <__alt_data_end+0xfffe1170>
   212fc:	80800517 	ldw	r2,20(r16)
   21300:	81400417 	ldw	r5,16(r16)
   21304:	81c00017 	ldw	r7,0(r16)
   21308:	10a7883a 	add	r19,r2,r2
   2130c:	9885883a 	add	r2,r19,r2
   21310:	1026d7fa 	srli	r19,r2,31
   21314:	396dc83a 	sub	r22,r7,r5
   21318:	b1000044 	addi	r4,r22,1
   2131c:	9885883a 	add	r2,r19,r2
   21320:	1027d07a 	srai	r19,r2,1
   21324:	2485883a 	add	r2,r4,r18
   21328:	980d883a 	mov	r6,r19
   2132c:	9880022e 	bgeu	r19,r2,21338 <__sfvwrite_r+0x3f8>
   21330:	1027883a 	mov	r19,r2
   21334:	100d883a 	mov	r6,r2
   21338:	18c1000c 	andi	r3,r3,1024
   2133c:	18001c26 	beq	r3,zero,213b0 <__sfvwrite_r+0x470>
   21340:	300b883a 	mov	r5,r6
   21344:	a809883a 	mov	r4,r21
   21348:	00215900 	call	21590 <_malloc_r>
   2134c:	102f883a 	mov	r23,r2
   21350:	10002926 	beq	r2,zero,213f8 <__sfvwrite_r+0x4b8>
   21354:	81400417 	ldw	r5,16(r16)
   21358:	b00d883a 	mov	r6,r22
   2135c:	1009883a 	mov	r4,r2
   21360:	0021e800 	call	21e80 <memcpy>
   21364:	8080030b 	ldhu	r2,12(r16)
   21368:	00fedfc4 	movi	r3,-1153
   2136c:	10c4703a 	and	r2,r2,r3
   21370:	10802014 	ori	r2,r2,128
   21374:	8080030d 	sth	r2,12(r16)
   21378:	bd89883a 	add	r4,r23,r22
   2137c:	9d8fc83a 	sub	r7,r19,r22
   21380:	85c00415 	stw	r23,16(r16)
   21384:	84c00515 	stw	r19,20(r16)
   21388:	81000015 	stw	r4,0(r16)
   2138c:	9027883a 	mov	r19,r18
   21390:	81c00215 	stw	r7,8(r16)
   21394:	902f883a 	mov	r23,r18
   21398:	003f3806 	br	2107c <__alt_data_end+0xfffe107c>
   2139c:	800b883a 	mov	r5,r16
   213a0:	a809883a 	mov	r4,r21
   213a4:	0022e680 	call	22e68 <_fflush_r>
   213a8:	103fb926 	beq	r2,zero,21290 <__alt_data_end+0xfffe1290>
   213ac:	003f6506 	br	21144 <__alt_data_end+0xfffe1144>
   213b0:	a809883a 	mov	r4,r21
   213b4:	002224c0 	call	2224c <_realloc_r>
   213b8:	102f883a 	mov	r23,r2
   213bc:	103fee1e 	bne	r2,zero,21378 <__alt_data_end+0xfffe1378>
   213c0:	81400417 	ldw	r5,16(r16)
   213c4:	a809883a 	mov	r4,r21
   213c8:	00230180 	call	23018 <_free_r>
   213cc:	8080030b 	ldhu	r2,12(r16)
   213d0:	00ffdfc4 	movi	r3,-129
   213d4:	1884703a 	and	r2,r3,r2
   213d8:	00c00304 	movi	r3,12
   213dc:	a8c00015 	stw	r3,0(r21)
   213e0:	003f5906 	br	21148 <__alt_data_end+0xfffe1148>
   213e4:	94c00044 	addi	r19,r18,1
   213e8:	02000044 	movi	r8,1
   213ec:	003f6006 	br	21170 <__alt_data_end+0xfffe1170>
   213f0:	00bfffc4 	movi	r2,-1
   213f4:	003f0006 	br	20ff8 <__alt_data_end+0xfffe0ff8>
   213f8:	00800304 	movi	r2,12
   213fc:	a8800015 	stw	r2,0(r21)
   21400:	8080030b 	ldhu	r2,12(r16)
   21404:	003f5006 	br	21148 <__alt_data_end+0xfffe1148>

00021408 <_fwalk>:
   21408:	defff704 	addi	sp,sp,-36
   2140c:	dd000415 	stw	r20,16(sp)
   21410:	dfc00815 	stw	ra,32(sp)
   21414:	ddc00715 	stw	r23,28(sp)
   21418:	dd800615 	stw	r22,24(sp)
   2141c:	dd400515 	stw	r21,20(sp)
   21420:	dcc00315 	stw	r19,12(sp)
   21424:	dc800215 	stw	r18,8(sp)
   21428:	dc400115 	stw	r17,4(sp)
   2142c:	dc000015 	stw	r16,0(sp)
   21430:	2500b804 	addi	r20,r4,736
   21434:	a0002326 	beq	r20,zero,214c4 <_fwalk+0xbc>
   21438:	282b883a 	mov	r21,r5
   2143c:	002f883a 	mov	r23,zero
   21440:	05800044 	movi	r22,1
   21444:	04ffffc4 	movi	r19,-1
   21448:	a4400117 	ldw	r17,4(r20)
   2144c:	a4800217 	ldw	r18,8(r20)
   21450:	8c7fffc4 	addi	r17,r17,-1
   21454:	88000d16 	blt	r17,zero,2148c <_fwalk+0x84>
   21458:	94000304 	addi	r16,r18,12
   2145c:	94800384 	addi	r18,r18,14
   21460:	8080000b 	ldhu	r2,0(r16)
   21464:	8c7fffc4 	addi	r17,r17,-1
   21468:	813ffd04 	addi	r4,r16,-12
   2146c:	b080042e 	bgeu	r22,r2,21480 <_fwalk+0x78>
   21470:	9080000f 	ldh	r2,0(r18)
   21474:	14c00226 	beq	r2,r19,21480 <_fwalk+0x78>
   21478:	a83ee83a 	callr	r21
   2147c:	b8aeb03a 	or	r23,r23,r2
   21480:	84001a04 	addi	r16,r16,104
   21484:	94801a04 	addi	r18,r18,104
   21488:	8cfff51e 	bne	r17,r19,21460 <__alt_data_end+0xfffe1460>
   2148c:	a5000017 	ldw	r20,0(r20)
   21490:	a03fed1e 	bne	r20,zero,21448 <__alt_data_end+0xfffe1448>
   21494:	b805883a 	mov	r2,r23
   21498:	dfc00817 	ldw	ra,32(sp)
   2149c:	ddc00717 	ldw	r23,28(sp)
   214a0:	dd800617 	ldw	r22,24(sp)
   214a4:	dd400517 	ldw	r21,20(sp)
   214a8:	dd000417 	ldw	r20,16(sp)
   214ac:	dcc00317 	ldw	r19,12(sp)
   214b0:	dc800217 	ldw	r18,8(sp)
   214b4:	dc400117 	ldw	r17,4(sp)
   214b8:	dc000017 	ldw	r16,0(sp)
   214bc:	dec00904 	addi	sp,sp,36
   214c0:	f800283a 	ret
   214c4:	002f883a 	mov	r23,zero
   214c8:	003ff206 	br	21494 <__alt_data_end+0xfffe1494>

000214cc <_fwalk_reent>:
   214cc:	defff704 	addi	sp,sp,-36
   214d0:	dd000415 	stw	r20,16(sp)
   214d4:	dfc00815 	stw	ra,32(sp)
   214d8:	ddc00715 	stw	r23,28(sp)
   214dc:	dd800615 	stw	r22,24(sp)
   214e0:	dd400515 	stw	r21,20(sp)
   214e4:	dcc00315 	stw	r19,12(sp)
   214e8:	dc800215 	stw	r18,8(sp)
   214ec:	dc400115 	stw	r17,4(sp)
   214f0:	dc000015 	stw	r16,0(sp)
   214f4:	2500b804 	addi	r20,r4,736
   214f8:	a0002326 	beq	r20,zero,21588 <_fwalk_reent+0xbc>
   214fc:	282b883a 	mov	r21,r5
   21500:	2027883a 	mov	r19,r4
   21504:	002f883a 	mov	r23,zero
   21508:	05800044 	movi	r22,1
   2150c:	04bfffc4 	movi	r18,-1
   21510:	a4400117 	ldw	r17,4(r20)
   21514:	a4000217 	ldw	r16,8(r20)
   21518:	8c7fffc4 	addi	r17,r17,-1
   2151c:	88000c16 	blt	r17,zero,21550 <_fwalk_reent+0x84>
   21520:	84000304 	addi	r16,r16,12
   21524:	8080000b 	ldhu	r2,0(r16)
   21528:	8c7fffc4 	addi	r17,r17,-1
   2152c:	817ffd04 	addi	r5,r16,-12
   21530:	b080052e 	bgeu	r22,r2,21548 <_fwalk_reent+0x7c>
   21534:	8080008f 	ldh	r2,2(r16)
   21538:	9809883a 	mov	r4,r19
   2153c:	14800226 	beq	r2,r18,21548 <_fwalk_reent+0x7c>
   21540:	a83ee83a 	callr	r21
   21544:	b8aeb03a 	or	r23,r23,r2
   21548:	84001a04 	addi	r16,r16,104
   2154c:	8cbff51e 	bne	r17,r18,21524 <__alt_data_end+0xfffe1524>
   21550:	a5000017 	ldw	r20,0(r20)
   21554:	a03fee1e 	bne	r20,zero,21510 <__alt_data_end+0xfffe1510>
   21558:	b805883a 	mov	r2,r23
   2155c:	dfc00817 	ldw	ra,32(sp)
   21560:	ddc00717 	ldw	r23,28(sp)
   21564:	dd800617 	ldw	r22,24(sp)
   21568:	dd400517 	ldw	r21,20(sp)
   2156c:	dd000417 	ldw	r20,16(sp)
   21570:	dcc00317 	ldw	r19,12(sp)
   21574:	dc800217 	ldw	r18,8(sp)
   21578:	dc400117 	ldw	r17,4(sp)
   2157c:	dc000017 	ldw	r16,0(sp)
   21580:	dec00904 	addi	sp,sp,36
   21584:	f800283a 	ret
   21588:	002f883a 	mov	r23,zero
   2158c:	003ff206 	br	21558 <__alt_data_end+0xfffe1558>

00021590 <_malloc_r>:
   21590:	defff504 	addi	sp,sp,-44
   21594:	dc800315 	stw	r18,12(sp)
   21598:	dfc00a15 	stw	ra,40(sp)
   2159c:	df000915 	stw	fp,36(sp)
   215a0:	ddc00815 	stw	r23,32(sp)
   215a4:	dd800715 	stw	r22,28(sp)
   215a8:	dd400615 	stw	r21,24(sp)
   215ac:	dd000515 	stw	r20,20(sp)
   215b0:	dcc00415 	stw	r19,16(sp)
   215b4:	dc400215 	stw	r17,8(sp)
   215b8:	dc000115 	stw	r16,4(sp)
   215bc:	288002c4 	addi	r2,r5,11
   215c0:	00c00584 	movi	r3,22
   215c4:	2025883a 	mov	r18,r4
   215c8:	18807f2e 	bgeu	r3,r2,217c8 <_malloc_r+0x238>
   215cc:	047ffe04 	movi	r17,-8
   215d0:	1462703a 	and	r17,r2,r17
   215d4:	8800a316 	blt	r17,zero,21864 <_malloc_r+0x2d4>
   215d8:	8940a236 	bltu	r17,r5,21864 <_malloc_r+0x2d4>
   215dc:	0023bf00 	call	23bf0 <__malloc_lock>
   215e0:	00807dc4 	movi	r2,503
   215e4:	1441e92e 	bgeu	r2,r17,21d8c <_malloc_r+0x7fc>
   215e8:	8804d27a 	srli	r2,r17,9
   215ec:	1000a126 	beq	r2,zero,21874 <_malloc_r+0x2e4>
   215f0:	00c00104 	movi	r3,4
   215f4:	18811e36 	bltu	r3,r2,21a70 <_malloc_r+0x4e0>
   215f8:	8804d1ba 	srli	r2,r17,6
   215fc:	12000e44 	addi	r8,r2,57
   21600:	11c00e04 	addi	r7,r2,56
   21604:	4209883a 	add	r4,r8,r8
   21608:	04c000f4 	movhi	r19,3
   2160c:	2109883a 	add	r4,r4,r4
   21610:	9ce37804 	addi	r19,r19,-29216
   21614:	2109883a 	add	r4,r4,r4
   21618:	9909883a 	add	r4,r19,r4
   2161c:	24000117 	ldw	r16,4(r4)
   21620:	213ffe04 	addi	r4,r4,-8
   21624:	24009726 	beq	r4,r16,21884 <_malloc_r+0x2f4>
   21628:	80800117 	ldw	r2,4(r16)
   2162c:	01bfff04 	movi	r6,-4
   21630:	014003c4 	movi	r5,15
   21634:	1184703a 	and	r2,r2,r6
   21638:	1447c83a 	sub	r3,r2,r17
   2163c:	28c00716 	blt	r5,r3,2165c <_malloc_r+0xcc>
   21640:	1800920e 	bge	r3,zero,2188c <_malloc_r+0x2fc>
   21644:	84000317 	ldw	r16,12(r16)
   21648:	24008e26 	beq	r4,r16,21884 <_malloc_r+0x2f4>
   2164c:	80800117 	ldw	r2,4(r16)
   21650:	1184703a 	and	r2,r2,r6
   21654:	1447c83a 	sub	r3,r2,r17
   21658:	28fff90e 	bge	r5,r3,21640 <__alt_data_end+0xfffe1640>
   2165c:	3809883a 	mov	r4,r7
   21660:	018000f4 	movhi	r6,3
   21664:	9c000417 	ldw	r16,16(r19)
   21668:	31a37804 	addi	r6,r6,-29216
   2166c:	32000204 	addi	r8,r6,8
   21670:	82013426 	beq	r16,r8,21b44 <_malloc_r+0x5b4>
   21674:	80c00117 	ldw	r3,4(r16)
   21678:	00bfff04 	movi	r2,-4
   2167c:	188e703a 	and	r7,r3,r2
   21680:	3c45c83a 	sub	r2,r7,r17
   21684:	00c003c4 	movi	r3,15
   21688:	18811f16 	blt	r3,r2,21b08 <_malloc_r+0x578>
   2168c:	32000515 	stw	r8,20(r6)
   21690:	32000415 	stw	r8,16(r6)
   21694:	10007f0e 	bge	r2,zero,21894 <_malloc_r+0x304>
   21698:	00807fc4 	movi	r2,511
   2169c:	11c0fd36 	bltu	r2,r7,21a94 <_malloc_r+0x504>
   216a0:	3806d0fa 	srli	r3,r7,3
   216a4:	01c00044 	movi	r7,1
   216a8:	30800117 	ldw	r2,4(r6)
   216ac:	19400044 	addi	r5,r3,1
   216b0:	294b883a 	add	r5,r5,r5
   216b4:	1807d0ba 	srai	r3,r3,2
   216b8:	294b883a 	add	r5,r5,r5
   216bc:	294b883a 	add	r5,r5,r5
   216c0:	298b883a 	add	r5,r5,r6
   216c4:	38c6983a 	sll	r3,r7,r3
   216c8:	29c00017 	ldw	r7,0(r5)
   216cc:	2a7ffe04 	addi	r9,r5,-8
   216d0:	1886b03a 	or	r3,r3,r2
   216d4:	82400315 	stw	r9,12(r16)
   216d8:	81c00215 	stw	r7,8(r16)
   216dc:	30c00115 	stw	r3,4(r6)
   216e0:	2c000015 	stw	r16,0(r5)
   216e4:	3c000315 	stw	r16,12(r7)
   216e8:	2005d0ba 	srai	r2,r4,2
   216ec:	01400044 	movi	r5,1
   216f0:	288a983a 	sll	r5,r5,r2
   216f4:	19406f36 	bltu	r3,r5,218b4 <_malloc_r+0x324>
   216f8:	28c4703a 	and	r2,r5,r3
   216fc:	10000a1e 	bne	r2,zero,21728 <_malloc_r+0x198>
   21700:	00bfff04 	movi	r2,-4
   21704:	294b883a 	add	r5,r5,r5
   21708:	2088703a 	and	r4,r4,r2
   2170c:	28c4703a 	and	r2,r5,r3
   21710:	21000104 	addi	r4,r4,4
   21714:	1000041e 	bne	r2,zero,21728 <_malloc_r+0x198>
   21718:	294b883a 	add	r5,r5,r5
   2171c:	28c4703a 	and	r2,r5,r3
   21720:	21000104 	addi	r4,r4,4
   21724:	103ffc26 	beq	r2,zero,21718 <__alt_data_end+0xfffe1718>
   21728:	02bfff04 	movi	r10,-4
   2172c:	024003c4 	movi	r9,15
   21730:	21800044 	addi	r6,r4,1
   21734:	318d883a 	add	r6,r6,r6
   21738:	318d883a 	add	r6,r6,r6
   2173c:	318d883a 	add	r6,r6,r6
   21740:	998d883a 	add	r6,r19,r6
   21744:	333ffe04 	addi	r12,r6,-8
   21748:	2017883a 	mov	r11,r4
   2174c:	31800104 	addi	r6,r6,4
   21750:	34000017 	ldw	r16,0(r6)
   21754:	31fffd04 	addi	r7,r6,-12
   21758:	81c0041e 	bne	r16,r7,2176c <_malloc_r+0x1dc>
   2175c:	0000fb06 	br	21b4c <_malloc_r+0x5bc>
   21760:	1801030e 	bge	r3,zero,21b70 <_malloc_r+0x5e0>
   21764:	84000317 	ldw	r16,12(r16)
   21768:	81c0f826 	beq	r16,r7,21b4c <_malloc_r+0x5bc>
   2176c:	80800117 	ldw	r2,4(r16)
   21770:	1284703a 	and	r2,r2,r10
   21774:	1447c83a 	sub	r3,r2,r17
   21778:	48fff90e 	bge	r9,r3,21760 <__alt_data_end+0xfffe1760>
   2177c:	80800317 	ldw	r2,12(r16)
   21780:	81000217 	ldw	r4,8(r16)
   21784:	89400054 	ori	r5,r17,1
   21788:	81400115 	stw	r5,4(r16)
   2178c:	20800315 	stw	r2,12(r4)
   21790:	11000215 	stw	r4,8(r2)
   21794:	8463883a 	add	r17,r16,r17
   21798:	9c400515 	stw	r17,20(r19)
   2179c:	9c400415 	stw	r17,16(r19)
   217a0:	18800054 	ori	r2,r3,1
   217a4:	88800115 	stw	r2,4(r17)
   217a8:	8a000315 	stw	r8,12(r17)
   217ac:	8a000215 	stw	r8,8(r17)
   217b0:	88e3883a 	add	r17,r17,r3
   217b4:	88c00015 	stw	r3,0(r17)
   217b8:	9009883a 	mov	r4,r18
   217bc:	0023c140 	call	23c14 <__malloc_unlock>
   217c0:	80800204 	addi	r2,r16,8
   217c4:	00001b06 	br	21834 <_malloc_r+0x2a4>
   217c8:	04400404 	movi	r17,16
   217cc:	89402536 	bltu	r17,r5,21864 <_malloc_r+0x2d4>
   217d0:	0023bf00 	call	23bf0 <__malloc_lock>
   217d4:	00800184 	movi	r2,6
   217d8:	01000084 	movi	r4,2
   217dc:	04c000f4 	movhi	r19,3
   217e0:	1085883a 	add	r2,r2,r2
   217e4:	9ce37804 	addi	r19,r19,-29216
   217e8:	1085883a 	add	r2,r2,r2
   217ec:	9885883a 	add	r2,r19,r2
   217f0:	14000117 	ldw	r16,4(r2)
   217f4:	10fffe04 	addi	r3,r2,-8
   217f8:	80c0d926 	beq	r16,r3,21b60 <_malloc_r+0x5d0>
   217fc:	80c00117 	ldw	r3,4(r16)
   21800:	81000317 	ldw	r4,12(r16)
   21804:	00bfff04 	movi	r2,-4
   21808:	1884703a 	and	r2,r3,r2
   2180c:	81400217 	ldw	r5,8(r16)
   21810:	8085883a 	add	r2,r16,r2
   21814:	10c00117 	ldw	r3,4(r2)
   21818:	29000315 	stw	r4,12(r5)
   2181c:	21400215 	stw	r5,8(r4)
   21820:	18c00054 	ori	r3,r3,1
   21824:	10c00115 	stw	r3,4(r2)
   21828:	9009883a 	mov	r4,r18
   2182c:	0023c140 	call	23c14 <__malloc_unlock>
   21830:	80800204 	addi	r2,r16,8
   21834:	dfc00a17 	ldw	ra,40(sp)
   21838:	df000917 	ldw	fp,36(sp)
   2183c:	ddc00817 	ldw	r23,32(sp)
   21840:	dd800717 	ldw	r22,28(sp)
   21844:	dd400617 	ldw	r21,24(sp)
   21848:	dd000517 	ldw	r20,20(sp)
   2184c:	dcc00417 	ldw	r19,16(sp)
   21850:	dc800317 	ldw	r18,12(sp)
   21854:	dc400217 	ldw	r17,8(sp)
   21858:	dc000117 	ldw	r16,4(sp)
   2185c:	dec00b04 	addi	sp,sp,44
   21860:	f800283a 	ret
   21864:	00800304 	movi	r2,12
   21868:	90800015 	stw	r2,0(r18)
   2186c:	0005883a 	mov	r2,zero
   21870:	003ff006 	br	21834 <__alt_data_end+0xfffe1834>
   21874:	01002004 	movi	r4,128
   21878:	02001004 	movi	r8,64
   2187c:	01c00fc4 	movi	r7,63
   21880:	003f6106 	br	21608 <__alt_data_end+0xfffe1608>
   21884:	4009883a 	mov	r4,r8
   21888:	003f7506 	br	21660 <__alt_data_end+0xfffe1660>
   2188c:	81000317 	ldw	r4,12(r16)
   21890:	003fde06 	br	2180c <__alt_data_end+0xfffe180c>
   21894:	81c5883a 	add	r2,r16,r7
   21898:	11400117 	ldw	r5,4(r2)
   2189c:	9009883a 	mov	r4,r18
   218a0:	29400054 	ori	r5,r5,1
   218a4:	11400115 	stw	r5,4(r2)
   218a8:	0023c140 	call	23c14 <__malloc_unlock>
   218ac:	80800204 	addi	r2,r16,8
   218b0:	003fe006 	br	21834 <__alt_data_end+0xfffe1834>
   218b4:	9c000217 	ldw	r16,8(r19)
   218b8:	00bfff04 	movi	r2,-4
   218bc:	85800117 	ldw	r22,4(r16)
   218c0:	b0ac703a 	and	r22,r22,r2
   218c4:	b4400336 	bltu	r22,r17,218d4 <_malloc_r+0x344>
   218c8:	b445c83a 	sub	r2,r22,r17
   218cc:	00c003c4 	movi	r3,15
   218d0:	18805d16 	blt	r3,r2,21a48 <_malloc_r+0x4b8>
   218d4:	05c000f4 	movhi	r23,3
   218d8:	008000f4 	movhi	r2,3
   218dc:	10b02904 	addi	r2,r2,-16220
   218e0:	bde93d04 	addi	r23,r23,-23308
   218e4:	15400017 	ldw	r21,0(r2)
   218e8:	b8c00017 	ldw	r3,0(r23)
   218ec:	00bfffc4 	movi	r2,-1
   218f0:	858d883a 	add	r6,r16,r22
   218f4:	8d6b883a 	add	r21,r17,r21
   218f8:	1880ea26 	beq	r3,r2,21ca4 <_malloc_r+0x714>
   218fc:	ad4403c4 	addi	r21,r21,4111
   21900:	00bc0004 	movi	r2,-4096
   21904:	a8aa703a 	and	r21,r21,r2
   21908:	a80b883a 	mov	r5,r21
   2190c:	9009883a 	mov	r4,r18
   21910:	d9800015 	stw	r6,0(sp)
   21914:	00227b00 	call	227b0 <_sbrk_r>
   21918:	1029883a 	mov	r20,r2
   2191c:	00bfffc4 	movi	r2,-1
   21920:	d9800017 	ldw	r6,0(sp)
   21924:	a080e826 	beq	r20,r2,21cc8 <_malloc_r+0x738>
   21928:	a180a636 	bltu	r20,r6,21bc4 <_malloc_r+0x634>
   2192c:	070000f4 	movhi	fp,3
   21930:	e7303204 	addi	fp,fp,-16184
   21934:	e0800017 	ldw	r2,0(fp)
   21938:	a887883a 	add	r3,r21,r2
   2193c:	e0c00015 	stw	r3,0(fp)
   21940:	3500e626 	beq	r6,r20,21cdc <_malloc_r+0x74c>
   21944:	b9000017 	ldw	r4,0(r23)
   21948:	00bfffc4 	movi	r2,-1
   2194c:	2080ee26 	beq	r4,r2,21d08 <_malloc_r+0x778>
   21950:	a185c83a 	sub	r2,r20,r6
   21954:	10c5883a 	add	r2,r2,r3
   21958:	e0800015 	stw	r2,0(fp)
   2195c:	a0c001cc 	andi	r3,r20,7
   21960:	1800bc26 	beq	r3,zero,21c54 <_malloc_r+0x6c4>
   21964:	a0e9c83a 	sub	r20,r20,r3
   21968:	00840204 	movi	r2,4104
   2196c:	a5000204 	addi	r20,r20,8
   21970:	10c7c83a 	sub	r3,r2,r3
   21974:	a545883a 	add	r2,r20,r21
   21978:	1083ffcc 	andi	r2,r2,4095
   2197c:	18abc83a 	sub	r21,r3,r2
   21980:	a80b883a 	mov	r5,r21
   21984:	9009883a 	mov	r4,r18
   21988:	00227b00 	call	227b0 <_sbrk_r>
   2198c:	00ffffc4 	movi	r3,-1
   21990:	10c0e126 	beq	r2,r3,21d18 <_malloc_r+0x788>
   21994:	1505c83a 	sub	r2,r2,r20
   21998:	1545883a 	add	r2,r2,r21
   2199c:	10800054 	ori	r2,r2,1
   219a0:	e0c00017 	ldw	r3,0(fp)
   219a4:	9d000215 	stw	r20,8(r19)
   219a8:	a0800115 	stw	r2,4(r20)
   219ac:	a8c7883a 	add	r3,r21,r3
   219b0:	e0c00015 	stw	r3,0(fp)
   219b4:	84c00e26 	beq	r16,r19,219f0 <_malloc_r+0x460>
   219b8:	018003c4 	movi	r6,15
   219bc:	3580a72e 	bgeu	r6,r22,21c5c <_malloc_r+0x6cc>
   219c0:	81400117 	ldw	r5,4(r16)
   219c4:	013ffe04 	movi	r4,-8
   219c8:	b0bffd04 	addi	r2,r22,-12
   219cc:	1104703a 	and	r2,r2,r4
   219d0:	2900004c 	andi	r4,r5,1
   219d4:	2088b03a 	or	r4,r4,r2
   219d8:	81000115 	stw	r4,4(r16)
   219dc:	01400144 	movi	r5,5
   219e0:	8089883a 	add	r4,r16,r2
   219e4:	21400115 	stw	r5,4(r4)
   219e8:	21400215 	stw	r5,8(r4)
   219ec:	3080cd36 	bltu	r6,r2,21d24 <_malloc_r+0x794>
   219f0:	008000f4 	movhi	r2,3
   219f4:	10b02804 	addi	r2,r2,-16224
   219f8:	11000017 	ldw	r4,0(r2)
   219fc:	20c0012e 	bgeu	r4,r3,21a04 <_malloc_r+0x474>
   21a00:	10c00015 	stw	r3,0(r2)
   21a04:	008000f4 	movhi	r2,3
   21a08:	10b02704 	addi	r2,r2,-16228
   21a0c:	11000017 	ldw	r4,0(r2)
   21a10:	9c000217 	ldw	r16,8(r19)
   21a14:	20c0012e 	bgeu	r4,r3,21a1c <_malloc_r+0x48c>
   21a18:	10c00015 	stw	r3,0(r2)
   21a1c:	80c00117 	ldw	r3,4(r16)
   21a20:	00bfff04 	movi	r2,-4
   21a24:	1886703a 	and	r3,r3,r2
   21a28:	1c45c83a 	sub	r2,r3,r17
   21a2c:	1c400236 	bltu	r3,r17,21a38 <_malloc_r+0x4a8>
   21a30:	00c003c4 	movi	r3,15
   21a34:	18800416 	blt	r3,r2,21a48 <_malloc_r+0x4b8>
   21a38:	9009883a 	mov	r4,r18
   21a3c:	0023c140 	call	23c14 <__malloc_unlock>
   21a40:	0005883a 	mov	r2,zero
   21a44:	003f7b06 	br	21834 <__alt_data_end+0xfffe1834>
   21a48:	88c00054 	ori	r3,r17,1
   21a4c:	80c00115 	stw	r3,4(r16)
   21a50:	8463883a 	add	r17,r16,r17
   21a54:	10800054 	ori	r2,r2,1
   21a58:	9c400215 	stw	r17,8(r19)
   21a5c:	88800115 	stw	r2,4(r17)
   21a60:	9009883a 	mov	r4,r18
   21a64:	0023c140 	call	23c14 <__malloc_unlock>
   21a68:	80800204 	addi	r2,r16,8
   21a6c:	003f7106 	br	21834 <__alt_data_end+0xfffe1834>
   21a70:	00c00504 	movi	r3,20
   21a74:	18804a2e 	bgeu	r3,r2,21ba0 <_malloc_r+0x610>
   21a78:	00c01504 	movi	r3,84
   21a7c:	18806e36 	bltu	r3,r2,21c38 <_malloc_r+0x6a8>
   21a80:	8804d33a 	srli	r2,r17,12
   21a84:	12001bc4 	addi	r8,r2,111
   21a88:	11c01b84 	addi	r7,r2,110
   21a8c:	4209883a 	add	r4,r8,r8
   21a90:	003edd06 	br	21608 <__alt_data_end+0xfffe1608>
   21a94:	3804d27a 	srli	r2,r7,9
   21a98:	00c00104 	movi	r3,4
   21a9c:	1880442e 	bgeu	r3,r2,21bb0 <_malloc_r+0x620>
   21aa0:	00c00504 	movi	r3,20
   21aa4:	18808136 	bltu	r3,r2,21cac <_malloc_r+0x71c>
   21aa8:	11401704 	addi	r5,r2,92
   21aac:	10c016c4 	addi	r3,r2,91
   21ab0:	294b883a 	add	r5,r5,r5
   21ab4:	294b883a 	add	r5,r5,r5
   21ab8:	294b883a 	add	r5,r5,r5
   21abc:	994b883a 	add	r5,r19,r5
   21ac0:	28800017 	ldw	r2,0(r5)
   21ac4:	018000f4 	movhi	r6,3
   21ac8:	297ffe04 	addi	r5,r5,-8
   21acc:	31a37804 	addi	r6,r6,-29216
   21ad0:	28806526 	beq	r5,r2,21c68 <_malloc_r+0x6d8>
   21ad4:	01bfff04 	movi	r6,-4
   21ad8:	10c00117 	ldw	r3,4(r2)
   21adc:	1986703a 	and	r3,r3,r6
   21ae0:	38c0022e 	bgeu	r7,r3,21aec <_malloc_r+0x55c>
   21ae4:	10800217 	ldw	r2,8(r2)
   21ae8:	28bffb1e 	bne	r5,r2,21ad8 <__alt_data_end+0xfffe1ad8>
   21aec:	11400317 	ldw	r5,12(r2)
   21af0:	98c00117 	ldw	r3,4(r19)
   21af4:	81400315 	stw	r5,12(r16)
   21af8:	80800215 	stw	r2,8(r16)
   21afc:	2c000215 	stw	r16,8(r5)
   21b00:	14000315 	stw	r16,12(r2)
   21b04:	003ef806 	br	216e8 <__alt_data_end+0xfffe16e8>
   21b08:	88c00054 	ori	r3,r17,1
   21b0c:	80c00115 	stw	r3,4(r16)
   21b10:	8463883a 	add	r17,r16,r17
   21b14:	34400515 	stw	r17,20(r6)
   21b18:	34400415 	stw	r17,16(r6)
   21b1c:	10c00054 	ori	r3,r2,1
   21b20:	8a000315 	stw	r8,12(r17)
   21b24:	8a000215 	stw	r8,8(r17)
   21b28:	88c00115 	stw	r3,4(r17)
   21b2c:	88a3883a 	add	r17,r17,r2
   21b30:	88800015 	stw	r2,0(r17)
   21b34:	9009883a 	mov	r4,r18
   21b38:	0023c140 	call	23c14 <__malloc_unlock>
   21b3c:	80800204 	addi	r2,r16,8
   21b40:	003f3c06 	br	21834 <__alt_data_end+0xfffe1834>
   21b44:	30c00117 	ldw	r3,4(r6)
   21b48:	003ee706 	br	216e8 <__alt_data_end+0xfffe16e8>
   21b4c:	5ac00044 	addi	r11,r11,1
   21b50:	588000cc 	andi	r2,r11,3
   21b54:	31800204 	addi	r6,r6,8
   21b58:	103efd1e 	bne	r2,zero,21750 <__alt_data_end+0xfffe1750>
   21b5c:	00002406 	br	21bf0 <_malloc_r+0x660>
   21b60:	14000317 	ldw	r16,12(r2)
   21b64:	143f251e 	bne	r2,r16,217fc <__alt_data_end+0xfffe17fc>
   21b68:	21000084 	addi	r4,r4,2
   21b6c:	003ebc06 	br	21660 <__alt_data_end+0xfffe1660>
   21b70:	8085883a 	add	r2,r16,r2
   21b74:	10c00117 	ldw	r3,4(r2)
   21b78:	81000317 	ldw	r4,12(r16)
   21b7c:	81400217 	ldw	r5,8(r16)
   21b80:	18c00054 	ori	r3,r3,1
   21b84:	10c00115 	stw	r3,4(r2)
   21b88:	29000315 	stw	r4,12(r5)
   21b8c:	21400215 	stw	r5,8(r4)
   21b90:	9009883a 	mov	r4,r18
   21b94:	0023c140 	call	23c14 <__malloc_unlock>
   21b98:	80800204 	addi	r2,r16,8
   21b9c:	003f2506 	br	21834 <__alt_data_end+0xfffe1834>
   21ba0:	12001704 	addi	r8,r2,92
   21ba4:	11c016c4 	addi	r7,r2,91
   21ba8:	4209883a 	add	r4,r8,r8
   21bac:	003e9606 	br	21608 <__alt_data_end+0xfffe1608>
   21bb0:	3804d1ba 	srli	r2,r7,6
   21bb4:	11400e44 	addi	r5,r2,57
   21bb8:	10c00e04 	addi	r3,r2,56
   21bbc:	294b883a 	add	r5,r5,r5
   21bc0:	003fbc06 	br	21ab4 <__alt_data_end+0xfffe1ab4>
   21bc4:	84ff5926 	beq	r16,r19,2192c <__alt_data_end+0xfffe192c>
   21bc8:	008000f4 	movhi	r2,3
   21bcc:	10a37804 	addi	r2,r2,-29216
   21bd0:	14000217 	ldw	r16,8(r2)
   21bd4:	00bfff04 	movi	r2,-4
   21bd8:	80c00117 	ldw	r3,4(r16)
   21bdc:	1886703a 	and	r3,r3,r2
   21be0:	003f9106 	br	21a28 <__alt_data_end+0xfffe1a28>
   21be4:	60800217 	ldw	r2,8(r12)
   21be8:	213fffc4 	addi	r4,r4,-1
   21bec:	1300651e 	bne	r2,r12,21d84 <_malloc_r+0x7f4>
   21bf0:	208000cc 	andi	r2,r4,3
   21bf4:	633ffe04 	addi	r12,r12,-8
   21bf8:	103ffa1e 	bne	r2,zero,21be4 <__alt_data_end+0xfffe1be4>
   21bfc:	98800117 	ldw	r2,4(r19)
   21c00:	0146303a 	nor	r3,zero,r5
   21c04:	1884703a 	and	r2,r3,r2
   21c08:	98800115 	stw	r2,4(r19)
   21c0c:	294b883a 	add	r5,r5,r5
   21c10:	117f2836 	bltu	r2,r5,218b4 <__alt_data_end+0xfffe18b4>
   21c14:	283f2726 	beq	r5,zero,218b4 <__alt_data_end+0xfffe18b4>
   21c18:	2886703a 	and	r3,r5,r2
   21c1c:	5809883a 	mov	r4,r11
   21c20:	183ec31e 	bne	r3,zero,21730 <__alt_data_end+0xfffe1730>
   21c24:	294b883a 	add	r5,r5,r5
   21c28:	2886703a 	and	r3,r5,r2
   21c2c:	21000104 	addi	r4,r4,4
   21c30:	183ffc26 	beq	r3,zero,21c24 <__alt_data_end+0xfffe1c24>
   21c34:	003ebe06 	br	21730 <__alt_data_end+0xfffe1730>
   21c38:	00c05504 	movi	r3,340
   21c3c:	18801236 	bltu	r3,r2,21c88 <_malloc_r+0x6f8>
   21c40:	8804d3fa 	srli	r2,r17,15
   21c44:	12001e04 	addi	r8,r2,120
   21c48:	11c01dc4 	addi	r7,r2,119
   21c4c:	4209883a 	add	r4,r8,r8
   21c50:	003e6d06 	br	21608 <__alt_data_end+0xfffe1608>
   21c54:	00c40004 	movi	r3,4096
   21c58:	003f4606 	br	21974 <__alt_data_end+0xfffe1974>
   21c5c:	00800044 	movi	r2,1
   21c60:	a0800115 	stw	r2,4(r20)
   21c64:	003f7406 	br	21a38 <__alt_data_end+0xfffe1a38>
   21c68:	1805d0ba 	srai	r2,r3,2
   21c6c:	01c00044 	movi	r7,1
   21c70:	30c00117 	ldw	r3,4(r6)
   21c74:	388e983a 	sll	r7,r7,r2
   21c78:	2805883a 	mov	r2,r5
   21c7c:	38c6b03a 	or	r3,r7,r3
   21c80:	30c00115 	stw	r3,4(r6)
   21c84:	003f9b06 	br	21af4 <__alt_data_end+0xfffe1af4>
   21c88:	00c15504 	movi	r3,1364
   21c8c:	18801a36 	bltu	r3,r2,21cf8 <_malloc_r+0x768>
   21c90:	8804d4ba 	srli	r2,r17,18
   21c94:	12001f44 	addi	r8,r2,125
   21c98:	11c01f04 	addi	r7,r2,124
   21c9c:	4209883a 	add	r4,r8,r8
   21ca0:	003e5906 	br	21608 <__alt_data_end+0xfffe1608>
   21ca4:	ad400404 	addi	r21,r21,16
   21ca8:	003f1706 	br	21908 <__alt_data_end+0xfffe1908>
   21cac:	00c01504 	movi	r3,84
   21cb0:	18802336 	bltu	r3,r2,21d40 <_malloc_r+0x7b0>
   21cb4:	3804d33a 	srli	r2,r7,12
   21cb8:	11401bc4 	addi	r5,r2,111
   21cbc:	10c01b84 	addi	r3,r2,110
   21cc0:	294b883a 	add	r5,r5,r5
   21cc4:	003f7b06 	br	21ab4 <__alt_data_end+0xfffe1ab4>
   21cc8:	9c000217 	ldw	r16,8(r19)
   21ccc:	00bfff04 	movi	r2,-4
   21cd0:	80c00117 	ldw	r3,4(r16)
   21cd4:	1886703a 	and	r3,r3,r2
   21cd8:	003f5306 	br	21a28 <__alt_data_end+0xfffe1a28>
   21cdc:	3083ffcc 	andi	r2,r6,4095
   21ce0:	103f181e 	bne	r2,zero,21944 <__alt_data_end+0xfffe1944>
   21ce4:	99000217 	ldw	r4,8(r19)
   21ce8:	b545883a 	add	r2,r22,r21
   21cec:	10800054 	ori	r2,r2,1
   21cf0:	20800115 	stw	r2,4(r4)
   21cf4:	003f3e06 	br	219f0 <__alt_data_end+0xfffe19f0>
   21cf8:	01003f84 	movi	r4,254
   21cfc:	02001fc4 	movi	r8,127
   21d00:	01c01f84 	movi	r7,126
   21d04:	003e4006 	br	21608 <__alt_data_end+0xfffe1608>
   21d08:	008000f4 	movhi	r2,3
   21d0c:	10a93d04 	addi	r2,r2,-23308
   21d10:	15000015 	stw	r20,0(r2)
   21d14:	003f1106 	br	2195c <__alt_data_end+0xfffe195c>
   21d18:	00800044 	movi	r2,1
   21d1c:	002b883a 	mov	r21,zero
   21d20:	003f1f06 	br	219a0 <__alt_data_end+0xfffe19a0>
   21d24:	81400204 	addi	r5,r16,8
   21d28:	9009883a 	mov	r4,r18
   21d2c:	00230180 	call	23018 <_free_r>
   21d30:	008000f4 	movhi	r2,3
   21d34:	10b03204 	addi	r2,r2,-16184
   21d38:	10c00017 	ldw	r3,0(r2)
   21d3c:	003f2c06 	br	219f0 <__alt_data_end+0xfffe19f0>
   21d40:	00c05504 	movi	r3,340
   21d44:	18800536 	bltu	r3,r2,21d5c <_malloc_r+0x7cc>
   21d48:	3804d3fa 	srli	r2,r7,15
   21d4c:	11401e04 	addi	r5,r2,120
   21d50:	10c01dc4 	addi	r3,r2,119
   21d54:	294b883a 	add	r5,r5,r5
   21d58:	003f5606 	br	21ab4 <__alt_data_end+0xfffe1ab4>
   21d5c:	00c15504 	movi	r3,1364
   21d60:	18800536 	bltu	r3,r2,21d78 <_malloc_r+0x7e8>
   21d64:	3804d4ba 	srli	r2,r7,18
   21d68:	11401f44 	addi	r5,r2,125
   21d6c:	10c01f04 	addi	r3,r2,124
   21d70:	294b883a 	add	r5,r5,r5
   21d74:	003f4f06 	br	21ab4 <__alt_data_end+0xfffe1ab4>
   21d78:	01403f84 	movi	r5,254
   21d7c:	00c01f84 	movi	r3,126
   21d80:	003f4c06 	br	21ab4 <__alt_data_end+0xfffe1ab4>
   21d84:	98800117 	ldw	r2,4(r19)
   21d88:	003fa006 	br	21c0c <__alt_data_end+0xfffe1c0c>
   21d8c:	8808d0fa 	srli	r4,r17,3
   21d90:	20800044 	addi	r2,r4,1
   21d94:	1085883a 	add	r2,r2,r2
   21d98:	003e9006 	br	217dc <__alt_data_end+0xfffe17dc>

00021d9c <memchr>:
   21d9c:	208000cc 	andi	r2,r4,3
   21da0:	280f883a 	mov	r7,r5
   21da4:	10003426 	beq	r2,zero,21e78 <memchr+0xdc>
   21da8:	30bfffc4 	addi	r2,r6,-1
   21dac:	30001a26 	beq	r6,zero,21e18 <memchr+0x7c>
   21db0:	20c00003 	ldbu	r3,0(r4)
   21db4:	29803fcc 	andi	r6,r5,255
   21db8:	30c0051e 	bne	r6,r3,21dd0 <memchr+0x34>
   21dbc:	00001806 	br	21e20 <memchr+0x84>
   21dc0:	10001526 	beq	r2,zero,21e18 <memchr+0x7c>
   21dc4:	20c00003 	ldbu	r3,0(r4)
   21dc8:	10bfffc4 	addi	r2,r2,-1
   21dcc:	30c01426 	beq	r6,r3,21e20 <memchr+0x84>
   21dd0:	21000044 	addi	r4,r4,1
   21dd4:	20c000cc 	andi	r3,r4,3
   21dd8:	183ff91e 	bne	r3,zero,21dc0 <__alt_data_end+0xfffe1dc0>
   21ddc:	020000c4 	movi	r8,3
   21de0:	40801136 	bltu	r8,r2,21e28 <memchr+0x8c>
   21de4:	10000c26 	beq	r2,zero,21e18 <memchr+0x7c>
   21de8:	20c00003 	ldbu	r3,0(r4)
   21dec:	29403fcc 	andi	r5,r5,255
   21df0:	28c00b26 	beq	r5,r3,21e20 <memchr+0x84>
   21df4:	20c00044 	addi	r3,r4,1
   21df8:	39803fcc 	andi	r6,r7,255
   21dfc:	2089883a 	add	r4,r4,r2
   21e00:	00000306 	br	21e10 <memchr+0x74>
   21e04:	18c00044 	addi	r3,r3,1
   21e08:	197fffc3 	ldbu	r5,-1(r3)
   21e0c:	31400526 	beq	r6,r5,21e24 <memchr+0x88>
   21e10:	1805883a 	mov	r2,r3
   21e14:	20fffb1e 	bne	r4,r3,21e04 <__alt_data_end+0xfffe1e04>
   21e18:	0005883a 	mov	r2,zero
   21e1c:	f800283a 	ret
   21e20:	2005883a 	mov	r2,r4
   21e24:	f800283a 	ret
   21e28:	28c03fcc 	andi	r3,r5,255
   21e2c:	1812923a 	slli	r9,r3,8
   21e30:	02ffbff4 	movhi	r11,65279
   21e34:	02a02074 	movhi	r10,32897
   21e38:	48d2b03a 	or	r9,r9,r3
   21e3c:	4806943a 	slli	r3,r9,16
   21e40:	5affbfc4 	addi	r11,r11,-257
   21e44:	52a02004 	addi	r10,r10,-32640
   21e48:	48d2b03a 	or	r9,r9,r3
   21e4c:	20c00017 	ldw	r3,0(r4)
   21e50:	48c6f03a 	xor	r3,r9,r3
   21e54:	1acd883a 	add	r6,r3,r11
   21e58:	00c6303a 	nor	r3,zero,r3
   21e5c:	30c6703a 	and	r3,r6,r3
   21e60:	1a86703a 	and	r3,r3,r10
   21e64:	183fe01e 	bne	r3,zero,21de8 <__alt_data_end+0xfffe1de8>
   21e68:	10bfff04 	addi	r2,r2,-4
   21e6c:	21000104 	addi	r4,r4,4
   21e70:	40bff636 	bltu	r8,r2,21e4c <__alt_data_end+0xfffe1e4c>
   21e74:	003fdb06 	br	21de4 <__alt_data_end+0xfffe1de4>
   21e78:	3005883a 	mov	r2,r6
   21e7c:	003fd706 	br	21ddc <__alt_data_end+0xfffe1ddc>

00021e80 <memcpy>:
   21e80:	defffd04 	addi	sp,sp,-12
   21e84:	dfc00215 	stw	ra,8(sp)
   21e88:	dc400115 	stw	r17,4(sp)
   21e8c:	dc000015 	stw	r16,0(sp)
   21e90:	00c003c4 	movi	r3,15
   21e94:	2005883a 	mov	r2,r4
   21e98:	1980452e 	bgeu	r3,r6,21fb0 <memcpy+0x130>
   21e9c:	2906b03a 	or	r3,r5,r4
   21ea0:	18c000cc 	andi	r3,r3,3
   21ea4:	1800441e 	bne	r3,zero,21fb8 <memcpy+0x138>
   21ea8:	347ffc04 	addi	r17,r6,-16
   21eac:	8822d13a 	srli	r17,r17,4
   21eb0:	28c00104 	addi	r3,r5,4
   21eb4:	23400104 	addi	r13,r4,4
   21eb8:	8820913a 	slli	r16,r17,4
   21ebc:	2b000204 	addi	r12,r5,8
   21ec0:	22c00204 	addi	r11,r4,8
   21ec4:	84000504 	addi	r16,r16,20
   21ec8:	2a800304 	addi	r10,r5,12
   21ecc:	22400304 	addi	r9,r4,12
   21ed0:	2c21883a 	add	r16,r5,r16
   21ed4:	2811883a 	mov	r8,r5
   21ed8:	200f883a 	mov	r7,r4
   21edc:	41000017 	ldw	r4,0(r8)
   21ee0:	1fc00017 	ldw	ra,0(r3)
   21ee4:	63c00017 	ldw	r15,0(r12)
   21ee8:	39000015 	stw	r4,0(r7)
   21eec:	53800017 	ldw	r14,0(r10)
   21ef0:	6fc00015 	stw	ra,0(r13)
   21ef4:	5bc00015 	stw	r15,0(r11)
   21ef8:	4b800015 	stw	r14,0(r9)
   21efc:	18c00404 	addi	r3,r3,16
   21f00:	39c00404 	addi	r7,r7,16
   21f04:	42000404 	addi	r8,r8,16
   21f08:	6b400404 	addi	r13,r13,16
   21f0c:	63000404 	addi	r12,r12,16
   21f10:	5ac00404 	addi	r11,r11,16
   21f14:	52800404 	addi	r10,r10,16
   21f18:	4a400404 	addi	r9,r9,16
   21f1c:	1c3fef1e 	bne	r3,r16,21edc <__alt_data_end+0xfffe1edc>
   21f20:	89c00044 	addi	r7,r17,1
   21f24:	380e913a 	slli	r7,r7,4
   21f28:	310003cc 	andi	r4,r6,15
   21f2c:	02c000c4 	movi	r11,3
   21f30:	11c7883a 	add	r3,r2,r7
   21f34:	29cb883a 	add	r5,r5,r7
   21f38:	5900212e 	bgeu	r11,r4,21fc0 <memcpy+0x140>
   21f3c:	1813883a 	mov	r9,r3
   21f40:	2811883a 	mov	r8,r5
   21f44:	200f883a 	mov	r7,r4
   21f48:	42800017 	ldw	r10,0(r8)
   21f4c:	4a400104 	addi	r9,r9,4
   21f50:	39ffff04 	addi	r7,r7,-4
   21f54:	4abfff15 	stw	r10,-4(r9)
   21f58:	42000104 	addi	r8,r8,4
   21f5c:	59fffa36 	bltu	r11,r7,21f48 <__alt_data_end+0xfffe1f48>
   21f60:	213fff04 	addi	r4,r4,-4
   21f64:	2008d0ba 	srli	r4,r4,2
   21f68:	318000cc 	andi	r6,r6,3
   21f6c:	21000044 	addi	r4,r4,1
   21f70:	2109883a 	add	r4,r4,r4
   21f74:	2109883a 	add	r4,r4,r4
   21f78:	1907883a 	add	r3,r3,r4
   21f7c:	290b883a 	add	r5,r5,r4
   21f80:	30000626 	beq	r6,zero,21f9c <memcpy+0x11c>
   21f84:	198d883a 	add	r6,r3,r6
   21f88:	29c00003 	ldbu	r7,0(r5)
   21f8c:	18c00044 	addi	r3,r3,1
   21f90:	29400044 	addi	r5,r5,1
   21f94:	19ffffc5 	stb	r7,-1(r3)
   21f98:	19bffb1e 	bne	r3,r6,21f88 <__alt_data_end+0xfffe1f88>
   21f9c:	dfc00217 	ldw	ra,8(sp)
   21fa0:	dc400117 	ldw	r17,4(sp)
   21fa4:	dc000017 	ldw	r16,0(sp)
   21fa8:	dec00304 	addi	sp,sp,12
   21fac:	f800283a 	ret
   21fb0:	2007883a 	mov	r3,r4
   21fb4:	003ff206 	br	21f80 <__alt_data_end+0xfffe1f80>
   21fb8:	2007883a 	mov	r3,r4
   21fbc:	003ff106 	br	21f84 <__alt_data_end+0xfffe1f84>
   21fc0:	200d883a 	mov	r6,r4
   21fc4:	003fee06 	br	21f80 <__alt_data_end+0xfffe1f80>

00021fc8 <memmove>:
   21fc8:	2005883a 	mov	r2,r4
   21fcc:	29000b2e 	bgeu	r5,r4,21ffc <memmove+0x34>
   21fd0:	298f883a 	add	r7,r5,r6
   21fd4:	21c0092e 	bgeu	r4,r7,21ffc <memmove+0x34>
   21fd8:	2187883a 	add	r3,r4,r6
   21fdc:	198bc83a 	sub	r5,r3,r6
   21fe0:	30004826 	beq	r6,zero,22104 <memmove+0x13c>
   21fe4:	39ffffc4 	addi	r7,r7,-1
   21fe8:	39000003 	ldbu	r4,0(r7)
   21fec:	18ffffc4 	addi	r3,r3,-1
   21ff0:	19000005 	stb	r4,0(r3)
   21ff4:	28fffb1e 	bne	r5,r3,21fe4 <__alt_data_end+0xfffe1fe4>
   21ff8:	f800283a 	ret
   21ffc:	00c003c4 	movi	r3,15
   22000:	1980412e 	bgeu	r3,r6,22108 <memmove+0x140>
   22004:	2886b03a 	or	r3,r5,r2
   22008:	18c000cc 	andi	r3,r3,3
   2200c:	1800401e 	bne	r3,zero,22110 <memmove+0x148>
   22010:	33fffc04 	addi	r15,r6,-16
   22014:	781ed13a 	srli	r15,r15,4
   22018:	28c00104 	addi	r3,r5,4
   2201c:	13400104 	addi	r13,r2,4
   22020:	781c913a 	slli	r14,r15,4
   22024:	2b000204 	addi	r12,r5,8
   22028:	12c00204 	addi	r11,r2,8
   2202c:	73800504 	addi	r14,r14,20
   22030:	2a800304 	addi	r10,r5,12
   22034:	12400304 	addi	r9,r2,12
   22038:	2b9d883a 	add	r14,r5,r14
   2203c:	2811883a 	mov	r8,r5
   22040:	100f883a 	mov	r7,r2
   22044:	41000017 	ldw	r4,0(r8)
   22048:	39c00404 	addi	r7,r7,16
   2204c:	18c00404 	addi	r3,r3,16
   22050:	393ffc15 	stw	r4,-16(r7)
   22054:	193ffc17 	ldw	r4,-16(r3)
   22058:	6b400404 	addi	r13,r13,16
   2205c:	5ac00404 	addi	r11,r11,16
   22060:	693ffc15 	stw	r4,-16(r13)
   22064:	61000017 	ldw	r4,0(r12)
   22068:	4a400404 	addi	r9,r9,16
   2206c:	42000404 	addi	r8,r8,16
   22070:	593ffc15 	stw	r4,-16(r11)
   22074:	51000017 	ldw	r4,0(r10)
   22078:	63000404 	addi	r12,r12,16
   2207c:	52800404 	addi	r10,r10,16
   22080:	493ffc15 	stw	r4,-16(r9)
   22084:	1bbfef1e 	bne	r3,r14,22044 <__alt_data_end+0xfffe2044>
   22088:	79000044 	addi	r4,r15,1
   2208c:	2008913a 	slli	r4,r4,4
   22090:	328003cc 	andi	r10,r6,15
   22094:	02c000c4 	movi	r11,3
   22098:	1107883a 	add	r3,r2,r4
   2209c:	290b883a 	add	r5,r5,r4
   220a0:	5a801e2e 	bgeu	r11,r10,2211c <memmove+0x154>
   220a4:	1813883a 	mov	r9,r3
   220a8:	2811883a 	mov	r8,r5
   220ac:	500f883a 	mov	r7,r10
   220b0:	41000017 	ldw	r4,0(r8)
   220b4:	4a400104 	addi	r9,r9,4
   220b8:	39ffff04 	addi	r7,r7,-4
   220bc:	493fff15 	stw	r4,-4(r9)
   220c0:	42000104 	addi	r8,r8,4
   220c4:	59fffa36 	bltu	r11,r7,220b0 <__alt_data_end+0xfffe20b0>
   220c8:	513fff04 	addi	r4,r10,-4
   220cc:	2008d0ba 	srli	r4,r4,2
   220d0:	318000cc 	andi	r6,r6,3
   220d4:	21000044 	addi	r4,r4,1
   220d8:	2109883a 	add	r4,r4,r4
   220dc:	2109883a 	add	r4,r4,r4
   220e0:	1907883a 	add	r3,r3,r4
   220e4:	290b883a 	add	r5,r5,r4
   220e8:	30000b26 	beq	r6,zero,22118 <memmove+0x150>
   220ec:	198d883a 	add	r6,r3,r6
   220f0:	29c00003 	ldbu	r7,0(r5)
   220f4:	18c00044 	addi	r3,r3,1
   220f8:	29400044 	addi	r5,r5,1
   220fc:	19ffffc5 	stb	r7,-1(r3)
   22100:	19bffb1e 	bne	r3,r6,220f0 <__alt_data_end+0xfffe20f0>
   22104:	f800283a 	ret
   22108:	1007883a 	mov	r3,r2
   2210c:	003ff606 	br	220e8 <__alt_data_end+0xfffe20e8>
   22110:	1007883a 	mov	r3,r2
   22114:	003ff506 	br	220ec <__alt_data_end+0xfffe20ec>
   22118:	f800283a 	ret
   2211c:	500d883a 	mov	r6,r10
   22120:	003ff106 	br	220e8 <__alt_data_end+0xfffe20e8>

00022124 <memset>:
   22124:	20c000cc 	andi	r3,r4,3
   22128:	2005883a 	mov	r2,r4
   2212c:	18004426 	beq	r3,zero,22240 <memset+0x11c>
   22130:	31ffffc4 	addi	r7,r6,-1
   22134:	30004026 	beq	r6,zero,22238 <memset+0x114>
   22138:	2813883a 	mov	r9,r5
   2213c:	200d883a 	mov	r6,r4
   22140:	2007883a 	mov	r3,r4
   22144:	00000406 	br	22158 <memset+0x34>
   22148:	3a3fffc4 	addi	r8,r7,-1
   2214c:	31800044 	addi	r6,r6,1
   22150:	38003926 	beq	r7,zero,22238 <memset+0x114>
   22154:	400f883a 	mov	r7,r8
   22158:	18c00044 	addi	r3,r3,1
   2215c:	32400005 	stb	r9,0(r6)
   22160:	1a0000cc 	andi	r8,r3,3
   22164:	403ff81e 	bne	r8,zero,22148 <__alt_data_end+0xfffe2148>
   22168:	010000c4 	movi	r4,3
   2216c:	21c02d2e 	bgeu	r4,r7,22224 <memset+0x100>
   22170:	29003fcc 	andi	r4,r5,255
   22174:	200c923a 	slli	r6,r4,8
   22178:	3108b03a 	or	r4,r6,r4
   2217c:	200c943a 	slli	r6,r4,16
   22180:	218cb03a 	or	r6,r4,r6
   22184:	010003c4 	movi	r4,15
   22188:	21c0182e 	bgeu	r4,r7,221ec <memset+0xc8>
   2218c:	3b3ffc04 	addi	r12,r7,-16
   22190:	6018d13a 	srli	r12,r12,4
   22194:	1a000104 	addi	r8,r3,4
   22198:	1ac00204 	addi	r11,r3,8
   2219c:	6008913a 	slli	r4,r12,4
   221a0:	1a800304 	addi	r10,r3,12
   221a4:	1813883a 	mov	r9,r3
   221a8:	21000504 	addi	r4,r4,20
   221ac:	1909883a 	add	r4,r3,r4
   221b0:	49800015 	stw	r6,0(r9)
   221b4:	41800015 	stw	r6,0(r8)
   221b8:	59800015 	stw	r6,0(r11)
   221bc:	51800015 	stw	r6,0(r10)
   221c0:	42000404 	addi	r8,r8,16
   221c4:	4a400404 	addi	r9,r9,16
   221c8:	5ac00404 	addi	r11,r11,16
   221cc:	52800404 	addi	r10,r10,16
   221d0:	413ff71e 	bne	r8,r4,221b0 <__alt_data_end+0xfffe21b0>
   221d4:	63000044 	addi	r12,r12,1
   221d8:	6018913a 	slli	r12,r12,4
   221dc:	39c003cc 	andi	r7,r7,15
   221e0:	010000c4 	movi	r4,3
   221e4:	1b07883a 	add	r3,r3,r12
   221e8:	21c00e2e 	bgeu	r4,r7,22224 <memset+0x100>
   221ec:	1813883a 	mov	r9,r3
   221f0:	3811883a 	mov	r8,r7
   221f4:	010000c4 	movi	r4,3
   221f8:	49800015 	stw	r6,0(r9)
   221fc:	423fff04 	addi	r8,r8,-4
   22200:	4a400104 	addi	r9,r9,4
   22204:	223ffc36 	bltu	r4,r8,221f8 <__alt_data_end+0xfffe21f8>
   22208:	393fff04 	addi	r4,r7,-4
   2220c:	2008d0ba 	srli	r4,r4,2
   22210:	39c000cc 	andi	r7,r7,3
   22214:	21000044 	addi	r4,r4,1
   22218:	2109883a 	add	r4,r4,r4
   2221c:	2109883a 	add	r4,r4,r4
   22220:	1907883a 	add	r3,r3,r4
   22224:	38000526 	beq	r7,zero,2223c <memset+0x118>
   22228:	19cf883a 	add	r7,r3,r7
   2222c:	19400005 	stb	r5,0(r3)
   22230:	18c00044 	addi	r3,r3,1
   22234:	38fffd1e 	bne	r7,r3,2222c <__alt_data_end+0xfffe222c>
   22238:	f800283a 	ret
   2223c:	f800283a 	ret
   22240:	2007883a 	mov	r3,r4
   22244:	300f883a 	mov	r7,r6
   22248:	003fc706 	br	22168 <__alt_data_end+0xfffe2168>

0002224c <_realloc_r>:
   2224c:	defff604 	addi	sp,sp,-40
   22250:	dc800215 	stw	r18,8(sp)
   22254:	dfc00915 	stw	ra,36(sp)
   22258:	df000815 	stw	fp,32(sp)
   2225c:	ddc00715 	stw	r23,28(sp)
   22260:	dd800615 	stw	r22,24(sp)
   22264:	dd400515 	stw	r21,20(sp)
   22268:	dd000415 	stw	r20,16(sp)
   2226c:	dcc00315 	stw	r19,12(sp)
   22270:	dc400115 	stw	r17,4(sp)
   22274:	dc000015 	stw	r16,0(sp)
   22278:	3025883a 	mov	r18,r6
   2227c:	2800b726 	beq	r5,zero,2255c <_realloc_r+0x310>
   22280:	282b883a 	mov	r21,r5
   22284:	2029883a 	mov	r20,r4
   22288:	0023bf00 	call	23bf0 <__malloc_lock>
   2228c:	a8bfff17 	ldw	r2,-4(r21)
   22290:	043fff04 	movi	r16,-4
   22294:	90c002c4 	addi	r3,r18,11
   22298:	01000584 	movi	r4,22
   2229c:	acfffe04 	addi	r19,r21,-8
   222a0:	1420703a 	and	r16,r2,r16
   222a4:	20c0332e 	bgeu	r4,r3,22374 <_realloc_r+0x128>
   222a8:	047ffe04 	movi	r17,-8
   222ac:	1c62703a 	and	r17,r3,r17
   222b0:	8807883a 	mov	r3,r17
   222b4:	88005816 	blt	r17,zero,22418 <_realloc_r+0x1cc>
   222b8:	8c805736 	bltu	r17,r18,22418 <_realloc_r+0x1cc>
   222bc:	80c0300e 	bge	r16,r3,22380 <_realloc_r+0x134>
   222c0:	070000f4 	movhi	fp,3
   222c4:	e7237804 	addi	fp,fp,-29216
   222c8:	e1c00217 	ldw	r7,8(fp)
   222cc:	9c09883a 	add	r4,r19,r16
   222d0:	22000117 	ldw	r8,4(r4)
   222d4:	21c06326 	beq	r4,r7,22464 <_realloc_r+0x218>
   222d8:	017fff84 	movi	r5,-2
   222dc:	414a703a 	and	r5,r8,r5
   222e0:	214b883a 	add	r5,r4,r5
   222e4:	29800117 	ldw	r6,4(r5)
   222e8:	3180004c 	andi	r6,r6,1
   222ec:	30003f26 	beq	r6,zero,223ec <_realloc_r+0x1a0>
   222f0:	1080004c 	andi	r2,r2,1
   222f4:	10008326 	beq	r2,zero,22504 <_realloc_r+0x2b8>
   222f8:	900b883a 	mov	r5,r18
   222fc:	a009883a 	mov	r4,r20
   22300:	00215900 	call	21590 <_malloc_r>
   22304:	1025883a 	mov	r18,r2
   22308:	10011e26 	beq	r2,zero,22784 <_realloc_r+0x538>
   2230c:	a93fff17 	ldw	r4,-4(r21)
   22310:	10fffe04 	addi	r3,r2,-8
   22314:	00bfff84 	movi	r2,-2
   22318:	2084703a 	and	r2,r4,r2
   2231c:	9885883a 	add	r2,r19,r2
   22320:	1880ee26 	beq	r3,r2,226dc <_realloc_r+0x490>
   22324:	81bfff04 	addi	r6,r16,-4
   22328:	00800904 	movi	r2,36
   2232c:	1180b836 	bltu	r2,r6,22610 <_realloc_r+0x3c4>
   22330:	00c004c4 	movi	r3,19
   22334:	19809636 	bltu	r3,r6,22590 <_realloc_r+0x344>
   22338:	9005883a 	mov	r2,r18
   2233c:	a807883a 	mov	r3,r21
   22340:	19000017 	ldw	r4,0(r3)
   22344:	11000015 	stw	r4,0(r2)
   22348:	19000117 	ldw	r4,4(r3)
   2234c:	11000115 	stw	r4,4(r2)
   22350:	18c00217 	ldw	r3,8(r3)
   22354:	10c00215 	stw	r3,8(r2)
   22358:	a80b883a 	mov	r5,r21
   2235c:	a009883a 	mov	r4,r20
   22360:	00230180 	call	23018 <_free_r>
   22364:	a009883a 	mov	r4,r20
   22368:	0023c140 	call	23c14 <__malloc_unlock>
   2236c:	9005883a 	mov	r2,r18
   22370:	00001206 	br	223bc <_realloc_r+0x170>
   22374:	00c00404 	movi	r3,16
   22378:	1823883a 	mov	r17,r3
   2237c:	003fce06 	br	222b8 <__alt_data_end+0xfffe22b8>
   22380:	a825883a 	mov	r18,r21
   22384:	8445c83a 	sub	r2,r16,r17
   22388:	00c003c4 	movi	r3,15
   2238c:	18802636 	bltu	r3,r2,22428 <_realloc_r+0x1dc>
   22390:	99800117 	ldw	r6,4(r19)
   22394:	9c07883a 	add	r3,r19,r16
   22398:	3180004c 	andi	r6,r6,1
   2239c:	3420b03a 	or	r16,r6,r16
   223a0:	9c000115 	stw	r16,4(r19)
   223a4:	18800117 	ldw	r2,4(r3)
   223a8:	10800054 	ori	r2,r2,1
   223ac:	18800115 	stw	r2,4(r3)
   223b0:	a009883a 	mov	r4,r20
   223b4:	0023c140 	call	23c14 <__malloc_unlock>
   223b8:	9005883a 	mov	r2,r18
   223bc:	dfc00917 	ldw	ra,36(sp)
   223c0:	df000817 	ldw	fp,32(sp)
   223c4:	ddc00717 	ldw	r23,28(sp)
   223c8:	dd800617 	ldw	r22,24(sp)
   223cc:	dd400517 	ldw	r21,20(sp)
   223d0:	dd000417 	ldw	r20,16(sp)
   223d4:	dcc00317 	ldw	r19,12(sp)
   223d8:	dc800217 	ldw	r18,8(sp)
   223dc:	dc400117 	ldw	r17,4(sp)
   223e0:	dc000017 	ldw	r16,0(sp)
   223e4:	dec00a04 	addi	sp,sp,40
   223e8:	f800283a 	ret
   223ec:	017fff04 	movi	r5,-4
   223f0:	414a703a 	and	r5,r8,r5
   223f4:	814d883a 	add	r6,r16,r5
   223f8:	30c01f16 	blt	r6,r3,22478 <_realloc_r+0x22c>
   223fc:	20800317 	ldw	r2,12(r4)
   22400:	20c00217 	ldw	r3,8(r4)
   22404:	a825883a 	mov	r18,r21
   22408:	3021883a 	mov	r16,r6
   2240c:	18800315 	stw	r2,12(r3)
   22410:	10c00215 	stw	r3,8(r2)
   22414:	003fdb06 	br	22384 <__alt_data_end+0xfffe2384>
   22418:	00800304 	movi	r2,12
   2241c:	a0800015 	stw	r2,0(r20)
   22420:	0005883a 	mov	r2,zero
   22424:	003fe506 	br	223bc <__alt_data_end+0xfffe23bc>
   22428:	98c00117 	ldw	r3,4(r19)
   2242c:	9c4b883a 	add	r5,r19,r17
   22430:	11000054 	ori	r4,r2,1
   22434:	18c0004c 	andi	r3,r3,1
   22438:	1c62b03a 	or	r17,r3,r17
   2243c:	9c400115 	stw	r17,4(r19)
   22440:	29000115 	stw	r4,4(r5)
   22444:	2885883a 	add	r2,r5,r2
   22448:	10c00117 	ldw	r3,4(r2)
   2244c:	29400204 	addi	r5,r5,8
   22450:	a009883a 	mov	r4,r20
   22454:	18c00054 	ori	r3,r3,1
   22458:	10c00115 	stw	r3,4(r2)
   2245c:	00230180 	call	23018 <_free_r>
   22460:	003fd306 	br	223b0 <__alt_data_end+0xfffe23b0>
   22464:	017fff04 	movi	r5,-4
   22468:	414a703a 	and	r5,r8,r5
   2246c:	89800404 	addi	r6,r17,16
   22470:	8151883a 	add	r8,r16,r5
   22474:	4180590e 	bge	r8,r6,225dc <_realloc_r+0x390>
   22478:	1080004c 	andi	r2,r2,1
   2247c:	103f9e1e 	bne	r2,zero,222f8 <__alt_data_end+0xfffe22f8>
   22480:	adbffe17 	ldw	r22,-8(r21)
   22484:	00bfff04 	movi	r2,-4
   22488:	9dadc83a 	sub	r22,r19,r22
   2248c:	b1800117 	ldw	r6,4(r22)
   22490:	3084703a 	and	r2,r6,r2
   22494:	20002026 	beq	r4,zero,22518 <_realloc_r+0x2cc>
   22498:	80af883a 	add	r23,r16,r2
   2249c:	b96f883a 	add	r23,r23,r5
   224a0:	21c05f26 	beq	r4,r7,22620 <_realloc_r+0x3d4>
   224a4:	b8c01c16 	blt	r23,r3,22518 <_realloc_r+0x2cc>
   224a8:	20800317 	ldw	r2,12(r4)
   224ac:	20c00217 	ldw	r3,8(r4)
   224b0:	81bfff04 	addi	r6,r16,-4
   224b4:	01000904 	movi	r4,36
   224b8:	18800315 	stw	r2,12(r3)
   224bc:	10c00215 	stw	r3,8(r2)
   224c0:	b0c00217 	ldw	r3,8(r22)
   224c4:	b0800317 	ldw	r2,12(r22)
   224c8:	b4800204 	addi	r18,r22,8
   224cc:	18800315 	stw	r2,12(r3)
   224d0:	10c00215 	stw	r3,8(r2)
   224d4:	21801b36 	bltu	r4,r6,22544 <_realloc_r+0x2f8>
   224d8:	008004c4 	movi	r2,19
   224dc:	1180352e 	bgeu	r2,r6,225b4 <_realloc_r+0x368>
   224e0:	a8800017 	ldw	r2,0(r21)
   224e4:	b0800215 	stw	r2,8(r22)
   224e8:	a8800117 	ldw	r2,4(r21)
   224ec:	b0800315 	stw	r2,12(r22)
   224f0:	008006c4 	movi	r2,27
   224f4:	11807f36 	bltu	r2,r6,226f4 <_realloc_r+0x4a8>
   224f8:	b0800404 	addi	r2,r22,16
   224fc:	ad400204 	addi	r21,r21,8
   22500:	00002d06 	br	225b8 <_realloc_r+0x36c>
   22504:	adbffe17 	ldw	r22,-8(r21)
   22508:	00bfff04 	movi	r2,-4
   2250c:	9dadc83a 	sub	r22,r19,r22
   22510:	b1000117 	ldw	r4,4(r22)
   22514:	2084703a 	and	r2,r4,r2
   22518:	b03f7726 	beq	r22,zero,222f8 <__alt_data_end+0xfffe22f8>
   2251c:	80af883a 	add	r23,r16,r2
   22520:	b8ff7516 	blt	r23,r3,222f8 <__alt_data_end+0xfffe22f8>
   22524:	b0800317 	ldw	r2,12(r22)
   22528:	b0c00217 	ldw	r3,8(r22)
   2252c:	81bfff04 	addi	r6,r16,-4
   22530:	01000904 	movi	r4,36
   22534:	18800315 	stw	r2,12(r3)
   22538:	10c00215 	stw	r3,8(r2)
   2253c:	b4800204 	addi	r18,r22,8
   22540:	21bfe52e 	bgeu	r4,r6,224d8 <__alt_data_end+0xfffe24d8>
   22544:	a80b883a 	mov	r5,r21
   22548:	9009883a 	mov	r4,r18
   2254c:	0021fc80 	call	21fc8 <memmove>
   22550:	b821883a 	mov	r16,r23
   22554:	b027883a 	mov	r19,r22
   22558:	003f8a06 	br	22384 <__alt_data_end+0xfffe2384>
   2255c:	300b883a 	mov	r5,r6
   22560:	dfc00917 	ldw	ra,36(sp)
   22564:	df000817 	ldw	fp,32(sp)
   22568:	ddc00717 	ldw	r23,28(sp)
   2256c:	dd800617 	ldw	r22,24(sp)
   22570:	dd400517 	ldw	r21,20(sp)
   22574:	dd000417 	ldw	r20,16(sp)
   22578:	dcc00317 	ldw	r19,12(sp)
   2257c:	dc800217 	ldw	r18,8(sp)
   22580:	dc400117 	ldw	r17,4(sp)
   22584:	dc000017 	ldw	r16,0(sp)
   22588:	dec00a04 	addi	sp,sp,40
   2258c:	00215901 	jmpi	21590 <_malloc_r>
   22590:	a8c00017 	ldw	r3,0(r21)
   22594:	90c00015 	stw	r3,0(r18)
   22598:	a8c00117 	ldw	r3,4(r21)
   2259c:	90c00115 	stw	r3,4(r18)
   225a0:	00c006c4 	movi	r3,27
   225a4:	19804536 	bltu	r3,r6,226bc <_realloc_r+0x470>
   225a8:	90800204 	addi	r2,r18,8
   225ac:	a8c00204 	addi	r3,r21,8
   225b0:	003f6306 	br	22340 <__alt_data_end+0xfffe2340>
   225b4:	9005883a 	mov	r2,r18
   225b8:	a8c00017 	ldw	r3,0(r21)
   225bc:	b821883a 	mov	r16,r23
   225c0:	b027883a 	mov	r19,r22
   225c4:	10c00015 	stw	r3,0(r2)
   225c8:	a8c00117 	ldw	r3,4(r21)
   225cc:	10c00115 	stw	r3,4(r2)
   225d0:	a8c00217 	ldw	r3,8(r21)
   225d4:	10c00215 	stw	r3,8(r2)
   225d8:	003f6a06 	br	22384 <__alt_data_end+0xfffe2384>
   225dc:	9c67883a 	add	r19,r19,r17
   225e0:	4445c83a 	sub	r2,r8,r17
   225e4:	e4c00215 	stw	r19,8(fp)
   225e8:	10800054 	ori	r2,r2,1
   225ec:	98800115 	stw	r2,4(r19)
   225f0:	a8bfff17 	ldw	r2,-4(r21)
   225f4:	a009883a 	mov	r4,r20
   225f8:	1080004c 	andi	r2,r2,1
   225fc:	1462b03a 	or	r17,r2,r17
   22600:	ac7fff15 	stw	r17,-4(r21)
   22604:	0023c140 	call	23c14 <__malloc_unlock>
   22608:	a805883a 	mov	r2,r21
   2260c:	003f6b06 	br	223bc <__alt_data_end+0xfffe23bc>
   22610:	a80b883a 	mov	r5,r21
   22614:	9009883a 	mov	r4,r18
   22618:	0021fc80 	call	21fc8 <memmove>
   2261c:	003f4e06 	br	22358 <__alt_data_end+0xfffe2358>
   22620:	89000404 	addi	r4,r17,16
   22624:	b93fbc16 	blt	r23,r4,22518 <__alt_data_end+0xfffe2518>
   22628:	b0800317 	ldw	r2,12(r22)
   2262c:	b0c00217 	ldw	r3,8(r22)
   22630:	81bfff04 	addi	r6,r16,-4
   22634:	01000904 	movi	r4,36
   22638:	18800315 	stw	r2,12(r3)
   2263c:	10c00215 	stw	r3,8(r2)
   22640:	b4800204 	addi	r18,r22,8
   22644:	21804336 	bltu	r4,r6,22754 <_realloc_r+0x508>
   22648:	008004c4 	movi	r2,19
   2264c:	11803f2e 	bgeu	r2,r6,2274c <_realloc_r+0x500>
   22650:	a8800017 	ldw	r2,0(r21)
   22654:	b0800215 	stw	r2,8(r22)
   22658:	a8800117 	ldw	r2,4(r21)
   2265c:	b0800315 	stw	r2,12(r22)
   22660:	008006c4 	movi	r2,27
   22664:	11803f36 	bltu	r2,r6,22764 <_realloc_r+0x518>
   22668:	b0800404 	addi	r2,r22,16
   2266c:	ad400204 	addi	r21,r21,8
   22670:	a8c00017 	ldw	r3,0(r21)
   22674:	10c00015 	stw	r3,0(r2)
   22678:	a8c00117 	ldw	r3,4(r21)
   2267c:	10c00115 	stw	r3,4(r2)
   22680:	a8c00217 	ldw	r3,8(r21)
   22684:	10c00215 	stw	r3,8(r2)
   22688:	b447883a 	add	r3,r22,r17
   2268c:	bc45c83a 	sub	r2,r23,r17
   22690:	e0c00215 	stw	r3,8(fp)
   22694:	10800054 	ori	r2,r2,1
   22698:	18800115 	stw	r2,4(r3)
   2269c:	b0800117 	ldw	r2,4(r22)
   226a0:	a009883a 	mov	r4,r20
   226a4:	1080004c 	andi	r2,r2,1
   226a8:	1462b03a 	or	r17,r2,r17
   226ac:	b4400115 	stw	r17,4(r22)
   226b0:	0023c140 	call	23c14 <__malloc_unlock>
   226b4:	9005883a 	mov	r2,r18
   226b8:	003f4006 	br	223bc <__alt_data_end+0xfffe23bc>
   226bc:	a8c00217 	ldw	r3,8(r21)
   226c0:	90c00215 	stw	r3,8(r18)
   226c4:	a8c00317 	ldw	r3,12(r21)
   226c8:	90c00315 	stw	r3,12(r18)
   226cc:	30801126 	beq	r6,r2,22714 <_realloc_r+0x4c8>
   226d0:	90800404 	addi	r2,r18,16
   226d4:	a8c00404 	addi	r3,r21,16
   226d8:	003f1906 	br	22340 <__alt_data_end+0xfffe2340>
   226dc:	90ffff17 	ldw	r3,-4(r18)
   226e0:	00bfff04 	movi	r2,-4
   226e4:	a825883a 	mov	r18,r21
   226e8:	1884703a 	and	r2,r3,r2
   226ec:	80a1883a 	add	r16,r16,r2
   226f0:	003f2406 	br	22384 <__alt_data_end+0xfffe2384>
   226f4:	a8800217 	ldw	r2,8(r21)
   226f8:	b0800415 	stw	r2,16(r22)
   226fc:	a8800317 	ldw	r2,12(r21)
   22700:	b0800515 	stw	r2,20(r22)
   22704:	31000a26 	beq	r6,r4,22730 <_realloc_r+0x4e4>
   22708:	b0800604 	addi	r2,r22,24
   2270c:	ad400404 	addi	r21,r21,16
   22710:	003fa906 	br	225b8 <__alt_data_end+0xfffe25b8>
   22714:	a9000417 	ldw	r4,16(r21)
   22718:	90800604 	addi	r2,r18,24
   2271c:	a8c00604 	addi	r3,r21,24
   22720:	91000415 	stw	r4,16(r18)
   22724:	a9000517 	ldw	r4,20(r21)
   22728:	91000515 	stw	r4,20(r18)
   2272c:	003f0406 	br	22340 <__alt_data_end+0xfffe2340>
   22730:	a8c00417 	ldw	r3,16(r21)
   22734:	ad400604 	addi	r21,r21,24
   22738:	b0800804 	addi	r2,r22,32
   2273c:	b0c00615 	stw	r3,24(r22)
   22740:	a8ffff17 	ldw	r3,-4(r21)
   22744:	b0c00715 	stw	r3,28(r22)
   22748:	003f9b06 	br	225b8 <__alt_data_end+0xfffe25b8>
   2274c:	9005883a 	mov	r2,r18
   22750:	003fc706 	br	22670 <__alt_data_end+0xfffe2670>
   22754:	a80b883a 	mov	r5,r21
   22758:	9009883a 	mov	r4,r18
   2275c:	0021fc80 	call	21fc8 <memmove>
   22760:	003fc906 	br	22688 <__alt_data_end+0xfffe2688>
   22764:	a8800217 	ldw	r2,8(r21)
   22768:	b0800415 	stw	r2,16(r22)
   2276c:	a8800317 	ldw	r2,12(r21)
   22770:	b0800515 	stw	r2,20(r22)
   22774:	31000726 	beq	r6,r4,22794 <_realloc_r+0x548>
   22778:	b0800604 	addi	r2,r22,24
   2277c:	ad400404 	addi	r21,r21,16
   22780:	003fbb06 	br	22670 <__alt_data_end+0xfffe2670>
   22784:	a009883a 	mov	r4,r20
   22788:	0023c140 	call	23c14 <__malloc_unlock>
   2278c:	0005883a 	mov	r2,zero
   22790:	003f0a06 	br	223bc <__alt_data_end+0xfffe23bc>
   22794:	a8c00417 	ldw	r3,16(r21)
   22798:	ad400604 	addi	r21,r21,24
   2279c:	b0800804 	addi	r2,r22,32
   227a0:	b0c00615 	stw	r3,24(r22)
   227a4:	a8ffff17 	ldw	r3,-4(r21)
   227a8:	b0c00715 	stw	r3,28(r22)
   227ac:	003fb006 	br	22670 <__alt_data_end+0xfffe2670>

000227b0 <_sbrk_r>:
   227b0:	defffd04 	addi	sp,sp,-12
   227b4:	dc000015 	stw	r16,0(sp)
   227b8:	040000f4 	movhi	r16,3
   227bc:	dc400115 	stw	r17,4(sp)
   227c0:	84302a04 	addi	r16,r16,-16216
   227c4:	2023883a 	mov	r17,r4
   227c8:	2809883a 	mov	r4,r5
   227cc:	dfc00215 	stw	ra,8(sp)
   227d0:	80000015 	stw	zero,0(r16)
   227d4:	0023dfc0 	call	23dfc <sbrk>
   227d8:	00ffffc4 	movi	r3,-1
   227dc:	10c00526 	beq	r2,r3,227f4 <_sbrk_r+0x44>
   227e0:	dfc00217 	ldw	ra,8(sp)
   227e4:	dc400117 	ldw	r17,4(sp)
   227e8:	dc000017 	ldw	r16,0(sp)
   227ec:	dec00304 	addi	sp,sp,12
   227f0:	f800283a 	ret
   227f4:	80c00017 	ldw	r3,0(r16)
   227f8:	183ff926 	beq	r3,zero,227e0 <__alt_data_end+0xfffe27e0>
   227fc:	88c00015 	stw	r3,0(r17)
   22800:	003ff706 	br	227e0 <__alt_data_end+0xfffe27e0>

00022804 <__sread>:
   22804:	defffe04 	addi	sp,sp,-8
   22808:	dc000015 	stw	r16,0(sp)
   2280c:	2821883a 	mov	r16,r5
   22810:	2940038f 	ldh	r5,14(r5)
   22814:	dfc00115 	stw	ra,4(sp)
   22818:	00235440 	call	23544 <_read_r>
   2281c:	10000716 	blt	r2,zero,2283c <__sread+0x38>
   22820:	80c01417 	ldw	r3,80(r16)
   22824:	1887883a 	add	r3,r3,r2
   22828:	80c01415 	stw	r3,80(r16)
   2282c:	dfc00117 	ldw	ra,4(sp)
   22830:	dc000017 	ldw	r16,0(sp)
   22834:	dec00204 	addi	sp,sp,8
   22838:	f800283a 	ret
   2283c:	80c0030b 	ldhu	r3,12(r16)
   22840:	18fbffcc 	andi	r3,r3,61439
   22844:	80c0030d 	sth	r3,12(r16)
   22848:	dfc00117 	ldw	ra,4(sp)
   2284c:	dc000017 	ldw	r16,0(sp)
   22850:	dec00204 	addi	sp,sp,8
   22854:	f800283a 	ret

00022858 <__seofread>:
   22858:	0005883a 	mov	r2,zero
   2285c:	f800283a 	ret

00022860 <__swrite>:
   22860:	2880030b 	ldhu	r2,12(r5)
   22864:	defffb04 	addi	sp,sp,-20
   22868:	dcc00315 	stw	r19,12(sp)
   2286c:	dc800215 	stw	r18,8(sp)
   22870:	dc400115 	stw	r17,4(sp)
   22874:	dc000015 	stw	r16,0(sp)
   22878:	dfc00415 	stw	ra,16(sp)
   2287c:	10c0400c 	andi	r3,r2,256
   22880:	2821883a 	mov	r16,r5
   22884:	2023883a 	mov	r17,r4
   22888:	3025883a 	mov	r18,r6
   2288c:	3827883a 	mov	r19,r7
   22890:	18000526 	beq	r3,zero,228a8 <__swrite+0x48>
   22894:	2940038f 	ldh	r5,14(r5)
   22898:	01c00084 	movi	r7,2
   2289c:	000d883a 	mov	r6,zero
   228a0:	00233280 	call	23328 <_lseek_r>
   228a4:	8080030b 	ldhu	r2,12(r16)
   228a8:	8140038f 	ldh	r5,14(r16)
   228ac:	10bbffcc 	andi	r2,r2,61439
   228b0:	980f883a 	mov	r7,r19
   228b4:	900d883a 	mov	r6,r18
   228b8:	8809883a 	mov	r4,r17
   228bc:	8080030d 	sth	r2,12(r16)
   228c0:	dfc00417 	ldw	ra,16(sp)
   228c4:	dcc00317 	ldw	r19,12(sp)
   228c8:	dc800217 	ldw	r18,8(sp)
   228cc:	dc400117 	ldw	r17,4(sp)
   228d0:	dc000017 	ldw	r16,0(sp)
   228d4:	dec00504 	addi	sp,sp,20
   228d8:	00229401 	jmpi	22940 <_write_r>

000228dc <__sseek>:
   228dc:	defffe04 	addi	sp,sp,-8
   228e0:	dc000015 	stw	r16,0(sp)
   228e4:	2821883a 	mov	r16,r5
   228e8:	2940038f 	ldh	r5,14(r5)
   228ec:	dfc00115 	stw	ra,4(sp)
   228f0:	00233280 	call	23328 <_lseek_r>
   228f4:	00ffffc4 	movi	r3,-1
   228f8:	10c00826 	beq	r2,r3,2291c <__sseek+0x40>
   228fc:	80c0030b 	ldhu	r3,12(r16)
   22900:	80801415 	stw	r2,80(r16)
   22904:	18c40014 	ori	r3,r3,4096
   22908:	80c0030d 	sth	r3,12(r16)
   2290c:	dfc00117 	ldw	ra,4(sp)
   22910:	dc000017 	ldw	r16,0(sp)
   22914:	dec00204 	addi	sp,sp,8
   22918:	f800283a 	ret
   2291c:	80c0030b 	ldhu	r3,12(r16)
   22920:	18fbffcc 	andi	r3,r3,61439
   22924:	80c0030d 	sth	r3,12(r16)
   22928:	dfc00117 	ldw	ra,4(sp)
   2292c:	dc000017 	ldw	r16,0(sp)
   22930:	dec00204 	addi	sp,sp,8
   22934:	f800283a 	ret

00022938 <__sclose>:
   22938:	2940038f 	ldh	r5,14(r5)
   2293c:	0022af41 	jmpi	22af4 <_close_r>

00022940 <_write_r>:
   22940:	defffd04 	addi	sp,sp,-12
   22944:	2805883a 	mov	r2,r5
   22948:	dc000015 	stw	r16,0(sp)
   2294c:	040000f4 	movhi	r16,3
   22950:	dc400115 	stw	r17,4(sp)
   22954:	300b883a 	mov	r5,r6
   22958:	84302a04 	addi	r16,r16,-16216
   2295c:	2023883a 	mov	r17,r4
   22960:	380d883a 	mov	r6,r7
   22964:	1009883a 	mov	r4,r2
   22968:	dfc00215 	stw	ra,8(sp)
   2296c:	80000015 	stw	zero,0(r16)
   22970:	0023f180 	call	23f18 <write>
   22974:	00ffffc4 	movi	r3,-1
   22978:	10c00526 	beq	r2,r3,22990 <_write_r+0x50>
   2297c:	dfc00217 	ldw	ra,8(sp)
   22980:	dc400117 	ldw	r17,4(sp)
   22984:	dc000017 	ldw	r16,0(sp)
   22988:	dec00304 	addi	sp,sp,12
   2298c:	f800283a 	ret
   22990:	80c00017 	ldw	r3,0(r16)
   22994:	183ff926 	beq	r3,zero,2297c <__alt_data_end+0xfffe297c>
   22998:	88c00015 	stw	r3,0(r17)
   2299c:	003ff706 	br	2297c <__alt_data_end+0xfffe297c>

000229a0 <__swsetup_r>:
   229a0:	008000f4 	movhi	r2,3
   229a4:	defffd04 	addi	sp,sp,-12
   229a8:	10a93c04 	addi	r2,r2,-23312
   229ac:	dc400115 	stw	r17,4(sp)
   229b0:	2023883a 	mov	r17,r4
   229b4:	11000017 	ldw	r4,0(r2)
   229b8:	dc000015 	stw	r16,0(sp)
   229bc:	dfc00215 	stw	ra,8(sp)
   229c0:	2821883a 	mov	r16,r5
   229c4:	20000226 	beq	r4,zero,229d0 <__swsetup_r+0x30>
   229c8:	20800e17 	ldw	r2,56(r4)
   229cc:	10003126 	beq	r2,zero,22a94 <__swsetup_r+0xf4>
   229d0:	8080030b 	ldhu	r2,12(r16)
   229d4:	10c0020c 	andi	r3,r2,8
   229d8:	1009883a 	mov	r4,r2
   229dc:	18000f26 	beq	r3,zero,22a1c <__swsetup_r+0x7c>
   229e0:	80c00417 	ldw	r3,16(r16)
   229e4:	18001526 	beq	r3,zero,22a3c <__swsetup_r+0x9c>
   229e8:	1100004c 	andi	r4,r2,1
   229ec:	20001c1e 	bne	r4,zero,22a60 <__swsetup_r+0xc0>
   229f0:	1080008c 	andi	r2,r2,2
   229f4:	1000291e 	bne	r2,zero,22a9c <__swsetup_r+0xfc>
   229f8:	80800517 	ldw	r2,20(r16)
   229fc:	80800215 	stw	r2,8(r16)
   22a00:	18001c26 	beq	r3,zero,22a74 <__swsetup_r+0xd4>
   22a04:	0005883a 	mov	r2,zero
   22a08:	dfc00217 	ldw	ra,8(sp)
   22a0c:	dc400117 	ldw	r17,4(sp)
   22a10:	dc000017 	ldw	r16,0(sp)
   22a14:	dec00304 	addi	sp,sp,12
   22a18:	f800283a 	ret
   22a1c:	2080040c 	andi	r2,r4,16
   22a20:	10002e26 	beq	r2,zero,22adc <__swsetup_r+0x13c>
   22a24:	2080010c 	andi	r2,r4,4
   22a28:	10001e1e 	bne	r2,zero,22aa4 <__swsetup_r+0x104>
   22a2c:	80c00417 	ldw	r3,16(r16)
   22a30:	20800214 	ori	r2,r4,8
   22a34:	8080030d 	sth	r2,12(r16)
   22a38:	183feb1e 	bne	r3,zero,229e8 <__alt_data_end+0xfffe29e8>
   22a3c:	1100a00c 	andi	r4,r2,640
   22a40:	01408004 	movi	r5,512
   22a44:	217fe826 	beq	r4,r5,229e8 <__alt_data_end+0xfffe29e8>
   22a48:	800b883a 	mov	r5,r16
   22a4c:	8809883a 	mov	r4,r17
   22a50:	00233880 	call	23388 <__smakebuf_r>
   22a54:	8080030b 	ldhu	r2,12(r16)
   22a58:	80c00417 	ldw	r3,16(r16)
   22a5c:	003fe206 	br	229e8 <__alt_data_end+0xfffe29e8>
   22a60:	80800517 	ldw	r2,20(r16)
   22a64:	80000215 	stw	zero,8(r16)
   22a68:	0085c83a 	sub	r2,zero,r2
   22a6c:	80800615 	stw	r2,24(r16)
   22a70:	183fe41e 	bne	r3,zero,22a04 <__alt_data_end+0xfffe2a04>
   22a74:	80c0030b 	ldhu	r3,12(r16)
   22a78:	0005883a 	mov	r2,zero
   22a7c:	1900200c 	andi	r4,r3,128
   22a80:	203fe126 	beq	r4,zero,22a08 <__alt_data_end+0xfffe2a08>
   22a84:	18c01014 	ori	r3,r3,64
   22a88:	80c0030d 	sth	r3,12(r16)
   22a8c:	00bfffc4 	movi	r2,-1
   22a90:	003fdd06 	br	22a08 <__alt_data_end+0xfffe2a08>
   22a94:	0020ef00 	call	20ef0 <__sinit>
   22a98:	003fcd06 	br	229d0 <__alt_data_end+0xfffe29d0>
   22a9c:	0005883a 	mov	r2,zero
   22aa0:	003fd606 	br	229fc <__alt_data_end+0xfffe29fc>
   22aa4:	81400c17 	ldw	r5,48(r16)
   22aa8:	28000626 	beq	r5,zero,22ac4 <__swsetup_r+0x124>
   22aac:	80801004 	addi	r2,r16,64
   22ab0:	28800326 	beq	r5,r2,22ac0 <__swsetup_r+0x120>
   22ab4:	8809883a 	mov	r4,r17
   22ab8:	00230180 	call	23018 <_free_r>
   22abc:	8100030b 	ldhu	r4,12(r16)
   22ac0:	80000c15 	stw	zero,48(r16)
   22ac4:	80c00417 	ldw	r3,16(r16)
   22ac8:	00bff6c4 	movi	r2,-37
   22acc:	1108703a 	and	r4,r2,r4
   22ad0:	80000115 	stw	zero,4(r16)
   22ad4:	80c00015 	stw	r3,0(r16)
   22ad8:	003fd506 	br	22a30 <__alt_data_end+0xfffe2a30>
   22adc:	00800244 	movi	r2,9
   22ae0:	88800015 	stw	r2,0(r17)
   22ae4:	20801014 	ori	r2,r4,64
   22ae8:	8080030d 	sth	r2,12(r16)
   22aec:	00bfffc4 	movi	r2,-1
   22af0:	003fc506 	br	22a08 <__alt_data_end+0xfffe2a08>

00022af4 <_close_r>:
   22af4:	defffd04 	addi	sp,sp,-12
   22af8:	dc000015 	stw	r16,0(sp)
   22afc:	040000f4 	movhi	r16,3
   22b00:	dc400115 	stw	r17,4(sp)
   22b04:	84302a04 	addi	r16,r16,-16216
   22b08:	2023883a 	mov	r17,r4
   22b0c:	2809883a 	mov	r4,r5
   22b10:	dfc00215 	stw	ra,8(sp)
   22b14:	80000015 	stw	zero,0(r16)
   22b18:	00236900 	call	23690 <close>
   22b1c:	00ffffc4 	movi	r3,-1
   22b20:	10c00526 	beq	r2,r3,22b38 <_close_r+0x44>
   22b24:	dfc00217 	ldw	ra,8(sp)
   22b28:	dc400117 	ldw	r17,4(sp)
   22b2c:	dc000017 	ldw	r16,0(sp)
   22b30:	dec00304 	addi	sp,sp,12
   22b34:	f800283a 	ret
   22b38:	80c00017 	ldw	r3,0(r16)
   22b3c:	183ff926 	beq	r3,zero,22b24 <__alt_data_end+0xfffe2b24>
   22b40:	88c00015 	stw	r3,0(r17)
   22b44:	003ff706 	br	22b24 <__alt_data_end+0xfffe2b24>

00022b48 <_fclose_r>:
   22b48:	28003926 	beq	r5,zero,22c30 <_fclose_r+0xe8>
   22b4c:	defffc04 	addi	sp,sp,-16
   22b50:	dc400115 	stw	r17,4(sp)
   22b54:	dc000015 	stw	r16,0(sp)
   22b58:	dfc00315 	stw	ra,12(sp)
   22b5c:	dc800215 	stw	r18,8(sp)
   22b60:	2023883a 	mov	r17,r4
   22b64:	2821883a 	mov	r16,r5
   22b68:	20000226 	beq	r4,zero,22b74 <_fclose_r+0x2c>
   22b6c:	20800e17 	ldw	r2,56(r4)
   22b70:	10002726 	beq	r2,zero,22c10 <_fclose_r+0xc8>
   22b74:	8080030f 	ldh	r2,12(r16)
   22b78:	1000071e 	bne	r2,zero,22b98 <_fclose_r+0x50>
   22b7c:	0005883a 	mov	r2,zero
   22b80:	dfc00317 	ldw	ra,12(sp)
   22b84:	dc800217 	ldw	r18,8(sp)
   22b88:	dc400117 	ldw	r17,4(sp)
   22b8c:	dc000017 	ldw	r16,0(sp)
   22b90:	dec00404 	addi	sp,sp,16
   22b94:	f800283a 	ret
   22b98:	800b883a 	mov	r5,r16
   22b9c:	8809883a 	mov	r4,r17
   22ba0:	0022c4c0 	call	22c4c <__sflush_r>
   22ba4:	1025883a 	mov	r18,r2
   22ba8:	80800b17 	ldw	r2,44(r16)
   22bac:	10000426 	beq	r2,zero,22bc0 <_fclose_r+0x78>
   22bb0:	81400717 	ldw	r5,28(r16)
   22bb4:	8809883a 	mov	r4,r17
   22bb8:	103ee83a 	callr	r2
   22bbc:	10001616 	blt	r2,zero,22c18 <_fclose_r+0xd0>
   22bc0:	8080030b 	ldhu	r2,12(r16)
   22bc4:	1080200c 	andi	r2,r2,128
   22bc8:	1000151e 	bne	r2,zero,22c20 <_fclose_r+0xd8>
   22bcc:	81400c17 	ldw	r5,48(r16)
   22bd0:	28000526 	beq	r5,zero,22be8 <_fclose_r+0xa0>
   22bd4:	80801004 	addi	r2,r16,64
   22bd8:	28800226 	beq	r5,r2,22be4 <_fclose_r+0x9c>
   22bdc:	8809883a 	mov	r4,r17
   22be0:	00230180 	call	23018 <_free_r>
   22be4:	80000c15 	stw	zero,48(r16)
   22be8:	81401117 	ldw	r5,68(r16)
   22bec:	28000326 	beq	r5,zero,22bfc <_fclose_r+0xb4>
   22bf0:	8809883a 	mov	r4,r17
   22bf4:	00230180 	call	23018 <_free_r>
   22bf8:	80001115 	stw	zero,68(r16)
   22bfc:	0020f000 	call	20f00 <__sfp_lock_acquire>
   22c00:	8000030d 	sth	zero,12(r16)
   22c04:	0020f040 	call	20f04 <__sfp_lock_release>
   22c08:	9005883a 	mov	r2,r18
   22c0c:	003fdc06 	br	22b80 <__alt_data_end+0xfffe2b80>
   22c10:	0020ef00 	call	20ef0 <__sinit>
   22c14:	003fd706 	br	22b74 <__alt_data_end+0xfffe2b74>
   22c18:	04bfffc4 	movi	r18,-1
   22c1c:	003fe806 	br	22bc0 <__alt_data_end+0xfffe2bc0>
   22c20:	81400417 	ldw	r5,16(r16)
   22c24:	8809883a 	mov	r4,r17
   22c28:	00230180 	call	23018 <_free_r>
   22c2c:	003fe706 	br	22bcc <__alt_data_end+0xfffe2bcc>
   22c30:	0005883a 	mov	r2,zero
   22c34:	f800283a 	ret

00022c38 <fclose>:
   22c38:	008000f4 	movhi	r2,3
   22c3c:	10a93c04 	addi	r2,r2,-23312
   22c40:	200b883a 	mov	r5,r4
   22c44:	11000017 	ldw	r4,0(r2)
   22c48:	0022b481 	jmpi	22b48 <_fclose_r>

00022c4c <__sflush_r>:
   22c4c:	2880030b 	ldhu	r2,12(r5)
   22c50:	defffb04 	addi	sp,sp,-20
   22c54:	dcc00315 	stw	r19,12(sp)
   22c58:	dc400115 	stw	r17,4(sp)
   22c5c:	dfc00415 	stw	ra,16(sp)
   22c60:	dc800215 	stw	r18,8(sp)
   22c64:	dc000015 	stw	r16,0(sp)
   22c68:	10c0020c 	andi	r3,r2,8
   22c6c:	2823883a 	mov	r17,r5
   22c70:	2027883a 	mov	r19,r4
   22c74:	1800311e 	bne	r3,zero,22d3c <__sflush_r+0xf0>
   22c78:	28c00117 	ldw	r3,4(r5)
   22c7c:	10820014 	ori	r2,r2,2048
   22c80:	2880030d 	sth	r2,12(r5)
   22c84:	00c04b0e 	bge	zero,r3,22db4 <__sflush_r+0x168>
   22c88:	8a000a17 	ldw	r8,40(r17)
   22c8c:	40002326 	beq	r8,zero,22d1c <__sflush_r+0xd0>
   22c90:	9c000017 	ldw	r16,0(r19)
   22c94:	10c4000c 	andi	r3,r2,4096
   22c98:	98000015 	stw	zero,0(r19)
   22c9c:	18004826 	beq	r3,zero,22dc0 <__sflush_r+0x174>
   22ca0:	89801417 	ldw	r6,80(r17)
   22ca4:	10c0010c 	andi	r3,r2,4
   22ca8:	18000626 	beq	r3,zero,22cc4 <__sflush_r+0x78>
   22cac:	88c00117 	ldw	r3,4(r17)
   22cb0:	88800c17 	ldw	r2,48(r17)
   22cb4:	30cdc83a 	sub	r6,r6,r3
   22cb8:	10000226 	beq	r2,zero,22cc4 <__sflush_r+0x78>
   22cbc:	88800f17 	ldw	r2,60(r17)
   22cc0:	308dc83a 	sub	r6,r6,r2
   22cc4:	89400717 	ldw	r5,28(r17)
   22cc8:	000f883a 	mov	r7,zero
   22ccc:	9809883a 	mov	r4,r19
   22cd0:	403ee83a 	callr	r8
   22cd4:	00ffffc4 	movi	r3,-1
   22cd8:	10c04426 	beq	r2,r3,22dec <__sflush_r+0x1a0>
   22cdc:	88c0030b 	ldhu	r3,12(r17)
   22ce0:	89000417 	ldw	r4,16(r17)
   22ce4:	88000115 	stw	zero,4(r17)
   22ce8:	197dffcc 	andi	r5,r3,63487
   22cec:	8940030d 	sth	r5,12(r17)
   22cf0:	89000015 	stw	r4,0(r17)
   22cf4:	18c4000c 	andi	r3,r3,4096
   22cf8:	18002c1e 	bne	r3,zero,22dac <__sflush_r+0x160>
   22cfc:	89400c17 	ldw	r5,48(r17)
   22d00:	9c000015 	stw	r16,0(r19)
   22d04:	28000526 	beq	r5,zero,22d1c <__sflush_r+0xd0>
   22d08:	88801004 	addi	r2,r17,64
   22d0c:	28800226 	beq	r5,r2,22d18 <__sflush_r+0xcc>
   22d10:	9809883a 	mov	r4,r19
   22d14:	00230180 	call	23018 <_free_r>
   22d18:	88000c15 	stw	zero,48(r17)
   22d1c:	0005883a 	mov	r2,zero
   22d20:	dfc00417 	ldw	ra,16(sp)
   22d24:	dcc00317 	ldw	r19,12(sp)
   22d28:	dc800217 	ldw	r18,8(sp)
   22d2c:	dc400117 	ldw	r17,4(sp)
   22d30:	dc000017 	ldw	r16,0(sp)
   22d34:	dec00504 	addi	sp,sp,20
   22d38:	f800283a 	ret
   22d3c:	2c800417 	ldw	r18,16(r5)
   22d40:	903ff626 	beq	r18,zero,22d1c <__alt_data_end+0xfffe2d1c>
   22d44:	2c000017 	ldw	r16,0(r5)
   22d48:	108000cc 	andi	r2,r2,3
   22d4c:	2c800015 	stw	r18,0(r5)
   22d50:	84a1c83a 	sub	r16,r16,r18
   22d54:	1000131e 	bne	r2,zero,22da4 <__sflush_r+0x158>
   22d58:	28800517 	ldw	r2,20(r5)
   22d5c:	88800215 	stw	r2,8(r17)
   22d60:	04000316 	blt	zero,r16,22d70 <__sflush_r+0x124>
   22d64:	003fed06 	br	22d1c <__alt_data_end+0xfffe2d1c>
   22d68:	90a5883a 	add	r18,r18,r2
   22d6c:	043feb0e 	bge	zero,r16,22d1c <__alt_data_end+0xfffe2d1c>
   22d70:	88800917 	ldw	r2,36(r17)
   22d74:	89400717 	ldw	r5,28(r17)
   22d78:	800f883a 	mov	r7,r16
   22d7c:	900d883a 	mov	r6,r18
   22d80:	9809883a 	mov	r4,r19
   22d84:	103ee83a 	callr	r2
   22d88:	80a1c83a 	sub	r16,r16,r2
   22d8c:	00bff616 	blt	zero,r2,22d68 <__alt_data_end+0xfffe2d68>
   22d90:	88c0030b 	ldhu	r3,12(r17)
   22d94:	00bfffc4 	movi	r2,-1
   22d98:	18c01014 	ori	r3,r3,64
   22d9c:	88c0030d 	sth	r3,12(r17)
   22da0:	003fdf06 	br	22d20 <__alt_data_end+0xfffe2d20>
   22da4:	0005883a 	mov	r2,zero
   22da8:	003fec06 	br	22d5c <__alt_data_end+0xfffe2d5c>
   22dac:	88801415 	stw	r2,80(r17)
   22db0:	003fd206 	br	22cfc <__alt_data_end+0xfffe2cfc>
   22db4:	28c00f17 	ldw	r3,60(r5)
   22db8:	00ffb316 	blt	zero,r3,22c88 <__alt_data_end+0xfffe2c88>
   22dbc:	003fd706 	br	22d1c <__alt_data_end+0xfffe2d1c>
   22dc0:	89400717 	ldw	r5,28(r17)
   22dc4:	000d883a 	mov	r6,zero
   22dc8:	01c00044 	movi	r7,1
   22dcc:	9809883a 	mov	r4,r19
   22dd0:	403ee83a 	callr	r8
   22dd4:	100d883a 	mov	r6,r2
   22dd8:	00bfffc4 	movi	r2,-1
   22ddc:	30801426 	beq	r6,r2,22e30 <__sflush_r+0x1e4>
   22de0:	8880030b 	ldhu	r2,12(r17)
   22de4:	8a000a17 	ldw	r8,40(r17)
   22de8:	003fae06 	br	22ca4 <__alt_data_end+0xfffe2ca4>
   22dec:	98c00017 	ldw	r3,0(r19)
   22df0:	183fba26 	beq	r3,zero,22cdc <__alt_data_end+0xfffe2cdc>
   22df4:	01000744 	movi	r4,29
   22df8:	19000626 	beq	r3,r4,22e14 <__sflush_r+0x1c8>
   22dfc:	01000584 	movi	r4,22
   22e00:	19000426 	beq	r3,r4,22e14 <__sflush_r+0x1c8>
   22e04:	88c0030b 	ldhu	r3,12(r17)
   22e08:	18c01014 	ori	r3,r3,64
   22e0c:	88c0030d 	sth	r3,12(r17)
   22e10:	003fc306 	br	22d20 <__alt_data_end+0xfffe2d20>
   22e14:	8880030b 	ldhu	r2,12(r17)
   22e18:	88c00417 	ldw	r3,16(r17)
   22e1c:	88000115 	stw	zero,4(r17)
   22e20:	10bdffcc 	andi	r2,r2,63487
   22e24:	8880030d 	sth	r2,12(r17)
   22e28:	88c00015 	stw	r3,0(r17)
   22e2c:	003fb306 	br	22cfc <__alt_data_end+0xfffe2cfc>
   22e30:	98800017 	ldw	r2,0(r19)
   22e34:	103fea26 	beq	r2,zero,22de0 <__alt_data_end+0xfffe2de0>
   22e38:	00c00744 	movi	r3,29
   22e3c:	10c00226 	beq	r2,r3,22e48 <__sflush_r+0x1fc>
   22e40:	00c00584 	movi	r3,22
   22e44:	10c0031e 	bne	r2,r3,22e54 <__sflush_r+0x208>
   22e48:	9c000015 	stw	r16,0(r19)
   22e4c:	0005883a 	mov	r2,zero
   22e50:	003fb306 	br	22d20 <__alt_data_end+0xfffe2d20>
   22e54:	88c0030b 	ldhu	r3,12(r17)
   22e58:	3005883a 	mov	r2,r6
   22e5c:	18c01014 	ori	r3,r3,64
   22e60:	88c0030d 	sth	r3,12(r17)
   22e64:	003fae06 	br	22d20 <__alt_data_end+0xfffe2d20>

00022e68 <_fflush_r>:
   22e68:	defffd04 	addi	sp,sp,-12
   22e6c:	dc000115 	stw	r16,4(sp)
   22e70:	dfc00215 	stw	ra,8(sp)
   22e74:	2021883a 	mov	r16,r4
   22e78:	20000226 	beq	r4,zero,22e84 <_fflush_r+0x1c>
   22e7c:	20800e17 	ldw	r2,56(r4)
   22e80:	10000c26 	beq	r2,zero,22eb4 <_fflush_r+0x4c>
   22e84:	2880030f 	ldh	r2,12(r5)
   22e88:	1000051e 	bne	r2,zero,22ea0 <_fflush_r+0x38>
   22e8c:	0005883a 	mov	r2,zero
   22e90:	dfc00217 	ldw	ra,8(sp)
   22e94:	dc000117 	ldw	r16,4(sp)
   22e98:	dec00304 	addi	sp,sp,12
   22e9c:	f800283a 	ret
   22ea0:	8009883a 	mov	r4,r16
   22ea4:	dfc00217 	ldw	ra,8(sp)
   22ea8:	dc000117 	ldw	r16,4(sp)
   22eac:	dec00304 	addi	sp,sp,12
   22eb0:	0022c4c1 	jmpi	22c4c <__sflush_r>
   22eb4:	d9400015 	stw	r5,0(sp)
   22eb8:	0020ef00 	call	20ef0 <__sinit>
   22ebc:	d9400017 	ldw	r5,0(sp)
   22ec0:	003ff006 	br	22e84 <__alt_data_end+0xfffe2e84>

00022ec4 <fflush>:
   22ec4:	20000526 	beq	r4,zero,22edc <fflush+0x18>
   22ec8:	008000f4 	movhi	r2,3
   22ecc:	10a93c04 	addi	r2,r2,-23312
   22ed0:	200b883a 	mov	r5,r4
   22ed4:	11000017 	ldw	r4,0(r2)
   22ed8:	0022e681 	jmpi	22e68 <_fflush_r>
   22edc:	008000f4 	movhi	r2,3
   22ee0:	10a93b04 	addi	r2,r2,-23316
   22ee4:	11000017 	ldw	r4,0(r2)
   22ee8:	014000b4 	movhi	r5,2
   22eec:	294b9a04 	addi	r5,r5,11880
   22ef0:	00214cc1 	jmpi	214cc <_fwalk_reent>

00022ef4 <_malloc_trim_r>:
   22ef4:	defffb04 	addi	sp,sp,-20
   22ef8:	dcc00315 	stw	r19,12(sp)
   22efc:	04c000f4 	movhi	r19,3
   22f00:	dc800215 	stw	r18,8(sp)
   22f04:	dc400115 	stw	r17,4(sp)
   22f08:	dc000015 	stw	r16,0(sp)
   22f0c:	dfc00415 	stw	ra,16(sp)
   22f10:	2821883a 	mov	r16,r5
   22f14:	9ce37804 	addi	r19,r19,-29216
   22f18:	2025883a 	mov	r18,r4
   22f1c:	0023bf00 	call	23bf0 <__malloc_lock>
   22f20:	98800217 	ldw	r2,8(r19)
   22f24:	14400117 	ldw	r17,4(r2)
   22f28:	00bfff04 	movi	r2,-4
   22f2c:	88a2703a 	and	r17,r17,r2
   22f30:	8c21c83a 	sub	r16,r17,r16
   22f34:	8403fbc4 	addi	r16,r16,4079
   22f38:	8020d33a 	srli	r16,r16,12
   22f3c:	0083ffc4 	movi	r2,4095
   22f40:	843fffc4 	addi	r16,r16,-1
   22f44:	8020933a 	slli	r16,r16,12
   22f48:	1400060e 	bge	r2,r16,22f64 <_malloc_trim_r+0x70>
   22f4c:	000b883a 	mov	r5,zero
   22f50:	9009883a 	mov	r4,r18
   22f54:	00227b00 	call	227b0 <_sbrk_r>
   22f58:	98c00217 	ldw	r3,8(r19)
   22f5c:	1c47883a 	add	r3,r3,r17
   22f60:	10c00a26 	beq	r2,r3,22f8c <_malloc_trim_r+0x98>
   22f64:	9009883a 	mov	r4,r18
   22f68:	0023c140 	call	23c14 <__malloc_unlock>
   22f6c:	0005883a 	mov	r2,zero
   22f70:	dfc00417 	ldw	ra,16(sp)
   22f74:	dcc00317 	ldw	r19,12(sp)
   22f78:	dc800217 	ldw	r18,8(sp)
   22f7c:	dc400117 	ldw	r17,4(sp)
   22f80:	dc000017 	ldw	r16,0(sp)
   22f84:	dec00504 	addi	sp,sp,20
   22f88:	f800283a 	ret
   22f8c:	040bc83a 	sub	r5,zero,r16
   22f90:	9009883a 	mov	r4,r18
   22f94:	00227b00 	call	227b0 <_sbrk_r>
   22f98:	00ffffc4 	movi	r3,-1
   22f9c:	10c00d26 	beq	r2,r3,22fd4 <_malloc_trim_r+0xe0>
   22fa0:	00c000f4 	movhi	r3,3
   22fa4:	18f03204 	addi	r3,r3,-16184
   22fa8:	18800017 	ldw	r2,0(r3)
   22fac:	99000217 	ldw	r4,8(r19)
   22fb0:	8c23c83a 	sub	r17,r17,r16
   22fb4:	8c400054 	ori	r17,r17,1
   22fb8:	1421c83a 	sub	r16,r2,r16
   22fbc:	24400115 	stw	r17,4(r4)
   22fc0:	9009883a 	mov	r4,r18
   22fc4:	1c000015 	stw	r16,0(r3)
   22fc8:	0023c140 	call	23c14 <__malloc_unlock>
   22fcc:	00800044 	movi	r2,1
   22fd0:	003fe706 	br	22f70 <__alt_data_end+0xfffe2f70>
   22fd4:	000b883a 	mov	r5,zero
   22fd8:	9009883a 	mov	r4,r18
   22fdc:	00227b00 	call	227b0 <_sbrk_r>
   22fe0:	99000217 	ldw	r4,8(r19)
   22fe4:	014003c4 	movi	r5,15
   22fe8:	1107c83a 	sub	r3,r2,r4
   22fec:	28ffdd0e 	bge	r5,r3,22f64 <__alt_data_end+0xfffe2f64>
   22ff0:	014000f4 	movhi	r5,3
   22ff4:	29693d04 	addi	r5,r5,-23308
   22ff8:	29400017 	ldw	r5,0(r5)
   22ffc:	18c00054 	ori	r3,r3,1
   23000:	20c00115 	stw	r3,4(r4)
   23004:	00c000f4 	movhi	r3,3
   23008:	1145c83a 	sub	r2,r2,r5
   2300c:	18f03204 	addi	r3,r3,-16184
   23010:	18800015 	stw	r2,0(r3)
   23014:	003fd306 	br	22f64 <__alt_data_end+0xfffe2f64>

00023018 <_free_r>:
   23018:	28004126 	beq	r5,zero,23120 <_free_r+0x108>
   2301c:	defffd04 	addi	sp,sp,-12
   23020:	dc400115 	stw	r17,4(sp)
   23024:	dc000015 	stw	r16,0(sp)
   23028:	2023883a 	mov	r17,r4
   2302c:	2821883a 	mov	r16,r5
   23030:	dfc00215 	stw	ra,8(sp)
   23034:	0023bf00 	call	23bf0 <__malloc_lock>
   23038:	81ffff17 	ldw	r7,-4(r16)
   2303c:	00bfff84 	movi	r2,-2
   23040:	010000f4 	movhi	r4,3
   23044:	81bffe04 	addi	r6,r16,-8
   23048:	3884703a 	and	r2,r7,r2
   2304c:	21237804 	addi	r4,r4,-29216
   23050:	308b883a 	add	r5,r6,r2
   23054:	2a400117 	ldw	r9,4(r5)
   23058:	22000217 	ldw	r8,8(r4)
   2305c:	00ffff04 	movi	r3,-4
   23060:	48c6703a 	and	r3,r9,r3
   23064:	2a005726 	beq	r5,r8,231c4 <_free_r+0x1ac>
   23068:	28c00115 	stw	r3,4(r5)
   2306c:	39c0004c 	andi	r7,r7,1
   23070:	3800091e 	bne	r7,zero,23098 <_free_r+0x80>
   23074:	823ffe17 	ldw	r8,-8(r16)
   23078:	22400204 	addi	r9,r4,8
   2307c:	320dc83a 	sub	r6,r6,r8
   23080:	31c00217 	ldw	r7,8(r6)
   23084:	1205883a 	add	r2,r2,r8
   23088:	3a406526 	beq	r7,r9,23220 <_free_r+0x208>
   2308c:	32000317 	ldw	r8,12(r6)
   23090:	3a000315 	stw	r8,12(r7)
   23094:	41c00215 	stw	r7,8(r8)
   23098:	28cf883a 	add	r7,r5,r3
   2309c:	39c00117 	ldw	r7,4(r7)
   230a0:	39c0004c 	andi	r7,r7,1
   230a4:	38003a26 	beq	r7,zero,23190 <_free_r+0x178>
   230a8:	10c00054 	ori	r3,r2,1
   230ac:	30c00115 	stw	r3,4(r6)
   230b0:	3087883a 	add	r3,r6,r2
   230b4:	18800015 	stw	r2,0(r3)
   230b8:	00c07fc4 	movi	r3,511
   230bc:	18801936 	bltu	r3,r2,23124 <_free_r+0x10c>
   230c0:	1004d0fa 	srli	r2,r2,3
   230c4:	01c00044 	movi	r7,1
   230c8:	21400117 	ldw	r5,4(r4)
   230cc:	10c00044 	addi	r3,r2,1
   230d0:	18c7883a 	add	r3,r3,r3
   230d4:	1005d0ba 	srai	r2,r2,2
   230d8:	18c7883a 	add	r3,r3,r3
   230dc:	18c7883a 	add	r3,r3,r3
   230e0:	1907883a 	add	r3,r3,r4
   230e4:	3884983a 	sll	r2,r7,r2
   230e8:	19c00017 	ldw	r7,0(r3)
   230ec:	1a3ffe04 	addi	r8,r3,-8
   230f0:	1144b03a 	or	r2,r2,r5
   230f4:	32000315 	stw	r8,12(r6)
   230f8:	31c00215 	stw	r7,8(r6)
   230fc:	20800115 	stw	r2,4(r4)
   23100:	19800015 	stw	r6,0(r3)
   23104:	39800315 	stw	r6,12(r7)
   23108:	8809883a 	mov	r4,r17
   2310c:	dfc00217 	ldw	ra,8(sp)
   23110:	dc400117 	ldw	r17,4(sp)
   23114:	dc000017 	ldw	r16,0(sp)
   23118:	dec00304 	addi	sp,sp,12
   2311c:	0023c141 	jmpi	23c14 <__malloc_unlock>
   23120:	f800283a 	ret
   23124:	100ad27a 	srli	r5,r2,9
   23128:	00c00104 	movi	r3,4
   2312c:	19404a36 	bltu	r3,r5,23258 <_free_r+0x240>
   23130:	100ad1ba 	srli	r5,r2,6
   23134:	28c00e44 	addi	r3,r5,57
   23138:	18c7883a 	add	r3,r3,r3
   2313c:	29400e04 	addi	r5,r5,56
   23140:	18c7883a 	add	r3,r3,r3
   23144:	18c7883a 	add	r3,r3,r3
   23148:	1909883a 	add	r4,r3,r4
   2314c:	20c00017 	ldw	r3,0(r4)
   23150:	01c000f4 	movhi	r7,3
   23154:	213ffe04 	addi	r4,r4,-8
   23158:	39e37804 	addi	r7,r7,-29216
   2315c:	20c04426 	beq	r4,r3,23270 <_free_r+0x258>
   23160:	01ffff04 	movi	r7,-4
   23164:	19400117 	ldw	r5,4(r3)
   23168:	29ca703a 	and	r5,r5,r7
   2316c:	1140022e 	bgeu	r2,r5,23178 <_free_r+0x160>
   23170:	18c00217 	ldw	r3,8(r3)
   23174:	20fffb1e 	bne	r4,r3,23164 <__alt_data_end+0xfffe3164>
   23178:	19000317 	ldw	r4,12(r3)
   2317c:	31000315 	stw	r4,12(r6)
   23180:	30c00215 	stw	r3,8(r6)
   23184:	21800215 	stw	r6,8(r4)
   23188:	19800315 	stw	r6,12(r3)
   2318c:	003fde06 	br	23108 <__alt_data_end+0xfffe3108>
   23190:	29c00217 	ldw	r7,8(r5)
   23194:	10c5883a 	add	r2,r2,r3
   23198:	00c000f4 	movhi	r3,3
   2319c:	18e37a04 	addi	r3,r3,-29208
   231a0:	38c03b26 	beq	r7,r3,23290 <_free_r+0x278>
   231a4:	2a000317 	ldw	r8,12(r5)
   231a8:	11400054 	ori	r5,r2,1
   231ac:	3087883a 	add	r3,r6,r2
   231b0:	3a000315 	stw	r8,12(r7)
   231b4:	41c00215 	stw	r7,8(r8)
   231b8:	31400115 	stw	r5,4(r6)
   231bc:	18800015 	stw	r2,0(r3)
   231c0:	003fbd06 	br	230b8 <__alt_data_end+0xfffe30b8>
   231c4:	39c0004c 	andi	r7,r7,1
   231c8:	10c5883a 	add	r2,r2,r3
   231cc:	3800071e 	bne	r7,zero,231ec <_free_r+0x1d4>
   231d0:	81fffe17 	ldw	r7,-8(r16)
   231d4:	31cdc83a 	sub	r6,r6,r7
   231d8:	30c00317 	ldw	r3,12(r6)
   231dc:	31400217 	ldw	r5,8(r6)
   231e0:	11c5883a 	add	r2,r2,r7
   231e4:	28c00315 	stw	r3,12(r5)
   231e8:	19400215 	stw	r5,8(r3)
   231ec:	10c00054 	ori	r3,r2,1
   231f0:	30c00115 	stw	r3,4(r6)
   231f4:	00c000f4 	movhi	r3,3
   231f8:	18e93e04 	addi	r3,r3,-23304
   231fc:	18c00017 	ldw	r3,0(r3)
   23200:	21800215 	stw	r6,8(r4)
   23204:	10ffc036 	bltu	r2,r3,23108 <__alt_data_end+0xfffe3108>
   23208:	008000f4 	movhi	r2,3
   2320c:	10b02904 	addi	r2,r2,-16220
   23210:	11400017 	ldw	r5,0(r2)
   23214:	8809883a 	mov	r4,r17
   23218:	0022ef40 	call	22ef4 <_malloc_trim_r>
   2321c:	003fba06 	br	23108 <__alt_data_end+0xfffe3108>
   23220:	28c9883a 	add	r4,r5,r3
   23224:	21000117 	ldw	r4,4(r4)
   23228:	2100004c 	andi	r4,r4,1
   2322c:	2000391e 	bne	r4,zero,23314 <_free_r+0x2fc>
   23230:	29c00217 	ldw	r7,8(r5)
   23234:	29000317 	ldw	r4,12(r5)
   23238:	1885883a 	add	r2,r3,r2
   2323c:	10c00054 	ori	r3,r2,1
   23240:	39000315 	stw	r4,12(r7)
   23244:	21c00215 	stw	r7,8(r4)
   23248:	30c00115 	stw	r3,4(r6)
   2324c:	308d883a 	add	r6,r6,r2
   23250:	30800015 	stw	r2,0(r6)
   23254:	003fac06 	br	23108 <__alt_data_end+0xfffe3108>
   23258:	00c00504 	movi	r3,20
   2325c:	19401536 	bltu	r3,r5,232b4 <_free_r+0x29c>
   23260:	28c01704 	addi	r3,r5,92
   23264:	18c7883a 	add	r3,r3,r3
   23268:	294016c4 	addi	r5,r5,91
   2326c:	003fb406 	br	23140 <__alt_data_end+0xfffe3140>
   23270:	280bd0ba 	srai	r5,r5,2
   23274:	00c00044 	movi	r3,1
   23278:	38800117 	ldw	r2,4(r7)
   2327c:	194a983a 	sll	r5,r3,r5
   23280:	2007883a 	mov	r3,r4
   23284:	2884b03a 	or	r2,r5,r2
   23288:	38800115 	stw	r2,4(r7)
   2328c:	003fbb06 	br	2317c <__alt_data_end+0xfffe317c>
   23290:	21800515 	stw	r6,20(r4)
   23294:	21800415 	stw	r6,16(r4)
   23298:	10c00054 	ori	r3,r2,1
   2329c:	31c00315 	stw	r7,12(r6)
   232a0:	31c00215 	stw	r7,8(r6)
   232a4:	30c00115 	stw	r3,4(r6)
   232a8:	308d883a 	add	r6,r6,r2
   232ac:	30800015 	stw	r2,0(r6)
   232b0:	003f9506 	br	23108 <__alt_data_end+0xfffe3108>
   232b4:	00c01504 	movi	r3,84
   232b8:	19400536 	bltu	r3,r5,232d0 <_free_r+0x2b8>
   232bc:	100ad33a 	srli	r5,r2,12
   232c0:	28c01bc4 	addi	r3,r5,111
   232c4:	18c7883a 	add	r3,r3,r3
   232c8:	29401b84 	addi	r5,r5,110
   232cc:	003f9c06 	br	23140 <__alt_data_end+0xfffe3140>
   232d0:	00c05504 	movi	r3,340
   232d4:	19400536 	bltu	r3,r5,232ec <_free_r+0x2d4>
   232d8:	100ad3fa 	srli	r5,r2,15
   232dc:	28c01e04 	addi	r3,r5,120
   232e0:	18c7883a 	add	r3,r3,r3
   232e4:	29401dc4 	addi	r5,r5,119
   232e8:	003f9506 	br	23140 <__alt_data_end+0xfffe3140>
   232ec:	00c15504 	movi	r3,1364
   232f0:	19400536 	bltu	r3,r5,23308 <_free_r+0x2f0>
   232f4:	100ad4ba 	srli	r5,r2,18
   232f8:	28c01f44 	addi	r3,r5,125
   232fc:	18c7883a 	add	r3,r3,r3
   23300:	29401f04 	addi	r5,r5,124
   23304:	003f8e06 	br	23140 <__alt_data_end+0xfffe3140>
   23308:	00c03f84 	movi	r3,254
   2330c:	01401f84 	movi	r5,126
   23310:	003f8b06 	br	23140 <__alt_data_end+0xfffe3140>
   23314:	10c00054 	ori	r3,r2,1
   23318:	30c00115 	stw	r3,4(r6)
   2331c:	308d883a 	add	r6,r6,r2
   23320:	30800015 	stw	r2,0(r6)
   23324:	003f7806 	br	23108 <__alt_data_end+0xfffe3108>

00023328 <_lseek_r>:
   23328:	defffd04 	addi	sp,sp,-12
   2332c:	2805883a 	mov	r2,r5
   23330:	dc000015 	stw	r16,0(sp)
   23334:	040000f4 	movhi	r16,3
   23338:	dc400115 	stw	r17,4(sp)
   2333c:	300b883a 	mov	r5,r6
   23340:	84302a04 	addi	r16,r16,-16216
   23344:	2023883a 	mov	r17,r4
   23348:	380d883a 	mov	r6,r7
   2334c:	1009883a 	mov	r4,r2
   23350:	dfc00215 	stw	ra,8(sp)
   23354:	80000015 	stw	zero,0(r16)
   23358:	0023a980 	call	23a98 <lseek>
   2335c:	00ffffc4 	movi	r3,-1
   23360:	10c00526 	beq	r2,r3,23378 <_lseek_r+0x50>
   23364:	dfc00217 	ldw	ra,8(sp)
   23368:	dc400117 	ldw	r17,4(sp)
   2336c:	dc000017 	ldw	r16,0(sp)
   23370:	dec00304 	addi	sp,sp,12
   23374:	f800283a 	ret
   23378:	80c00017 	ldw	r3,0(r16)
   2337c:	183ff926 	beq	r3,zero,23364 <__alt_data_end+0xfffe3364>
   23380:	88c00015 	stw	r3,0(r17)
   23384:	003ff706 	br	23364 <__alt_data_end+0xfffe3364>

00023388 <__smakebuf_r>:
   23388:	2880030b 	ldhu	r2,12(r5)
   2338c:	10c0008c 	andi	r3,r2,2
   23390:	1800411e 	bne	r3,zero,23498 <__smakebuf_r+0x110>
   23394:	deffec04 	addi	sp,sp,-80
   23398:	dc000f15 	stw	r16,60(sp)
   2339c:	2821883a 	mov	r16,r5
   233a0:	2940038f 	ldh	r5,14(r5)
   233a4:	dc401015 	stw	r17,64(sp)
   233a8:	dfc01315 	stw	ra,76(sp)
   233ac:	dcc01215 	stw	r19,72(sp)
   233b0:	dc801115 	stw	r18,68(sp)
   233b4:	2023883a 	mov	r17,r4
   233b8:	28001c16 	blt	r5,zero,2342c <__smakebuf_r+0xa4>
   233bc:	d80d883a 	mov	r6,sp
   233c0:	00235a40 	call	235a4 <_fstat_r>
   233c4:	10001816 	blt	r2,zero,23428 <__smakebuf_r+0xa0>
   233c8:	d8800117 	ldw	r2,4(sp)
   233cc:	00e00014 	movui	r3,32768
   233d0:	10bc000c 	andi	r2,r2,61440
   233d4:	14c80020 	cmpeqi	r19,r2,8192
   233d8:	10c03726 	beq	r2,r3,234b8 <__smakebuf_r+0x130>
   233dc:	80c0030b 	ldhu	r3,12(r16)
   233e0:	18c20014 	ori	r3,r3,2048
   233e4:	80c0030d 	sth	r3,12(r16)
   233e8:	00c80004 	movi	r3,8192
   233ec:	10c0521e 	bne	r2,r3,23538 <__smakebuf_r+0x1b0>
   233f0:	8140038f 	ldh	r5,14(r16)
   233f4:	8809883a 	mov	r4,r17
   233f8:	00236000 	call	23600 <_isatty_r>
   233fc:	10004c26 	beq	r2,zero,23530 <__smakebuf_r+0x1a8>
   23400:	8080030b 	ldhu	r2,12(r16)
   23404:	80c010c4 	addi	r3,r16,67
   23408:	80c00015 	stw	r3,0(r16)
   2340c:	10800054 	ori	r2,r2,1
   23410:	8080030d 	sth	r2,12(r16)
   23414:	00800044 	movi	r2,1
   23418:	80c00415 	stw	r3,16(r16)
   2341c:	80800515 	stw	r2,20(r16)
   23420:	04810004 	movi	r18,1024
   23424:	00000706 	br	23444 <__smakebuf_r+0xbc>
   23428:	8080030b 	ldhu	r2,12(r16)
   2342c:	10c0200c 	andi	r3,r2,128
   23430:	18001f1e 	bne	r3,zero,234b0 <__smakebuf_r+0x128>
   23434:	04810004 	movi	r18,1024
   23438:	10820014 	ori	r2,r2,2048
   2343c:	8080030d 	sth	r2,12(r16)
   23440:	0027883a 	mov	r19,zero
   23444:	900b883a 	mov	r5,r18
   23448:	8809883a 	mov	r4,r17
   2344c:	00215900 	call	21590 <_malloc_r>
   23450:	10002c26 	beq	r2,zero,23504 <__smakebuf_r+0x17c>
   23454:	80c0030b 	ldhu	r3,12(r16)
   23458:	010000b4 	movhi	r4,2
   2345c:	2102e604 	addi	r4,r4,2968
   23460:	89000f15 	stw	r4,60(r17)
   23464:	18c02014 	ori	r3,r3,128
   23468:	80c0030d 	sth	r3,12(r16)
   2346c:	80800015 	stw	r2,0(r16)
   23470:	80800415 	stw	r2,16(r16)
   23474:	84800515 	stw	r18,20(r16)
   23478:	98001a1e 	bne	r19,zero,234e4 <__smakebuf_r+0x15c>
   2347c:	dfc01317 	ldw	ra,76(sp)
   23480:	dcc01217 	ldw	r19,72(sp)
   23484:	dc801117 	ldw	r18,68(sp)
   23488:	dc401017 	ldw	r17,64(sp)
   2348c:	dc000f17 	ldw	r16,60(sp)
   23490:	dec01404 	addi	sp,sp,80
   23494:	f800283a 	ret
   23498:	288010c4 	addi	r2,r5,67
   2349c:	28800015 	stw	r2,0(r5)
   234a0:	28800415 	stw	r2,16(r5)
   234a4:	00800044 	movi	r2,1
   234a8:	28800515 	stw	r2,20(r5)
   234ac:	f800283a 	ret
   234b0:	04801004 	movi	r18,64
   234b4:	003fe006 	br	23438 <__alt_data_end+0xfffe3438>
   234b8:	81000a17 	ldw	r4,40(r16)
   234bc:	00c000b4 	movhi	r3,2
   234c0:	18ca3704 	addi	r3,r3,10460
   234c4:	20ffc51e 	bne	r4,r3,233dc <__alt_data_end+0xfffe33dc>
   234c8:	8080030b 	ldhu	r2,12(r16)
   234cc:	04810004 	movi	r18,1024
   234d0:	84801315 	stw	r18,76(r16)
   234d4:	1484b03a 	or	r2,r2,r18
   234d8:	8080030d 	sth	r2,12(r16)
   234dc:	0027883a 	mov	r19,zero
   234e0:	003fd806 	br	23444 <__alt_data_end+0xfffe3444>
   234e4:	8140038f 	ldh	r5,14(r16)
   234e8:	8809883a 	mov	r4,r17
   234ec:	00236000 	call	23600 <_isatty_r>
   234f0:	103fe226 	beq	r2,zero,2347c <__alt_data_end+0xfffe347c>
   234f4:	8080030b 	ldhu	r2,12(r16)
   234f8:	10800054 	ori	r2,r2,1
   234fc:	8080030d 	sth	r2,12(r16)
   23500:	003fde06 	br	2347c <__alt_data_end+0xfffe347c>
   23504:	8080030b 	ldhu	r2,12(r16)
   23508:	10c0800c 	andi	r3,r2,512
   2350c:	183fdb1e 	bne	r3,zero,2347c <__alt_data_end+0xfffe347c>
   23510:	10800094 	ori	r2,r2,2
   23514:	80c010c4 	addi	r3,r16,67
   23518:	8080030d 	sth	r2,12(r16)
   2351c:	00800044 	movi	r2,1
   23520:	80c00015 	stw	r3,0(r16)
   23524:	80c00415 	stw	r3,16(r16)
   23528:	80800515 	stw	r2,20(r16)
   2352c:	003fd306 	br	2347c <__alt_data_end+0xfffe347c>
   23530:	04810004 	movi	r18,1024
   23534:	003fc306 	br	23444 <__alt_data_end+0xfffe3444>
   23538:	0027883a 	mov	r19,zero
   2353c:	04810004 	movi	r18,1024
   23540:	003fc006 	br	23444 <__alt_data_end+0xfffe3444>

00023544 <_read_r>:
   23544:	defffd04 	addi	sp,sp,-12
   23548:	2805883a 	mov	r2,r5
   2354c:	dc000015 	stw	r16,0(sp)
   23550:	040000f4 	movhi	r16,3
   23554:	dc400115 	stw	r17,4(sp)
   23558:	300b883a 	mov	r5,r6
   2355c:	84302a04 	addi	r16,r16,-16216
   23560:	2023883a 	mov	r17,r4
   23564:	380d883a 	mov	r6,r7
   23568:	1009883a 	mov	r4,r2
   2356c:	dfc00215 	stw	ra,8(sp)
   23570:	80000015 	stw	zero,0(r16)
   23574:	0023c740 	call	23c74 <read>
   23578:	00ffffc4 	movi	r3,-1
   2357c:	10c00526 	beq	r2,r3,23594 <_read_r+0x50>
   23580:	dfc00217 	ldw	ra,8(sp)
   23584:	dc400117 	ldw	r17,4(sp)
   23588:	dc000017 	ldw	r16,0(sp)
   2358c:	dec00304 	addi	sp,sp,12
   23590:	f800283a 	ret
   23594:	80c00017 	ldw	r3,0(r16)
   23598:	183ff926 	beq	r3,zero,23580 <__alt_data_end+0xfffe3580>
   2359c:	88c00015 	stw	r3,0(r17)
   235a0:	003ff706 	br	23580 <__alt_data_end+0xfffe3580>

000235a4 <_fstat_r>:
   235a4:	defffd04 	addi	sp,sp,-12
   235a8:	2805883a 	mov	r2,r5
   235ac:	dc000015 	stw	r16,0(sp)
   235b0:	040000f4 	movhi	r16,3
   235b4:	dc400115 	stw	r17,4(sp)
   235b8:	84302a04 	addi	r16,r16,-16216
   235bc:	2023883a 	mov	r17,r4
   235c0:	300b883a 	mov	r5,r6
   235c4:	1009883a 	mov	r4,r2
   235c8:	dfc00215 	stw	ra,8(sp)
   235cc:	80000015 	stw	zero,0(r16)
   235d0:	00237d00 	call	237d0 <fstat>
   235d4:	00ffffc4 	movi	r3,-1
   235d8:	10c00526 	beq	r2,r3,235f0 <_fstat_r+0x4c>
   235dc:	dfc00217 	ldw	ra,8(sp)
   235e0:	dc400117 	ldw	r17,4(sp)
   235e4:	dc000017 	ldw	r16,0(sp)
   235e8:	dec00304 	addi	sp,sp,12
   235ec:	f800283a 	ret
   235f0:	80c00017 	ldw	r3,0(r16)
   235f4:	183ff926 	beq	r3,zero,235dc <__alt_data_end+0xfffe35dc>
   235f8:	88c00015 	stw	r3,0(r17)
   235fc:	003ff706 	br	235dc <__alt_data_end+0xfffe35dc>

00023600 <_isatty_r>:
   23600:	defffd04 	addi	sp,sp,-12
   23604:	dc000015 	stw	r16,0(sp)
   23608:	040000f4 	movhi	r16,3
   2360c:	dc400115 	stw	r17,4(sp)
   23610:	84302a04 	addi	r16,r16,-16216
   23614:	2023883a 	mov	r17,r4
   23618:	2809883a 	mov	r4,r5
   2361c:	dfc00215 	stw	ra,8(sp)
   23620:	80000015 	stw	zero,0(r16)
   23624:	00238c40 	call	238c4 <isatty>
   23628:	00ffffc4 	movi	r3,-1
   2362c:	10c00526 	beq	r2,r3,23644 <_isatty_r+0x44>
   23630:	dfc00217 	ldw	ra,8(sp)
   23634:	dc400117 	ldw	r17,4(sp)
   23638:	dc000017 	ldw	r16,0(sp)
   2363c:	dec00304 	addi	sp,sp,12
   23640:	f800283a 	ret
   23644:	80c00017 	ldw	r3,0(r16)
   23648:	183ff926 	beq	r3,zero,23630 <__alt_data_end+0xfffe3630>
   2364c:	88c00015 	stw	r3,0(r17)
   23650:	003ff706 	br	23630 <__alt_data_end+0xfffe3630>

00023654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23654:	defffe04 	addi	sp,sp,-8
   23658:	dfc00115 	stw	ra,4(sp)
   2365c:	df000015 	stw	fp,0(sp)
   23660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23664:	d0a00917 	ldw	r2,-32732(gp)
   23668:	10000326 	beq	r2,zero,23678 <alt_get_errno+0x24>
   2366c:	d0a00917 	ldw	r2,-32732(gp)
   23670:	103ee83a 	callr	r2
   23674:	00000106 	br	2367c <alt_get_errno+0x28>
   23678:	d0a6ef04 	addi	r2,gp,-25668
}
   2367c:	e037883a 	mov	sp,fp
   23680:	dfc00117 	ldw	ra,4(sp)
   23684:	df000017 	ldw	fp,0(sp)
   23688:	dec00204 	addi	sp,sp,8
   2368c:	f800283a 	ret

00023690 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23690:	defffb04 	addi	sp,sp,-20
   23694:	dfc00415 	stw	ra,16(sp)
   23698:	df000315 	stw	fp,12(sp)
   2369c:	df000304 	addi	fp,sp,12
   236a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   236a4:	e0bfff17 	ldw	r2,-4(fp)
   236a8:	10000816 	blt	r2,zero,236cc <close+0x3c>
   236ac:	01400304 	movi	r5,12
   236b0:	e13fff17 	ldw	r4,-4(fp)
   236b4:	00209fc0 	call	209fc <__mulsi3>
   236b8:	1007883a 	mov	r3,r2
   236bc:	008000f4 	movhi	r2,3
   236c0:	10a48404 	addi	r2,r2,-28144
   236c4:	1885883a 	add	r2,r3,r2
   236c8:	00000106 	br	236d0 <close+0x40>
   236cc:	0005883a 	mov	r2,zero
   236d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   236d4:	e0bffd17 	ldw	r2,-12(fp)
   236d8:	10001926 	beq	r2,zero,23740 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   236dc:	e0bffd17 	ldw	r2,-12(fp)
   236e0:	10800017 	ldw	r2,0(r2)
   236e4:	10800417 	ldw	r2,16(r2)
   236e8:	10000626 	beq	r2,zero,23704 <close+0x74>
   236ec:	e0bffd17 	ldw	r2,-12(fp)
   236f0:	10800017 	ldw	r2,0(r2)
   236f4:	10800417 	ldw	r2,16(r2)
   236f8:	e13ffd17 	ldw	r4,-12(fp)
   236fc:	103ee83a 	callr	r2
   23700:	00000106 	br	23708 <close+0x78>
   23704:	0005883a 	mov	r2,zero
   23708:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2370c:	e13fff17 	ldw	r4,-4(fp)
   23710:	0023d780 	call	23d78 <alt_release_fd>
    if (rval < 0)
   23714:	e0bffe17 	ldw	r2,-8(fp)
   23718:	1000070e 	bge	r2,zero,23738 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   2371c:	00236540 	call	23654 <alt_get_errno>
   23720:	1007883a 	mov	r3,r2
   23724:	e0bffe17 	ldw	r2,-8(fp)
   23728:	0085c83a 	sub	r2,zero,r2
   2372c:	18800015 	stw	r2,0(r3)
      return -1;
   23730:	00bfffc4 	movi	r2,-1
   23734:	00000706 	br	23754 <close+0xc4>
    }
    return 0;
   23738:	0005883a 	mov	r2,zero
   2373c:	00000506 	br	23754 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23740:	00236540 	call	23654 <alt_get_errno>
   23744:	1007883a 	mov	r3,r2
   23748:	00801444 	movi	r2,81
   2374c:	18800015 	stw	r2,0(r3)
    return -1;
   23750:	00bfffc4 	movi	r2,-1
  }
}
   23754:	e037883a 	mov	sp,fp
   23758:	dfc00117 	ldw	ra,4(sp)
   2375c:	df000017 	ldw	fp,0(sp)
   23760:	dec00204 	addi	sp,sp,8
   23764:	f800283a 	ret

00023768 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23768:	defffc04 	addi	sp,sp,-16
   2376c:	df000315 	stw	fp,12(sp)
   23770:	df000304 	addi	fp,sp,12
   23774:	e13ffd15 	stw	r4,-12(fp)
   23778:	e17ffe15 	stw	r5,-8(fp)
   2377c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23780:	e0bfff17 	ldw	r2,-4(fp)
}
   23784:	e037883a 	mov	sp,fp
   23788:	df000017 	ldw	fp,0(sp)
   2378c:	dec00104 	addi	sp,sp,4
   23790:	f800283a 	ret

00023794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23794:	defffe04 	addi	sp,sp,-8
   23798:	dfc00115 	stw	ra,4(sp)
   2379c:	df000015 	stw	fp,0(sp)
   237a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   237a4:	d0a00917 	ldw	r2,-32732(gp)
   237a8:	10000326 	beq	r2,zero,237b8 <alt_get_errno+0x24>
   237ac:	d0a00917 	ldw	r2,-32732(gp)
   237b0:	103ee83a 	callr	r2
   237b4:	00000106 	br	237bc <alt_get_errno+0x28>
   237b8:	d0a6ef04 	addi	r2,gp,-25668
}
   237bc:	e037883a 	mov	sp,fp
   237c0:	dfc00117 	ldw	ra,4(sp)
   237c4:	df000017 	ldw	fp,0(sp)
   237c8:	dec00204 	addi	sp,sp,8
   237cc:	f800283a 	ret

000237d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   237d0:	defffb04 	addi	sp,sp,-20
   237d4:	dfc00415 	stw	ra,16(sp)
   237d8:	df000315 	stw	fp,12(sp)
   237dc:	df000304 	addi	fp,sp,12
   237e0:	e13ffe15 	stw	r4,-8(fp)
   237e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237e8:	e0bffe17 	ldw	r2,-8(fp)
   237ec:	10000816 	blt	r2,zero,23810 <fstat+0x40>
   237f0:	01400304 	movi	r5,12
   237f4:	e13ffe17 	ldw	r4,-8(fp)
   237f8:	00209fc0 	call	209fc <__mulsi3>
   237fc:	1007883a 	mov	r3,r2
   23800:	008000f4 	movhi	r2,3
   23804:	10a48404 	addi	r2,r2,-28144
   23808:	1885883a 	add	r2,r3,r2
   2380c:	00000106 	br	23814 <fstat+0x44>
   23810:	0005883a 	mov	r2,zero
   23814:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23818:	e0bffd17 	ldw	r2,-12(fp)
   2381c:	10001026 	beq	r2,zero,23860 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23820:	e0bffd17 	ldw	r2,-12(fp)
   23824:	10800017 	ldw	r2,0(r2)
   23828:	10800817 	ldw	r2,32(r2)
   2382c:	10000726 	beq	r2,zero,2384c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   23830:	e0bffd17 	ldw	r2,-12(fp)
   23834:	10800017 	ldw	r2,0(r2)
   23838:	10800817 	ldw	r2,32(r2)
   2383c:	e17fff17 	ldw	r5,-4(fp)
   23840:	e13ffd17 	ldw	r4,-12(fp)
   23844:	103ee83a 	callr	r2
   23848:	00000a06 	br	23874 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2384c:	e0bfff17 	ldw	r2,-4(fp)
   23850:	00c80004 	movi	r3,8192
   23854:	10c00115 	stw	r3,4(r2)
      return 0;
   23858:	0005883a 	mov	r2,zero
   2385c:	00000506 	br	23874 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23860:	00237940 	call	23794 <alt_get_errno>
   23864:	1007883a 	mov	r3,r2
   23868:	00801444 	movi	r2,81
   2386c:	18800015 	stw	r2,0(r3)
    return -1;
   23870:	00bfffc4 	movi	r2,-1
  }
}
   23874:	e037883a 	mov	sp,fp
   23878:	dfc00117 	ldw	ra,4(sp)
   2387c:	df000017 	ldw	fp,0(sp)
   23880:	dec00204 	addi	sp,sp,8
   23884:	f800283a 	ret

00023888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23888:	defffe04 	addi	sp,sp,-8
   2388c:	dfc00115 	stw	ra,4(sp)
   23890:	df000015 	stw	fp,0(sp)
   23894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23898:	d0a00917 	ldw	r2,-32732(gp)
   2389c:	10000326 	beq	r2,zero,238ac <alt_get_errno+0x24>
   238a0:	d0a00917 	ldw	r2,-32732(gp)
   238a4:	103ee83a 	callr	r2
   238a8:	00000106 	br	238b0 <alt_get_errno+0x28>
   238ac:	d0a6ef04 	addi	r2,gp,-25668
}
   238b0:	e037883a 	mov	sp,fp
   238b4:	dfc00117 	ldw	ra,4(sp)
   238b8:	df000017 	ldw	fp,0(sp)
   238bc:	dec00204 	addi	sp,sp,8
   238c0:	f800283a 	ret

000238c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   238c4:	deffed04 	addi	sp,sp,-76
   238c8:	dfc01215 	stw	ra,72(sp)
   238cc:	df001115 	stw	fp,68(sp)
   238d0:	df001104 	addi	fp,sp,68
   238d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238d8:	e0bfff17 	ldw	r2,-4(fp)
   238dc:	10000816 	blt	r2,zero,23900 <isatty+0x3c>
   238e0:	01400304 	movi	r5,12
   238e4:	e13fff17 	ldw	r4,-4(fp)
   238e8:	00209fc0 	call	209fc <__mulsi3>
   238ec:	1007883a 	mov	r3,r2
   238f0:	008000f4 	movhi	r2,3
   238f4:	10a48404 	addi	r2,r2,-28144
   238f8:	1885883a 	add	r2,r3,r2
   238fc:	00000106 	br	23904 <isatty+0x40>
   23900:	0005883a 	mov	r2,zero
   23904:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23908:	e0bfef17 	ldw	r2,-68(fp)
   2390c:	10000e26 	beq	r2,zero,23948 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23910:	e0bfef17 	ldw	r2,-68(fp)
   23914:	10800017 	ldw	r2,0(r2)
   23918:	10800817 	ldw	r2,32(r2)
   2391c:	1000021e 	bne	r2,zero,23928 <isatty+0x64>
    {
      return 1;
   23920:	00800044 	movi	r2,1
   23924:	00000d06 	br	2395c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23928:	e0bff004 	addi	r2,fp,-64
   2392c:	100b883a 	mov	r5,r2
   23930:	e13fff17 	ldw	r4,-4(fp)
   23934:	00237d00 	call	237d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23938:	e0bff117 	ldw	r2,-60(fp)
   2393c:	10880020 	cmpeqi	r2,r2,8192
   23940:	10803fcc 	andi	r2,r2,255
   23944:	00000506 	br	2395c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23948:	00238880 	call	23888 <alt_get_errno>
   2394c:	1007883a 	mov	r3,r2
   23950:	00801444 	movi	r2,81
   23954:	18800015 	stw	r2,0(r3)
    return 0;
   23958:	0005883a 	mov	r2,zero
  }
}
   2395c:	e037883a 	mov	sp,fp
   23960:	dfc00117 	ldw	ra,4(sp)
   23964:	df000017 	ldw	fp,0(sp)
   23968:	dec00204 	addi	sp,sp,8
   2396c:	f800283a 	ret

00023970 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23970:	defffc04 	addi	sp,sp,-16
   23974:	df000315 	stw	fp,12(sp)
   23978:	df000304 	addi	fp,sp,12
   2397c:	e13ffd15 	stw	r4,-12(fp)
   23980:	e17ffe15 	stw	r5,-8(fp)
   23984:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23988:	e0fffe17 	ldw	r3,-8(fp)
   2398c:	e0bffd17 	ldw	r2,-12(fp)
   23990:	18800c26 	beq	r3,r2,239c4 <alt_load_section+0x54>
  {
    while( to != end )
   23994:	00000806 	br	239b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23998:	e0bffe17 	ldw	r2,-8(fp)
   2399c:	10c00104 	addi	r3,r2,4
   239a0:	e0fffe15 	stw	r3,-8(fp)
   239a4:	e0fffd17 	ldw	r3,-12(fp)
   239a8:	19000104 	addi	r4,r3,4
   239ac:	e13ffd15 	stw	r4,-12(fp)
   239b0:	18c00017 	ldw	r3,0(r3)
   239b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   239b8:	e0fffe17 	ldw	r3,-8(fp)
   239bc:	e0bfff17 	ldw	r2,-4(fp)
   239c0:	18bff51e 	bne	r3,r2,23998 <__alt_data_end+0xfffe3998>
    {
      *to++ = *from++;
    }
  }
}
   239c4:	0001883a 	nop
   239c8:	e037883a 	mov	sp,fp
   239cc:	df000017 	ldw	fp,0(sp)
   239d0:	dec00104 	addi	sp,sp,4
   239d4:	f800283a 	ret

000239d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   239d8:	defffe04 	addi	sp,sp,-8
   239dc:	dfc00115 	stw	ra,4(sp)
   239e0:	df000015 	stw	fp,0(sp)
   239e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   239e8:	018000f4 	movhi	r6,3
   239ec:	31a94b04 	addi	r6,r6,-23252
   239f0:	014000f4 	movhi	r5,3
   239f4:	29626f04 	addi	r5,r5,-30276
   239f8:	010000f4 	movhi	r4,3
   239fc:	21294b04 	addi	r4,r4,-23252
   23a00:	00239700 	call	23970 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23a04:	018000b4 	movhi	r6,2
   23a08:	31808c04 	addi	r6,r6,560
   23a0c:	014000b4 	movhi	r5,2
   23a10:	29400804 	addi	r5,r5,32
   23a14:	010000b4 	movhi	r4,2
   23a18:	21000804 	addi	r4,r4,32
   23a1c:	00239700 	call	23970 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23a20:	018000f4 	movhi	r6,3
   23a24:	31a26f04 	addi	r6,r6,-30276
   23a28:	014000f4 	movhi	r5,3
   23a2c:	29622e04 	addi	r5,r5,-30536
   23a30:	010000f4 	movhi	r4,3
   23a34:	21222e04 	addi	r4,r4,-30536
   23a38:	00239700 	call	23970 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23a3c:	00272d80 	call	272d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23a40:	00275280 	call	27528 <alt_icache_flush_all>
}
   23a44:	0001883a 	nop
   23a48:	e037883a 	mov	sp,fp
   23a4c:	dfc00117 	ldw	ra,4(sp)
   23a50:	df000017 	ldw	fp,0(sp)
   23a54:	dec00204 	addi	sp,sp,8
   23a58:	f800283a 	ret

00023a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23a5c:	defffe04 	addi	sp,sp,-8
   23a60:	dfc00115 	stw	ra,4(sp)
   23a64:	df000015 	stw	fp,0(sp)
   23a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23a6c:	d0a00917 	ldw	r2,-32732(gp)
   23a70:	10000326 	beq	r2,zero,23a80 <alt_get_errno+0x24>
   23a74:	d0a00917 	ldw	r2,-32732(gp)
   23a78:	103ee83a 	callr	r2
   23a7c:	00000106 	br	23a84 <alt_get_errno+0x28>
   23a80:	d0a6ef04 	addi	r2,gp,-25668
}
   23a84:	e037883a 	mov	sp,fp
   23a88:	dfc00117 	ldw	ra,4(sp)
   23a8c:	df000017 	ldw	fp,0(sp)
   23a90:	dec00204 	addi	sp,sp,8
   23a94:	f800283a 	ret

00023a98 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23a98:	defff904 	addi	sp,sp,-28
   23a9c:	dfc00615 	stw	ra,24(sp)
   23aa0:	df000515 	stw	fp,20(sp)
   23aa4:	df000504 	addi	fp,sp,20
   23aa8:	e13ffd15 	stw	r4,-12(fp)
   23aac:	e17ffe15 	stw	r5,-8(fp)
   23ab0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23ab4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23ab8:	e0bffd17 	ldw	r2,-12(fp)
   23abc:	10000816 	blt	r2,zero,23ae0 <lseek+0x48>
   23ac0:	01400304 	movi	r5,12
   23ac4:	e13ffd17 	ldw	r4,-12(fp)
   23ac8:	00209fc0 	call	209fc <__mulsi3>
   23acc:	1007883a 	mov	r3,r2
   23ad0:	008000f4 	movhi	r2,3
   23ad4:	10a48404 	addi	r2,r2,-28144
   23ad8:	1885883a 	add	r2,r3,r2
   23adc:	00000106 	br	23ae4 <lseek+0x4c>
   23ae0:	0005883a 	mov	r2,zero
   23ae4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23ae8:	e0bffc17 	ldw	r2,-16(fp)
   23aec:	10001026 	beq	r2,zero,23b30 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23af0:	e0bffc17 	ldw	r2,-16(fp)
   23af4:	10800017 	ldw	r2,0(r2)
   23af8:	10800717 	ldw	r2,28(r2)
   23afc:	10000926 	beq	r2,zero,23b24 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23b00:	e0bffc17 	ldw	r2,-16(fp)
   23b04:	10800017 	ldw	r2,0(r2)
   23b08:	10800717 	ldw	r2,28(r2)
   23b0c:	e1bfff17 	ldw	r6,-4(fp)
   23b10:	e17ffe17 	ldw	r5,-8(fp)
   23b14:	e13ffc17 	ldw	r4,-16(fp)
   23b18:	103ee83a 	callr	r2
   23b1c:	e0bffb15 	stw	r2,-20(fp)
   23b20:	00000506 	br	23b38 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23b24:	00bfde84 	movi	r2,-134
   23b28:	e0bffb15 	stw	r2,-20(fp)
   23b2c:	00000206 	br	23b38 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23b30:	00bfebc4 	movi	r2,-81
   23b34:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23b38:	e0bffb17 	ldw	r2,-20(fp)
   23b3c:	1000070e 	bge	r2,zero,23b5c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23b40:	0023a5c0 	call	23a5c <alt_get_errno>
   23b44:	1007883a 	mov	r3,r2
   23b48:	e0bffb17 	ldw	r2,-20(fp)
   23b4c:	0085c83a 	sub	r2,zero,r2
   23b50:	18800015 	stw	r2,0(r3)
    rc = -1;
   23b54:	00bfffc4 	movi	r2,-1
   23b58:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23b5c:	e0bffb17 	ldw	r2,-20(fp)
}
   23b60:	e037883a 	mov	sp,fp
   23b64:	dfc00117 	ldw	ra,4(sp)
   23b68:	df000017 	ldw	fp,0(sp)
   23b6c:	dec00204 	addi	sp,sp,8
   23b70:	f800283a 	ret

00023b74 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23b74:	defffd04 	addi	sp,sp,-12
   23b78:	dfc00215 	stw	ra,8(sp)
   23b7c:	df000115 	stw	fp,4(sp)
   23b80:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23b84:	0009883a 	mov	r4,zero
   23b88:	002404c0 	call	2404c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23b8c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23b90:	00240840 	call	24084 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23b94:	018000f4 	movhi	r6,3
   23b98:	31a25b04 	addi	r6,r6,-30356
   23b9c:	014000f4 	movhi	r5,3
   23ba0:	29625b04 	addi	r5,r5,-30356
   23ba4:	010000f4 	movhi	r4,3
   23ba8:	21225b04 	addi	r4,r4,-30356
   23bac:	00278cc0 	call	278cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23bb0:	00273d80 	call	273d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23bb4:	010000b4 	movhi	r4,2
   23bb8:	211d0e04 	addi	r4,r4,29752
   23bbc:	00282640 	call	28264 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23bc0:	d0a6f017 	ldw	r2,-25664(gp)
   23bc4:	d0e6f117 	ldw	r3,-25660(gp)
   23bc8:	d126f217 	ldw	r4,-25656(gp)
   23bcc:	200d883a 	mov	r6,r4
   23bd0:	180b883a 	mov	r5,r3
   23bd4:	1009883a 	mov	r4,r2
   23bd8:	00207e00 	call	207e0 <main>
   23bdc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23be0:	01000044 	movi	r4,1
   23be4:	00236900 	call	23690 <close>
  exit (result);
   23be8:	e13fff17 	ldw	r4,-4(fp)
   23bec:	00282780 	call	28278 <exit>

00023bf0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23bf0:	defffe04 	addi	sp,sp,-8
   23bf4:	df000115 	stw	fp,4(sp)
   23bf8:	df000104 	addi	fp,sp,4
   23bfc:	e13fff15 	stw	r4,-4(fp)
}
   23c00:	0001883a 	nop
   23c04:	e037883a 	mov	sp,fp
   23c08:	df000017 	ldw	fp,0(sp)
   23c0c:	dec00104 	addi	sp,sp,4
   23c10:	f800283a 	ret

00023c14 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23c14:	defffe04 	addi	sp,sp,-8
   23c18:	df000115 	stw	fp,4(sp)
   23c1c:	df000104 	addi	fp,sp,4
   23c20:	e13fff15 	stw	r4,-4(fp)
}
   23c24:	0001883a 	nop
   23c28:	e037883a 	mov	sp,fp
   23c2c:	df000017 	ldw	fp,0(sp)
   23c30:	dec00104 	addi	sp,sp,4
   23c34:	f800283a 	ret

00023c38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23c38:	defffe04 	addi	sp,sp,-8
   23c3c:	dfc00115 	stw	ra,4(sp)
   23c40:	df000015 	stw	fp,0(sp)
   23c44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23c48:	d0a00917 	ldw	r2,-32732(gp)
   23c4c:	10000326 	beq	r2,zero,23c5c <alt_get_errno+0x24>
   23c50:	d0a00917 	ldw	r2,-32732(gp)
   23c54:	103ee83a 	callr	r2
   23c58:	00000106 	br	23c60 <alt_get_errno+0x28>
   23c5c:	d0a6ef04 	addi	r2,gp,-25668
}
   23c60:	e037883a 	mov	sp,fp
   23c64:	dfc00117 	ldw	ra,4(sp)
   23c68:	df000017 	ldw	fp,0(sp)
   23c6c:	dec00204 	addi	sp,sp,8
   23c70:	f800283a 	ret

00023c74 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23c74:	defff904 	addi	sp,sp,-28
   23c78:	dfc00615 	stw	ra,24(sp)
   23c7c:	df000515 	stw	fp,20(sp)
   23c80:	df000504 	addi	fp,sp,20
   23c84:	e13ffd15 	stw	r4,-12(fp)
   23c88:	e17ffe15 	stw	r5,-8(fp)
   23c8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23c90:	e0bffd17 	ldw	r2,-12(fp)
   23c94:	10000816 	blt	r2,zero,23cb8 <read+0x44>
   23c98:	01400304 	movi	r5,12
   23c9c:	e13ffd17 	ldw	r4,-12(fp)
   23ca0:	00209fc0 	call	209fc <__mulsi3>
   23ca4:	1007883a 	mov	r3,r2
   23ca8:	008000f4 	movhi	r2,3
   23cac:	10a48404 	addi	r2,r2,-28144
   23cb0:	1885883a 	add	r2,r3,r2
   23cb4:	00000106 	br	23cbc <read+0x48>
   23cb8:	0005883a 	mov	r2,zero
   23cbc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23cc0:	e0bffb17 	ldw	r2,-20(fp)
   23cc4:	10002226 	beq	r2,zero,23d50 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23cc8:	e0bffb17 	ldw	r2,-20(fp)
   23ccc:	10800217 	ldw	r2,8(r2)
   23cd0:	108000cc 	andi	r2,r2,3
   23cd4:	10800060 	cmpeqi	r2,r2,1
   23cd8:	1000181e 	bne	r2,zero,23d3c <read+0xc8>
        (fd->dev->read))
   23cdc:	e0bffb17 	ldw	r2,-20(fp)
   23ce0:	10800017 	ldw	r2,0(r2)
   23ce4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23ce8:	10001426 	beq	r2,zero,23d3c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23cec:	e0bffb17 	ldw	r2,-20(fp)
   23cf0:	10800017 	ldw	r2,0(r2)
   23cf4:	10800517 	ldw	r2,20(r2)
   23cf8:	e0ffff17 	ldw	r3,-4(fp)
   23cfc:	180d883a 	mov	r6,r3
   23d00:	e17ffe17 	ldw	r5,-8(fp)
   23d04:	e13ffb17 	ldw	r4,-20(fp)
   23d08:	103ee83a 	callr	r2
   23d0c:	e0bffc15 	stw	r2,-16(fp)
   23d10:	e0bffc17 	ldw	r2,-16(fp)
   23d14:	1000070e 	bge	r2,zero,23d34 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23d18:	0023c380 	call	23c38 <alt_get_errno>
   23d1c:	1007883a 	mov	r3,r2
   23d20:	e0bffc17 	ldw	r2,-16(fp)
   23d24:	0085c83a 	sub	r2,zero,r2
   23d28:	18800015 	stw	r2,0(r3)
          return -1;
   23d2c:	00bfffc4 	movi	r2,-1
   23d30:	00000c06 	br	23d64 <read+0xf0>
        }
        return rval;
   23d34:	e0bffc17 	ldw	r2,-16(fp)
   23d38:	00000a06 	br	23d64 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23d3c:	0023c380 	call	23c38 <alt_get_errno>
   23d40:	1007883a 	mov	r3,r2
   23d44:	00800344 	movi	r2,13
   23d48:	18800015 	stw	r2,0(r3)
   23d4c:	00000406 	br	23d60 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23d50:	0023c380 	call	23c38 <alt_get_errno>
   23d54:	1007883a 	mov	r3,r2
   23d58:	00801444 	movi	r2,81
   23d5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23d60:	00bfffc4 	movi	r2,-1
}
   23d64:	e037883a 	mov	sp,fp
   23d68:	dfc00117 	ldw	ra,4(sp)
   23d6c:	df000017 	ldw	fp,0(sp)
   23d70:	dec00204 	addi	sp,sp,8
   23d74:	f800283a 	ret

00023d78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23d78:	defffc04 	addi	sp,sp,-16
   23d7c:	dfc00315 	stw	ra,12(sp)
   23d80:	df000215 	stw	fp,8(sp)
   23d84:	dc000115 	stw	r16,4(sp)
   23d88:	df000204 	addi	fp,sp,8
   23d8c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23d90:	e0bffe17 	ldw	r2,-8(fp)
   23d94:	108000d0 	cmplti	r2,r2,3
   23d98:	1000111e 	bne	r2,zero,23de0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23d9c:	040000f4 	movhi	r16,3
   23da0:	84248404 	addi	r16,r16,-28144
   23da4:	e0bffe17 	ldw	r2,-8(fp)
   23da8:	01400304 	movi	r5,12
   23dac:	1009883a 	mov	r4,r2
   23db0:	00209fc0 	call	209fc <__mulsi3>
   23db4:	8085883a 	add	r2,r16,r2
   23db8:	10800204 	addi	r2,r2,8
   23dbc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23dc0:	040000f4 	movhi	r16,3
   23dc4:	84248404 	addi	r16,r16,-28144
   23dc8:	e0bffe17 	ldw	r2,-8(fp)
   23dcc:	01400304 	movi	r5,12
   23dd0:	1009883a 	mov	r4,r2
   23dd4:	00209fc0 	call	209fc <__mulsi3>
   23dd8:	8085883a 	add	r2,r16,r2
   23ddc:	10000015 	stw	zero,0(r2)
  }
}
   23de0:	0001883a 	nop
   23de4:	e6ffff04 	addi	sp,fp,-4
   23de8:	dfc00217 	ldw	ra,8(sp)
   23dec:	df000117 	ldw	fp,4(sp)
   23df0:	dc000017 	ldw	r16,0(sp)
   23df4:	dec00304 	addi	sp,sp,12
   23df8:	f800283a 	ret

00023dfc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23dfc:	defff904 	addi	sp,sp,-28
   23e00:	df000615 	stw	fp,24(sp)
   23e04:	df000604 	addi	fp,sp,24
   23e08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23e0c:	0005303a 	rdctl	r2,status
   23e10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23e14:	e0fffe17 	ldw	r3,-8(fp)
   23e18:	00bfff84 	movi	r2,-2
   23e1c:	1884703a 	and	r2,r3,r2
   23e20:	1001703a 	wrctl	status,r2
  
  return context;
   23e24:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23e28:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23e2c:	d0a00a17 	ldw	r2,-32728(gp)
   23e30:	10c000c4 	addi	r3,r2,3
   23e34:	00bfff04 	movi	r2,-4
   23e38:	1884703a 	and	r2,r3,r2
   23e3c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23e40:	d0e00a17 	ldw	r3,-32728(gp)
   23e44:	e0bfff17 	ldw	r2,-4(fp)
   23e48:	1887883a 	add	r3,r3,r2
   23e4c:	00800134 	movhi	r2,4
   23e50:	10800004 	addi	r2,r2,0
   23e54:	10c0062e 	bgeu	r2,r3,23e70 <sbrk+0x74>
   23e58:	e0bffb17 	ldw	r2,-20(fp)
   23e5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23e60:	e0bffa17 	ldw	r2,-24(fp)
   23e64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23e68:	00bfffc4 	movi	r2,-1
   23e6c:	00000b06 	br	23e9c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23e70:	d0a00a17 	ldw	r2,-32728(gp)
   23e74:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23e78:	d0e00a17 	ldw	r3,-32728(gp)
   23e7c:	e0bfff17 	ldw	r2,-4(fp)
   23e80:	1885883a 	add	r2,r3,r2
   23e84:	d0a00a15 	stw	r2,-32728(gp)
   23e88:	e0bffb17 	ldw	r2,-20(fp)
   23e8c:	e0bffc15 	stw	r2,-16(fp)
   23e90:	e0bffc17 	ldw	r2,-16(fp)
   23e94:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23e98:	e0bffd17 	ldw	r2,-12(fp)
} 
   23e9c:	e037883a 	mov	sp,fp
   23ea0:	df000017 	ldw	fp,0(sp)
   23ea4:	dec00104 	addi	sp,sp,4
   23ea8:	f800283a 	ret

00023eac <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23eac:	defffd04 	addi	sp,sp,-12
   23eb0:	dfc00215 	stw	ra,8(sp)
   23eb4:	df000115 	stw	fp,4(sp)
   23eb8:	df000104 	addi	fp,sp,4
   23ebc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23ec0:	e13fff17 	ldw	r4,-4(fp)
   23ec4:	00271800 	call	27180 <alt_busy_sleep>
}
   23ec8:	e037883a 	mov	sp,fp
   23ecc:	dfc00117 	ldw	ra,4(sp)
   23ed0:	df000017 	ldw	fp,0(sp)
   23ed4:	dec00204 	addi	sp,sp,8
   23ed8:	f800283a 	ret

00023edc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23edc:	defffe04 	addi	sp,sp,-8
   23ee0:	dfc00115 	stw	ra,4(sp)
   23ee4:	df000015 	stw	fp,0(sp)
   23ee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23eec:	d0a00917 	ldw	r2,-32732(gp)
   23ef0:	10000326 	beq	r2,zero,23f00 <alt_get_errno+0x24>
   23ef4:	d0a00917 	ldw	r2,-32732(gp)
   23ef8:	103ee83a 	callr	r2
   23efc:	00000106 	br	23f04 <alt_get_errno+0x28>
   23f00:	d0a6ef04 	addi	r2,gp,-25668
}
   23f04:	e037883a 	mov	sp,fp
   23f08:	dfc00117 	ldw	ra,4(sp)
   23f0c:	df000017 	ldw	fp,0(sp)
   23f10:	dec00204 	addi	sp,sp,8
   23f14:	f800283a 	ret

00023f18 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23f18:	defff904 	addi	sp,sp,-28
   23f1c:	dfc00615 	stw	ra,24(sp)
   23f20:	df000515 	stw	fp,20(sp)
   23f24:	df000504 	addi	fp,sp,20
   23f28:	e13ffd15 	stw	r4,-12(fp)
   23f2c:	e17ffe15 	stw	r5,-8(fp)
   23f30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23f34:	e0bffd17 	ldw	r2,-12(fp)
   23f38:	10000816 	blt	r2,zero,23f5c <write+0x44>
   23f3c:	01400304 	movi	r5,12
   23f40:	e13ffd17 	ldw	r4,-12(fp)
   23f44:	00209fc0 	call	209fc <__mulsi3>
   23f48:	1007883a 	mov	r3,r2
   23f4c:	008000f4 	movhi	r2,3
   23f50:	10a48404 	addi	r2,r2,-28144
   23f54:	1885883a 	add	r2,r3,r2
   23f58:	00000106 	br	23f60 <write+0x48>
   23f5c:	0005883a 	mov	r2,zero
   23f60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23f64:	e0bffb17 	ldw	r2,-20(fp)
   23f68:	10002126 	beq	r2,zero,23ff0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23f6c:	e0bffb17 	ldw	r2,-20(fp)
   23f70:	10800217 	ldw	r2,8(r2)
   23f74:	108000cc 	andi	r2,r2,3
   23f78:	10001826 	beq	r2,zero,23fdc <write+0xc4>
   23f7c:	e0bffb17 	ldw	r2,-20(fp)
   23f80:	10800017 	ldw	r2,0(r2)
   23f84:	10800617 	ldw	r2,24(r2)
   23f88:	10001426 	beq	r2,zero,23fdc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23f8c:	e0bffb17 	ldw	r2,-20(fp)
   23f90:	10800017 	ldw	r2,0(r2)
   23f94:	10800617 	ldw	r2,24(r2)
   23f98:	e0ffff17 	ldw	r3,-4(fp)
   23f9c:	180d883a 	mov	r6,r3
   23fa0:	e17ffe17 	ldw	r5,-8(fp)
   23fa4:	e13ffb17 	ldw	r4,-20(fp)
   23fa8:	103ee83a 	callr	r2
   23fac:	e0bffc15 	stw	r2,-16(fp)
   23fb0:	e0bffc17 	ldw	r2,-16(fp)
   23fb4:	1000070e 	bge	r2,zero,23fd4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23fb8:	0023edc0 	call	23edc <alt_get_errno>
   23fbc:	1007883a 	mov	r3,r2
   23fc0:	e0bffc17 	ldw	r2,-16(fp)
   23fc4:	0085c83a 	sub	r2,zero,r2
   23fc8:	18800015 	stw	r2,0(r3)
        return -1;
   23fcc:	00bfffc4 	movi	r2,-1
   23fd0:	00000c06 	br	24004 <write+0xec>
      }
      return rval;
   23fd4:	e0bffc17 	ldw	r2,-16(fp)
   23fd8:	00000a06 	br	24004 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23fdc:	0023edc0 	call	23edc <alt_get_errno>
   23fe0:	1007883a 	mov	r3,r2
   23fe4:	00800344 	movi	r2,13
   23fe8:	18800015 	stw	r2,0(r3)
   23fec:	00000406 	br	24000 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23ff0:	0023edc0 	call	23edc <alt_get_errno>
   23ff4:	1007883a 	mov	r3,r2
   23ff8:	00801444 	movi	r2,81
   23ffc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   24000:	00bfffc4 	movi	r2,-1
}
   24004:	e037883a 	mov	sp,fp
   24008:	dfc00117 	ldw	ra,4(sp)
   2400c:	df000017 	ldw	fp,0(sp)
   24010:	dec00204 	addi	sp,sp,8
   24014:	f800283a 	ret

00024018 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   24018:	defffd04 	addi	sp,sp,-12
   2401c:	dfc00215 	stw	ra,8(sp)
   24020:	df000115 	stw	fp,4(sp)
   24024:	df000104 	addi	fp,sp,4
   24028:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2402c:	d1600604 	addi	r5,gp,-32744
   24030:	e13fff17 	ldw	r4,-4(fp)
   24034:	00273340 	call	27334 <alt_dev_llist_insert>
}
   24038:	e037883a 	mov	sp,fp
   2403c:	dfc00117 	ldw	ra,4(sp)
   24040:	df000017 	ldw	fp,0(sp)
   24044:	dec00204 	addi	sp,sp,8
   24048:	f800283a 	ret

0002404c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2404c:	defffd04 	addi	sp,sp,-12
   24050:	dfc00215 	stw	ra,8(sp)
   24054:	df000115 	stw	fp,4(sp)
   24058:	df000104 	addi	fp,sp,4
   2405c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII, NIOSII);
   24060:	0027fd80 	call	27fd8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   24064:	00800044 	movi	r2,1
   24068:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2406c:	0001883a 	nop
   24070:	e037883a 	mov	sp,fp
   24074:	dfc00117 	ldw	ra,4(sp)
   24078:	df000017 	ldw	fp,0(sp)
   2407c:	dec00204 	addi	sp,sp,8
   24080:	f800283a 	ret

00024084 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   24084:	defffe04 	addi	sp,sp,-8
   24088:	dfc00115 	stw	ra,4(sp)
   2408c:	df000015 	stw	fp,0(sp)
   24090:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C, I2C);
   24094:	010000f4 	movhi	r4,3
   24098:	2124e404 	addi	r4,r4,-27760
   2409c:	002434c0 	call	2434c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
   240a0:	000d883a 	mov	r6,zero
   240a4:	000b883a 	mov	r5,zero
   240a8:	010000f4 	movhi	r4,3
   240ac:	2124fc04 	addi	r4,r4,-27664
   240b0:	0025e780 	call	25e78 <altera_avalon_jtag_uart_init>
   240b4:	010000f4 	movhi	r4,3
   240b8:	2124f204 	addi	r4,r4,-27704
   240bc:	00240180 	call	24018 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( ID, ID);
   240c0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART1, UART1);
   240c4:	01800084 	movi	r6,2
   240c8:	000b883a 	mov	r5,zero
   240cc:	010000f4 	movhi	r4,3
   240d0:	21291404 	addi	r4,r4,-23472
   240d4:	002688c0 	call	2688c <altera_avalon_uart_init>
   240d8:	010000f4 	movhi	r4,3
   240dc:	21290a04 	addi	r4,r4,-23512
   240e0:	00240180 	call	24018 <alt_dev_reg>
}
   240e4:	0001883a 	nop
   240e8:	e037883a 	mov	sp,fp
   240ec:	dfc00117 	ldw	ra,4(sp)
   240f0:	df000017 	ldw	fp,0(sp)
   240f4:	dec00204 	addi	sp,sp,8
   240f8:	f800283a 	ret

000240fc <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   240fc:	defff904 	addi	sp,sp,-28
   24100:	dfc00615 	stw	ra,24(sp)
   24104:	df000515 	stw	fp,20(sp)
   24108:	df000504 	addi	fp,sp,20
   2410c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   24110:	008000b4 	movhi	r2,2
   24114:	10a1a804 	addi	r2,r2,-31072
   24118:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   2411c:	e0bfff17 	ldw	r2,-4(fp)
   24120:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   24124:	e0bffc17 	ldw	r2,-16(fp)
   24128:	10800717 	ldw	r2,28(r2)
   2412c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   24130:	e0bffd17 	ldw	r2,-12(fp)
   24134:	10800217 	ldw	r2,8(r2)
   24138:	10800098 	cmpnei	r2,r2,2
   2413c:	1000251e 	bne	r2,zero,241d4 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   24140:	e0bffd17 	ldw	r2,-12(fp)
   24144:	10c00017 	ldw	r3,0(r2)
   24148:	e0bffd17 	ldw	r2,-12(fp)
   2414c:	10800117 	ldw	r2,4(r2)
   24150:	e13ffe04 	addi	r4,fp,-8
   24154:	200f883a 	mov	r7,r4
   24158:	100d883a 	mov	r6,r2
   2415c:	180b883a 	mov	r5,r3
   24160:	e13ffc17 	ldw	r4,-16(fp)
   24164:	00248ac0 	call	248ac <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   24168:	e0bffd17 	ldw	r2,-12(fp)
   2416c:	10c00117 	ldw	r3,4(r2)
   24170:	e0bffe17 	ldw	r2,-8(fp)
   24174:	1887c83a 	sub	r3,r3,r2
   24178:	e0bffd17 	ldw	r2,-12(fp)
   2417c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   24180:	e0bffd17 	ldw	r2,-12(fp)
   24184:	10c00017 	ldw	r3,0(r2)
   24188:	e0bffe17 	ldw	r2,-8(fp)
   2418c:	1887883a 	add	r3,r3,r2
   24190:	e0bffd17 	ldw	r2,-12(fp)
   24194:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   24198:	e0bffd17 	ldw	r2,-12(fp)
   2419c:	10800117 	ldw	r2,4(r2)
   241a0:	10000c26 	beq	r2,zero,241d4 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   241a4:	01400704 	movi	r5,28
   241a8:	e13ffc17 	ldw	r4,-16(fp)
   241ac:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   241b0:	01400084 	movi	r5,2
   241b4:	e13ffc17 	ldw	r4,-16(fp)
   241b8:	0025b080 	call	25b08 <alt_avalon_i2c_int_enable>
   241bc:	00000e06 	br	241f8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   241c0:	e0bffb17 	ldw	r2,-20(fp)
   241c4:	10bfffc4 	addi	r2,r2,-1
   241c8:	e0bffb15 	stw	r2,-20(fp)
   241cc:	e0bffb17 	ldw	r2,-20(fp)
   241d0:	10000426 	beq	r2,zero,241e4 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   241d4:	e13ffc17 	ldw	r4,-16(fp)
   241d8:	00248680 	call	24868 <alt_avalon_i2c_is_busy>
   241dc:	103ff81e 	bne	r2,zero,241c0 <__alt_data_end+0xfffe41c0>
   241e0:	00000106 	br	241e8 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   241e4:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   241e8:	e13ffc17 	ldw	r4,-16(fp)
   241ec:	00245100 	call	24510 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   241f0:	e0bffd17 	ldw	r2,-12(fp)
   241f4:	10000215 	stw	zero,8(r2)
}
   241f8:	e037883a 	mov	sp,fp
   241fc:	dfc00117 	ldw	ra,4(sp)
   24200:	df000017 	ldw	fp,0(sp)
   24204:	dec00204 	addi	sp,sp,8
   24208:	f800283a 	ret

0002420c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   2420c:	defffc04 	addi	sp,sp,-16
   24210:	dfc00315 	stw	ra,12(sp)
   24214:	df000215 	stw	fp,8(sp)
   24218:	df000204 	addi	fp,sp,8
   2421c:	e13ffe15 	stw	r4,-8(fp)
   24220:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   24224:	e0bfff17 	ldw	r2,-4(fp)
   24228:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   2422c:	e1ffff17 	ldw	r7,-4(fp)
   24230:	000d883a 	mov	r6,zero
   24234:	014000b4 	movhi	r5,2
   24238:	29503f04 	addi	r5,r5,16636
   2423c:	e13ffe17 	ldw	r4,-8(fp)
   24240:	00242f80 	call	242f8 <alt_avalon_i2c_register_callback>
}
   24244:	0001883a 	nop
   24248:	e037883a 	mov	sp,fp
   2424c:	dfc00117 	ldw	ra,4(sp)
   24250:	df000017 	ldw	fp,0(sp)
   24254:	dec00204 	addi	sp,sp,8
   24258:	f800283a 	ret

0002425c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   2425c:	defff904 	addi	sp,sp,-28
   24260:	dfc00615 	stw	ra,24(sp)
   24264:	df000515 	stw	fp,20(sp)
   24268:	df000504 	addi	fp,sp,20
   2426c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   24270:	e0bfff17 	ldw	r2,-4(fp)
   24274:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   24278:	014007c4 	movi	r5,31
   2427c:	e13ffb17 	ldw	r4,-20(fp)
   24280:	0025aa00 	call	25aa0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   24284:	01400704 	movi	r5,28
   24288:	e13ffb17 	ldw	r4,-20(fp)
   2428c:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   24290:	e0bffb17 	ldw	r2,-20(fp)
   24294:	10800617 	ldw	r2,24(r2)
   24298:	10001126 	beq	r2,zero,242e0 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2429c:	0005303a 	rdctl	r2,status
   242a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242a4:	e0fffd17 	ldw	r3,-12(fp)
   242a8:	00bfff84 	movi	r2,-2
   242ac:	1884703a 	and	r2,r3,r2
   242b0:	1001703a 	wrctl	status,r2
  
  return context;
   242b4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   242b8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   242bc:	e0bffb17 	ldw	r2,-20(fp)
   242c0:	10800617 	ldw	r2,24(r2)
   242c4:	e13ffb17 	ldw	r4,-20(fp)
   242c8:	103ee83a 	callr	r2
   242cc:	e0bffc17 	ldw	r2,-16(fp)
   242d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242d4:	e0bffe17 	ldw	r2,-8(fp)
   242d8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   242dc:	0001883a 	nop
   242e0:	0001883a 	nop
}
   242e4:	e037883a 	mov	sp,fp
   242e8:	dfc00117 	ldw	ra,4(sp)
   242ec:	df000017 	ldw	fp,0(sp)
   242f0:	dec00204 	addi	sp,sp,8
   242f4:	f800283a 	ret

000242f8 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   242f8:	defffb04 	addi	sp,sp,-20
   242fc:	df000415 	stw	fp,16(sp)
   24300:	df000404 	addi	fp,sp,16
   24304:	e13ffc15 	stw	r4,-16(fp)
   24308:	e17ffd15 	stw	r5,-12(fp)
   2430c:	e1bffe15 	stw	r6,-8(fp)
   24310:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   24314:	e0bffc17 	ldw	r2,-16(fp)
   24318:	e0fffd17 	ldw	r3,-12(fp)
   2431c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   24320:	e0bffc17 	ldw	r2,-16(fp)
   24324:	e0ffff17 	ldw	r3,-4(fp)
   24328:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   2432c:	e0bffc17 	ldw	r2,-16(fp)
   24330:	e0fffe17 	ldw	r3,-8(fp)
   24334:	10c00815 	stw	r3,32(r2)

    return ;
   24338:	0001883a 	nop
}
   2433c:	e037883a 	mov	sp,fp
   24340:	df000017 	ldw	fp,0(sp)
   24344:	dec00104 	addi	sp,sp,4
   24348:	f800283a 	ret

0002434c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   2434c:	defff704 	addi	sp,sp,-36
   24350:	dfc00815 	stw	ra,32(sp)
   24354:	df000715 	stw	fp,28(sp)
   24358:	df000704 	addi	fp,sp,28
   2435c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   24360:	e13fff17 	ldw	r4,-4(fp)
   24364:	00245100 	call	24510 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   24368:	014007c4 	movi	r5,31
   2436c:	e13fff17 	ldw	r4,-4(fp)
   24370:	0025aa00 	call	25aa0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   24374:	01400704 	movi	r5,28
   24378:	e13fff17 	ldw	r4,-4(fp)
   2437c:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   24380:	014000c4 	movi	r5,3
   24384:	e13fff17 	ldw	r4,-4(fp)
   24388:	0025cac0 	call	25cac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   2438c:	014000c4 	movi	r5,3
   24390:	e13fff17 	ldw	r4,-4(fp)
   24394:	0025bfc0 	call	25bfc <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   24398:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   2439c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   243a0:	e0bffb04 	addi	r2,fp,-20
   243a4:	018000b4 	movhi	r6,2
   243a8:	31a1a804 	addi	r6,r6,-31072
   243ac:	100b883a 	mov	r5,r2
   243b0:	e13fff17 	ldw	r4,-4(fp)
   243b4:	002476c0 	call	2476c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   243b8:	e0bffb04 	addi	r2,fp,-20
   243bc:	100b883a 	mov	r5,r2
   243c0:	e13fff17 	ldw	r4,-4(fp)
   243c4:	002460c0 	call	2460c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   243c8:	d1600b04 	addi	r5,gp,-32724
   243cc:	e13fff17 	ldw	r4,-4(fp)
   243d0:	00273340 	call	27334 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   243d4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   243d8:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   243dc:	e0bffa17 	ldw	r2,-24(fp)
   243e0:	10000c1e 	bne	r2,zero,24414 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   243e4:	e0bfff17 	ldw	r2,-4(fp)
   243e8:	10c00417 	ldw	r3,16(r2)
   243ec:	e0bfff17 	ldw	r2,-4(fp)
   243f0:	10800517 	ldw	r2,20(r2)
   243f4:	d8000015 	stw	zero,0(sp)
   243f8:	e1ffff17 	ldw	r7,-4(fp)
   243fc:	018000b4 	movhi	r6,2
   24400:	31909704 	addi	r6,r6,16988
   24404:	100b883a 	mov	r5,r2
   24408:	1809883a 	mov	r4,r3
   2440c:	00275480 	call	27548 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   24410:	00000406 	br	24424 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   24414:	010000f4 	movhi	r4,3
   24418:	21226704 	addi	r4,r4,-30308
   2441c:	0027bcc0 	call	27bcc <alt_printf>
    }

    return;
   24420:	0001883a 	nop

}
   24424:	e037883a 	mov	sp,fp
   24428:	dfc00117 	ldw	ra,4(sp)
   2442c:	df000017 	ldw	fp,0(sp)
   24430:	dec00204 	addi	sp,sp,8
   24434:	f800283a 	ret

00024438 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   24438:	defffc04 	addi	sp,sp,-16
   2443c:	dfc00315 	stw	ra,12(sp)
   24440:	df000215 	stw	fp,8(sp)
   24444:	df000204 	addi	fp,sp,8
   24448:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   2444c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   24450:	d1600b04 	addi	r5,gp,-32724
   24454:	e13fff17 	ldw	r4,-4(fp)
   24458:	00274980 	call	27498 <alt_find_dev>
   2445c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   24460:	e0bffe17 	ldw	r2,-8(fp)
}
   24464:	e037883a 	mov	sp,fp
   24468:	dfc00117 	ldw	ra,4(sp)
   2446c:	df000017 	ldw	fp,0(sp)
   24470:	dec00204 	addi	sp,sp,8
   24474:	f800283a 	ret

00024478 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   24478:	defffc04 	addi	sp,sp,-16
   2447c:	df000315 	stw	fp,12(sp)
   24480:	df000304 	addi	fp,sp,12
   24484:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   24488:	e0bfff17 	ldw	r2,-4(fp)
   2448c:	10800717 	ldw	r2,28(r2)
   24490:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   24494:	e0bfff17 	ldw	r2,-4(fp)
   24498:	10800317 	ldw	r2,12(r2)
   2449c:	10800204 	addi	r2,r2,8
   244a0:	10800037 	ldwio	r2,0(r2)
   244a4:	1080004c 	andi	r2,r2,1
   244a8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   244ac:	e0bffe17 	ldw	r2,-8(fp)
   244b0:	10000226 	beq	r2,zero,244bc <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   244b4:	00bffe44 	movi	r2,-7
   244b8:	00001106 	br	24500 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   244bc:	e0bfff17 	ldw	r2,-4(fp)
   244c0:	10c00617 	ldw	r3,24(r2)
   244c4:	008000b4 	movhi	r2,2
   244c8:	10903f04 	addi	r2,r2,16636
   244cc:	1880021e 	bne	r3,r2,244d8 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   244d0:	e0bffd17 	ldw	r2,-12(fp)
   244d4:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   244d8:	e0bfff17 	ldw	r2,-4(fp)
   244dc:	10800317 	ldw	r2,12(r2)
   244e0:	10800204 	addi	r2,r2,8
   244e4:	e0ffff17 	ldw	r3,-4(fp)
   244e8:	18c00317 	ldw	r3,12(r3)
   244ec:	18c00204 	addi	r3,r3,8
   244f0:	18c00037 	ldwio	r3,0(r3)
   244f4:	18c00054 	ori	r3,r3,1
   244f8:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   244fc:	0005883a 	mov	r2,zero
}
   24500:	e037883a 	mov	sp,fp
   24504:	df000017 	ldw	fp,0(sp)
   24508:	dec00104 	addi	sp,sp,4
   2450c:	f800283a 	ret

00024510 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   24510:	defffe04 	addi	sp,sp,-8
   24514:	df000115 	stw	fp,4(sp)
   24518:	df000104 	addi	fp,sp,4
   2451c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   24520:	e0bfff17 	ldw	r2,-4(fp)
   24524:	10800317 	ldw	r2,12(r2)
   24528:	10800204 	addi	r2,r2,8
   2452c:	e0ffff17 	ldw	r3,-4(fp)
   24530:	18c00317 	ldw	r3,12(r3)
   24534:	18c00204 	addi	r3,r3,8
   24538:	19000037 	ldwio	r4,0(r3)
   2453c:	00ffff84 	movi	r3,-2
   24540:	20c6703a 	and	r3,r4,r3
   24544:	10c00035 	stwio	r3,0(r2)

}
   24548:	0001883a 	nop
   2454c:	e037883a 	mov	sp,fp
   24550:	df000017 	ldw	fp,0(sp)
   24554:	dec00104 	addi	sp,sp,4
   24558:	f800283a 	ret

0002455c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2455c:	defffd04 	addi	sp,sp,-12
   24560:	df000215 	stw	fp,8(sp)
   24564:	df000204 	addi	fp,sp,8
   24568:	e13ffe15 	stw	r4,-8(fp)
   2456c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   24570:	e0bffe17 	ldw	r2,-8(fp)
   24574:	10c00d17 	ldw	r3,52(r2)
   24578:	e0bfff17 	ldw	r2,-4(fp)
   2457c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   24580:	e0bffe17 	ldw	r2,-8(fp)
   24584:	10800317 	ldw	r2,12(r2)
   24588:	10800204 	addi	r2,r2,8
   2458c:	10800037 	ldwio	r2,0(r2)
   24590:	1080008c 	andi	r2,r2,2
   24594:	1005d07a 	srai	r2,r2,1
   24598:	1007883a 	mov	r3,r2
   2459c:	e0bfff17 	ldw	r2,-4(fp)
   245a0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   245a4:	e0bffe17 	ldw	r2,-8(fp)
   245a8:	10800317 	ldw	r2,12(r2)
   245ac:	10800904 	addi	r2,r2,36
   245b0:	10800037 	ldwio	r2,0(r2)
   245b4:	1007883a 	mov	r3,r2
   245b8:	e0bfff17 	ldw	r2,-4(fp)
   245bc:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   245c0:	e0bffe17 	ldw	r2,-8(fp)
   245c4:	10800317 	ldw	r2,12(r2)
   245c8:	10800804 	addi	r2,r2,32
   245cc:	10800037 	ldwio	r2,0(r2)
   245d0:	1007883a 	mov	r3,r2
   245d4:	e0bfff17 	ldw	r2,-4(fp)
   245d8:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   245dc:	e0bffe17 	ldw	r2,-8(fp)
   245e0:	10800317 	ldw	r2,12(r2)
   245e4:	10800a04 	addi	r2,r2,40
   245e8:	10800037 	ldwio	r2,0(r2)
   245ec:	1007883a 	mov	r3,r2
   245f0:	e0bfff17 	ldw	r2,-4(fp)
   245f4:	10c0030d 	sth	r3,12(r2)
}
   245f8:	0001883a 	nop
   245fc:	e037883a 	mov	sp,fp
   24600:	df000017 	ldw	fp,0(sp)
   24604:	dec00104 	addi	sp,sp,4
   24608:	f800283a 	ret

0002460c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2460c:	defffd04 	addi	sp,sp,-12
   24610:	df000215 	stw	fp,8(sp)
   24614:	df000204 	addi	fp,sp,8
   24618:	e13ffe15 	stw	r4,-8(fp)
   2461c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   24620:	e0bfff17 	ldw	r2,-4(fp)
   24624:	10c00017 	ldw	r3,0(r2)
   24628:	e0bffe17 	ldw	r2,-8(fp)
   2462c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   24630:	e0bffe17 	ldw	r2,-8(fp)
   24634:	10800317 	ldw	r2,12(r2)
   24638:	10c00204 	addi	r3,r2,8
   2463c:	e0bffe17 	ldw	r2,-8(fp)
   24640:	10800317 	ldw	r2,12(r2)
   24644:	10800204 	addi	r2,r2,8
   24648:	10800037 	ldwio	r2,0(r2)
   2464c:	1009883a 	mov	r4,r2
   24650:	00bfff44 	movi	r2,-3
   24654:	2088703a 	and	r4,r4,r2
   24658:	e0bfff17 	ldw	r2,-4(fp)
   2465c:	10800117 	ldw	r2,4(r2)
   24660:	1085883a 	add	r2,r2,r2
   24664:	1080008c 	andi	r2,r2,2
   24668:	2084b03a 	or	r2,r4,r2
   2466c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   24670:	e0bffe17 	ldw	r2,-8(fp)
   24674:	10800317 	ldw	r2,12(r2)
   24678:	10800904 	addi	r2,r2,36
   2467c:	e0ffff17 	ldw	r3,-4(fp)
   24680:	18c0020b 	ldhu	r3,8(r3)
   24684:	18ffffcc 	andi	r3,r3,65535
   24688:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   2468c:	e0bffe17 	ldw	r2,-8(fp)
   24690:	10800317 	ldw	r2,12(r2)
   24694:	10800804 	addi	r2,r2,32
   24698:	e0ffff17 	ldw	r3,-4(fp)
   2469c:	18c0028b 	ldhu	r3,10(r3)
   246a0:	18ffffcc 	andi	r3,r3,65535
   246a4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   246a8:	e0bffe17 	ldw	r2,-8(fp)
   246ac:	10800317 	ldw	r2,12(r2)
   246b0:	10800a04 	addi	r2,r2,40
   246b4:	e0ffff17 	ldw	r3,-4(fp)
   246b8:	18c0030b 	ldhu	r3,12(r3)
   246bc:	18ffffcc 	andi	r3,r3,65535
   246c0:	10c00035 	stwio	r3,0(r2)
}
   246c4:	0001883a 	nop
   246c8:	e037883a 	mov	sp,fp
   246cc:	df000017 	ldw	fp,0(sp)
   246d0:	dec00104 	addi	sp,sp,4
   246d4:	f800283a 	ret

000246d8 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   246d8:	defffb04 	addi	sp,sp,-20
   246dc:	dfc00415 	stw	ra,16(sp)
   246e0:	df000315 	stw	fp,12(sp)
   246e4:	df000304 	addi	fp,sp,12
   246e8:	e13ffd15 	stw	r4,-12(fp)
   246ec:	e17ffe15 	stw	r5,-8(fp)
   246f0:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   246f4:	e0bffe17 	ldw	r2,-8(fp)
   246f8:	1080028b 	ldhu	r2,10(r2)
   246fc:	10bfffcc 	andi	r2,r2,65535
   24700:	10000426 	beq	r2,zero,24714 <alt_avalon_i2c_master_config_speed_get+0x3c>
   24704:	e0bffe17 	ldw	r2,-8(fp)
   24708:	1080020b 	ldhu	r2,8(r2)
   2470c:	10bfffcc 	andi	r2,r2,65535
   24710:	1000021e 	bne	r2,zero,2471c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   24714:	00bfff44 	movi	r2,-3
   24718:	00000f06 	br	24758 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   2471c:	e0bffd17 	ldw	r2,-12(fp)
   24720:	11000c17 	ldw	r4,48(r2)
   24724:	e0bffe17 	ldw	r2,-8(fp)
   24728:	1080028b 	ldhu	r2,10(r2)
   2472c:	10ffffcc 	andi	r3,r2,65535
   24730:	e0bffe17 	ldw	r2,-8(fp)
   24734:	1080020b 	ldhu	r2,8(r2)
   24738:	10bfffcc 	andi	r2,r2,65535
   2473c:	1885883a 	add	r2,r3,r2
   24740:	100b883a 	mov	r5,r2
   24744:	00209400 	call	20940 <__udivsi3>
   24748:	1007883a 	mov	r3,r2
   2474c:	e0bfff17 	ldw	r2,-4(fp)
   24750:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   24754:	0005883a 	mov	r2,zero
}
   24758:	e037883a 	mov	sp,fp
   2475c:	dfc00117 	ldw	ra,4(sp)
   24760:	df000017 	ldw	fp,0(sp)
   24764:	dec00204 	addi	sp,sp,8
   24768:	f800283a 	ret

0002476c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   2476c:	defff904 	addi	sp,sp,-28
   24770:	dfc00615 	stw	ra,24(sp)
   24774:	df000515 	stw	fp,20(sp)
   24778:	df000504 	addi	fp,sp,20
   2477c:	e13ffd15 	stw	r4,-12(fp)
   24780:	e17ffe15 	stw	r5,-8(fp)
   24784:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   24788:	e0ffff17 	ldw	r3,-4(fp)
   2478c:	008001b4 	movhi	r2,6
   24790:	1086a004 	addi	r2,r2,6784
   24794:	10c00436 	bltu	r2,r3,247a8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   24798:	e0bfff17 	ldw	r2,-4(fp)
   2479c:	10000226 	beq	r2,zero,247a8 <alt_avalon_i2c_master_config_speed_set+0x3c>
   247a0:	e0bfff17 	ldw	r2,-4(fp)
   247a4:	1000021e 	bne	r2,zero,247b0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   247a8:	00bfff04 	movi	r2,-4
   247ac:	00002906 	br	24854 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   247b0:	e0bffd17 	ldw	r2,-12(fp)
   247b4:	10c00c17 	ldw	r3,48(r2)
   247b8:	e0bfff17 	ldw	r2,-4(fp)
   247bc:	1085883a 	add	r2,r2,r2
   247c0:	100b883a 	mov	r5,r2
   247c4:	1809883a 	mov	r4,r3
   247c8:	00209400 	call	20940 <__udivsi3>
   247cc:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   247d0:	e0bffb17 	ldw	r2,-20(fp)
   247d4:	10800f04 	addi	r2,r2,60
   247d8:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   247dc:	e0bffb17 	ldw	r2,-20(fp)
   247e0:	10bff104 	addi	r2,r2,-60
   247e4:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   247e8:	e0ffff17 	ldw	r3,-4(fp)
   247ec:	008000b4 	movhi	r2,2
   247f0:	10a1a804 	addi	r2,r2,-31072
   247f4:	10c0042e 	bgeu	r2,r3,24808 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   247f8:	e0bffe17 	ldw	r2,-8(fp)
   247fc:	00c00044 	movi	r3,1
   24800:	10c00115 	stw	r3,4(r2)
   24804:	00000206 	br	24810 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   24808:	e0bffe17 	ldw	r2,-8(fp)
   2480c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   24810:	e0bffb17 	ldw	r2,-20(fp)
   24814:	1007883a 	mov	r3,r2
   24818:	e0bffe17 	ldw	r2,-8(fp)
   2481c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   24820:	e0bffc17 	ldw	r2,-16(fp)
   24824:	1007883a 	mov	r3,r2
   24828:	e0bffe17 	ldw	r2,-8(fp)
   2482c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   24830:	e0bffb17 	ldw	r2,-20(fp)
   24834:	1007883a 	mov	r3,r2
   24838:	e0bffb17 	ldw	r2,-20(fp)
   2483c:	1004d07a 	srli	r2,r2,1
   24840:	1885c83a 	sub	r2,r3,r2
   24844:	1007883a 	mov	r3,r2
   24848:	e0bffe17 	ldw	r2,-8(fp)
   2484c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   24850:	0005883a 	mov	r2,zero

}
   24854:	e037883a 	mov	sp,fp
   24858:	dfc00117 	ldw	ra,4(sp)
   2485c:	df000017 	ldw	fp,0(sp)
   24860:	dec00204 	addi	sp,sp,8
   24864:	f800283a 	ret

00024868 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   24868:	defffe04 	addi	sp,sp,-8
   2486c:	df000115 	stw	fp,4(sp)
   24870:	df000104 	addi	fp,sp,4
   24874:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   24878:	e0bfff17 	ldw	r2,-4(fp)
   2487c:	10800317 	ldw	r2,12(r2)
   24880:	10800504 	addi	r2,r2,20
   24884:	10800037 	ldwio	r2,0(r2)
   24888:	1080004c 	andi	r2,r2,1
   2488c:	10000226 	beq	r2,zero,24898 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   24890:	00800044 	movi	r2,1
   24894:	00000106 	br	2489c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   24898:	0005883a 	mov	r2,zero
}
   2489c:	e037883a 	mov	sp,fp
   248a0:	df000017 	ldw	fp,0(sp)
   248a4:	dec00104 	addi	sp,sp,4
   248a8:	f800283a 	ret

000248ac <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   248ac:	defffb04 	addi	sp,sp,-20
   248b0:	df000415 	stw	fp,16(sp)
   248b4:	df000404 	addi	fp,sp,16
   248b8:	e13ffc15 	stw	r4,-16(fp)
   248bc:	e17ffd15 	stw	r5,-12(fp)
   248c0:	e1bffe15 	stw	r6,-8(fp)
   248c4:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   248c8:	e0bfff17 	ldw	r2,-4(fp)
   248cc:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   248d0:	00001406 	br	24924 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   248d4:	e0bfff17 	ldw	r2,-4(fp)
   248d8:	10800017 	ldw	r2,0(r2)
   248dc:	e0fffd17 	ldw	r3,-12(fp)
   248e0:	1885883a 	add	r2,r3,r2
   248e4:	e0fffc17 	ldw	r3,-16(fp)
   248e8:	18c00317 	ldw	r3,12(r3)
   248ec:	18c00104 	addi	r3,r3,4
   248f0:	18c00037 	ldwio	r3,0(r3)
   248f4:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   248f8:	e0bfff17 	ldw	r2,-4(fp)
   248fc:	10800017 	ldw	r2,0(r2)
   24900:	10c00044 	addi	r3,r2,1
   24904:	e0bfff17 	ldw	r2,-4(fp)
   24908:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2490c:	e0bfff17 	ldw	r2,-4(fp)
   24910:	10c00017 	ldw	r3,0(r2)
   24914:	e0bffe17 	ldw	r2,-8(fp)
   24918:	1880021e 	bne	r3,r2,24924 <alt_avalon_i2c_rx_read_available+0x78>
   2491c:	e0bffe17 	ldw	r2,-8(fp)
   24920:	1000061e 	bne	r2,zero,2493c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   24924:	e0bffc17 	ldw	r2,-16(fp)
   24928:	10800317 	ldw	r2,12(r2)
   2492c:	10800704 	addi	r2,r2,28
   24930:	10800037 	ldwio	r2,0(r2)
   24934:	103fe71e 	bne	r2,zero,248d4 <__alt_data_end+0xfffe48d4>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   24938:	00000106 	br	24940 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2493c:	0001883a 	nop
    }
}
   24940:	0001883a 	nop
   24944:	e037883a 	mov	sp,fp
   24948:	df000017 	ldw	fp,0(sp)
   2494c:	dec00104 	addi	sp,sp,4
   24950:	f800283a 	ret

00024954 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   24954:	defffa04 	addi	sp,sp,-24
   24958:	dfc00515 	stw	ra,20(sp)
   2495c:	df000415 	stw	fp,16(sp)
   24960:	df000404 	addi	fp,sp,16
   24964:	e13ffe15 	stw	r4,-8(fp)
   24968:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   2496c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   24970:	008000b4 	movhi	r2,2
   24974:	10a1a804 	addi	r2,r2,-31072
   24978:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2497c:	00000d06 	br	249b4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   24980:	e0bffd17 	ldw	r2,-12(fp)
   24984:	108002a8 	cmpgeui	r2,r2,10
   24988:	1000021e 	bne	r2,zero,24994 <alt_avalon_i2c_rx_read+0x40>
   2498c:	0109c404 	movi	r4,10000
   24990:	00271800 	call	27180 <alt_busy_sleep>
      if (--timeout == 0)
   24994:	e0bffd17 	ldw	r2,-12(fp)
   24998:	10bfffc4 	addi	r2,r2,-1
   2499c:	e0bffd15 	stw	r2,-12(fp)
   249a0:	e0bffd17 	ldw	r2,-12(fp)
   249a4:	1000031e 	bne	r2,zero,249b4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   249a8:	00bfff84 	movi	r2,-2
   249ac:	e0bffc15 	stw	r2,-16(fp)
        break;
   249b0:	00000506 	br	249c8 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   249b4:	e0bffe17 	ldw	r2,-8(fp)
   249b8:	10800317 	ldw	r2,12(r2)
   249bc:	10800704 	addi	r2,r2,28
   249c0:	10800037 	ldwio	r2,0(r2)
   249c4:	103fee26 	beq	r2,zero,24980 <__alt_data_end+0xfffe4980>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   249c8:	e0bffe17 	ldw	r2,-8(fp)
   249cc:	10800317 	ldw	r2,12(r2)
   249d0:	10800104 	addi	r2,r2,4
   249d4:	10800037 	ldwio	r2,0(r2)
   249d8:	1007883a 	mov	r3,r2
   249dc:	e0bfff17 	ldw	r2,-4(fp)
   249e0:	10c00005 	stb	r3,0(r2)
        
    return status;
   249e4:	e0bffc17 	ldw	r2,-16(fp)
}
   249e8:	e037883a 	mov	sp,fp
   249ec:	dfc00117 	ldw	ra,4(sp)
   249f0:	df000017 	ldw	fp,0(sp)
   249f4:	dec00204 	addi	sp,sp,8
   249f8:	f800283a 	ret

000249fc <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   249fc:	defff804 	addi	sp,sp,-32
   24a00:	dfc00715 	stw	ra,28(sp)
   24a04:	df000615 	stw	fp,24(sp)
   24a08:	df000604 	addi	fp,sp,24
   24a0c:	e13ffc15 	stw	r4,-16(fp)
   24a10:	2809883a 	mov	r4,r5
   24a14:	3007883a 	mov	r3,r6
   24a18:	3805883a 	mov	r2,r7
   24a1c:	e13ffd05 	stb	r4,-12(fp)
   24a20:	e0fffe05 	stb	r3,-8(fp)
   24a24:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   24a28:	0089c404 	movi	r2,10000
   24a2c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   24a30:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   24a34:	00000c06 	br	24a68 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   24a38:	e0bffa17 	ldw	r2,-24(fp)
   24a3c:	108002a8 	cmpgeui	r2,r2,10
   24a40:	1000021e 	bne	r2,zero,24a4c <alt_avalon_i2c_cmd_write+0x50>
   24a44:	0109c404 	movi	r4,10000
   24a48:	00271800 	call	27180 <alt_busy_sleep>
      if (--timeout == 0)
   24a4c:	e0bffa17 	ldw	r2,-24(fp)
   24a50:	10bfffc4 	addi	r2,r2,-1
   24a54:	e0bffa15 	stw	r2,-24(fp)
   24a58:	e0bffa17 	ldw	r2,-24(fp)
   24a5c:	1000021e 	bne	r2,zero,24a68 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   24a60:	00bfff84 	movi	r2,-2
   24a64:	00001906 	br	24acc <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   24a68:	e0bffc17 	ldw	r2,-16(fp)
   24a6c:	10800317 	ldw	r2,12(r2)
   24a70:	10800404 	addi	r2,r2,16
   24a74:	10800037 	ldwio	r2,0(r2)
   24a78:	1080004c 	andi	r2,r2,1
   24a7c:	103fee26 	beq	r2,zero,24a38 <__alt_data_end+0xfffe4a38>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   24a80:	e0bffc17 	ldw	r2,-16(fp)
   24a84:	10800317 	ldw	r2,12(r2)
   24a88:	e13ffd03 	ldbu	r4,-12(fp)
   24a8c:	e0fffe03 	ldbu	r3,-8(fp)
   24a90:	1806927a 	slli	r3,r3,9
   24a94:	20c8b03a 	or	r4,r4,r3
   24a98:	e0ffff03 	ldbu	r3,-4(fp)
   24a9c:	1806923a 	slli	r3,r3,8
   24aa0:	20c6b03a 	or	r3,r4,r3
   24aa4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   24aa8:	e0bffb04 	addi	r2,fp,-20
   24aac:	100b883a 	mov	r5,r2
   24ab0:	e13ffc17 	ldw	r4,-16(fp)
   24ab4:	0024c3c0 	call	24c3c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   24ab8:	e0bffb04 	addi	r2,fp,-20
   24abc:	100b883a 	mov	r5,r2
   24ac0:	e13ffc17 	ldw	r4,-16(fp)
   24ac4:	0024c880 	call	24c88 <alt_avalon_i2c_check_arblost>
    
    return status;
   24ac8:	e0bffb17 	ldw	r2,-20(fp)
}
   24acc:	e037883a 	mov	sp,fp
   24ad0:	dfc00117 	ldw	ra,4(sp)
   24ad4:	df000017 	ldw	fp,0(sp)
   24ad8:	dec00204 	addi	sp,sp,8
   24adc:	f800283a 	ret

00024ae0 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   24ae0:	defffa04 	addi	sp,sp,-24
   24ae4:	dfc00515 	stw	ra,20(sp)
   24ae8:	df000415 	stw	fp,16(sp)
   24aec:	df000404 	addi	fp,sp,16
   24af0:	e13ffd15 	stw	r4,-12(fp)
   24af4:	e17ffe15 	stw	r5,-8(fp)
   24af8:	3005883a 	mov	r2,r6
   24afc:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   24b00:	e0bffd17 	ldw	r2,-12(fp)
   24b04:	10800d17 	ldw	r2,52(r2)
   24b08:	10800058 	cmpnei	r2,r2,1
   24b0c:	10001c1e 	bne	r2,zero,24b80 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   24b10:	e0bffd17 	ldw	r2,-12(fp)
   24b14:	10800917 	ldw	r2,36(r2)
   24b18:	109e0014 	ori	r2,r2,30720
   24b1c:	1004d1fa 	srli	r2,r2,7
   24b20:	1007883a 	mov	r3,r2
   24b24:	00bfff84 	movi	r2,-2
   24b28:	1884703a 	and	r2,r3,r2
   24b2c:	1007883a 	mov	r3,r2
   24b30:	e0bffe17 	ldw	r2,-8(fp)
   24b34:	1884b03a 	or	r2,r3,r2
   24b38:	10803fcc 	andi	r2,r2,255
   24b3c:	e0ffff03 	ldbu	r3,-4(fp)
   24b40:	000f883a 	mov	r7,zero
   24b44:	180d883a 	mov	r6,r3
   24b48:	100b883a 	mov	r5,r2
   24b4c:	e13ffd17 	ldw	r4,-12(fp)
   24b50:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   24b54:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   24b58:	e0bffd17 	ldw	r2,-12(fp)
   24b5c:	10800917 	ldw	r2,36(r2)
   24b60:	10803fcc 	andi	r2,r2,255
   24b64:	000f883a 	mov	r7,zero
   24b68:	000d883a 	mov	r6,zero
   24b6c:	100b883a 	mov	r5,r2
   24b70:	e13ffd17 	ldw	r4,-12(fp)
   24b74:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   24b78:	e0bffc15 	stw	r2,-16(fp)
   24b7c:	00000e06 	br	24bb8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   24b80:	e0bffd17 	ldw	r2,-12(fp)
   24b84:	10800917 	ldw	r2,36(r2)
   24b88:	1085883a 	add	r2,r2,r2
   24b8c:	1007883a 	mov	r3,r2
   24b90:	e0bffe17 	ldw	r2,-8(fp)
   24b94:	1884b03a 	or	r2,r3,r2
   24b98:	10803fcc 	andi	r2,r2,255
   24b9c:	e0ffff03 	ldbu	r3,-4(fp)
   24ba0:	000f883a 	mov	r7,zero
   24ba4:	180d883a 	mov	r6,r3
   24ba8:	100b883a 	mov	r5,r2
   24bac:	e13ffd17 	ldw	r4,-12(fp)
   24bb0:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   24bb4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   24bb8:	e0bffc17 	ldw	r2,-16(fp)
}
   24bbc:	e037883a 	mov	sp,fp
   24bc0:	dfc00117 	ldw	ra,4(sp)
   24bc4:	df000017 	ldw	fp,0(sp)
   24bc8:	dec00204 	addi	sp,sp,8
   24bcc:	f800283a 	ret

00024bd0 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   24bd0:	defffd04 	addi	sp,sp,-12
   24bd4:	df000215 	stw	fp,8(sp)
   24bd8:	df000204 	addi	fp,sp,8
   24bdc:	e13ffe15 	stw	r4,-8(fp)
   24be0:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   24be4:	e0bffe17 	ldw	r2,-8(fp)
   24be8:	10c00917 	ldw	r3,36(r2)
   24bec:	e0bfff17 	ldw	r2,-4(fp)
   24bf0:	10c00015 	stw	r3,0(r2)
}
   24bf4:	0001883a 	nop
   24bf8:	e037883a 	mov	sp,fp
   24bfc:	df000017 	ldw	fp,0(sp)
   24c00:	dec00104 	addi	sp,sp,4
   24c04:	f800283a 	ret

00024c08 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   24c08:	defffd04 	addi	sp,sp,-12
   24c0c:	df000215 	stw	fp,8(sp)
   24c10:	df000204 	addi	fp,sp,8
   24c14:	e13ffe15 	stw	r4,-8(fp)
   24c18:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   24c1c:	e0bffe17 	ldw	r2,-8(fp)
   24c20:	e0ffff17 	ldw	r3,-4(fp)
   24c24:	10c00915 	stw	r3,36(r2)
}
   24c28:	0001883a 	nop
   24c2c:	e037883a 	mov	sp,fp
   24c30:	df000017 	ldw	fp,0(sp)
   24c34:	dec00104 	addi	sp,sp,4
   24c38:	f800283a 	ret

00024c3c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   24c3c:	defffd04 	addi	sp,sp,-12
   24c40:	df000215 	stw	fp,8(sp)
   24c44:	df000204 	addi	fp,sp,8
   24c48:	e13ffe15 	stw	r4,-8(fp)
   24c4c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   24c50:	e0bffe17 	ldw	r2,-8(fp)
   24c54:	10800317 	ldw	r2,12(r2)
   24c58:	10800404 	addi	r2,r2,16
   24c5c:	10800037 	ldwio	r2,0(r2)
   24c60:	1080010c 	andi	r2,r2,4
   24c64:	10000326 	beq	r2,zero,24c74 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   24c68:	e0bfff17 	ldw	r2,-4(fp)
   24c6c:	00fffec4 	movi	r3,-5
   24c70:	10c00015 	stw	r3,0(r2)
    }
}
   24c74:	0001883a 	nop
   24c78:	e037883a 	mov	sp,fp
   24c7c:	df000017 	ldw	fp,0(sp)
   24c80:	dec00104 	addi	sp,sp,4
   24c84:	f800283a 	ret

00024c88 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   24c88:	defffd04 	addi	sp,sp,-12
   24c8c:	df000215 	stw	fp,8(sp)
   24c90:	df000204 	addi	fp,sp,8
   24c94:	e13ffe15 	stw	r4,-8(fp)
   24c98:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   24c9c:	e0bffe17 	ldw	r2,-8(fp)
   24ca0:	10800317 	ldw	r2,12(r2)
   24ca4:	10800404 	addi	r2,r2,16
   24ca8:	10800037 	ldwio	r2,0(r2)
   24cac:	1080020c 	andi	r2,r2,8
   24cb0:	10000326 	beq	r2,zero,24cc0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   24cb4:	e0bfff17 	ldw	r2,-4(fp)
   24cb8:	00fffe84 	movi	r3,-6
   24cbc:	10c00015 	stw	r3,0(r2)
    }
}
   24cc0:	0001883a 	nop
   24cc4:	e037883a 	mov	sp,fp
   24cc8:	df000017 	ldw	fp,0(sp)
   24ccc:	dec00104 	addi	sp,sp,4
   24cd0:	f800283a 	ret

00024cd4 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   24cd4:	defff804 	addi	sp,sp,-32
   24cd8:	dfc00715 	stw	ra,28(sp)
   24cdc:	df000615 	stw	fp,24(sp)
   24ce0:	df000604 	addi	fp,sp,24
   24ce4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   24ce8:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   24cec:	e0bfff17 	ldw	r2,-4(fp)
   24cf0:	10800717 	ldw	r2,28(r2)
   24cf4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   24cf8:	e0bffb17 	ldw	r2,-20(fp)
   24cfc:	10800117 	ldw	r2,4(r2)
   24d00:	10800044 	addi	r2,r2,1
   24d04:	0149c404 	movi	r5,10000
   24d08:	1009883a 	mov	r4,r2
   24d0c:	00209fc0 	call	209fc <__mulsi3>
   24d10:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   24d14:	e0bffd04 	addi	r2,fp,-12
   24d18:	100b883a 	mov	r5,r2
   24d1c:	e13fff17 	ldw	r4,-4(fp)
   24d20:	0025b6c0 	call	25b6c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   24d24:	e0bffd17 	ldw	r2,-12(fp)
   24d28:	100b883a 	mov	r5,r2
   24d2c:	e13fff17 	ldw	r4,-4(fp)
   24d30:	0025aa00 	call	25aa0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   24d34:	e0bffc04 	addi	r2,fp,-16
   24d38:	100b883a 	mov	r5,r2
   24d3c:	e13fff17 	ldw	r4,-4(fp)
   24d40:	0024c3c0 	call	24c3c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   24d44:	e0bffc17 	ldw	r2,-16(fp)
   24d48:	10002226 	beq	r2,zero,24dd4 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   24d4c:	e0bffb17 	ldw	r2,-20(fp)
   24d50:	10800217 	ldw	r2,8(r2)
   24d54:	10001d26 	beq	r2,zero,24dcc <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   24d58:	00000d06 	br	24d90 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   24d5c:	e0bffa17 	ldw	r2,-24(fp)
   24d60:	108002a8 	cmpgeui	r2,r2,10
   24d64:	1000021e 	bne	r2,zero,24d70 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   24d68:	0109c404 	movi	r4,10000
   24d6c:	00271800 	call	27180 <alt_busy_sleep>
              if (--timeout == 0)
   24d70:	e0bffa17 	ldw	r2,-24(fp)
   24d74:	10bfffc4 	addi	r2,r2,-1
   24d78:	e0bffa15 	stw	r2,-24(fp)
   24d7c:	e0bffa17 	ldw	r2,-24(fp)
   24d80:	1000031e 	bne	r2,zero,24d90 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   24d84:	00bfff84 	movi	r2,-2
   24d88:	e0bffc15 	stw	r2,-16(fp)
                 break;
   24d8c:	00000306 	br	24d9c <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   24d90:	e13fff17 	ldw	r4,-4(fp)
   24d94:	00248680 	call	24868 <alt_avalon_i2c_is_busy>
   24d98:	103ff01e 	bne	r2,zero,24d5c <__alt_data_end+0xfffe4d5c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   24d9c:	e0bffb17 	ldw	r2,-20(fp)
   24da0:	10800017 	ldw	r2,0(r2)
   24da4:	e0fffe04 	addi	r3,fp,-8
   24da8:	180f883a 	mov	r7,r3
   24dac:	000d883a 	mov	r6,zero
   24db0:	100b883a 	mov	r5,r2
   24db4:	e13fff17 	ldw	r4,-4(fp)
   24db8:	00248ac0 	call	248ac <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   24dbc:	e13fff17 	ldw	r4,-4(fp)
   24dc0:	00245100 	call	24510 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   24dc4:	e0bffb17 	ldw	r2,-20(fp)
   24dc8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   24dcc:	e0bffc17 	ldw	r2,-16(fp)
   24dd0:	00000a06 	br	24dfc <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   24dd4:	e0bffb17 	ldw	r2,-20(fp)
   24dd8:	10800217 	ldw	r2,8(r2)
   24ddc:	10000626 	beq	r2,zero,24df8 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   24de0:	e0bffd17 	ldw	r2,-12(fp)
   24de4:	100b883a 	mov	r5,r2
   24de8:	e13fff17 	ldw	r4,-4(fp)
   24dec:	0025b080 	call	25b08 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   24df0:	00bffe44 	movi	r2,-7
   24df4:	00000106 	br	24dfc <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   24df8:	0005883a 	mov	r2,zero
}
   24dfc:	e037883a 	mov	sp,fp
   24e00:	dfc00117 	ldw	ra,4(sp)
   24e04:	df000017 	ldw	fp,0(sp)
   24e08:	dec00204 	addi	sp,sp,8
   24e0c:	f800283a 	ret

00024e10 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   24e10:	defff704 	addi	sp,sp,-36
   24e14:	dfc00815 	stw	ra,32(sp)
   24e18:	df000715 	stw	fp,28(sp)
   24e1c:	df000704 	addi	fp,sp,28
   24e20:	e13ffc15 	stw	r4,-16(fp)
   24e24:	e17ffd15 	stw	r5,-12(fp)
   24e28:	e1bffe15 	stw	r6,-8(fp)
   24e2c:	3805883a 	mov	r2,r7
   24e30:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   24e34:	0089c404 	movi	r2,10000
   24e38:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   24e3c:	00002206 	br	24ec8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   24e40:	e0bffb17 	ldw	r2,-20(fp)
   24e44:	108002a8 	cmpgeui	r2,r2,10
   24e48:	1000021e 	bne	r2,zero,24e54 <alt_avalon_i2c_master_tx+0x44>
   24e4c:	0109c404 	movi	r4,10000
   24e50:	00271800 	call	27180 <alt_busy_sleep>
      if (use_interrupts)
   24e54:	e0bfff03 	ldbu	r2,-4(fp)
   24e58:	10000926 	beq	r2,zero,24e80 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   24e5c:	00800044 	movi	r2,1
   24e60:	d8800015 	stw	r2,0(sp)
   24e64:	000f883a 	mov	r7,zero
   24e68:	e1bffe17 	ldw	r6,-8(fp)
   24e6c:	e17ffd17 	ldw	r5,-12(fp)
   24e70:	e13ffc17 	ldw	r4,-16(fp)
   24e74:	00253bc0 	call	253bc <alt_avalon_i2c_master_transmit_using_interrupts>
   24e78:	e0bffa15 	stw	r2,-24(fp)
   24e7c:	00000806 	br	24ea0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   24e80:	00800044 	movi	r2,1
   24e84:	d8800015 	stw	r2,0(sp)
   24e88:	000f883a 	mov	r7,zero
   24e8c:	e1bffe17 	ldw	r6,-8(fp)
   24e90:	e17ffd17 	ldw	r5,-12(fp)
   24e94:	e13ffc17 	ldw	r4,-16(fp)
   24e98:	00251fc0 	call	251fc <alt_avalon_i2c_master_transmit>
   24e9c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   24ea0:	e0bffa17 	ldw	r2,-24(fp)
   24ea4:	10bffea0 	cmpeqi	r2,r2,-6
   24ea8:	1000061e 	bne	r2,zero,24ec4 <alt_avalon_i2c_master_tx+0xb4>
   24eac:	e0bffa17 	ldw	r2,-24(fp)
   24eb0:	10bffee0 	cmpeqi	r2,r2,-5
   24eb4:	1000031e 	bne	r2,zero,24ec4 <alt_avalon_i2c_master_tx+0xb4>
   24eb8:	e0bffa17 	ldw	r2,-24(fp)
   24ebc:	10bffe58 	cmpnei	r2,r2,-7
   24ec0:	1000061e 	bne	r2,zero,24edc <alt_avalon_i2c_master_tx+0xcc>
   24ec4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   24ec8:	e0bffb17 	ldw	r2,-20(fp)
   24ecc:	10ffffc4 	addi	r3,r2,-1
   24ed0:	e0fffb15 	stw	r3,-20(fp)
   24ed4:	103fda1e 	bne	r2,zero,24e40 <__alt_data_end+0xfffe4e40>
   24ed8:	00000106 	br	24ee0 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   24edc:	0001883a 	nop
    }

    return status;
   24ee0:	e0bffa17 	ldw	r2,-24(fp)
}        
   24ee4:	e037883a 	mov	sp,fp
   24ee8:	dfc00117 	ldw	ra,4(sp)
   24eec:	df000017 	ldw	fp,0(sp)
   24ef0:	dec00204 	addi	sp,sp,8
   24ef4:	f800283a 	ret

00024ef8 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   24ef8:	defff704 	addi	sp,sp,-36
   24efc:	dfc00815 	stw	ra,32(sp)
   24f00:	df000715 	stw	fp,28(sp)
   24f04:	df000704 	addi	fp,sp,28
   24f08:	e13ffc15 	stw	r4,-16(fp)
   24f0c:	e17ffd15 	stw	r5,-12(fp)
   24f10:	e1bffe15 	stw	r6,-8(fp)
   24f14:	3805883a 	mov	r2,r7
   24f18:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   24f1c:	0089c404 	movi	r2,10000
   24f20:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   24f24:	e0bfff03 	ldbu	r2,-4(fp)
   24f28:	10003426 	beq	r2,zero,24ffc <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   24f2c:	00001706 	br	24f8c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   24f30:	e0bffb17 	ldw	r2,-20(fp)
   24f34:	108002a8 	cmpgeui	r2,r2,10
   24f38:	1000021e 	bne	r2,zero,24f44 <alt_avalon_i2c_master_rx+0x4c>
   24f3c:	0109c404 	movi	r4,10000
   24f40:	00271800 	call	27180 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   24f44:	00800044 	movi	r2,1
   24f48:	d8800015 	stw	r2,0(sp)
   24f4c:	000f883a 	mov	r7,zero
   24f50:	e1bffe17 	ldw	r6,-8(fp)
   24f54:	e17ffd17 	ldw	r5,-12(fp)
   24f58:	e13ffc17 	ldw	r4,-16(fp)
   24f5c:	00257d80 	call	257d8 <alt_avalon_i2c_master_receive_using_interrupts>
   24f60:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   24f64:	e0bffa17 	ldw	r2,-24(fp)
   24f68:	10bffea0 	cmpeqi	r2,r2,-6
   24f6c:	1000061e 	bne	r2,zero,24f88 <alt_avalon_i2c_master_rx+0x90>
   24f70:	e0bffa17 	ldw	r2,-24(fp)
   24f74:	10bffee0 	cmpeqi	r2,r2,-5
   24f78:	1000031e 	bne	r2,zero,24f88 <alt_avalon_i2c_master_rx+0x90>
   24f7c:	e0bffa17 	ldw	r2,-24(fp)
   24f80:	10bffe58 	cmpnei	r2,r2,-7
   24f84:	1000221e 	bne	r2,zero,25010 <alt_avalon_i2c_master_rx+0x118>
   24f88:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   24f8c:	e0bffb17 	ldw	r2,-20(fp)
   24f90:	10ffffc4 	addi	r3,r2,-1
   24f94:	e0fffb15 	stw	r3,-20(fp)
   24f98:	103fe51e 	bne	r2,zero,24f30 <__alt_data_end+0xfffe4f30>
   24f9c:	00001f06 	br	2501c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   24fa0:	e0bffb17 	ldw	r2,-20(fp)
   24fa4:	108002a8 	cmpgeui	r2,r2,10
   24fa8:	1000021e 	bne	r2,zero,24fb4 <alt_avalon_i2c_master_rx+0xbc>
   24fac:	0109c404 	movi	r4,10000
   24fb0:	00271800 	call	27180 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   24fb4:	00800044 	movi	r2,1
   24fb8:	d8800015 	stw	r2,0(sp)
   24fbc:	000f883a 	mov	r7,zero
   24fc0:	e1bffe17 	ldw	r6,-8(fp)
   24fc4:	e17ffd17 	ldw	r5,-12(fp)
   24fc8:	e13ffc17 	ldw	r4,-16(fp)
   24fcc:	00255c80 	call	255c8 <alt_avalon_i2c_master_receive>
   24fd0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   24fd4:	e0bffa17 	ldw	r2,-24(fp)
   24fd8:	10bffea0 	cmpeqi	r2,r2,-6
   24fdc:	1000061e 	bne	r2,zero,24ff8 <alt_avalon_i2c_master_rx+0x100>
   24fe0:	e0bffa17 	ldw	r2,-24(fp)
   24fe4:	10bffee0 	cmpeqi	r2,r2,-5
   24fe8:	1000031e 	bne	r2,zero,24ff8 <alt_avalon_i2c_master_rx+0x100>
   24fec:	e0bffa17 	ldw	r2,-24(fp)
   24ff0:	10bffe58 	cmpnei	r2,r2,-7
   24ff4:	1000081e 	bne	r2,zero,25018 <alt_avalon_i2c_master_rx+0x120>
   24ff8:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   24ffc:	e0bffb17 	ldw	r2,-20(fp)
   25000:	10ffffc4 	addi	r3,r2,-1
   25004:	e0fffb15 	stw	r3,-20(fp)
   25008:	103fe51e 	bne	r2,zero,24fa0 <__alt_data_end+0xfffe4fa0>
   2500c:	00000306 	br	2501c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   25010:	0001883a 	nop
   25014:	00000106 	br	2501c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   25018:	0001883a 	nop
      }
    }
    
    return status;
   2501c:	e0bffa17 	ldw	r2,-24(fp)
}        
   25020:	e037883a 	mov	sp,fp
   25024:	dfc00117 	ldw	ra,4(sp)
   25028:	df000017 	ldw	fp,0(sp)
   2502c:	dec00204 	addi	sp,sp,8
   25030:	f800283a 	ret

00025034 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   25034:	defff604 	addi	sp,sp,-40
   25038:	dfc00915 	stw	ra,36(sp)
   2503c:	df000815 	stw	fp,32(sp)
   25040:	df000804 	addi	fp,sp,32
   25044:	e13ffb15 	stw	r4,-20(fp)
   25048:	e17ffc15 	stw	r5,-16(fp)
   2504c:	e1bffd15 	stw	r6,-12(fp)
   25050:	e1fffe15 	stw	r7,-8(fp)
   25054:	e0800317 	ldw	r2,12(fp)
   25058:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2505c:	0089c404 	movi	r2,10000
   25060:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   25064:	e0bfff03 	ldbu	r2,-4(fp)
   25068:	10005626 	beq	r2,zero,251c4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   2506c:	00002806 	br	25110 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   25070:	e0bffa17 	ldw	r2,-24(fp)
   25074:	108002a8 	cmpgeui	r2,r2,10
   25078:	1000021e 	bne	r2,zero,25084 <alt_avalon_i2c_master_tx_rx+0x50>
   2507c:	0109c404 	movi	r4,10000
   25080:	00271800 	call	27180 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   25084:	d8000015 	stw	zero,0(sp)
   25088:	000f883a 	mov	r7,zero
   2508c:	e1bffd17 	ldw	r6,-12(fp)
   25090:	e17ffc17 	ldw	r5,-16(fp)
   25094:	e13ffb17 	ldw	r4,-20(fp)
   25098:	00253bc0 	call	253bc <alt_avalon_i2c_master_transmit_using_interrupts>
   2509c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   250a0:	e0bff917 	ldw	r2,-28(fp)
   250a4:	10bffea0 	cmpeqi	r2,r2,-6
   250a8:	1000191e 	bne	r2,zero,25110 <alt_avalon_i2c_master_tx_rx+0xdc>
   250ac:	e0bff917 	ldw	r2,-28(fp)
   250b0:	10bffee0 	cmpeqi	r2,r2,-5
   250b4:	1000161e 	bne	r2,zero,25110 <alt_avalon_i2c_master_tx_rx+0xdc>
   250b8:	e0bff917 	ldw	r2,-28(fp)
   250bc:	10bffe58 	cmpnei	r2,r2,-7
   250c0:	1000011e 	bne	r2,zero,250c8 <alt_avalon_i2c_master_tx_rx+0x94>
   250c4:	00001206 	br	25110 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   250c8:	00800044 	movi	r2,1
   250cc:	d8800015 	stw	r2,0(sp)
   250d0:	01c00044 	movi	r7,1
   250d4:	e1800217 	ldw	r6,8(fp)
   250d8:	e17ffe17 	ldw	r5,-8(fp)
   250dc:	e13ffb17 	ldw	r4,-20(fp)
   250e0:	00257d80 	call	257d8 <alt_avalon_i2c_master_receive_using_interrupts>
   250e4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   250e8:	e0bff917 	ldw	r2,-28(fp)
   250ec:	10bffea0 	cmpeqi	r2,r2,-6
   250f0:	1000061e 	bne	r2,zero,2510c <alt_avalon_i2c_master_tx_rx+0xd8>
   250f4:	e0bff917 	ldw	r2,-28(fp)
   250f8:	10bffee0 	cmpeqi	r2,r2,-5
   250fc:	1000031e 	bne	r2,zero,2510c <alt_avalon_i2c_master_tx_rx+0xd8>
   25100:	e0bff917 	ldw	r2,-28(fp)
   25104:	10bffe58 	cmpnei	r2,r2,-7
   25108:	1000331e 	bne	r2,zero,251d8 <alt_avalon_i2c_master_tx_rx+0x1a4>
   2510c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   25110:	e0bffa17 	ldw	r2,-24(fp)
   25114:	10ffffc4 	addi	r3,r2,-1
   25118:	e0fffa15 	stw	r3,-24(fp)
   2511c:	103fd41e 	bne	r2,zero,25070 <__alt_data_end+0xfffe5070>
   25120:	00003006 	br	251e4 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   25124:	e0bffa17 	ldw	r2,-24(fp)
   25128:	108002a8 	cmpgeui	r2,r2,10
   2512c:	1000021e 	bne	r2,zero,25138 <alt_avalon_i2c_master_tx_rx+0x104>
   25130:	0109c404 	movi	r4,10000
   25134:	00271800 	call	27180 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   25138:	d8000015 	stw	zero,0(sp)
   2513c:	000f883a 	mov	r7,zero
   25140:	e1bffd17 	ldw	r6,-12(fp)
   25144:	e17ffc17 	ldw	r5,-16(fp)
   25148:	e13ffb17 	ldw	r4,-20(fp)
   2514c:	00251fc0 	call	251fc <alt_avalon_i2c_master_transmit>
   25150:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   25154:	e0bff917 	ldw	r2,-28(fp)
   25158:	10bffea0 	cmpeqi	r2,r2,-6
   2515c:	1000191e 	bne	r2,zero,251c4 <alt_avalon_i2c_master_tx_rx+0x190>
   25160:	e0bff917 	ldw	r2,-28(fp)
   25164:	10bffee0 	cmpeqi	r2,r2,-5
   25168:	1000161e 	bne	r2,zero,251c4 <alt_avalon_i2c_master_tx_rx+0x190>
   2516c:	e0bff917 	ldw	r2,-28(fp)
   25170:	10bffe58 	cmpnei	r2,r2,-7
   25174:	1000011e 	bne	r2,zero,2517c <alt_avalon_i2c_master_tx_rx+0x148>
   25178:	00001206 	br	251c4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2517c:	00800044 	movi	r2,1
   25180:	d8800015 	stw	r2,0(sp)
   25184:	01c00044 	movi	r7,1
   25188:	e1800217 	ldw	r6,8(fp)
   2518c:	e17ffe17 	ldw	r5,-8(fp)
   25190:	e13ffb17 	ldw	r4,-20(fp)
   25194:	00255c80 	call	255c8 <alt_avalon_i2c_master_receive>
   25198:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2519c:	e0bff917 	ldw	r2,-28(fp)
   251a0:	10bffea0 	cmpeqi	r2,r2,-6
   251a4:	1000061e 	bne	r2,zero,251c0 <alt_avalon_i2c_master_tx_rx+0x18c>
   251a8:	e0bff917 	ldw	r2,-28(fp)
   251ac:	10bffee0 	cmpeqi	r2,r2,-5
   251b0:	1000031e 	bne	r2,zero,251c0 <alt_avalon_i2c_master_tx_rx+0x18c>
   251b4:	e0bff917 	ldw	r2,-28(fp)
   251b8:	10bffe58 	cmpnei	r2,r2,-7
   251bc:	1000081e 	bne	r2,zero,251e0 <alt_avalon_i2c_master_tx_rx+0x1ac>
   251c0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   251c4:	e0bffa17 	ldw	r2,-24(fp)
   251c8:	10ffffc4 	addi	r3,r2,-1
   251cc:	e0fffa15 	stw	r3,-24(fp)
   251d0:	103fd41e 	bne	r2,zero,25124 <__alt_data_end+0xfffe5124>
   251d4:	00000306 	br	251e4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   251d8:	0001883a 	nop
   251dc:	00000106 	br	251e4 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   251e0:	0001883a 	nop
      }
    }
    
    return status;
   251e4:	e0bff917 	ldw	r2,-28(fp)
}                                       
   251e8:	e037883a 	mov	sp,fp
   251ec:	dfc00117 	ldw	ra,4(sp)
   251f0:	df000017 	ldw	fp,0(sp)
   251f4:	dec00204 	addi	sp,sp,8
   251f8:	f800283a 	ret

000251fc <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   251fc:	defff704 	addi	sp,sp,-36
   25200:	dfc00815 	stw	ra,32(sp)
   25204:	df000715 	stw	fp,28(sp)
   25208:	df000704 	addi	fp,sp,28
   2520c:	e13ffb15 	stw	r4,-20(fp)
   25210:	e17ffc15 	stw	r5,-16(fp)
   25214:	e1bffd15 	stw	r6,-12(fp)
   25218:	3807883a 	mov	r3,r7
   2521c:	e0800217 	ldw	r2,8(fp)
   25220:	e0fffe05 	stb	r3,-8(fp)
   25224:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   25228:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   2522c:	0149c404 	movi	r5,10000
   25230:	e13ffd17 	ldw	r4,-12(fp)
   25234:	00209fc0 	call	209fc <__mulsi3>
   25238:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   2523c:	e0bffd17 	ldw	r2,-12(fp)
   25240:	1000021e 	bne	r2,zero,2524c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   25244:	0005883a 	mov	r2,zero
   25248:	00005706 	br	253a8 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2524c:	e0bffe03 	ldbu	r2,-8(fp)
   25250:	10000a1e 	bne	r2,zero,2527c <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   25254:	e13ffb17 	ldw	r4,-20(fp)
   25258:	00244780 	call	24478 <alt_avalon_i2c_enable>
   2525c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   25260:	e0bffa17 	ldw	r2,-24(fp)
   25264:	10000226 	beq	r2,zero,25270 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   25268:	e0bffa17 	ldw	r2,-24(fp)
   2526c:	00004e06 	br	253a8 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   25270:	01400704 	movi	r5,28
   25274:	e13ffb17 	ldw	r4,-20(fp)
   25278:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2527c:	e0bffe03 	ldbu	r2,-8(fp)
   25280:	100d883a 	mov	r6,r2
   25284:	000b883a 	mov	r5,zero
   25288:	e13ffb17 	ldw	r4,-20(fp)
   2528c:	0024ae00 	call	24ae0 <alt_avalon_i2c_send_address>
   25290:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   25294:	e0bffa17 	ldw	r2,-24(fp)
   25298:	1000271e 	bne	r2,zero,25338 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2529c:	00000f06 	br	252dc <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   252a0:	e0bffc17 	ldw	r2,-16(fp)
   252a4:	10800003 	ldbu	r2,0(r2)
   252a8:	10803fcc 	andi	r2,r2,255
   252ac:	000f883a 	mov	r7,zero
   252b0:	000d883a 	mov	r6,zero
   252b4:	100b883a 	mov	r5,r2
   252b8:	e13ffb17 	ldw	r4,-20(fp)
   252bc:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   252c0:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   252c4:	e0bffc17 	ldw	r2,-16(fp)
   252c8:	10800044 	addi	r2,r2,1
   252cc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   252d0:	e0bffd17 	ldw	r2,-12(fp)
   252d4:	10bfffc4 	addi	r2,r2,-1
   252d8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   252dc:	e0bffd17 	ldw	r2,-12(fp)
   252e0:	108000b0 	cmpltui	r2,r2,2
   252e4:	1000021e 	bne	r2,zero,252f0 <alt_avalon_i2c_master_transmit+0xf4>
   252e8:	e0bffa17 	ldw	r2,-24(fp)
   252ec:	103fec26 	beq	r2,zero,252a0 <__alt_data_end+0xfffe52a0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   252f0:	e0bffa17 	ldw	r2,-24(fp)
   252f4:	1000101e 	bne	r2,zero,25338 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   252f8:	e0bffc17 	ldw	r2,-16(fp)
   252fc:	10800003 	ldbu	r2,0(r2)
   25300:	10803fcc 	andi	r2,r2,255
   25304:	e0ffff03 	ldbu	r3,-4(fp)
   25308:	180f883a 	mov	r7,r3
   2530c:	000d883a 	mov	r6,zero
   25310:	100b883a 	mov	r5,r2
   25314:	e13ffb17 	ldw	r4,-20(fp)
   25318:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   2531c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   25320:	e0bffc17 	ldw	r2,-16(fp)
   25324:	10800044 	addi	r2,r2,1
   25328:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2532c:	e0bffd17 	ldw	r2,-12(fp)
   25330:	10bfffc4 	addi	r2,r2,-1
   25334:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   25338:	e0bfff03 	ldbu	r2,-4(fp)
   2533c:	1000101e 	bne	r2,zero,25380 <alt_avalon_i2c_master_transmit+0x184>
   25340:	e0bffa17 	ldw	r2,-24(fp)
   25344:	10001726 	beq	r2,zero,253a4 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   25348:	00000d06 	br	25380 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2534c:	e0bff917 	ldw	r2,-28(fp)
   25350:	108002a8 	cmpgeui	r2,r2,10
   25354:	1000021e 	bne	r2,zero,25360 <alt_avalon_i2c_master_transmit+0x164>
   25358:	0109c404 	movi	r4,10000
   2535c:	00271800 	call	27180 <alt_busy_sleep>
            if (--timeout == 0)
   25360:	e0bff917 	ldw	r2,-28(fp)
   25364:	10bfffc4 	addi	r2,r2,-1
   25368:	e0bff915 	stw	r2,-28(fp)
   2536c:	e0bff917 	ldw	r2,-28(fp)
   25370:	1000031e 	bne	r2,zero,25380 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   25374:	00bfff84 	movi	r2,-2
   25378:	e0bffa15 	stw	r2,-24(fp)
               break;
   2537c:	00000306 	br	2538c <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   25380:	e13ffb17 	ldw	r4,-20(fp)
   25384:	00248680 	call	24868 <alt_avalon_i2c_is_busy>
   25388:	103ff01e 	bne	r2,zero,2534c <__alt_data_end+0xfffe534c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   2538c:	e0bffa04 	addi	r2,fp,-24
   25390:	100b883a 	mov	r5,r2
   25394:	e13ffb17 	ldw	r4,-20(fp)
   25398:	0024c3c0 	call	24c3c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2539c:	e13ffb17 	ldw	r4,-20(fp)
   253a0:	00245100 	call	24510 <alt_avalon_i2c_disable>
    }


    return status;
   253a4:	e0bffa17 	ldw	r2,-24(fp)
}
   253a8:	e037883a 	mov	sp,fp
   253ac:	dfc00117 	ldw	ra,4(sp)
   253b0:	df000017 	ldw	fp,0(sp)
   253b4:	dec00204 	addi	sp,sp,8
   253b8:	f800283a 	ret

000253bc <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   253bc:	defff604 	addi	sp,sp,-40
   253c0:	dfc00915 	stw	ra,36(sp)
   253c4:	df000815 	stw	fp,32(sp)
   253c8:	df000804 	addi	fp,sp,32
   253cc:	e13ffb15 	stw	r4,-20(fp)
   253d0:	e17ffc15 	stw	r5,-16(fp)
   253d4:	e1bffd15 	stw	r6,-12(fp)
   253d8:	3807883a 	mov	r3,r7
   253dc:	e0800217 	ldw	r2,8(fp)
   253e0:	e0fffe05 	stb	r3,-8(fp)
   253e4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   253e8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   253ec:	0149c404 	movi	r5,10000
   253f0:	e13ffd17 	ldw	r4,-12(fp)
   253f4:	00209fc0 	call	209fc <__mulsi3>
   253f8:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   253fc:	e0bffb17 	ldw	r2,-20(fp)
   25400:	10800717 	ldw	r2,28(r2)
   25404:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   25408:	e0bffd17 	ldw	r2,-12(fp)
   2540c:	1000021e 	bne	r2,zero,25418 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   25410:	0005883a 	mov	r2,zero
   25414:	00006706 	br	255b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   25418:	e0bffb17 	ldw	r2,-20(fp)
   2541c:	10c00617 	ldw	r3,24(r2)
   25420:	008000b4 	movhi	r2,2
   25424:	10903f04 	addi	r2,r2,16636
   25428:	18800226 	beq	r3,r2,25434 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2542c:	00bfff44 	movi	r2,-3
   25430:	00006006 	br	255b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   25434:	e0bffe03 	ldbu	r2,-8(fp)
   25438:	10000a1e 	bne	r2,zero,25464 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2543c:	e13ffb17 	ldw	r4,-20(fp)
   25440:	00244780 	call	24478 <alt_avalon_i2c_enable>
   25444:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   25448:	e0bff817 	ldw	r2,-32(fp)
   2544c:	10000226 	beq	r2,zero,25458 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   25450:	e0bff817 	ldw	r2,-32(fp)
   25454:	00005706 	br	255b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   25458:	01400704 	movi	r5,28
   2545c:	e13ffb17 	ldw	r4,-20(fp)
   25460:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   25464:	e0bffe03 	ldbu	r2,-8(fp)
   25468:	100d883a 	mov	r6,r2
   2546c:	000b883a 	mov	r5,zero
   25470:	e13ffb17 	ldw	r4,-20(fp)
   25474:	0024ae00 	call	24ae0 <alt_avalon_i2c_send_address>
   25478:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   2547c:	e0bff817 	ldw	r2,-32(fp)
   25480:	1000271e 	bne	r2,zero,25520 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   25484:	00000f06 	br	254c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   25488:	e0bffc17 	ldw	r2,-16(fp)
   2548c:	10800003 	ldbu	r2,0(r2)
   25490:	10803fcc 	andi	r2,r2,255
   25494:	000f883a 	mov	r7,zero
   25498:	000d883a 	mov	r6,zero
   2549c:	100b883a 	mov	r5,r2
   254a0:	e13ffb17 	ldw	r4,-20(fp)
   254a4:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   254a8:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   254ac:	e0bffc17 	ldw	r2,-16(fp)
   254b0:	10800044 	addi	r2,r2,1
   254b4:	e0bffc15 	stw	r2,-16(fp)
            --size;
   254b8:	e0bffd17 	ldw	r2,-12(fp)
   254bc:	10bfffc4 	addi	r2,r2,-1
   254c0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   254c4:	e0bffd17 	ldw	r2,-12(fp)
   254c8:	108000b0 	cmpltui	r2,r2,2
   254cc:	1000021e 	bne	r2,zero,254d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   254d0:	e0bff817 	ldw	r2,-32(fp)
   254d4:	103fec26 	beq	r2,zero,25488 <__alt_data_end+0xfffe5488>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   254d8:	e0bff817 	ldw	r2,-32(fp)
   254dc:	1000101e 	bne	r2,zero,25520 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   254e0:	e0bffc17 	ldw	r2,-16(fp)
   254e4:	10800003 	ldbu	r2,0(r2)
   254e8:	10803fcc 	andi	r2,r2,255
   254ec:	e0ffff03 	ldbu	r3,-4(fp)
   254f0:	180f883a 	mov	r7,r3
   254f4:	000d883a 	mov	r6,zero
   254f8:	100b883a 	mov	r5,r2
   254fc:	e13ffb17 	ldw	r4,-20(fp)
   25500:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   25504:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   25508:	e0bffc17 	ldw	r2,-16(fp)
   2550c:	10800044 	addi	r2,r2,1
   25510:	e0bffc15 	stw	r2,-16(fp)
            --size;
   25514:	e0bffd17 	ldw	r2,-12(fp)
   25518:	10bfffc4 	addi	r2,r2,-1
   2551c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   25520:	e0bff817 	ldw	r2,-32(fp)
   25524:	10001426 	beq	r2,zero,25578 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   25528:	00000d06 	br	25560 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   2552c:	e0bff917 	ldw	r2,-28(fp)
   25530:	108002a8 	cmpgeui	r2,r2,10
   25534:	1000021e 	bne	r2,zero,25540 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   25538:	0109c404 	movi	r4,10000
   2553c:	00271800 	call	27180 <alt_busy_sleep>
            if (--timeout == 0)
   25540:	e0bff917 	ldw	r2,-28(fp)
   25544:	10bfffc4 	addi	r2,r2,-1
   25548:	e0bff915 	stw	r2,-28(fp)
   2554c:	e0bff917 	ldw	r2,-28(fp)
   25550:	1000031e 	bne	r2,zero,25560 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   25554:	00bfff84 	movi	r2,-2
   25558:	e0bff815 	stw	r2,-32(fp)
               break;
   2555c:	00000306 	br	2556c <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   25560:	e13ffb17 	ldw	r4,-20(fp)
   25564:	00248680 	call	24868 <alt_avalon_i2c_is_busy>
   25568:	103ff01e 	bne	r2,zero,2552c <__alt_data_end+0xfffe552c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2556c:	e13ffb17 	ldw	r4,-20(fp)
   25570:	00245100 	call	24510 <alt_avalon_i2c_disable>
   25574:	00000e06 	br	255b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   25578:	e0bfff03 	ldbu	r2,-4(fp)
   2557c:	10000c26 	beq	r2,zero,255b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   25580:	01400704 	movi	r5,28
   25584:	e13ffb17 	ldw	r4,-20(fp)
   25588:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   2558c:	000b883a 	mov	r5,zero
   25590:	e13ffb17 	ldw	r4,-20(fp)
   25594:	0025cac0 	call	25cac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   25598:	e0bffa17 	ldw	r2,-24(fp)
   2559c:	00c00044 	movi	r3,1
   255a0:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   255a4:	01400044 	movi	r5,1
   255a8:	e13ffb17 	ldw	r4,-20(fp)
   255ac:	0025b080 	call	25b08 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   255b0:	e0bff817 	ldw	r2,-32(fp)
}
   255b4:	e037883a 	mov	sp,fp
   255b8:	dfc00117 	ldw	ra,4(sp)
   255bc:	df000017 	ldw	fp,0(sp)
   255c0:	dec00204 	addi	sp,sp,8
   255c4:	f800283a 	ret

000255c8 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   255c8:	defff404 	addi	sp,sp,-48
   255cc:	dfc00b15 	stw	ra,44(sp)
   255d0:	df000a15 	stw	fp,40(sp)
   255d4:	df000a04 	addi	fp,sp,40
   255d8:	e13ffb15 	stw	r4,-20(fp)
   255dc:	e17ffc15 	stw	r5,-16(fp)
   255e0:	e1bffd15 	stw	r6,-12(fp)
   255e4:	3807883a 	mov	r3,r7
   255e8:	e0800217 	ldw	r2,8(fp)
   255ec:	e0fffe05 	stb	r3,-8(fp)
   255f0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   255f4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   255f8:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   255fc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   25600:	e0bffd17 	ldw	r2,-12(fp)
   25604:	1000021e 	bne	r2,zero,25610 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   25608:	0005883a 	mov	r2,zero
   2560c:	00006d06 	br	257c4 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   25610:	e0bffe03 	ldbu	r2,-8(fp)
   25614:	10000a1e 	bne	r2,zero,25640 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   25618:	e13ffb17 	ldw	r4,-20(fp)
   2561c:	00244780 	call	24478 <alt_avalon_i2c_enable>
   25620:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   25624:	e0bff917 	ldw	r2,-28(fp)
   25628:	10000226 	beq	r2,zero,25634 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   2562c:	e0bff917 	ldw	r2,-28(fp)
   25630:	00006406 	br	257c4 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   25634:	01400704 	movi	r5,28
   25638:	e13ffb17 	ldw	r4,-20(fp)
   2563c:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   25640:	e0bffe03 	ldbu	r2,-8(fp)
   25644:	100d883a 	mov	r6,r2
   25648:	01400044 	movi	r5,1
   2564c:	e13ffb17 	ldw	r4,-20(fp)
   25650:	0024ae00 	call	24ae0 <alt_avalon_i2c_send_address>
   25654:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   25658:	e0bff917 	ldw	r2,-28(fp)
   2565c:	1000341e 	bne	r2,zero,25730 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   25660:	00001906 	br	256c8 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   25664:	000f883a 	mov	r7,zero
   25668:	000d883a 	mov	r6,zero
   2566c:	000b883a 	mov	r5,zero
   25670:	e13ffb17 	ldw	r4,-20(fp)
   25674:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   25678:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   2567c:	e0bff817 	ldw	r2,-32(fp)
   25680:	10800044 	addi	r2,r2,1
   25684:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   25688:	e0bff917 	ldw	r2,-28(fp)
   2568c:	10000e1e 	bne	r2,zero,256c8 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   25690:	e0bffa04 	addi	r2,fp,-24
   25694:	100f883a 	mov	r7,r2
   25698:	000d883a 	mov	r6,zero
   2569c:	e17ffc17 	ldw	r5,-16(fp)
   256a0:	e13ffb17 	ldw	r4,-20(fp)
   256a4:	00248ac0 	call	248ac <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   256a8:	e0bffa17 	ldw	r2,-24(fp)
   256ac:	e0fffc17 	ldw	r3,-16(fp)
   256b0:	1885883a 	add	r2,r3,r2
   256b4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   256b8:	e0bffa17 	ldw	r2,-24(fp)
   256bc:	e0fff717 	ldw	r3,-36(fp)
   256c0:	1885883a 	add	r2,r3,r2
   256c4:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   256c8:	e0bffd17 	ldw	r2,-12(fp)
   256cc:	10bfffc4 	addi	r2,r2,-1
   256d0:	e0fff817 	ldw	r3,-32(fp)
   256d4:	1880022e 	bgeu	r3,r2,256e0 <alt_avalon_i2c_master_receive+0x118>
   256d8:	e0bff917 	ldw	r2,-28(fp)
   256dc:	103fe126 	beq	r2,zero,25664 <__alt_data_end+0xfffe5664>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   256e0:	e0bff917 	ldw	r2,-28(fp)
   256e4:	1000121e 	bne	r2,zero,25730 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   256e8:	e0bfff03 	ldbu	r2,-4(fp)
   256ec:	100f883a 	mov	r7,r2
   256f0:	000d883a 	mov	r6,zero
   256f4:	000b883a 	mov	r5,zero
   256f8:	e13ffb17 	ldw	r4,-20(fp)
   256fc:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   25700:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   25704:	00000a06 	br	25730 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   25708:	e17ffc17 	ldw	r5,-16(fp)
   2570c:	e13ffb17 	ldw	r4,-20(fp)
   25710:	00249540 	call	24954 <alt_avalon_i2c_rx_read>
   25714:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   25718:	e0bffc17 	ldw	r2,-16(fp)
   2571c:	10800044 	addi	r2,r2,1
   25720:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   25724:	e0bff717 	ldw	r2,-36(fp)
   25728:	10800044 	addi	r2,r2,1
   2572c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   25730:	e0fff717 	ldw	r3,-36(fp)
   25734:	e0bffd17 	ldw	r2,-12(fp)
   25738:	1880022e 	bgeu	r3,r2,25744 <alt_avalon_i2c_master_receive+0x17c>
   2573c:	e0bff917 	ldw	r2,-28(fp)
   25740:	103ff126 	beq	r2,zero,25708 <__alt_data_end+0xfffe5708>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   25744:	e0bfff03 	ldbu	r2,-4(fp)
   25748:	1000021e 	bne	r2,zero,25754 <alt_avalon_i2c_master_receive+0x18c>
   2574c:	e0bff917 	ldw	r2,-28(fp)
   25750:	10001b26 	beq	r2,zero,257c0 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   25754:	0149c404 	movi	r5,10000
   25758:	e13ffd17 	ldw	r4,-12(fp)
   2575c:	00209fc0 	call	209fc <__mulsi3>
   25760:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   25764:	00000d06 	br	2579c <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   25768:	e0bff617 	ldw	r2,-40(fp)
   2576c:	108002a8 	cmpgeui	r2,r2,10
   25770:	1000021e 	bne	r2,zero,2577c <alt_avalon_i2c_master_receive+0x1b4>
   25774:	0109c404 	movi	r4,10000
   25778:	00271800 	call	27180 <alt_busy_sleep>
            if (--timeout == 0)
   2577c:	e0bff617 	ldw	r2,-40(fp)
   25780:	10bfffc4 	addi	r2,r2,-1
   25784:	e0bff615 	stw	r2,-40(fp)
   25788:	e0bff617 	ldw	r2,-40(fp)
   2578c:	1000031e 	bne	r2,zero,2579c <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   25790:	00bfff84 	movi	r2,-2
   25794:	e0bff915 	stw	r2,-28(fp)
               break;
   25798:	00000306 	br	257a8 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2579c:	e13ffb17 	ldw	r4,-20(fp)
   257a0:	00248680 	call	24868 <alt_avalon_i2c_is_busy>
   257a4:	103ff01e 	bne	r2,zero,25768 <__alt_data_end+0xfffe5768>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   257a8:	e0bff904 	addi	r2,fp,-28
   257ac:	100b883a 	mov	r5,r2
   257b0:	e13ffb17 	ldw	r4,-20(fp)
   257b4:	0024c3c0 	call	24c3c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   257b8:	e13ffb17 	ldw	r4,-20(fp)
   257bc:	00245100 	call	24510 <alt_avalon_i2c_disable>
    }

    return status;
   257c0:	e0bff917 	ldw	r2,-28(fp)
}
   257c4:	e037883a 	mov	sp,fp
   257c8:	dfc00117 	ldw	ra,4(sp)
   257cc:	df000017 	ldw	fp,0(sp)
   257d0:	dec00204 	addi	sp,sp,8
   257d4:	f800283a 	ret

000257d8 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   257d8:	defff504 	addi	sp,sp,-44
   257dc:	dfc00a15 	stw	ra,40(sp)
   257e0:	df000915 	stw	fp,36(sp)
   257e4:	df000904 	addi	fp,sp,36
   257e8:	e13ffb15 	stw	r4,-20(fp)
   257ec:	e17ffc15 	stw	r5,-16(fp)
   257f0:	e1bffd15 	stw	r6,-12(fp)
   257f4:	3807883a 	mov	r3,r7
   257f8:	e0800217 	ldw	r2,8(fp)
   257fc:	e0fffe05 	stb	r3,-8(fp)
   25800:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   25804:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   25808:	e0bffb17 	ldw	r2,-20(fp)
   2580c:	10800717 	ldw	r2,28(r2)
   25810:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   25814:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   25818:	e0bffd17 	ldw	r2,-12(fp)
   2581c:	1000021e 	bne	r2,zero,25828 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   25820:	0005883a 	mov	r2,zero
   25824:	00006306 	br	259b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   25828:	e0bffb17 	ldw	r2,-20(fp)
   2582c:	10c00617 	ldw	r3,24(r2)
   25830:	008000b4 	movhi	r2,2
   25834:	10903f04 	addi	r2,r2,16636
   25838:	18800226 	beq	r3,r2,25844 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2583c:	00bfff44 	movi	r2,-3
   25840:	00005c06 	br	259b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   25844:	e0bffe03 	ldbu	r2,-8(fp)
   25848:	10000a1e 	bne	r2,zero,25874 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2584c:	e13ffb17 	ldw	r4,-20(fp)
   25850:	00244780 	call	24478 <alt_avalon_i2c_enable>
   25854:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   25858:	e0bff717 	ldw	r2,-36(fp)
   2585c:	10000226 	beq	r2,zero,25868 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   25860:	e0bff717 	ldw	r2,-36(fp)
   25864:	00005306 	br	259b4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   25868:	01400704 	movi	r5,28
   2586c:	e13ffb17 	ldw	r4,-20(fp)
   25870:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   25874:	e0bffe03 	ldbu	r2,-8(fp)
   25878:	100d883a 	mov	r6,r2
   2587c:	01400044 	movi	r5,1
   25880:	e13ffb17 	ldw	r4,-20(fp)
   25884:	0024ae00 	call	24ae0 <alt_avalon_i2c_send_address>
   25888:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2588c:	e0bff717 	ldw	r2,-36(fp)
   25890:	1000191e 	bne	r2,zero,258f8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   25894:	00000906 	br	258bc <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   25898:	000f883a 	mov	r7,zero
   2589c:	000d883a 	mov	r6,zero
   258a0:	000b883a 	mov	r5,zero
   258a4:	e13ffb17 	ldw	r4,-20(fp)
   258a8:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   258ac:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   258b0:	e0bff917 	ldw	r2,-28(fp)
   258b4:	10800044 	addi	r2,r2,1
   258b8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   258bc:	e0bffd17 	ldw	r2,-12(fp)
   258c0:	10bfffc4 	addi	r2,r2,-1
   258c4:	e0fff917 	ldw	r3,-28(fp)
   258c8:	1880022e 	bgeu	r3,r2,258d4 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   258cc:	e0bff717 	ldw	r2,-36(fp)
   258d0:	103ff126 	beq	r2,zero,25898 <__alt_data_end+0xfffe5898>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   258d4:	e0bff717 	ldw	r2,-36(fp)
   258d8:	1000071e 	bne	r2,zero,258f8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   258dc:	e0bfff03 	ldbu	r2,-4(fp)
   258e0:	100f883a 	mov	r7,r2
   258e4:	000d883a 	mov	r6,zero
   258e8:	000b883a 	mov	r5,zero
   258ec:	e13ffb17 	ldw	r4,-20(fp)
   258f0:	00249fc0 	call	249fc <alt_avalon_i2c_cmd_write>
   258f4:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   258f8:	e0bff717 	ldw	r2,-36(fp)
   258fc:	10001826 	beq	r2,zero,25960 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   25900:	0149c404 	movi	r5,10000
   25904:	e13ffd17 	ldw	r4,-12(fp)
   25908:	00209fc0 	call	209fc <__mulsi3>
   2590c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   25910:	00000d06 	br	25948 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   25914:	e0bff817 	ldw	r2,-32(fp)
   25918:	108002a8 	cmpgeui	r2,r2,10
   2591c:	1000021e 	bne	r2,zero,25928 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   25920:	0109c404 	movi	r4,10000
   25924:	00271800 	call	27180 <alt_busy_sleep>
            if (--timeout == 0)
   25928:	e0bff817 	ldw	r2,-32(fp)
   2592c:	10bfffc4 	addi	r2,r2,-1
   25930:	e0bff815 	stw	r2,-32(fp)
   25934:	e0bff817 	ldw	r2,-32(fp)
   25938:	1000031e 	bne	r2,zero,25948 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2593c:	00bfff84 	movi	r2,-2
   25940:	e0bff715 	stw	r2,-36(fp)
               break;
   25944:	00000306 	br	25954 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   25948:	e13ffb17 	ldw	r4,-20(fp)
   2594c:	00248680 	call	24868 <alt_avalon_i2c_is_busy>
   25950:	103ff01e 	bne	r2,zero,25914 <__alt_data_end+0xfffe5914>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   25954:	e13ffb17 	ldw	r4,-20(fp)
   25958:	00245100 	call	24510 <alt_avalon_i2c_disable>
   2595c:	00001406 	br	259b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   25960:	e0bfff03 	ldbu	r2,-4(fp)
   25964:	10001226 	beq	r2,zero,259b0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   25968:	01400704 	movi	r5,28
   2596c:	e13ffb17 	ldw	r4,-20(fp)
   25970:	0025a640 	call	25a64 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   25974:	000b883a 	mov	r5,zero
   25978:	e13ffb17 	ldw	r4,-20(fp)
   2597c:	0025bfc0 	call	25bfc <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   25980:	e0bffa17 	ldw	r2,-24(fp)
   25984:	00c00084 	movi	r3,2
   25988:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   2598c:	e0bffa17 	ldw	r2,-24(fp)
   25990:	e0fffc17 	ldw	r3,-16(fp)
   25994:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   25998:	e0bffa17 	ldw	r2,-24(fp)
   2599c:	e0fffd17 	ldw	r3,-12(fp)
   259a0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   259a4:	01400084 	movi	r5,2
   259a8:	e13ffb17 	ldw	r4,-20(fp)
   259ac:	0025b080 	call	25b08 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   259b0:	e0bff717 	ldw	r2,-36(fp)
}
   259b4:	e037883a 	mov	sp,fp
   259b8:	dfc00117 	ldw	ra,4(sp)
   259bc:	df000017 	ldw	fp,0(sp)
   259c0:	dec00204 	addi	sp,sp,8
   259c4:	f800283a 	ret

000259c8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   259c8:	defffd04 	addi	sp,sp,-12
   259cc:	df000215 	stw	fp,8(sp)
   259d0:	df000204 	addi	fp,sp,8
   259d4:	e13ffe15 	stw	r4,-8(fp)
   259d8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   259dc:	e0bffe17 	ldw	r2,-8(fp)
   259e0:	10800317 	ldw	r2,12(r2)
   259e4:	10800404 	addi	r2,r2,16
   259e8:	10c00037 	ldwio	r3,0(r2)
   259ec:	e0bffe17 	ldw	r2,-8(fp)
   259f0:	10800317 	ldw	r2,12(r2)
   259f4:	10800304 	addi	r2,r2,12
   259f8:	10800037 	ldwio	r2,0(r2)
   259fc:	1884703a 	and	r2,r3,r2
   25a00:	1007883a 	mov	r3,r2
   25a04:	e0bfff17 	ldw	r2,-4(fp)
   25a08:	10c00015 	stw	r3,0(r2)
}
   25a0c:	0001883a 	nop
   25a10:	e037883a 	mov	sp,fp
   25a14:	df000017 	ldw	fp,0(sp)
   25a18:	dec00104 	addi	sp,sp,4
   25a1c:	f800283a 	ret

00025a20 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   25a20:	defffd04 	addi	sp,sp,-12
   25a24:	df000215 	stw	fp,8(sp)
   25a28:	df000204 	addi	fp,sp,8
   25a2c:	e13ffe15 	stw	r4,-8(fp)
   25a30:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   25a34:	e0bffe17 	ldw	r2,-8(fp)
   25a38:	10800317 	ldw	r2,12(r2)
   25a3c:	10800404 	addi	r2,r2,16
   25a40:	10800037 	ldwio	r2,0(r2)
   25a44:	1007883a 	mov	r3,r2
   25a48:	e0bfff17 	ldw	r2,-4(fp)
   25a4c:	10c00015 	stw	r3,0(r2)
}
   25a50:	0001883a 	nop
   25a54:	e037883a 	mov	sp,fp
   25a58:	df000017 	ldw	fp,0(sp)
   25a5c:	dec00104 	addi	sp,sp,4
   25a60:	f800283a 	ret

00025a64 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   25a64:	defffd04 	addi	sp,sp,-12
   25a68:	df000215 	stw	fp,8(sp)
   25a6c:	df000204 	addi	fp,sp,8
   25a70:	e13ffe15 	stw	r4,-8(fp)
   25a74:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   25a78:	e0bffe17 	ldw	r2,-8(fp)
   25a7c:	10800317 	ldw	r2,12(r2)
   25a80:	10800404 	addi	r2,r2,16
   25a84:	e0ffff17 	ldw	r3,-4(fp)
   25a88:	10c00035 	stwio	r3,0(r2)
}
   25a8c:	0001883a 	nop
   25a90:	e037883a 	mov	sp,fp
   25a94:	df000017 	ldw	fp,0(sp)
   25a98:	dec00104 	addi	sp,sp,4
   25a9c:	f800283a 	ret

00025aa0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   25aa0:	defffb04 	addi	sp,sp,-20
   25aa4:	dfc00415 	stw	ra,16(sp)
   25aa8:	df000315 	stw	fp,12(sp)
   25aac:	df000304 	addi	fp,sp,12
   25ab0:	e13ffe15 	stw	r4,-8(fp)
   25ab4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   25ab8:	e17ffd04 	addi	r5,fp,-12
   25abc:	e13ffe17 	ldw	r4,-8(fp)
   25ac0:	0025b6c0 	call	25b6c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   25ac4:	e0bfff17 	ldw	r2,-4(fp)
   25ac8:	0086303a 	nor	r3,zero,r2
   25acc:	e0bffd17 	ldw	r2,-12(fp)
   25ad0:	1884703a 	and	r2,r3,r2
   25ad4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   25ad8:	e0bffe17 	ldw	r2,-8(fp)
   25adc:	10800317 	ldw	r2,12(r2)
   25ae0:	10800304 	addi	r2,r2,12
   25ae4:	e0fffd17 	ldw	r3,-12(fp)
   25ae8:	18c007cc 	andi	r3,r3,31
   25aec:	10c00035 	stwio	r3,0(r2)
}
   25af0:	0001883a 	nop
   25af4:	e037883a 	mov	sp,fp
   25af8:	dfc00117 	ldw	ra,4(sp)
   25afc:	df000017 	ldw	fp,0(sp)
   25b00:	dec00204 	addi	sp,sp,8
   25b04:	f800283a 	ret

00025b08 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   25b08:	defffb04 	addi	sp,sp,-20
   25b0c:	dfc00415 	stw	ra,16(sp)
   25b10:	df000315 	stw	fp,12(sp)
   25b14:	df000304 	addi	fp,sp,12
   25b18:	e13ffe15 	stw	r4,-8(fp)
   25b1c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   25b20:	e17ffd04 	addi	r5,fp,-12
   25b24:	e13ffe17 	ldw	r4,-8(fp)
   25b28:	0025b6c0 	call	25b6c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   25b2c:	e0fffd17 	ldw	r3,-12(fp)
   25b30:	e0bfff17 	ldw	r2,-4(fp)
   25b34:	1884b03a 	or	r2,r3,r2
   25b38:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   25b3c:	e0bffe17 	ldw	r2,-8(fp)
   25b40:	10800317 	ldw	r2,12(r2)
   25b44:	10800304 	addi	r2,r2,12
   25b48:	e0fffd17 	ldw	r3,-12(fp)
   25b4c:	18c007cc 	andi	r3,r3,31
   25b50:	10c00035 	stwio	r3,0(r2)
}
   25b54:	0001883a 	nop
   25b58:	e037883a 	mov	sp,fp
   25b5c:	dfc00117 	ldw	ra,4(sp)
   25b60:	df000017 	ldw	fp,0(sp)
   25b64:	dec00204 	addi	sp,sp,8
   25b68:	f800283a 	ret

00025b6c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   25b6c:	defffd04 	addi	sp,sp,-12
   25b70:	df000215 	stw	fp,8(sp)
   25b74:	df000204 	addi	fp,sp,8
   25b78:	e13ffe15 	stw	r4,-8(fp)
   25b7c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   25b80:	e0bffe17 	ldw	r2,-8(fp)
   25b84:	10800317 	ldw	r2,12(r2)
   25b88:	10800304 	addi	r2,r2,12
   25b8c:	10800037 	ldwio	r2,0(r2)
   25b90:	10c007cc 	andi	r3,r2,31
   25b94:	e0bfff17 	ldw	r2,-4(fp)
   25b98:	10c00015 	stw	r3,0(r2)
}
   25b9c:	0001883a 	nop
   25ba0:	e037883a 	mov	sp,fp
   25ba4:	df000017 	ldw	fp,0(sp)
   25ba8:	dec00104 	addi	sp,sp,4
   25bac:	f800283a 	ret

00025bb0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   25bb0:	defffd04 	addi	sp,sp,-12
   25bb4:	df000215 	stw	fp,8(sp)
   25bb8:	df000204 	addi	fp,sp,8
   25bbc:	e13ffe15 	stw	r4,-8(fp)
   25bc0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   25bc4:	e0bffe17 	ldw	r2,-8(fp)
   25bc8:	10800317 	ldw	r2,12(r2)
   25bcc:	10800204 	addi	r2,r2,8
   25bd0:	10800037 	ldwio	r2,0(r2)
   25bd4:	10800c0c 	andi	r2,r2,48
   25bd8:	1005d13a 	srai	r2,r2,4
   25bdc:	1007883a 	mov	r3,r2
   25be0:	e0bfff17 	ldw	r2,-4(fp)
   25be4:	10c00015 	stw	r3,0(r2)
}
   25be8:	0001883a 	nop
   25bec:	e037883a 	mov	sp,fp
   25bf0:	df000017 	ldw	fp,0(sp)
   25bf4:	dec00104 	addi	sp,sp,4
   25bf8:	f800283a 	ret

00025bfc <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   25bfc:	defffd04 	addi	sp,sp,-12
   25c00:	df000215 	stw	fp,8(sp)
   25c04:	df000204 	addi	fp,sp,8
   25c08:	e13ffe15 	stw	r4,-8(fp)
   25c0c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   25c10:	e0bffe17 	ldw	r2,-8(fp)
   25c14:	10800317 	ldw	r2,12(r2)
   25c18:	10800204 	addi	r2,r2,8
   25c1c:	e0fffe17 	ldw	r3,-8(fp)
   25c20:	18c00317 	ldw	r3,12(r3)
   25c24:	18c00204 	addi	r3,r3,8
   25c28:	18c00037 	ldwio	r3,0(r3)
   25c2c:	1809883a 	mov	r4,r3
   25c30:	00fff3c4 	movi	r3,-49
   25c34:	20c8703a 	and	r4,r4,r3
   25c38:	e0ffff17 	ldw	r3,-4(fp)
   25c3c:	1806913a 	slli	r3,r3,4
   25c40:	18c00c0c 	andi	r3,r3,48
   25c44:	20c6b03a 	or	r3,r4,r3
   25c48:	10c00035 	stwio	r3,0(r2)
}
   25c4c:	0001883a 	nop
   25c50:	e037883a 	mov	sp,fp
   25c54:	df000017 	ldw	fp,0(sp)
   25c58:	dec00104 	addi	sp,sp,4
   25c5c:	f800283a 	ret

00025c60 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   25c60:	defffd04 	addi	sp,sp,-12
   25c64:	df000215 	stw	fp,8(sp)
   25c68:	df000204 	addi	fp,sp,8
   25c6c:	e13ffe15 	stw	r4,-8(fp)
   25c70:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   25c74:	e0bffe17 	ldw	r2,-8(fp)
   25c78:	10800317 	ldw	r2,12(r2)
   25c7c:	10800204 	addi	r2,r2,8
   25c80:	10800037 	ldwio	r2,0(r2)
   25c84:	1080030c 	andi	r2,r2,12
   25c88:	1005d0ba 	srai	r2,r2,2
   25c8c:	1007883a 	mov	r3,r2
   25c90:	e0bfff17 	ldw	r2,-4(fp)
   25c94:	10c00015 	stw	r3,0(r2)
}
   25c98:	0001883a 	nop
   25c9c:	e037883a 	mov	sp,fp
   25ca0:	df000017 	ldw	fp,0(sp)
   25ca4:	dec00104 	addi	sp,sp,4
   25ca8:	f800283a 	ret

00025cac <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   25cac:	defffd04 	addi	sp,sp,-12
   25cb0:	df000215 	stw	fp,8(sp)
   25cb4:	df000204 	addi	fp,sp,8
   25cb8:	e13ffe15 	stw	r4,-8(fp)
   25cbc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   25cc0:	e0bffe17 	ldw	r2,-8(fp)
   25cc4:	10800317 	ldw	r2,12(r2)
   25cc8:	10c00204 	addi	r3,r2,8
   25ccc:	e0bffe17 	ldw	r2,-8(fp)
   25cd0:	10800317 	ldw	r2,12(r2)
   25cd4:	10800204 	addi	r2,r2,8
   25cd8:	10800037 	ldwio	r2,0(r2)
   25cdc:	1009883a 	mov	r4,r2
   25ce0:	00bffcc4 	movi	r2,-13
   25ce4:	2088703a 	and	r4,r4,r2
   25ce8:	e0bfff17 	ldw	r2,-4(fp)
   25cec:	1085883a 	add	r2,r2,r2
   25cf0:	1085883a 	add	r2,r2,r2
   25cf4:	1080030c 	andi	r2,r2,12
   25cf8:	2084b03a 	or	r2,r4,r2
   25cfc:	18800035 	stwio	r2,0(r3)
}
   25d00:	0001883a 	nop
   25d04:	e037883a 	mov	sp,fp
   25d08:	df000017 	ldw	fp,0(sp)
   25d0c:	dec00104 	addi	sp,sp,4
   25d10:	f800283a 	ret

00025d14 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   25d14:	defffa04 	addi	sp,sp,-24
   25d18:	dfc00515 	stw	ra,20(sp)
   25d1c:	df000415 	stw	fp,16(sp)
   25d20:	df000404 	addi	fp,sp,16
   25d24:	e13ffd15 	stw	r4,-12(fp)
   25d28:	e17ffe15 	stw	r5,-8(fp)
   25d2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   25d30:	e0bffd17 	ldw	r2,-12(fp)
   25d34:	10800017 	ldw	r2,0(r2)
   25d38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   25d3c:	e0bffc17 	ldw	r2,-16(fp)
   25d40:	10c00a04 	addi	r3,r2,40
   25d44:	e0bffd17 	ldw	r2,-12(fp)
   25d48:	10800217 	ldw	r2,8(r2)
   25d4c:	100f883a 	mov	r7,r2
   25d50:	e1bfff17 	ldw	r6,-4(fp)
   25d54:	e17ffe17 	ldw	r5,-8(fp)
   25d58:	1809883a 	mov	r4,r3
   25d5c:	002633c0 	call	2633c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   25d60:	e037883a 	mov	sp,fp
   25d64:	dfc00117 	ldw	ra,4(sp)
   25d68:	df000017 	ldw	fp,0(sp)
   25d6c:	dec00204 	addi	sp,sp,8
   25d70:	f800283a 	ret

00025d74 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   25d74:	defffa04 	addi	sp,sp,-24
   25d78:	dfc00515 	stw	ra,20(sp)
   25d7c:	df000415 	stw	fp,16(sp)
   25d80:	df000404 	addi	fp,sp,16
   25d84:	e13ffd15 	stw	r4,-12(fp)
   25d88:	e17ffe15 	stw	r5,-8(fp)
   25d8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   25d90:	e0bffd17 	ldw	r2,-12(fp)
   25d94:	10800017 	ldw	r2,0(r2)
   25d98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   25d9c:	e0bffc17 	ldw	r2,-16(fp)
   25da0:	10c00a04 	addi	r3,r2,40
   25da4:	e0bffd17 	ldw	r2,-12(fp)
   25da8:	10800217 	ldw	r2,8(r2)
   25dac:	100f883a 	mov	r7,r2
   25db0:	e1bfff17 	ldw	r6,-4(fp)
   25db4:	e17ffe17 	ldw	r5,-8(fp)
   25db8:	1809883a 	mov	r4,r3
   25dbc:	00265580 	call	26558 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   25dc0:	e037883a 	mov	sp,fp
   25dc4:	dfc00117 	ldw	ra,4(sp)
   25dc8:	df000017 	ldw	fp,0(sp)
   25dcc:	dec00204 	addi	sp,sp,8
   25dd0:	f800283a 	ret

00025dd4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   25dd4:	defffc04 	addi	sp,sp,-16
   25dd8:	dfc00315 	stw	ra,12(sp)
   25ddc:	df000215 	stw	fp,8(sp)
   25de0:	df000204 	addi	fp,sp,8
   25de4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   25de8:	e0bfff17 	ldw	r2,-4(fp)
   25dec:	10800017 	ldw	r2,0(r2)
   25df0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   25df4:	e0bffe17 	ldw	r2,-8(fp)
   25df8:	10c00a04 	addi	r3,r2,40
   25dfc:	e0bfff17 	ldw	r2,-4(fp)
   25e00:	10800217 	ldw	r2,8(r2)
   25e04:	100b883a 	mov	r5,r2
   25e08:	1809883a 	mov	r4,r3
   25e0c:	00261e40 	call	261e4 <altera_avalon_jtag_uart_close>
}
   25e10:	e037883a 	mov	sp,fp
   25e14:	dfc00117 	ldw	ra,4(sp)
   25e18:	df000017 	ldw	fp,0(sp)
   25e1c:	dec00204 	addi	sp,sp,8
   25e20:	f800283a 	ret

00025e24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   25e24:	defffa04 	addi	sp,sp,-24
   25e28:	dfc00515 	stw	ra,20(sp)
   25e2c:	df000415 	stw	fp,16(sp)
   25e30:	df000404 	addi	fp,sp,16
   25e34:	e13ffd15 	stw	r4,-12(fp)
   25e38:	e17ffe15 	stw	r5,-8(fp)
   25e3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   25e40:	e0bffd17 	ldw	r2,-12(fp)
   25e44:	10800017 	ldw	r2,0(r2)
   25e48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   25e4c:	e0bffc17 	ldw	r2,-16(fp)
   25e50:	10800a04 	addi	r2,r2,40
   25e54:	e1bfff17 	ldw	r6,-4(fp)
   25e58:	e17ffe17 	ldw	r5,-8(fp)
   25e5c:	1009883a 	mov	r4,r2
   25e60:	002624c0 	call	2624c <altera_avalon_jtag_uart_ioctl>
}
   25e64:	e037883a 	mov	sp,fp
   25e68:	dfc00117 	ldw	ra,4(sp)
   25e6c:	df000017 	ldw	fp,0(sp)
   25e70:	dec00204 	addi	sp,sp,8
   25e74:	f800283a 	ret

00025e78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   25e78:	defffa04 	addi	sp,sp,-24
   25e7c:	dfc00515 	stw	ra,20(sp)
   25e80:	df000415 	stw	fp,16(sp)
   25e84:	df000404 	addi	fp,sp,16
   25e88:	e13ffd15 	stw	r4,-12(fp)
   25e8c:	e17ffe15 	stw	r5,-8(fp)
   25e90:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   25e94:	e0bffd17 	ldw	r2,-12(fp)
   25e98:	00c00044 	movi	r3,1
   25e9c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   25ea0:	e0bffd17 	ldw	r2,-12(fp)
   25ea4:	10800017 	ldw	r2,0(r2)
   25ea8:	10800104 	addi	r2,r2,4
   25eac:	1007883a 	mov	r3,r2
   25eb0:	e0bffd17 	ldw	r2,-12(fp)
   25eb4:	10800817 	ldw	r2,32(r2)
   25eb8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   25ebc:	e0bffe17 	ldw	r2,-8(fp)
   25ec0:	e0ffff17 	ldw	r3,-4(fp)
   25ec4:	d8000015 	stw	zero,0(sp)
   25ec8:	e1fffd17 	ldw	r7,-12(fp)
   25ecc:	018000b4 	movhi	r6,2
   25ed0:	3197ce04 	addi	r6,r6,24376
   25ed4:	180b883a 	mov	r5,r3
   25ed8:	1009883a 	mov	r4,r2
   25edc:	00275480 	call	27548 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   25ee0:	e0bffd17 	ldw	r2,-12(fp)
   25ee4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   25ee8:	e0bffd17 	ldw	r2,-12(fp)
   25eec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   25ef0:	d0e6f417 	ldw	r3,-25648(gp)
   25ef4:	e1fffd17 	ldw	r7,-12(fp)
   25ef8:	018000b4 	movhi	r6,2
   25efc:	31985104 	addi	r6,r6,24900
   25f00:	180b883a 	mov	r5,r3
   25f04:	1009883a 	mov	r4,r2
   25f08:	00270540 	call	27054 <alt_alarm_start>
   25f0c:	1000040e 	bge	r2,zero,25f20 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   25f10:	e0fffd17 	ldw	r3,-12(fp)
   25f14:	00a00034 	movhi	r2,32768
   25f18:	10bfffc4 	addi	r2,r2,-1
   25f1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   25f20:	0001883a 	nop
   25f24:	e037883a 	mov	sp,fp
   25f28:	dfc00117 	ldw	ra,4(sp)
   25f2c:	df000017 	ldw	fp,0(sp)
   25f30:	dec00204 	addi	sp,sp,8
   25f34:	f800283a 	ret

00025f38 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   25f38:	defff804 	addi	sp,sp,-32
   25f3c:	df000715 	stw	fp,28(sp)
   25f40:	df000704 	addi	fp,sp,28
   25f44:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   25f48:	e0bfff17 	ldw	r2,-4(fp)
   25f4c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   25f50:	e0bffb17 	ldw	r2,-20(fp)
   25f54:	10800017 	ldw	r2,0(r2)
   25f58:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   25f5c:	e0bffc17 	ldw	r2,-16(fp)
   25f60:	10800104 	addi	r2,r2,4
   25f64:	10800037 	ldwio	r2,0(r2)
   25f68:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   25f6c:	e0bffd17 	ldw	r2,-12(fp)
   25f70:	1080c00c 	andi	r2,r2,768
   25f74:	10006d26 	beq	r2,zero,2612c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   25f78:	e0bffd17 	ldw	r2,-12(fp)
   25f7c:	1080400c 	andi	r2,r2,256
   25f80:	10003526 	beq	r2,zero,26058 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   25f84:	00800074 	movhi	r2,1
   25f88:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   25f8c:	e0bffb17 	ldw	r2,-20(fp)
   25f90:	10800a17 	ldw	r2,40(r2)
   25f94:	10800044 	addi	r2,r2,1
   25f98:	1081ffcc 	andi	r2,r2,2047
   25f9c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   25fa0:	e0bffb17 	ldw	r2,-20(fp)
   25fa4:	10c00b17 	ldw	r3,44(r2)
   25fa8:	e0bffe17 	ldw	r2,-8(fp)
   25fac:	18801526 	beq	r3,r2,26004 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   25fb0:	e0bffc17 	ldw	r2,-16(fp)
   25fb4:	10800037 	ldwio	r2,0(r2)
   25fb8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   25fbc:	e0bff917 	ldw	r2,-28(fp)
   25fc0:	10a0000c 	andi	r2,r2,32768
   25fc4:	10001126 	beq	r2,zero,2600c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   25fc8:	e0bffb17 	ldw	r2,-20(fp)
   25fcc:	10800a17 	ldw	r2,40(r2)
   25fd0:	e0fff917 	ldw	r3,-28(fp)
   25fd4:	1809883a 	mov	r4,r3
   25fd8:	e0fffb17 	ldw	r3,-20(fp)
   25fdc:	1885883a 	add	r2,r3,r2
   25fe0:	10800e04 	addi	r2,r2,56
   25fe4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   25fe8:	e0bffb17 	ldw	r2,-20(fp)
   25fec:	10800a17 	ldw	r2,40(r2)
   25ff0:	10800044 	addi	r2,r2,1
   25ff4:	10c1ffcc 	andi	r3,r2,2047
   25ff8:	e0bffb17 	ldw	r2,-20(fp)
   25ffc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   26000:	003fe206 	br	25f8c <__alt_data_end+0xfffe5f8c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   26004:	0001883a 	nop
   26008:	00000106 	br	26010 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2600c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   26010:	e0bff917 	ldw	r2,-28(fp)
   26014:	10bfffec 	andhi	r2,r2,65535
   26018:	10000f26 	beq	r2,zero,26058 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2601c:	e0bffb17 	ldw	r2,-20(fp)
   26020:	10c00817 	ldw	r3,32(r2)
   26024:	00bfff84 	movi	r2,-2
   26028:	1886703a 	and	r3,r3,r2
   2602c:	e0bffb17 	ldw	r2,-20(fp)
   26030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   26034:	e0bffc17 	ldw	r2,-16(fp)
   26038:	10800104 	addi	r2,r2,4
   2603c:	1007883a 	mov	r3,r2
   26040:	e0bffb17 	ldw	r2,-20(fp)
   26044:	10800817 	ldw	r2,32(r2)
   26048:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2604c:	e0bffc17 	ldw	r2,-16(fp)
   26050:	10800104 	addi	r2,r2,4
   26054:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   26058:	e0bffd17 	ldw	r2,-12(fp)
   2605c:	1080800c 	andi	r2,r2,512
   26060:	103fbe26 	beq	r2,zero,25f5c <__alt_data_end+0xfffe5f5c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   26064:	e0bffd17 	ldw	r2,-12(fp)
   26068:	1004d43a 	srli	r2,r2,16
   2606c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   26070:	00001406 	br	260c4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   26074:	e0bffc17 	ldw	r2,-16(fp)
   26078:	e0fffb17 	ldw	r3,-20(fp)
   2607c:	18c00d17 	ldw	r3,52(r3)
   26080:	e13ffb17 	ldw	r4,-20(fp)
   26084:	20c7883a 	add	r3,r4,r3
   26088:	18c20e04 	addi	r3,r3,2104
   2608c:	18c00003 	ldbu	r3,0(r3)
   26090:	18c03fcc 	andi	r3,r3,255
   26094:	18c0201c 	xori	r3,r3,128
   26098:	18ffe004 	addi	r3,r3,-128
   2609c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   260a0:	e0bffb17 	ldw	r2,-20(fp)
   260a4:	10800d17 	ldw	r2,52(r2)
   260a8:	10800044 	addi	r2,r2,1
   260ac:	10c1ffcc 	andi	r3,r2,2047
   260b0:	e0bffb17 	ldw	r2,-20(fp)
   260b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   260b8:	e0bffa17 	ldw	r2,-24(fp)
   260bc:	10bfffc4 	addi	r2,r2,-1
   260c0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   260c4:	e0bffa17 	ldw	r2,-24(fp)
   260c8:	10000526 	beq	r2,zero,260e0 <altera_avalon_jtag_uart_irq+0x1a8>
   260cc:	e0bffb17 	ldw	r2,-20(fp)
   260d0:	10c00d17 	ldw	r3,52(r2)
   260d4:	e0bffb17 	ldw	r2,-20(fp)
   260d8:	10800c17 	ldw	r2,48(r2)
   260dc:	18bfe51e 	bne	r3,r2,26074 <__alt_data_end+0xfffe6074>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   260e0:	e0bffa17 	ldw	r2,-24(fp)
   260e4:	103f9d26 	beq	r2,zero,25f5c <__alt_data_end+0xfffe5f5c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   260e8:	e0bffb17 	ldw	r2,-20(fp)
   260ec:	10c00817 	ldw	r3,32(r2)
   260f0:	00bfff44 	movi	r2,-3
   260f4:	1886703a 	and	r3,r3,r2
   260f8:	e0bffb17 	ldw	r2,-20(fp)
   260fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   26100:	e0bffb17 	ldw	r2,-20(fp)
   26104:	10800017 	ldw	r2,0(r2)
   26108:	10800104 	addi	r2,r2,4
   2610c:	1007883a 	mov	r3,r2
   26110:	e0bffb17 	ldw	r2,-20(fp)
   26114:	10800817 	ldw	r2,32(r2)
   26118:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2611c:	e0bffc17 	ldw	r2,-16(fp)
   26120:	10800104 	addi	r2,r2,4
   26124:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   26128:	003f8c06 	br	25f5c <__alt_data_end+0xfffe5f5c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2612c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   26130:	0001883a 	nop
   26134:	e037883a 	mov	sp,fp
   26138:	df000017 	ldw	fp,0(sp)
   2613c:	dec00104 	addi	sp,sp,4
   26140:	f800283a 	ret

00026144 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   26144:	defff804 	addi	sp,sp,-32
   26148:	df000715 	stw	fp,28(sp)
   2614c:	df000704 	addi	fp,sp,28
   26150:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   26154:	e0bffb17 	ldw	r2,-20(fp)
   26158:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2615c:	e0bff917 	ldw	r2,-28(fp)
   26160:	10800017 	ldw	r2,0(r2)
   26164:	10800104 	addi	r2,r2,4
   26168:	10800037 	ldwio	r2,0(r2)
   2616c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   26170:	e0bffa17 	ldw	r2,-24(fp)
   26174:	1081000c 	andi	r2,r2,1024
   26178:	10000b26 	beq	r2,zero,261a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2617c:	e0bff917 	ldw	r2,-28(fp)
   26180:	10800017 	ldw	r2,0(r2)
   26184:	10800104 	addi	r2,r2,4
   26188:	1007883a 	mov	r3,r2
   2618c:	e0bff917 	ldw	r2,-28(fp)
   26190:	10800817 	ldw	r2,32(r2)
   26194:	10810014 	ori	r2,r2,1024
   26198:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2619c:	e0bff917 	ldw	r2,-28(fp)
   261a0:	10000915 	stw	zero,36(r2)
   261a4:	00000a06 	br	261d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   261a8:	e0bff917 	ldw	r2,-28(fp)
   261ac:	10c00917 	ldw	r3,36(r2)
   261b0:	00a00034 	movhi	r2,32768
   261b4:	10bfff04 	addi	r2,r2,-4
   261b8:	10c00536 	bltu	r2,r3,261d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   261bc:	e0bff917 	ldw	r2,-28(fp)
   261c0:	10800917 	ldw	r2,36(r2)
   261c4:	10c00044 	addi	r3,r2,1
   261c8:	e0bff917 	ldw	r2,-28(fp)
   261cc:	10c00915 	stw	r3,36(r2)
   261d0:	d0a6f417 	ldw	r2,-25648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   261d4:	e037883a 	mov	sp,fp
   261d8:	df000017 	ldw	fp,0(sp)
   261dc:	dec00104 	addi	sp,sp,4
   261e0:	f800283a 	ret

000261e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   261e4:	defffd04 	addi	sp,sp,-12
   261e8:	df000215 	stw	fp,8(sp)
   261ec:	df000204 	addi	fp,sp,8
   261f0:	e13ffe15 	stw	r4,-8(fp)
   261f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   261f8:	00000506 	br	26210 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   261fc:	e0bfff17 	ldw	r2,-4(fp)
   26200:	1090000c 	andi	r2,r2,16384
   26204:	10000226 	beq	r2,zero,26210 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   26208:	00bffd44 	movi	r2,-11
   2620c:	00000b06 	br	2623c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   26210:	e0bffe17 	ldw	r2,-8(fp)
   26214:	10c00d17 	ldw	r3,52(r2)
   26218:	e0bffe17 	ldw	r2,-8(fp)
   2621c:	10800c17 	ldw	r2,48(r2)
   26220:	18800526 	beq	r3,r2,26238 <altera_avalon_jtag_uart_close+0x54>
   26224:	e0bffe17 	ldw	r2,-8(fp)
   26228:	10c00917 	ldw	r3,36(r2)
   2622c:	e0bffe17 	ldw	r2,-8(fp)
   26230:	10800117 	ldw	r2,4(r2)
   26234:	18bff136 	bltu	r3,r2,261fc <__alt_data_end+0xfffe61fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   26238:	0005883a 	mov	r2,zero
}
   2623c:	e037883a 	mov	sp,fp
   26240:	df000017 	ldw	fp,0(sp)
   26244:	dec00104 	addi	sp,sp,4
   26248:	f800283a 	ret

0002624c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2624c:	defffa04 	addi	sp,sp,-24
   26250:	df000515 	stw	fp,20(sp)
   26254:	df000504 	addi	fp,sp,20
   26258:	e13ffd15 	stw	r4,-12(fp)
   2625c:	e17ffe15 	stw	r5,-8(fp)
   26260:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   26264:	00bff9c4 	movi	r2,-25
   26268:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2626c:	e0bffe17 	ldw	r2,-8(fp)
   26270:	10da8060 	cmpeqi	r3,r2,27137
   26274:	1800031e 	bne	r3,zero,26284 <altera_avalon_jtag_uart_ioctl+0x38>
   26278:	109a80a0 	cmpeqi	r2,r2,27138
   2627c:	1000181e 	bne	r2,zero,262e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   26280:	00002906 	br	26328 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   26284:	e0bffd17 	ldw	r2,-12(fp)
   26288:	10c00117 	ldw	r3,4(r2)
   2628c:	00a00034 	movhi	r2,32768
   26290:	10bfffc4 	addi	r2,r2,-1
   26294:	18802126 	beq	r3,r2,2631c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   26298:	e0bfff17 	ldw	r2,-4(fp)
   2629c:	10800017 	ldw	r2,0(r2)
   262a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   262a4:	e0bffc17 	ldw	r2,-16(fp)
   262a8:	10800090 	cmplti	r2,r2,2
   262ac:	1000061e 	bne	r2,zero,262c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   262b0:	e0fffc17 	ldw	r3,-16(fp)
   262b4:	00a00034 	movhi	r2,32768
   262b8:	10bfffc4 	addi	r2,r2,-1
   262bc:	18800226 	beq	r3,r2,262c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   262c0:	e0bffc17 	ldw	r2,-16(fp)
   262c4:	00000206 	br	262d0 <altera_avalon_jtag_uart_ioctl+0x84>
   262c8:	00a00034 	movhi	r2,32768
   262cc:	10bfff84 	addi	r2,r2,-2
   262d0:	e0fffd17 	ldw	r3,-12(fp)
   262d4:	18800115 	stw	r2,4(r3)
      rc = 0;
   262d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   262dc:	00000f06 	br	2631c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   262e0:	e0bffd17 	ldw	r2,-12(fp)
   262e4:	10c00117 	ldw	r3,4(r2)
   262e8:	00a00034 	movhi	r2,32768
   262ec:	10bfffc4 	addi	r2,r2,-1
   262f0:	18800c26 	beq	r3,r2,26324 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   262f4:	e0bffd17 	ldw	r2,-12(fp)
   262f8:	10c00917 	ldw	r3,36(r2)
   262fc:	e0bffd17 	ldw	r2,-12(fp)
   26300:	10800117 	ldw	r2,4(r2)
   26304:	1885803a 	cmpltu	r2,r3,r2
   26308:	10c03fcc 	andi	r3,r2,255
   2630c:	e0bfff17 	ldw	r2,-4(fp)
   26310:	10c00015 	stw	r3,0(r2)
      rc = 0;
   26314:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   26318:	00000206 	br	26324 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2631c:	0001883a 	nop
   26320:	00000106 	br	26328 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   26324:	0001883a 	nop

  default:
    break;
  }

  return rc;
   26328:	e0bffb17 	ldw	r2,-20(fp)
}
   2632c:	e037883a 	mov	sp,fp
   26330:	df000017 	ldw	fp,0(sp)
   26334:	dec00104 	addi	sp,sp,4
   26338:	f800283a 	ret

0002633c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2633c:	defff304 	addi	sp,sp,-52
   26340:	dfc00c15 	stw	ra,48(sp)
   26344:	df000b15 	stw	fp,44(sp)
   26348:	df000b04 	addi	fp,sp,44
   2634c:	e13ffc15 	stw	r4,-16(fp)
   26350:	e17ffd15 	stw	r5,-12(fp)
   26354:	e1bffe15 	stw	r6,-8(fp)
   26358:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2635c:	e0bffd17 	ldw	r2,-12(fp)
   26360:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   26364:	00004706 	br	26484 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   26368:	e0bffc17 	ldw	r2,-16(fp)
   2636c:	10800a17 	ldw	r2,40(r2)
   26370:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   26374:	e0bffc17 	ldw	r2,-16(fp)
   26378:	10800b17 	ldw	r2,44(r2)
   2637c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   26380:	e0fff717 	ldw	r3,-36(fp)
   26384:	e0bff817 	ldw	r2,-32(fp)
   26388:	18800536 	bltu	r3,r2,263a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2638c:	e0fff717 	ldw	r3,-36(fp)
   26390:	e0bff817 	ldw	r2,-32(fp)
   26394:	1885c83a 	sub	r2,r3,r2
   26398:	e0bff615 	stw	r2,-40(fp)
   2639c:	00000406 	br	263b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   263a0:	00c20004 	movi	r3,2048
   263a4:	e0bff817 	ldw	r2,-32(fp)
   263a8:	1885c83a 	sub	r2,r3,r2
   263ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   263b0:	e0bff617 	ldw	r2,-40(fp)
   263b4:	10001e26 	beq	r2,zero,26430 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   263b8:	e0fffe17 	ldw	r3,-8(fp)
   263bc:	e0bff617 	ldw	r2,-40(fp)
   263c0:	1880022e 	bgeu	r3,r2,263cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   263c4:	e0bffe17 	ldw	r2,-8(fp)
   263c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   263cc:	e0bffc17 	ldw	r2,-16(fp)
   263d0:	10c00e04 	addi	r3,r2,56
   263d4:	e0bff817 	ldw	r2,-32(fp)
   263d8:	1885883a 	add	r2,r3,r2
   263dc:	e1bff617 	ldw	r6,-40(fp)
   263e0:	100b883a 	mov	r5,r2
   263e4:	e13ff517 	ldw	r4,-44(fp)
   263e8:	0021e800 	call	21e80 <memcpy>
      ptr   += n;
   263ec:	e0fff517 	ldw	r3,-44(fp)
   263f0:	e0bff617 	ldw	r2,-40(fp)
   263f4:	1885883a 	add	r2,r3,r2
   263f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   263fc:	e0fffe17 	ldw	r3,-8(fp)
   26400:	e0bff617 	ldw	r2,-40(fp)
   26404:	1885c83a 	sub	r2,r3,r2
   26408:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2640c:	e0fff817 	ldw	r3,-32(fp)
   26410:	e0bff617 	ldw	r2,-40(fp)
   26414:	1885883a 	add	r2,r3,r2
   26418:	10c1ffcc 	andi	r3,r2,2047
   2641c:	e0bffc17 	ldw	r2,-16(fp)
   26420:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   26424:	e0bffe17 	ldw	r2,-8(fp)
   26428:	00bfcf16 	blt	zero,r2,26368 <__alt_data_end+0xfffe6368>
   2642c:	00000106 	br	26434 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   26430:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   26434:	e0fff517 	ldw	r3,-44(fp)
   26438:	e0bffd17 	ldw	r2,-12(fp)
   2643c:	1880141e 	bne	r3,r2,26490 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   26440:	e0bfff17 	ldw	r2,-4(fp)
   26444:	1090000c 	andi	r2,r2,16384
   26448:	1000131e 	bne	r2,zero,26498 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2644c:	0001883a 	nop
   26450:	e0bffc17 	ldw	r2,-16(fp)
   26454:	10c00a17 	ldw	r3,40(r2)
   26458:	e0bff717 	ldw	r2,-36(fp)
   2645c:	1880051e 	bne	r3,r2,26474 <altera_avalon_jtag_uart_read+0x138>
   26460:	e0bffc17 	ldw	r2,-16(fp)
   26464:	10c00917 	ldw	r3,36(r2)
   26468:	e0bffc17 	ldw	r2,-16(fp)
   2646c:	10800117 	ldw	r2,4(r2)
   26470:	18bff736 	bltu	r3,r2,26450 <__alt_data_end+0xfffe6450>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   26474:	e0bffc17 	ldw	r2,-16(fp)
   26478:	10c00a17 	ldw	r3,40(r2)
   2647c:	e0bff717 	ldw	r2,-36(fp)
   26480:	18800726 	beq	r3,r2,264a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   26484:	e0bffe17 	ldw	r2,-8(fp)
   26488:	00bfb716 	blt	zero,r2,26368 <__alt_data_end+0xfffe6368>
   2648c:	00000506 	br	264a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   26490:	0001883a 	nop
   26494:	00000306 	br	264a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   26498:	0001883a 	nop
   2649c:	00000106 	br	264a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   264a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   264a4:	e0fff517 	ldw	r3,-44(fp)
   264a8:	e0bffd17 	ldw	r2,-12(fp)
   264ac:	18801826 	beq	r3,r2,26510 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   264b0:	0005303a 	rdctl	r2,status
   264b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   264b8:	e0fffb17 	ldw	r3,-20(fp)
   264bc:	00bfff84 	movi	r2,-2
   264c0:	1884703a 	and	r2,r3,r2
   264c4:	1001703a 	wrctl	status,r2
  
  return context;
   264c8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   264cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   264d0:	e0bffc17 	ldw	r2,-16(fp)
   264d4:	10800817 	ldw	r2,32(r2)
   264d8:	10c00054 	ori	r3,r2,1
   264dc:	e0bffc17 	ldw	r2,-16(fp)
   264e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   264e4:	e0bffc17 	ldw	r2,-16(fp)
   264e8:	10800017 	ldw	r2,0(r2)
   264ec:	10800104 	addi	r2,r2,4
   264f0:	1007883a 	mov	r3,r2
   264f4:	e0bffc17 	ldw	r2,-16(fp)
   264f8:	10800817 	ldw	r2,32(r2)
   264fc:	18800035 	stwio	r2,0(r3)
   26500:	e0bffa17 	ldw	r2,-24(fp)
   26504:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26508:	e0bff917 	ldw	r2,-28(fp)
   2650c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   26510:	e0fff517 	ldw	r3,-44(fp)
   26514:	e0bffd17 	ldw	r2,-12(fp)
   26518:	18800426 	beq	r3,r2,2652c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2651c:	e0fff517 	ldw	r3,-44(fp)
   26520:	e0bffd17 	ldw	r2,-12(fp)
   26524:	1885c83a 	sub	r2,r3,r2
   26528:	00000606 	br	26544 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2652c:	e0bfff17 	ldw	r2,-4(fp)
   26530:	1090000c 	andi	r2,r2,16384
   26534:	10000226 	beq	r2,zero,26540 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   26538:	00bffd44 	movi	r2,-11
   2653c:	00000106 	br	26544 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   26540:	00bffec4 	movi	r2,-5
}
   26544:	e037883a 	mov	sp,fp
   26548:	dfc00117 	ldw	ra,4(sp)
   2654c:	df000017 	ldw	fp,0(sp)
   26550:	dec00204 	addi	sp,sp,8
   26554:	f800283a 	ret

00026558 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   26558:	defff304 	addi	sp,sp,-52
   2655c:	dfc00c15 	stw	ra,48(sp)
   26560:	df000b15 	stw	fp,44(sp)
   26564:	df000b04 	addi	fp,sp,44
   26568:	e13ffc15 	stw	r4,-16(fp)
   2656c:	e17ffd15 	stw	r5,-12(fp)
   26570:	e1bffe15 	stw	r6,-8(fp)
   26574:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   26578:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2657c:	e0bffd17 	ldw	r2,-12(fp)
   26580:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   26584:	00003706 	br	26664 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   26588:	e0bffc17 	ldw	r2,-16(fp)
   2658c:	10800c17 	ldw	r2,48(r2)
   26590:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   26594:	e0bffc17 	ldw	r2,-16(fp)
   26598:	10800d17 	ldw	r2,52(r2)
   2659c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   265a0:	e0fff917 	ldw	r3,-28(fp)
   265a4:	e0bff517 	ldw	r2,-44(fp)
   265a8:	1880062e 	bgeu	r3,r2,265c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   265ac:	e0fff517 	ldw	r3,-44(fp)
   265b0:	e0bff917 	ldw	r2,-28(fp)
   265b4:	1885c83a 	sub	r2,r3,r2
   265b8:	10bfffc4 	addi	r2,r2,-1
   265bc:	e0bff615 	stw	r2,-40(fp)
   265c0:	00000b06 	br	265f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   265c4:	e0bff517 	ldw	r2,-44(fp)
   265c8:	10000526 	beq	r2,zero,265e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   265cc:	00c20004 	movi	r3,2048
   265d0:	e0bff917 	ldw	r2,-28(fp)
   265d4:	1885c83a 	sub	r2,r3,r2
   265d8:	e0bff615 	stw	r2,-40(fp)
   265dc:	00000406 	br	265f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   265e0:	00c1ffc4 	movi	r3,2047
   265e4:	e0bff917 	ldw	r2,-28(fp)
   265e8:	1885c83a 	sub	r2,r3,r2
   265ec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   265f0:	e0bff617 	ldw	r2,-40(fp)
   265f4:	10001e26 	beq	r2,zero,26670 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   265f8:	e0fffe17 	ldw	r3,-8(fp)
   265fc:	e0bff617 	ldw	r2,-40(fp)
   26600:	1880022e 	bgeu	r3,r2,2660c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   26604:	e0bffe17 	ldw	r2,-8(fp)
   26608:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2660c:	e0bffc17 	ldw	r2,-16(fp)
   26610:	10c20e04 	addi	r3,r2,2104
   26614:	e0bff917 	ldw	r2,-28(fp)
   26618:	1885883a 	add	r2,r3,r2
   2661c:	e1bff617 	ldw	r6,-40(fp)
   26620:	e17ffd17 	ldw	r5,-12(fp)
   26624:	1009883a 	mov	r4,r2
   26628:	0021e800 	call	21e80 <memcpy>
      ptr   += n;
   2662c:	e0fffd17 	ldw	r3,-12(fp)
   26630:	e0bff617 	ldw	r2,-40(fp)
   26634:	1885883a 	add	r2,r3,r2
   26638:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2663c:	e0fffe17 	ldw	r3,-8(fp)
   26640:	e0bff617 	ldw	r2,-40(fp)
   26644:	1885c83a 	sub	r2,r3,r2
   26648:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2664c:	e0fff917 	ldw	r3,-28(fp)
   26650:	e0bff617 	ldw	r2,-40(fp)
   26654:	1885883a 	add	r2,r3,r2
   26658:	10c1ffcc 	andi	r3,r2,2047
   2665c:	e0bffc17 	ldw	r2,-16(fp)
   26660:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   26664:	e0bffe17 	ldw	r2,-8(fp)
   26668:	00bfc716 	blt	zero,r2,26588 <__alt_data_end+0xfffe6588>
   2666c:	00000106 	br	26674 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   26670:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26674:	0005303a 	rdctl	r2,status
   26678:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2667c:	e0fffb17 	ldw	r3,-20(fp)
   26680:	00bfff84 	movi	r2,-2
   26684:	1884703a 	and	r2,r3,r2
   26688:	1001703a 	wrctl	status,r2
  
  return context;
   2668c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   26690:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   26694:	e0bffc17 	ldw	r2,-16(fp)
   26698:	10800817 	ldw	r2,32(r2)
   2669c:	10c00094 	ori	r3,r2,2
   266a0:	e0bffc17 	ldw	r2,-16(fp)
   266a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   266a8:	e0bffc17 	ldw	r2,-16(fp)
   266ac:	10800017 	ldw	r2,0(r2)
   266b0:	10800104 	addi	r2,r2,4
   266b4:	1007883a 	mov	r3,r2
   266b8:	e0bffc17 	ldw	r2,-16(fp)
   266bc:	10800817 	ldw	r2,32(r2)
   266c0:	18800035 	stwio	r2,0(r3)
   266c4:	e0bffa17 	ldw	r2,-24(fp)
   266c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   266cc:	e0bff817 	ldw	r2,-32(fp)
   266d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   266d4:	e0bffe17 	ldw	r2,-8(fp)
   266d8:	0080100e 	bge	zero,r2,2671c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   266dc:	e0bfff17 	ldw	r2,-4(fp)
   266e0:	1090000c 	andi	r2,r2,16384
   266e4:	1000101e 	bne	r2,zero,26728 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   266e8:	0001883a 	nop
   266ec:	e0bffc17 	ldw	r2,-16(fp)
   266f0:	10c00d17 	ldw	r3,52(r2)
   266f4:	e0bff517 	ldw	r2,-44(fp)
   266f8:	1880051e 	bne	r3,r2,26710 <altera_avalon_jtag_uart_write+0x1b8>
   266fc:	e0bffc17 	ldw	r2,-16(fp)
   26700:	10c00917 	ldw	r3,36(r2)
   26704:	e0bffc17 	ldw	r2,-16(fp)
   26708:	10800117 	ldw	r2,4(r2)
   2670c:	18bff736 	bltu	r3,r2,266ec <__alt_data_end+0xfffe66ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   26710:	e0bffc17 	ldw	r2,-16(fp)
   26714:	10800917 	ldw	r2,36(r2)
   26718:	1000051e 	bne	r2,zero,26730 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2671c:	e0bffe17 	ldw	r2,-8(fp)
   26720:	00bfd016 	blt	zero,r2,26664 <__alt_data_end+0xfffe6664>
   26724:	00000306 	br	26734 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   26728:	0001883a 	nop
   2672c:	00000106 	br	26734 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   26730:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   26734:	e0fffd17 	ldw	r3,-12(fp)
   26738:	e0bff717 	ldw	r2,-36(fp)
   2673c:	18800426 	beq	r3,r2,26750 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   26740:	e0fffd17 	ldw	r3,-12(fp)
   26744:	e0bff717 	ldw	r2,-36(fp)
   26748:	1885c83a 	sub	r2,r3,r2
   2674c:	00000606 	br	26768 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   26750:	e0bfff17 	ldw	r2,-4(fp)
   26754:	1090000c 	andi	r2,r2,16384
   26758:	10000226 	beq	r2,zero,26764 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2675c:	00bffd44 	movi	r2,-11
   26760:	00000106 	br	26768 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   26764:	00bffec4 	movi	r2,-5
}
   26768:	e037883a 	mov	sp,fp
   2676c:	dfc00117 	ldw	ra,4(sp)
   26770:	df000017 	ldw	fp,0(sp)
   26774:	dec00204 	addi	sp,sp,8
   26778:	f800283a 	ret

0002677c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2677c:	defffa04 	addi	sp,sp,-24
   26780:	dfc00515 	stw	ra,20(sp)
   26784:	df000415 	stw	fp,16(sp)
   26788:	df000404 	addi	fp,sp,16
   2678c:	e13ffd15 	stw	r4,-12(fp)
   26790:	e17ffe15 	stw	r5,-8(fp)
   26794:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   26798:	e0bffd17 	ldw	r2,-12(fp)
   2679c:	10800017 	ldw	r2,0(r2)
   267a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   267a4:	e0bffc17 	ldw	r2,-16(fp)
   267a8:	10c00a04 	addi	r3,r2,40
   267ac:	e0bffd17 	ldw	r2,-12(fp)
   267b0:	10800217 	ldw	r2,8(r2)
   267b4:	100f883a 	mov	r7,r2
   267b8:	e1bfff17 	ldw	r6,-4(fp)
   267bc:	e17ffe17 	ldw	r5,-8(fp)
   267c0:	1809883a 	mov	r4,r3
   267c4:	0026c900 	call	26c90 <altera_avalon_uart_read>
      fd->fd_flags);
}
   267c8:	e037883a 	mov	sp,fp
   267cc:	dfc00117 	ldw	ra,4(sp)
   267d0:	df000017 	ldw	fp,0(sp)
   267d4:	dec00204 	addi	sp,sp,8
   267d8:	f800283a 	ret

000267dc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   267dc:	defffa04 	addi	sp,sp,-24
   267e0:	dfc00515 	stw	ra,20(sp)
   267e4:	df000415 	stw	fp,16(sp)
   267e8:	df000404 	addi	fp,sp,16
   267ec:	e13ffd15 	stw	r4,-12(fp)
   267f0:	e17ffe15 	stw	r5,-8(fp)
   267f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   267f8:	e0bffd17 	ldw	r2,-12(fp)
   267fc:	10800017 	ldw	r2,0(r2)
   26800:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   26804:	e0bffc17 	ldw	r2,-16(fp)
   26808:	10c00a04 	addi	r3,r2,40
   2680c:	e0bffd17 	ldw	r2,-12(fp)
   26810:	10800217 	ldw	r2,8(r2)
   26814:	100f883a 	mov	r7,r2
   26818:	e1bfff17 	ldw	r6,-4(fp)
   2681c:	e17ffe17 	ldw	r5,-8(fp)
   26820:	1809883a 	mov	r4,r3
   26824:	0026ea80 	call	26ea8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   26828:	e037883a 	mov	sp,fp
   2682c:	dfc00117 	ldw	ra,4(sp)
   26830:	df000017 	ldw	fp,0(sp)
   26834:	dec00204 	addi	sp,sp,8
   26838:	f800283a 	ret

0002683c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   2683c:	defffc04 	addi	sp,sp,-16
   26840:	dfc00315 	stw	ra,12(sp)
   26844:	df000215 	stw	fp,8(sp)
   26848:	df000204 	addi	fp,sp,8
   2684c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   26850:	e0bfff17 	ldw	r2,-4(fp)
   26854:	10800017 	ldw	r2,0(r2)
   26858:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   2685c:	e0bffe17 	ldw	r2,-8(fp)
   26860:	10c00a04 	addi	r3,r2,40
   26864:	e0bfff17 	ldw	r2,-4(fp)
   26868:	10800217 	ldw	r2,8(r2)
   2686c:	100b883a 	mov	r5,r2
   26870:	1809883a 	mov	r4,r3
   26874:	0026c000 	call	26c00 <altera_avalon_uart_close>
}
   26878:	e037883a 	mov	sp,fp
   2687c:	dfc00117 	ldw	ra,4(sp)
   26880:	df000017 	ldw	fp,0(sp)
   26884:	dec00204 	addi	sp,sp,8
   26888:	f800283a 	ret

0002688c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   2688c:	defff804 	addi	sp,sp,-32
   26890:	dfc00715 	stw	ra,28(sp)
   26894:	df000615 	stw	fp,24(sp)
   26898:	df000604 	addi	fp,sp,24
   2689c:	e13ffd15 	stw	r4,-12(fp)
   268a0:	e17ffe15 	stw	r5,-8(fp)
   268a4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   268a8:	e0bffd17 	ldw	r2,-12(fp)
   268ac:	10800017 	ldw	r2,0(r2)
   268b0:	e0bffb15 	stw	r2,-20(fp)
   268b4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   268b8:	1000041e 	bne	r2,zero,268cc <altera_avalon_uart_init+0x40>
   268bc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   268c0:	1000021e 	bne	r2,zero,268cc <altera_avalon_uart_init+0x40>
   268c4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   268c8:	10000226 	beq	r2,zero,268d4 <altera_avalon_uart_init+0x48>
   268cc:	00800044 	movi	r2,1
   268d0:	00000106 	br	268d8 <altera_avalon_uart_init+0x4c>
   268d4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   268d8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   268dc:	e0bffc17 	ldw	r2,-16(fp)
   268e0:	10000f1e 	bne	r2,zero,26920 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   268e4:	e0bffd17 	ldw	r2,-12(fp)
   268e8:	00c32004 	movi	r3,3200
   268ec:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   268f0:	e0bffb17 	ldw	r2,-20(fp)
   268f4:	10800304 	addi	r2,r2,12
   268f8:	e0fffd17 	ldw	r3,-12(fp)
   268fc:	18c00117 	ldw	r3,4(r3)
   26900:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   26904:	d8000015 	stw	zero,0(sp)
   26908:	e1fffd17 	ldw	r7,-12(fp)
   2690c:	018000b4 	movhi	r6,2
   26910:	319a4e04 	addi	r6,r6,26936
   26914:	e17fff17 	ldw	r5,-4(fp)
   26918:	e13ffe17 	ldw	r4,-8(fp)
   2691c:	00275480 	call	27548 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   26920:	0001883a 	nop
   26924:	e037883a 	mov	sp,fp
   26928:	dfc00117 	ldw	ra,4(sp)
   2692c:	df000017 	ldw	fp,0(sp)
   26930:	dec00204 	addi	sp,sp,8
   26934:	f800283a 	ret

00026938 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   26938:	defffa04 	addi	sp,sp,-24
   2693c:	dfc00515 	stw	ra,20(sp)
   26940:	df000415 	stw	fp,16(sp)
   26944:	df000404 	addi	fp,sp,16
   26948:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   2694c:	e0bfff17 	ldw	r2,-4(fp)
   26950:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   26954:	e0bffc17 	ldw	r2,-16(fp)
   26958:	10800017 	ldw	r2,0(r2)
   2695c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   26960:	e0bffd17 	ldw	r2,-12(fp)
   26964:	10800204 	addi	r2,r2,8
   26968:	10800037 	ldwio	r2,0(r2)
   2696c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   26970:	e0bffd17 	ldw	r2,-12(fp)
   26974:	10800204 	addi	r2,r2,8
   26978:	0007883a 	mov	r3,zero
   2697c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   26980:	e0bffd17 	ldw	r2,-12(fp)
   26984:	10800204 	addi	r2,r2,8
   26988:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   2698c:	e0bffe17 	ldw	r2,-8(fp)
   26990:	1080200c 	andi	r2,r2,128
   26994:	10000326 	beq	r2,zero,269a4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   26998:	e17ffe17 	ldw	r5,-8(fp)
   2699c:	e13ffc17 	ldw	r4,-16(fp)
   269a0:	00269d40 	call	269d4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   269a4:	e0bffe17 	ldw	r2,-8(fp)
   269a8:	1081100c 	andi	r2,r2,1088
   269ac:	10000326 	beq	r2,zero,269bc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   269b0:	e17ffe17 	ldw	r5,-8(fp)
   269b4:	e13ffc17 	ldw	r4,-16(fp)
   269b8:	0026ab80 	call	26ab8 <altera_avalon_uart_txirq>
  }
  

}
   269bc:	0001883a 	nop
   269c0:	e037883a 	mov	sp,fp
   269c4:	dfc00117 	ldw	ra,4(sp)
   269c8:	df000017 	ldw	fp,0(sp)
   269cc:	dec00204 	addi	sp,sp,8
   269d0:	f800283a 	ret

000269d4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   269d4:	defffc04 	addi	sp,sp,-16
   269d8:	df000315 	stw	fp,12(sp)
   269dc:	df000304 	addi	fp,sp,12
   269e0:	e13ffe15 	stw	r4,-8(fp)
   269e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   269e8:	e0bfff17 	ldw	r2,-4(fp)
   269ec:	108000cc 	andi	r2,r2,3
   269f0:	10002c1e 	bne	r2,zero,26aa4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   269f4:	e0bffe17 	ldw	r2,-8(fp)
   269f8:	10800317 	ldw	r2,12(r2)
   269fc:	e0bffe17 	ldw	r2,-8(fp)
   26a00:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   26a04:	e0bffe17 	ldw	r2,-8(fp)
   26a08:	10800317 	ldw	r2,12(r2)
   26a0c:	10800044 	addi	r2,r2,1
   26a10:	10800fcc 	andi	r2,r2,63
   26a14:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   26a18:	e0bffe17 	ldw	r2,-8(fp)
   26a1c:	10800317 	ldw	r2,12(r2)
   26a20:	e0fffe17 	ldw	r3,-8(fp)
   26a24:	18c00017 	ldw	r3,0(r3)
   26a28:	18c00037 	ldwio	r3,0(r3)
   26a2c:	1809883a 	mov	r4,r3
   26a30:	e0fffe17 	ldw	r3,-8(fp)
   26a34:	1885883a 	add	r2,r3,r2
   26a38:	10800704 	addi	r2,r2,28
   26a3c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   26a40:	e0bffe17 	ldw	r2,-8(fp)
   26a44:	e0fffd17 	ldw	r3,-12(fp)
   26a48:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   26a4c:	e0bffe17 	ldw	r2,-8(fp)
   26a50:	10800317 	ldw	r2,12(r2)
   26a54:	10800044 	addi	r2,r2,1
   26a58:	10800fcc 	andi	r2,r2,63
   26a5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   26a60:	e0bffe17 	ldw	r2,-8(fp)
   26a64:	10c00217 	ldw	r3,8(r2)
   26a68:	e0bffd17 	ldw	r2,-12(fp)
   26a6c:	18800e1e 	bne	r3,r2,26aa8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   26a70:	e0bffe17 	ldw	r2,-8(fp)
   26a74:	10c00117 	ldw	r3,4(r2)
   26a78:	00bfdfc4 	movi	r2,-129
   26a7c:	1886703a 	and	r3,r3,r2
   26a80:	e0bffe17 	ldw	r2,-8(fp)
   26a84:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   26a88:	e0bffe17 	ldw	r2,-8(fp)
   26a8c:	10800017 	ldw	r2,0(r2)
   26a90:	10800304 	addi	r2,r2,12
   26a94:	e0fffe17 	ldw	r3,-8(fp)
   26a98:	18c00117 	ldw	r3,4(r3)
   26a9c:	10c00035 	stwio	r3,0(r2)
   26aa0:	00000106 	br	26aa8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   26aa4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   26aa8:	e037883a 	mov	sp,fp
   26aac:	df000017 	ldw	fp,0(sp)
   26ab0:	dec00104 	addi	sp,sp,4
   26ab4:	f800283a 	ret

00026ab8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   26ab8:	defffb04 	addi	sp,sp,-20
   26abc:	df000415 	stw	fp,16(sp)
   26ac0:	df000404 	addi	fp,sp,16
   26ac4:	e13ffc15 	stw	r4,-16(fp)
   26ac8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   26acc:	e0bffc17 	ldw	r2,-16(fp)
   26ad0:	10c00417 	ldw	r3,16(r2)
   26ad4:	e0bffc17 	ldw	r2,-16(fp)
   26ad8:	10800517 	ldw	r2,20(r2)
   26adc:	18803226 	beq	r3,r2,26ba8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   26ae0:	e0bffc17 	ldw	r2,-16(fp)
   26ae4:	10800617 	ldw	r2,24(r2)
   26ae8:	1080008c 	andi	r2,r2,2
   26aec:	10000326 	beq	r2,zero,26afc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   26af0:	e0bffd17 	ldw	r2,-12(fp)
   26af4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   26af8:	10001d26 	beq	r2,zero,26b70 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   26afc:	e0bffc17 	ldw	r2,-16(fp)
   26b00:	10800417 	ldw	r2,16(r2)
   26b04:	e0bffc17 	ldw	r2,-16(fp)
   26b08:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   26b0c:	e0bffc17 	ldw	r2,-16(fp)
   26b10:	10800017 	ldw	r2,0(r2)
   26b14:	10800104 	addi	r2,r2,4
   26b18:	e0fffc17 	ldw	r3,-16(fp)
   26b1c:	18c00417 	ldw	r3,16(r3)
   26b20:	e13ffc17 	ldw	r4,-16(fp)
   26b24:	20c7883a 	add	r3,r4,r3
   26b28:	18c01704 	addi	r3,r3,92
   26b2c:	18c00003 	ldbu	r3,0(r3)
   26b30:	18c03fcc 	andi	r3,r3,255
   26b34:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   26b38:	e0bffc17 	ldw	r2,-16(fp)
   26b3c:	10800417 	ldw	r2,16(r2)
   26b40:	10800044 	addi	r2,r2,1
   26b44:	e0fffc17 	ldw	r3,-16(fp)
   26b48:	18800415 	stw	r2,16(r3)
   26b4c:	10c00fcc 	andi	r3,r2,63
   26b50:	e0bffc17 	ldw	r2,-16(fp)
   26b54:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   26b58:	e0bffc17 	ldw	r2,-16(fp)
   26b5c:	10800117 	ldw	r2,4(r2)
   26b60:	10c01014 	ori	r3,r2,64
   26b64:	e0bffc17 	ldw	r2,-16(fp)
   26b68:	10c00115 	stw	r3,4(r2)
   26b6c:	00000e06 	br	26ba8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   26b70:	e0bffc17 	ldw	r2,-16(fp)
   26b74:	10800017 	ldw	r2,0(r2)
   26b78:	10800204 	addi	r2,r2,8
   26b7c:	10800037 	ldwio	r2,0(r2)
   26b80:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   26b84:	e0bffd17 	ldw	r2,-12(fp)
   26b88:	1082000c 	andi	r2,r2,2048
   26b8c:	1000061e 	bne	r2,zero,26ba8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   26b90:	e0bffc17 	ldw	r2,-16(fp)
   26b94:	10c00117 	ldw	r3,4(r2)
   26b98:	00bfefc4 	movi	r2,-65
   26b9c:	1886703a 	and	r3,r3,r2
   26ba0:	e0bffc17 	ldw	r2,-16(fp)
   26ba4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   26ba8:	e0bffc17 	ldw	r2,-16(fp)
   26bac:	10c00417 	ldw	r3,16(r2)
   26bb0:	e0bffc17 	ldw	r2,-16(fp)
   26bb4:	10800517 	ldw	r2,20(r2)
   26bb8:	1880061e 	bne	r3,r2,26bd4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   26bbc:	e0bffc17 	ldw	r2,-16(fp)
   26bc0:	10c00117 	ldw	r3,4(r2)
   26bc4:	00beefc4 	movi	r2,-1089
   26bc8:	1886703a 	and	r3,r3,r2
   26bcc:	e0bffc17 	ldw	r2,-16(fp)
   26bd0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   26bd4:	e0bffc17 	ldw	r2,-16(fp)
   26bd8:	10800017 	ldw	r2,0(r2)
   26bdc:	10800304 	addi	r2,r2,12
   26be0:	e0fffc17 	ldw	r3,-16(fp)
   26be4:	18c00117 	ldw	r3,4(r3)
   26be8:	10c00035 	stwio	r3,0(r2)
}
   26bec:	0001883a 	nop
   26bf0:	e037883a 	mov	sp,fp
   26bf4:	df000017 	ldw	fp,0(sp)
   26bf8:	dec00104 	addi	sp,sp,4
   26bfc:	f800283a 	ret

00026c00 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   26c00:	defffd04 	addi	sp,sp,-12
   26c04:	df000215 	stw	fp,8(sp)
   26c08:	df000204 	addi	fp,sp,8
   26c0c:	e13ffe15 	stw	r4,-8(fp)
   26c10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   26c14:	00000506 	br	26c2c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   26c18:	e0bfff17 	ldw	r2,-4(fp)
   26c1c:	1090000c 	andi	r2,r2,16384
   26c20:	10000226 	beq	r2,zero,26c2c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   26c24:	00bffd44 	movi	r2,-11
   26c28:	00000606 	br	26c44 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   26c2c:	e0bffe17 	ldw	r2,-8(fp)
   26c30:	10c00417 	ldw	r3,16(r2)
   26c34:	e0bffe17 	ldw	r2,-8(fp)
   26c38:	10800517 	ldw	r2,20(r2)
   26c3c:	18bff61e 	bne	r3,r2,26c18 <__alt_data_end+0xfffe6c18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   26c40:	0005883a 	mov	r2,zero
}
   26c44:	e037883a 	mov	sp,fp
   26c48:	df000017 	ldw	fp,0(sp)
   26c4c:	dec00104 	addi	sp,sp,4
   26c50:	f800283a 	ret

00026c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26c54:	defffe04 	addi	sp,sp,-8
   26c58:	dfc00115 	stw	ra,4(sp)
   26c5c:	df000015 	stw	fp,0(sp)
   26c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26c64:	d0a00917 	ldw	r2,-32732(gp)
   26c68:	10000326 	beq	r2,zero,26c78 <alt_get_errno+0x24>
   26c6c:	d0a00917 	ldw	r2,-32732(gp)
   26c70:	103ee83a 	callr	r2
   26c74:	00000106 	br	26c7c <alt_get_errno+0x28>
   26c78:	d0a6ef04 	addi	r2,gp,-25668
}
   26c7c:	e037883a 	mov	sp,fp
   26c80:	dfc00117 	ldw	ra,4(sp)
   26c84:	df000017 	ldw	fp,0(sp)
   26c88:	dec00204 	addi	sp,sp,8
   26c8c:	f800283a 	ret

00026c90 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   26c90:	defff204 	addi	sp,sp,-56
   26c94:	dfc00d15 	stw	ra,52(sp)
   26c98:	df000c15 	stw	fp,48(sp)
   26c9c:	df000c04 	addi	fp,sp,48
   26ca0:	e13ffc15 	stw	r4,-16(fp)
   26ca4:	e17ffd15 	stw	r5,-12(fp)
   26ca8:	e1bffe15 	stw	r6,-8(fp)
   26cac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   26cb0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   26cb4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   26cb8:	e0bfff17 	ldw	r2,-4(fp)
   26cbc:	1090000c 	andi	r2,r2,16384
   26cc0:	1005003a 	cmpeq	r2,r2,zero
   26cc4:	10803fcc 	andi	r2,r2,255
   26cc8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   26ccc:	00001306 	br	26d1c <altera_avalon_uart_read+0x8c>
    {
      count++;
   26cd0:	e0bff517 	ldw	r2,-44(fp)
   26cd4:	10800044 	addi	r2,r2,1
   26cd8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   26cdc:	e0bffd17 	ldw	r2,-12(fp)
   26ce0:	10c00044 	addi	r3,r2,1
   26ce4:	e0fffd15 	stw	r3,-12(fp)
   26ce8:	e0fffc17 	ldw	r3,-16(fp)
   26cec:	18c00217 	ldw	r3,8(r3)
   26cf0:	e13ffc17 	ldw	r4,-16(fp)
   26cf4:	20c7883a 	add	r3,r4,r3
   26cf8:	18c00704 	addi	r3,r3,28
   26cfc:	18c00003 	ldbu	r3,0(r3)
   26d00:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   26d04:	e0bffc17 	ldw	r2,-16(fp)
   26d08:	10800217 	ldw	r2,8(r2)
   26d0c:	10800044 	addi	r2,r2,1
   26d10:	10c00fcc 	andi	r3,r2,63
   26d14:	e0bffc17 	ldw	r2,-16(fp)
   26d18:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   26d1c:	e0fff517 	ldw	r3,-44(fp)
   26d20:	e0bffe17 	ldw	r2,-8(fp)
   26d24:	1880050e 	bge	r3,r2,26d3c <altera_avalon_uart_read+0xac>
   26d28:	e0bffc17 	ldw	r2,-16(fp)
   26d2c:	10c00217 	ldw	r3,8(r2)
   26d30:	e0bffc17 	ldw	r2,-16(fp)
   26d34:	10800317 	ldw	r2,12(r2)
   26d38:	18bfe51e 	bne	r3,r2,26cd0 <__alt_data_end+0xfffe6cd0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   26d3c:	e0bff517 	ldw	r2,-44(fp)
   26d40:	1000251e 	bne	r2,zero,26dd8 <altera_avalon_uart_read+0x148>
   26d44:	e0bffc17 	ldw	r2,-16(fp)
   26d48:	10c00217 	ldw	r3,8(r2)
   26d4c:	e0bffc17 	ldw	r2,-16(fp)
   26d50:	10800317 	ldw	r2,12(r2)
   26d54:	1880201e 	bne	r3,r2,26dd8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   26d58:	e0bff617 	ldw	r2,-40(fp)
   26d5c:	1000071e 	bne	r2,zero,26d7c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   26d60:	0026c540 	call	26c54 <alt_get_errno>
   26d64:	1007883a 	mov	r3,r2
   26d68:	008002c4 	movi	r2,11
   26d6c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   26d70:	00800044 	movi	r2,1
   26d74:	e0bff405 	stb	r2,-48(fp)
        break;
   26d78:	00001b06 	br	26de8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26d7c:	0005303a 	rdctl	r2,status
   26d80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26d84:	e0fff917 	ldw	r3,-28(fp)
   26d88:	00bfff84 	movi	r2,-2
   26d8c:	1884703a 	and	r2,r3,r2
   26d90:	1001703a 	wrctl	status,r2
  
  return context;
   26d94:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   26d98:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   26d9c:	e0bffc17 	ldw	r2,-16(fp)
   26da0:	10800117 	ldw	r2,4(r2)
   26da4:	10c02014 	ori	r3,r2,128
   26da8:	e0bffc17 	ldw	r2,-16(fp)
   26dac:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   26db0:	e0bffc17 	ldw	r2,-16(fp)
   26db4:	10800017 	ldw	r2,0(r2)
   26db8:	10800304 	addi	r2,r2,12
   26dbc:	e0fffc17 	ldw	r3,-16(fp)
   26dc0:	18c00117 	ldw	r3,4(r3)
   26dc4:	10c00035 	stwio	r3,0(r2)
   26dc8:	e0bff817 	ldw	r2,-32(fp)
   26dcc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26dd0:	e0bffa17 	ldw	r2,-24(fp)
   26dd4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   26dd8:	e0bff517 	ldw	r2,-44(fp)
   26ddc:	1000021e 	bne	r2,zero,26de8 <altera_avalon_uart_read+0x158>
   26de0:	e0bffe17 	ldw	r2,-8(fp)
   26de4:	103fcd1e 	bne	r2,zero,26d1c <__alt_data_end+0xfffe6d1c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26de8:	0005303a 	rdctl	r2,status
   26dec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26df0:	e0fffb17 	ldw	r3,-20(fp)
   26df4:	00bfff84 	movi	r2,-2
   26df8:	1884703a 	and	r2,r3,r2
   26dfc:	1001703a 	wrctl	status,r2
  
  return context;
   26e00:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   26e04:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   26e08:	e0bffc17 	ldw	r2,-16(fp)
   26e0c:	10800117 	ldw	r2,4(r2)
   26e10:	10c02014 	ori	r3,r2,128
   26e14:	e0bffc17 	ldw	r2,-16(fp)
   26e18:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   26e1c:	e0bffc17 	ldw	r2,-16(fp)
   26e20:	10800017 	ldw	r2,0(r2)
   26e24:	10800304 	addi	r2,r2,12
   26e28:	e0fffc17 	ldw	r3,-16(fp)
   26e2c:	18c00117 	ldw	r3,4(r3)
   26e30:	10c00035 	stwio	r3,0(r2)
   26e34:	e0bff817 	ldw	r2,-32(fp)
   26e38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26e3c:	e0bff717 	ldw	r2,-36(fp)
   26e40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   26e44:	e0bff403 	ldbu	r2,-48(fp)
   26e48:	10000226 	beq	r2,zero,26e54 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   26e4c:	00bffd44 	movi	r2,-11
   26e50:	00000106 	br	26e58 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   26e54:	e0bff517 	ldw	r2,-44(fp)
  }
}
   26e58:	e037883a 	mov	sp,fp
   26e5c:	dfc00117 	ldw	ra,4(sp)
   26e60:	df000017 	ldw	fp,0(sp)
   26e64:	dec00204 	addi	sp,sp,8
   26e68:	f800283a 	ret

00026e6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26e6c:	defffe04 	addi	sp,sp,-8
   26e70:	dfc00115 	stw	ra,4(sp)
   26e74:	df000015 	stw	fp,0(sp)
   26e78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26e7c:	d0a00917 	ldw	r2,-32732(gp)
   26e80:	10000326 	beq	r2,zero,26e90 <alt_get_errno+0x24>
   26e84:	d0a00917 	ldw	r2,-32732(gp)
   26e88:	103ee83a 	callr	r2
   26e8c:	00000106 	br	26e94 <alt_get_errno+0x28>
   26e90:	d0a6ef04 	addi	r2,gp,-25668
}
   26e94:	e037883a 	mov	sp,fp
   26e98:	dfc00117 	ldw	ra,4(sp)
   26e9c:	df000017 	ldw	fp,0(sp)
   26ea0:	dec00204 	addi	sp,sp,8
   26ea4:	f800283a 	ret

00026ea8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   26ea8:	defff204 	addi	sp,sp,-56
   26eac:	dfc00d15 	stw	ra,52(sp)
   26eb0:	df000c15 	stw	fp,48(sp)
   26eb4:	df000c04 	addi	fp,sp,48
   26eb8:	e13ffc15 	stw	r4,-16(fp)
   26ebc:	e17ffd15 	stw	r5,-12(fp)
   26ec0:	e1bffe15 	stw	r6,-8(fp)
   26ec4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   26ec8:	e0bffe17 	ldw	r2,-8(fp)
   26ecc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   26ed0:	e0bfff17 	ldw	r2,-4(fp)
   26ed4:	1090000c 	andi	r2,r2,16384
   26ed8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   26edc:	00003c06 	br	26fd0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   26ee0:	e0bffc17 	ldw	r2,-16(fp)
   26ee4:	10800517 	ldw	r2,20(r2)
   26ee8:	10800044 	addi	r2,r2,1
   26eec:	10800fcc 	andi	r2,r2,63
   26ef0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   26ef4:	e0bffc17 	ldw	r2,-16(fp)
   26ef8:	10c00417 	ldw	r3,16(r2)
   26efc:	e0bff717 	ldw	r2,-36(fp)
   26f00:	1880221e 	bne	r3,r2,26f8c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   26f04:	e0bff517 	ldw	r2,-44(fp)
   26f08:	10000526 	beq	r2,zero,26f20 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   26f0c:	0026e6c0 	call	26e6c <alt_get_errno>
   26f10:	1007883a 	mov	r3,r2
   26f14:	008002c4 	movi	r2,11
   26f18:	18800015 	stw	r2,0(r3)
        break;
   26f1c:	00002e06 	br	26fd8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26f20:	0005303a 	rdctl	r2,status
   26f24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26f28:	e0fff917 	ldw	r3,-28(fp)
   26f2c:	00bfff84 	movi	r2,-2
   26f30:	1884703a 	and	r2,r3,r2
   26f34:	1001703a 	wrctl	status,r2
  
  return context;
   26f38:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   26f3c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   26f40:	e0bffc17 	ldw	r2,-16(fp)
   26f44:	10800117 	ldw	r2,4(r2)
   26f48:	10c11014 	ori	r3,r2,1088
   26f4c:	e0bffc17 	ldw	r2,-16(fp)
   26f50:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   26f54:	e0bffc17 	ldw	r2,-16(fp)
   26f58:	10800017 	ldw	r2,0(r2)
   26f5c:	10800304 	addi	r2,r2,12
   26f60:	e0fffc17 	ldw	r3,-16(fp)
   26f64:	18c00117 	ldw	r3,4(r3)
   26f68:	10c00035 	stwio	r3,0(r2)
   26f6c:	e0bff817 	ldw	r2,-32(fp)
   26f70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   26f74:	e0bff617 	ldw	r2,-40(fp)
   26f78:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   26f7c:	e0bffc17 	ldw	r2,-16(fp)
   26f80:	10c00417 	ldw	r3,16(r2)
   26f84:	e0bff717 	ldw	r2,-36(fp)
   26f88:	18bffc26 	beq	r3,r2,26f7c <__alt_data_end+0xfffe6f7c>
      }
    }

    count--;
   26f8c:	e0bff417 	ldw	r2,-48(fp)
   26f90:	10bfffc4 	addi	r2,r2,-1
   26f94:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   26f98:	e0bffc17 	ldw	r2,-16(fp)
   26f9c:	10c00517 	ldw	r3,20(r2)
   26fa0:	e0bffd17 	ldw	r2,-12(fp)
   26fa4:	11000044 	addi	r4,r2,1
   26fa8:	e13ffd15 	stw	r4,-12(fp)
   26fac:	10800003 	ldbu	r2,0(r2)
   26fb0:	1009883a 	mov	r4,r2
   26fb4:	e0bffc17 	ldw	r2,-16(fp)
   26fb8:	10c5883a 	add	r2,r2,r3
   26fbc:	10801704 	addi	r2,r2,92
   26fc0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   26fc4:	e0bffc17 	ldw	r2,-16(fp)
   26fc8:	e0fff717 	ldw	r3,-36(fp)
   26fcc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   26fd0:	e0bff417 	ldw	r2,-48(fp)
   26fd4:	103fc21e 	bne	r2,zero,26ee0 <__alt_data_end+0xfffe6ee0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   26fd8:	0005303a 	rdctl	r2,status
   26fdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   26fe0:	e0fffb17 	ldw	r3,-20(fp)
   26fe4:	00bfff84 	movi	r2,-2
   26fe8:	1884703a 	and	r2,r3,r2
   26fec:	1001703a 	wrctl	status,r2
  
  return context;
   26ff0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   26ff4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   26ff8:	e0bffc17 	ldw	r2,-16(fp)
   26ffc:	10800117 	ldw	r2,4(r2)
   27000:	10c11014 	ori	r3,r2,1088
   27004:	e0bffc17 	ldw	r2,-16(fp)
   27008:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   2700c:	e0bffc17 	ldw	r2,-16(fp)
   27010:	10800017 	ldw	r2,0(r2)
   27014:	10800304 	addi	r2,r2,12
   27018:	e0fffc17 	ldw	r3,-16(fp)
   2701c:	18c00117 	ldw	r3,4(r3)
   27020:	10c00035 	stwio	r3,0(r2)
   27024:	e0bff817 	ldw	r2,-32(fp)
   27028:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2702c:	e0bffa17 	ldw	r2,-24(fp)
   27030:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   27034:	e0fffe17 	ldw	r3,-8(fp)
   27038:	e0bff417 	ldw	r2,-48(fp)
   2703c:	1885c83a 	sub	r2,r3,r2
}
   27040:	e037883a 	mov	sp,fp
   27044:	dfc00117 	ldw	ra,4(sp)
   27048:	df000017 	ldw	fp,0(sp)
   2704c:	dec00204 	addi	sp,sp,8
   27050:	f800283a 	ret

00027054 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   27054:	defff504 	addi	sp,sp,-44
   27058:	df000a15 	stw	fp,40(sp)
   2705c:	df000a04 	addi	fp,sp,40
   27060:	e13ffc15 	stw	r4,-16(fp)
   27064:	e17ffd15 	stw	r5,-12(fp)
   27068:	e1bffe15 	stw	r6,-8(fp)
   2706c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   27070:	e03ff615 	stw	zero,-40(fp)
   27074:	d0a6f417 	ldw	r2,-25648(gp)
  
  if (alt_ticks_per_second ())
   27078:	10003c26 	beq	r2,zero,2716c <alt_alarm_start+0x118>
  {
    if (alarm)
   2707c:	e0bffc17 	ldw	r2,-16(fp)
   27080:	10003826 	beq	r2,zero,27164 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   27084:	e0bffc17 	ldw	r2,-16(fp)
   27088:	e0fffe17 	ldw	r3,-8(fp)
   2708c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   27090:	e0bffc17 	ldw	r2,-16(fp)
   27094:	e0ffff17 	ldw	r3,-4(fp)
   27098:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2709c:	0005303a 	rdctl	r2,status
   270a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   270a4:	e0fff917 	ldw	r3,-28(fp)
   270a8:	00bfff84 	movi	r2,-2
   270ac:	1884703a 	and	r2,r3,r2
   270b0:	1001703a 	wrctl	status,r2
  
  return context;
   270b4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   270b8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   270bc:	d0a6f517 	ldw	r2,-25644(gp)
      
      current_nticks = alt_nticks();
   270c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   270c4:	e0fffd17 	ldw	r3,-12(fp)
   270c8:	e0bff617 	ldw	r2,-40(fp)
   270cc:	1885883a 	add	r2,r3,r2
   270d0:	10c00044 	addi	r3,r2,1
   270d4:	e0bffc17 	ldw	r2,-16(fp)
   270d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   270dc:	e0bffc17 	ldw	r2,-16(fp)
   270e0:	10c00217 	ldw	r3,8(r2)
   270e4:	e0bff617 	ldw	r2,-40(fp)
   270e8:	1880042e 	bgeu	r3,r2,270fc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   270ec:	e0bffc17 	ldw	r2,-16(fp)
   270f0:	00c00044 	movi	r3,1
   270f4:	10c00405 	stb	r3,16(r2)
   270f8:	00000206 	br	27104 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   270fc:	e0bffc17 	ldw	r2,-16(fp)
   27100:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   27104:	e0bffc17 	ldw	r2,-16(fp)
   27108:	d0e00e04 	addi	r3,gp,-32712
   2710c:	e0fffa15 	stw	r3,-24(fp)
   27110:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   27114:	e0bffb17 	ldw	r2,-20(fp)
   27118:	e0fffa17 	ldw	r3,-24(fp)
   2711c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   27120:	e0bffa17 	ldw	r2,-24(fp)
   27124:	10c00017 	ldw	r3,0(r2)
   27128:	e0bffb17 	ldw	r2,-20(fp)
   2712c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   27130:	e0bffa17 	ldw	r2,-24(fp)
   27134:	10800017 	ldw	r2,0(r2)
   27138:	e0fffb17 	ldw	r3,-20(fp)
   2713c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   27140:	e0bffa17 	ldw	r2,-24(fp)
   27144:	e0fffb17 	ldw	r3,-20(fp)
   27148:	10c00015 	stw	r3,0(r2)
   2714c:	e0bff817 	ldw	r2,-32(fp)
   27150:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27154:	e0bff717 	ldw	r2,-36(fp)
   27158:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2715c:	0005883a 	mov	r2,zero
   27160:	00000306 	br	27170 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   27164:	00bffa84 	movi	r2,-22
   27168:	00000106 	br	27170 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2716c:	00bfde84 	movi	r2,-134
  }
}
   27170:	e037883a 	mov	sp,fp
   27174:	df000017 	ldw	fp,0(sp)
   27178:	dec00104 	addi	sp,sp,4
   2717c:	f800283a 	ret

00027180 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   27180:	defffa04 	addi	sp,sp,-24
   27184:	dfc00515 	stw	ra,20(sp)
   27188:	df000415 	stw	fp,16(sp)
   2718c:	df000404 	addi	fp,sp,16
   27190:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   27194:	00800244 	movi	r2,9
   27198:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2719c:	014003f4 	movhi	r5,15
   271a0:	29509004 	addi	r5,r5,16960
   271a4:	e13ffd17 	ldw	r4,-12(fp)
   271a8:	00209fc0 	call	209fc <__mulsi3>
   271ac:	100b883a 	mov	r5,r2
   271b0:	0100bef4 	movhi	r4,763
   271b4:	213c2004 	addi	r4,r4,-3968
   271b8:	00209400 	call	20940 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   271bc:	100b883a 	mov	r5,r2
   271c0:	01200034 	movhi	r4,32768
   271c4:	213fffc4 	addi	r4,r4,-1
   271c8:	00209400 	call	20940 <__udivsi3>
   271cc:	100b883a 	mov	r5,r2
   271d0:	e13fff17 	ldw	r4,-4(fp)
   271d4:	00209400 	call	20940 <__udivsi3>
   271d8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   271dc:	e0bffe17 	ldw	r2,-8(fp)
   271e0:	10002a26 	beq	r2,zero,2728c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   271e4:	e03ffc15 	stw	zero,-16(fp)
   271e8:	00001706 	br	27248 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   271ec:	00a00034 	movhi	r2,32768
   271f0:	10bfffc4 	addi	r2,r2,-1
   271f4:	10bfffc4 	addi	r2,r2,-1
   271f8:	103ffe1e 	bne	r2,zero,271f4 <__alt_data_end+0xfffe71f4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   271fc:	014003f4 	movhi	r5,15
   27200:	29509004 	addi	r5,r5,16960
   27204:	e13ffd17 	ldw	r4,-12(fp)
   27208:	00209fc0 	call	209fc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2720c:	100b883a 	mov	r5,r2
   27210:	0100bef4 	movhi	r4,763
   27214:	213c2004 	addi	r4,r4,-3968
   27218:	00209400 	call	20940 <__udivsi3>
   2721c:	100b883a 	mov	r5,r2
   27220:	01200034 	movhi	r4,32768
   27224:	213fffc4 	addi	r4,r4,-1
   27228:	00209400 	call	20940 <__udivsi3>
   2722c:	1007883a 	mov	r3,r2
   27230:	e0bfff17 	ldw	r2,-4(fp)
   27234:	10c5c83a 	sub	r2,r2,r3
   27238:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2723c:	e0bffc17 	ldw	r2,-16(fp)
   27240:	10800044 	addi	r2,r2,1
   27244:	e0bffc15 	stw	r2,-16(fp)
   27248:	e0fffc17 	ldw	r3,-16(fp)
   2724c:	e0bffe17 	ldw	r2,-8(fp)
   27250:	18bfe616 	blt	r3,r2,271ec <__alt_data_end+0xfffe71ec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   27254:	014003f4 	movhi	r5,15
   27258:	29509004 	addi	r5,r5,16960
   2725c:	e13ffd17 	ldw	r4,-12(fp)
   27260:	00209fc0 	call	209fc <__mulsi3>
   27264:	100b883a 	mov	r5,r2
   27268:	0100bef4 	movhi	r4,763
   2726c:	213c2004 	addi	r4,r4,-3968
   27270:	00209400 	call	20940 <__udivsi3>
   27274:	e17fff17 	ldw	r5,-4(fp)
   27278:	1009883a 	mov	r4,r2
   2727c:	00209fc0 	call	209fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   27280:	10bfffc4 	addi	r2,r2,-1
   27284:	103ffe1e 	bne	r2,zero,27280 <__alt_data_end+0xfffe7280>
   27288:	00000d06 	br	272c0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2728c:	014003f4 	movhi	r5,15
   27290:	29509004 	addi	r5,r5,16960
   27294:	e13ffd17 	ldw	r4,-12(fp)
   27298:	00209fc0 	call	209fc <__mulsi3>
   2729c:	100b883a 	mov	r5,r2
   272a0:	0100bef4 	movhi	r4,763
   272a4:	213c2004 	addi	r4,r4,-3968
   272a8:	00209400 	call	20940 <__udivsi3>
   272ac:	e17fff17 	ldw	r5,-4(fp)
   272b0:	1009883a 	mov	r4,r2
   272b4:	00209fc0 	call	209fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   272b8:	10bfffc4 	addi	r2,r2,-1
   272bc:	00bffe16 	blt	zero,r2,272b8 <__alt_data_end+0xfffe72b8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   272c0:	0005883a 	mov	r2,zero
}
   272c4:	e037883a 	mov	sp,fp
   272c8:	dfc00117 	ldw	ra,4(sp)
   272cc:	df000017 	ldw	fp,0(sp)
   272d0:	dec00204 	addi	sp,sp,8
   272d4:	f800283a 	ret

000272d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   272d8:	deffff04 	addi	sp,sp,-4
   272dc:	df000015 	stw	fp,0(sp)
   272e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   272e4:	0001883a 	nop
   272e8:	e037883a 	mov	sp,fp
   272ec:	df000017 	ldw	fp,0(sp)
   272f0:	dec00104 	addi	sp,sp,4
   272f4:	f800283a 	ret

000272f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   272f8:	defffe04 	addi	sp,sp,-8
   272fc:	dfc00115 	stw	ra,4(sp)
   27300:	df000015 	stw	fp,0(sp)
   27304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   27308:	d0a00917 	ldw	r2,-32732(gp)
   2730c:	10000326 	beq	r2,zero,2731c <alt_get_errno+0x24>
   27310:	d0a00917 	ldw	r2,-32732(gp)
   27314:	103ee83a 	callr	r2
   27318:	00000106 	br	27320 <alt_get_errno+0x28>
   2731c:	d0a6ef04 	addi	r2,gp,-25668
}
   27320:	e037883a 	mov	sp,fp
   27324:	dfc00117 	ldw	ra,4(sp)
   27328:	df000017 	ldw	fp,0(sp)
   2732c:	dec00204 	addi	sp,sp,8
   27330:	f800283a 	ret

00027334 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   27334:	defffa04 	addi	sp,sp,-24
   27338:	dfc00515 	stw	ra,20(sp)
   2733c:	df000415 	stw	fp,16(sp)
   27340:	df000404 	addi	fp,sp,16
   27344:	e13ffe15 	stw	r4,-8(fp)
   27348:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2734c:	e0bffe17 	ldw	r2,-8(fp)
   27350:	10000326 	beq	r2,zero,27360 <alt_dev_llist_insert+0x2c>
   27354:	e0bffe17 	ldw	r2,-8(fp)
   27358:	10800217 	ldw	r2,8(r2)
   2735c:	1000061e 	bne	r2,zero,27378 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   27360:	00272f80 	call	272f8 <alt_get_errno>
   27364:	1007883a 	mov	r3,r2
   27368:	00800584 	movi	r2,22
   2736c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   27370:	00bffa84 	movi	r2,-22
   27374:	00001306 	br	273c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   27378:	e0bffe17 	ldw	r2,-8(fp)
   2737c:	e0ffff17 	ldw	r3,-4(fp)
   27380:	e0fffc15 	stw	r3,-16(fp)
   27384:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   27388:	e0bffd17 	ldw	r2,-12(fp)
   2738c:	e0fffc17 	ldw	r3,-16(fp)
   27390:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   27394:	e0bffc17 	ldw	r2,-16(fp)
   27398:	10c00017 	ldw	r3,0(r2)
   2739c:	e0bffd17 	ldw	r2,-12(fp)
   273a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   273a4:	e0bffc17 	ldw	r2,-16(fp)
   273a8:	10800017 	ldw	r2,0(r2)
   273ac:	e0fffd17 	ldw	r3,-12(fp)
   273b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   273b4:	e0bffc17 	ldw	r2,-16(fp)
   273b8:	e0fffd17 	ldw	r3,-12(fp)
   273bc:	10c00015 	stw	r3,0(r2)

  return 0;  
   273c0:	0005883a 	mov	r2,zero
}
   273c4:	e037883a 	mov	sp,fp
   273c8:	dfc00117 	ldw	ra,4(sp)
   273cc:	df000017 	ldw	fp,0(sp)
   273d0:	dec00204 	addi	sp,sp,8
   273d4:	f800283a 	ret

000273d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   273d8:	defffd04 	addi	sp,sp,-12
   273dc:	dfc00215 	stw	ra,8(sp)
   273e0:	df000115 	stw	fp,4(sp)
   273e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   273e8:	008000f4 	movhi	r2,3
   273ec:	10a22d04 	addi	r2,r2,-30540
   273f0:	e0bfff15 	stw	r2,-4(fp)
   273f4:	00000606 	br	27410 <_do_ctors+0x38>
        (*ctor) (); 
   273f8:	e0bfff17 	ldw	r2,-4(fp)
   273fc:	10800017 	ldw	r2,0(r2)
   27400:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   27404:	e0bfff17 	ldw	r2,-4(fp)
   27408:	10bfff04 	addi	r2,r2,-4
   2740c:	e0bfff15 	stw	r2,-4(fp)
   27410:	e0ffff17 	ldw	r3,-4(fp)
   27414:	008000f4 	movhi	r2,3
   27418:	10a22e04 	addi	r2,r2,-30536
   2741c:	18bff62e 	bgeu	r3,r2,273f8 <__alt_data_end+0xfffe73f8>
        (*ctor) (); 
}
   27420:	0001883a 	nop
   27424:	e037883a 	mov	sp,fp
   27428:	dfc00117 	ldw	ra,4(sp)
   2742c:	df000017 	ldw	fp,0(sp)
   27430:	dec00204 	addi	sp,sp,8
   27434:	f800283a 	ret

00027438 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   27438:	defffd04 	addi	sp,sp,-12
   2743c:	dfc00215 	stw	ra,8(sp)
   27440:	df000115 	stw	fp,4(sp)
   27444:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   27448:	008000f4 	movhi	r2,3
   2744c:	10a22d04 	addi	r2,r2,-30540
   27450:	e0bfff15 	stw	r2,-4(fp)
   27454:	00000606 	br	27470 <_do_dtors+0x38>
        (*dtor) (); 
   27458:	e0bfff17 	ldw	r2,-4(fp)
   2745c:	10800017 	ldw	r2,0(r2)
   27460:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   27464:	e0bfff17 	ldw	r2,-4(fp)
   27468:	10bfff04 	addi	r2,r2,-4
   2746c:	e0bfff15 	stw	r2,-4(fp)
   27470:	e0ffff17 	ldw	r3,-4(fp)
   27474:	008000f4 	movhi	r2,3
   27478:	10a22e04 	addi	r2,r2,-30536
   2747c:	18bff62e 	bgeu	r3,r2,27458 <__alt_data_end+0xfffe7458>
        (*dtor) (); 
}
   27480:	0001883a 	nop
   27484:	e037883a 	mov	sp,fp
   27488:	dfc00117 	ldw	ra,4(sp)
   2748c:	df000017 	ldw	fp,0(sp)
   27490:	dec00204 	addi	sp,sp,8
   27494:	f800283a 	ret

00027498 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   27498:	defffa04 	addi	sp,sp,-24
   2749c:	dfc00515 	stw	ra,20(sp)
   274a0:	df000415 	stw	fp,16(sp)
   274a4:	df000404 	addi	fp,sp,16
   274a8:	e13ffe15 	stw	r4,-8(fp)
   274ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   274b0:	e0bfff17 	ldw	r2,-4(fp)
   274b4:	10800017 	ldw	r2,0(r2)
   274b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   274bc:	e13ffe17 	ldw	r4,-8(fp)
   274c0:	0020af80 	call	20af8 <strlen>
   274c4:	10800044 	addi	r2,r2,1
   274c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   274cc:	00000d06 	br	27504 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   274d0:	e0bffc17 	ldw	r2,-16(fp)
   274d4:	10800217 	ldw	r2,8(r2)
   274d8:	e0fffd17 	ldw	r3,-12(fp)
   274dc:	180d883a 	mov	r6,r3
   274e0:	e17ffe17 	ldw	r5,-8(fp)
   274e4:	1009883a 	mov	r4,r2
   274e8:	00282b00 	call	282b0 <memcmp>
   274ec:	1000021e 	bne	r2,zero,274f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   274f0:	e0bffc17 	ldw	r2,-16(fp)
   274f4:	00000706 	br	27514 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   274f8:	e0bffc17 	ldw	r2,-16(fp)
   274fc:	10800017 	ldw	r2,0(r2)
   27500:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   27504:	e0fffc17 	ldw	r3,-16(fp)
   27508:	e0bfff17 	ldw	r2,-4(fp)
   2750c:	18bff01e 	bne	r3,r2,274d0 <__alt_data_end+0xfffe74d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   27510:	0005883a 	mov	r2,zero
}
   27514:	e037883a 	mov	sp,fp
   27518:	dfc00117 	ldw	ra,4(sp)
   2751c:	df000017 	ldw	fp,0(sp)
   27520:	dec00204 	addi	sp,sp,8
   27524:	f800283a 	ret

00027528 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   27528:	deffff04 	addi	sp,sp,-4
   2752c:	df000015 	stw	fp,0(sp)
   27530:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   27534:	0001883a 	nop
   27538:	e037883a 	mov	sp,fp
   2753c:	df000017 	ldw	fp,0(sp)
   27540:	dec00104 	addi	sp,sp,4
   27544:	f800283a 	ret

00027548 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   27548:	defff904 	addi	sp,sp,-28
   2754c:	dfc00615 	stw	ra,24(sp)
   27550:	df000515 	stw	fp,20(sp)
   27554:	df000504 	addi	fp,sp,20
   27558:	e13ffc15 	stw	r4,-16(fp)
   2755c:	e17ffd15 	stw	r5,-12(fp)
   27560:	e1bffe15 	stw	r6,-8(fp)
   27564:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   27568:	e0800217 	ldw	r2,8(fp)
   2756c:	d8800015 	stw	r2,0(sp)
   27570:	e1ffff17 	ldw	r7,-4(fp)
   27574:	e1bffe17 	ldw	r6,-8(fp)
   27578:	e17ffd17 	ldw	r5,-12(fp)
   2757c:	e13ffc17 	ldw	r4,-16(fp)
   27580:	00276f80 	call	276f8 <alt_iic_isr_register>
}  
   27584:	e037883a 	mov	sp,fp
   27588:	dfc00117 	ldw	ra,4(sp)
   2758c:	df000017 	ldw	fp,0(sp)
   27590:	dec00204 	addi	sp,sp,8
   27594:	f800283a 	ret

00027598 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   27598:	defff904 	addi	sp,sp,-28
   2759c:	df000615 	stw	fp,24(sp)
   275a0:	df000604 	addi	fp,sp,24
   275a4:	e13ffe15 	stw	r4,-8(fp)
   275a8:	e17fff15 	stw	r5,-4(fp)
   275ac:	e0bfff17 	ldw	r2,-4(fp)
   275b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   275b4:	0005303a 	rdctl	r2,status
   275b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   275bc:	e0fffb17 	ldw	r3,-20(fp)
   275c0:	00bfff84 	movi	r2,-2
   275c4:	1884703a 	and	r2,r3,r2
   275c8:	1001703a 	wrctl	status,r2
  
  return context;
   275cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   275d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   275d4:	00c00044 	movi	r3,1
   275d8:	e0bffa17 	ldw	r2,-24(fp)
   275dc:	1884983a 	sll	r2,r3,r2
   275e0:	1007883a 	mov	r3,r2
   275e4:	d0a6f317 	ldw	r2,-25652(gp)
   275e8:	1884b03a 	or	r2,r3,r2
   275ec:	d0a6f315 	stw	r2,-25652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   275f0:	d0a6f317 	ldw	r2,-25652(gp)
   275f4:	100170fa 	wrctl	ienable,r2
   275f8:	e0bffc17 	ldw	r2,-16(fp)
   275fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27600:	e0bffd17 	ldw	r2,-12(fp)
   27604:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   27608:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2760c:	0001883a 	nop
}
   27610:	e037883a 	mov	sp,fp
   27614:	df000017 	ldw	fp,0(sp)
   27618:	dec00104 	addi	sp,sp,4
   2761c:	f800283a 	ret

00027620 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   27620:	defff904 	addi	sp,sp,-28
   27624:	df000615 	stw	fp,24(sp)
   27628:	df000604 	addi	fp,sp,24
   2762c:	e13ffe15 	stw	r4,-8(fp)
   27630:	e17fff15 	stw	r5,-4(fp)
   27634:	e0bfff17 	ldw	r2,-4(fp)
   27638:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2763c:	0005303a 	rdctl	r2,status
   27640:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27644:	e0fffb17 	ldw	r3,-20(fp)
   27648:	00bfff84 	movi	r2,-2
   2764c:	1884703a 	and	r2,r3,r2
   27650:	1001703a 	wrctl	status,r2
  
  return context;
   27654:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   27658:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2765c:	00c00044 	movi	r3,1
   27660:	e0bffa17 	ldw	r2,-24(fp)
   27664:	1884983a 	sll	r2,r3,r2
   27668:	0084303a 	nor	r2,zero,r2
   2766c:	1007883a 	mov	r3,r2
   27670:	d0a6f317 	ldw	r2,-25652(gp)
   27674:	1884703a 	and	r2,r3,r2
   27678:	d0a6f315 	stw	r2,-25652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2767c:	d0a6f317 	ldw	r2,-25652(gp)
   27680:	100170fa 	wrctl	ienable,r2
   27684:	e0bffc17 	ldw	r2,-16(fp)
   27688:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2768c:	e0bffd17 	ldw	r2,-12(fp)
   27690:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   27694:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   27698:	0001883a 	nop
}
   2769c:	e037883a 	mov	sp,fp
   276a0:	df000017 	ldw	fp,0(sp)
   276a4:	dec00104 	addi	sp,sp,4
   276a8:	f800283a 	ret

000276ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   276ac:	defffc04 	addi	sp,sp,-16
   276b0:	df000315 	stw	fp,12(sp)
   276b4:	df000304 	addi	fp,sp,12
   276b8:	e13ffe15 	stw	r4,-8(fp)
   276bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   276c0:	000530fa 	rdctl	r2,ienable
   276c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   276c8:	00c00044 	movi	r3,1
   276cc:	e0bfff17 	ldw	r2,-4(fp)
   276d0:	1884983a 	sll	r2,r3,r2
   276d4:	1007883a 	mov	r3,r2
   276d8:	e0bffd17 	ldw	r2,-12(fp)
   276dc:	1884703a 	and	r2,r3,r2
   276e0:	1004c03a 	cmpne	r2,r2,zero
   276e4:	10803fcc 	andi	r2,r2,255
}
   276e8:	e037883a 	mov	sp,fp
   276ec:	df000017 	ldw	fp,0(sp)
   276f0:	dec00104 	addi	sp,sp,4
   276f4:	f800283a 	ret

000276f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   276f8:	defff504 	addi	sp,sp,-44
   276fc:	dfc00a15 	stw	ra,40(sp)
   27700:	df000915 	stw	fp,36(sp)
   27704:	df000904 	addi	fp,sp,36
   27708:	e13ffc15 	stw	r4,-16(fp)
   2770c:	e17ffd15 	stw	r5,-12(fp)
   27710:	e1bffe15 	stw	r6,-8(fp)
   27714:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   27718:	00bffa84 	movi	r2,-22
   2771c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   27720:	e0bffd17 	ldw	r2,-12(fp)
   27724:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   27728:	e0bff817 	ldw	r2,-32(fp)
   2772c:	10800808 	cmpgei	r2,r2,32
   27730:	1000271e 	bne	r2,zero,277d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27734:	0005303a 	rdctl	r2,status
   27738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2773c:	e0fffb17 	ldw	r3,-20(fp)
   27740:	00bfff84 	movi	r2,-2
   27744:	1884703a 	and	r2,r3,r2
   27748:	1001703a 	wrctl	status,r2
  
  return context;
   2774c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   27750:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   27754:	008000f4 	movhi	r2,3
   27758:	10b03c04 	addi	r2,r2,-16144
   2775c:	e0fff817 	ldw	r3,-32(fp)
   27760:	180690fa 	slli	r3,r3,3
   27764:	10c5883a 	add	r2,r2,r3
   27768:	e0fffe17 	ldw	r3,-8(fp)
   2776c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   27770:	008000f4 	movhi	r2,3
   27774:	10b03c04 	addi	r2,r2,-16144
   27778:	e0fff817 	ldw	r3,-32(fp)
   2777c:	180690fa 	slli	r3,r3,3
   27780:	10c5883a 	add	r2,r2,r3
   27784:	10800104 	addi	r2,r2,4
   27788:	e0ffff17 	ldw	r3,-4(fp)
   2778c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   27790:	e0bffe17 	ldw	r2,-8(fp)
   27794:	10000526 	beq	r2,zero,277ac <alt_iic_isr_register+0xb4>
   27798:	e0bff817 	ldw	r2,-32(fp)
   2779c:	100b883a 	mov	r5,r2
   277a0:	e13ffc17 	ldw	r4,-16(fp)
   277a4:	00275980 	call	27598 <alt_ic_irq_enable>
   277a8:	00000406 	br	277bc <alt_iic_isr_register+0xc4>
   277ac:	e0bff817 	ldw	r2,-32(fp)
   277b0:	100b883a 	mov	r5,r2
   277b4:	e13ffc17 	ldw	r4,-16(fp)
   277b8:	00276200 	call	27620 <alt_ic_irq_disable>
   277bc:	e0bff715 	stw	r2,-36(fp)
   277c0:	e0bffa17 	ldw	r2,-24(fp)
   277c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   277c8:	e0bff917 	ldw	r2,-28(fp)
   277cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   277d0:	e0bff717 	ldw	r2,-36(fp)
}
   277d4:	e037883a 	mov	sp,fp
   277d8:	dfc00117 	ldw	ra,4(sp)
   277dc:	df000017 	ldw	fp,0(sp)
   277e0:	dec00204 	addi	sp,sp,8
   277e4:	f800283a 	ret

000277e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   277e8:	defff804 	addi	sp,sp,-32
   277ec:	dfc00715 	stw	ra,28(sp)
   277f0:	df000615 	stw	fp,24(sp)
   277f4:	dc000515 	stw	r16,20(sp)
   277f8:	df000604 	addi	fp,sp,24
   277fc:	e13ffb15 	stw	r4,-20(fp)
   27800:	e17ffc15 	stw	r5,-16(fp)
   27804:	e1bffd15 	stw	r6,-12(fp)
   27808:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   2780c:	e1bffe17 	ldw	r6,-8(fp)
   27810:	e17ffd17 	ldw	r5,-12(fp)
   27814:	e13ffc17 	ldw	r4,-16(fp)
   27818:	0027a700 	call	27a70 <open>
   2781c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   27820:	e0bffa17 	ldw	r2,-24(fp)
   27824:	10002216 	blt	r2,zero,278b0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   27828:	040000f4 	movhi	r16,3
   2782c:	84248404 	addi	r16,r16,-28144
   27830:	e0bffa17 	ldw	r2,-24(fp)
   27834:	01400304 	movi	r5,12
   27838:	1009883a 	mov	r4,r2
   2783c:	00209fc0 	call	209fc <__mulsi3>
   27840:	8085883a 	add	r2,r16,r2
   27844:	10c00017 	ldw	r3,0(r2)
   27848:	e0bffb17 	ldw	r2,-20(fp)
   2784c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   27850:	040000f4 	movhi	r16,3
   27854:	84248404 	addi	r16,r16,-28144
   27858:	e0bffa17 	ldw	r2,-24(fp)
   2785c:	01400304 	movi	r5,12
   27860:	1009883a 	mov	r4,r2
   27864:	00209fc0 	call	209fc <__mulsi3>
   27868:	8085883a 	add	r2,r16,r2
   2786c:	10800104 	addi	r2,r2,4
   27870:	10c00017 	ldw	r3,0(r2)
   27874:	e0bffb17 	ldw	r2,-20(fp)
   27878:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2787c:	040000f4 	movhi	r16,3
   27880:	84248404 	addi	r16,r16,-28144
   27884:	e0bffa17 	ldw	r2,-24(fp)
   27888:	01400304 	movi	r5,12
   2788c:	1009883a 	mov	r4,r2
   27890:	00209fc0 	call	209fc <__mulsi3>
   27894:	8085883a 	add	r2,r16,r2
   27898:	10800204 	addi	r2,r2,8
   2789c:	10c00017 	ldw	r3,0(r2)
   278a0:	e0bffb17 	ldw	r2,-20(fp)
   278a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   278a8:	e13ffa17 	ldw	r4,-24(fp)
   278ac:	0023d780 	call	23d78 <alt_release_fd>
  }
} 
   278b0:	0001883a 	nop
   278b4:	e6ffff04 	addi	sp,fp,-4
   278b8:	dfc00217 	ldw	ra,8(sp)
   278bc:	df000117 	ldw	fp,4(sp)
   278c0:	dc000017 	ldw	r16,0(sp)
   278c4:	dec00304 	addi	sp,sp,12
   278c8:	f800283a 	ret

000278cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   278cc:	defffb04 	addi	sp,sp,-20
   278d0:	dfc00415 	stw	ra,16(sp)
   278d4:	df000315 	stw	fp,12(sp)
   278d8:	df000304 	addi	fp,sp,12
   278dc:	e13ffd15 	stw	r4,-12(fp)
   278e0:	e17ffe15 	stw	r5,-8(fp)
   278e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   278e8:	01c07fc4 	movi	r7,511
   278ec:	01800044 	movi	r6,1
   278f0:	e17ffd17 	ldw	r5,-12(fp)
   278f4:	010000f4 	movhi	r4,3
   278f8:	21248704 	addi	r4,r4,-28132
   278fc:	00277e80 	call	277e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   27900:	01c07fc4 	movi	r7,511
   27904:	000d883a 	mov	r6,zero
   27908:	e17ffe17 	ldw	r5,-8(fp)
   2790c:	010000f4 	movhi	r4,3
   27910:	21248404 	addi	r4,r4,-28144
   27914:	00277e80 	call	277e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   27918:	01c07fc4 	movi	r7,511
   2791c:	01800044 	movi	r6,1
   27920:	e17fff17 	ldw	r5,-4(fp)
   27924:	010000f4 	movhi	r4,3
   27928:	21248a04 	addi	r4,r4,-28120
   2792c:	00277e80 	call	277e8 <alt_open_fd>
}  
   27930:	0001883a 	nop
   27934:	e037883a 	mov	sp,fp
   27938:	dfc00117 	ldw	ra,4(sp)
   2793c:	df000017 	ldw	fp,0(sp)
   27940:	dec00204 	addi	sp,sp,8
   27944:	f800283a 	ret

00027948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   27948:	defffe04 	addi	sp,sp,-8
   2794c:	dfc00115 	stw	ra,4(sp)
   27950:	df000015 	stw	fp,0(sp)
   27954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   27958:	d0a00917 	ldw	r2,-32732(gp)
   2795c:	10000326 	beq	r2,zero,2796c <alt_get_errno+0x24>
   27960:	d0a00917 	ldw	r2,-32732(gp)
   27964:	103ee83a 	callr	r2
   27968:	00000106 	br	27970 <alt_get_errno+0x28>
   2796c:	d0a6ef04 	addi	r2,gp,-25668
}
   27970:	e037883a 	mov	sp,fp
   27974:	dfc00117 	ldw	ra,4(sp)
   27978:	df000017 	ldw	fp,0(sp)
   2797c:	dec00204 	addi	sp,sp,8
   27980:	f800283a 	ret

00027984 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   27984:	defffb04 	addi	sp,sp,-20
   27988:	dfc00415 	stw	ra,16(sp)
   2798c:	df000315 	stw	fp,12(sp)
   27990:	dc000215 	stw	r16,8(sp)
   27994:	df000304 	addi	fp,sp,12
   27998:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2799c:	e0bffe17 	ldw	r2,-8(fp)
   279a0:	10800217 	ldw	r2,8(r2)
   279a4:	10d00034 	orhi	r3,r2,16384
   279a8:	e0bffe17 	ldw	r2,-8(fp)
   279ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   279b0:	e03ffd15 	stw	zero,-12(fp)
   279b4:	00002306 	br	27a44 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   279b8:	040000f4 	movhi	r16,3
   279bc:	84248404 	addi	r16,r16,-28144
   279c0:	e0bffd17 	ldw	r2,-12(fp)
   279c4:	01400304 	movi	r5,12
   279c8:	1009883a 	mov	r4,r2
   279cc:	00209fc0 	call	209fc <__mulsi3>
   279d0:	8085883a 	add	r2,r16,r2
   279d4:	10c00017 	ldw	r3,0(r2)
   279d8:	e0bffe17 	ldw	r2,-8(fp)
   279dc:	10800017 	ldw	r2,0(r2)
   279e0:	1880151e 	bne	r3,r2,27a38 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   279e4:	040000f4 	movhi	r16,3
   279e8:	84248404 	addi	r16,r16,-28144
   279ec:	e0bffd17 	ldw	r2,-12(fp)
   279f0:	01400304 	movi	r5,12
   279f4:	1009883a 	mov	r4,r2
   279f8:	00209fc0 	call	209fc <__mulsi3>
   279fc:	8085883a 	add	r2,r16,r2
   27a00:	10800204 	addi	r2,r2,8
   27a04:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   27a08:	10000b0e 	bge	r2,zero,27a38 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   27a0c:	01400304 	movi	r5,12
   27a10:	e13ffd17 	ldw	r4,-12(fp)
   27a14:	00209fc0 	call	209fc <__mulsi3>
   27a18:	1007883a 	mov	r3,r2
   27a1c:	008000f4 	movhi	r2,3
   27a20:	10a48404 	addi	r2,r2,-28144
   27a24:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   27a28:	e0bffe17 	ldw	r2,-8(fp)
   27a2c:	18800226 	beq	r3,r2,27a38 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   27a30:	00bffcc4 	movi	r2,-13
   27a34:	00000806 	br	27a58 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   27a38:	e0bffd17 	ldw	r2,-12(fp)
   27a3c:	10800044 	addi	r2,r2,1
   27a40:	e0bffd15 	stw	r2,-12(fp)
   27a44:	d0a00817 	ldw	r2,-32736(gp)
   27a48:	1007883a 	mov	r3,r2
   27a4c:	e0bffd17 	ldw	r2,-12(fp)
   27a50:	18bfd92e 	bgeu	r3,r2,279b8 <__alt_data_end+0xfffe79b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   27a54:	0005883a 	mov	r2,zero
}
   27a58:	e6ffff04 	addi	sp,fp,-4
   27a5c:	dfc00217 	ldw	ra,8(sp)
   27a60:	df000117 	ldw	fp,4(sp)
   27a64:	dc000017 	ldw	r16,0(sp)
   27a68:	dec00304 	addi	sp,sp,12
   27a6c:	f800283a 	ret

00027a70 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   27a70:	defff604 	addi	sp,sp,-40
   27a74:	dfc00915 	stw	ra,36(sp)
   27a78:	df000815 	stw	fp,32(sp)
   27a7c:	df000804 	addi	fp,sp,32
   27a80:	e13ffd15 	stw	r4,-12(fp)
   27a84:	e17ffe15 	stw	r5,-8(fp)
   27a88:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   27a8c:	00bfffc4 	movi	r2,-1
   27a90:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   27a94:	00bffb44 	movi	r2,-19
   27a98:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   27a9c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   27aa0:	d1600604 	addi	r5,gp,-32744
   27aa4:	e13ffd17 	ldw	r4,-12(fp)
   27aa8:	00274980 	call	27498 <alt_find_dev>
   27aac:	e0bff815 	stw	r2,-32(fp)
   27ab0:	e0bff817 	ldw	r2,-32(fp)
   27ab4:	1000051e 	bne	r2,zero,27acc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   27ab8:	e13ffd17 	ldw	r4,-12(fp)
   27abc:	0027ffc0 	call	27ffc <alt_find_file>
   27ac0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   27ac4:	00800044 	movi	r2,1
   27ac8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   27acc:	e0bff817 	ldw	r2,-32(fp)
   27ad0:	10002b26 	beq	r2,zero,27b80 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   27ad4:	e13ff817 	ldw	r4,-32(fp)
   27ad8:	00281040 	call	28104 <alt_get_fd>
   27adc:	e0bff915 	stw	r2,-28(fp)
   27ae0:	e0bff917 	ldw	r2,-28(fp)
   27ae4:	1000030e 	bge	r2,zero,27af4 <open+0x84>
    {
      status = index;
   27ae8:	e0bff917 	ldw	r2,-28(fp)
   27aec:	e0bffa15 	stw	r2,-24(fp)
   27af0:	00002506 	br	27b88 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   27af4:	01400304 	movi	r5,12
   27af8:	e13ff917 	ldw	r4,-28(fp)
   27afc:	00209fc0 	call	209fc <__mulsi3>
   27b00:	1007883a 	mov	r3,r2
   27b04:	008000f4 	movhi	r2,3
   27b08:	10a48404 	addi	r2,r2,-28144
   27b0c:	1885883a 	add	r2,r3,r2
   27b10:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   27b14:	e0fffe17 	ldw	r3,-8(fp)
   27b18:	00900034 	movhi	r2,16384
   27b1c:	10bfffc4 	addi	r2,r2,-1
   27b20:	1886703a 	and	r3,r3,r2
   27b24:	e0bffc17 	ldw	r2,-16(fp)
   27b28:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   27b2c:	e0bffb17 	ldw	r2,-20(fp)
   27b30:	1000051e 	bne	r2,zero,27b48 <open+0xd8>
   27b34:	e13ffc17 	ldw	r4,-16(fp)
   27b38:	00279840 	call	27984 <alt_file_locked>
   27b3c:	e0bffa15 	stw	r2,-24(fp)
   27b40:	e0bffa17 	ldw	r2,-24(fp)
   27b44:	10001016 	blt	r2,zero,27b88 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   27b48:	e0bff817 	ldw	r2,-32(fp)
   27b4c:	10800317 	ldw	r2,12(r2)
   27b50:	10000826 	beq	r2,zero,27b74 <open+0x104>
   27b54:	e0bff817 	ldw	r2,-32(fp)
   27b58:	10800317 	ldw	r2,12(r2)
   27b5c:	e1ffff17 	ldw	r7,-4(fp)
   27b60:	e1bffe17 	ldw	r6,-8(fp)
   27b64:	e17ffd17 	ldw	r5,-12(fp)
   27b68:	e13ffc17 	ldw	r4,-16(fp)
   27b6c:	103ee83a 	callr	r2
   27b70:	00000106 	br	27b78 <open+0x108>
   27b74:	0005883a 	mov	r2,zero
   27b78:	e0bffa15 	stw	r2,-24(fp)
   27b7c:	00000206 	br	27b88 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   27b80:	00bffb44 	movi	r2,-19
   27b84:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   27b88:	e0bffa17 	ldw	r2,-24(fp)
   27b8c:	1000090e 	bge	r2,zero,27bb4 <open+0x144>
  {
    alt_release_fd (index);  
   27b90:	e13ff917 	ldw	r4,-28(fp)
   27b94:	0023d780 	call	23d78 <alt_release_fd>
    ALT_ERRNO = -status;
   27b98:	00279480 	call	27948 <alt_get_errno>
   27b9c:	1007883a 	mov	r3,r2
   27ba0:	e0bffa17 	ldw	r2,-24(fp)
   27ba4:	0085c83a 	sub	r2,zero,r2
   27ba8:	18800015 	stw	r2,0(r3)
    return -1;
   27bac:	00bfffc4 	movi	r2,-1
   27bb0:	00000106 	br	27bb8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   27bb4:	e0bff917 	ldw	r2,-28(fp)
}
   27bb8:	e037883a 	mov	sp,fp
   27bbc:	dfc00117 	ldw	ra,4(sp)
   27bc0:	df000017 	ldw	fp,0(sp)
   27bc4:	dec00204 	addi	sp,sp,8
   27bc8:	f800283a 	ret

00027bcc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   27bcc:	defff204 	addi	sp,sp,-56
   27bd0:	dfc00a15 	stw	ra,40(sp)
   27bd4:	df000915 	stw	fp,36(sp)
   27bd8:	df000904 	addi	fp,sp,36
   27bdc:	e13fff15 	stw	r4,-4(fp)
   27be0:	e1400215 	stw	r5,8(fp)
   27be4:	e1800315 	stw	r6,12(fp)
   27be8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   27bec:	e0800204 	addi	r2,fp,8
   27bf0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   27bf4:	e0bfff17 	ldw	r2,-4(fp)
   27bf8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   27bfc:	00006f06 	br	27dbc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   27c00:	e0bff807 	ldb	r2,-32(fp)
   27c04:	10800960 	cmpeqi	r2,r2,37
   27c08:	1000041e 	bne	r2,zero,27c1c <alt_printf+0x50>
        {
            alt_putchar(c);
   27c0c:	e0bff807 	ldb	r2,-32(fp)
   27c10:	1009883a 	mov	r4,r2
   27c14:	0027df80 	call	27df8 <alt_putchar>
   27c18:	00006806 	br	27dbc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   27c1c:	e0bff717 	ldw	r2,-36(fp)
   27c20:	10c00044 	addi	r3,r2,1
   27c24:	e0fff715 	stw	r3,-36(fp)
   27c28:	10800003 	ldbu	r2,0(r2)
   27c2c:	e0bff805 	stb	r2,-32(fp)
   27c30:	e0bff807 	ldb	r2,-32(fp)
   27c34:	10006926 	beq	r2,zero,27ddc <alt_printf+0x210>
            {
                if (c == '%')
   27c38:	e0bff807 	ldb	r2,-32(fp)
   27c3c:	10800958 	cmpnei	r2,r2,37
   27c40:	1000041e 	bne	r2,zero,27c54 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   27c44:	e0bff807 	ldb	r2,-32(fp)
   27c48:	1009883a 	mov	r4,r2
   27c4c:	0027df80 	call	27df8 <alt_putchar>
   27c50:	00005a06 	br	27dbc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   27c54:	e0bff807 	ldb	r2,-32(fp)
   27c58:	108018d8 	cmpnei	r2,r2,99
   27c5c:	1000081e 	bne	r2,zero,27c80 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   27c60:	e0bffe17 	ldw	r2,-8(fp)
   27c64:	10c00104 	addi	r3,r2,4
   27c68:	e0fffe15 	stw	r3,-8(fp)
   27c6c:	10800017 	ldw	r2,0(r2)
   27c70:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   27c74:	e13ffd17 	ldw	r4,-12(fp)
   27c78:	0027df80 	call	27df8 <alt_putchar>
   27c7c:	00004f06 	br	27dbc <alt_printf+0x1f0>
                }
                else if (c == 'x')
   27c80:	e0bff807 	ldb	r2,-32(fp)
   27c84:	10801e18 	cmpnei	r2,r2,120
   27c88:	1000341e 	bne	r2,zero,27d5c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   27c8c:	e0bffe17 	ldw	r2,-8(fp)
   27c90:	10c00104 	addi	r3,r2,4
   27c94:	e0fffe15 	stw	r3,-8(fp)
   27c98:	10800017 	ldw	r2,0(r2)
   27c9c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   27ca0:	e0bffb17 	ldw	r2,-20(fp)
   27ca4:	1000031e 	bne	r2,zero,27cb4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   27ca8:	01000c04 	movi	r4,48
   27cac:	0027df80 	call	27df8 <alt_putchar>
                        continue;
   27cb0:	00004206 	br	27dbc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   27cb4:	00800704 	movi	r2,28
   27cb8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   27cbc:	00000306 	br	27ccc <alt_printf+0x100>
                        digit_shift -= 4;
   27cc0:	e0bff917 	ldw	r2,-28(fp)
   27cc4:	10bfff04 	addi	r2,r2,-4
   27cc8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   27ccc:	00c003c4 	movi	r3,15
   27cd0:	e0bff917 	ldw	r2,-28(fp)
   27cd4:	1884983a 	sll	r2,r3,r2
   27cd8:	1007883a 	mov	r3,r2
   27cdc:	e0bffb17 	ldw	r2,-20(fp)
   27ce0:	1884703a 	and	r2,r3,r2
   27ce4:	103ff626 	beq	r2,zero,27cc0 <__alt_data_end+0xfffe7cc0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   27ce8:	00001906 	br	27d50 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   27cec:	00c003c4 	movi	r3,15
   27cf0:	e0bff917 	ldw	r2,-28(fp)
   27cf4:	1884983a 	sll	r2,r3,r2
   27cf8:	1007883a 	mov	r3,r2
   27cfc:	e0bffb17 	ldw	r2,-20(fp)
   27d00:	1886703a 	and	r3,r3,r2
   27d04:	e0bff917 	ldw	r2,-28(fp)
   27d08:	1884d83a 	srl	r2,r3,r2
   27d0c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   27d10:	e0bffc17 	ldw	r2,-16(fp)
   27d14:	108002a8 	cmpgeui	r2,r2,10
   27d18:	1000041e 	bne	r2,zero,27d2c <alt_printf+0x160>
                            c = '0' + digit;
   27d1c:	e0bffc17 	ldw	r2,-16(fp)
   27d20:	10800c04 	addi	r2,r2,48
   27d24:	e0bff805 	stb	r2,-32(fp)
   27d28:	00000306 	br	27d38 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   27d2c:	e0bffc17 	ldw	r2,-16(fp)
   27d30:	108015c4 	addi	r2,r2,87
   27d34:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   27d38:	e0bff807 	ldb	r2,-32(fp)
   27d3c:	1009883a 	mov	r4,r2
   27d40:	0027df80 	call	27df8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   27d44:	e0bff917 	ldw	r2,-28(fp)
   27d48:	10bfff04 	addi	r2,r2,-4
   27d4c:	e0bff915 	stw	r2,-28(fp)
   27d50:	e0bff917 	ldw	r2,-28(fp)
   27d54:	103fe50e 	bge	r2,zero,27cec <__alt_data_end+0xfffe7cec>
   27d58:	00001806 	br	27dbc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   27d5c:	e0bff807 	ldb	r2,-32(fp)
   27d60:	10801cd8 	cmpnei	r2,r2,115
   27d64:	1000151e 	bne	r2,zero,27dbc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   27d68:	e0bffe17 	ldw	r2,-8(fp)
   27d6c:	10c00104 	addi	r3,r2,4
   27d70:	e0fffe15 	stw	r3,-8(fp)
   27d74:	10800017 	ldw	r2,0(r2)
   27d78:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   27d7c:	00000906 	br	27da4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   27d80:	e0bffa17 	ldw	r2,-24(fp)
   27d84:	10c00044 	addi	r3,r2,1
   27d88:	e0fffa15 	stw	r3,-24(fp)
   27d8c:	10800003 	ldbu	r2,0(r2)
   27d90:	10803fcc 	andi	r2,r2,255
   27d94:	1080201c 	xori	r2,r2,128
   27d98:	10bfe004 	addi	r2,r2,-128
   27d9c:	1009883a 	mov	r4,r2
   27da0:	0027df80 	call	27df8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   27da4:	e0bffa17 	ldw	r2,-24(fp)
   27da8:	10800003 	ldbu	r2,0(r2)
   27dac:	10803fcc 	andi	r2,r2,255
   27db0:	1080201c 	xori	r2,r2,128
   27db4:	10bfe004 	addi	r2,r2,-128
   27db8:	103ff11e 	bne	r2,zero,27d80 <__alt_data_end+0xfffe7d80>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   27dbc:	e0bff717 	ldw	r2,-36(fp)
   27dc0:	10c00044 	addi	r3,r2,1
   27dc4:	e0fff715 	stw	r3,-36(fp)
   27dc8:	10800003 	ldbu	r2,0(r2)
   27dcc:	e0bff805 	stb	r2,-32(fp)
   27dd0:	e0bff807 	ldb	r2,-32(fp)
   27dd4:	103f8a1e 	bne	r2,zero,27c00 <__alt_data_end+0xfffe7c00>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   27dd8:	00000106 	br	27de0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   27ddc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   27de0:	0001883a 	nop
   27de4:	e037883a 	mov	sp,fp
   27de8:	dfc00117 	ldw	ra,4(sp)
   27dec:	df000017 	ldw	fp,0(sp)
   27df0:	dec00504 	addi	sp,sp,20
   27df4:	f800283a 	ret

00027df8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   27df8:	defffd04 	addi	sp,sp,-12
   27dfc:	dfc00215 	stw	ra,8(sp)
   27e00:	df000115 	stw	fp,4(sp)
   27e04:	df000104 	addi	fp,sp,4
   27e08:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   27e0c:	d0a00117 	ldw	r2,-32764(gp)
   27e10:	10800217 	ldw	r2,8(r2)
   27e14:	100b883a 	mov	r5,r2
   27e18:	e13fff17 	ldw	r4,-4(fp)
   27e1c:	00283cc0 	call	283cc <putc>
#endif
#endif
}
   27e20:	e037883a 	mov	sp,fp
   27e24:	dfc00117 	ldw	ra,4(sp)
   27e28:	df000017 	ldw	fp,0(sp)
   27e2c:	dec00204 	addi	sp,sp,8
   27e30:	f800283a 	ret

00027e34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   27e34:	defffa04 	addi	sp,sp,-24
   27e38:	df000515 	stw	fp,20(sp)
   27e3c:	df000504 	addi	fp,sp,20
   27e40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27e44:	0005303a 	rdctl	r2,status
   27e48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27e4c:	e0fffc17 	ldw	r3,-16(fp)
   27e50:	00bfff84 	movi	r2,-2
   27e54:	1884703a 	and	r2,r3,r2
   27e58:	1001703a 	wrctl	status,r2
  
  return context;
   27e5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   27e60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   27e64:	e0bfff17 	ldw	r2,-4(fp)
   27e68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   27e6c:	e0bffd17 	ldw	r2,-12(fp)
   27e70:	10800017 	ldw	r2,0(r2)
   27e74:	e0fffd17 	ldw	r3,-12(fp)
   27e78:	18c00117 	ldw	r3,4(r3)
   27e7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   27e80:	e0bffd17 	ldw	r2,-12(fp)
   27e84:	10800117 	ldw	r2,4(r2)
   27e88:	e0fffd17 	ldw	r3,-12(fp)
   27e8c:	18c00017 	ldw	r3,0(r3)
   27e90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   27e94:	e0bffd17 	ldw	r2,-12(fp)
   27e98:	e0fffd17 	ldw	r3,-12(fp)
   27e9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   27ea0:	e0bffd17 	ldw	r2,-12(fp)
   27ea4:	e0fffd17 	ldw	r3,-12(fp)
   27ea8:	10c00015 	stw	r3,0(r2)
   27eac:	e0bffb17 	ldw	r2,-20(fp)
   27eb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27eb4:	e0bffe17 	ldw	r2,-8(fp)
   27eb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   27ebc:	0001883a 	nop
   27ec0:	e037883a 	mov	sp,fp
   27ec4:	df000017 	ldw	fp,0(sp)
   27ec8:	dec00104 	addi	sp,sp,4
   27ecc:	f800283a 	ret

00027ed0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   27ed0:	defffb04 	addi	sp,sp,-20
   27ed4:	dfc00415 	stw	ra,16(sp)
   27ed8:	df000315 	stw	fp,12(sp)
   27edc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   27ee0:	d0a00e17 	ldw	r2,-32712(gp)
   27ee4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   27ee8:	d0a6f517 	ldw	r2,-25644(gp)
   27eec:	10800044 	addi	r2,r2,1
   27ef0:	d0a6f515 	stw	r2,-25644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   27ef4:	00002e06 	br	27fb0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   27ef8:	e0bffd17 	ldw	r2,-12(fp)
   27efc:	10800017 	ldw	r2,0(r2)
   27f00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   27f04:	e0bffd17 	ldw	r2,-12(fp)
   27f08:	10800403 	ldbu	r2,16(r2)
   27f0c:	10803fcc 	andi	r2,r2,255
   27f10:	10000426 	beq	r2,zero,27f24 <alt_tick+0x54>
   27f14:	d0a6f517 	ldw	r2,-25644(gp)
   27f18:	1000021e 	bne	r2,zero,27f24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   27f1c:	e0bffd17 	ldw	r2,-12(fp)
   27f20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   27f24:	e0bffd17 	ldw	r2,-12(fp)
   27f28:	10800217 	ldw	r2,8(r2)
   27f2c:	d0e6f517 	ldw	r3,-25644(gp)
   27f30:	18801d36 	bltu	r3,r2,27fa8 <alt_tick+0xd8>
   27f34:	e0bffd17 	ldw	r2,-12(fp)
   27f38:	10800403 	ldbu	r2,16(r2)
   27f3c:	10803fcc 	andi	r2,r2,255
   27f40:	1000191e 	bne	r2,zero,27fa8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   27f44:	e0bffd17 	ldw	r2,-12(fp)
   27f48:	10800317 	ldw	r2,12(r2)
   27f4c:	e0fffd17 	ldw	r3,-12(fp)
   27f50:	18c00517 	ldw	r3,20(r3)
   27f54:	1809883a 	mov	r4,r3
   27f58:	103ee83a 	callr	r2
   27f5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   27f60:	e0bfff17 	ldw	r2,-4(fp)
   27f64:	1000031e 	bne	r2,zero,27f74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   27f68:	e13ffd17 	ldw	r4,-12(fp)
   27f6c:	0027e340 	call	27e34 <alt_alarm_stop>
   27f70:	00000d06 	br	27fa8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   27f74:	e0bffd17 	ldw	r2,-12(fp)
   27f78:	10c00217 	ldw	r3,8(r2)
   27f7c:	e0bfff17 	ldw	r2,-4(fp)
   27f80:	1887883a 	add	r3,r3,r2
   27f84:	e0bffd17 	ldw	r2,-12(fp)
   27f88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   27f8c:	e0bffd17 	ldw	r2,-12(fp)
   27f90:	10c00217 	ldw	r3,8(r2)
   27f94:	d0a6f517 	ldw	r2,-25644(gp)
   27f98:	1880032e 	bgeu	r3,r2,27fa8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   27f9c:	e0bffd17 	ldw	r2,-12(fp)
   27fa0:	00c00044 	movi	r3,1
   27fa4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   27fa8:	e0bffe17 	ldw	r2,-8(fp)
   27fac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   27fb0:	e0fffd17 	ldw	r3,-12(fp)
   27fb4:	d0a00e04 	addi	r2,gp,-32712
   27fb8:	18bfcf1e 	bne	r3,r2,27ef8 <__alt_data_end+0xfffe7ef8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   27fbc:	0001883a 	nop
}
   27fc0:	0001883a 	nop
   27fc4:	e037883a 	mov	sp,fp
   27fc8:	dfc00117 	ldw	ra,4(sp)
   27fcc:	df000017 	ldw	fp,0(sp)
   27fd0:	dec00204 	addi	sp,sp,8
   27fd4:	f800283a 	ret

00027fd8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   27fd8:	deffff04 	addi	sp,sp,-4
   27fdc:	df000015 	stw	fp,0(sp)
   27fe0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   27fe4:	000170fa 	wrctl	ienable,zero
}
   27fe8:	0001883a 	nop
   27fec:	e037883a 	mov	sp,fp
   27ff0:	df000017 	ldw	fp,0(sp)
   27ff4:	dec00104 	addi	sp,sp,4
   27ff8:	f800283a 	ret

00027ffc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   27ffc:	defffb04 	addi	sp,sp,-20
   28000:	dfc00415 	stw	ra,16(sp)
   28004:	df000315 	stw	fp,12(sp)
   28008:	df000304 	addi	fp,sp,12
   2800c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   28010:	d0a00417 	ldw	r2,-32752(gp)
   28014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   28018:	00003106 	br	280e0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2801c:	e0bffd17 	ldw	r2,-12(fp)
   28020:	10800217 	ldw	r2,8(r2)
   28024:	1009883a 	mov	r4,r2
   28028:	0020af80 	call	20af8 <strlen>
   2802c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   28030:	e0bffd17 	ldw	r2,-12(fp)
   28034:	10c00217 	ldw	r3,8(r2)
   28038:	e0bffe17 	ldw	r2,-8(fp)
   2803c:	10bfffc4 	addi	r2,r2,-1
   28040:	1885883a 	add	r2,r3,r2
   28044:	10800003 	ldbu	r2,0(r2)
   28048:	10803fcc 	andi	r2,r2,255
   2804c:	1080201c 	xori	r2,r2,128
   28050:	10bfe004 	addi	r2,r2,-128
   28054:	10800bd8 	cmpnei	r2,r2,47
   28058:	1000031e 	bne	r2,zero,28068 <alt_find_file+0x6c>
    {
      len -= 1;
   2805c:	e0bffe17 	ldw	r2,-8(fp)
   28060:	10bfffc4 	addi	r2,r2,-1
   28064:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   28068:	e0bffe17 	ldw	r2,-8(fp)
   2806c:	e0ffff17 	ldw	r3,-4(fp)
   28070:	1885883a 	add	r2,r3,r2
   28074:	10800003 	ldbu	r2,0(r2)
   28078:	10803fcc 	andi	r2,r2,255
   2807c:	1080201c 	xori	r2,r2,128
   28080:	10bfe004 	addi	r2,r2,-128
   28084:	10800be0 	cmpeqi	r2,r2,47
   28088:	1000081e 	bne	r2,zero,280ac <alt_find_file+0xb0>
   2808c:	e0bffe17 	ldw	r2,-8(fp)
   28090:	e0ffff17 	ldw	r3,-4(fp)
   28094:	1885883a 	add	r2,r3,r2
   28098:	10800003 	ldbu	r2,0(r2)
   2809c:	10803fcc 	andi	r2,r2,255
   280a0:	1080201c 	xori	r2,r2,128
   280a4:	10bfe004 	addi	r2,r2,-128
   280a8:	10000a1e 	bne	r2,zero,280d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   280ac:	e0bffd17 	ldw	r2,-12(fp)
   280b0:	10800217 	ldw	r2,8(r2)
   280b4:	e0fffe17 	ldw	r3,-8(fp)
   280b8:	180d883a 	mov	r6,r3
   280bc:	e17fff17 	ldw	r5,-4(fp)
   280c0:	1009883a 	mov	r4,r2
   280c4:	00282b00 	call	282b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   280c8:	1000021e 	bne	r2,zero,280d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   280cc:	e0bffd17 	ldw	r2,-12(fp)
   280d0:	00000706 	br	280f0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   280d4:	e0bffd17 	ldw	r2,-12(fp)
   280d8:	10800017 	ldw	r2,0(r2)
   280dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   280e0:	e0fffd17 	ldw	r3,-12(fp)
   280e4:	d0a00404 	addi	r2,gp,-32752
   280e8:	18bfcc1e 	bne	r3,r2,2801c <__alt_data_end+0xfffe801c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   280ec:	0005883a 	mov	r2,zero
}
   280f0:	e037883a 	mov	sp,fp
   280f4:	dfc00117 	ldw	ra,4(sp)
   280f8:	df000017 	ldw	fp,0(sp)
   280fc:	dec00204 	addi	sp,sp,8
   28100:	f800283a 	ret

00028104 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   28104:	defffa04 	addi	sp,sp,-24
   28108:	dfc00515 	stw	ra,20(sp)
   2810c:	df000415 	stw	fp,16(sp)
   28110:	dc000315 	stw	r16,12(sp)
   28114:	df000404 	addi	fp,sp,16
   28118:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   2811c:	00bffa04 	movi	r2,-24
   28120:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   28124:	e03ffc15 	stw	zero,-16(fp)
   28128:	00001d06 	br	281a0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   2812c:	040000f4 	movhi	r16,3
   28130:	84248404 	addi	r16,r16,-28144
   28134:	e0bffc17 	ldw	r2,-16(fp)
   28138:	01400304 	movi	r5,12
   2813c:	1009883a 	mov	r4,r2
   28140:	00209fc0 	call	209fc <__mulsi3>
   28144:	8085883a 	add	r2,r16,r2
   28148:	10800017 	ldw	r2,0(r2)
   2814c:	1000111e 	bne	r2,zero,28194 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   28150:	040000f4 	movhi	r16,3
   28154:	84248404 	addi	r16,r16,-28144
   28158:	e0bffc17 	ldw	r2,-16(fp)
   2815c:	01400304 	movi	r5,12
   28160:	1009883a 	mov	r4,r2
   28164:	00209fc0 	call	209fc <__mulsi3>
   28168:	8085883a 	add	r2,r16,r2
   2816c:	e0fffe17 	ldw	r3,-8(fp)
   28170:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   28174:	d0e00817 	ldw	r3,-32736(gp)
   28178:	e0bffc17 	ldw	r2,-16(fp)
   2817c:	1880020e 	bge	r3,r2,28188 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   28180:	e0bffc17 	ldw	r2,-16(fp)
   28184:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   28188:	e0bffc17 	ldw	r2,-16(fp)
   2818c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   28190:	00000606 	br	281ac <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   28194:	e0bffc17 	ldw	r2,-16(fp)
   28198:	10800044 	addi	r2,r2,1
   2819c:	e0bffc15 	stw	r2,-16(fp)
   281a0:	e0bffc17 	ldw	r2,-16(fp)
   281a4:	10800810 	cmplti	r2,r2,32
   281a8:	103fe01e 	bne	r2,zero,2812c <__alt_data_end+0xfffe812c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   281ac:	e0bffd17 	ldw	r2,-12(fp)
}
   281b0:	e6ffff04 	addi	sp,fp,-4
   281b4:	dfc00217 	ldw	ra,8(sp)
   281b8:	df000117 	ldw	fp,4(sp)
   281bc:	dc000017 	ldw	r16,0(sp)
   281c0:	dec00304 	addi	sp,sp,12
   281c4:	f800283a 	ret

000281c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   281c8:	defffe04 	addi	sp,sp,-8
   281cc:	df000115 	stw	fp,4(sp)
   281d0:	df000104 	addi	fp,sp,4
   281d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   281d8:	e0bfff17 	ldw	r2,-4(fp)
   281dc:	10bffe84 	addi	r2,r2,-6
   281e0:	10c00428 	cmpgeui	r3,r2,16
   281e4:	18001a1e 	bne	r3,zero,28250 <alt_exception_cause_generated_bad_addr+0x88>
   281e8:	100690ba 	slli	r3,r2,2
   281ec:	008000f4 	movhi	r2,3
   281f0:	10a08004 	addi	r2,r2,-32256
   281f4:	1885883a 	add	r2,r3,r2
   281f8:	10800017 	ldw	r2,0(r2)
   281fc:	1000683a 	jmp	r2
   28200:	00028240 	call	2824 <__alt_mem_RAM-0x1d7dc>
   28204:	00028240 	call	2824 <__alt_mem_RAM-0x1d7dc>
   28208:	00028250 	cmplti	zero,zero,2569
   2820c:	00028250 	cmplti	zero,zero,2569
   28210:	00028250 	cmplti	zero,zero,2569
   28214:	00028240 	call	2824 <__alt_mem_RAM-0x1d7dc>
   28218:	00028248 	cmpgei	zero,zero,2569
   2821c:	00028250 	cmplti	zero,zero,2569
   28220:	00028240 	call	2824 <__alt_mem_RAM-0x1d7dc>
   28224:	00028240 	call	2824 <__alt_mem_RAM-0x1d7dc>
   28228:	00028250 	cmplti	zero,zero,2569
   2822c:	00028240 	call	2824 <__alt_mem_RAM-0x1d7dc>
   28230:	00028248 	cmpgei	zero,zero,2569
   28234:	00028250 	cmplti	zero,zero,2569
   28238:	00028250 	cmplti	zero,zero,2569
   2823c:	00028240 	call	2824 <__alt_mem_RAM-0x1d7dc>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   28240:	00800044 	movi	r2,1
   28244:	00000306 	br	28254 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   28248:	0005883a 	mov	r2,zero
   2824c:	00000106 	br	28254 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   28250:	0005883a 	mov	r2,zero
  }
}
   28254:	e037883a 	mov	sp,fp
   28258:	df000017 	ldw	fp,0(sp)
   2825c:	dec00104 	addi	sp,sp,4
   28260:	f800283a 	ret

00028264 <atexit>:
   28264:	200b883a 	mov	r5,r4
   28268:	000f883a 	mov	r7,zero
   2826c:	000d883a 	mov	r6,zero
   28270:	0009883a 	mov	r4,zero
   28274:	00285ec1 	jmpi	285ec <__register_exitproc>

00028278 <exit>:
   28278:	defffe04 	addi	sp,sp,-8
   2827c:	000b883a 	mov	r5,zero
   28280:	dc000015 	stw	r16,0(sp)
   28284:	dfc00115 	stw	ra,4(sp)
   28288:	2021883a 	mov	r16,r4
   2828c:	00287040 	call	28704 <__call_exitprocs>
   28290:	008000f4 	movhi	r2,3
   28294:	10a93b04 	addi	r2,r2,-23316
   28298:	11000017 	ldw	r4,0(r2)
   2829c:	20800f17 	ldw	r2,60(r4)
   282a0:	10000126 	beq	r2,zero,282a8 <exit+0x30>
   282a4:	103ee83a 	callr	r2
   282a8:	8009883a 	mov	r4,r16
   282ac:	00288840 	call	28884 <_exit>

000282b0 <memcmp>:
   282b0:	01c000c4 	movi	r7,3
   282b4:	3980192e 	bgeu	r7,r6,2831c <memcmp+0x6c>
   282b8:	2144b03a 	or	r2,r4,r5
   282bc:	11c4703a 	and	r2,r2,r7
   282c0:	10000f26 	beq	r2,zero,28300 <memcmp+0x50>
   282c4:	20800003 	ldbu	r2,0(r4)
   282c8:	28c00003 	ldbu	r3,0(r5)
   282cc:	10c0151e 	bne	r2,r3,28324 <memcmp+0x74>
   282d0:	31bfff84 	addi	r6,r6,-2
   282d4:	01ffffc4 	movi	r7,-1
   282d8:	00000406 	br	282ec <memcmp+0x3c>
   282dc:	20800003 	ldbu	r2,0(r4)
   282e0:	28c00003 	ldbu	r3,0(r5)
   282e4:	31bfffc4 	addi	r6,r6,-1
   282e8:	10c00e1e 	bne	r2,r3,28324 <memcmp+0x74>
   282ec:	21000044 	addi	r4,r4,1
   282f0:	29400044 	addi	r5,r5,1
   282f4:	31fff91e 	bne	r6,r7,282dc <__alt_data_end+0xfffe82dc>
   282f8:	0005883a 	mov	r2,zero
   282fc:	f800283a 	ret
   28300:	20c00017 	ldw	r3,0(r4)
   28304:	28800017 	ldw	r2,0(r5)
   28308:	18bfee1e 	bne	r3,r2,282c4 <__alt_data_end+0xfffe82c4>
   2830c:	31bfff04 	addi	r6,r6,-4
   28310:	21000104 	addi	r4,r4,4
   28314:	29400104 	addi	r5,r5,4
   28318:	39bff936 	bltu	r7,r6,28300 <__alt_data_end+0xfffe8300>
   2831c:	303fe91e 	bne	r6,zero,282c4 <__alt_data_end+0xfffe82c4>
   28320:	003ff506 	br	282f8 <__alt_data_end+0xfffe82f8>
   28324:	10c5c83a 	sub	r2,r2,r3
   28328:	f800283a 	ret

0002832c <_putc_r>:
   2832c:	defffc04 	addi	sp,sp,-16
   28330:	dc000215 	stw	r16,8(sp)
   28334:	dfc00315 	stw	ra,12(sp)
   28338:	2021883a 	mov	r16,r4
   2833c:	20000226 	beq	r4,zero,28348 <_putc_r+0x1c>
   28340:	20800e17 	ldw	r2,56(r4)
   28344:	10001b26 	beq	r2,zero,283b4 <_putc_r+0x88>
   28348:	30800217 	ldw	r2,8(r6)
   2834c:	10bfffc4 	addi	r2,r2,-1
   28350:	30800215 	stw	r2,8(r6)
   28354:	10000a16 	blt	r2,zero,28380 <_putc_r+0x54>
   28358:	30800017 	ldw	r2,0(r6)
   2835c:	11400005 	stb	r5,0(r2)
   28360:	30800017 	ldw	r2,0(r6)
   28364:	10c00044 	addi	r3,r2,1
   28368:	30c00015 	stw	r3,0(r6)
   2836c:	10800003 	ldbu	r2,0(r2)
   28370:	dfc00317 	ldw	ra,12(sp)
   28374:	dc000217 	ldw	r16,8(sp)
   28378:	dec00404 	addi	sp,sp,16
   2837c:	f800283a 	ret
   28380:	30c00617 	ldw	r3,24(r6)
   28384:	10c00616 	blt	r2,r3,283a0 <_putc_r+0x74>
   28388:	30800017 	ldw	r2,0(r6)
   2838c:	00c00284 	movi	r3,10
   28390:	11400005 	stb	r5,0(r2)
   28394:	30800017 	ldw	r2,0(r6)
   28398:	11400003 	ldbu	r5,0(r2)
   2839c:	28fff11e 	bne	r5,r3,28364 <__alt_data_end+0xfffe8364>
   283a0:	8009883a 	mov	r4,r16
   283a4:	dfc00317 	ldw	ra,12(sp)
   283a8:	dc000217 	ldw	r16,8(sp)
   283ac:	dec00404 	addi	sp,sp,16
   283b0:	00284941 	jmpi	28494 <__swbuf_r>
   283b4:	d9400015 	stw	r5,0(sp)
   283b8:	d9800115 	stw	r6,4(sp)
   283bc:	0020ef00 	call	20ef0 <__sinit>
   283c0:	d9800117 	ldw	r6,4(sp)
   283c4:	d9400017 	ldw	r5,0(sp)
   283c8:	003fdf06 	br	28348 <__alt_data_end+0xfffe8348>

000283cc <putc>:
   283cc:	008000f4 	movhi	r2,3
   283d0:	defffc04 	addi	sp,sp,-16
   283d4:	10a93c04 	addi	r2,r2,-23312
   283d8:	dc000115 	stw	r16,4(sp)
   283dc:	14000017 	ldw	r16,0(r2)
   283e0:	dc400215 	stw	r17,8(sp)
   283e4:	dfc00315 	stw	ra,12(sp)
   283e8:	2023883a 	mov	r17,r4
   283ec:	80000226 	beq	r16,zero,283f8 <putc+0x2c>
   283f0:	80800e17 	ldw	r2,56(r16)
   283f4:	10001a26 	beq	r2,zero,28460 <putc+0x94>
   283f8:	28800217 	ldw	r2,8(r5)
   283fc:	10bfffc4 	addi	r2,r2,-1
   28400:	28800215 	stw	r2,8(r5)
   28404:	10000b16 	blt	r2,zero,28434 <putc+0x68>
   28408:	28800017 	ldw	r2,0(r5)
   2840c:	14400005 	stb	r17,0(r2)
   28410:	28800017 	ldw	r2,0(r5)
   28414:	10c00044 	addi	r3,r2,1
   28418:	28c00015 	stw	r3,0(r5)
   2841c:	10800003 	ldbu	r2,0(r2)
   28420:	dfc00317 	ldw	ra,12(sp)
   28424:	dc400217 	ldw	r17,8(sp)
   28428:	dc000117 	ldw	r16,4(sp)
   2842c:	dec00404 	addi	sp,sp,16
   28430:	f800283a 	ret
   28434:	28c00617 	ldw	r3,24(r5)
   28438:	10c00e16 	blt	r2,r3,28474 <putc+0xa8>
   2843c:	28800017 	ldw	r2,0(r5)
   28440:	01000284 	movi	r4,10
   28444:	14400005 	stb	r17,0(r2)
   28448:	28800017 	ldw	r2,0(r5)
   2844c:	10c00003 	ldbu	r3,0(r2)
   28450:	193ff01e 	bne	r3,r4,28414 <__alt_data_end+0xfffe8414>
   28454:	280d883a 	mov	r6,r5
   28458:	180b883a 	mov	r5,r3
   2845c:	00000706 	br	2847c <putc+0xb0>
   28460:	8009883a 	mov	r4,r16
   28464:	d9400015 	stw	r5,0(sp)
   28468:	0020ef00 	call	20ef0 <__sinit>
   2846c:	d9400017 	ldw	r5,0(sp)
   28470:	003fe106 	br	283f8 <__alt_data_end+0xfffe83f8>
   28474:	280d883a 	mov	r6,r5
   28478:	880b883a 	mov	r5,r17
   2847c:	8009883a 	mov	r4,r16
   28480:	dfc00317 	ldw	ra,12(sp)
   28484:	dc400217 	ldw	r17,8(sp)
   28488:	dc000117 	ldw	r16,4(sp)
   2848c:	dec00404 	addi	sp,sp,16
   28490:	00284941 	jmpi	28494 <__swbuf_r>

00028494 <__swbuf_r>:
   28494:	defffb04 	addi	sp,sp,-20
   28498:	dcc00315 	stw	r19,12(sp)
   2849c:	dc800215 	stw	r18,8(sp)
   284a0:	dc000015 	stw	r16,0(sp)
   284a4:	dfc00415 	stw	ra,16(sp)
   284a8:	dc400115 	stw	r17,4(sp)
   284ac:	2025883a 	mov	r18,r4
   284b0:	2827883a 	mov	r19,r5
   284b4:	3021883a 	mov	r16,r6
   284b8:	20000226 	beq	r4,zero,284c4 <__swbuf_r+0x30>
   284bc:	20800e17 	ldw	r2,56(r4)
   284c0:	10004226 	beq	r2,zero,285cc <__swbuf_r+0x138>
   284c4:	80800617 	ldw	r2,24(r16)
   284c8:	8100030b 	ldhu	r4,12(r16)
   284cc:	80800215 	stw	r2,8(r16)
   284d0:	2080020c 	andi	r2,r4,8
   284d4:	10003626 	beq	r2,zero,285b0 <__swbuf_r+0x11c>
   284d8:	80c00417 	ldw	r3,16(r16)
   284dc:	18003426 	beq	r3,zero,285b0 <__swbuf_r+0x11c>
   284e0:	2088000c 	andi	r2,r4,8192
   284e4:	9c403fcc 	andi	r17,r19,255
   284e8:	10001a26 	beq	r2,zero,28554 <__swbuf_r+0xc0>
   284ec:	80800017 	ldw	r2,0(r16)
   284f0:	81000517 	ldw	r4,20(r16)
   284f4:	10c7c83a 	sub	r3,r2,r3
   284f8:	1900200e 	bge	r3,r4,2857c <__swbuf_r+0xe8>
   284fc:	18c00044 	addi	r3,r3,1
   28500:	81000217 	ldw	r4,8(r16)
   28504:	11400044 	addi	r5,r2,1
   28508:	81400015 	stw	r5,0(r16)
   2850c:	213fffc4 	addi	r4,r4,-1
   28510:	81000215 	stw	r4,8(r16)
   28514:	14c00005 	stb	r19,0(r2)
   28518:	80800517 	ldw	r2,20(r16)
   2851c:	10c01e26 	beq	r2,r3,28598 <__swbuf_r+0x104>
   28520:	8080030b 	ldhu	r2,12(r16)
   28524:	1080004c 	andi	r2,r2,1
   28528:	10000226 	beq	r2,zero,28534 <__swbuf_r+0xa0>
   2852c:	00800284 	movi	r2,10
   28530:	88801926 	beq	r17,r2,28598 <__swbuf_r+0x104>
   28534:	8805883a 	mov	r2,r17
   28538:	dfc00417 	ldw	ra,16(sp)
   2853c:	dcc00317 	ldw	r19,12(sp)
   28540:	dc800217 	ldw	r18,8(sp)
   28544:	dc400117 	ldw	r17,4(sp)
   28548:	dc000017 	ldw	r16,0(sp)
   2854c:	dec00504 	addi	sp,sp,20
   28550:	f800283a 	ret
   28554:	81401917 	ldw	r5,100(r16)
   28558:	00b7ffc4 	movi	r2,-8193
   2855c:	21080014 	ori	r4,r4,8192
   28560:	2884703a 	and	r2,r5,r2
   28564:	80801915 	stw	r2,100(r16)
   28568:	80800017 	ldw	r2,0(r16)
   2856c:	8100030d 	sth	r4,12(r16)
   28570:	81000517 	ldw	r4,20(r16)
   28574:	10c7c83a 	sub	r3,r2,r3
   28578:	193fe016 	blt	r3,r4,284fc <__alt_data_end+0xfffe84fc>
   2857c:	800b883a 	mov	r5,r16
   28580:	9009883a 	mov	r4,r18
   28584:	0022e680 	call	22e68 <_fflush_r>
   28588:	1000071e 	bne	r2,zero,285a8 <__swbuf_r+0x114>
   2858c:	80800017 	ldw	r2,0(r16)
   28590:	00c00044 	movi	r3,1
   28594:	003fda06 	br	28500 <__alt_data_end+0xfffe8500>
   28598:	800b883a 	mov	r5,r16
   2859c:	9009883a 	mov	r4,r18
   285a0:	0022e680 	call	22e68 <_fflush_r>
   285a4:	103fe326 	beq	r2,zero,28534 <__alt_data_end+0xfffe8534>
   285a8:	00bfffc4 	movi	r2,-1
   285ac:	003fe206 	br	28538 <__alt_data_end+0xfffe8538>
   285b0:	800b883a 	mov	r5,r16
   285b4:	9009883a 	mov	r4,r18
   285b8:	00229a00 	call	229a0 <__swsetup_r>
   285bc:	103ffa1e 	bne	r2,zero,285a8 <__alt_data_end+0xfffe85a8>
   285c0:	8100030b 	ldhu	r4,12(r16)
   285c4:	80c00417 	ldw	r3,16(r16)
   285c8:	003fc506 	br	284e0 <__alt_data_end+0xfffe84e0>
   285cc:	0020ef00 	call	20ef0 <__sinit>
   285d0:	003fbc06 	br	284c4 <__alt_data_end+0xfffe84c4>

000285d4 <__swbuf>:
   285d4:	008000f4 	movhi	r2,3
   285d8:	10a93c04 	addi	r2,r2,-23312
   285dc:	280d883a 	mov	r6,r5
   285e0:	200b883a 	mov	r5,r4
   285e4:	11000017 	ldw	r4,0(r2)
   285e8:	00284941 	jmpi	28494 <__swbuf_r>

000285ec <__register_exitproc>:
   285ec:	defffa04 	addi	sp,sp,-24
   285f0:	dc000315 	stw	r16,12(sp)
   285f4:	040000f4 	movhi	r16,3
   285f8:	84293b04 	addi	r16,r16,-23316
   285fc:	80c00017 	ldw	r3,0(r16)
   28600:	dc400415 	stw	r17,16(sp)
   28604:	dfc00515 	stw	ra,20(sp)
   28608:	18805217 	ldw	r2,328(r3)
   2860c:	2023883a 	mov	r17,r4
   28610:	10003726 	beq	r2,zero,286f0 <__register_exitproc+0x104>
   28614:	10c00117 	ldw	r3,4(r2)
   28618:	010007c4 	movi	r4,31
   2861c:	20c00e16 	blt	r4,r3,28658 <__register_exitproc+0x6c>
   28620:	1a000044 	addi	r8,r3,1
   28624:	8800221e 	bne	r17,zero,286b0 <__register_exitproc+0xc4>
   28628:	18c00084 	addi	r3,r3,2
   2862c:	18c7883a 	add	r3,r3,r3
   28630:	18c7883a 	add	r3,r3,r3
   28634:	12000115 	stw	r8,4(r2)
   28638:	10c7883a 	add	r3,r2,r3
   2863c:	19400015 	stw	r5,0(r3)
   28640:	0005883a 	mov	r2,zero
   28644:	dfc00517 	ldw	ra,20(sp)
   28648:	dc400417 	ldw	r17,16(sp)
   2864c:	dc000317 	ldw	r16,12(sp)
   28650:	dec00604 	addi	sp,sp,24
   28654:	f800283a 	ret
   28658:	00800034 	movhi	r2,0
   2865c:	10800004 	addi	r2,r2,0
   28660:	10002626 	beq	r2,zero,286fc <__register_exitproc+0x110>
   28664:	01006404 	movi	r4,400
   28668:	d9400015 	stw	r5,0(sp)
   2866c:	d9800115 	stw	r6,4(sp)
   28670:	d9c00215 	stw	r7,8(sp)
   28674:	00000000 	call	0 <__alt_mem_RAM-0x20000>
   28678:	d9400017 	ldw	r5,0(sp)
   2867c:	d9800117 	ldw	r6,4(sp)
   28680:	d9c00217 	ldw	r7,8(sp)
   28684:	10001d26 	beq	r2,zero,286fc <__register_exitproc+0x110>
   28688:	81000017 	ldw	r4,0(r16)
   2868c:	10000115 	stw	zero,4(r2)
   28690:	02000044 	movi	r8,1
   28694:	22405217 	ldw	r9,328(r4)
   28698:	0007883a 	mov	r3,zero
   2869c:	12400015 	stw	r9,0(r2)
   286a0:	20805215 	stw	r2,328(r4)
   286a4:	10006215 	stw	zero,392(r2)
   286a8:	10006315 	stw	zero,396(r2)
   286ac:	883fde26 	beq	r17,zero,28628 <__alt_data_end+0xfffe8628>
   286b0:	18c9883a 	add	r4,r3,r3
   286b4:	2109883a 	add	r4,r4,r4
   286b8:	1109883a 	add	r4,r2,r4
   286bc:	21802215 	stw	r6,136(r4)
   286c0:	01800044 	movi	r6,1
   286c4:	12406217 	ldw	r9,392(r2)
   286c8:	30cc983a 	sll	r6,r6,r3
   286cc:	4992b03a 	or	r9,r9,r6
   286d0:	12406215 	stw	r9,392(r2)
   286d4:	21c04215 	stw	r7,264(r4)
   286d8:	01000084 	movi	r4,2
   286dc:	893fd21e 	bne	r17,r4,28628 <__alt_data_end+0xfffe8628>
   286e0:	11006317 	ldw	r4,396(r2)
   286e4:	218cb03a 	or	r6,r4,r6
   286e8:	11806315 	stw	r6,396(r2)
   286ec:	003fce06 	br	28628 <__alt_data_end+0xfffe8628>
   286f0:	18805304 	addi	r2,r3,332
   286f4:	18805215 	stw	r2,328(r3)
   286f8:	003fc606 	br	28614 <__alt_data_end+0xfffe8614>
   286fc:	00bfffc4 	movi	r2,-1
   28700:	003fd006 	br	28644 <__alt_data_end+0xfffe8644>

00028704 <__call_exitprocs>:
   28704:	defff504 	addi	sp,sp,-44
   28708:	df000915 	stw	fp,36(sp)
   2870c:	dd400615 	stw	r21,24(sp)
   28710:	dc800315 	stw	r18,12(sp)
   28714:	dfc00a15 	stw	ra,40(sp)
   28718:	ddc00815 	stw	r23,32(sp)
   2871c:	dd800715 	stw	r22,28(sp)
   28720:	dd000515 	stw	r20,20(sp)
   28724:	dcc00415 	stw	r19,16(sp)
   28728:	dc400215 	stw	r17,8(sp)
   2872c:	dc000115 	stw	r16,4(sp)
   28730:	d9000015 	stw	r4,0(sp)
   28734:	2839883a 	mov	fp,r5
   28738:	04800044 	movi	r18,1
   2873c:	057fffc4 	movi	r21,-1
   28740:	008000f4 	movhi	r2,3
   28744:	10a93b04 	addi	r2,r2,-23316
   28748:	12000017 	ldw	r8,0(r2)
   2874c:	45005217 	ldw	r20,328(r8)
   28750:	44c05204 	addi	r19,r8,328
   28754:	a0001c26 	beq	r20,zero,287c8 <__call_exitprocs+0xc4>
   28758:	a0800117 	ldw	r2,4(r20)
   2875c:	15ffffc4 	addi	r23,r2,-1
   28760:	b8000d16 	blt	r23,zero,28798 <__call_exitprocs+0x94>
   28764:	14000044 	addi	r16,r2,1
   28768:	8421883a 	add	r16,r16,r16
   2876c:	8421883a 	add	r16,r16,r16
   28770:	84402004 	addi	r17,r16,128
   28774:	a463883a 	add	r17,r20,r17
   28778:	a421883a 	add	r16,r20,r16
   2877c:	e0001e26 	beq	fp,zero,287f8 <__call_exitprocs+0xf4>
   28780:	80804017 	ldw	r2,256(r16)
   28784:	e0801c26 	beq	fp,r2,287f8 <__call_exitprocs+0xf4>
   28788:	bdffffc4 	addi	r23,r23,-1
   2878c:	843fff04 	addi	r16,r16,-4
   28790:	8c7fff04 	addi	r17,r17,-4
   28794:	bd7ff91e 	bne	r23,r21,2877c <__alt_data_end+0xfffe877c>
   28798:	00800034 	movhi	r2,0
   2879c:	10800004 	addi	r2,r2,0
   287a0:	10000926 	beq	r2,zero,287c8 <__call_exitprocs+0xc4>
   287a4:	a0800117 	ldw	r2,4(r20)
   287a8:	1000301e 	bne	r2,zero,2886c <__call_exitprocs+0x168>
   287ac:	a0800017 	ldw	r2,0(r20)
   287b0:	10003226 	beq	r2,zero,2887c <__call_exitprocs+0x178>
   287b4:	a009883a 	mov	r4,r20
   287b8:	98800015 	stw	r2,0(r19)
   287bc:	00000000 	call	0 <__alt_mem_RAM-0x20000>
   287c0:	9d000017 	ldw	r20,0(r19)
   287c4:	a03fe41e 	bne	r20,zero,28758 <__alt_data_end+0xfffe8758>
   287c8:	dfc00a17 	ldw	ra,40(sp)
   287cc:	df000917 	ldw	fp,36(sp)
   287d0:	ddc00817 	ldw	r23,32(sp)
   287d4:	dd800717 	ldw	r22,28(sp)
   287d8:	dd400617 	ldw	r21,24(sp)
   287dc:	dd000517 	ldw	r20,20(sp)
   287e0:	dcc00417 	ldw	r19,16(sp)
   287e4:	dc800317 	ldw	r18,12(sp)
   287e8:	dc400217 	ldw	r17,8(sp)
   287ec:	dc000117 	ldw	r16,4(sp)
   287f0:	dec00b04 	addi	sp,sp,44
   287f4:	f800283a 	ret
   287f8:	a0800117 	ldw	r2,4(r20)
   287fc:	80c00017 	ldw	r3,0(r16)
   28800:	10bfffc4 	addi	r2,r2,-1
   28804:	15c01426 	beq	r2,r23,28858 <__call_exitprocs+0x154>
   28808:	80000015 	stw	zero,0(r16)
   2880c:	183fde26 	beq	r3,zero,28788 <__alt_data_end+0xfffe8788>
   28810:	95c8983a 	sll	r4,r18,r23
   28814:	a0806217 	ldw	r2,392(r20)
   28818:	a5800117 	ldw	r22,4(r20)
   2881c:	2084703a 	and	r2,r4,r2
   28820:	10000b26 	beq	r2,zero,28850 <__call_exitprocs+0x14c>
   28824:	a0806317 	ldw	r2,396(r20)
   28828:	2088703a 	and	r4,r4,r2
   2882c:	20000c1e 	bne	r4,zero,28860 <__call_exitprocs+0x15c>
   28830:	89400017 	ldw	r5,0(r17)
   28834:	d9000017 	ldw	r4,0(sp)
   28838:	183ee83a 	callr	r3
   2883c:	a0800117 	ldw	r2,4(r20)
   28840:	15bfbf1e 	bne	r2,r22,28740 <__alt_data_end+0xfffe8740>
   28844:	98800017 	ldw	r2,0(r19)
   28848:	153fcf26 	beq	r2,r20,28788 <__alt_data_end+0xfffe8788>
   2884c:	003fbc06 	br	28740 <__alt_data_end+0xfffe8740>
   28850:	183ee83a 	callr	r3
   28854:	003ff906 	br	2883c <__alt_data_end+0xfffe883c>
   28858:	a5c00115 	stw	r23,4(r20)
   2885c:	003feb06 	br	2880c <__alt_data_end+0xfffe880c>
   28860:	89000017 	ldw	r4,0(r17)
   28864:	183ee83a 	callr	r3
   28868:	003ff406 	br	2883c <__alt_data_end+0xfffe883c>
   2886c:	a0800017 	ldw	r2,0(r20)
   28870:	a027883a 	mov	r19,r20
   28874:	1029883a 	mov	r20,r2
   28878:	003fb606 	br	28754 <__alt_data_end+0xfffe8754>
   2887c:	0005883a 	mov	r2,zero
   28880:	003ffb06 	br	28870 <__alt_data_end+0xfffe8870>

00028884 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   28884:	defffd04 	addi	sp,sp,-12
   28888:	df000215 	stw	fp,8(sp)
   2888c:	df000204 	addi	fp,sp,8
   28890:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   28894:	0001883a 	nop
   28898:	e0bfff17 	ldw	r2,-4(fp)
   2889c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   288a0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   288a4:	10000226 	beq	r2,zero,288b0 <_exit+0x2c>
    ALT_SIM_FAIL();
   288a8:	002af070 	cmpltui	zero,zero,43969
   288ac:	00000106 	br	288b4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   288b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   288b4:	003fff06 	br	288b4 <__alt_data_end+0xfffe88b4>
