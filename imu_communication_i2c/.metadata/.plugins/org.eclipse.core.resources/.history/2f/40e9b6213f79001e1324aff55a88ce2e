//IMU_communication

#include <stdio.h>
#include <stdlib.h>
#include "system.h"
#include <string.h>
#include "altera_avalon_pio_regs.h"
#include <altera_avalon_uart.h>
#include "altera_avalon_uart_regs.h"
//#include <altera_avalon_i2c.h>
//#include "altera_avalon_i2c_regs.h"
#include "sys/alt_irq.h"
#include <math.h>
#include <io.h>
#include <unistd.h>


#define interval 20000
#define TRUE 1
#define FALSE 0
//REGISTER DEFINITION START
#define SENSORS_GRAVITY_EARTH             (9.80665F)              /**< Earth's gravity in m/s^2 */
#define SENSORS_GRAVITY_MOON              (1.6F)                  /**< The moon's gravity in m/s^2 */
#define SENSORS_GRAVITY_SUN               (275.0F)                /**< The sun's gravity in m/s^2 */
#define SENSORS_GRAVITY_STANDARD          (SENSORS_GRAVITY_EARTH)
#define SENSORS_MAGFIELD_EARTH_MAX        (60.0F)                 /**< Maximum magnetic field on Earth's surface */
#define SENSORS_MAGFIELD_EARTH_MIN        (30.0F)                 /**< Minimum magnetic field on Earth's surface */
#define SENSORS_PRESSURE_SEALEVELHPA      (1013.25F)              /**< Average sea level pressure is 1013.25 hPa */
#define SENSORS_DPS_TO_RADS               (0.017453293F)          /**< Degrees/s to rad/s multiplier */
#define SENSORS_GAUSS_TO_MICROTESLA       (100)                   /**< Gauss to micro-Tesla multiplier */

#define BNO055_ADDR 0x28
#define STOP_BIT 0x100
//Power mode setting
#define PWR_MODE_ADDR 0x3e
#define NORMAL_MODE 0x00
#define LOW_MODE 0x01
#define SUSPEND_MODE 0x02

//Operation mode setting
#define OPR_MODE_ADDR 0x3d
#define CONFIG_MODE 0x00
#define GYRONLY_MODE 0x03
#define ACC_GYRO_MODE 0x05
#define AMG_MODE 0x07
#define IMU_MODE 0x0c

//Status registers
#define CHIP_ID 0x00
#define SYS_CLK_STAT 0x38


//加速度アドレス
#define ACC_DATA_X_LSB 0x08
#define ACC_DATA_X_MSB 0x09
#define ACC_DATA_Y_LSB 0x0a
#define ACC_DATA_Y_MSB 0x0b
#define ACC_DATA_Z_LSB 0x0c
#define ACC_DATA_Z_MSB 0x0d
//角速度アドレス
#define GYR_DATA_X_LSB 0x14
#define GYR_DATA_X_MSB 0x15
#define GYR_DATA_Y_LSB 0x16
#define GYR_DATA_Y_MSB 0x17
#define GYR_DATA_Z_LSB 0x18
#define GYR_DATA_Z_MSB 0x19

//クォータニオン(姿勢）
#define QUA_DATA_W_LSB 0x20
#define QUA_DATA_W_MSB 0x21
#define QUA_DATA_X_LSB 0x22
#define QUA_DATA_X_MSB 0x23
#define QUA_DATA_Y_LSB 0x24
#define QUA_DATA_Y_MSB 0x25
#define QUA_DATA_Z_LSB 0x26
#define QUA_DATA_Z_MSB 0x27

#define ENABLE 0x3//BUS_SPEED:高速(400kbps),ENABLE:有効
#define DISABLE 0x0

//UART
#define UART_START 0xaa
#define UART_READ 0x01
#define UART_WRITE 0x00
#define RES_SUCCESS 0xbb
#define RES_FAIL 0xee


unsigned short quat_w,quat_x,quat_y,quat_z;


unsigned short IMU_READ(short adr){
	int i;
	short rd_data;
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,UART_START);//start byte
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,UART_READ);//start byte
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,adr);//address
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,1);//length
	for(i=0;i<10000;i++){
	if(IORD_ALTERA_AVALON_UART_RXDATA(UART2_BASE)==0xbb){
	rd_data=IORD_ALTERA_AVALON_UART_RXDATA(UART2_BASE);
	break;
	}else if(IORD_ALTERA_AVALON_UART_RXDATA(UART2_BASE)==0xee){
		rd_data=IORD_ALTERA_AVALON_UART_RXDATA(UART2_BASE);
		printf("Error:%04d\n",rd_data);
		break;
	}
	}
	return rd_data;
}

void IMU_WRITE(short adr,short data){
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,UART_START);//start byte
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,UART_WRITE);//write
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,adr);//start byte
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,1);//length
	IOWR_ALTERA_AVALON_UART_TXDATA(UART2_BASE,data);//data
	}

int IMU_init(void){//IMU,I2Cの初期化関数

	return 0;
}

int main(){
	printf("I2C_START\n");
	IMU_init();

	while(1){
//		quat_w=IMU_READ(QUA_DATA_W_LSB)|(IMU_READ(QUA_DATA_W_MSB)<<8);
//		quat_x=IMU_READ(QUA_DATA_X_LSB)|(IMU_READ(QUA_DATA_X_MSB)<<8);
//		quat_y=IMU_READ(QUA_DATA_Y_LSB)|(IMU_READ(QUA_DATA_Y_MSB)<<8);
//		quat_z=IMU_READ(QUA_DATA_Z_LSB)|(IMU_READ(QUA_DATA_Z_MSB)<<8);

		quat_w=IMU_READ(QUA_DATA_W_LSB);
		quat_x=IMU_READ(QUA_DATA_W_LSB)|(IMU_READ(QUA_DATA_W_MSB)<<8);

        printf("quat_w=%04d ",quat_w);
        printf("quat_x=%04d ",quat_x);
        printf("quat_y=%04d ",quat_y);
        printf("quat_z=%04d ",quat_z);
        printf("\n");

	}
return 0;
}
