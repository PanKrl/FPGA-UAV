#include <stdio.h>
#include <stdlib.h>
#include "sys/alt_stdio.h"
#include "system.h"
#include <string.h>
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"
#include "sys/alt_irq.h"
#include <math.h>
#include <io.h>

#define BAUD_RATE 100000
#define TIMEOUT 25000
#define MINDELTA 200
#define LEVELOFF 100
#define MAX_NB_CHANNEL 10
#define SBUS_SYNCBYTE 0x0F


int sbus[25] = {0};

    // 16 analog, 2 digital channels
    unsigned int rcChannel[18] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
    unsigned int sbusIndex = 0;
#if defined (UseSBUSRSSIReader)
    unsigned short sbusFailSafeCount = 0;
    unsigned long sbusFrameCount = 0;
    unsigned short sbusRate = 0;
#endif
void readSBUS(){
while (SERIAL_SBUS.available()) {

        int val = SERIAL_SBUS.read();
        //Serial.println(val);
        if (sbusIndex == 0 && val != SBUS_SYNCBYTE) {
          continue;
        }

        sbus[sbusIndex] = val;
        sbusIndex++;
        if (sbusIndex == 25) {
          //Serial.println("OK");
          //Serial.println(sbus[24]);
          sbusIndex = 0;
          // check stop bit before updating buffers
          if (sbus[24] != 0x0) {

            // 1ChÇ…Ç¬Ç´11bitÇ»ÇÃÇ≈ÅAÇ∏ÇÁÇµÇ»Ç™ÇÁäiî[ÅB
            // 368Å`1680ÇÃêîílÇÃèoèàÇÕïsñæ

            rcChannel[0]  = ((sbus[1]     | sbus[2] << 8)  & 0x07FF);
            rcChannel[1]  = ((sbus[2] >> 3  | sbus[3] << 5)  & 0x07FF);
            rcChannel[2] = ((sbus[3] >> 6  | sbus[4] << 2   | sbus[5] << 10) & 0x07FF);
            rcChannel[3]  = ((sbus[5] >> 1  | sbus[6] << 7)  & 0x07FF);
            rcChannel[4]   = ((sbus[6] >> 4  | sbus[7] << 4)  & 0x07FF);
            rcChannel[5]   = ((sbus[7] >> 7  | sbus[8] << 1   | sbus[9] << 9) & 0x07FF);
            rcChannel[6]   = ((sbus[9] >> 2  | sbus[10] << 6) & 0x07FF);
            rcChannel[7]   = ((sbus[10] >> 5 | sbus[11] << 3) & 0x07FF);
            rcChannel[8]   = ((sbus[12]    | sbus[13] << 8) & 0x07FF);
            rcChannel[9]   = ((sbus[13] >> 3 | sbus[14] << 5) & 0x07FF);
            rcChannel[10]   = ((sbus[14] >> 6 | sbus[15] << 2 | sbus[16] << 10) & 0x07FF);
            rcChannel[11]   = ((sbus[16] >> 1 | sbus[17] << 7) & 0x07FF);
            rcChannel[12]   = ((sbus[17] >> 4  | sbus[18] << 4)  & 0x07FF);
            rcChannel[13]   = ((sbus[18] >> 7  | sbus[19] << 1   | sbus[20] << 9) & 0x07FF);
            rcChannel[14]   = ((sbus[20] >> 2  | sbus[21] << 6) & 0x07FF);
            rcChannel[15]   = ((sbus[21] >> 5 | sbus[22] << 3) & 0x07FF);

#ifdef UseSBUSRSSIReader
            if (sbusRate == 0) {
              sbusFrameCount++;
            }
            if (((sbus[23] >> 3) & 0x0001)) {
              if ((sbusRate > 0) && (sbusFailSafeCount < sbusRate)) {
                sbusFailSafeCount++;
              }
            } else if (sbusFailSafeCount > 0) {
              sbusFailSafeCount--;
            }
#endif
          }
        }
      }
    }


    int16_t getData(uint8_t ch) {
      return rcChannel[ch];
    };


int main(){
	printf("Start SBUS Protocol!\n");

while(1){
readSBUS();

}

return 0;

}

