
PWMCtrl_test.elf:     file format elf32-littlenios2
PWMCtrl_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000001a4 memsz 0x000001a4 flags r-x
    LOAD off    0x000011c4 vaddr 0x000041c4 paddr 0x000041c8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000011cc vaddr 0x000041cc paddr 0x000041cc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000011c8  2**0
                  CONTENTS
  2 .text         000001a4  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000041c4  000041cc  000011c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  000041c4  000041c8  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000041cc  000041cc  000011cc  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000041d8  000041d8  000011c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000108  00000000  00000000  000011f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000796  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003f4  00000000  00000000  00001a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000424  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000118  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000041b  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000021  00000000  00000000  000027db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000027fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00002810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000035b2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000035b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000035ba  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000035bb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000035d4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  000035da  2**0
                  CONTENTS, READONLY
 29 .jdi          0000444f  00000000  00000000  00003613  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0009204f  00000000  00000000  00007a62  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
000041c4 l    d  .rodata	00000000 .rodata
000041c4 l    d  .rwdata	00000000 .rwdata
000041cc l    d  .bss	00000000 .bss
000041d8 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PWMCtrl_test_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 PWMCtrl_test.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00004164 g     F .text	0000002c alt_main
000041c8 g       *ABS*	00000000 __flash_rwdata_start
000041bc g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000041d0 g     O .bss	00000004 alt_argv
0000c1c4 g       *ABS*	00000000 _gp
000041d8 g       *ABS*	00000000 __bss_end
000041b4 g     F .text	00000004 alt_dcache_flush_all
000041c8 g       *ABS*	00000000 __ram_rwdata_end
000041c4 g       *ABS*	00000000 __ram_rodata_end
000041d8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004020 g     F .text	0000003c _start
000041b0 g     F .text	00000004 alt_sys_init
000041c4 g       *ABS*	00000000 __ram_rwdata_start
000041c4 g       *ABS*	00000000 __ram_rodata_start
000041d8 g       *ABS*	00000000 __alt_stack_base
000041cc g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000028 main
00004000 g       *ABS*	00000000 __alt_mem_RAM
000041cc g     O .bss	00000004 alt_envp
000041c4 g     O .rwdata	00000004 JTAG
000041c4 g       *ABS*	00000000 __flash_rodata_start
00004190 g     F .text	00000020 alt_irq_init
000041d4 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
000041c8 g       *ABS*	00000000 _edata
000041d8 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
000041b8 g     F .text	00000004 alt_icache_flush_all
00004084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b07114 	ori	gp,gp,49604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10907314 	ori	r2,r2,16844

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d07614 	ori	r3,r3,16856

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff7e80>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00040840 	call	4084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041640 	call	4164 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff7e94>

0000405c <main>:
//                IOWR_ALTERA_AVALON_PIO_DATA(LED6_BASE,0);
//                IOWR_ALTERA_AVALON_PIO_DATA(LED7_BASE,0);
//      	    }
//        }

	        IOWR_ALTERA_AVALON_PIO_DATA(CYCLE_BASE,125000);
    405c:	00c000b4 	movhi	r3,2
    4060:	00a43c14 	movui	r2,37104
    4064:	18fa1204 	addi	r3,r3,-6072
    4068:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_DATA(DUTY_BASE,DUTY);//5%
    406c:	00c00074 	movhi	r3,1
    4070:	00a43814 	movui	r2,37088
    4074:	18d33a44 	addi	r3,r3,19689
    4078:	10c00035 	stwio	r3,0(r2)

      return 0;
}
    407c:	0005883a 	mov	r2,zero
    4080:	f800283a 	ret

00004084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4084:	deffff04 	addi	sp,sp,-4
    4088:	01000034 	movhi	r4,0
    408c:	01400034 	movhi	r5,0
    4090:	dfc00015 	stw	ra,0(sp)
    4094:	21107104 	addi	r4,r4,16836
    4098:	29507204 	addi	r5,r5,16840

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    409c:	2140061e 	bne	r4,r5,40b8 <alt_load+0x34>
    40a0:	01000034 	movhi	r4,0
    40a4:	01400034 	movhi	r5,0
    40a8:	21100804 	addi	r4,r4,16416
    40ac:	29500804 	addi	r5,r5,16416
    40b0:	2140121e 	bne	r4,r5,40fc <alt_load+0x78>
    40b4:	00000b06 	br	40e4 <alt_load+0x60>
    40b8:	00c00034 	movhi	r3,0
    40bc:	18d07204 	addi	r3,r3,16840
    40c0:	1907c83a 	sub	r3,r3,r4
    40c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    40c8:	10fff526 	beq	r2,r3,40a0 <_gp+0xffff7edc>
    {
      *to++ = *from++;
    40cc:	114f883a 	add	r7,r2,r5
    40d0:	39c00017 	ldw	r7,0(r7)
    40d4:	110d883a 	add	r6,r2,r4
    40d8:	10800104 	addi	r2,r2,4
    40dc:	31c00015 	stw	r7,0(r6)
    40e0:	003ff906 	br	40c8 <_gp+0xffff7f04>
    40e4:	01000034 	movhi	r4,0
    40e8:	01400034 	movhi	r5,0
    40ec:	21107104 	addi	r4,r4,16836
    40f0:	29507104 	addi	r5,r5,16836

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    40f4:	2140101e 	bne	r4,r5,4138 <alt_load+0xb4>
    40f8:	00000b06 	br	4128 <alt_load+0xa4>
    40fc:	00c00034 	movhi	r3,0
    4100:	18d00804 	addi	r3,r3,16416
    4104:	1907c83a 	sub	r3,r3,r4
    4108:	0005883a 	mov	r2,zero
  {
    while( to != end )
    410c:	10fff526 	beq	r2,r3,40e4 <_gp+0xffff7f20>
    {
      *to++ = *from++;
    4110:	114f883a 	add	r7,r2,r5
    4114:	39c00017 	ldw	r7,0(r7)
    4118:	110d883a 	add	r6,r2,r4
    411c:	10800104 	addi	r2,r2,4
    4120:	31c00015 	stw	r7,0(r6)
    4124:	003ff906 	br	410c <_gp+0xffff7f48>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4128:	00041b40 	call	41b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    412c:	dfc00017 	ldw	ra,0(sp)
    4130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4134:	00041b81 	jmpi	41b8 <alt_icache_flush_all>
    4138:	00c00034 	movhi	r3,0
    413c:	18d07104 	addi	r3,r3,16836
    4140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4144:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4148:	18bff726 	beq	r3,r2,4128 <_gp+0xffff7f64>
    {
      *to++ = *from++;
    414c:	114f883a 	add	r7,r2,r5
    4150:	39c00017 	ldw	r7,0(r7)
    4154:	110d883a 	add	r6,r2,r4
    4158:	10800104 	addi	r2,r2,4
    415c:	31c00015 	stw	r7,0(r6)
    4160:	003ff906 	br	4148 <_gp+0xffff7f84>

00004164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    416c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4170:	00041900 	call	4190 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4174:	00041b00 	call	41b0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4178:	d1a00217 	ldw	r6,-32760(gp)
    417c:	d1600317 	ldw	r5,-32756(gp)
    4180:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4184:	dfc00017 	ldw	ra,0(sp)
    4188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    418c:	000405c1 	jmpi	405c <main>

00004190 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4190:	deffff04 	addi	sp,sp,-4
    4194:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, NIOS2);
    4198:	00041bc0 	call	41bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    419c:	00800044 	movi	r2,1
    41a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    41a4:	dfc00017 	ldw	ra,0(sp)
    41a8:	dec00104 	addi	sp,sp,4
    41ac:	f800283a 	ret

000041b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    41b0:	f800283a 	ret

000041b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    41b4:	f800283a 	ret

000041b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    41b8:	f800283a 	ret

000041bc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    41bc:	000170fa 	wrctl	ienable,zero
    41c0:	f800283a 	ret
